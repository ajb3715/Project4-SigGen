
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  0800d488  0800d488  0001d488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db84  0800db84  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db84  0800db84  0001db84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db8c  0800db8c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db8c  0800db8c  0001db8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db90  0800db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800db94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a68  200001d8  0800dd6c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c40  0800dd6c  00023c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca45  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9f  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  00040930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  00042230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bcd  00000000  00000000  00043593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be28  00000000  00000000  00048160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101788  00000000  00000000  00063f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fac  00000000  00000000  00165710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0016d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d46c 	.word	0x0800d46c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d46c 	.word	0x0800d46c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	command = (struct user_command *)malloc(sizeof(struct user_command));
 8000ff4:	2018      	movs	r0, #24
 8000ff6:	f008 f871 	bl	80090dc <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <main+0xcc>)
 8001000:	601a      	str	r2, [r3, #0]
		if(command == NULL){
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <main+0xcc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <main+0x20>
			exit(99);
 800100a:	2063      	movs	r0, #99	; 0x63
 800100c:	f007 fd7e 	bl	8008b0c <exit>
		}
		command->channel = 0;
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <main+0xcc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
		command->frequency = 0.0;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
		command->maxv = 0.0;
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <main+0xcc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
		command->minv = 0.0;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <main+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
		command->noise = 0;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <main+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
		command->wave = 'n';
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <main+0xcc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	226e      	movs	r2, #110	; 0x6e
 8001044:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 ff56 	bl	8001ef6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f851 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9e5 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 f9bd 	bl	80013d0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001056:	f000 f89d 	bl	8001194 <MX_DAC1_Init>
  MX_RNG_Init();
 800105a:	f000 f8d9 	bl	8001210 <MX_RNG_Init>
  MX_TIM2_Init();
 800105e:	f000 f8eb 	bl	8001238 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001062:	f000 f985 	bl	8001370 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001066:	f000 f935 	bl	80012d4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <main+0xd0>)
 800106c:	f003 f916 	bl	800429c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <main+0xd4>)
 8001072:	f003 f913 	bl	800429c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001076:	f004 faa3 	bl	80055c0 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <main+0xd8>)
 800107c:	f004 fbb9 	bl	80057f2 <osMutexNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <main+0xdc>)
 8001084:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (32, sizeof(uint64_t), &CommandQueue_attributes);
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <main+0xe0>)
 8001088:	2108      	movs	r1, #8
 800108a:	2020      	movs	r0, #32
 800108c:	f004 fcbf 	bl	8005a0e <osMessageQueueNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <main+0xe4>)
 8001094:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DAC1 */
  DAC1Handle = osThreadNew(StartDAC, NULL, &DAC1_attributes);
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <main+0xe8>)
 8001098:	2100      	movs	r1, #0
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <main+0xec>)
 800109c:	f004 fada 	bl	8005654 <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <main+0xf0>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* creation of Reciever */
  RecieverHandle = osThreadNew(StartReciever, NULL, &Reciever_attributes);
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <main+0xf4>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <main+0xf8>)
 80010ac:	f004 fad2 	bl	8005654 <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <main+0xfc>)
 80010b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010b6:	f004 faa7 	bl	8005608 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0xca>
 80010bc:	200003d8 	.word	0x200003d8
 80010c0:	200002a8 	.word	0x200002a8
 80010c4:	200002f4 	.word	0x200002f4
 80010c8:	0800d6a8 	.word	0x0800d6a8
 80010cc:	200003d4 	.word	0x200003d4
 80010d0:	0800d690 	.word	0x0800d690
 80010d4:	200003d0 	.word	0x200003d0
 80010d8:	0800d648 	.word	0x0800d648
 80010dc:	08001451 	.word	0x08001451
 80010e0:	200003c8 	.word	0x200003c8
 80010e4:	0800d66c 	.word	0x0800d66c
 80010e8:	0800193d 	.word	0x0800193d
 80010ec:	200003cc 	.word	0x200003cc

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	; 0x58
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2244      	movs	r2, #68	; 0x44
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fc3e 	bl	800a980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001112:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001116:	f001 fd01 	bl	8002b1c <HAL_PWREx_ControlVoltageScaling>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001120:	f000 fc14 	bl	800194c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001124:	2310      	movs	r3, #16
 8001126:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001138:	2301      	movs	r3, #1
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001140:	2328      	movs	r3, #40	; 0x28
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001144:	2307      	movs	r3, #7
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fd37 	bl	8002bc8 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001160:	f000 fbf4 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2303      	movs	r3, #3
 800116a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2104      	movs	r1, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f8ff 	bl	8003380 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001188:	f000 fbe0 	bl	800194c <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3758      	adds	r7, #88	; 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2224      	movs	r2, #36	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fbed 	bl	800a980 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_DAC1_Init+0x74>)
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_DAC1_Init+0x78>)
 80011aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_DAC1_Init+0x74>)
 80011ae:	f001 f84c 	bl	800224a <HAL_DAC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011b8:	f000 fbc8 	bl	800194c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011c0:	2324      	movs	r3, #36	; 0x24
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_DAC1_Init+0x74>)
 80011d8:	f001 f859 	bl	800228e <HAL_DAC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011e2:	f000 fbb3 	bl	800194c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 80011e6:	231c      	movs	r3, #28
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2210      	movs	r2, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_DAC1_Init+0x74>)
 80011f2:	f001 f84c 	bl	800228e <HAL_DAC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80011fc:	f000 fba6 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001f4 	.word	0x200001f4
 800120c:	40007400 	.word	0x40007400

08001210 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_RNG_Init+0x20>)
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <MX_RNG_Init+0x24>)
 8001218:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_RNG_Init+0x20>)
 800121c:	f002 ff90 	bl	8004140 <HAL_RNG_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001226:	f000 fb91 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000298 	.word	0x20000298
 8001234:	50060800 	.word	0x50060800

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f002 ffb5 	bl	80041ee <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 fb5f 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129c:	f003 f866 	bl	800436c <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a6:	f000 fb51 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012aa:	2320      	movs	r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012b8:	f003 fa56 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c2:	f000 fb43 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200002a8 	.word	0x200002a8

080012d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM5_Init+0x94>)
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MX_TIM5_Init+0x98>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM5_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM5_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM5_Init+0x94>)
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_TIM5_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM5_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_TIM5_Init+0x94>)
 800131a:	f002 ff68 	bl	80041ee <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001324:	f000 fb12 	bl	800194c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM5_Init+0x94>)
 8001336:	f003 f819 	bl	800436c <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001340:	f000 fb04 	bl	800194c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001344:	2320      	movs	r3, #32
 8001346:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM5_Init+0x94>)
 8001352:	f003 fa09 	bl	8004768 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 faf6 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002f4 	.word	0x200002f4
 800136c:	40000c00 	.word	0x40000c00

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_USART2_UART_Init+0x5c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013b4:	f003 fa60 	bl	8004878 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 fac5 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000340 	.word	0x20000340
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_DMA_Init+0x48>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <MX_DMA_Init+0x48>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_DMA_Init+0x48>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	200d      	movs	r0, #13
 80013f4:	f000 fef3 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 ff0c 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	200e      	movs	r0, #14
 8001404:	f000 feeb 	bl	80021de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001408:	200e      	movs	r0, #14
 800140a:	f000 ff04 	bl	8002216 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	00000000 	.word	0x00000000

08001450 <StartDAC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDAC */
void StartDAC(void *argument)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b0e5      	sub	sp, #404	; 0x194
 8001454:	af00      	add	r7, sp, #0
 8001456:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800145a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800145e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001472:	4bbf      	ldr	r3, [pc, #764]	; (8001770 <StartDAC+0x320>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fa3f 	bl	80058fe <osMutexAcquire>
	  	uint8_t c = 0;
 8001480:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001484:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 800148c:	f107 010b 	add.w	r1, r7, #11
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	2201      	movs	r2, #1
 8001494:	48b7      	ldr	r0, [pc, #732]	; (8001774 <StartDAC+0x324>)
 8001496:	f003 fac7 	bl	8004a28 <HAL_UART_Receive>

	  	if ((char)c == '\r'){
 800149a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800149e:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0d      	cmp	r3, #13
 80014a6:	f040 81e0 	bne.w	800186a <StartDAC+0x41a>
//	  		if enter is pressed, process command to see if valid
	  		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	2202      	movs	r2, #2
 80014ae:	49b2      	ldr	r1, [pc, #712]	; (8001778 <StartDAC+0x328>)
 80014b0:	48b0      	ldr	r0, [pc, #704]	; (8001774 <StartDAC+0x324>)
 80014b2:	f003 fa2f 	bl	8004914 <HAL_UART_Transmit>
	  		command_buffer[i] = '\r';
 80014b6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014be:	4413      	add	r3, r2
 80014c0:	220d      	movs	r2, #13
 80014c2:	701a      	strb	r2, [r3, #0]
	  		command_buffer[i+1] = '\n';
 80014c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014c8:	3301      	adds	r3, #1
 80014ca:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014ce:	443b      	add	r3, r7
 80014d0:	220a      	movs	r2, #10
 80014d2:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		command_buffer[i+2] = '\0';
 80014d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014da:	3302      	adds	r3, #2
 80014dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014e0:	443b      	add	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		print_size = sprintf(print_buffer, command_buffer);
 80014e8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 fa46 	bl	8009984 <siprintf>
 80014f8:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
 80014fc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001500:	b29a      	uxth	r2, r3
 8001502:	f107 010c 	add.w	r1, r7, #12
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	489a      	ldr	r0, [pc, #616]	; (8001774 <StartDAC+0x324>)
 800150a:	f003 fa03 	bl	8004914 <HAL_UART_Transmit>
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 800150e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001512:	499a      	ldr	r1, [pc, #616]	; (800177c <StartDAC+0x32c>)
 8001514:	4618      	mov	r0, r3
 8001516:	f009 f9d7 	bl	800a8c8 <strtok>
 800151a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 8001524:	2301      	movs	r3, #1
 8001526:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 800152a:	4994      	ldr	r1, [pc, #592]	; (800177c <StartDAC+0x32c>)
 800152c:	2000      	movs	r0, #0
 800152e:	f009 f9cb 	bl	800a8c8 <strtok>
 8001532:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 8001536:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800153a:	f007 fae2 	bl	8008b02 <atoi>
 800153e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 8001542:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001546:	2b02      	cmp	r3, #2
 8001548:	dc03      	bgt.n	8001552 <StartDAC+0x102>
 800154a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800154e:	2b00      	cmp	r3, #0
 8001550:	dc13      	bgt.n	800157a <StartDAC+0x12a>
	  			valid_entry = 0;														// if not make command invalid
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4988      	ldr	r1, [pc, #544]	; (8001780 <StartDAC+0x330>)
 800155e:	4618      	mov	r0, r3
 8001560:	f008 fa10 	bl	8009984 <siprintf>
 8001564:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001568:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800156c:	b29a      	uxth	r2, r3
 800156e:	f107 010c 	add.w	r1, r7, #12
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	487f      	ldr	r0, [pc, #508]	; (8001774 <StartDAC+0x324>)
 8001576:	f003 f9cd 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 800157a:	4b82      	ldr	r3, [pc, #520]	; (8001784 <StartDAC+0x334>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001582:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 8001584:	497d      	ldr	r1, [pc, #500]	; (800177c <StartDAC+0x32c>)
 8001586:	2000      	movs	r0, #0
 8001588:	f009 f99e 	bl	800a8c8 <strtok>
 800158c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 8001590:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b41      	cmp	r3, #65	; 0x41
 8001598:	d022      	beq.n	80015e0 <StartDAC+0x190>
 800159a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b52      	cmp	r3, #82	; 0x52
 80015a2:	d01d      	beq.n	80015e0 <StartDAC+0x190>
 80015a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b53      	cmp	r3, #83	; 0x53
 80015ac:	d018      	beq.n	80015e0 <StartDAC+0x190>
 80015ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b54      	cmp	r3, #84	; 0x54
 80015b6:	d013      	beq.n	80015e0 <StartDAC+0x190>
	  			valid_entry = 0;														// if not make command invalid
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4971      	ldr	r1, [pc, #452]	; (8001788 <StartDAC+0x338>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 f9dd 	bl	8009984 <siprintf>
 80015ca:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80015ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f107 010c 	add.w	r1, r7, #12
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	4866      	ldr	r0, [pc, #408]	; (8001774 <StartDAC+0x324>)
 80015dc:	f003 f99a 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <StartDAC+0x334>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 80015ec:	4963      	ldr	r1, [pc, #396]	; (800177c <StartDAC+0x32c>)
 80015ee:	2000      	movs	r0, #0
 80015f0:	f009 f96a 	bl	800a8c8 <strtok>
 80015f4:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		double fvalue = atof(word);
 80015f8:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80015fc:	f007 fa7e 	bl	8008afc <atof>
 8001600:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if ((fvalue > 10000 || fvalue < 0.5) && fvalue != 0){							// check if frequncy value is valid
 8001604:	a356      	add	r3, pc, #344	; (adr r3, 8001760 <StartDAC+0x310>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800160e:	f7ff fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <StartDAC+0x1dc>
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	4b5b      	ldr	r3, [pc, #364]	; (800178c <StartDAC+0x33c>)
 800161e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001622:	f7ff fa5b 	bl	8000adc <__aeabi_dcmplt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01e      	beq.n	800166a <StartDAC+0x21a>
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001638:	f7ff fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d113      	bne.n	800166a <StartDAC+0x21a>
	  			valid_entry = 0;														// if not make command invalid
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4950      	ldr	r1, [pc, #320]	; (8001790 <StartDAC+0x340>)
 800164e:	4618      	mov	r0, r3
 8001650:	f008 f998 	bl	8009984 <siprintf>
 8001654:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001658:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 010c 	add.w	r1, r7, #12
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	4843      	ldr	r0, [pc, #268]	; (8001774 <StartDAC+0x324>)
 8001666:	f003 f955 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <StartDAC+0x334>)
 800166c:	681c      	ldr	r4, [r3, #0]
 800166e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001672:	f7ff fab9 	bl	8000be8 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	6063      	str	r3, [r4, #4]

	  		word = strtok(NULL, " ");
 800167a:	4940      	ldr	r1, [pc, #256]	; (800177c <StartDAC+0x32c>)
 800167c:	2000      	movs	r0, #0
 800167e:	f009 f923 	bl	800a8c8 <strtok>
 8001682:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8001686:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800168a:	f007 fa37 	bl	8008afc <atof>
 800168e:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 8001692:	a335      	add	r3, pc, #212	; (adr r3, 8001768 <StartDAC+0x318>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800169c:	f7ff fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10a      	bne.n	80016bc <StartDAC+0x26c>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016b2:	f7ff fa13 	bl	8000adc <__aeabi_dcmplt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <StartDAC+0x294>
	  			valid_entry = 0;														// if not make command invalid
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4933      	ldr	r1, [pc, #204]	; (8001794 <StartDAC+0x344>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f008 f95b 	bl	8009984 <siprintf>
 80016ce:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80016d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f107 010c 	add.w	r1, r7, #12
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	4825      	ldr	r0, [pc, #148]	; (8001774 <StartDAC+0x324>)
 80016e0:	f003 f918 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <StartDAC+0x334>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016ec:	f7ff fa7c 	bl	8000be8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60a3      	str	r3, [r4, #8]

	  		word = strtok(NULL, " ");
 80016f4:	4921      	ldr	r1, [pc, #132]	; (800177c <StartDAC+0x32c>)
 80016f6:	2000      	movs	r0, #0
 80016f8:	f009 f8e6 	bl	800a8c8 <strtok>
 80016fc:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8001700:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001704:	f007 f9fa 	bl	8008afc <atof>
 8001708:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 800170c:	a316      	add	r3, pc, #88	; (adr r3, 8001768 <StartDAC+0x318>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001716:	f7ff f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10a      	bne.n	8001736 <StartDAC+0x2e6>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800172c:	f7ff f9d6 	bl	8000adc <__aeabi_dcmplt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d032      	beq.n	800179c <StartDAC+0x34c>
	  			valid_entry = 0;														// if not make command invalid
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4915      	ldr	r1, [pc, #84]	; (8001798 <StartDAC+0x348>)
 8001742:	4618      	mov	r0, r3
 8001744:	f008 f91e 	bl	8009984 <siprintf>
 8001748:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800174c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001750:	b29a      	uxth	r2, r3
 8001752:	f107 010c 	add.w	r1, r7, #12
 8001756:	2364      	movs	r3, #100	; 0x64
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <StartDAC+0x324>)
 800175a:	f003 f8db 	bl	8004914 <HAL_UART_Transmit>
 800175e:	e040      	b.n	80017e2 <StartDAC+0x392>
 8001760:	00000000 	.word	0x00000000
 8001764:	40c38800 	.word	0x40c38800
 8001768:	66666666 	.word	0x66666666
 800176c:	400a6666 	.word	0x400a6666
 8001770:	200003d4 	.word	0x200003d4
 8001774:	20000340 	.word	0x20000340
 8001778:	0800d4b4 	.word	0x0800d4b4
 800177c:	0800d4b8 	.word	0x0800d4b8
 8001780:	0800d4bc 	.word	0x0800d4bc
 8001784:	200003d8 	.word	0x200003d8
 8001788:	0800d4dc 	.word	0x0800d4dc
 800178c:	3fe00000 	.word	0x3fe00000
 8001790:	0800d52c 	.word	0x0800d52c
 8001794:	0800d568 	.word	0x0800d568
 8001798:	0800d594 	.word	0x0800d594
	  		} else if (ivalue <= command->minv){										// check if max voltage value is less than min voltage
 800179c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <StartDAC+0x4cc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d813      	bhi.n	80017e2 <StartDAC+0x392>
	  			valid_entry = 0;														// if not make command invalid
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4956      	ldr	r1, [pc, #344]	; (8001920 <StartDAC+0x4d0>)
 80017c6:	4618      	mov	r0, r3
 80017c8:	f008 f8dc 	bl	8009984 <siprintf>
 80017cc:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80017d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f107 010c 	add.w	r1, r7, #12
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	4851      	ldr	r0, [pc, #324]	; (8001924 <StartDAC+0x4d4>)
 80017de:	f003 f899 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 80017e2:	4b4e      	ldr	r3, [pc, #312]	; (800191c <StartDAC+0x4cc>)
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80017ea:	f7ff f9fd 	bl	8000be8 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	60e3      	str	r3, [r4, #12]

	  		word = strtok(NULL, " ");
 80017f2:	494d      	ldr	r1, [pc, #308]	; (8001928 <StartDAC+0x4d8>)
 80017f4:	2000      	movs	r0, #0
 80017f6:	f009 f867 	bl	800a8c8 <strtok>
 80017fa:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 80017fe:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001802:	f007 f97e 	bl	8008b02 <atoi>
 8001806:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 800180a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800180e:	2b0c      	cmp	r3, #12
 8001810:	dc03      	bgt.n	800181a <StartDAC+0x3ca>
 8001812:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001816:	2b00      	cmp	r3, #0
 8001818:	da13      	bge.n	8001842 <StartDAC+0x3f2>
	  			valid_entry = 0;														// if not make command invalid
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4941      	ldr	r1, [pc, #260]	; (800192c <StartDAC+0x4dc>)
 8001826:	4618      	mov	r0, r3
 8001828:	f008 f8ac 	bl	8009984 <siprintf>
 800182c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001830:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001834:	b29a      	uxth	r2, r3
 8001836:	f107 010c 	add.w	r1, r7, #12
 800183a:	2364      	movs	r3, #100	; 0x64
 800183c:	4839      	ldr	r0, [pc, #228]	; (8001924 <StartDAC+0x4d4>)
 800183e:	f003 f869 	bl	8004914 <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <StartDAC+0x4cc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800184a:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 800184c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001850:	2b00      	cmp	r3, #0
 8001852:	d05a      	beq.n	800190a <StartDAC+0x4ba>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <StartDAC+0x4e0>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	2200      	movs	r2, #0
 800185c:	492f      	ldr	r1, [pc, #188]	; (800191c <StartDAC+0x4cc>)
 800185e:	f004 f949 	bl	8005af4 <osMessageQueuePut>
				valid_entry = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001868:	e04f      	b.n	800190a <StartDAC+0x4ba>
  			}

	  	} else if ((c == 8 || c == 127) && (i >= 1)){
 800186a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800186e:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b08      	cmp	r3, #8
 8001876:	d006      	beq.n	8001886 <StartDAC+0x436>
 8001878:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800187c:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	d122      	bne.n	80018cc <StartDAC+0x47c>
 8001886:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd1e      	ble.n	80018cc <StartDAC+0x47c>
	  		command_buffer[--i] = '\0';
 800188e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001892:	3b01      	subs	r3, #1
 8001894:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001898:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800189c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018a0:	4413      	add	r3, r2
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	  		print_size = sprintf(print_buffer, "%c %c", 8, 8);
 80018a6:	f107 000c 	add.w	r0, r7, #12
 80018aa:	2308      	movs	r3, #8
 80018ac:	2208      	movs	r2, #8
 80018ae:	4921      	ldr	r1, [pc, #132]	; (8001934 <StartDAC+0x4e4>)
 80018b0:	f008 f868 	bl	8009984 <siprintf>
 80018b4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80018b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f107 010c 	add.w	r1, r7, #12
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	4817      	ldr	r0, [pc, #92]	; (8001924 <StartDAC+0x4d4>)
 80018c6:	f003 f825 	bl	8004914 <HAL_UART_Transmit>
 80018ca:	e01e      	b.n	800190a <StartDAC+0x4ba>
	  	} else if (c != 0){						// if character is valid and not enter key
 80018cc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018d0:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d017      	beq.n	800190a <StartDAC+0x4ba>
	  		HAL_UART_Transmit(&huart2, &c, 1, 100);
 80018da:	f107 010b 	add.w	r1, r7, #11
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	2201      	movs	r2, #1
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <StartDAC+0x4d4>)
 80018e4:	f003 f816 	bl	8004914 <HAL_UART_Transmit>
	  		command_buffer[i] = c;				// add to buffer to save
 80018e8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018ec:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80018f0:	7819      	ldrb	r1, [r3, #0]
 80018f2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80018f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018fa:	4413      	add	r3, r2
 80018fc:	460a      	mov	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
	  		i++;
 8001900:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001904:	3301      	adds	r3, #1
 8001906:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  	}
	  	osMutexRelease(MUTEXHandle);
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <StartDAC+0x4e8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f004 f840 	bl	8005994 <osMutexRelease>
	  	osThreadYield();
 8001914:	f003 ff32 	bl	800577c <osThreadYield>
  {
 8001918:	e5ab      	b.n	8001472 <StartDAC+0x22>
 800191a:	bf00      	nop
 800191c:	200003d8 	.word	0x200003d8
 8001920:	0800d5c0 	.word	0x0800d5c0
 8001924:	20000340 	.word	0x20000340
 8001928:	0800d4b8 	.word	0x0800d4b8
 800192c:	0800d5f4 	.word	0x0800d5f4
 8001930:	200003d0 	.word	0x200003d0
 8001934:	0800d628 	.word	0x0800d628
 8001938:	200003d4 	.word	0x200003d4

0800193c <StartReciever>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReciever */
void StartReciever(void *argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReciever */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001944:	2001      	movs	r0, #1
 8001946:	f003 ff39 	bl	80057bc <osDelay>
 800194a:	e7fb      	b.n	8001944 <StartReciever+0x8>

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_MspInit+0x4c>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_MspInit+0x4c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6613      	str	r3, [r2, #96]	; 0x60
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_MspInit+0x4c>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_MspInit+0x4c>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_MspInit+0x4c>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_MspInit+0x4c>)
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	210f      	movs	r1, #15
 8001992:	f06f 0001 	mvn.w	r0, #1
 8001996:	f000 fc22 	bl	80021de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <HAL_DAC_MspInit+0x120>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d17a      	bne.n	8001ac0 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019ca:	4b40      	ldr	r3, [pc, #256]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019d4:	6593      	str	r3, [r2, #88]	; 0x58
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a39      	ldr	r2, [pc, #228]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <HAL_DAC_MspInit+0x124>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019fa:	2330      	movs	r3, #48	; 0x30
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fecc 	bl	80027ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <HAL_DAC_MspInit+0x12c>)
 8001a18:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a1c:	2206      	movs	r2, #6
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a22:	2210      	movs	r2, #16
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a44:	2220      	movs	r2, #32
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a50:	f000 fd44 	bl	80024dc <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001a5a:	f7ff ff77 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <HAL_DAC_MspInit+0x128>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_DAC_MspInit+0x134>)
 8001a6e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a72:	2205      	movs	r2, #5
 8001a74:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a78:	2210      	movs	r2, #16
 8001a7a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a88:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a96:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001aa4:	480c      	ldr	r0, [pc, #48]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001aa6:	f000 fd19 	bl	80024dc <HAL_DMA_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8001ab0:	f7ff ff4c 	bl	800194c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_DAC_MspInit+0x130>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	; 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40007400 	.word	0x40007400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	40020030 	.word	0x40020030
 8001ad8:	20000250 	.word	0x20000250
 8001adc:	40020044 	.word	0x40020044

08001ae0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a6      	sub	sp, #152	; 0x98
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2288      	movs	r2, #136	; 0x88
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f008 ff45 	bl	800a980 <memset>
  if(hrng->Instance==RNG)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <HAL_RNG_MspInit+0x80>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d12b      	bne.n	8001b58 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001b00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b04:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001b06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001b16:	2310      	movs	r3, #16
 8001b18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b22:	2302      	movs	r3, #2
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fe49 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001b3c:	f7ff ff06 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_RNG_MspInit+0x84>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_RNG_MspInit+0x84>)
 8001b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RNG_MspInit+0x84>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3798      	adds	r7, #152	; 0x98
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	50060800 	.word	0x50060800
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b78:	d10c      	bne.n	8001b94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b92:	e010      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_TIM_Base_MspInit+0x60>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_TIM_Base_MspInit+0x5c>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	60bb      	str	r3, [r7, #8]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40000c00 	.word	0x40000c00

08001bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0ac      	sub	sp, #176	; 0xb0
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2288      	movs	r2, #136	; 0x88
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f008 fec7 	bl	800a980 <memset>
  if(huart->Instance==USART2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <HAL_UART_MspInit+0xb0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d13b      	bne.n	8001c74 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f001 fddd 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c14:	f7ff fe9a 	bl	800194c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c22:	6593      	str	r3, [r2, #88]	; 0x58
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_UART_MspInit+0xb4>)
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c60:	2307      	movs	r3, #7
 8001c62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f000 fd9c 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	37b0      	adds	r7, #176	; 0xb0
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40021000 	.word	0x40021000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 f974 	bl	8001fa0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cb8:	f005 fdbc 	bl	8007834 <xTaskGetSchedulerState>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d001      	beq.n	8001cc6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cc2:	f006 fca1 	bl	8008608 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Channel3_IRQHandler+0x10>)
 8001cd2:	f000 fcbb 	bl	800264c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000208 	.word	0x20000208

08001ce0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ce6:	f000 fcb1 	bl	800264c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000250 	.word	0x20000250

08001cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_kill>:

int _kill(int pid, int sig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0e:	f008 fea9 	bl	800aa64 <__errno>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2216      	movs	r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_exit>:

void _exit (int status)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe7 	bl	8001d04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d36:	e7fe      	b.n	8001d36 <_exit+0x12>

08001d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
  }

  return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e009      	b.n	8001d98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf1      	blt.n	8001d84 <_write+0x12>
  }
  return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_close>:

int _close(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd2:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_isatty>:

int _isatty(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e1c:	4a14      	ldr	r2, [pc, #80]	; (8001e70 <_sbrk+0x5c>)
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <_sbrk+0x60>)
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <_sbrk+0x64>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <_sbrk+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <_sbrk+0x64>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e44:	f008 fe0e 	bl	800aa64 <__errno>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e52:	e009      	b.n	8001e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <_sbrk+0x64>)
 8001e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20018000 	.word	0x20018000
 8001e74:	00000400 	.word	0x00000400
 8001e78:	200003dc 	.word	0x200003dc
 8001e7c:	20003c40 	.word	0x20003c40

08001e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <SystemInit+0x20>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <SystemInit+0x20>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7ff ffea 	bl	8001e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eae:	490d      	ldr	r1, [pc, #52]	; (8001ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <LoopForever+0xe>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec4:	4c0a      	ldr	r4, [pc, #40]	; (8001ef0 <LoopForever+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f008 fdcd 	bl	800aa70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ed6:	f7ff f88b 	bl	8000ff0 <main>

08001eda <LoopForever>:

LoopForever:
    b LoopForever
 8001eda:	e7fe      	b.n	8001eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ee8:	0800db94 	.word	0x0800db94
  ldr r2, =_sbss
 8001eec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ef0:	20003c40 	.word	0x20003c40

08001ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC1_2_IRQHandler>

08001ef6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f00:	2003      	movs	r0, #3
 8001f02:	f000 f961 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f06:	200f      	movs	r0, #15
 8001f08:	f000 f80e 	bl	8001f28 <HAL_InitTick>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	e001      	b.n	8001f1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f18:	f7ff fd1e 	bl	8001958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <HAL_InitTick+0x6c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d023      	beq.n	8001f84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_InitTick+0x70>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_InitTick+0x6c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f96d 	bl	8002232 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d809      	bhi.n	8001f78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f6c:	f000 f937 	bl	80021de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_InitTick+0x74>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e007      	b.n	8001f88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e004      	b.n	8001f88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e001      	b.n	8001f88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	200003e0 	.word	0x200003e0

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	200003e0 	.word	0x200003e0

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e014      	b.n	8002286 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	791b      	ldrb	r3, [r3, #4]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fb9b 	bl	80019a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b088      	sub	sp, #32
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	795b      	ldrb	r3, [r3, #5]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_DAC_ConfigChannel+0x1c>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e114      	b.n	80024d4 <HAL_DAC_ConfigChannel+0x246>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2202      	movs	r2, #2
 80022b4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	f040 8081 	bne.w	80023c2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022c0:	f7ff fe82 	bl	8001fc8 <HAL_GetTick>
 80022c4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d140      	bne.n	800234e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022cc:	e018      	b.n	8002300 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ce:	f7ff fe7b 	bl	8001fc8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d911      	bls.n	8002300 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f043 0208 	orr.w	r2, r3, #8
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2203      	movs	r2, #3
 80022fa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0e9      	b.n	80024d4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1df      	bne.n	80022ce <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff fe66 	bl	8001fe0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	6992      	ldr	r2, [r2, #24]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
 800231e:	e023      	b.n	8002368 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002320:	f7ff fe52 	bl	8001fc8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d90f      	bls.n	800234e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	da0a      	bge.n	800234e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f043 0208 	orr.w	r2, r3, #8
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2203      	movs	r2, #3
 8002348:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0c2      	b.n	80024d4 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002354:	2b00      	cmp	r3, #0
 8002356:	dbe3      	blt.n	8002320 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff fe41 	bl	8001fe0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	6992      	ldr	r2, [r2, #24]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	ea02 0103 	and.w	r1, r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	409a      	lsls	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	21ff      	movs	r1, #255	; 0xff
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	ea02 0103 	and.w	r1, r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d11d      	bne.n	8002406 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2207      	movs	r2, #7
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	431a      	orrs	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	22c0      	movs	r2, #192	; 0xc0
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43da      	mvns	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2201      	movs	r2, #1
 80024ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e098      	b.n	8002620 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b4d      	ldr	r3, [pc, #308]	; (800262c <HAL_DMA_Init+0x150>)
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d80f      	bhi.n	800251a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <HAL_DMA_Init+0x154>)
 8002502:	4413      	add	r3, r2
 8002504:	4a4b      	ldr	r2, [pc, #300]	; (8002634 <HAL_DMA_Init+0x158>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	009a      	lsls	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_DMA_Init+0x15c>)
 8002516:	641a      	str	r2, [r3, #64]	; 0x40
 8002518:	e00e      	b.n	8002538 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_DMA_Init+0x160>)
 8002522:	4413      	add	r3, r2
 8002524:	4a43      	ldr	r2, [pc, #268]	; (8002634 <HAL_DMA_Init+0x158>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	009a      	lsls	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a42      	ldr	r2, [pc, #264]	; (8002640 <HAL_DMA_Init+0x164>)
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800255c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002592:	d039      	beq.n	8002608 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_DMA_Init+0x15c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d11a      	bne.n	80025d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_DMA_Init+0x168>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f003 031c 	and.w	r3, r3, #28
 80025aa:	210f      	movs	r1, #15
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4924      	ldr	r1, [pc, #144]	; (8002644 <HAL_DMA_Init+0x168>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_DMA_Init+0x168>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f003 031c 	and.w	r3, r3, #28
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	491d      	ldr	r1, [pc, #116]	; (8002644 <HAL_DMA_Init+0x168>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
 80025d2:	e019      	b.n	8002608 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025d4:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_DMA_Init+0x16c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f003 031c 	and.w	r3, r3, #28
 80025e0:	210f      	movs	r1, #15
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4917      	ldr	r1, [pc, #92]	; (8002648 <HAL_DMA_Init+0x16c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_DMA_Init+0x16c>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f003 031c 	and.w	r3, r3, #28
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	4911      	ldr	r1, [pc, #68]	; (8002648 <HAL_DMA_Init+0x16c>)
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40020407 	.word	0x40020407
 8002630:	bffdfff8 	.word	0xbffdfff8
 8002634:	cccccccd 	.word	0xcccccccd
 8002638:	40020000 	.word	0x40020000
 800263c:	bffdfbf8 	.word	0xbffdfbf8
 8002640:	40020400 	.word	0x40020400
 8002644:	400200a8 	.word	0x400200a8
 8002648:	400204a8 	.word	0x400204a8

0800264c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f003 031c 	and.w	r3, r3, #28
 800266c:	2204      	movs	r2, #4
 800266e:	409a      	lsls	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d026      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x7a>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d021      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0204 	bic.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	f003 021c 	and.w	r2, r3, #28
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	2104      	movs	r1, #4
 80026ae:	fa01 f202 	lsl.w	r2, r1, r2
 80026b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d071      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026c4:	e06c      	b.n	80027a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 031c 	and.w	r3, r3, #28
 80026ce:	2202      	movs	r2, #2
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d02e      	beq.n	8002738 <HAL_DMA_IRQHandler+0xec>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d029      	beq.n	8002738 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 020a 	bic.w	r2, r2, #10
 8002700:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 021c 	and.w	r2, r3, #28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2102      	movs	r1, #2
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d038      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002736:	e033      	b.n	80027a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	f003 031c 	and.w	r3, r3, #28
 8002740:	2208      	movs	r2, #8
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02a      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x156>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d025      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 020e 	bic.w	r2, r2, #14
 8002764:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f003 021c 	and.w	r2, r3, #28
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
}
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	e17f      	b.n	8002abc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8171 	beq.w	8002ab6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d005      	beq.n	80027ec <HAL_GPIO_Init+0x40>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d130      	bne.n	800284e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002822:	2201      	movs	r2, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0201 	and.w	r2, r3, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b03      	cmp	r3, #3
 8002858:	d118      	bne.n	800288c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	6939      	ldr	r1, [r7, #16]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80ac 	beq.w	8002ab6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4a5e      	ldr	r2, [pc, #376]	; (8002adc <HAL_GPIO_Init+0x330>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6613      	str	r3, [r2, #96]	; 0x60
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <HAL_GPIO_Init+0x330>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002976:	4a5a      	ldr	r2, [pc, #360]	; (8002ae0 <HAL_GPIO_Init+0x334>)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029a0:	d025      	beq.n	80029ee <HAL_GPIO_Init+0x242>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a4f      	ldr	r2, [pc, #316]	; (8002ae4 <HAL_GPIO_Init+0x338>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <HAL_GPIO_Init+0x23e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4e      	ldr	r2, [pc, #312]	; (8002ae8 <HAL_GPIO_Init+0x33c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <HAL_GPIO_Init+0x23a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4d      	ldr	r2, [pc, #308]	; (8002aec <HAL_GPIO_Init+0x340>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0x236>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4c      	ldr	r2, [pc, #304]	; (8002af0 <HAL_GPIO_Init+0x344>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00d      	beq.n	80029de <HAL_GPIO_Init+0x232>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_GPIO_Init+0x348>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <HAL_GPIO_Init+0x22e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x34c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_GPIO_Init+0x22a>
 80029d2:	2306      	movs	r3, #6
 80029d4:	e00c      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029d6:	2307      	movs	r3, #7
 80029d8:	e00a      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029da:	2305      	movs	r3, #5
 80029dc:	e008      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029de:	2304      	movs	r3, #4
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029e2:	2303      	movs	r3, #3
 80029e4:	e004      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e002      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_GPIO_Init+0x244>
 80029ee:	2300      	movs	r3, #0
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	f002 0203 	and.w	r2, r2, #3
 80029f6:	0092      	lsls	r2, r2, #2
 80029f8:	4093      	lsls	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a00:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_GPIO_Init+0x334>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a32:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_GPIO_Init+0x350>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f ae78 	bne.w	80027bc <HAL_GPIO_Init+0x10>
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	48000c00 	.word	0x48000c00
 8002af0:	48001000 	.word	0x48001000
 8002af4:	48001400 	.word	0x48001400
 8002af8:	48001800 	.word	0x48001800
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40007000 	.word	0x40007000

08002b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b2a:	d130      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2c:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	d038      	beq.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2232      	movs	r2, #50	; 0x32
 8002b50:	fb02 f303 	mul.w	r3, r2, r3
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0c9b      	lsrs	r3, r3, #18
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b60:	e002      	b.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b74:	d102      	bne.n	8002b7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f2      	bne.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b88:	d110      	bne.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e00f      	b.n	8002bae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d007      	beq.n	8002bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b9c:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba4:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002baa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e3ca      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b97      	ldr	r3, [pc, #604]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80e4 	beq.w	8002dc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_RCC_OscConfig+0x4a>
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	f040 808b 	bne.w	8002d20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 8087 	bne.w	8002d20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c12:	4b89      	ldr	r3, [pc, #548]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e3a2      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	4b82      	ldr	r3, [pc, #520]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_RCC_OscConfig+0x7c>
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c42:	e005      	b.n	8002c50 <HAL_RCC_OscConfig+0x88>
 8002c44:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d223      	bcs.n	8002c9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fd55 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e383      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c68:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a72      	ldr	r2, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	496d      	ldr	r1, [pc, #436]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	4968      	ldr	r1, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]
 8002c9a:	e025      	b.n	8002ce8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c9c:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a65      	ldr	r2, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b63      	ldr	r3, [pc, #396]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4960      	ldr	r1, [pc, #384]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	495b      	ldr	r1, [pc, #364]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fd15 	bl	8003708 <RCC_SetFlashLatencyFromMSIRange>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e343      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ce8:	f000 fc4a 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	4950      	ldr	r1, [pc, #320]	; (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a4e      	ldr	r2, [pc, #312]	; (8002e40 <HAL_RCC_OscConfig+0x278>)
 8002d06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d08:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff f90b 	bl	8001f28 <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d052      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	e327      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d34:	f7ff f948 	bl	8001fc8 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3c:	f7ff f944 	bl	8001fc8 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e310      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b34      	ldr	r3, [pc, #208]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4931      	ldr	r1, [pc, #196]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d78:	4b2f      	ldr	r3, [pc, #188]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	492c      	ldr	r1, [pc, #176]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
 8002d8c:	e01a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d9a:	f7ff f915 	bl	8001fc8 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002da2:	f7ff f911 	bl	8001fc8 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e2dd      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x1da>
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d074      	beq.n	8002eba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x21a>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d10e      	bne.n	8002dfa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d10b      	bne.n	8002dfa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d064      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d160      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e2ba      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e02:	d106      	bne.n	8002e12 <HAL_RCC_OscConfig+0x24a>
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	e026      	b.n	8002e60 <HAL_RCC_OscConfig+0x298>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1a:	d115      	bne.n	8002e48 <HAL_RCC_OscConfig+0x280>
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a02      	ldr	r2, [pc, #8]	; (8002e38 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	e014      	b.n	8002e60 <HAL_RCC_OscConfig+0x298>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	0800d6b8 	.word	0x0800d6b8
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004
 8002e48:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a9f      	ldr	r2, [pc, #636]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b9d      	ldr	r3, [pc, #628]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a9c      	ldr	r2, [pc, #624]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f8ae 	bl	8001fc8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff f8aa 	bl	8001fc8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e276      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e82:	4b92      	ldr	r3, [pc, #584]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x2a8>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff f89a 	bl	8001fc8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7ff f896 	bl	8001fc8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e262      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eaa:	4b88      	ldr	r3, [pc, #544]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x2d0>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d060      	beq.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x310>
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d119      	bne.n	8002f06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d116      	bne.n	8002f06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed8:	4b7c      	ldr	r3, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x328>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e23f      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef0:	4b76      	ldr	r3, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	4973      	ldr	r1, [pc, #460]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f04:	e040      	b.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d023      	beq.n	8002f56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7ff f855 	bl	8001fc8 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7ff f851 	bl	8001fc8 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e21d      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f34:	4b65      	ldr	r3, [pc, #404]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b62      	ldr	r3, [pc, #392]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	495f      	ldr	r1, [pc, #380]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e018      	b.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b5d      	ldr	r3, [pc, #372]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a5c      	ldr	r2, [pc, #368]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7ff f831 	bl	8001fc8 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7ff f82d 	bl	8001fc8 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1f9      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d03c      	beq.n	800300e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9c:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7ff f80c 	bl	8001fc8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb4:	f7ff f808 	bl	8001fc8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1d4      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc6:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x3ec>
 8002fd4:	e01b      	b.n	800300e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fdc:	4a3b      	ldr	r2, [pc, #236]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe ffef 	bl	8001fc8 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fee:	f7fe ffeb 	bl	8001fc8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1b7      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ef      	bne.n	8002fee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a6 	beq.w	8003168 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10d      	bne.n	8003048 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	4a26      	ldr	r2, [pc, #152]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8003032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x508>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d118      	bne.n	8003086 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003054:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <HAL_RCC_OscConfig+0x508>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_RCC_OscConfig+0x508>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003060:	f7fe ffb2 	bl	8001fc8 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003068:	f7fe ffae 	bl	8001fc8 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e17a      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCC_OscConfig+0x508>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d108      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4d8>
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4a0d      	ldr	r2, [pc, #52]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309e:	e029      	b.n	80030f4 <HAL_RCC_OscConfig+0x52c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d115      	bne.n	80030d4 <HAL_RCC_OscConfig+0x50c>
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_RCC_OscConfig+0x504>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c8:	e014      	b.n	80030f4 <HAL_RCC_OscConfig+0x52c>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40007000 	.word	0x40007000
 80030d4:	4b9c      	ldr	r3, [pc, #624]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a9b      	ldr	r2, [pc, #620]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e4:	4b98      	ldr	r3, [pc, #608]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a97      	ldr	r2, [pc, #604]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d016      	beq.n	800312a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe ff64 	bl	8001fc8 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe ff60 	bl	8001fc8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e12a      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311a:	4b8b      	ldr	r3, [pc, #556]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ed      	beq.n	8003104 <HAL_RCC_OscConfig+0x53c>
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe ff4d 	bl	8001fc8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe ff49 	bl	8001fc8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e113      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003148:	4b7f      	ldr	r3, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1ed      	bne.n	8003132 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315c:	4b7a      	ldr	r3, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a79      	ldr	r2, [pc, #484]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80fe 	beq.w	800336e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	2b02      	cmp	r3, #2
 8003178:	f040 80d0 	bne.w	800331c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d130      	bne.n	80031f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	3b01      	subs	r3, #1
 800319c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d127      	bne.n	80031f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d11f      	bne.n	80031f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031bc:	2a07      	cmp	r2, #7
 80031be:	bf14      	ite	ne
 80031c0:	2201      	movne	r2, #1
 80031c2:	2200      	moveq	r2, #0
 80031c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d113      	bne.n	80031f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	3b01      	subs	r3, #1
 80031d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d109      	bne.n	80031f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d06e      	beq.n	80032d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d069      	beq.n	80032cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0ad      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003214:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a4b      	ldr	r2, [pc, #300]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800321a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003220:	f7fe fed2 	bl	8001fc8 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe fece 	bl	8001fc8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e09a      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003246:	4b40      	ldr	r3, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	4b40      	ldr	r3, [pc, #256]	; (800334c <HAL_RCC_OscConfig+0x784>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003256:	3a01      	subs	r2, #1
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003260:	0212      	lsls	r2, r2, #8
 8003262:	4311      	orrs	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003268:	0852      	lsrs	r2, r2, #1
 800326a:	3a01      	subs	r2, #1
 800326c:	0552      	lsls	r2, r2, #21
 800326e:	4311      	orrs	r1, r2
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003274:	0852      	lsrs	r2, r2, #1
 8003276:	3a01      	subs	r2, #1
 8003278:	0652      	lsls	r2, r2, #25
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003280:	0912      	lsrs	r2, r2, #4
 8003282:	0452      	lsls	r2, r2, #17
 8003284:	430a      	orrs	r2, r1
 8003286:	4930      	ldr	r1, [pc, #192]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003288:	4313      	orrs	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2d      	ldr	r2, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032a4:	f7fe fe90 	bl	8001fc8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe fe8c 	bl	8001fc8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e058      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ca:	e050      	b.n	800336e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e04f      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d148      	bne.n	800336e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032f4:	f7fe fe68 	bl	8001fc8 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fe64 	bl	8001fc8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e030      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x734>
 800331a:	e028      	b.n	800336e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b0c      	cmp	r3, #12
 8003320:	d023      	beq.n	800336a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <HAL_RCC_OscConfig+0x780>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe fe4b 	bl	8001fc8 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e00c      	b.n	8003350 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fe fe47 	bl	8001fc8 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d905      	bls.n	8003350 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e013      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
 8003348:	40021000 	.word	0x40021000
 800334c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_OscConfig+0x7b0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ec      	bne.n	8003336 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x7b0>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4905      	ldr	r1, [pc, #20]	; (8003378 <HAL_RCC_OscConfig+0x7b0>)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_OscConfig+0x7b4>)
 8003364:	4013      	ands	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
 8003368:	e001      	b.n	800336e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3720      	adds	r7, #32
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000
 800337c:	feeefffc 	.word	0xfeeefffc

08003380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0e7      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b75      	ldr	r3, [pc, #468]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b72      	ldr	r3, [pc, #456]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	4970      	ldr	r1, [pc, #448]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b6e      	ldr	r3, [pc, #440]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0cf      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b66      	ldr	r3, [pc, #408]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	429a      	cmp	r2, r3
 80033de:	d908      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4960      	ldr	r1, [pc, #384]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d04c      	beq.n	8003498 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003406:	4b5a      	ldr	r3, [pc, #360]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d121      	bne.n	8003456 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0a6      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d107      	bne.n	800342e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341e:	4b54      	ldr	r3, [pc, #336]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d115      	bne.n	8003456 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e09a      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e08e      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003446:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e086      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003456:	4b46      	ldr	r3, [pc, #280]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f023 0203 	bic.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4943      	ldr	r1, [pc, #268]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003468:	f7fe fdae 	bl	8001fc8 <HAL_GetTick>
 800346c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346e:	e00a      	b.n	8003486 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003470:	f7fe fdaa 	bl	8001fc8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	; 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e06e      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	4b3a      	ldr	r3, [pc, #232]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 020c 	and.w	r2, r3, #12
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	429a      	cmp	r2, r3
 8003496:	d1eb      	bne.n	8003470 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	4b31      	ldr	r3, [pc, #196]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d208      	bcs.n	80034c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	492b      	ldr	r1, [pc, #172]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c6:	4b29      	ldr	r3, [pc, #164]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d210      	bcs.n	80034f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 0207 	bic.w	r2, r3, #7
 80034dc:	4923      	ldr	r1, [pc, #140]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e4:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_RCC_ClockConfig+0x1ec>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e036      	b.n	8003564 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4918      	ldr	r1, [pc, #96]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003520:	4b13      	ldr	r3, [pc, #76]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4910      	ldr	r1, [pc, #64]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003534:	f000 f824 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	490b      	ldr	r1, [pc, #44]	; (8003574 <HAL_RCC_ClockConfig+0x1f4>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1f8>)
 8003552:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1fc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe fce5 	bl	8001f28 <HAL_InitTick>
 800355e:	4603      	mov	r3, r0
 8003560:	72fb      	strb	r3, [r7, #11]

  return status;
 8003562:	7afb      	ldrb	r3, [r7, #11]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	0800d6b8 	.word	0x0800d6b8
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x34>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11e      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035b4:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035c0:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e005      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035d0:	4b2d      	ldr	r3, [pc, #180]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035dc:	4a2b      	ldr	r2, [pc, #172]	; (800368c <HAL_RCC_GetSysClockFreq+0x10c>)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d102      	bne.n	80035fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e004      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d101      	bne.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <HAL_RCC_GetSysClockFreq+0x114>)
 8003606:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d134      	bne.n	8003678 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0xa6>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d003      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0xac>
 8003624:	e005      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_RCC_GetSysClockFreq+0x110>)
 8003628:	617b      	str	r3, [r7, #20]
      break;
 800362a:	e005      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_GetSysClockFreq+0x114>)
 800362e:	617b      	str	r3, [r7, #20]
      break;
 8003630:	e002      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	617b      	str	r3, [r7, #20]
      break;
 8003636:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	091b      	lsrs	r3, r3, #4
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	3301      	adds	r3, #1
 8003644:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	fb03 f202 	mul.w	r2, r3, r2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800365e:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_GetSysClockFreq+0x108>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	0e5b      	lsrs	r3, r3, #25
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	3301      	adds	r3, #1
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	fbb2 f3f3 	udiv	r3, r2, r3
 8003676:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003678:	69bb      	ldr	r3, [r7, #24]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	; 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	0800d6d0 	.word	0x0800d6d0
 8003690:	00f42400 	.word	0x00f42400
 8003694:	007a1200 	.word	0x007a1200

08003698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800369c:	4b03      	ldr	r3, [pc, #12]	; (80036ac <HAL_RCC_GetHCLKFreq+0x14>)
 800369e:	681b      	ldr	r3, [r3, #0]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000000 	.word	0x20000000

080036b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036b4:	f7ff fff0 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	0800d6c8 	.word	0x0800d6c8

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036e0:	f7ff ffda 	bl	8003698 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0adb      	lsrs	r3, r3, #11
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	0800d6c8 	.word	0x0800d6c8

08003708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003720:	f7ff f9ee 	bl	8002b00 <HAL_PWREx_GetVoltageRange>
 8003724:	6178      	str	r0, [r7, #20]
 8003726:	e014      	b.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372c:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	; 0x58
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003740:	f7ff f9de 	bl	8002b00 <HAL_PWREx_GetVoltageRange>
 8003744:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003758:	d10b      	bne.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b80      	cmp	r3, #128	; 0x80
 800375e:	d919      	bls.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2ba0      	cmp	r3, #160	; 0xa0
 8003764:	d902      	bls.n	800376c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003766:	2302      	movs	r3, #2
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	e013      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e010      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d902      	bls.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003778:	2303      	movs	r3, #3
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	e00a      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d102      	bne.n	800378a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003784:	2302      	movs	r3, #2
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e004      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b70      	cmp	r3, #112	; 0x70
 800378e:	d101      	bne.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003790:	2301      	movs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003794:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 0207 	bic.w	r2, r3, #7
 800379c:	4909      	ldr	r1, [pc, #36]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40022000 	.word	0x40022000

080037c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d041      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ec:	d02a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f2:	d824      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f8:	d008      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fe:	d81e      	bhi.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003808:	d010      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800380a:	e018      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800380c:	4b86      	ldr	r3, [pc, #536]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a85      	ldr	r2, [pc, #532]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003816:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003818:	e015      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fabb 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800382a:	e00c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3320      	adds	r3, #32
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fba6 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	74fb      	strb	r3, [r7, #19]
      break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800385a:	4973      	ldr	r1, [pc, #460]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003862:	e001      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d041      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800387c:	d02a      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800387e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003882:	d824      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003888:	d008      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800388a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388e:	d81e      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003898:	d010      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800389a:	e018      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800389c:	4b62      	ldr	r3, [pc, #392]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a61      	ldr	r2, [pc, #388]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038a8:	e015      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa73 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ba:	e00c      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3320      	adds	r3, #32
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fb5e 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	74fb      	strb	r3, [r7, #19]
      break;
 80038d2:	e000      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d6:	7cfb      	ldrb	r3, [r7, #19]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038dc:	4b52      	ldr	r3, [pc, #328]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	494f      	ldr	r1, [pc, #316]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a0 	beq.w	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003938:	2301      	movs	r3, #1
 800393a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393c:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a3a      	ldr	r2, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003948:	f7fe fb3e 	bl	8001fc8 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800394e:	e009      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7fe fb3a 	bl	8001fc8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d902      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	74fb      	strb	r3, [r7, #19]
        break;
 8003962:	e005      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003964:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d15c      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003980:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01f      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d019      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039b0:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039c0:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d2:	f7fe faf9 	bl	8001fc8 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d8:	e00b      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039da:	f7fe faf5 	bl	8001fc8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d902      	bls.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	74fb      	strb	r3, [r7, #19]
            break;
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f2:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ec      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a16:	4904      	ldr	r1, [pc, #16]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a34:	7c7b      	ldrb	r3, [r7, #17]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a3a:	4b9e      	ldr	r3, [pc, #632]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	4a9d      	ldr	r2, [pc, #628]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a52:	4b98      	ldr	r3, [pc, #608]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f023 0203 	bic.w	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	4994      	ldr	r1, [pc, #592]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a74:	4b8f      	ldr	r3, [pc, #572]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 020c 	bic.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	498c      	ldr	r1, [pc, #560]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a96:	4b87      	ldr	r3, [pc, #540]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	4983      	ldr	r1, [pc, #524]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ab8:	4b7e      	ldr	r3, [pc, #504]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	497b      	ldr	r1, [pc, #492]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00a      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ada:	4b76      	ldr	r3, [pc, #472]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	4972      	ldr	r1, [pc, #456]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003afc:	4b6d      	ldr	r3, [pc, #436]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	496a      	ldr	r1, [pc, #424]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	4961      	ldr	r1, [pc, #388]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b40:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4e:	4959      	ldr	r1, [pc, #356]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	4950      	ldr	r1, [pc, #320]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	4948      	ldr	r1, [pc, #288]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba6:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	493f      	ldr	r1, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d028      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bc8:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd6:	4937      	ldr	r1, [pc, #220]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003be8:	4b32      	ldr	r3, [pc, #200]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a31      	ldr	r2, [pc, #196]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf2:	60d3      	str	r3, [r2, #12]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfe:	d10c      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	2101      	movs	r1, #1
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f8c8 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d028      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d106      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c50:	60d3      	str	r3, [r2, #12]
 8003c52:	e011      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2101      	movs	r1, #1
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f899 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c84:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c92:	4908      	ldr	r1, [pc, #32]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca2:	d109      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a02      	ldr	r2, [pc, #8]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cae:	60d3      	str	r3, [r2, #12]
 8003cb0:	e014      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f867 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce8:	4b2b      	ldr	r3, [pc, #172]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf6:	4928      	ldr	r1, [pc, #160]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f844 	bl	8003d9c <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
 8003d22:	e011      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2c:	d10c      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3320      	adds	r3, #32
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f925 	bl	8003f84 <RCCEx_PLLSAI2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d54:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d62:	490d      	ldr	r1, [pc, #52]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d86:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000

08003d9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003daa:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003db6:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0203 	and.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d10d      	bne.n	8003de2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dce:	4b6c      	ldr	r3, [pc, #432]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
       ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d047      	beq.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e044      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d018      	beq.n	8003e22 <RCCEx_PLLSAI1_Config+0x86>
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d825      	bhi.n	8003e40 <RCCEx_PLLSAI1_Config+0xa4>
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d002      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x62>
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d009      	beq.n	8003e10 <RCCEx_PLLSAI1_Config+0x74>
 8003dfc:	e020      	b.n	8003e40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dfe:	4b60      	ldr	r3, [pc, #384]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11d      	bne.n	8003e46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0e:	e01a      	b.n	8003e46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e10:	4b5b      	ldr	r3, [pc, #364]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d116      	bne.n	8003e4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e013      	b.n	8003e4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d109      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e3e:	e006      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e004      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e56:	4b4a      	ldr	r3, [pc, #296]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	4944      	ldr	r1, [pc, #272]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d17d      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e78:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fe f8a0 	bl	8001fc8 <HAL_GetTick>
 8003e88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e8a:	e009      	b.n	8003ea0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e8c:	f7fe f89c 	bl	8001fc8 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003e9e:	e005      	b.n	8003eac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ea0:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ef      	bne.n	8003e8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d160      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d111      	bne.n	8003edc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6892      	ldr	r2, [r2, #8]
 8003ec8:	0211      	lsls	r1, r2, #8
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68d2      	ldr	r2, [r2, #12]
 8003ece:	0912      	lsrs	r2, r2, #4
 8003ed0:	0452      	lsls	r2, r2, #17
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	492a      	ldr	r1, [pc, #168]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	610b      	str	r3, [r1, #16]
 8003eda:	e027      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d112      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	0211      	lsls	r1, r2, #8
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6912      	ldr	r2, [r2, #16]
 8003ef8:	0852      	lsrs	r2, r2, #1
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0552      	lsls	r2, r2, #21
 8003efe:	430a      	orrs	r2, r1
 8003f00:	491f      	ldr	r1, [pc, #124]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
 8003f06:	e011      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	0211      	lsls	r1, r2, #8
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6952      	ldr	r2, [r2, #20]
 8003f1e:	0852      	lsrs	r2, r2, #1
 8003f20:	3a01      	subs	r2, #1
 8003f22:	0652      	lsls	r2, r2, #25
 8003f24:	430a      	orrs	r2, r1
 8003f26:	4916      	ldr	r1, [pc, #88]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fe f846 	bl	8001fc8 <HAL_GetTick>
 8003f3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f3e:	e009      	b.n	8003f54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f40:	f7fe f842 	bl	8001fc8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d902      	bls.n	8003f54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	73fb      	strb	r3, [r7, #15]
          break;
 8003f52:	e005      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ef      	beq.n	8003f40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f66:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	4904      	ldr	r1, [pc, #16]	; (8003f80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f92:	4b6a      	ldr	r3, [pc, #424]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f9e:	4b67      	ldr	r3, [pc, #412]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fb6:	4b61      	ldr	r3, [pc, #388]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d047      	beq.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e044      	b.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d018      	beq.n	800400a <RCCEx_PLLSAI2_Config+0x86>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d825      	bhi.n	8004028 <RCCEx_PLLSAI2_Config+0xa4>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <RCCEx_PLLSAI2_Config+0x62>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d009      	beq.n	8003ff8 <RCCEx_PLLSAI2_Config+0x74>
 8003fe4:	e020      	b.n	8004028 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe6:	4b55      	ldr	r3, [pc, #340]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e01a      	b.n	800402e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e013      	b.n	8004032 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400a:	4b4c      	ldr	r3, [pc, #304]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004016:	4b49      	ldr	r3, [pc, #292]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004026:	e006      	b.n	8004036 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e004      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004036:	bf00      	nop
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	430b      	orrs	r3, r1
 8004054:	4939      	ldr	r1, [pc, #228]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d167      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004060:	4b36      	ldr	r3, [pc, #216]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a35      	ldr	r2, [pc, #212]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fd ffac 	bl	8001fc8 <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004074:	f7fd ffa8 	bl	8001fc8 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004088:	4b2c      	ldr	r3, [pc, #176]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d14a      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	0912      	lsrs	r2, r2, #4
 80040b8:	0452      	lsls	r2, r2, #17
 80040ba:	430a      	orrs	r2, r1
 80040bc:	491f      	ldr	r1, [pc, #124]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	614b      	str	r3, [r1, #20]
 80040c2:	e011      	b.n	80040e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6892      	ldr	r2, [r2, #8]
 80040d4:	0211      	lsls	r1, r2, #8
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6912      	ldr	r2, [r2, #16]
 80040da:	0852      	lsrs	r2, r2, #1
 80040dc:	3a01      	subs	r2, #1
 80040de:	0652      	lsls	r2, r2, #25
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4916      	ldr	r1, [pc, #88]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040e8:	4b14      	ldr	r3, [pc, #80]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd ff68 	bl	8001fc8 <HAL_GetTick>
 80040f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040fa:	e009      	b.n	8004110 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040fc:	f7fd ff64 	bl	8001fc8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	73fb      	strb	r3, [r7, #15]
          break;
 800410e:	e005      	b.n	800411c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004110:	4b0a      	ldr	r3, [pc, #40]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ef      	beq.n	80040fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4904      	ldr	r1, [pc, #16]	; (800413c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000

08004140 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e049      	b.n	80041e6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	795b      	ldrb	r3, [r3, #5]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fcbc 	bl	8001ae0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0204 	orr.w	r2, r2, #4
 800417c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d104      	bne.n	8004196 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2204      	movs	r2, #4
 8004190:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e027      	b.n	80041e6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004196:	f7fd ff17 	bl	8001fc8 <HAL_GetTick>
 800419a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800419c:	e015      	b.n	80041ca <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800419e:	f7fd ff13 	bl	8001fc8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d90e      	bls.n	80041ca <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2204      	movs	r2, #4
 80041be:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e00d      	b.n	80041e6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d0e2      	beq.n	800419e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e049      	b.n	8004294 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d106      	bne.n	800421a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd fca7 	bl	8001b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 f967 	bl	8004500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d001      	beq.n	80042b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e047      	b.n	8004344 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a23      	ldr	r2, [pc, #140]	; (8004350 <HAL_TIM_Base_Start+0xb4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01d      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d018      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <HAL_TIM_Base_Start+0xb8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1e      	ldr	r2, [pc, #120]	; (8004358 <HAL_TIM_Base_Start+0xbc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00e      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_TIM_Base_Start+0xc0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_TIM_Base_Start+0xc4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_TIM_Base_Start+0x66>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIM_Base_Start+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d115      	bne.n	800432e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_TIM_Base_Start+0xcc>)
 800430a:	4013      	ands	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b06      	cmp	r3, #6
 8004312:	d015      	beq.n	8004340 <HAL_TIM_Base_Start+0xa4>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431a:	d011      	beq.n	8004340 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	e008      	b.n	8004340 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e000      	b.n	8004342 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004340:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40013400 	.word	0x40013400
 8004364:	40014000 	.word	0x40014000
 8004368:	00010007 	.word	0x00010007

0800436c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIM_ConfigClockSource+0x1c>
 8004384:	2302      	movs	r3, #2
 8004386:	e0b6      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x18a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c4:	d03e      	beq.n	8004444 <HAL_TIM_ConfigClockSource+0xd8>
 80043c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ca:	f200 8087 	bhi.w	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d2:	f000 8086 	beq.w	80044e2 <HAL_TIM_ConfigClockSource+0x176>
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d87f      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043dc:	2b70      	cmp	r3, #112	; 0x70
 80043de:	d01a      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0xaa>
 80043e0:	2b70      	cmp	r3, #112	; 0x70
 80043e2:	d87b      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043e4:	2b60      	cmp	r3, #96	; 0x60
 80043e6:	d050      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x11e>
 80043e8:	2b60      	cmp	r3, #96	; 0x60
 80043ea:	d877      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043ec:	2b50      	cmp	r3, #80	; 0x50
 80043ee:	d03c      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xfe>
 80043f0:	2b50      	cmp	r3, #80	; 0x50
 80043f2:	d873      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d058      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x13e>
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d86f      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d064      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x15e>
 8004400:	2b30      	cmp	r3, #48	; 0x30
 8004402:	d86b      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d060      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x15e>
 8004408:	2b20      	cmp	r3, #32
 800440a:	d867      	bhi.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d05c      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x15e>
 8004410:	2b10      	cmp	r3, #16
 8004412:	d05a      	beq.n	80044ca <HAL_TIM_ConfigClockSource+0x15e>
 8004414:	e062      	b.n	80044dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004426:	f000 f97f 	bl	8004728 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	609a      	str	r2, [r3, #8]
      break;
 8004442:	e04f      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004454:	f000 f968 	bl	8004728 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004466:	609a      	str	r2, [r3, #8]
      break;
 8004468:	e03c      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	461a      	mov	r2, r3
 8004478:	f000 f8dc 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2150      	movs	r1, #80	; 0x50
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f935 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 8004488:	e02c      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004496:	461a      	mov	r2, r3
 8004498:	f000 f8fb 	bl	8004692 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2160      	movs	r1, #96	; 0x60
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f925 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044a8:	e01c      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	461a      	mov	r2, r3
 80044b8:	f000 f8bc 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 f915 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044c8:	e00c      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f000 f90c 	bl	80046f2 <TIM_ITRx_SetConfig>
      break;
 80044da:	e003      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e000      	b.n	80044e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a40      	ldr	r2, [pc, #256]	; (8004614 <TIM_Base_SetConfig+0x114>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d013      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d00f      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <TIM_Base_SetConfig+0x118>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00b      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3c      	ldr	r2, [pc, #240]	; (800461c <TIM_Base_SetConfig+0x11c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3b      	ldr	r2, [pc, #236]	; (8004620 <TIM_Base_SetConfig+0x120>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d003      	beq.n	8004540 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <TIM_Base_SetConfig+0x124>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d108      	bne.n	8004552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2f      	ldr	r2, [pc, #188]	; (8004614 <TIM_Base_SetConfig+0x114>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01f      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004560:	d01b      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <TIM_Base_SetConfig+0x118>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d017      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2b      	ldr	r2, [pc, #172]	; (800461c <TIM_Base_SetConfig+0x11c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2a      	ldr	r2, [pc, #168]	; (8004620 <TIM_Base_SetConfig+0x120>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00f      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a29      	ldr	r2, [pc, #164]	; (8004624 <TIM_Base_SetConfig+0x124>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00b      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a28      	ldr	r2, [pc, #160]	; (8004628 <TIM_Base_SetConfig+0x128>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d007      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a27      	ldr	r2, [pc, #156]	; (800462c <TIM_Base_SetConfig+0x12c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d003      	beq.n	800459a <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <TIM_Base_SetConfig+0x130>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d108      	bne.n	80045ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <TIM_Base_SetConfig+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0xf8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a12      	ldr	r2, [pc, #72]	; (8004624 <TIM_Base_SetConfig+0x124>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0xf8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a11      	ldr	r2, [pc, #68]	; (8004628 <TIM_Base_SetConfig+0x128>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a10      	ldr	r2, [pc, #64]	; (800462c <TIM_Base_SetConfig+0x12c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0xf8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a0f      	ldr	r2, [pc, #60]	; (8004630 <TIM_Base_SetConfig+0x130>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d103      	bne.n	8004600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	615a      	str	r2, [r3, #20]
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40013400 	.word	0x40013400
 8004628:	40014000 	.word	0x40014000
 800462c:	40014400 	.word	0x40014400
 8004630:	40014800 	.word	0x40014800

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 030a 	bic.w	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004692:	b480      	push	{r7}
 8004694:	b087      	sub	sp, #28
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	f043 0307 	orr.w	r3, r3, #7
 8004714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	021a      	lsls	r2, r3, #8
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	431a      	orrs	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	4313      	orrs	r3, r2
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	609a      	str	r2, [r3, #8]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800477c:	2302      	movs	r3, #2
 800477e:	e068      	b.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2e      	ldr	r2, [pc, #184]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d108      	bne.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d01d      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d018      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1a      	ldr	r2, [pc, #104]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a13      	ldr	r2, [pc, #76]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a14      	ldr	r2, [pc, #80]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d10c      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800482c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	4313      	orrs	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40013400 	.word	0x40013400
 8004868:	40000400 	.word	0x40000400
 800486c:	40000800 	.word	0x40000800
 8004870:	40000c00 	.word	0x40000c00
 8004874:	40014000 	.word	0x40014000

08004878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e040      	b.n	800490c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd f996 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2224      	movs	r2, #36	; 0x24
 80048a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fc34 	bl	800512c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f979 	bl	8004bbc <UART_SetConfig>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e01b      	b.n	800490c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fcb3 	bl	8005270 <UART_CheckIdleState>
 800490a:	4603      	mov	r3, r0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	2b20      	cmp	r3, #32
 800492a:	d178      	bne.n	8004a1e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Transmit+0x24>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e071      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2221      	movs	r2, #33	; 0x21
 8004948:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fd fb3d 	bl	8001fc8 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x68>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004984:	e030      	b.n	80049e8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fd15 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e03c      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	b292      	uxth	r2, r2
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	3302      	adds	r3, #2
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e008      	b.n	80049d6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b292      	uxth	r2, r2
 80049ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1c8      	bne.n	8004986 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fcde 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e005      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e000      	b.n	8004a20 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
  }
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3720      	adds	r7, #32
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	f040 80b6 	bne.w	8004bb0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Receive+0x28>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0ae      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2222      	movs	r2, #34	; 0x22
 8004a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a6a:	f7fd faad 	bl	8001fc8 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a88:	d10e      	bne.n	8004aa8 <HAL_UART_Receive+0x80>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_UART_Receive+0x76>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a9c:	e02d      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	; 0xff
 8004aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa6:	e028      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <HAL_UART_Receive+0xa4>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d104      	bne.n	8004ac2 <HAL_UART_Receive+0x9a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	22ff      	movs	r2, #255	; 0xff
 8004abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ac0:	e01b      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	227f      	movs	r2, #127	; 0x7f
 8004ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aca:	e016      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad4:	d10d      	bne.n	8004af2 <HAL_UART_Receive+0xca>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d104      	bne.n	8004ae8 <HAL_UART_Receive+0xc0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	227f      	movs	r2, #127	; 0x7f
 8004ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ae6:	e008      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	223f      	movs	r2, #63	; 0x3f
 8004aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af0:	e003      	b.n	8004afa <HAL_UART_Receive+0xd2>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d108      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e003      	b.n	8004b26 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b26:	e037      	b.n	8004b98 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2120      	movs	r1, #32
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fc44 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e033      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10c      	bne.n	8004b6a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	3302      	adds	r3, #2
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	e00d      	b.n	8004b86 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	8a7b      	ldrh	r3, [r7, #18]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4013      	ands	r3, r2
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3301      	adds	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1c1      	bne.n	8004b28 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc0:	b08a      	sub	sp, #40	; 0x28
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4ba4      	ldr	r3, [pc, #656]	; (8004e7c <UART_SetConfig+0x2c0>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a99      	ldr	r2, [pc, #612]	; (8004e80 <UART_SetConfig+0x2c4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c24:	4313      	orrs	r3, r2
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a90      	ldr	r2, [pc, #576]	; (8004e84 <UART_SetConfig+0x2c8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d126      	bne.n	8004c94 <UART_SetConfig+0xd8>
 8004c46:	4b90      	ldr	r3, [pc, #576]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d81b      	bhi.n	8004c8c <UART_SetConfig+0xd0>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0xa0>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c72:	e116      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004c74:	2302      	movs	r3, #2
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e112      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e10e      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004c84:	2308      	movs	r3, #8
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e10a      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e106      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a7c      	ldr	r2, [pc, #496]	; (8004e8c <UART_SetConfig+0x2d0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d138      	bne.n	8004d10 <UART_SetConfig+0x154>
 8004c9e:	4b7a      	ldr	r3, [pc, #488]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d82d      	bhi.n	8004d08 <UART_SetConfig+0x14c>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0xf8>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d09 	.word	0x08004d09
 8004cbc:	08004d09 	.word	0x08004d09
 8004cc0:	08004d09 	.word	0x08004d09
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004d09 	.word	0x08004d09
 8004ccc:	08004d09 	.word	0x08004d09
 8004cd0:	08004d09 	.word	0x08004d09
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004d09 	.word	0x08004d09
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e0d8      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e0d4      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e0d0      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d00:	2308      	movs	r3, #8
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e0cc      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d08:	2310      	movs	r3, #16
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e0c8      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5e      	ldr	r2, [pc, #376]	; (8004e90 <UART_SetConfig+0x2d4>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d125      	bne.n	8004d66 <UART_SetConfig+0x1aa>
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d016      	beq.n	8004d56 <UART_SetConfig+0x19a>
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d818      	bhi.n	8004d5e <UART_SetConfig+0x1a2>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d00a      	beq.n	8004d46 <UART_SetConfig+0x18a>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d814      	bhi.n	8004d5e <UART_SetConfig+0x1a2>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <UART_SetConfig+0x182>
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d008      	beq.n	8004d4e <UART_SetConfig+0x192>
 8004d3c:	e00f      	b.n	8004d5e <UART_SetConfig+0x1a2>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d44:	e0ad      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d46:	2302      	movs	r3, #2
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4c:	e0a9      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d4e:	2304      	movs	r3, #4
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d54:	e0a5      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d56:	2308      	movs	r3, #8
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5c:	e0a1      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d5e:	2310      	movs	r3, #16
 8004d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d64:	e09d      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a4a      	ldr	r2, [pc, #296]	; (8004e94 <UART_SetConfig+0x2d8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d125      	bne.n	8004dbc <UART_SetConfig+0x200>
 8004d70:	4b45      	ldr	r3, [pc, #276]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d7c:	d016      	beq.n	8004dac <UART_SetConfig+0x1f0>
 8004d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d80:	d818      	bhi.n	8004db4 <UART_SetConfig+0x1f8>
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d00a      	beq.n	8004d9c <UART_SetConfig+0x1e0>
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d814      	bhi.n	8004db4 <UART_SetConfig+0x1f8>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <UART_SetConfig+0x1d8>
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d008      	beq.n	8004da4 <UART_SetConfig+0x1e8>
 8004d92:	e00f      	b.n	8004db4 <UART_SetConfig+0x1f8>
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9a:	e082      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da2:	e07e      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004da4:	2304      	movs	r3, #4
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e07a      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004dac:	2308      	movs	r3, #8
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e076      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004db4:	2310      	movs	r3, #16
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e072      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a35      	ldr	r2, [pc, #212]	; (8004e98 <UART_SetConfig+0x2dc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d12a      	bne.n	8004e1c <UART_SetConfig+0x260>
 8004dc6:	4b30      	ldr	r3, [pc, #192]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd4:	d01a      	beq.n	8004e0c <UART_SetConfig+0x250>
 8004dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dda:	d81b      	bhi.n	8004e14 <UART_SetConfig+0x258>
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de0:	d00c      	beq.n	8004dfc <UART_SetConfig+0x240>
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	d815      	bhi.n	8004e14 <UART_SetConfig+0x258>
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <UART_SetConfig+0x238>
 8004dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df0:	d008      	beq.n	8004e04 <UART_SetConfig+0x248>
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x258>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e052      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e02:	e04e      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e04:	2304      	movs	r3, #4
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e04a      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e046      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e14:	2310      	movs	r3, #16
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e042      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <UART_SetConfig+0x2c4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d13a      	bne.n	8004e9c <UART_SetConfig+0x2e0>
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e34:	d01a      	beq.n	8004e6c <UART_SetConfig+0x2b0>
 8004e36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e3a:	d81b      	bhi.n	8004e74 <UART_SetConfig+0x2b8>
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d00c      	beq.n	8004e5c <UART_SetConfig+0x2a0>
 8004e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e46:	d815      	bhi.n	8004e74 <UART_SetConfig+0x2b8>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x298>
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e50:	d008      	beq.n	8004e64 <UART_SetConfig+0x2a8>
 8004e52:	e00f      	b.n	8004e74 <UART_SetConfig+0x2b8>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e022      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e62:	e01e      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e64:	2304      	movs	r3, #4
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6a:	e01a      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e016      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e74:	2310      	movs	r3, #16
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7a:	e012      	b.n	8004ea2 <UART_SetConfig+0x2e6>
 8004e7c:	efff69f3 	.word	0xefff69f3
 8004e80:	40008000 	.word	0x40008000
 8004e84:	40013800 	.word	0x40013800
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40004400 	.word	0x40004400
 8004e90:	40004800 	.word	0x40004800
 8004e94:	40004c00 	.word	0x40004c00
 8004e98:	40005000 	.word	0x40005000
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a9f      	ldr	r2, [pc, #636]	; (8005124 <UART_SetConfig+0x568>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d17a      	bne.n	8004fa2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d824      	bhi.n	8004efe <UART_SetConfig+0x342>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <UART_SetConfig+0x300>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004eff 	.word	0x08004eff
 8004ec4:	08004ee9 	.word	0x08004ee9
 8004ec8:	08004eff 	.word	0x08004eff
 8004ecc:	08004eef 	.word	0x08004eef
 8004ed0:	08004eff 	.word	0x08004eff
 8004ed4:	08004eff 	.word	0x08004eff
 8004ed8:	08004eff 	.word	0x08004eff
 8004edc:	08004ef7 	.word	0x08004ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee0:	f7fe fbe6 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004ee4:	61f8      	str	r0, [r7, #28]
        break;
 8004ee6:	e010      	b.n	8004f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee8:	4b8f      	ldr	r3, [pc, #572]	; (8005128 <UART_SetConfig+0x56c>)
 8004eea:	61fb      	str	r3, [r7, #28]
        break;
 8004eec:	e00d      	b.n	8004f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eee:	f7fe fb47 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004ef2:	61f8      	str	r0, [r7, #28]
        break;
 8004ef4:	e009      	b.n	8004f0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efa:	61fb      	str	r3, [r7, #28]
        break;
 8004efc:	e005      	b.n	8004f0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80fb 	beq.w	8005108 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d305      	bcc.n	8004f2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d903      	bls.n	8004f36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f34:	e0e8      	b.n	8005108 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	461c      	mov	r4, r3
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	022b      	lsls	r3, r5, #8
 8004f48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f4c:	0222      	lsls	r2, r4, #8
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	6849      	ldr	r1, [r1, #4]
 8004f52:	0849      	lsrs	r1, r1, #1
 8004f54:	2000      	movs	r0, #0
 8004f56:	4688      	mov	r8, r1
 8004f58:	4681      	mov	r9, r0
 8004f5a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f5e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f70:	4650      	mov	r0, sl
 8004f72:	4659      	mov	r1, fp
 8004f74:	f7fb fe88 	bl	8000c88 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f86:	d308      	bcc.n	8004f9a <UART_SetConfig+0x3de>
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8e:	d204      	bcs.n	8004f9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e0b6      	b.n	8005108 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004fa0:	e0b2      	b.n	8005108 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004faa:	d15e      	bne.n	800506a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d828      	bhi.n	8005006 <UART_SetConfig+0x44a>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x400>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08005007 	.word	0x08005007
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08005007 	.word	0x08005007
 8004fd4:	08005007 	.word	0x08005007
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	08004fff 	.word	0x08004fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fe fb66 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	61f8      	str	r0, [r7, #28]
        break;
 8004fe6:	e014      	b.n	8005012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe8:	f7fe fb78 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004fec:	61f8      	str	r0, [r7, #28]
        break;
 8004fee:	e010      	b.n	8005012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	; (8005128 <UART_SetConfig+0x56c>)
 8004ff2:	61fb      	str	r3, [r7, #28]
        break;
 8004ff4:	e00d      	b.n	8005012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fe fac3 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 8004ffa:	61f8      	str	r0, [r7, #28]
        break;
 8004ffc:	e009      	b.n	8005012 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005002:	61fb      	str	r3, [r7, #28]
        break;
 8005004:	e005      	b.n	8005012 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005010:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d077      	beq.n	8005108 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	005a      	lsls	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	441a      	add	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d916      	bls.n	8005062 <UART_SetConfig+0x4a6>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800503a:	d212      	bcs.n	8005062 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	b29b      	uxth	r3, r3
 8005040:	f023 030f 	bic.w	r3, r3, #15
 8005044:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	b29b      	uxth	r3, r3
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	b29a      	uxth	r2, r3
 8005052:	8afb      	ldrh	r3, [r7, #22]
 8005054:	4313      	orrs	r3, r2
 8005056:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	8afa      	ldrh	r2, [r7, #22]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e052      	b.n	8005108 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005068:	e04e      	b.n	8005108 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800506a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800506e:	2b08      	cmp	r3, #8
 8005070:	d827      	bhi.n	80050c2 <UART_SetConfig+0x506>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x4bc>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	0800509d 	.word	0x0800509d
 800507c:	080050a5 	.word	0x080050a5
 8005080:	080050ad 	.word	0x080050ad
 8005084:	080050c3 	.word	0x080050c3
 8005088:	080050b3 	.word	0x080050b3
 800508c:	080050c3 	.word	0x080050c3
 8005090:	080050c3 	.word	0x080050c3
 8005094:	080050c3 	.word	0x080050c3
 8005098:	080050bb 	.word	0x080050bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800509c:	f7fe fb08 	bl	80036b0 <HAL_RCC_GetPCLK1Freq>
 80050a0:	61f8      	str	r0, [r7, #28]
        break;
 80050a2:	e014      	b.n	80050ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a4:	f7fe fb1a 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 80050a8:	61f8      	str	r0, [r7, #28]
        break;
 80050aa:	e010      	b.n	80050ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050ac:	4b1e      	ldr	r3, [pc, #120]	; (8005128 <UART_SetConfig+0x56c>)
 80050ae:	61fb      	str	r3, [r7, #28]
        break;
 80050b0:	e00d      	b.n	80050ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b2:	f7fe fa65 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 80050b6:	61f8      	str	r0, [r7, #28]
        break;
 80050b8:	e009      	b.n	80050ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050be:	61fb      	str	r3, [r7, #28]
        break;
 80050c0:	e005      	b.n	80050ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050cc:	bf00      	nop
    }

    if (pclk != 0U)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d019      	beq.n	8005108 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	085a      	lsrs	r2, r3, #1
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b0f      	cmp	r3, #15
 80050ec:	d909      	bls.n	8005102 <UART_SetConfig+0x546>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f4:	d205      	bcs.n	8005102 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e002      	b.n	8005108 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	; 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005122:	bf00      	nop
 8005124:	40008000 	.word	0x40008000
 8005128:	00f42400 	.word	0x00f42400

0800512c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800522a:	d10a      	bne.n	8005242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b098      	sub	sp, #96	; 0x60
 8005274:	af02      	add	r7, sp, #8
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005280:	f7fc fea2 	bl	8001fc8 <HAL_GetTick>
 8005284:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b08      	cmp	r3, #8
 8005292:	d12e      	bne.n	80052f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f88c 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d021      	beq.n	80052f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c2:	653b      	str	r3, [r7, #80]	; 0x50
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052cc:	647b      	str	r3, [r7, #68]	; 0x44
 80052ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e6      	bne.n	80052ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e062      	b.n	80053b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d149      	bne.n	8005394 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f856 	bl	80053c0 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03c      	beq.n	8005394 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	623b      	str	r3, [r7, #32]
   return(result);
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005338:	633b      	str	r3, [r7, #48]	; 0x30
 800533a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60fb      	str	r3, [r7, #12]
   return(result);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0301 	bic.w	r3, r3, #1
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536c:	61fa      	str	r2, [r7, #28]
 800536e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	617b      	str	r3, [r7, #20]
   return(result);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e011      	b.n	80053b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3758      	adds	r7, #88	; 0x58
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d0:	e049      	b.n	8005466 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053d8:	d045      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fc fdf5 	bl	8001fc8 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e048      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0304 	and.w	r3, r3, #4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d031      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d110      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2208      	movs	r2, #8
 8005416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f838 	bl	800548e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2208      	movs	r2, #8
 8005422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e029      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005440:	d111      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800544a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f81e 	bl	800548e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e00f      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4013      	ands	r3, r2
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	429a      	cmp	r2, r3
 8005482:	d0a6      	beq.n	80053d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b095      	sub	sp, #84	; 0x54
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b4:	643b      	str	r3, [r7, #64]	; 0x40
 80054b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e6      	bne.n	8005496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	2b01      	cmp	r3, #1
 8005502:	d118      	bne.n	8005536 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	60bb      	str	r3, [r7, #8]
   return(result);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0310 	bic.w	r3, r3, #16
 8005518:	647b      	str	r3, [r7, #68]	; 0x44
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6979      	ldr	r1, [r7, #20]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	613b      	str	r3, [r7, #16]
   return(result);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e6      	bne.n	8005504 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	669a      	str	r2, [r3, #104]	; 0x68
}
 800554a:	bf00      	nop
 800554c:	3754      	adds	r7, #84	; 0x54
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <__NVIC_SetPriority>:
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db0a      	blt.n	8005582 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	490c      	ldr	r1, [pc, #48]	; (80055a4 <__NVIC_SetPriority+0x4c>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	440b      	add	r3, r1
 800557c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005580:	e00a      	b.n	8005598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <__NVIC_SetPriority+0x50>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	3b04      	subs	r3, #4
 8005590:	0112      	lsls	r2, r2, #4
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	440b      	add	r3, r1
 8005596:	761a      	strb	r2, [r3, #24]
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000e100 	.word	0xe000e100
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055b0:	2100      	movs	r1, #0
 80055b2:	f06f 0004 	mvn.w	r0, #4
 80055b6:	f7ff ffcf 	bl	8005558 <__NVIC_SetPriority>
#endif
}
 80055ba:	bf00      	nop
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c6:	f3ef 8305 	mrs	r3, IPSR
 80055ca:	603b      	str	r3, [r7, #0]
  return(result);
 80055cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055d2:	f06f 0305 	mvn.w	r3, #5
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	e00c      	b.n	80055f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <osKernelInitialize+0x44>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d105      	bne.n	80055ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <osKernelInitialize+0x44>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	e002      	b.n	80055f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055f4:	687b      	ldr	r3, [r7, #4]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	200003e4 	.word	0x200003e4

08005608 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800560e:	f3ef 8305 	mrs	r3, IPSR
 8005612:	603b      	str	r3, [r7, #0]
  return(result);
 8005614:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <osKernelStart+0x1a>
    stat = osErrorISR;
 800561a:	f06f 0305 	mvn.w	r3, #5
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	e010      	b.n	8005644 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005622:	4b0b      	ldr	r3, [pc, #44]	; (8005650 <osKernelStart+0x48>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d109      	bne.n	800563e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800562a:	f7ff ffbf 	bl	80055ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <osKernelStart+0x48>)
 8005630:	2202      	movs	r2, #2
 8005632:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005634:	f001 fc92 	bl	8006f5c <vTaskStartScheduler>
      stat = osOK;
 8005638:	2300      	movs	r3, #0
 800563a:	607b      	str	r3, [r7, #4]
 800563c:	e002      	b.n	8005644 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005644:	687b      	ldr	r3, [r7, #4]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	200003e4 	.word	0x200003e4

08005654 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af04      	add	r7, sp, #16
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005660:	2300      	movs	r3, #0
 8005662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005664:	f3ef 8305 	mrs	r3, IPSR
 8005668:	617b      	str	r3, [r7, #20]
  return(result);
 800566a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800566c:	2b00      	cmp	r3, #0
 800566e:	d17f      	bne.n	8005770 <osThreadNew+0x11c>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d07c      	beq.n	8005770 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800567a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800567c:	2318      	movs	r3, #24
 800567e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005688:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d045      	beq.n	800571c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <osThreadNew+0x4a>
        name = attr->name;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <osThreadNew+0x70>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b38      	cmp	r3, #56	; 0x38
 80056b6:	d805      	bhi.n	80056c4 <osThreadNew+0x70>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <osThreadNew+0x74>
        return (NULL);
 80056c4:	2300      	movs	r3, #0
 80056c6:	e054      	b.n	8005772 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <osThreadNew+0xaa>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2ba7      	cmp	r3, #167	; 0xa7
 80056e6:	d90a      	bls.n	80056fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <osThreadNew+0xaa>
        mem = 1;
 80056f8:	2301      	movs	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e010      	b.n	8005720 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <osThreadNew+0xcc>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <osThreadNew+0xcc>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <osThreadNew+0xcc>
          mem = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e001      	b.n	8005720 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d110      	bne.n	8005748 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800572e:	9202      	str	r2, [sp, #8]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 fa21 	bl	8006b84 <xTaskCreateStatic>
 8005742:	4603      	mov	r3, r0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e013      	b.n	8005770 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	b29a      	uxth	r2, r3
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f001 fa6c 	bl	8006c3e <xTaskCreate>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <osThreadNew+0x11c>
            hTask = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005770:	693b      	ldr	r3, [r7, #16]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005782:	f3ef 8305 	mrs	r3, IPSR
 8005786:	603b      	str	r3, [r7, #0]
  return(result);
 8005788:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <osThreadYield+0x1a>
    stat = osErrorISR;
 800578e:	f06f 0305 	mvn.w	r3, #5
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	e009      	b.n	80057aa <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <osThreadYield+0x3c>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80057aa:	687b      	ldr	r3, [r7, #4]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8305 	mrs	r3, IPSR
 80057c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <osDelay+0x1c>
    stat = osErrorISR;
 80057d0:	f06f 0305 	mvn.w	r3, #5
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e007      	b.n	80057e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fb86 	bl	8006ef4 <vTaskDelay>
    }
  }

  return (stat);
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
 8005802:	60bb      	str	r3, [r7, #8]
  return(result);
 8005804:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005806:	2b00      	cmp	r3, #0
 8005808:	d174      	bne.n	80058f4 <osMutexNew+0x102>
    if (attr != NULL) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e001      	b.n	800581c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <osMutexNew+0x3a>
      rmtx = 1U;
 8005826:	2301      	movs	r3, #1
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e001      	b.n	8005830 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d15c      	bne.n	80058f4 <osMutexNew+0x102>
      mem = -1;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800583e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d015      	beq.n	8005872 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d006      	beq.n	800585c <osMutexNew+0x6a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b4f      	cmp	r3, #79	; 0x4f
 8005854:	d902      	bls.n	800585c <osMutexNew+0x6a>
          mem = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	e00c      	b.n	8005876 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <osMutexNew+0x84>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d104      	bne.n	8005876 <osMutexNew+0x84>
            mem = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	e001      	b.n	8005876 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d112      	bne.n	80058a2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4619      	mov	r1, r3
 8005888:	2004      	movs	r0, #4
 800588a:	f000 fbea 	bl	8006062 <xQueueCreateMutexStatic>
 800588e:	61f8      	str	r0, [r7, #28]
 8005890:	e016      	b.n	80058c0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4619      	mov	r1, r3
 8005898:	2001      	movs	r0, #1
 800589a:	f000 fbe2 	bl	8006062 <xQueueCreateMutexStatic>
 800589e:	61f8      	str	r0, [r7, #28]
 80058a0:	e00e      	b.n	80058c0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80058ae:	2004      	movs	r0, #4
 80058b0:	f000 fbbf 	bl	8006032 <xQueueCreateMutex>
 80058b4:	61f8      	str	r0, [r7, #28]
 80058b6:	e003      	b.n	80058c0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058b8:	2001      	movs	r0, #1
 80058ba:	f000 fbba 	bl	8006032 <xQueueCreateMutex>
 80058be:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <osMutexNew+0xee>
        if (attr != NULL) {
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <osMutexNew+0xe2>
          name = attr->name;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e001      	b.n	80058d8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	69f8      	ldr	r0, [r7, #28]
 80058dc:	f001 f8f4 	bl	8006ac8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d006      	beq.n	80058f4 <osMutexNew+0x102>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80058f4:	69fb      	ldr	r3, [r7, #28]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591c:	f3ef 8305 	mrs	r3, IPSR
 8005920:	60bb      	str	r3, [r7, #8]
  return(result);
 8005922:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005928:	f06f 0305 	mvn.w	r3, #5
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e02c      	b.n	800598a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005936:	f06f 0303 	mvn.w	r3, #3
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e025      	b.n	800598a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d011      	beq.n	8005968 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6938      	ldr	r0, [r7, #16]
 8005948:	f000 fbda 	bl	8006100 <xQueueTakeMutexRecursive>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d01b      	beq.n	800598a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005958:	f06f 0301 	mvn.w	r3, #1
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e014      	b.n	800598a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005960:	f06f 0302 	mvn.w	r3, #2
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e010      	b.n	800598a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6938      	ldr	r0, [r7, #16]
 800596c:	f000 fe78 	bl	8006660 <xQueueSemaphoreTake>
 8005970:	4603      	mov	r3, r0
 8005972:	2b01      	cmp	r3, #1
 8005974:	d009      	beq.n	800598a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800597c:	f06f 0301 	mvn.w	r3, #1
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e002      	b.n	800598a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005984:	f06f 0302 	mvn.w	r3, #2
 8005988:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800598a:	697b      	ldr	r3, [r7, #20]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b0:	f3ef 8305 	mrs	r3, IPSR
 80059b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80059bc:	f06f 0305 	mvn.w	r3, #5
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e01f      	b.n	8005a04 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d103      	bne.n	80059d2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80059ca:	f06f 0303 	mvn.w	r3, #3
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	e018      	b.n	8005a04 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f000 fb5d 	bl	8006098 <xQueueGiveMutexRecursive>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d00f      	beq.n	8005a04 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059e4:	f06f 0302 	mvn.w	r3, #2
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e00b      	b.n	8005a04 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80059ec:	2300      	movs	r3, #0
 80059ee:	2200      	movs	r2, #0
 80059f0:	2100      	movs	r1, #0
 80059f2:	6938      	ldr	r0, [r7, #16]
 80059f4:	f000 fbba 	bl	800616c <xQueueGenericSend>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d002      	beq.n	8005a04 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059fe:	f06f 0302 	mvn.w	r3, #2
 8005a02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a04:	697b      	ldr	r3, [r7, #20]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b08a      	sub	sp, #40	; 0x28
 8005a12:	af02      	add	r7, sp, #8
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a1e:	f3ef 8305 	mrs	r3, IPSR
 8005a22:	613b      	str	r3, [r7, #16]
  return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d15f      	bne.n	8005aea <osMessageQueueNew+0xdc>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d05c      	beq.n	8005aea <osMessageQueueNew+0xdc>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d059      	beq.n	8005aea <osMessageQueueNew+0xdc>
    mem = -1;
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d029      	beq.n	8005a96 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d012      	beq.n	8005a70 <osMessageQueueNew+0x62>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b4f      	cmp	r3, #79	; 0x4f
 8005a50:	d90e      	bls.n	8005a70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	fb01 f303 	mul.w	r3, r1, r3
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <osMessageQueueNew+0x62>
        mem = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e014      	b.n	8005a9a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d110      	bne.n	8005a9a <osMessageQueueNew+0x8c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10c      	bne.n	8005a9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <osMessageQueueNew+0x8c>
          mem = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e001      	b.n	8005a9a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10b      	bne.n	8005ab8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	9100      	str	r1, [sp, #0]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f9d0 	bl	8005e54 <xQueueGenericCreateStatic>
 8005ab4:	61f8      	str	r0, [r7, #28]
 8005ab6:	e008      	b.n	8005aca <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa3e 	bl	8005f44 <xQueueGenericCreate>
 8005ac8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e001      	b.n	8005ae2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	69f8      	ldr	r0, [r7, #28]
 8005ae6:	f000 ffef 	bl	8006ac8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005aea:	69fb      	ldr	r3, [r7, #28]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3720      	adds	r7, #32
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	603b      	str	r3, [r7, #0]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0c:	f3ef 8305 	mrs	r3, IPSR
 8005b10:	617b      	str	r3, [r7, #20]
  return(result);
 8005b12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d028      	beq.n	8005b6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <osMessageQueuePut+0x36>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <osMessageQueuePut+0x36>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b2a:	f06f 0303 	mvn.w	r3, #3
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e038      	b.n	8005ba4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b36:	f107 0210 	add.w	r2, r7, #16
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	69b8      	ldr	r0, [r7, #24]
 8005b40:	f000 fc12 	bl	8006368 <xQueueGenericSendFromISR>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d003      	beq.n	8005b52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b4a:	f06f 0302 	mvn.w	r3, #2
 8005b4e:	61fb      	str	r3, [r7, #28]
 8005b50:	e028      	b.n	8005ba4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d025      	beq.n	8005ba4 <osMessageQueuePut+0xb0>
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <osMessageQueuePut+0xbc>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	e01c      	b.n	8005ba4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <osMessageQueuePut+0x82>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b76:	f06f 0303 	mvn.w	r3, #3
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	e012      	b.n	8005ba4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b7e:	2300      	movs	r3, #0
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	69b8      	ldr	r0, [r7, #24]
 8005b86:	f000 faf1 	bl	800616c <xQueueGenericSend>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d009      	beq.n	8005ba4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b96:	f06f 0301 	mvn.w	r3, #1
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e002      	b.n	8005ba4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b9e:	f06f 0302 	mvn.w	r3, #2
 8005ba2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ba4:	69fb      	ldr	r3, [r7, #28]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a06      	ldr	r2, [pc, #24]	; (8005be4 <vApplicationGetIdleTaskMemory+0x30>)
 8005bca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	200003e8 	.word	0x200003e8
 8005be4:	20000490 	.word	0x20000490

08005be8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a07      	ldr	r2, [pc, #28]	; (8005c14 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4a06      	ldr	r2, [pc, #24]	; (8005c18 <vApplicationGetTimerTaskMemory+0x30>)
 8005bfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	20000890 	.word	0x20000890
 8005c18:	20000938 	.word	0x20000938

08005c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f103 0208 	add.w	r2, r3, #8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f103 0208 	add.w	r2, r3, #8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f103 0208 	add.w	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	601a      	str	r2, [r3, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd4:	d103      	bne.n	8005cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e00c      	b.n	8005cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e002      	b.n	8005cec <vListInsert+0x2e>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d2f6      	bcs.n	8005ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6892      	ldr	r2, [r2, #8]
 8005d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d103      	bne.n	8005d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005daa:	bf00      	nop
 8005dac:	e7fe      	b.n	8005dac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dae:	f002 fb99 	bl	80084e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	3b01      	subs	r3, #1
 8005de0:	68f9      	ldr	r1, [r7, #12]
 8005de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	441a      	add	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	22ff      	movs	r2, #255	; 0xff
 8005df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d114      	bne.n	8005e2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3310      	adds	r3, #16
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fb3d 	bl	8007490 <xTaskRemoveFromEventList>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e1c:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <xQueueGenericReset+0xcc>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	e009      	b.n	8005e42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3310      	adds	r3, #16
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fef2 	bl	8005c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3324      	adds	r3, #36	; 0x24
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff feed 	bl	8005c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f002 fb7f 	bl	8008544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e46:	2301      	movs	r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	; 0x38
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <xQueueGenericCreateStatic+0x52>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <xQueueGenericCreateStatic+0x56>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericCreateStatic+0x58>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10a      	bne.n	8005ec6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <xQueueGenericCreateStatic+0x7e>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <xQueueGenericCreateStatic+0x82>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <xQueueGenericCreateStatic+0x84>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	61fb      	str	r3, [r7, #28]
}
 8005eee:	bf00      	nop
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ef2:	2350      	movs	r3, #80	; 0x50
 8005ef4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b50      	cmp	r3, #80	; 0x50
 8005efa:	d00a      	beq.n	8005f12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	61bb      	str	r3, [r7, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00d      	beq.n	8005f3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f83f 	bl	8005fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3730      	adds	r7, #48	; 0x30
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10a      	bne.n	8005f6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	613b      	str	r3, [r7, #16]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	fb02 f303 	mul.w	r3, r2, r3
 8005f76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3350      	adds	r3, #80	; 0x50
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f002 fbd3 	bl	8008728 <pvPortMalloc>
 8005f82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3350      	adds	r3, #80	; 0x50
 8005f92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f9c:	79fa      	ldrb	r2, [r7, #7]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f805 	bl	8005fb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fae:	69bb      	ldr	r3, [r7, #24]
	}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d103      	bne.n	8005fd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	e002      	b.n	8005fda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	69b8      	ldr	r0, [r7, #24]
 8005fea:	f7ff fecb 	bl	8005d84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00e      	beq.n	800602a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8a1 	bl	800616c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800603c:	2301      	movs	r3, #1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	2300      	movs	r3, #0
 8006042:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	461a      	mov	r2, r3
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f7ff ff7a 	bl	8005f44 <xQueueGenericCreate>
 8006050:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff ffd3 	bl	8005ffe <prvInitialiseMutex>

		return xNewQueue;
 8006058:	68fb      	ldr	r3, [r7, #12]
	}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af02      	add	r7, sp, #8
 8006068:	4603      	mov	r3, r0
 800606a:	6039      	str	r1, [r7, #0]
 800606c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800606e:	2301      	movs	r3, #1
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2200      	movs	r2, #0
 800607e:	6939      	ldr	r1, [r7, #16]
 8006080:	6978      	ldr	r0, [r7, #20]
 8006082:	f7ff fee7 	bl	8005e54 <xQueueGenericCreateStatic>
 8006086:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff ffb8 	bl	8005ffe <prvInitialiseMutex>

		return xNewQueue;
 800608e:	68fb      	ldr	r3, [r7, #12]
	}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	60fb      	str	r3, [r7, #12]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	689c      	ldr	r4, [r3, #8]
 80060c4:	f001 fba6 	bl	8007814 <xTaskGetCurrentTaskHandle>
 80060c8:	4603      	mov	r3, r0
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d111      	bne.n	80060f2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	1e5a      	subs	r2, r3, #1
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d105      	bne.n	80060ec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80060e0:	2300      	movs	r3, #0
 80060e2:	2200      	movs	r2, #0
 80060e4:	2100      	movs	r1, #0
 80060e6:	6938      	ldr	r0, [r7, #16]
 80060e8:	f000 f840 	bl	800616c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e001      	b.n	80060f6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80060f6:	697b      	ldr	r3, [r7, #20]
	}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd90      	pop	{r4, r7, pc}

08006100 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	60fb      	str	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	689c      	ldr	r4, [r3, #8]
 800612e:	f001 fb71 	bl	8007814 <xTaskGetCurrentTaskHandle>
 8006132:	4603      	mov	r3, r0
 8006134:	429c      	cmp	r4, r3
 8006136:	d107      	bne.n	8006148 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e00c      	b.n	8006162 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6938      	ldr	r0, [r7, #16]
 800614c:	f000 fa88 	bl	8006660 <xQueueSemaphoreTake>
 8006150:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006162:	697b      	ldr	r3, [r7, #20]
	}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	; 0x38
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10a      	bne.n	800619e <xQueueGenericSend+0x32>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d103      	bne.n	80061ac <xQueueGenericSend+0x40>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <xQueueGenericSend+0x44>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <xQueueGenericSend+0x46>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <xQueueGenericSend+0x60>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d103      	bne.n	80061da <xQueueGenericSend+0x6e>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <xQueueGenericSend+0x72>
 80061da:	2301      	movs	r3, #1
 80061dc:	e000      	b.n	80061e0 <xQueueGenericSend+0x74>
 80061de:	2300      	movs	r3, #0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <xQueueGenericSend+0x8e>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	623b      	str	r3, [r7, #32]
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061fa:	f001 fb1b 	bl	8007834 <xTaskGetSchedulerState>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <xQueueGenericSend+0x9e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <xQueueGenericSend+0xa2>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericSend+0xa4>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericSend+0xbe>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	61fb      	str	r3, [r7, #28]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800622a:	f002 f95b 	bl	80084e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006236:	429a      	cmp	r2, r3
 8006238:	d302      	bcc.n	8006240 <xQueueGenericSend+0xd4>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d129      	bne.n	8006294 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006246:	f000 fb2f 	bl	80068a8 <prvCopyDataToQueue>
 800624a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	3324      	adds	r3, #36	; 0x24
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f919 	bl	8007490 <xTaskRemoveFromEventList>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006264:	4b3f      	ldr	r3, [pc, #252]	; (8006364 <xQueueGenericSend+0x1f8>)
 8006266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	e00a      	b.n	800628c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800627c:	4b39      	ldr	r3, [pc, #228]	; (8006364 <xQueueGenericSend+0x1f8>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800628c:	f002 f95a 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 8006290:	2301      	movs	r3, #1
 8006292:	e063      	b.n	800635c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800629a:	f002 f953 	bl	8008544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	e05c      	b.n	800635c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 f953 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062b6:	f002 f945 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ba:	f000 febf 	bl	800703c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062be:	f002 f911 	bl	80084e4 <vPortEnterCritical>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ce:	d103      	bne.n	80062d8 <xQueueGenericSend+0x16c>
 80062d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062de:	b25b      	sxtb	r3, r3
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e4:	d103      	bne.n	80062ee <xQueueGenericSend+0x182>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ee:	f002 f929 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062f2:	1d3a      	adds	r2, r7, #4
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 f942 	bl	8007584 <xTaskCheckForTimeOut>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d124      	bne.n	8006350 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006308:	f000 fbc6 	bl	8006a98 <prvIsQueueFull>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	3310      	adds	r3, #16
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f001 f868 	bl	80073f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006322:	f000 fb51 	bl	80069c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006326:	f000 fe97 	bl	8007058 <xTaskResumeAll>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	f47f af7c 	bne.w	800622a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <xQueueGenericSend+0x1f8>)
 8006334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	e772      	b.n	800622a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006346:	f000 fb3f 	bl	80069c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800634a:	f000 fe85 	bl	8007058 <xTaskResumeAll>
 800634e:	e76c      	b.n	800622a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006352:	f000 fb39 	bl	80069c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006356:	f000 fe7f 	bl	8007058 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800635a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800635c:	4618      	mov	r0, r3
 800635e:	3738      	adds	r7, #56	; 0x38
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b090      	sub	sp, #64	; 0x40
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d103      	bne.n	80063a4 <xQueueGenericSendFromISR+0x3c>
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <xQueueGenericSendFromISR+0x40>
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <xQueueGenericSendFromISR+0x42>
 80063a8:	2300      	movs	r3, #0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d103      	bne.n	80063d2 <xQueueGenericSendFromISR+0x6a>
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <xQueueGenericSendFromISR+0x6e>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <xQueueGenericSendFromISR+0x70>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063f2:	f002 f959 	bl	80086a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063f6:	f3ef 8211 	mrs	r2, BASEPRI
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61fa      	str	r2, [r7, #28]
 800640c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800640e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <xQueueGenericSendFromISR+0xbc>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b02      	cmp	r3, #2
 8006422:	d12f      	bne.n	8006484 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800642a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800643a:	f000 fa35 	bl	80068a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800643e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006446:	d112      	bne.n	800646e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d016      	beq.n	800647e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	3324      	adds	r3, #36	; 0x24
 8006454:	4618      	mov	r0, r3
 8006456:	f001 f81b 	bl	8007490 <xTaskRemoveFromEventList>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e007      	b.n	800647e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800646e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006472:	3301      	adds	r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	b25a      	sxtb	r2, r3
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800647e:	2301      	movs	r3, #1
 8006480:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006482:	e001      	b.n	8006488 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006484:	2300      	movs	r3, #0
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006496:	4618      	mov	r0, r3
 8006498:	3740      	adds	r7, #64	; 0x40
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08c      	sub	sp, #48	; 0x30
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <xQueueReceive+0x30>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	623b      	str	r3, [r7, #32]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <xQueueReceive+0x3e>
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueReceive+0x42>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueReceive+0x44>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <xQueueReceive+0x5e>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	61fb      	str	r3, [r7, #28]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064fe:	f001 f999 	bl	8007834 <xTaskGetSchedulerState>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <xQueueReceive+0x6e>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <xQueueReceive+0x72>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <xQueueReceive+0x74>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10a      	bne.n	800652e <xQueueReceive+0x8e>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	61bb      	str	r3, [r7, #24]
}
 800652a:	bf00      	nop
 800652c:	e7fe      	b.n	800652c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800652e:	f001 ffd9 	bl	80084e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d01f      	beq.n	800657e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006542:	f000 fa1b 	bl	800697c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00f      	beq.n	8006576 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	3310      	adds	r3, #16
 800655a:	4618      	mov	r0, r3
 800655c:	f000 ff98 	bl	8007490 <xTaskRemoveFromEventList>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006566:	4b3d      	ldr	r3, [pc, #244]	; (800665c <xQueueReceive+0x1bc>)
 8006568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006576:	f001 ffe5 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 800657a:	2301      	movs	r3, #1
 800657c:	e069      	b.n	8006652 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006584:	f001 ffde 	bl	8008544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006588:	2300      	movs	r3, #0
 800658a:	e062      	b.n	8006652 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006592:	f107 0310 	add.w	r3, r7, #16
 8006596:	4618      	mov	r0, r3
 8006598:	f000 ffde 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800659c:	2301      	movs	r3, #1
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065a0:	f001 ffd0 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065a4:	f000 fd4a 	bl	800703c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065a8:	f001 ff9c 	bl	80084e4 <vPortEnterCritical>
 80065ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b2:	b25b      	sxtb	r3, r3
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b8:	d103      	bne.n	80065c2 <xQueueReceive+0x122>
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ce:	d103      	bne.n	80065d8 <xQueueReceive+0x138>
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065d8:	f001 ffb4 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065dc:	1d3a      	adds	r2, r7, #4
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	4611      	mov	r1, r2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 ffcd 	bl	8007584 <xTaskCheckForTimeOut>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d123      	bne.n	8006638 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f2:	f000 fa3b 	bl	8006a6c <prvIsQueueEmpty>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d017      	beq.n	800662c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fef3 	bl	80073f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800660a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660c:	f000 f9dc 	bl	80069c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006610:	f000 fd22 	bl	8007058 <xTaskResumeAll>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d189      	bne.n	800652e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800661a:	4b10      	ldr	r3, [pc, #64]	; (800665c <xQueueReceive+0x1bc>)
 800661c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	e780      	b.n	800652e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800662c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662e:	f000 f9cb 	bl	80069c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006632:	f000 fd11 	bl	8007058 <xTaskResumeAll>
 8006636:	e77a      	b.n	800652e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663a:	f000 f9c5 	bl	80069c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800663e:	f000 fd0b 	bl	8007058 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006644:	f000 fa12 	bl	8006a6c <prvIsQueueEmpty>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	f43f af6f 	beq.w	800652e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006650:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006652:	4618      	mov	r0, r3
 8006654:	3730      	adds	r7, #48	; 0x30
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	e000ed04 	.word	0xe000ed04

08006660 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b08e      	sub	sp, #56	; 0x38
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800666a:	2300      	movs	r3, #0
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	623b      	str	r3, [r7, #32]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	61fb      	str	r3, [r7, #28]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066b0:	f001 f8c0 	bl	8007834 <xTaskGetSchedulerState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <xQueueSemaphoreTake+0x60>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <xQueueSemaphoreTake+0x64>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <xQueueSemaphoreTake+0x66>
 80066c4:	2300      	movs	r3, #0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	61bb      	str	r3, [r7, #24]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066e0:	f001 ff00 	bl	80084e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d024      	beq.n	800673a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	1e5a      	subs	r2, r3, #1
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d104      	bne.n	800670a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006700:	f001 fa0e 	bl	8007b20 <pvTaskIncrementMutexHeldCount>
 8006704:	4602      	mov	r2, r0
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	3310      	adds	r3, #16
 8006716:	4618      	mov	r0, r3
 8006718:	f000 feba 	bl	8007490 <xTaskRemoveFromEventList>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d007      	beq.n	8006732 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006722:	4b54      	ldr	r3, [pc, #336]	; (8006874 <xQueueSemaphoreTake+0x214>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006732:	f001 ff07 	bl	8008544 <vPortExitCritical>
				return pdPASS;
 8006736:	2301      	movs	r3, #1
 8006738:	e097      	b.n	800686a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d111      	bne.n	8006764 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	617b      	str	r3, [r7, #20]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800675c:	f001 fef2 	bl	8008544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
 8006762:	e082      	b.n	800686a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800676a:	f107 030c 	add.w	r3, r7, #12
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fef2 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006778:	f001 fee4 	bl	8008544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800677c:	f000 fc5e 	bl	800703c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006780:	f001 feb0 	bl	80084e4 <vPortEnterCritical>
 8006784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800678a:	b25b      	sxtb	r3, r3
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006790:	d103      	bne.n	800679a <xQueueSemaphoreTake+0x13a>
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a0:	b25b      	sxtb	r3, r3
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a6:	d103      	bne.n	80067b0 <xQueueSemaphoreTake+0x150>
 80067a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b0:	f001 fec8 	bl	8008544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067b4:	463a      	mov	r2, r7
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fee1 	bl	8007584 <xTaskCheckForTimeOut>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d132      	bne.n	800682e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ca:	f000 f94f 	bl	8006a6c <prvIsQueueEmpty>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d026      	beq.n	8006822 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80067dc:	f001 fe82 	bl	80084e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f843 	bl	8007870 <xTaskPriorityInherit>
 80067ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80067ec:	f001 feaa 	bl	8008544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fdf9 	bl	80073f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006800:	f000 f8e2 	bl	80069c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006804:	f000 fc28 	bl	8007058 <xTaskResumeAll>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	f47f af68 	bne.w	80066e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006810:	4b18      	ldr	r3, [pc, #96]	; (8006874 <xQueueSemaphoreTake+0x214>)
 8006812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	e75e      	b.n	80066e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006822:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006824:	f000 f8d0 	bl	80069c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006828:	f000 fc16 	bl	8007058 <xTaskResumeAll>
 800682c:	e758      	b.n	80066e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800682e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006830:	f000 f8ca 	bl	80069c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006834:	f000 fc10 	bl	8007058 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800683a:	f000 f917 	bl	8006a6c <prvIsQueueEmpty>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	f43f af4d 	beq.w	80066e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00d      	beq.n	8006868 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800684c:	f001 fe4a 	bl	80084e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006852:	f000 f811 	bl	8006878 <prvGetDisinheritPriorityAfterTimeout>
 8006856:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f8dc 	bl	8007a1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006864:	f001 fe6e 	bl	8008544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800686a:	4618      	mov	r0, r3
 800686c:	3738      	adds	r7, #56	; 0x38
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d006      	beq.n	8006896 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e001      	b.n	800689a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800689a:	68fb      	ldr	r3, [r7, #12]
	}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d14d      	bne.n	800696a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f001 f834 	bl	8007940 <xTaskPriorityDisinherit>
 80068d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	e043      	b.n	800696a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d119      	bne.n	800691c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6858      	ldr	r0, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	461a      	mov	r2, r3
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	f004 f8e3 	bl	800aabe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	441a      	add	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	429a      	cmp	r2, r3
 8006910:	d32b      	bcc.n	800696a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]
 800691a:	e026      	b.n	800696a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68d8      	ldr	r0, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	461a      	mov	r2, r3
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	f004 f8c9 	bl	800aabe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	425b      	negs	r3, r3
 8006936:	441a      	add	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	429a      	cmp	r2, r3
 8006946:	d207      	bcs.n	8006958 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	425b      	negs	r3, r3
 8006952:	441a      	add	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d105      	bne.n	800696a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3b01      	subs	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006972:	697b      	ldr	r3, [r7, #20]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d018      	beq.n	80069c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	441a      	add	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d303      	bcc.n	80069b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68d9      	ldr	r1, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	461a      	mov	r2, r3
 80069ba:	6838      	ldr	r0, [r7, #0]
 80069bc:	f004 f87f 	bl	800aabe <memcpy>
	}
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069d0:	f001 fd88 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069dc:	e011      	b.n	8006a02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d012      	beq.n	8006a0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3324      	adds	r3, #36	; 0x24
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fd50 	bl	8007490 <xTaskRemoveFromEventList>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069f6:	f000 fe27 	bl	8007648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dce9      	bgt.n	80069de <prvUnlockQueue+0x16>
 8006a0a:	e000      	b.n	8006a0e <prvUnlockQueue+0x46>
					break;
 8006a0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a16:	f001 fd95 	bl	8008544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a1a:	f001 fd63 	bl	80084e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a26:	e011      	b.n	8006a4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3310      	adds	r3, #16
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fd2b 	bl	8007490 <xTaskRemoveFromEventList>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a40:	f000 fe02 	bl	8007648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dce9      	bgt.n	8006a28 <prvUnlockQueue+0x60>
 8006a54:	e000      	b.n	8006a58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	22ff      	movs	r2, #255	; 0xff
 8006a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a60:	f001 fd70 	bl	8008544 <vPortExitCritical>
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a74:	f001 fd36 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d102      	bne.n	8006a86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	e001      	b.n	8006a8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a8a:	f001 fd5b 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa0:	f001 fd20 	bl	80084e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d102      	bne.n	8006ab6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e001      	b.n	8006aba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aba:	f001 fd43 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8006abe:	68fb      	ldr	r3, [r7, #12]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e014      	b.n	8006b02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ad8:	4a0f      	ldr	r2, [pc, #60]	; (8006b18 <vQueueAddToRegistry+0x50>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ae4:	490c      	ldr	r1, [pc, #48]	; (8006b18 <vQueueAddToRegistry+0x50>)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aee:	4a0a      	ldr	r2, [pc, #40]	; (8006b18 <vQueueAddToRegistry+0x50>)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4413      	add	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006afa:	e006      	b.n	8006b0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b07      	cmp	r3, #7
 8006b06:	d9e7      	bls.n	8006ad8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	20001138 	.word	0x20001138

08006b1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b2c:	f001 fcda 	bl	80084e4 <vPortEnterCritical>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3c:	d103      	bne.n	8006b46 <vQueueWaitForMessageRestricted+0x2a>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b4c:	b25b      	sxtb	r3, r3
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b52:	d103      	bne.n	8006b5c <vQueueWaitForMessageRestricted+0x40>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b5c:	f001 fcf2 	bl	8008544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	3324      	adds	r3, #36	; 0x24
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fc61 	bl	8007438 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b76:	6978      	ldr	r0, [r7, #20]
 8006b78:	f7ff ff26 	bl	80069c8 <prvUnlockQueue>
	}
 8006b7c:	bf00      	nop
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af04      	add	r7, sp, #16
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCreateStatic+0x46>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	61fb      	str	r3, [r7, #28]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bca:	23a8      	movs	r3, #168	; 0xa8
 8006bcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2ba8      	cmp	r3, #168	; 0xa8
 8006bd2:	d00a      	beq.n	8006bea <xTaskCreateStatic+0x66>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	61bb      	str	r3, [r7, #24]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01e      	beq.n	8006c30 <xTaskCreateStatic+0xac>
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01b      	beq.n	8006c30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9303      	str	r3, [sp, #12]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	9302      	str	r3, [sp, #8]
 8006c12:	f107 0314 	add.w	r3, r7, #20
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f850 	bl	8006cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c2a:	f000 f8f3 	bl	8006e14 <prvAddNewTaskToReadyList>
 8006c2e:	e001      	b.n	8006c34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c34:	697b      	ldr	r3, [r7, #20]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b08c      	sub	sp, #48	; 0x30
 8006c42:	af04      	add	r7, sp, #16
 8006c44:	60f8      	str	r0, [r7, #12]
 8006c46:	60b9      	str	r1, [r7, #8]
 8006c48:	603b      	str	r3, [r7, #0]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f001 fd68 	bl	8008728 <pvPortMalloc>
 8006c58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00e      	beq.n	8006c7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c60:	20a8      	movs	r0, #168	; 0xa8
 8006c62:	f001 fd61 	bl	8008728 <pvPortMalloc>
 8006c66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
 8006c74:	e005      	b.n	8006c82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c76:	6978      	ldr	r0, [r7, #20]
 8006c78:	f001 fe22 	bl	80088c0 <vPortFree>
 8006c7c:	e001      	b.n	8006c82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d017      	beq.n	8006cb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	9302      	str	r3, [sp, #8]
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f80e 	bl	8006cc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cac:	69f8      	ldr	r0, [r7, #28]
 8006cae:	f000 f8b1 	bl	8006e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e002      	b.n	8006cbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
	}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	461a      	mov	r2, r3
 8006ce0:	21a5      	movs	r1, #165	; 0xa5
 8006ce2:	f003 fe4d 	bl	800a980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f023 0307 	bic.w	r3, r3, #7
 8006cfe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	617b      	str	r3, [r7, #20]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01f      	beq.n	8006d66 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
 8006d2a:	e012      	b.n	8006d52 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	7819      	ldrb	r1, [r3, #0]
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	3334      	adds	r3, #52	; 0x34
 8006d3c:	460a      	mov	r2, r1
 8006d3e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d006      	beq.n	8006d5a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	2b0f      	cmp	r3, #15
 8006d56:	d9e9      	bls.n	8006d2c <prvInitialiseNewTask+0x64>
 8006d58:	e000      	b.n	8006d5c <prvInitialiseNewTask+0x94>
			{
				break;
 8006d5a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d64:	e003      	b.n	8006d6e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	2b37      	cmp	r3, #55	; 0x37
 8006d72:	d901      	bls.n	8006d78 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d74:	2337      	movs	r3, #55	; 0x37
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	2200      	movs	r2, #0
 8006d88:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe ff64 	bl	8005c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	3318      	adds	r3, #24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe ff5f 	bl	8005c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	3354      	adds	r3, #84	; 0x54
 8006dc8:	224c      	movs	r2, #76	; 0x4c
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f003 fdd7 	bl	800a980 <memset>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	4a0c      	ldr	r2, [pc, #48]	; (8006e08 <prvInitialiseNewTask+0x140>)
 8006dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	4a0c      	ldr	r2, [pc, #48]	; (8006e0c <prvInitialiseNewTask+0x144>)
 8006ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	4a0b      	ldr	r2, [pc, #44]	; (8006e10 <prvInitialiseNewTask+0x148>)
 8006de2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	69b8      	ldr	r0, [r7, #24]
 8006dea:	f001 fa4f 	bl	800828c <pxPortInitialiseStack>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d002      	beq.n	8006e00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e00:	bf00      	nop
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20003afc 	.word	0x20003afc
 8006e0c:	20003b64 	.word	0x20003b64
 8006e10:	20003bcc 	.word	0x20003bcc

08006e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e1c:	f001 fb62 	bl	80084e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e20:	4b2d      	ldr	r3, [pc, #180]	; (8006ed8 <prvAddNewTaskToReadyList+0xc4>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a2c      	ldr	r2, [pc, #176]	; (8006ed8 <prvAddNewTaskToReadyList+0xc4>)
 8006e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e2a:	4b2c      	ldr	r3, [pc, #176]	; (8006edc <prvAddNewTaskToReadyList+0xc8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d109      	bne.n	8006e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <prvAddNewTaskToReadyList+0xc8>)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e38:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <prvAddNewTaskToReadyList+0xc4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d110      	bne.n	8006e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e40:	f000 fc26 	bl	8007690 <prvInitialiseTaskLists>
 8006e44:	e00d      	b.n	8006e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e46:	4b26      	ldr	r3, [pc, #152]	; (8006ee0 <prvAddNewTaskToReadyList+0xcc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e4e:	4b23      	ldr	r3, [pc, #140]	; (8006edc <prvAddNewTaskToReadyList+0xc8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d802      	bhi.n	8006e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e5c:	4a1f      	ldr	r2, [pc, #124]	; (8006edc <prvAddNewTaskToReadyList+0xc8>)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e62:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <prvAddNewTaskToReadyList+0xd0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3301      	adds	r3, #1
 8006e68:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <prvAddNewTaskToReadyList+0xd0>)
 8006e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	; (8006ee4 <prvAddNewTaskToReadyList+0xd0>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <prvAddNewTaskToReadyList+0xd4>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d903      	bls.n	8006e88 <prvAddNewTaskToReadyList+0x74>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <prvAddNewTaskToReadyList+0xd4>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4a15      	ldr	r2, [pc, #84]	; (8006eec <prvAddNewTaskToReadyList+0xd8>)
 8006e96:	441a      	add	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f7fe fee9 	bl	8005c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ea4:	f001 fb4e 	bl	8008544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <prvAddNewTaskToReadyList+0xcc>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00e      	beq.n	8006ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eb0:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <prvAddNewTaskToReadyList+0xc8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d207      	bcs.n	8006ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <prvAddNewTaskToReadyList+0xdc>)
 8006ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	2000164c 	.word	0x2000164c
 8006edc:	20001178 	.word	0x20001178
 8006ee0:	20001658 	.word	0x20001658
 8006ee4:	20001668 	.word	0x20001668
 8006ee8:	20001654 	.word	0x20001654
 8006eec:	2000117c 	.word	0x2000117c
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d017      	beq.n	8006f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <vTaskDelay+0x60>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <vTaskDelay+0x30>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60bb      	str	r3, [r7, #8]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f24:	f000 f88a 	bl	800703c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fe0c 	bl	8007b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f30:	f000 f892 	bl	8007058 <xTaskResumeAll>
 8006f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d107      	bne.n	8006f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <vTaskDelay+0x64>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f4c:	bf00      	nop
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20001674 	.word	0x20001674
 8006f58:	e000ed04 	.word	0xe000ed04

08006f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f6a:	463a      	mov	r2, r7
 8006f6c:	1d39      	adds	r1, r7, #4
 8006f6e:	f107 0308 	add.w	r3, r7, #8
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fe1e 	bl	8005bb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	9202      	str	r2, [sp, #8]
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	2300      	movs	r3, #0
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	2300      	movs	r3, #0
 8006f88:	460a      	mov	r2, r1
 8006f8a:	4924      	ldr	r1, [pc, #144]	; (800701c <vTaskStartScheduler+0xc0>)
 8006f8c:	4824      	ldr	r0, [pc, #144]	; (8007020 <vTaskStartScheduler+0xc4>)
 8006f8e:	f7ff fdf9 	bl	8006b84 <xTaskCreateStatic>
 8006f92:	4603      	mov	r3, r0
 8006f94:	4a23      	ldr	r2, [pc, #140]	; (8007024 <vTaskStartScheduler+0xc8>)
 8006f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <vTaskStartScheduler+0xc8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	e001      	b.n	8006faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d102      	bne.n	8006fb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006fb0:	f000 fe1e 	bl	8007bf0 <xTimerCreateTimerTask>
 8006fb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d11b      	bne.n	8006ff4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	613b      	str	r3, [r7, #16]
}
 8006fce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fd0:	4b15      	ldr	r3, [pc, #84]	; (8007028 <vTaskStartScheduler+0xcc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3354      	adds	r3, #84	; 0x54
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <vTaskStartScheduler+0xd0>)
 8006fd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <vTaskStartScheduler+0xd4>)
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fe2:	4b14      	ldr	r3, [pc, #80]	; (8007034 <vTaskStartScheduler+0xd8>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fe8:	4b13      	ldr	r3, [pc, #76]	; (8007038 <vTaskStartScheduler+0xdc>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fee:	f001 f9d7 	bl	80083a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ff2:	e00e      	b.n	8007012 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffa:	d10a      	bne.n	8007012 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <vTaskStartScheduler+0xb4>
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	0800d630 	.word	0x0800d630
 8007020:	08007661 	.word	0x08007661
 8007024:	20001670 	.word	0x20001670
 8007028:	20001178 	.word	0x20001178
 800702c:	200001d4 	.word	0x200001d4
 8007030:	2000166c 	.word	0x2000166c
 8007034:	20001658 	.word	0x20001658
 8007038:	20001650 	.word	0x20001650

0800703c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007040:	4b04      	ldr	r3, [pc, #16]	; (8007054 <vTaskSuspendAll+0x18>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3301      	adds	r3, #1
 8007046:	4a03      	ldr	r2, [pc, #12]	; (8007054 <vTaskSuspendAll+0x18>)
 8007048:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800704a:	bf00      	nop
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	20001674 	.word	0x20001674

08007058 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007062:	2300      	movs	r3, #0
 8007064:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007066:	4b42      	ldr	r3, [pc, #264]	; (8007170 <xTaskResumeAll+0x118>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <xTaskResumeAll+0x2c>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	603b      	str	r3, [r7, #0]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007084:	f001 fa2e 	bl	80084e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007088:	4b39      	ldr	r3, [pc, #228]	; (8007170 <xTaskResumeAll+0x118>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	4a38      	ldr	r2, [pc, #224]	; (8007170 <xTaskResumeAll+0x118>)
 8007090:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007092:	4b37      	ldr	r3, [pc, #220]	; (8007170 <xTaskResumeAll+0x118>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d162      	bne.n	8007160 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800709a:	4b36      	ldr	r3, [pc, #216]	; (8007174 <xTaskResumeAll+0x11c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d05e      	beq.n	8007160 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a2:	e02f      	b.n	8007104 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a4:	4b34      	ldr	r3, [pc, #208]	; (8007178 <xTaskResumeAll+0x120>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3318      	adds	r3, #24
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fe3d 	bl	8005d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fe38 	bl	8005d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <xTaskResumeAll+0x124>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d903      	bls.n	80070d4 <xTaskResumeAll+0x7c>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	4a2a      	ldr	r2, [pc, #168]	; (800717c <xTaskResumeAll+0x124>)
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4a27      	ldr	r2, [pc, #156]	; (8007180 <xTaskResumeAll+0x128>)
 80070e2:	441a      	add	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3304      	adds	r3, #4
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f7fe fdc3 	bl	8005c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f4:	4b23      	ldr	r3, [pc, #140]	; (8007184 <xTaskResumeAll+0x12c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80070fe:	4b22      	ldr	r3, [pc, #136]	; (8007188 <xTaskResumeAll+0x130>)
 8007100:	2201      	movs	r2, #1
 8007102:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007104:	4b1c      	ldr	r3, [pc, #112]	; (8007178 <xTaskResumeAll+0x120>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1cb      	bne.n	80070a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007112:	f000 fb5f 	bl	80077d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007116:	4b1d      	ldr	r3, [pc, #116]	; (800718c <xTaskResumeAll+0x134>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d010      	beq.n	8007144 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007122:	f000 f847 	bl	80071b4 <xTaskIncrementTick>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800712c:	4b16      	ldr	r3, [pc, #88]	; (8007188 <xTaskResumeAll+0x130>)
 800712e:	2201      	movs	r2, #1
 8007130:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3b01      	subs	r3, #1
 8007136:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1f1      	bne.n	8007122 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <xTaskResumeAll+0x134>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007144:	4b10      	ldr	r3, [pc, #64]	; (8007188 <xTaskResumeAll+0x130>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTaskResumeAll+0x138>)
 8007152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007160:	f001 f9f0 	bl	8008544 <vPortExitCritical>

	return xAlreadyYielded;
 8007164:	68bb      	ldr	r3, [r7, #8]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20001674 	.word	0x20001674
 8007174:	2000164c 	.word	0x2000164c
 8007178:	2000160c 	.word	0x2000160c
 800717c:	20001654 	.word	0x20001654
 8007180:	2000117c 	.word	0x2000117c
 8007184:	20001178 	.word	0x20001178
 8007188:	20001660 	.word	0x20001660
 800718c:	2000165c 	.word	0x2000165c
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <xTaskGetTickCount+0x1c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071a0:	687b      	ldr	r3, [r7, #4]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20001650 	.word	0x20001650

080071b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b086      	sub	sp, #24
 80071b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071be:	4b4f      	ldr	r3, [pc, #316]	; (80072fc <xTaskIncrementTick+0x148>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 808f 	bne.w	80072e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071c8:	4b4d      	ldr	r3, [pc, #308]	; (8007300 <xTaskIncrementTick+0x14c>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3301      	adds	r3, #1
 80071ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071d0:	4a4b      	ldr	r2, [pc, #300]	; (8007300 <xTaskIncrementTick+0x14c>)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d120      	bne.n	800721e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071dc:	4b49      	ldr	r3, [pc, #292]	; (8007304 <xTaskIncrementTick+0x150>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <xTaskIncrementTick+0x48>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	603b      	str	r3, [r7, #0]
}
 80071f8:	bf00      	nop
 80071fa:	e7fe      	b.n	80071fa <xTaskIncrementTick+0x46>
 80071fc:	4b41      	ldr	r3, [pc, #260]	; (8007304 <xTaskIncrementTick+0x150>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	4b41      	ldr	r3, [pc, #260]	; (8007308 <xTaskIncrementTick+0x154>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a3f      	ldr	r2, [pc, #252]	; (8007304 <xTaskIncrementTick+0x150>)
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	4a3f      	ldr	r2, [pc, #252]	; (8007308 <xTaskIncrementTick+0x154>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	4b3e      	ldr	r3, [pc, #248]	; (800730c <xTaskIncrementTick+0x158>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	4a3d      	ldr	r2, [pc, #244]	; (800730c <xTaskIncrementTick+0x158>)
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	f000 fadb 	bl	80077d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800721e:	4b3c      	ldr	r3, [pc, #240]	; (8007310 <xTaskIncrementTick+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	429a      	cmp	r2, r3
 8007226:	d349      	bcc.n	80072bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007228:	4b36      	ldr	r3, [pc, #216]	; (8007304 <xTaskIncrementTick+0x150>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007232:	4b37      	ldr	r3, [pc, #220]	; (8007310 <xTaskIncrementTick+0x15c>)
 8007234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007238:	601a      	str	r2, [r3, #0]
					break;
 800723a:	e03f      	b.n	80072bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723c:	4b31      	ldr	r3, [pc, #196]	; (8007304 <xTaskIncrementTick+0x150>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d203      	bcs.n	800725c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007254:	4a2e      	ldr	r2, [pc, #184]	; (8007310 <xTaskIncrementTick+0x15c>)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800725a:	e02f      	b.n	80072bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3304      	adds	r3, #4
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe fd65 	bl	8005d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	3318      	adds	r3, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd5c 	bl	8005d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	4b25      	ldr	r3, [pc, #148]	; (8007314 <xTaskIncrementTick+0x160>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	429a      	cmp	r2, r3
 8007282:	d903      	bls.n	800728c <xTaskIncrementTick+0xd8>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a22      	ldr	r2, [pc, #136]	; (8007314 <xTaskIncrementTick+0x160>)
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4a1f      	ldr	r2, [pc, #124]	; (8007318 <xTaskIncrementTick+0x164>)
 800729a:	441a      	add	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7fe fce7 	bl	8005c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4b1b      	ldr	r3, [pc, #108]	; (800731c <xTaskIncrementTick+0x168>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d3b8      	bcc.n	8007228 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ba:	e7b5      	b.n	8007228 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <xTaskIncrementTick+0x168>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	4915      	ldr	r1, [pc, #84]	; (8007318 <xTaskIncrementTick+0x164>)
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d901      	bls.n	80072d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <xTaskIncrementTick+0x16c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80072e0:	2301      	movs	r3, #1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e004      	b.n	80072f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <xTaskIncrementTick+0x170>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	4a0d      	ldr	r2, [pc, #52]	; (8007324 <xTaskIncrementTick+0x170>)
 80072ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072f0:	697b      	ldr	r3, [r7, #20]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20001674 	.word	0x20001674
 8007300:	20001650 	.word	0x20001650
 8007304:	20001604 	.word	0x20001604
 8007308:	20001608 	.word	0x20001608
 800730c:	20001664 	.word	0x20001664
 8007310:	2000166c 	.word	0x2000166c
 8007314:	20001654 	.word	0x20001654
 8007318:	2000117c 	.word	0x2000117c
 800731c:	20001178 	.word	0x20001178
 8007320:	20001660 	.word	0x20001660
 8007324:	2000165c 	.word	0x2000165c

08007328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800732e:	4b2a      	ldr	r3, [pc, #168]	; (80073d8 <vTaskSwitchContext+0xb0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <vTaskSwitchContext+0xb4>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800733c:	e046      	b.n	80073cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800733e:	4b27      	ldr	r3, [pc, #156]	; (80073dc <vTaskSwitchContext+0xb4>)
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007344:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <vTaskSwitchContext+0xb8>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	e010      	b.n	800736e <vTaskSwitchContext+0x46>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <vTaskSwitchContext+0x40>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	607b      	str	r3, [r7, #4]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <vTaskSwitchContext+0x3e>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3b01      	subs	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	491d      	ldr	r1, [pc, #116]	; (80073e4 <vTaskSwitchContext+0xbc>)
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4613      	mov	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0e4      	beq.n	800734c <vTaskSwitchContext+0x24>
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <vTaskSwitchContext+0xbc>)
 800738e:	4413      	add	r3, r2
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	605a      	str	r2, [r3, #4]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3308      	adds	r3, #8
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d104      	bne.n	80073b2 <vTaskSwitchContext+0x8a>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	605a      	str	r2, [r3, #4]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <vTaskSwitchContext+0xc0>)
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	4a08      	ldr	r2, [pc, #32]	; (80073e0 <vTaskSwitchContext+0xb8>)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073c2:	4b09      	ldr	r3, [pc, #36]	; (80073e8 <vTaskSwitchContext+0xc0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3354      	adds	r3, #84	; 0x54
 80073c8:	4a08      	ldr	r2, [pc, #32]	; (80073ec <vTaskSwitchContext+0xc4>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20001674 	.word	0x20001674
 80073dc:	20001660 	.word	0x20001660
 80073e0:	20001654 	.word	0x20001654
 80073e4:	2000117c 	.word	0x2000117c
 80073e8:	20001178 	.word	0x20001178
 80073ec:	200001d4 	.word	0x200001d4

080073f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10a      	bne.n	8007416 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007416:	4b07      	ldr	r3, [pc, #28]	; (8007434 <vTaskPlaceOnEventList+0x44>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3318      	adds	r3, #24
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fe fc4d 	bl	8005cbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007424:	2101      	movs	r1, #1
 8007426:	6838      	ldr	r0, [r7, #0]
 8007428:	f000 fb8e 	bl	8007b48 <prvAddCurrentTaskToDelayedList>
}
 800742c:	bf00      	nop
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20001178 	.word	0x20001178

08007438 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617b      	str	r3, [r7, #20]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <vTaskPlaceOnEventListRestricted+0x54>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3318      	adds	r3, #24
 8007466:	4619      	mov	r1, r3
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7fe fc04 	bl	8005c76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007478:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800747a:	6879      	ldr	r1, [r7, #4]
 800747c:	68b8      	ldr	r0, [r7, #8]
 800747e:	f000 fb63 	bl	8007b48 <prvAddCurrentTaskToDelayedList>
	}
 8007482:	bf00      	nop
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001178 	.word	0x20001178

08007490 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60fb      	str	r3, [r7, #12]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3318      	adds	r3, #24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fc35 	bl	8005d30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c6:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <xTaskRemoveFromEventList+0xb0>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d11d      	bne.n	800750a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	3304      	adds	r3, #4
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fc2c 	bl	8005d30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074dc:	4b19      	ldr	r3, [pc, #100]	; (8007544 <xTaskRemoveFromEventList+0xb4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d903      	bls.n	80074ec <xTaskRemoveFromEventList+0x5c>
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	4a16      	ldr	r2, [pc, #88]	; (8007544 <xTaskRemoveFromEventList+0xb4>)
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4a13      	ldr	r2, [pc, #76]	; (8007548 <xTaskRemoveFromEventList+0xb8>)
 80074fa:	441a      	add	r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	3304      	adds	r3, #4
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f7fe fbb7 	bl	8005c76 <vListInsertEnd>
 8007508:	e005      	b.n	8007516 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3318      	adds	r3, #24
 800750e:	4619      	mov	r1, r3
 8007510:	480e      	ldr	r0, [pc, #56]	; (800754c <xTaskRemoveFromEventList+0xbc>)
 8007512:	f7fe fbb0 	bl	8005c76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4b0d      	ldr	r3, [pc, #52]	; (8007550 <xTaskRemoveFromEventList+0xc0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d905      	bls.n	8007530 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007528:	4b0a      	ldr	r3, [pc, #40]	; (8007554 <xTaskRemoveFromEventList+0xc4>)
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e001      	b.n	8007534 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007534:	697b      	ldr	r3, [r7, #20]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20001674 	.word	0x20001674
 8007544:	20001654 	.word	0x20001654
 8007548:	2000117c 	.word	0x2000117c
 800754c:	2000160c 	.word	0x2000160c
 8007550:	20001178 	.word	0x20001178
 8007554:	20001660 	.word	0x20001660

08007558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <vTaskInternalSetTimeOutState+0x24>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <vTaskInternalSetTimeOutState+0x28>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20001664 	.word	0x20001664
 8007580:	20001650 	.word	0x20001650

08007584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	613b      	str	r3, [r7, #16]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075c6:	f000 ff8d 	bl	80084e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <xTaskCheckForTimeOut+0xbc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e2:	d102      	bne.n	80075ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e023      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <xTaskCheckForTimeOut+0xc0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d007      	beq.n	8007606 <xTaskCheckForTimeOut+0x82>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e015      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d20b      	bcs.n	8007628 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	1ad2      	subs	r2, r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff9b 	bl	8007558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e004      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007632:	f000 ff87 	bl	8008544 <vPortExitCritical>

	return xReturn;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20001650 	.word	0x20001650
 8007644:	20001664 	.word	0x20001664

08007648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <vTaskMissedYield+0x14>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20001660 	.word	0x20001660

08007660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007668:	f000 f852 	bl	8007710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvIdleTask+0x28>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d9f9      	bls.n	8007668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <prvIdleTask+0x2c>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007684:	e7f0      	b.n	8007668 <prvIdleTask+0x8>
 8007686:	bf00      	nop
 8007688:	2000117c 	.word	0x2000117c
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e00c      	b.n	80076b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a12      	ldr	r2, [pc, #72]	; (80076f0 <prvInitialiseTaskLists+0x60>)
 80076a8:	4413      	add	r3, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fab6 	bl	8005c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3301      	adds	r3, #1
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b37      	cmp	r3, #55	; 0x37
 80076ba:	d9ef      	bls.n	800769c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076bc:	480d      	ldr	r0, [pc, #52]	; (80076f4 <prvInitialiseTaskLists+0x64>)
 80076be:	f7fe faad 	bl	8005c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076c2:	480d      	ldr	r0, [pc, #52]	; (80076f8 <prvInitialiseTaskLists+0x68>)
 80076c4:	f7fe faaa 	bl	8005c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076c8:	480c      	ldr	r0, [pc, #48]	; (80076fc <prvInitialiseTaskLists+0x6c>)
 80076ca:	f7fe faa7 	bl	8005c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076ce:	480c      	ldr	r0, [pc, #48]	; (8007700 <prvInitialiseTaskLists+0x70>)
 80076d0:	f7fe faa4 	bl	8005c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076d4:	480b      	ldr	r0, [pc, #44]	; (8007704 <prvInitialiseTaskLists+0x74>)
 80076d6:	f7fe faa1 	bl	8005c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvInitialiseTaskLists+0x78>)
 80076dc:	4a05      	ldr	r2, [pc, #20]	; (80076f4 <prvInitialiseTaskLists+0x64>)
 80076de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <prvInitialiseTaskLists+0x7c>)
 80076e2:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <prvInitialiseTaskLists+0x68>)
 80076e4:	601a      	str	r2, [r3, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	2000117c 	.word	0x2000117c
 80076f4:	200015dc 	.word	0x200015dc
 80076f8:	200015f0 	.word	0x200015f0
 80076fc:	2000160c 	.word	0x2000160c
 8007700:	20001620 	.word	0x20001620
 8007704:	20001638 	.word	0x20001638
 8007708:	20001604 	.word	0x20001604
 800770c:	20001608 	.word	0x20001608

08007710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007716:	e019      	b.n	800774c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007718:	f000 fee4 	bl	80084e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <prvCheckTasksWaitingTermination+0x50>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fb01 	bl	8005d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3b01      	subs	r3, #1
 8007734:	4a0b      	ldr	r2, [pc, #44]	; (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3b01      	subs	r3, #1
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 8007740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007742:	f000 feff 	bl	8008544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f810 	bl	800776c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e1      	bne.n	8007718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20001620 	.word	0x20001620
 8007764:	2000164c 	.word	0x2000164c
 8007768:	20001634 	.word	0x20001634

0800776c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3354      	adds	r3, #84	; 0x54
 8007778:	4618      	mov	r0, r3
 800777a:	f003 f90d 	bl	800a998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	4618      	mov	r0, r3
 800778e:	f001 f897 	bl	80088c0 <vPortFree>
				vPortFree( pxTCB );
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 f894 	bl	80088c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007798:	e018      	b.n	80077cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d103      	bne.n	80077ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 f88b 	bl	80088c0 <vPortFree>
	}
 80077aa:	e00f      	b.n	80077cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d00a      	beq.n	80077cc <prvDeleteTCB+0x60>
	__asm volatile
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	60fb      	str	r3, [r7, #12]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <prvDeleteTCB+0x5e>
	}
 80077cc:	bf00      	nop
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077da:	4b0c      	ldr	r3, [pc, #48]	; (800780c <prvResetNextTaskUnblockTime+0x38>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077e4:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <prvResetNextTaskUnblockTime+0x3c>)
 80077e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077ec:	e008      	b.n	8007800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <prvResetNextTaskUnblockTime+0x38>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	4a04      	ldr	r2, [pc, #16]	; (8007810 <prvResetNextTaskUnblockTime+0x3c>)
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	20001604 	.word	0x20001604
 8007810:	2000166c 	.word	0x2000166c

08007814 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <xTaskGetCurrentTaskHandle+0x1c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007820:	687b      	ldr	r3, [r7, #4]
	}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20001178 	.word	0x20001178

08007834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <xTaskGetSchedulerState+0x34>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007842:	2301      	movs	r3, #1
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	e008      	b.n	800785a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007848:	4b08      	ldr	r3, [pc, #32]	; (800786c <xTaskGetSchedulerState+0x38>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007850:	2302      	movs	r3, #2
 8007852:	607b      	str	r3, [r7, #4]
 8007854:	e001      	b.n	800785a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800785a:	687b      	ldr	r3, [r7, #4]
	}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20001658 	.word	0x20001658
 800786c:	20001674 	.word	0x20001674

08007870 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d051      	beq.n	800792a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <xTaskPriorityInherit+0xc4>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d241      	bcs.n	8007918 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b00      	cmp	r3, #0
 800789a:	db06      	blt.n	80078aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800789c:	4b25      	ldr	r3, [pc, #148]	; (8007934 <xTaskPriorityInherit+0xc4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6959      	ldr	r1, [r3, #20]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <xTaskPriorityInherit+0xc8>)
 80078bc:	4413      	add	r3, r2
 80078be:	4299      	cmp	r1, r3
 80078c0:	d122      	bne.n	8007908 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe fa32 	bl	8005d30 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078cc:	4b19      	ldr	r3, [pc, #100]	; (8007934 <xTaskPriorityInherit+0xc4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	4b18      	ldr	r3, [pc, #96]	; (800793c <xTaskPriorityInherit+0xcc>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d903      	bls.n	80078ea <xTaskPriorityInherit+0x7a>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e6:	4a15      	ldr	r2, [pc, #84]	; (800793c <xTaskPriorityInherit+0xcc>)
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4a10      	ldr	r2, [pc, #64]	; (8007938 <xTaskPriorityInherit+0xc8>)
 80078f8:	441a      	add	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f7fe f9b8 	bl	8005c76 <vListInsertEnd>
 8007906:	e004      	b.n	8007912 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007908:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <xTaskPriorityInherit+0xc4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007912:	2301      	movs	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e008      	b.n	800792a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <xTaskPriorityInherit+0xc4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	429a      	cmp	r2, r3
 8007924:	d201      	bcs.n	800792a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007926:	2301      	movs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800792a:	68fb      	ldr	r3, [r7, #12]
	}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20001178 	.word	0x20001178
 8007938:	2000117c 	.word	0x2000117c
 800793c:	20001654 	.word	0x20001654

08007940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d056      	beq.n	8007a04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007956:	4b2e      	ldr	r3, [pc, #184]	; (8007a10 <xTaskPriorityDisinherit+0xd0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	d00a      	beq.n	8007976 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60fb      	str	r3, [r7, #12]
}
 8007972:	bf00      	nop
 8007974:	e7fe      	b.n	8007974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60bb      	str	r3, [r7, #8]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d02c      	beq.n	8007a04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d128      	bne.n	8007a04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe f9ba 	bl	8005d30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <xTaskPriorityDisinherit+0xd4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <xTaskPriorityDisinherit+0xa4>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a0c      	ldr	r2, [pc, #48]	; (8007a14 <xTaskPriorityDisinherit+0xd4>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <xTaskPriorityDisinherit+0xd8>)
 80079f2:	441a      	add	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe f93b 	bl	8005c76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a04:	697b      	ldr	r3, [r7, #20]
	}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20001178 	.word	0x20001178
 8007a14:	20001654 	.word	0x20001654
 8007a18:	2000117c 	.word	0x2000117c

08007a1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d06a      	beq.n	8007b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60fb      	str	r3, [r7, #12]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d902      	bls.n	8007a62 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	61fb      	str	r3, [r7, #28]
 8007a60:	e002      	b.n	8007a68 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a66:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d04b      	beq.n	8007b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d146      	bne.n	8007b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d10a      	bne.n	8007a9c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	60bb      	str	r3, [r7, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	db04      	blt.n	8007aba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	6959      	ldr	r1, [r3, #20]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4a13      	ldr	r2, [pc, #76]	; (8007b18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007aca:	4413      	add	r3, r2
 8007acc:	4299      	cmp	r1, r3
 8007ace:	d11c      	bne.n	8007b0a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe f92b 	bl	8005d30 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d903      	bls.n	8007aee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a0c      	ldr	r2, [pc, #48]	; (8007b1c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4a07      	ldr	r2, [pc, #28]	; (8007b18 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007afc:	441a      	add	r2, r3
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4619      	mov	r1, r3
 8007b04:	4610      	mov	r0, r2
 8007b06:	f7fe f8b6 	bl	8005c76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b0a:	bf00      	nop
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20001178 	.word	0x20001178
 8007b18:	2000117c 	.word	0x2000117c
 8007b1c:	20001654 	.word	0x20001654

08007b20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b24:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b32:	3201      	adds	r2, #1
 8007b34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b36:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b38:	681b      	ldr	r3, [r3, #0]
	}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20001178 	.word	0x20001178

08007b48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b52:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b58:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe f8e6 	bl	8005d30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b6a:	d10a      	bne.n	8007b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d007      	beq.n	8007b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b72:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4819      	ldr	r0, [pc, #100]	; (8007be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b7c:	f7fe f87b 	bl	8005c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b80:	e026      	b.n	8007bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d209      	bcs.n	8007bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe f889 	bl	8005cbe <vListInsert>
}
 8007bac:	e010      	b.n	8007bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f7fe f87f 	bl	8005cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d202      	bcs.n	8007bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bca:	4a08      	ldr	r2, [pc, #32]	; (8007bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6013      	str	r3, [r2, #0]
}
 8007bd0:	bf00      	nop
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20001650 	.word	0x20001650
 8007bdc:	20001178 	.word	0x20001178
 8007be0:	20001638 	.word	0x20001638
 8007be4:	20001608 	.word	0x20001608
 8007be8:	20001604 	.word	0x20001604
 8007bec:	2000166c 	.word	0x2000166c

08007bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bfa:	f000 fb07 	bl	800820c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bfe:	4b1c      	ldr	r3, [pc, #112]	; (8007c70 <xTimerCreateTimerTask+0x80>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d021      	beq.n	8007c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c0e:	1d3a      	adds	r2, r7, #4
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	f107 030c 	add.w	r3, r7, #12
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd ffe5 	bl	8005be8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c1e:	6879      	ldr	r1, [r7, #4]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	9202      	str	r2, [sp, #8]
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	2302      	movs	r3, #2
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	460a      	mov	r2, r1
 8007c30:	4910      	ldr	r1, [pc, #64]	; (8007c74 <xTimerCreateTimerTask+0x84>)
 8007c32:	4811      	ldr	r0, [pc, #68]	; (8007c78 <xTimerCreateTimerTask+0x88>)
 8007c34:	f7fe ffa6 	bl	8006b84 <xTaskCreateStatic>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <xTimerCreateTimerTask+0x8c>)
 8007c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c3e:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <xTimerCreateTimerTask+0x8c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c46:	2301      	movs	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c66:	697b      	ldr	r3, [r7, #20]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	200016a8 	.word	0x200016a8
 8007c74:	0800d638 	.word	0x0800d638
 8007c78:	08007db5 	.word	0x08007db5
 8007c7c:	200016ac 	.word	0x200016ac

08007c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	623b      	str	r3, [r7, #32]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cae:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <xTimerGenericCommand+0x98>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02a      	beq.n	8007d0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b05      	cmp	r3, #5
 8007cc6:	dc18      	bgt.n	8007cfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cc8:	f7ff fdb4 	bl	8007834 <xTaskGetSchedulerState>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d109      	bne.n	8007ce6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cd2:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <xTimerGenericCommand+0x98>)
 8007cd4:	6818      	ldr	r0, [r3, #0]
 8007cd6:	f107 0110 	add.w	r1, r7, #16
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cde:	f7fe fa45 	bl	800616c <xQueueGenericSend>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ce4:	e012      	b.n	8007d0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ce6:	4b0c      	ldr	r3, [pc, #48]	; (8007d18 <xTimerGenericCommand+0x98>)
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f107 0110 	add.w	r1, r7, #16
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f7fe fa3b 	bl	800616c <xQueueGenericSend>
 8007cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8007cf8:	e008      	b.n	8007d0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cfa:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <xTimerGenericCommand+0x98>)
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f107 0110 	add.w	r1, r7, #16
 8007d02:	2300      	movs	r3, #0
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	f7fe fb2f 	bl	8006368 <xQueueGenericSendFromISR>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200016a8 	.word	0x200016a8

08007d1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d26:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <prvProcessExpiredTimer+0x94>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd fffb 	bl	8005d30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d022      	beq.n	8007d8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	18d1      	adds	r1, r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	6978      	ldr	r0, [r7, #20]
 8007d56:	f000 f8d1 	bl	8007efc <prvInsertTimerInActiveList>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01f      	beq.n	8007da0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6978      	ldr	r0, [r7, #20]
 8007d6c:	f7ff ff88 	bl	8007c80 <xTimerGenericCommand>
 8007d70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d113      	bne.n	8007da0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	60fb      	str	r3, [r7, #12]
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	6978      	ldr	r0, [r7, #20]
 8007da6:	4798      	blx	r3
}
 8007da8:	bf00      	nop
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	200016a0 	.word	0x200016a0

08007db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dbc:	f107 0308 	add.w	r3, r7, #8
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f857 	bl	8007e74 <prvGetNextExpireTime>
 8007dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f803 	bl	8007dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dd2:	f000 f8d5 	bl	8007f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dd6:	e7f1      	b.n	8007dbc <prvTimerTask+0x8>

08007dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007de2:	f7ff f92b 	bl	800703c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007de6:	f107 0308 	add.w	r3, r7, #8
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f866 	bl	8007ebc <prvSampleTimeNow>
 8007df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d130      	bne.n	8007e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <prvProcessTimerOrBlockTask+0x3c>
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d806      	bhi.n	8007e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e06:	f7ff f927 	bl	8007058 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ff85 	bl	8007d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e12:	e024      	b.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <prvProcessTimerOrBlockTask+0x90>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <prvProcessTimerOrBlockTask+0x50>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <prvProcessTimerOrBlockTask+0x52>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	; (8007e6c <prvProcessTimerOrBlockTask+0x94>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7fe fe6f 	bl	8006b1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e3e:	f7ff f90b 	bl	8007058 <xTaskResumeAll>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e48:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <prvProcessTimerOrBlockTask+0x98>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
}
 8007e58:	e001      	b.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e5a:	f7ff f8fd 	bl	8007058 <xTaskResumeAll>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200016a4 	.word	0x200016a4
 8007e6c:	200016a8 	.word	0x200016a8
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <prvGetNextExpireTime+0x44>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <prvGetNextExpireTime+0x16>
 8007e86:	2201      	movs	r2, #1
 8007e88:	e000      	b.n	8007e8c <prvGetNextExpireTime+0x18>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <prvGetNextExpireTime+0x44>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e001      	b.n	8007ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200016a0 	.word	0x200016a0

08007ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ec4:	f7ff f966 	bl	8007194 <xTaskGetTickCount>
 8007ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <prvSampleTimeNow+0x3c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d205      	bcs.n	8007ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ed4:	f000 f936 	bl	8008144 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e002      	b.n	8007ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ee6:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <prvSampleTimeNow+0x3c>)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200016b0 	.word	0x200016b0

08007efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d812      	bhi.n	8007f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	1ad2      	subs	r2, r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e01b      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f36:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <prvInsertTimerInActiveList+0x7c>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7fd febc 	bl	8005cbe <vListInsert>
 8007f46:	e012      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d206      	bcs.n	8007f5e <prvInsertTimerInActiveList+0x62>
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e007      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <prvInsertTimerInActiveList+0x80>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fd fea8 	bl	8005cbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200016a4 	.word	0x200016a4
 8007f7c:	200016a0 	.word	0x200016a0

08007f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08e      	sub	sp, #56	; 0x38
 8007f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f86:	e0ca      	b.n	800811e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da18      	bge.n	8007fc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	3304      	adds	r3, #4
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10a      	bne.n	8007fb0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	61fb      	str	r3, [r7, #28]
}
 8007fac:	bf00      	nop
 8007fae:	e7fe      	b.n	8007fae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fb6:	6850      	ldr	r0, [r2, #4]
 8007fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fba:	6892      	ldr	r2, [r2, #8]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f2c0 80ab 	blt.w	800811e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d004      	beq.n	8007fde <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fea9 	bl	8005d30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fde:	463b      	mov	r3, r7
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff ff6b 	bl	8007ebc <prvSampleTimeNow>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b09      	cmp	r3, #9
 8007fec:	f200 8096 	bhi.w	800811c <prvProcessReceivedCommands+0x19c>
 8007ff0:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <prvProcessReceivedCommands+0x78>)
 8007ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff6:	bf00      	nop
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008021 	.word	0x08008021
 8008000:	08008021 	.word	0x08008021
 8008004:	08008095 	.word	0x08008095
 8008008:	080080a9 	.word	0x080080a9
 800800c:	080080f3 	.word	0x080080f3
 8008010:	08008021 	.word	0x08008021
 8008014:	08008021 	.word	0x08008021
 8008018:	08008095 	.word	0x08008095
 800801c:	080080a9 	.word	0x080080a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008026:	f043 0301 	orr.w	r3, r3, #1
 800802a:	b2da      	uxtb	r2, r3
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	18d1      	adds	r1, r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800803e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008040:	f7ff ff5c 	bl	8007efc <prvInsertTimerInActiveList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d069      	beq.n	800811e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008050:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b00      	cmp	r3, #0
 800805e:	d05e      	beq.n	800811e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	441a      	add	r2, r3
 8008068:	2300      	movs	r3, #0
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	2100      	movs	r1, #0
 8008070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008072:	f7ff fe05 	bl	8007c80 <xTimerGenericCommand>
 8008076:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d14f      	bne.n	800811e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	61bb      	str	r3, [r7, #24]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080a6:	e03a      	b.n	800811e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10a      	bne.n	80080de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	617b      	str	r3, [r7, #20]
}
 80080da:	bf00      	nop
 80080dc:	e7fe      	b.n	80080dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	699a      	ldr	r2, [r3, #24]
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	18d1      	adds	r1, r2, r3
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	f7ff ff06 	bl	8007efc <prvInsertTimerInActiveList>
					break;
 80080f0:	e015      	b.n	800811e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d103      	bne.n	8008108 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 fbdd 	bl	80088c0 <vPortFree>
 8008106:	e00a      	b.n	800811e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	b2da      	uxtb	r2, r3
 8008114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800811a:	e000      	b.n	800811e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800811c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800811e:	4b08      	ldr	r3, [pc, #32]	; (8008140 <prvProcessReceivedCommands+0x1c0>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	1d39      	adds	r1, r7, #4
 8008124:	2200      	movs	r2, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe f9ba 	bl	80064a0 <xQueueReceive>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f47f af2a 	bne.w	8007f88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	3730      	adds	r7, #48	; 0x30
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200016a8 	.word	0x200016a8

08008144 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800814a:	e048      	b.n	80081de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800814c:	4b2d      	ldr	r3, [pc, #180]	; (8008204 <prvSwitchTimerLists+0xc0>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008156:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <prvSwitchTimerLists+0xc0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3304      	adds	r3, #4
 8008164:	4618      	mov	r0, r3
 8008166:	f7fd fde3 	bl	8005d30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d02e      	beq.n	80081de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4413      	add	r3, r2
 8008188:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d90e      	bls.n	80081b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800819e:	4b19      	ldr	r3, [pc, #100]	; (8008204 <prvSwitchTimerLists+0xc0>)
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3304      	adds	r3, #4
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7fd fd88 	bl	8005cbe <vListInsert>
 80081ae:	e016      	b.n	80081de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081b0:	2300      	movs	r3, #0
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	2100      	movs	r1, #0
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fd60 	bl	8007c80 <xTimerGenericCommand>
 80081c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	603b      	str	r3, [r7, #0]
}
 80081da:	bf00      	nop
 80081dc:	e7fe      	b.n	80081dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvSwitchTimerLists+0xc0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1b1      	bne.n	800814c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <prvSwitchTimerLists+0xc0>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081ee:	4b06      	ldr	r3, [pc, #24]	; (8008208 <prvSwitchTimerLists+0xc4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a04      	ldr	r2, [pc, #16]	; (8008204 <prvSwitchTimerLists+0xc0>)
 80081f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081f6:	4a04      	ldr	r2, [pc, #16]	; (8008208 <prvSwitchTimerLists+0xc4>)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6013      	str	r3, [r2, #0]
}
 80081fc:	bf00      	nop
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200016a0 	.word	0x200016a0
 8008208:	200016a4 	.word	0x200016a4

0800820c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008212:	f000 f967 	bl	80084e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <prvCheckForValidListAndQueue+0x60>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d120      	bne.n	8008260 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800821e:	4814      	ldr	r0, [pc, #80]	; (8008270 <prvCheckForValidListAndQueue+0x64>)
 8008220:	f7fd fcfc 	bl	8005c1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008224:	4813      	ldr	r0, [pc, #76]	; (8008274 <prvCheckForValidListAndQueue+0x68>)
 8008226:	f7fd fcf9 	bl	8005c1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800822a:	4b13      	ldr	r3, [pc, #76]	; (8008278 <prvCheckForValidListAndQueue+0x6c>)
 800822c:	4a10      	ldr	r2, [pc, #64]	; (8008270 <prvCheckForValidListAndQueue+0x64>)
 800822e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008230:	4b12      	ldr	r3, [pc, #72]	; (800827c <prvCheckForValidListAndQueue+0x70>)
 8008232:	4a10      	ldr	r2, [pc, #64]	; (8008274 <prvCheckForValidListAndQueue+0x68>)
 8008234:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008236:	2300      	movs	r3, #0
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <prvCheckForValidListAndQueue+0x74>)
 800823c:	4a11      	ldr	r2, [pc, #68]	; (8008284 <prvCheckForValidListAndQueue+0x78>)
 800823e:	2110      	movs	r1, #16
 8008240:	200a      	movs	r0, #10
 8008242:	f7fd fe07 	bl	8005e54 <xQueueGenericCreateStatic>
 8008246:	4603      	mov	r3, r0
 8008248:	4a08      	ldr	r2, [pc, #32]	; (800826c <prvCheckForValidListAndQueue+0x60>)
 800824a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <prvCheckForValidListAndQueue+0x60>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <prvCheckForValidListAndQueue+0x60>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	490b      	ldr	r1, [pc, #44]	; (8008288 <prvCheckForValidListAndQueue+0x7c>)
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fc34 	bl	8006ac8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008260:	f000 f970 	bl	8008544 <vPortExitCritical>
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200016a8 	.word	0x200016a8
 8008270:	20001678 	.word	0x20001678
 8008274:	2000168c 	.word	0x2000168c
 8008278:	200016a0 	.word	0x200016a0
 800827c:	200016a4 	.word	0x200016a4
 8008280:	20001754 	.word	0x20001754
 8008284:	200016b4 	.word	0x200016b4
 8008288:	0800d640 	.word	0x0800d640

0800828c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3b04      	subs	r3, #4
 800829c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	3b04      	subs	r3, #4
 80082aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f023 0201 	bic.w	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3b04      	subs	r3, #4
 80082ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082bc:	4a0c      	ldr	r2, [pc, #48]	; (80082f0 <pxPortInitialiseStack+0x64>)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3b14      	subs	r3, #20
 80082c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3b04      	subs	r3, #4
 80082d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f06f 0202 	mvn.w	r2, #2
 80082da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3b20      	subs	r3, #32
 80082e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082e2:	68fb      	ldr	r3, [r7, #12]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	080082f5 	.word	0x080082f5

080082f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <prvTaskExitError+0x54>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008306:	d00a      	beq.n	800831e <prvTaskExitError+0x2a>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	60fb      	str	r3, [r7, #12]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <prvTaskExitError+0x28>
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008322:	f383 8811 	msr	BASEPRI, r3
 8008326:	f3bf 8f6f 	isb	sy
 800832a:	f3bf 8f4f 	dsb	sy
 800832e:	60bb      	str	r3, [r7, #8]
}
 8008330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008332:	bf00      	nop
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0fc      	beq.n	8008334 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	2000000c 	.word	0x2000000c
 800834c:	00000000 	.word	0x00000000

08008350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <pxCurrentTCBConst2>)
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	6808      	ldr	r0, [r1, #0]
 8008356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	f380 8809 	msr	PSP, r0
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f04f 0000 	mov.w	r0, #0
 8008366:	f380 8811 	msr	BASEPRI, r0
 800836a:	4770      	bx	lr
 800836c:	f3af 8000 	nop.w

08008370 <pxCurrentTCBConst2>:
 8008370:	20001178 	.word	0x20001178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop

08008378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008378:	4808      	ldr	r0, [pc, #32]	; (800839c <prvPortStartFirstTask+0x24>)
 800837a:	6800      	ldr	r0, [r0, #0]
 800837c:	6800      	ldr	r0, [r0, #0]
 800837e:	f380 8808 	msr	MSP, r0
 8008382:	f04f 0000 	mov.w	r0, #0
 8008386:	f380 8814 	msr	CONTROL, r0
 800838a:	b662      	cpsie	i
 800838c:	b661      	cpsie	f
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	df00      	svc	0
 8008398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800839a:	bf00      	nop
 800839c:	e000ed08 	.word	0xe000ed08

080083a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083a6:	4b46      	ldr	r3, [pc, #280]	; (80084c0 <xPortStartScheduler+0x120>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a46      	ldr	r2, [pc, #280]	; (80084c4 <xPortStartScheduler+0x124>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d10a      	bne.n	80083c6 <xPortStartScheduler+0x26>
	__asm volatile
 80083b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	613b      	str	r3, [r7, #16]
}
 80083c2:	bf00      	nop
 80083c4:	e7fe      	b.n	80083c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083c6:	4b3e      	ldr	r3, [pc, #248]	; (80084c0 <xPortStartScheduler+0x120>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3f      	ldr	r2, [pc, #252]	; (80084c8 <xPortStartScheduler+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10a      	bne.n	80083e6 <xPortStartScheduler+0x46>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60fb      	str	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083e6:	4b39      	ldr	r3, [pc, #228]	; (80084cc <xPortStartScheduler+0x12c>)
 80083e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b31      	ldr	r3, [pc, #196]	; (80084d0 <xPortStartScheduler+0x130>)
 800840c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800840e:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <xPortStartScheduler+0x134>)
 8008410:	2207      	movs	r2, #7
 8008412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008414:	e009      	b.n	800842a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008416:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <xPortStartScheduler+0x134>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	4a2d      	ldr	r2, [pc, #180]	; (80084d4 <xPortStartScheduler+0x134>)
 800841e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800842a:	78fb      	ldrb	r3, [r7, #3]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d0ef      	beq.n	8008416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008436:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <xPortStartScheduler+0x134>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f1c3 0307 	rsb	r3, r3, #7
 800843e:	2b04      	cmp	r3, #4
 8008440:	d00a      	beq.n	8008458 <xPortStartScheduler+0xb8>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008458:	4b1e      	ldr	r3, [pc, #120]	; (80084d4 <xPortStartScheduler+0x134>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <xPortStartScheduler+0x134>)
 8008460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008462:	4b1c      	ldr	r3, [pc, #112]	; (80084d4 <xPortStartScheduler+0x134>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800846a:	4a1a      	ldr	r2, [pc, #104]	; (80084d4 <xPortStartScheduler+0x134>)
 800846c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008476:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <xPortStartScheduler+0x138>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <xPortStartScheduler+0x138>)
 800847c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <xPortStartScheduler+0x138>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <xPortStartScheduler+0x138>)
 8008488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800848c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800848e:	f000 f8dd 	bl	800864c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <xPortStartScheduler+0x13c>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008498:	f000 f8fc 	bl	8008694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <xPortStartScheduler+0x140>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0f      	ldr	r2, [pc, #60]	; (80084e0 <xPortStartScheduler+0x140>)
 80084a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084a8:	f7ff ff66 	bl	8008378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084ac:	f7fe ff3c 	bl	8007328 <vTaskSwitchContext>
	prvTaskExitError();
 80084b0:	f7ff ff20 	bl	80082f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	e000ed00 	.word	0xe000ed00
 80084c4:	410fc271 	.word	0x410fc271
 80084c8:	410fc270 	.word	0x410fc270
 80084cc:	e000e400 	.word	0xe000e400
 80084d0:	200017a4 	.word	0x200017a4
 80084d4:	200017a8 	.word	0x200017a8
 80084d8:	e000ed20 	.word	0xe000ed20
 80084dc:	2000000c 	.word	0x2000000c
 80084e0:	e000ef34 	.word	0xe000ef34

080084e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	607b      	str	r3, [r7, #4]
}
 80084fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <vPortEnterCritical+0x58>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a0d      	ldr	r2, [pc, #52]	; (800853c <vPortEnterCritical+0x58>)
 8008506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <vPortEnterCritical+0x58>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d10f      	bne.n	8008530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <vPortEnterCritical+0x5c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <vPortEnterCritical+0x4c>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	f383 8811 	msr	BASEPRI, r3
 8008522:	f3bf 8f6f 	isb	sy
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	603b      	str	r3, [r7, #0]
}
 800852c:	bf00      	nop
 800852e:	e7fe      	b.n	800852e <vPortEnterCritical+0x4a>
	}
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	2000000c 	.word	0x2000000c
 8008540:	e000ed04 	.word	0xe000ed04

08008544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800854a:	4b12      	ldr	r3, [pc, #72]	; (8008594 <vPortExitCritical+0x50>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <vPortExitCritical+0x24>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	607b      	str	r3, [r7, #4]
}
 8008564:	bf00      	nop
 8008566:	e7fe      	b.n	8008566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <vPortExitCritical+0x50>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3b01      	subs	r3, #1
 800856e:	4a09      	ldr	r2, [pc, #36]	; (8008594 <vPortExitCritical+0x50>)
 8008570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <vPortExitCritical+0x50>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <vPortExitCritical+0x42>
 800857a:	2300      	movs	r3, #0
 800857c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	f383 8811 	msr	BASEPRI, r3
}
 8008584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	2000000c 	.word	0x2000000c
	...

080085a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085a0:	f3ef 8009 	mrs	r0, PSP
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	4b15      	ldr	r3, [pc, #84]	; (8008600 <pxCurrentTCBConst>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	f01e 0f10 	tst.w	lr, #16
 80085b0:	bf08      	it	eq
 80085b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ba:	6010      	str	r0, [r2, #0]
 80085bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085c4:	f380 8811 	msr	BASEPRI, r0
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f7fe feaa 	bl	8007328 <vTaskSwitchContext>
 80085d4:	f04f 0000 	mov.w	r0, #0
 80085d8:	f380 8811 	msr	BASEPRI, r0
 80085dc:	bc09      	pop	{r0, r3}
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	6808      	ldr	r0, [r1, #0]
 80085e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e6:	f01e 0f10 	tst.w	lr, #16
 80085ea:	bf08      	it	eq
 80085ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085f0:	f380 8809 	msr	PSP, r0
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	f3af 8000 	nop.w

08008600 <pxCurrentTCBConst>:
 8008600:	20001178 	.word	0x20001178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop

08008608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	607b      	str	r3, [r7, #4]
}
 8008620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008622:	f7fe fdc7 	bl	80071b4 <xTaskIncrementTick>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <xPortSysTickHandler+0x40>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	f383 8811 	msr	BASEPRI, r3
}
 800863e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008640:	bf00      	nop
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	e000ed04 	.word	0xe000ed04

0800864c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <vPortSetupTimerInterrupt+0x38>)
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <vPortSetupTimerInterrupt+0x3c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a0a      	ldr	r2, [pc, #40]	; (800868c <vPortSetupTimerInterrupt+0x40>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	4a09      	ldr	r2, [pc, #36]	; (8008690 <vPortSetupTimerInterrupt+0x44>)
 800866a:	3b01      	subs	r3, #1
 800866c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800866e:	4b04      	ldr	r3, [pc, #16]	; (8008680 <vPortSetupTimerInterrupt+0x34>)
 8008670:	2207      	movs	r2, #7
 8008672:	601a      	str	r2, [r3, #0]
}
 8008674:	bf00      	nop
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	e000e010 	.word	0xe000e010
 8008684:	e000e018 	.word	0xe000e018
 8008688:	20000000 	.word	0x20000000
 800868c:	10624dd3 	.word	0x10624dd3
 8008690:	e000e014 	.word	0xe000e014

08008694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086a4 <vPortEnableVFP+0x10>
 8008698:	6801      	ldr	r1, [r0, #0]
 800869a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869e:	6001      	str	r1, [r0, #0]
 80086a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086a2:	bf00      	nop
 80086a4:	e000ed88 	.word	0xe000ed88

080086a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ae:	f3ef 8305 	mrs	r3, IPSR
 80086b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b0f      	cmp	r3, #15
 80086b8:	d914      	bls.n	80086e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ba:	4a17      	ldr	r2, [pc, #92]	; (8008718 <vPortValidateInterruptPriority+0x70>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086c4:	4b15      	ldr	r3, [pc, #84]	; (800871c <vPortValidateInterruptPriority+0x74>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	7afa      	ldrb	r2, [r7, #11]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d20a      	bcs.n	80086e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	607b      	str	r3, [r7, #4]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <vPortValidateInterruptPriority+0x78>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086ec:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <vPortValidateInterruptPriority+0x7c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d90a      	bls.n	800870a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	603b      	str	r3, [r7, #0]
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <vPortValidateInterruptPriority+0x60>
	}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000e3f0 	.word	0xe000e3f0
 800871c:	200017a4 	.word	0x200017a4
 8008720:	e000ed0c 	.word	0xe000ed0c
 8008724:	200017a8 	.word	0x200017a8

08008728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008734:	f7fe fc82 	bl	800703c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008738:	4b5b      	ldr	r3, [pc, #364]	; (80088a8 <pvPortMalloc+0x180>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008740:	f000 f920 	bl	8008984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008744:	4b59      	ldr	r3, [pc, #356]	; (80088ac <pvPortMalloc+0x184>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8093 	bne.w	8008878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01d      	beq.n	8008794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008758:	2208      	movs	r2, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	3308      	adds	r3, #8
 8008772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <pvPortMalloc+0x6c>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	617b      	str	r3, [r7, #20]
}
 8008790:	bf00      	nop
 8008792:	e7fe      	b.n	8008792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d06e      	beq.n	8008878 <pvPortMalloc+0x150>
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <pvPortMalloc+0x188>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d869      	bhi.n	8008878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087a4:	4b43      	ldr	r3, [pc, #268]	; (80088b4 <pvPortMalloc+0x18c>)
 80087a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087a8:	4b42      	ldr	r3, [pc, #264]	; (80088b4 <pvPortMalloc+0x18c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ae:	e004      	b.n	80087ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d903      	bls.n	80087cc <pvPortMalloc+0xa4>
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1f1      	bne.n	80087b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087cc:	4b36      	ldr	r3, [pc, #216]	; (80088a8 <pvPortMalloc+0x180>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d050      	beq.n	8008878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2208      	movs	r2, #8
 80087dc:	4413      	add	r3, r2
 80087de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	1ad2      	subs	r2, r2, r3
 80087f0:	2308      	movs	r3, #8
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d91f      	bls.n	8008838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <pvPortMalloc+0xf8>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	613b      	str	r3, [r7, #16]
}
 800881c:	bf00      	nop
 800881e:	e7fe      	b.n	800881e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 f908 	bl	8008a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <pvPortMalloc+0x188>)
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <pvPortMalloc+0x188>)
 8008844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008846:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <pvPortMalloc+0x188>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b1b      	ldr	r3, [pc, #108]	; (80088b8 <pvPortMalloc+0x190>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d203      	bcs.n	800885a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008852:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <pvPortMalloc+0x188>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <pvPortMalloc+0x190>)
 8008858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <pvPortMalloc+0x184>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	431a      	orrs	r2, r3
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800886e:	4b13      	ldr	r3, [pc, #76]	; (80088bc <pvPortMalloc+0x194>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	4a11      	ldr	r2, [pc, #68]	; (80088bc <pvPortMalloc+0x194>)
 8008876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008878:	f7fe fbee 	bl	8007058 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0307 	and.w	r3, r3, #7
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <pvPortMalloc+0x174>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60fb      	str	r3, [r7, #12]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <pvPortMalloc+0x172>
	return pvReturn;
 800889c:	69fb      	ldr	r3, [r7, #28]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3728      	adds	r7, #40	; 0x28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20003adc 	.word	0x20003adc
 80088ac:	20003af0 	.word	0x20003af0
 80088b0:	20003ae0 	.word	0x20003ae0
 80088b4:	20003ad4 	.word	0x20003ad4
 80088b8:	20003ae4 	.word	0x20003ae4
 80088bc:	20003ae8 	.word	0x20003ae8

080088c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d04d      	beq.n	800896e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088d2:	2308      	movs	r3, #8
 80088d4:	425b      	negs	r3, r3
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <vPortFree+0xb8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4013      	ands	r3, r2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <vPortFree+0x44>
	__asm volatile
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	60fb      	str	r3, [r7, #12]
}
 8008900:	bf00      	nop
 8008902:	e7fe      	b.n	8008902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00a      	beq.n	8008922 <vPortFree+0x62>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60bb      	str	r3, [r7, #8]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	4b14      	ldr	r3, [pc, #80]	; (8008978 <vPortFree+0xb8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01e      	beq.n	800896e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11a      	bne.n	800896e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	4b0e      	ldr	r3, [pc, #56]	; (8008978 <vPortFree+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	43db      	mvns	r3, r3
 8008942:	401a      	ands	r2, r3
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008948:	f7fe fb78 	bl	800703c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <vPortFree+0xbc>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4413      	add	r3, r2
 8008956:	4a09      	ldr	r2, [pc, #36]	; (800897c <vPortFree+0xbc>)
 8008958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800895a:	6938      	ldr	r0, [r7, #16]
 800895c:	f000 f874 	bl	8008a48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <vPortFree+0xc0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a06      	ldr	r2, [pc, #24]	; (8008980 <vPortFree+0xc0>)
 8008968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800896a:	f7fe fb75 	bl	8007058 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20003af0 	.word	0x20003af0
 800897c:	20003ae0 	.word	0x20003ae0
 8008980:	20003aec 	.word	0x20003aec

08008984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800898a:	f242 3328 	movw	r3, #9000	; 0x2328
 800898e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008990:	4b27      	ldr	r3, [pc, #156]	; (8008a30 <prvHeapInit+0xac>)
 8008992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3307      	adds	r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <prvHeapInit+0xac>)
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089bc:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <prvHeapInit+0xb0>)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089c2:	4b1c      	ldr	r3, [pc, #112]	; (8008a34 <prvHeapInit+0xb0>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089d0:	2208      	movs	r2, #8
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <prvHeapInit+0xb4>)
 80089e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089e6:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <prvHeapInit+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ee:	4b12      	ldr	r3, [pc, #72]	; (8008a38 <prvHeapInit+0xb4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a04:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <prvHeapInit+0xb4>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <prvHeapInit+0xb8>)
 8008a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a09      	ldr	r2, [pc, #36]	; (8008a40 <prvHeapInit+0xbc>)
 8008a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <prvHeapInit+0xc0>)
 8008a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	200017ac 	.word	0x200017ac
 8008a34:	20003ad4 	.word	0x20003ad4
 8008a38:	20003adc 	.word	0x20003adc
 8008a3c:	20003ae4 	.word	0x20003ae4
 8008a40:	20003ae0 	.word	0x20003ae0
 8008a44:	20003af0 	.word	0x20003af0

08008a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a50:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <prvInsertBlockIntoFreeList+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <prvInsertBlockIntoFreeList+0x14>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d8f7      	bhi.n	8008a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d108      	bne.n	8008a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	441a      	add	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d118      	bne.n	8008ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d00d      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e008      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e003      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d002      	beq.n	8008ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20003ad4 	.word	0x20003ad4
 8008af8:	20003adc 	.word	0x20003adc

08008afc <atof>:
 8008afc:	2100      	movs	r1, #0
 8008afe:	f001 be19 	b.w	800a734 <strtod>

08008b02 <atoi>:
 8008b02:	220a      	movs	r2, #10
 8008b04:	2100      	movs	r1, #0
 8008b06:	f001 bea5 	b.w	800a854 <strtol>
	...

08008b0c <exit>:
 8008b0c:	b508      	push	{r3, lr}
 8008b0e:	4b06      	ldr	r3, [pc, #24]	; (8008b28 <exit+0x1c>)
 8008b10:	4604      	mov	r4, r0
 8008b12:	b113      	cbz	r3, 8008b1a <exit+0xe>
 8008b14:	2100      	movs	r1, #0
 8008b16:	f3af 8000 	nop.w
 8008b1a:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <exit+0x20>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <exit+0x16>
 8008b20:	4798      	blx	r3
 8008b22:	4620      	mov	r0, r4
 8008b24:	f7f9 f8fe 	bl	8001d24 <_exit>
 8008b28:	00000000 	.word	0x00000000
 8008b2c:	20003c34 	.word	0x20003c34

08008b30 <__cvt>:
 8008b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b34:	ec55 4b10 	vmov	r4, r5, d0
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	460e      	mov	r6, r1
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	462b      	mov	r3, r5
 8008b40:	bfbb      	ittet	lt
 8008b42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b46:	461d      	movlt	r5, r3
 8008b48:	2300      	movge	r3, #0
 8008b4a:	232d      	movlt	r3, #45	; 0x2d
 8008b4c:	700b      	strb	r3, [r1, #0]
 8008b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b54:	4691      	mov	r9, r2
 8008b56:	f023 0820 	bic.w	r8, r3, #32
 8008b5a:	bfbc      	itt	lt
 8008b5c:	4622      	movlt	r2, r4
 8008b5e:	4614      	movlt	r4, r2
 8008b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b64:	d005      	beq.n	8008b72 <__cvt+0x42>
 8008b66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b6a:	d100      	bne.n	8008b6e <__cvt+0x3e>
 8008b6c:	3601      	adds	r6, #1
 8008b6e:	2102      	movs	r1, #2
 8008b70:	e000      	b.n	8008b74 <__cvt+0x44>
 8008b72:	2103      	movs	r1, #3
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	ab02      	add	r3, sp, #8
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	ec45 4b10 	vmov	d0, r4, r5
 8008b80:	4653      	mov	r3, sl
 8008b82:	4632      	mov	r2, r6
 8008b84:	f002 f860 	bl	800ac48 <_dtoa_r>
 8008b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	d102      	bne.n	8008b96 <__cvt+0x66>
 8008b90:	f019 0f01 	tst.w	r9, #1
 8008b94:	d022      	beq.n	8008bdc <__cvt+0xac>
 8008b96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b9a:	eb07 0906 	add.w	r9, r7, r6
 8008b9e:	d110      	bne.n	8008bc2 <__cvt+0x92>
 8008ba0:	783b      	ldrb	r3, [r7, #0]
 8008ba2:	2b30      	cmp	r3, #48	; 0x30
 8008ba4:	d10a      	bne.n	8008bbc <__cvt+0x8c>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4620      	mov	r0, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7f7 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bb2:	b918      	cbnz	r0, 8008bbc <__cvt+0x8c>
 8008bb4:	f1c6 0601 	rsb	r6, r6, #1
 8008bb8:	f8ca 6000 	str.w	r6, [sl]
 8008bbc:	f8da 3000 	ldr.w	r3, [sl]
 8008bc0:	4499      	add	r9, r3
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7f7 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bce:	b108      	cbz	r0, 8008bd4 <__cvt+0xa4>
 8008bd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bd4:	2230      	movs	r2, #48	; 0x30
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	454b      	cmp	r3, r9
 8008bda:	d307      	bcc.n	8008bec <__cvt+0xbc>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008be0:	1bdb      	subs	r3, r3, r7
 8008be2:	4638      	mov	r0, r7
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	b004      	add	sp, #16
 8008be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bec:	1c59      	adds	r1, r3, #1
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e7f0      	b.n	8008bd6 <__cvt+0xa6>

08008bf4 <__exponent>:
 8008bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	bfb8      	it	lt
 8008bfc:	4249      	neglt	r1, r1
 8008bfe:	f803 2b02 	strb.w	r2, [r3], #2
 8008c02:	bfb4      	ite	lt
 8008c04:	222d      	movlt	r2, #45	; 0x2d
 8008c06:	222b      	movge	r2, #43	; 0x2b
 8008c08:	2909      	cmp	r1, #9
 8008c0a:	7042      	strb	r2, [r0, #1]
 8008c0c:	dd2a      	ble.n	8008c64 <__exponent+0x70>
 8008c0e:	f10d 0207 	add.w	r2, sp, #7
 8008c12:	4617      	mov	r7, r2
 8008c14:	260a      	movs	r6, #10
 8008c16:	4694      	mov	ip, r2
 8008c18:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c1c:	fb06 1415 	mls	r4, r6, r5, r1
 8008c20:	3430      	adds	r4, #48	; 0x30
 8008c22:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008c26:	460c      	mov	r4, r1
 8008c28:	2c63      	cmp	r4, #99	; 0x63
 8008c2a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008c2e:	4629      	mov	r1, r5
 8008c30:	dcf1      	bgt.n	8008c16 <__exponent+0x22>
 8008c32:	3130      	adds	r1, #48	; 0x30
 8008c34:	f1ac 0402 	sub.w	r4, ip, #2
 8008c38:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c3c:	1c41      	adds	r1, r0, #1
 8008c3e:	4622      	mov	r2, r4
 8008c40:	42ba      	cmp	r2, r7
 8008c42:	d30a      	bcc.n	8008c5a <__exponent+0x66>
 8008c44:	f10d 0209 	add.w	r2, sp, #9
 8008c48:	eba2 020c 	sub.w	r2, r2, ip
 8008c4c:	42bc      	cmp	r4, r7
 8008c4e:	bf88      	it	hi
 8008c50:	2200      	movhi	r2, #0
 8008c52:	4413      	add	r3, r2
 8008c54:	1a18      	subs	r0, r3, r0
 8008c56:	b003      	add	sp, #12
 8008c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c5a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008c5e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008c62:	e7ed      	b.n	8008c40 <__exponent+0x4c>
 8008c64:	2330      	movs	r3, #48	; 0x30
 8008c66:	3130      	adds	r1, #48	; 0x30
 8008c68:	7083      	strb	r3, [r0, #2]
 8008c6a:	70c1      	strb	r1, [r0, #3]
 8008c6c:	1d03      	adds	r3, r0, #4
 8008c6e:	e7f1      	b.n	8008c54 <__exponent+0x60>

08008c70 <_printf_float>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	ed2d 8b02 	vpush	{d8}
 8008c78:	b08d      	sub	sp, #52	; 0x34
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c80:	4616      	mov	r6, r2
 8008c82:	461f      	mov	r7, r3
 8008c84:	4605      	mov	r5, r0
 8008c86:	f001 fe83 	bl	800a990 <_localeconv_r>
 8008c8a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c8e:	4650      	mov	r0, sl
 8008c90:	f7f7 faee 	bl	8000270 <strlen>
 8008c94:	2300      	movs	r3, #0
 8008c96:	930a      	str	r3, [sp, #40]	; 0x28
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	9305      	str	r3, [sp, #20]
 8008c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ca0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ca4:	3307      	adds	r3, #7
 8008ca6:	f023 0307 	bic.w	r3, r3, #7
 8008caa:	f103 0208 	add.w	r2, r3, #8
 8008cae:	f8c8 2000 	str.w	r2, [r8]
 8008cb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cb6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cc0:	ee08 0a10 	vmov	s16, r0
 8008cc4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ccc:	4b9e      	ldr	r3, [pc, #632]	; (8008f48 <_printf_float+0x2d8>)
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cd2:	f7f7 ff2b 	bl	8000b2c <__aeabi_dcmpun>
 8008cd6:	bb88      	cbnz	r0, 8008d3c <_printf_float+0xcc>
 8008cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cdc:	4b9a      	ldr	r3, [pc, #616]	; (8008f48 <_printf_float+0x2d8>)
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ce2:	f7f7 ff05 	bl	8000af0 <__aeabi_dcmple>
 8008ce6:	bb48      	cbnz	r0, 8008d3c <_printf_float+0xcc>
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2300      	movs	r3, #0
 8008cec:	4640      	mov	r0, r8
 8008cee:	4649      	mov	r1, r9
 8008cf0:	f7f7 fef4 	bl	8000adc <__aeabi_dcmplt>
 8008cf4:	b110      	cbz	r0, 8008cfc <_printf_float+0x8c>
 8008cf6:	232d      	movs	r3, #45	; 0x2d
 8008cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cfc:	4a93      	ldr	r2, [pc, #588]	; (8008f4c <_printf_float+0x2dc>)
 8008cfe:	4b94      	ldr	r3, [pc, #592]	; (8008f50 <_printf_float+0x2e0>)
 8008d00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d04:	bf94      	ite	ls
 8008d06:	4690      	movls	r8, r2
 8008d08:	4698      	movhi	r8, r3
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	6123      	str	r3, [r4, #16]
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	f023 0304 	bic.w	r3, r3, #4
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	f04f 0900 	mov.w	r9, #0
 8008d1a:	9700      	str	r7, [sp, #0]
 8008d1c:	4633      	mov	r3, r6
 8008d1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d20:	4621      	mov	r1, r4
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 fa82 	bl	800922c <_printf_common>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	f040 8090 	bne.w	8008e4e <_printf_float+0x1de>
 8008d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d32:	b00d      	add	sp, #52	; 0x34
 8008d34:	ecbd 8b02 	vpop	{d8}
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fef2 	bl	8000b2c <__aeabi_dcmpun>
 8008d48:	b140      	cbz	r0, 8008d5c <_printf_float+0xec>
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfbc      	itt	lt
 8008d50:	232d      	movlt	r3, #45	; 0x2d
 8008d52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d56:	4a7f      	ldr	r2, [pc, #508]	; (8008f54 <_printf_float+0x2e4>)
 8008d58:	4b7f      	ldr	r3, [pc, #508]	; (8008f58 <_printf_float+0x2e8>)
 8008d5a:	e7d1      	b.n	8008d00 <_printf_float+0x90>
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d62:	9206      	str	r2, [sp, #24]
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	d13f      	bne.n	8008de8 <_printf_float+0x178>
 8008d68:	2306      	movs	r3, #6
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	9b05      	ldr	r3, [sp, #20]
 8008d6e:	6861      	ldr	r1, [r4, #4]
 8008d70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d74:	2300      	movs	r3, #0
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	ab0a      	add	r3, sp, #40	; 0x28
 8008d7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d7e:	ab09      	add	r3, sp, #36	; 0x24
 8008d80:	ec49 8b10 	vmov	d0, r8, r9
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	6022      	str	r2, [r4, #0]
 8008d88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f7ff fecf 	bl	8008b30 <__cvt>
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d96:	2b47      	cmp	r3, #71	; 0x47
 8008d98:	4680      	mov	r8, r0
 8008d9a:	d108      	bne.n	8008dae <_printf_float+0x13e>
 8008d9c:	1cc8      	adds	r0, r1, #3
 8008d9e:	db02      	blt.n	8008da6 <_printf_float+0x136>
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	4299      	cmp	r1, r3
 8008da4:	dd41      	ble.n	8008e2a <_printf_float+0x1ba>
 8008da6:	f1ab 0302 	sub.w	r3, fp, #2
 8008daa:	fa5f fb83 	uxtb.w	fp, r3
 8008dae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008db2:	d820      	bhi.n	8008df6 <_printf_float+0x186>
 8008db4:	3901      	subs	r1, #1
 8008db6:	465a      	mov	r2, fp
 8008db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8008dbe:	f7ff ff19 	bl	8008bf4 <__exponent>
 8008dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc4:	1813      	adds	r3, r2, r0
 8008dc6:	2a01      	cmp	r2, #1
 8008dc8:	4681      	mov	r9, r0
 8008dca:	6123      	str	r3, [r4, #16]
 8008dcc:	dc02      	bgt.n	8008dd4 <_printf_float+0x164>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	07d2      	lsls	r2, r2, #31
 8008dd2:	d501      	bpl.n	8008dd8 <_printf_float+0x168>
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d09c      	beq.n	8008d1a <_printf_float+0xaa>
 8008de0:	232d      	movs	r3, #45	; 0x2d
 8008de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de6:	e798      	b.n	8008d1a <_printf_float+0xaa>
 8008de8:	9a06      	ldr	r2, [sp, #24]
 8008dea:	2a47      	cmp	r2, #71	; 0x47
 8008dec:	d1be      	bne.n	8008d6c <_printf_float+0xfc>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1bc      	bne.n	8008d6c <_printf_float+0xfc>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7b9      	b.n	8008d6a <_printf_float+0xfa>
 8008df6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dfa:	d118      	bne.n	8008e2e <_printf_float+0x1be>
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	6863      	ldr	r3, [r4, #4]
 8008e00:	dd0b      	ble.n	8008e1a <_printf_float+0x1aa>
 8008e02:	6121      	str	r1, [r4, #16]
 8008e04:	b913      	cbnz	r3, 8008e0c <_printf_float+0x19c>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	07d0      	lsls	r0, r2, #31
 8008e0a:	d502      	bpl.n	8008e12 <_printf_float+0x1a2>
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	440b      	add	r3, r1
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e14:	f04f 0900 	mov.w	r9, #0
 8008e18:	e7de      	b.n	8008dd8 <_printf_float+0x168>
 8008e1a:	b913      	cbnz	r3, 8008e22 <_printf_float+0x1b2>
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	07d2      	lsls	r2, r2, #31
 8008e20:	d501      	bpl.n	8008e26 <_printf_float+0x1b6>
 8008e22:	3302      	adds	r3, #2
 8008e24:	e7f4      	b.n	8008e10 <_printf_float+0x1a0>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e7f2      	b.n	8008e10 <_printf_float+0x1a0>
 8008e2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e30:	4299      	cmp	r1, r3
 8008e32:	db05      	blt.n	8008e40 <_printf_float+0x1d0>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	6121      	str	r1, [r4, #16]
 8008e38:	07d8      	lsls	r0, r3, #31
 8008e3a:	d5ea      	bpl.n	8008e12 <_printf_float+0x1a2>
 8008e3c:	1c4b      	adds	r3, r1, #1
 8008e3e:	e7e7      	b.n	8008e10 <_printf_float+0x1a0>
 8008e40:	2900      	cmp	r1, #0
 8008e42:	bfd4      	ite	le
 8008e44:	f1c1 0202 	rsble	r2, r1, #2
 8008e48:	2201      	movgt	r2, #1
 8008e4a:	4413      	add	r3, r2
 8008e4c:	e7e0      	b.n	8008e10 <_printf_float+0x1a0>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	055a      	lsls	r2, r3, #21
 8008e52:	d407      	bmi.n	8008e64 <_printf_float+0x1f4>
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	4642      	mov	r2, r8
 8008e58:	4631      	mov	r1, r6
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	47b8      	blx	r7
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d12c      	bne.n	8008ebc <_printf_float+0x24c>
 8008e62:	e764      	b.n	8008d2e <_printf_float+0xbe>
 8008e64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e68:	f240 80e0 	bls.w	800902c <_printf_float+0x3bc>
 8008e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e70:	2200      	movs	r2, #0
 8008e72:	2300      	movs	r3, #0
 8008e74:	f7f7 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d034      	beq.n	8008ee6 <_printf_float+0x276>
 8008e7c:	4a37      	ldr	r2, [pc, #220]	; (8008f5c <_printf_float+0x2ec>)
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4631      	mov	r1, r6
 8008e82:	4628      	mov	r0, r5
 8008e84:	47b8      	blx	r7
 8008e86:	3001      	adds	r0, #1
 8008e88:	f43f af51 	beq.w	8008d2e <_printf_float+0xbe>
 8008e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e90:	429a      	cmp	r2, r3
 8008e92:	db02      	blt.n	8008e9a <_printf_float+0x22a>
 8008e94:	6823      	ldr	r3, [r4, #0]
 8008e96:	07d8      	lsls	r0, r3, #31
 8008e98:	d510      	bpl.n	8008ebc <_printf_float+0x24c>
 8008e9a:	ee18 3a10 	vmov	r3, s16
 8008e9e:	4652      	mov	r2, sl
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f43f af41 	beq.w	8008d2e <_printf_float+0xbe>
 8008eac:	f04f 0800 	mov.w	r8, #0
 8008eb0:	f104 091a 	add.w	r9, r4, #26
 8008eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	4543      	cmp	r3, r8
 8008eba:	dc09      	bgt.n	8008ed0 <_printf_float+0x260>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	079b      	lsls	r3, r3, #30
 8008ec0:	f100 8107 	bmi.w	80090d2 <_printf_float+0x462>
 8008ec4:	68e0      	ldr	r0, [r4, #12]
 8008ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec8:	4298      	cmp	r0, r3
 8008eca:	bfb8      	it	lt
 8008ecc:	4618      	movlt	r0, r3
 8008ece:	e730      	b.n	8008d32 <_printf_float+0xc2>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	464a      	mov	r2, r9
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f af27 	beq.w	8008d2e <_printf_float+0xbe>
 8008ee0:	f108 0801 	add.w	r8, r8, #1
 8008ee4:	e7e6      	b.n	8008eb4 <_printf_float+0x244>
 8008ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	dc39      	bgt.n	8008f60 <_printf_float+0x2f0>
 8008eec:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <_printf_float+0x2ec>)
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f af19 	beq.w	8008d2e <_printf_float+0xbe>
 8008efc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d102      	bne.n	8008f0a <_printf_float+0x29a>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d5d8      	bpl.n	8008ebc <_printf_float+0x24c>
 8008f0a:	ee18 3a10 	vmov	r3, s16
 8008f0e:	4652      	mov	r2, sl
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	47b8      	blx	r7
 8008f16:	3001      	adds	r0, #1
 8008f18:	f43f af09 	beq.w	8008d2e <_printf_float+0xbe>
 8008f1c:	f04f 0900 	mov.w	r9, #0
 8008f20:	f104 0a1a 	add.w	sl, r4, #26
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	425b      	negs	r3, r3
 8008f28:	454b      	cmp	r3, r9
 8008f2a:	dc01      	bgt.n	8008f30 <_printf_float+0x2c0>
 8008f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2e:	e792      	b.n	8008e56 <_printf_float+0x1e6>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4652      	mov	r2, sl
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f aef7 	beq.w	8008d2e <_printf_float+0xbe>
 8008f40:	f109 0901 	add.w	r9, r9, #1
 8008f44:	e7ee      	b.n	8008f24 <_printf_float+0x2b4>
 8008f46:	bf00      	nop
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	0800d700 	.word	0x0800d700
 8008f50:	0800d704 	.word	0x0800d704
 8008f54:	0800d708 	.word	0x0800d708
 8008f58:	0800d70c 	.word	0x0800d70c
 8008f5c:	0800d710 	.word	0x0800d710
 8008f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f64:	429a      	cmp	r2, r3
 8008f66:	bfa8      	it	ge
 8008f68:	461a      	movge	r2, r3
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	4691      	mov	r9, r2
 8008f6e:	dc37      	bgt.n	8008fe0 <_printf_float+0x370>
 8008f70:	f04f 0b00 	mov.w	fp, #0
 8008f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f78:	f104 021a 	add.w	r2, r4, #26
 8008f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	eba3 0309 	sub.w	r3, r3, r9
 8008f84:	455b      	cmp	r3, fp
 8008f86:	dc33      	bgt.n	8008ff0 <_printf_float+0x380>
 8008f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	db3b      	blt.n	8009008 <_printf_float+0x398>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	07da      	lsls	r2, r3, #31
 8008f94:	d438      	bmi.n	8009008 <_printf_float+0x398>
 8008f96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008f9a:	eba2 0903 	sub.w	r9, r2, r3
 8008f9e:	9b05      	ldr	r3, [sp, #20]
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	4591      	cmp	r9, r2
 8008fa4:	bfa8      	it	ge
 8008fa6:	4691      	movge	r9, r2
 8008fa8:	f1b9 0f00 	cmp.w	r9, #0
 8008fac:	dc35      	bgt.n	800901a <_printf_float+0x3aa>
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fb6:	f104 0a1a 	add.w	sl, r4, #26
 8008fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fbe:	1a9b      	subs	r3, r3, r2
 8008fc0:	eba3 0309 	sub.w	r3, r3, r9
 8008fc4:	4543      	cmp	r3, r8
 8008fc6:	f77f af79 	ble.w	8008ebc <_printf_float+0x24c>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4652      	mov	r2, sl
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f aeaa 	beq.w	8008d2e <_printf_float+0xbe>
 8008fda:	f108 0801 	add.w	r8, r8, #1
 8008fde:	e7ec      	b.n	8008fba <_printf_float+0x34a>
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	47b8      	blx	r7
 8008fea:	3001      	adds	r0, #1
 8008fec:	d1c0      	bne.n	8008f70 <_printf_float+0x300>
 8008fee:	e69e      	b.n	8008d2e <_printf_float+0xbe>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	9205      	str	r2, [sp, #20]
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	f43f ae97 	beq.w	8008d2e <_printf_float+0xbe>
 8009000:	9a05      	ldr	r2, [sp, #20]
 8009002:	f10b 0b01 	add.w	fp, fp, #1
 8009006:	e7b9      	b.n	8008f7c <_printf_float+0x30c>
 8009008:	ee18 3a10 	vmov	r3, s16
 800900c:	4652      	mov	r2, sl
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	d1be      	bne.n	8008f96 <_printf_float+0x326>
 8009018:	e689      	b.n	8008d2e <_printf_float+0xbe>
 800901a:	9a05      	ldr	r2, [sp, #20]
 800901c:	464b      	mov	r3, r9
 800901e:	4442      	add	r2, r8
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	d1c1      	bne.n	8008fae <_printf_float+0x33e>
 800902a:	e680      	b.n	8008d2e <_printf_float+0xbe>
 800902c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800902e:	2a01      	cmp	r2, #1
 8009030:	dc01      	bgt.n	8009036 <_printf_float+0x3c6>
 8009032:	07db      	lsls	r3, r3, #31
 8009034:	d53a      	bpl.n	80090ac <_printf_float+0x43c>
 8009036:	2301      	movs	r3, #1
 8009038:	4642      	mov	r2, r8
 800903a:	4631      	mov	r1, r6
 800903c:	4628      	mov	r0, r5
 800903e:	47b8      	blx	r7
 8009040:	3001      	adds	r0, #1
 8009042:	f43f ae74 	beq.w	8008d2e <_printf_float+0xbe>
 8009046:	ee18 3a10 	vmov	r3, s16
 800904a:	4652      	mov	r2, sl
 800904c:	4631      	mov	r1, r6
 800904e:	4628      	mov	r0, r5
 8009050:	47b8      	blx	r7
 8009052:	3001      	adds	r0, #1
 8009054:	f43f ae6b 	beq.w	8008d2e <_printf_float+0xbe>
 8009058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800905c:	2200      	movs	r2, #0
 800905e:	2300      	movs	r3, #0
 8009060:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009064:	f7f7 fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009068:	b9d8      	cbnz	r0, 80090a2 <_printf_float+0x432>
 800906a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800906e:	f108 0201 	add.w	r2, r8, #1
 8009072:	4631      	mov	r1, r6
 8009074:	4628      	mov	r0, r5
 8009076:	47b8      	blx	r7
 8009078:	3001      	adds	r0, #1
 800907a:	d10e      	bne.n	800909a <_printf_float+0x42a>
 800907c:	e657      	b.n	8008d2e <_printf_float+0xbe>
 800907e:	2301      	movs	r3, #1
 8009080:	4652      	mov	r2, sl
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	f43f ae50 	beq.w	8008d2e <_printf_float+0xbe>
 800908e:	f108 0801 	add.w	r8, r8, #1
 8009092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009094:	3b01      	subs	r3, #1
 8009096:	4543      	cmp	r3, r8
 8009098:	dcf1      	bgt.n	800907e <_printf_float+0x40e>
 800909a:	464b      	mov	r3, r9
 800909c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090a0:	e6da      	b.n	8008e58 <_printf_float+0x1e8>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	f104 0a1a 	add.w	sl, r4, #26
 80090aa:	e7f2      	b.n	8009092 <_printf_float+0x422>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4642      	mov	r2, r8
 80090b0:	e7df      	b.n	8009072 <_printf_float+0x402>
 80090b2:	2301      	movs	r3, #1
 80090b4:	464a      	mov	r2, r9
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f ae36 	beq.w	8008d2e <_printf_float+0xbe>
 80090c2:	f108 0801 	add.w	r8, r8, #1
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	4543      	cmp	r3, r8
 80090ce:	dcf0      	bgt.n	80090b2 <_printf_float+0x442>
 80090d0:	e6f8      	b.n	8008ec4 <_printf_float+0x254>
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	f104 0919 	add.w	r9, r4, #25
 80090da:	e7f4      	b.n	80090c6 <_printf_float+0x456>

080090dc <malloc>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <malloc+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f000 b823 	b.w	800912c <_malloc_r>
 80090e6:	bf00      	nop
 80090e8:	200001d4 	.word	0x200001d4

080090ec <sbrk_aligned>:
 80090ec:	b570      	push	{r4, r5, r6, lr}
 80090ee:	4e0e      	ldr	r6, [pc, #56]	; (8009128 <sbrk_aligned+0x3c>)
 80090f0:	460c      	mov	r4, r1
 80090f2:	6831      	ldr	r1, [r6, #0]
 80090f4:	4605      	mov	r5, r0
 80090f6:	b911      	cbnz	r1, 80090fe <sbrk_aligned+0x12>
 80090f8:	f001 fca4 	bl	800aa44 <_sbrk_r>
 80090fc:	6030      	str	r0, [r6, #0]
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f001 fc9f 	bl	800aa44 <_sbrk_r>
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d00a      	beq.n	8009120 <sbrk_aligned+0x34>
 800910a:	1cc4      	adds	r4, r0, #3
 800910c:	f024 0403 	bic.w	r4, r4, #3
 8009110:	42a0      	cmp	r0, r4
 8009112:	d007      	beq.n	8009124 <sbrk_aligned+0x38>
 8009114:	1a21      	subs	r1, r4, r0
 8009116:	4628      	mov	r0, r5
 8009118:	f001 fc94 	bl	800aa44 <_sbrk_r>
 800911c:	3001      	adds	r0, #1
 800911e:	d101      	bne.n	8009124 <sbrk_aligned+0x38>
 8009120:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009124:	4620      	mov	r0, r4
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	20003af8 	.word	0x20003af8

0800912c <_malloc_r>:
 800912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009130:	1ccd      	adds	r5, r1, #3
 8009132:	f025 0503 	bic.w	r5, r5, #3
 8009136:	3508      	adds	r5, #8
 8009138:	2d0c      	cmp	r5, #12
 800913a:	bf38      	it	cc
 800913c:	250c      	movcc	r5, #12
 800913e:	2d00      	cmp	r5, #0
 8009140:	4607      	mov	r7, r0
 8009142:	db01      	blt.n	8009148 <_malloc_r+0x1c>
 8009144:	42a9      	cmp	r1, r5
 8009146:	d905      	bls.n	8009154 <_malloc_r+0x28>
 8009148:	230c      	movs	r3, #12
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	2600      	movs	r6, #0
 800914e:	4630      	mov	r0, r6
 8009150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009154:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009228 <_malloc_r+0xfc>
 8009158:	f000 fc08 	bl	800996c <__malloc_lock>
 800915c:	f8d8 3000 	ldr.w	r3, [r8]
 8009160:	461c      	mov	r4, r3
 8009162:	bb5c      	cbnz	r4, 80091bc <_malloc_r+0x90>
 8009164:	4629      	mov	r1, r5
 8009166:	4638      	mov	r0, r7
 8009168:	f7ff ffc0 	bl	80090ec <sbrk_aligned>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	4604      	mov	r4, r0
 8009170:	d155      	bne.n	800921e <_malloc_r+0xf2>
 8009172:	f8d8 4000 	ldr.w	r4, [r8]
 8009176:	4626      	mov	r6, r4
 8009178:	2e00      	cmp	r6, #0
 800917a:	d145      	bne.n	8009208 <_malloc_r+0xdc>
 800917c:	2c00      	cmp	r4, #0
 800917e:	d048      	beq.n	8009212 <_malloc_r+0xe6>
 8009180:	6823      	ldr	r3, [r4, #0]
 8009182:	4631      	mov	r1, r6
 8009184:	4638      	mov	r0, r7
 8009186:	eb04 0903 	add.w	r9, r4, r3
 800918a:	f001 fc5b 	bl	800aa44 <_sbrk_r>
 800918e:	4581      	cmp	r9, r0
 8009190:	d13f      	bne.n	8009212 <_malloc_r+0xe6>
 8009192:	6821      	ldr	r1, [r4, #0]
 8009194:	1a6d      	subs	r5, r5, r1
 8009196:	4629      	mov	r1, r5
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff ffa7 	bl	80090ec <sbrk_aligned>
 800919e:	3001      	adds	r0, #1
 80091a0:	d037      	beq.n	8009212 <_malloc_r+0xe6>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	442b      	add	r3, r5
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	f8d8 3000 	ldr.w	r3, [r8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d038      	beq.n	8009222 <_malloc_r+0xf6>
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	42a2      	cmp	r2, r4
 80091b4:	d12b      	bne.n	800920e <_malloc_r+0xe2>
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	e00f      	b.n	80091dc <_malloc_r+0xb0>
 80091bc:	6822      	ldr	r2, [r4, #0]
 80091be:	1b52      	subs	r2, r2, r5
 80091c0:	d41f      	bmi.n	8009202 <_malloc_r+0xd6>
 80091c2:	2a0b      	cmp	r2, #11
 80091c4:	d917      	bls.n	80091f6 <_malloc_r+0xca>
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	6025      	str	r5, [r4, #0]
 80091cc:	bf18      	it	ne
 80091ce:	6059      	strne	r1, [r3, #4]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	bf08      	it	eq
 80091d4:	f8c8 1000 	streq.w	r1, [r8]
 80091d8:	5162      	str	r2, [r4, r5]
 80091da:	604b      	str	r3, [r1, #4]
 80091dc:	4638      	mov	r0, r7
 80091de:	f104 060b 	add.w	r6, r4, #11
 80091e2:	f000 fbc9 	bl	8009978 <__malloc_unlock>
 80091e6:	f026 0607 	bic.w	r6, r6, #7
 80091ea:	1d23      	adds	r3, r4, #4
 80091ec:	1af2      	subs	r2, r6, r3
 80091ee:	d0ae      	beq.n	800914e <_malloc_r+0x22>
 80091f0:	1b9b      	subs	r3, r3, r6
 80091f2:	50a3      	str	r3, [r4, r2]
 80091f4:	e7ab      	b.n	800914e <_malloc_r+0x22>
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	6862      	ldr	r2, [r4, #4]
 80091fa:	d1dd      	bne.n	80091b8 <_malloc_r+0x8c>
 80091fc:	f8c8 2000 	str.w	r2, [r8]
 8009200:	e7ec      	b.n	80091dc <_malloc_r+0xb0>
 8009202:	4623      	mov	r3, r4
 8009204:	6864      	ldr	r4, [r4, #4]
 8009206:	e7ac      	b.n	8009162 <_malloc_r+0x36>
 8009208:	4634      	mov	r4, r6
 800920a:	6876      	ldr	r6, [r6, #4]
 800920c:	e7b4      	b.n	8009178 <_malloc_r+0x4c>
 800920e:	4613      	mov	r3, r2
 8009210:	e7cc      	b.n	80091ac <_malloc_r+0x80>
 8009212:	230c      	movs	r3, #12
 8009214:	603b      	str	r3, [r7, #0]
 8009216:	4638      	mov	r0, r7
 8009218:	f000 fbae 	bl	8009978 <__malloc_unlock>
 800921c:	e797      	b.n	800914e <_malloc_r+0x22>
 800921e:	6025      	str	r5, [r4, #0]
 8009220:	e7dc      	b.n	80091dc <_malloc_r+0xb0>
 8009222:	605b      	str	r3, [r3, #4]
 8009224:	deff      	udf	#255	; 0xff
 8009226:	bf00      	nop
 8009228:	20003af4 	.word	0x20003af4

0800922c <_printf_common>:
 800922c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009230:	4616      	mov	r6, r2
 8009232:	4699      	mov	r9, r3
 8009234:	688a      	ldr	r2, [r1, #8]
 8009236:	690b      	ldr	r3, [r1, #16]
 8009238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800923c:	4293      	cmp	r3, r2
 800923e:	bfb8      	it	lt
 8009240:	4613      	movlt	r3, r2
 8009242:	6033      	str	r3, [r6, #0]
 8009244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009248:	4607      	mov	r7, r0
 800924a:	460c      	mov	r4, r1
 800924c:	b10a      	cbz	r2, 8009252 <_printf_common+0x26>
 800924e:	3301      	adds	r3, #1
 8009250:	6033      	str	r3, [r6, #0]
 8009252:	6823      	ldr	r3, [r4, #0]
 8009254:	0699      	lsls	r1, r3, #26
 8009256:	bf42      	ittt	mi
 8009258:	6833      	ldrmi	r3, [r6, #0]
 800925a:	3302      	addmi	r3, #2
 800925c:	6033      	strmi	r3, [r6, #0]
 800925e:	6825      	ldr	r5, [r4, #0]
 8009260:	f015 0506 	ands.w	r5, r5, #6
 8009264:	d106      	bne.n	8009274 <_printf_common+0x48>
 8009266:	f104 0a19 	add.w	sl, r4, #25
 800926a:	68e3      	ldr	r3, [r4, #12]
 800926c:	6832      	ldr	r2, [r6, #0]
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	42ab      	cmp	r3, r5
 8009272:	dc26      	bgt.n	80092c2 <_printf_common+0x96>
 8009274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009278:	1e13      	subs	r3, r2, #0
 800927a:	6822      	ldr	r2, [r4, #0]
 800927c:	bf18      	it	ne
 800927e:	2301      	movne	r3, #1
 8009280:	0692      	lsls	r2, r2, #26
 8009282:	d42b      	bmi.n	80092dc <_printf_common+0xb0>
 8009284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009288:	4649      	mov	r1, r9
 800928a:	4638      	mov	r0, r7
 800928c:	47c0      	blx	r8
 800928e:	3001      	adds	r0, #1
 8009290:	d01e      	beq.n	80092d0 <_printf_common+0xa4>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	6922      	ldr	r2, [r4, #16]
 8009296:	f003 0306 	and.w	r3, r3, #6
 800929a:	2b04      	cmp	r3, #4
 800929c:	bf02      	ittt	eq
 800929e:	68e5      	ldreq	r5, [r4, #12]
 80092a0:	6833      	ldreq	r3, [r6, #0]
 80092a2:	1aed      	subeq	r5, r5, r3
 80092a4:	68a3      	ldr	r3, [r4, #8]
 80092a6:	bf0c      	ite	eq
 80092a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092ac:	2500      	movne	r5, #0
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bfc4      	itt	gt
 80092b2:	1a9b      	subgt	r3, r3, r2
 80092b4:	18ed      	addgt	r5, r5, r3
 80092b6:	2600      	movs	r6, #0
 80092b8:	341a      	adds	r4, #26
 80092ba:	42b5      	cmp	r5, r6
 80092bc:	d11a      	bne.n	80092f4 <_printf_common+0xc8>
 80092be:	2000      	movs	r0, #0
 80092c0:	e008      	b.n	80092d4 <_printf_common+0xa8>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4652      	mov	r2, sl
 80092c6:	4649      	mov	r1, r9
 80092c8:	4638      	mov	r0, r7
 80092ca:	47c0      	blx	r8
 80092cc:	3001      	adds	r0, #1
 80092ce:	d103      	bne.n	80092d8 <_printf_common+0xac>
 80092d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d8:	3501      	adds	r5, #1
 80092da:	e7c6      	b.n	800926a <_printf_common+0x3e>
 80092dc:	18e1      	adds	r1, r4, r3
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	2030      	movs	r0, #48	; 0x30
 80092e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092e6:	4422      	add	r2, r4
 80092e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092f0:	3302      	adds	r3, #2
 80092f2:	e7c7      	b.n	8009284 <_printf_common+0x58>
 80092f4:	2301      	movs	r3, #1
 80092f6:	4622      	mov	r2, r4
 80092f8:	4649      	mov	r1, r9
 80092fa:	4638      	mov	r0, r7
 80092fc:	47c0      	blx	r8
 80092fe:	3001      	adds	r0, #1
 8009300:	d0e6      	beq.n	80092d0 <_printf_common+0xa4>
 8009302:	3601      	adds	r6, #1
 8009304:	e7d9      	b.n	80092ba <_printf_common+0x8e>
	...

08009308 <_printf_i>:
 8009308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	7e0f      	ldrb	r7, [r1, #24]
 800930e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009310:	2f78      	cmp	r7, #120	; 0x78
 8009312:	4691      	mov	r9, r2
 8009314:	4680      	mov	r8, r0
 8009316:	460c      	mov	r4, r1
 8009318:	469a      	mov	sl, r3
 800931a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800931e:	d807      	bhi.n	8009330 <_printf_i+0x28>
 8009320:	2f62      	cmp	r7, #98	; 0x62
 8009322:	d80a      	bhi.n	800933a <_printf_i+0x32>
 8009324:	2f00      	cmp	r7, #0
 8009326:	f000 80d4 	beq.w	80094d2 <_printf_i+0x1ca>
 800932a:	2f58      	cmp	r7, #88	; 0x58
 800932c:	f000 80c0 	beq.w	80094b0 <_printf_i+0x1a8>
 8009330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009338:	e03a      	b.n	80093b0 <_printf_i+0xa8>
 800933a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800933e:	2b15      	cmp	r3, #21
 8009340:	d8f6      	bhi.n	8009330 <_printf_i+0x28>
 8009342:	a101      	add	r1, pc, #4	; (adr r1, 8009348 <_printf_i+0x40>)
 8009344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009348:	080093a1 	.word	0x080093a1
 800934c:	080093b5 	.word	0x080093b5
 8009350:	08009331 	.word	0x08009331
 8009354:	08009331 	.word	0x08009331
 8009358:	08009331 	.word	0x08009331
 800935c:	08009331 	.word	0x08009331
 8009360:	080093b5 	.word	0x080093b5
 8009364:	08009331 	.word	0x08009331
 8009368:	08009331 	.word	0x08009331
 800936c:	08009331 	.word	0x08009331
 8009370:	08009331 	.word	0x08009331
 8009374:	080094b9 	.word	0x080094b9
 8009378:	080093e1 	.word	0x080093e1
 800937c:	08009473 	.word	0x08009473
 8009380:	08009331 	.word	0x08009331
 8009384:	08009331 	.word	0x08009331
 8009388:	080094db 	.word	0x080094db
 800938c:	08009331 	.word	0x08009331
 8009390:	080093e1 	.word	0x080093e1
 8009394:	08009331 	.word	0x08009331
 8009398:	08009331 	.word	0x08009331
 800939c:	0800947b 	.word	0x0800947b
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	1d1a      	adds	r2, r3, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	602a      	str	r2, [r5, #0]
 80093a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093b0:	2301      	movs	r3, #1
 80093b2:	e09f      	b.n	80094f4 <_printf_i+0x1ec>
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	0607      	lsls	r7, r0, #24
 80093ba:	f103 0104 	add.w	r1, r3, #4
 80093be:	6029      	str	r1, [r5, #0]
 80093c0:	d501      	bpl.n	80093c6 <_printf_i+0xbe>
 80093c2:	681e      	ldr	r6, [r3, #0]
 80093c4:	e003      	b.n	80093ce <_printf_i+0xc6>
 80093c6:	0646      	lsls	r6, r0, #25
 80093c8:	d5fb      	bpl.n	80093c2 <_printf_i+0xba>
 80093ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093ce:	2e00      	cmp	r6, #0
 80093d0:	da03      	bge.n	80093da <_printf_i+0xd2>
 80093d2:	232d      	movs	r3, #45	; 0x2d
 80093d4:	4276      	negs	r6, r6
 80093d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093da:	485a      	ldr	r0, [pc, #360]	; (8009544 <_printf_i+0x23c>)
 80093dc:	230a      	movs	r3, #10
 80093de:	e012      	b.n	8009406 <_printf_i+0xfe>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	1d19      	adds	r1, r3, #4
 80093e6:	6029      	str	r1, [r5, #0]
 80093e8:	0605      	lsls	r5, r0, #24
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0xe8>
 80093ec:	681e      	ldr	r6, [r3, #0]
 80093ee:	e002      	b.n	80093f6 <_printf_i+0xee>
 80093f0:	0641      	lsls	r1, r0, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0xe4>
 80093f4:	881e      	ldrh	r6, [r3, #0]
 80093f6:	4853      	ldr	r0, [pc, #332]	; (8009544 <_printf_i+0x23c>)
 80093f8:	2f6f      	cmp	r7, #111	; 0x6f
 80093fa:	bf0c      	ite	eq
 80093fc:	2308      	moveq	r3, #8
 80093fe:	230a      	movne	r3, #10
 8009400:	2100      	movs	r1, #0
 8009402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009406:	6865      	ldr	r5, [r4, #4]
 8009408:	60a5      	str	r5, [r4, #8]
 800940a:	2d00      	cmp	r5, #0
 800940c:	bfa2      	ittt	ge
 800940e:	6821      	ldrge	r1, [r4, #0]
 8009410:	f021 0104 	bicge.w	r1, r1, #4
 8009414:	6021      	strge	r1, [r4, #0]
 8009416:	b90e      	cbnz	r6, 800941c <_printf_i+0x114>
 8009418:	2d00      	cmp	r5, #0
 800941a:	d04b      	beq.n	80094b4 <_printf_i+0x1ac>
 800941c:	4615      	mov	r5, r2
 800941e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009422:	fb03 6711 	mls	r7, r3, r1, r6
 8009426:	5dc7      	ldrb	r7, [r0, r7]
 8009428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800942c:	4637      	mov	r7, r6
 800942e:	42bb      	cmp	r3, r7
 8009430:	460e      	mov	r6, r1
 8009432:	d9f4      	bls.n	800941e <_printf_i+0x116>
 8009434:	2b08      	cmp	r3, #8
 8009436:	d10b      	bne.n	8009450 <_printf_i+0x148>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	07de      	lsls	r6, r3, #31
 800943c:	d508      	bpl.n	8009450 <_printf_i+0x148>
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	4299      	cmp	r1, r3
 8009444:	bfde      	ittt	le
 8009446:	2330      	movle	r3, #48	; 0x30
 8009448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800944c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009450:	1b52      	subs	r2, r2, r5
 8009452:	6122      	str	r2, [r4, #16]
 8009454:	f8cd a000 	str.w	sl, [sp]
 8009458:	464b      	mov	r3, r9
 800945a:	aa03      	add	r2, sp, #12
 800945c:	4621      	mov	r1, r4
 800945e:	4640      	mov	r0, r8
 8009460:	f7ff fee4 	bl	800922c <_printf_common>
 8009464:	3001      	adds	r0, #1
 8009466:	d14a      	bne.n	80094fe <_printf_i+0x1f6>
 8009468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800946c:	b004      	add	sp, #16
 800946e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	f043 0320 	orr.w	r3, r3, #32
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	4833      	ldr	r0, [pc, #204]	; (8009548 <_printf_i+0x240>)
 800947c:	2778      	movs	r7, #120	; 0x78
 800947e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	6829      	ldr	r1, [r5, #0]
 8009486:	061f      	lsls	r7, r3, #24
 8009488:	f851 6b04 	ldr.w	r6, [r1], #4
 800948c:	d402      	bmi.n	8009494 <_printf_i+0x18c>
 800948e:	065f      	lsls	r7, r3, #25
 8009490:	bf48      	it	mi
 8009492:	b2b6      	uxthmi	r6, r6
 8009494:	07df      	lsls	r7, r3, #31
 8009496:	bf48      	it	mi
 8009498:	f043 0320 	orrmi.w	r3, r3, #32
 800949c:	6029      	str	r1, [r5, #0]
 800949e:	bf48      	it	mi
 80094a0:	6023      	strmi	r3, [r4, #0]
 80094a2:	b91e      	cbnz	r6, 80094ac <_printf_i+0x1a4>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	f023 0320 	bic.w	r3, r3, #32
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	2310      	movs	r3, #16
 80094ae:	e7a7      	b.n	8009400 <_printf_i+0xf8>
 80094b0:	4824      	ldr	r0, [pc, #144]	; (8009544 <_printf_i+0x23c>)
 80094b2:	e7e4      	b.n	800947e <_printf_i+0x176>
 80094b4:	4615      	mov	r5, r2
 80094b6:	e7bd      	b.n	8009434 <_printf_i+0x12c>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	6826      	ldr	r6, [r4, #0]
 80094bc:	6961      	ldr	r1, [r4, #20]
 80094be:	1d18      	adds	r0, r3, #4
 80094c0:	6028      	str	r0, [r5, #0]
 80094c2:	0635      	lsls	r5, r6, #24
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	d501      	bpl.n	80094cc <_printf_i+0x1c4>
 80094c8:	6019      	str	r1, [r3, #0]
 80094ca:	e002      	b.n	80094d2 <_printf_i+0x1ca>
 80094cc:	0670      	lsls	r0, r6, #25
 80094ce:	d5fb      	bpl.n	80094c8 <_printf_i+0x1c0>
 80094d0:	8019      	strh	r1, [r3, #0]
 80094d2:	2300      	movs	r3, #0
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	4615      	mov	r5, r2
 80094d8:	e7bc      	b.n	8009454 <_printf_i+0x14c>
 80094da:	682b      	ldr	r3, [r5, #0]
 80094dc:	1d1a      	adds	r2, r3, #4
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	681d      	ldr	r5, [r3, #0]
 80094e2:	6862      	ldr	r2, [r4, #4]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4628      	mov	r0, r5
 80094e8:	f7f6 fe72 	bl	80001d0 <memchr>
 80094ec:	b108      	cbz	r0, 80094f2 <_printf_i+0x1ea>
 80094ee:	1b40      	subs	r0, r0, r5
 80094f0:	6060      	str	r0, [r4, #4]
 80094f2:	6863      	ldr	r3, [r4, #4]
 80094f4:	6123      	str	r3, [r4, #16]
 80094f6:	2300      	movs	r3, #0
 80094f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094fc:	e7aa      	b.n	8009454 <_printf_i+0x14c>
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	462a      	mov	r2, r5
 8009502:	4649      	mov	r1, r9
 8009504:	4640      	mov	r0, r8
 8009506:	47d0      	blx	sl
 8009508:	3001      	adds	r0, #1
 800950a:	d0ad      	beq.n	8009468 <_printf_i+0x160>
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	079b      	lsls	r3, r3, #30
 8009510:	d413      	bmi.n	800953a <_printf_i+0x232>
 8009512:	68e0      	ldr	r0, [r4, #12]
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	4298      	cmp	r0, r3
 8009518:	bfb8      	it	lt
 800951a:	4618      	movlt	r0, r3
 800951c:	e7a6      	b.n	800946c <_printf_i+0x164>
 800951e:	2301      	movs	r3, #1
 8009520:	4632      	mov	r2, r6
 8009522:	4649      	mov	r1, r9
 8009524:	4640      	mov	r0, r8
 8009526:	47d0      	blx	sl
 8009528:	3001      	adds	r0, #1
 800952a:	d09d      	beq.n	8009468 <_printf_i+0x160>
 800952c:	3501      	adds	r5, #1
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	9903      	ldr	r1, [sp, #12]
 8009532:	1a5b      	subs	r3, r3, r1
 8009534:	42ab      	cmp	r3, r5
 8009536:	dcf2      	bgt.n	800951e <_printf_i+0x216>
 8009538:	e7eb      	b.n	8009512 <_printf_i+0x20a>
 800953a:	2500      	movs	r5, #0
 800953c:	f104 0619 	add.w	r6, r4, #25
 8009540:	e7f5      	b.n	800952e <_printf_i+0x226>
 8009542:	bf00      	nop
 8009544:	0800d712 	.word	0x0800d712
 8009548:	0800d723 	.word	0x0800d723

0800954c <_scanf_float>:
 800954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	b087      	sub	sp, #28
 8009552:	4617      	mov	r7, r2
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	688b      	ldr	r3, [r1, #8]
 8009558:	1e5a      	subs	r2, r3, #1
 800955a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800955e:	bf83      	ittte	hi
 8009560:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009564:	195b      	addhi	r3, r3, r5
 8009566:	9302      	strhi	r3, [sp, #8]
 8009568:	2300      	movls	r3, #0
 800956a:	bf86      	itte	hi
 800956c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009570:	608b      	strhi	r3, [r1, #8]
 8009572:	9302      	strls	r3, [sp, #8]
 8009574:	680b      	ldr	r3, [r1, #0]
 8009576:	468b      	mov	fp, r1
 8009578:	2500      	movs	r5, #0
 800957a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800957e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009582:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009586:	4680      	mov	r8, r0
 8009588:	460c      	mov	r4, r1
 800958a:	465e      	mov	r6, fp
 800958c:	46aa      	mov	sl, r5
 800958e:	46a9      	mov	r9, r5
 8009590:	9501      	str	r5, [sp, #4]
 8009592:	68a2      	ldr	r2, [r4, #8]
 8009594:	b152      	cbz	r2, 80095ac <_scanf_float+0x60>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b4e      	cmp	r3, #78	; 0x4e
 800959c:	d864      	bhi.n	8009668 <_scanf_float+0x11c>
 800959e:	2b40      	cmp	r3, #64	; 0x40
 80095a0:	d83c      	bhi.n	800961c <_scanf_float+0xd0>
 80095a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80095a6:	b2c8      	uxtb	r0, r1
 80095a8:	280e      	cmp	r0, #14
 80095aa:	d93a      	bls.n	8009622 <_scanf_float+0xd6>
 80095ac:	f1b9 0f00 	cmp.w	r9, #0
 80095b0:	d003      	beq.n	80095ba <_scanf_float+0x6e>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80095be:	f1ba 0f01 	cmp.w	sl, #1
 80095c2:	f200 8113 	bhi.w	80097ec <_scanf_float+0x2a0>
 80095c6:	455e      	cmp	r6, fp
 80095c8:	f200 8105 	bhi.w	80097d6 <_scanf_float+0x28a>
 80095cc:	2501      	movs	r5, #1
 80095ce:	4628      	mov	r0, r5
 80095d0:	b007      	add	sp, #28
 80095d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80095da:	2a0d      	cmp	r2, #13
 80095dc:	d8e6      	bhi.n	80095ac <_scanf_float+0x60>
 80095de:	a101      	add	r1, pc, #4	; (adr r1, 80095e4 <_scanf_float+0x98>)
 80095e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095e4:	08009723 	.word	0x08009723
 80095e8:	080095ad 	.word	0x080095ad
 80095ec:	080095ad 	.word	0x080095ad
 80095f0:	080095ad 	.word	0x080095ad
 80095f4:	08009783 	.word	0x08009783
 80095f8:	0800975b 	.word	0x0800975b
 80095fc:	080095ad 	.word	0x080095ad
 8009600:	080095ad 	.word	0x080095ad
 8009604:	08009731 	.word	0x08009731
 8009608:	080095ad 	.word	0x080095ad
 800960c:	080095ad 	.word	0x080095ad
 8009610:	080095ad 	.word	0x080095ad
 8009614:	080095ad 	.word	0x080095ad
 8009618:	080096e9 	.word	0x080096e9
 800961c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009620:	e7db      	b.n	80095da <_scanf_float+0x8e>
 8009622:	290e      	cmp	r1, #14
 8009624:	d8c2      	bhi.n	80095ac <_scanf_float+0x60>
 8009626:	a001      	add	r0, pc, #4	; (adr r0, 800962c <_scanf_float+0xe0>)
 8009628:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800962c:	080096db 	.word	0x080096db
 8009630:	080095ad 	.word	0x080095ad
 8009634:	080096db 	.word	0x080096db
 8009638:	0800976f 	.word	0x0800976f
 800963c:	080095ad 	.word	0x080095ad
 8009640:	08009689 	.word	0x08009689
 8009644:	080096c5 	.word	0x080096c5
 8009648:	080096c5 	.word	0x080096c5
 800964c:	080096c5 	.word	0x080096c5
 8009650:	080096c5 	.word	0x080096c5
 8009654:	080096c5 	.word	0x080096c5
 8009658:	080096c5 	.word	0x080096c5
 800965c:	080096c5 	.word	0x080096c5
 8009660:	080096c5 	.word	0x080096c5
 8009664:	080096c5 	.word	0x080096c5
 8009668:	2b6e      	cmp	r3, #110	; 0x6e
 800966a:	d809      	bhi.n	8009680 <_scanf_float+0x134>
 800966c:	2b60      	cmp	r3, #96	; 0x60
 800966e:	d8b2      	bhi.n	80095d6 <_scanf_float+0x8a>
 8009670:	2b54      	cmp	r3, #84	; 0x54
 8009672:	d077      	beq.n	8009764 <_scanf_float+0x218>
 8009674:	2b59      	cmp	r3, #89	; 0x59
 8009676:	d199      	bne.n	80095ac <_scanf_float+0x60>
 8009678:	2d07      	cmp	r5, #7
 800967a:	d197      	bne.n	80095ac <_scanf_float+0x60>
 800967c:	2508      	movs	r5, #8
 800967e:	e029      	b.n	80096d4 <_scanf_float+0x188>
 8009680:	2b74      	cmp	r3, #116	; 0x74
 8009682:	d06f      	beq.n	8009764 <_scanf_float+0x218>
 8009684:	2b79      	cmp	r3, #121	; 0x79
 8009686:	e7f6      	b.n	8009676 <_scanf_float+0x12a>
 8009688:	6821      	ldr	r1, [r4, #0]
 800968a:	05c8      	lsls	r0, r1, #23
 800968c:	d51a      	bpl.n	80096c4 <_scanf_float+0x178>
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	f109 0901 	add.w	r9, r9, #1
 800969a:	b11b      	cbz	r3, 80096a4 <_scanf_float+0x158>
 800969c:	3b01      	subs	r3, #1
 800969e:	3201      	adds	r2, #1
 80096a0:	9302      	str	r3, [sp, #8]
 80096a2:	60a2      	str	r2, [r4, #8]
 80096a4:	68a3      	ldr	r3, [r4, #8]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	60a3      	str	r3, [r4, #8]
 80096aa:	6923      	ldr	r3, [r4, #16]
 80096ac:	3301      	adds	r3, #1
 80096ae:	6123      	str	r3, [r4, #16]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	607b      	str	r3, [r7, #4]
 80096b8:	f340 8084 	ble.w	80097c4 <_scanf_float+0x278>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	3301      	adds	r3, #1
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	e766      	b.n	8009592 <_scanf_float+0x46>
 80096c4:	eb1a 0f05 	cmn.w	sl, r5
 80096c8:	f47f af70 	bne.w	80095ac <_scanf_float+0x60>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	f806 3b01 	strb.w	r3, [r6], #1
 80096d8:	e7e4      	b.n	80096a4 <_scanf_float+0x158>
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	0610      	lsls	r0, r2, #24
 80096de:	f57f af65 	bpl.w	80095ac <_scanf_float+0x60>
 80096e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096e6:	e7f4      	b.n	80096d2 <_scanf_float+0x186>
 80096e8:	f1ba 0f00 	cmp.w	sl, #0
 80096ec:	d10e      	bne.n	800970c <_scanf_float+0x1c0>
 80096ee:	f1b9 0f00 	cmp.w	r9, #0
 80096f2:	d10e      	bne.n	8009712 <_scanf_float+0x1c6>
 80096f4:	6822      	ldr	r2, [r4, #0]
 80096f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80096fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80096fe:	d108      	bne.n	8009712 <_scanf_float+0x1c6>
 8009700:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009704:	6022      	str	r2, [r4, #0]
 8009706:	f04f 0a01 	mov.w	sl, #1
 800970a:	e7e3      	b.n	80096d4 <_scanf_float+0x188>
 800970c:	f1ba 0f02 	cmp.w	sl, #2
 8009710:	d055      	beq.n	80097be <_scanf_float+0x272>
 8009712:	2d01      	cmp	r5, #1
 8009714:	d002      	beq.n	800971c <_scanf_float+0x1d0>
 8009716:	2d04      	cmp	r5, #4
 8009718:	f47f af48 	bne.w	80095ac <_scanf_float+0x60>
 800971c:	3501      	adds	r5, #1
 800971e:	b2ed      	uxtb	r5, r5
 8009720:	e7d8      	b.n	80096d4 <_scanf_float+0x188>
 8009722:	f1ba 0f01 	cmp.w	sl, #1
 8009726:	f47f af41 	bne.w	80095ac <_scanf_float+0x60>
 800972a:	f04f 0a02 	mov.w	sl, #2
 800972e:	e7d1      	b.n	80096d4 <_scanf_float+0x188>
 8009730:	b97d      	cbnz	r5, 8009752 <_scanf_float+0x206>
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	f47f af3c 	bne.w	80095b2 <_scanf_float+0x66>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009740:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009744:	f47f af39 	bne.w	80095ba <_scanf_float+0x6e>
 8009748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800974c:	6022      	str	r2, [r4, #0]
 800974e:	2501      	movs	r5, #1
 8009750:	e7c0      	b.n	80096d4 <_scanf_float+0x188>
 8009752:	2d03      	cmp	r5, #3
 8009754:	d0e2      	beq.n	800971c <_scanf_float+0x1d0>
 8009756:	2d05      	cmp	r5, #5
 8009758:	e7de      	b.n	8009718 <_scanf_float+0x1cc>
 800975a:	2d02      	cmp	r5, #2
 800975c:	f47f af26 	bne.w	80095ac <_scanf_float+0x60>
 8009760:	2503      	movs	r5, #3
 8009762:	e7b7      	b.n	80096d4 <_scanf_float+0x188>
 8009764:	2d06      	cmp	r5, #6
 8009766:	f47f af21 	bne.w	80095ac <_scanf_float+0x60>
 800976a:	2507      	movs	r5, #7
 800976c:	e7b2      	b.n	80096d4 <_scanf_float+0x188>
 800976e:	6822      	ldr	r2, [r4, #0]
 8009770:	0591      	lsls	r1, r2, #22
 8009772:	f57f af1b 	bpl.w	80095ac <_scanf_float+0x60>
 8009776:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009780:	e7a8      	b.n	80096d4 <_scanf_float+0x188>
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009788:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800978c:	d006      	beq.n	800979c <_scanf_float+0x250>
 800978e:	0550      	lsls	r0, r2, #21
 8009790:	f57f af0c 	bpl.w	80095ac <_scanf_float+0x60>
 8009794:	f1b9 0f00 	cmp.w	r9, #0
 8009798:	f43f af0f 	beq.w	80095ba <_scanf_float+0x6e>
 800979c:	0591      	lsls	r1, r2, #22
 800979e:	bf58      	it	pl
 80097a0:	9901      	ldrpl	r1, [sp, #4]
 80097a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80097a6:	bf58      	it	pl
 80097a8:	eba9 0101 	subpl.w	r1, r9, r1
 80097ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80097b0:	bf58      	it	pl
 80097b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80097b6:	6022      	str	r2, [r4, #0]
 80097b8:	f04f 0900 	mov.w	r9, #0
 80097bc:	e78a      	b.n	80096d4 <_scanf_float+0x188>
 80097be:	f04f 0a03 	mov.w	sl, #3
 80097c2:	e787      	b.n	80096d4 <_scanf_float+0x188>
 80097c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80097c8:	4639      	mov	r1, r7
 80097ca:	4640      	mov	r0, r8
 80097cc:	4798      	blx	r3
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f43f aedf 	beq.w	8009592 <_scanf_float+0x46>
 80097d4:	e6ea      	b.n	80095ac <_scanf_float+0x60>
 80097d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80097da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097de:	463a      	mov	r2, r7
 80097e0:	4640      	mov	r0, r8
 80097e2:	4798      	blx	r3
 80097e4:	6923      	ldr	r3, [r4, #16]
 80097e6:	3b01      	subs	r3, #1
 80097e8:	6123      	str	r3, [r4, #16]
 80097ea:	e6ec      	b.n	80095c6 <_scanf_float+0x7a>
 80097ec:	1e6b      	subs	r3, r5, #1
 80097ee:	2b06      	cmp	r3, #6
 80097f0:	d825      	bhi.n	800983e <_scanf_float+0x2f2>
 80097f2:	2d02      	cmp	r5, #2
 80097f4:	d836      	bhi.n	8009864 <_scanf_float+0x318>
 80097f6:	455e      	cmp	r6, fp
 80097f8:	f67f aee8 	bls.w	80095cc <_scanf_float+0x80>
 80097fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009800:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009804:	463a      	mov	r2, r7
 8009806:	4640      	mov	r0, r8
 8009808:	4798      	blx	r3
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	3b01      	subs	r3, #1
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	e7f1      	b.n	80097f6 <_scanf_float+0x2aa>
 8009812:	9802      	ldr	r0, [sp, #8]
 8009814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009818:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800981c:	9002      	str	r0, [sp, #8]
 800981e:	463a      	mov	r2, r7
 8009820:	4640      	mov	r0, r8
 8009822:	4798      	blx	r3
 8009824:	6923      	ldr	r3, [r4, #16]
 8009826:	3b01      	subs	r3, #1
 8009828:	6123      	str	r3, [r4, #16]
 800982a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800982e:	fa5f fa8a 	uxtb.w	sl, sl
 8009832:	f1ba 0f02 	cmp.w	sl, #2
 8009836:	d1ec      	bne.n	8009812 <_scanf_float+0x2c6>
 8009838:	3d03      	subs	r5, #3
 800983a:	b2ed      	uxtb	r5, r5
 800983c:	1b76      	subs	r6, r6, r5
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	05da      	lsls	r2, r3, #23
 8009842:	d52f      	bpl.n	80098a4 <_scanf_float+0x358>
 8009844:	055b      	lsls	r3, r3, #21
 8009846:	d510      	bpl.n	800986a <_scanf_float+0x31e>
 8009848:	455e      	cmp	r6, fp
 800984a:	f67f aebf 	bls.w	80095cc <_scanf_float+0x80>
 800984e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009856:	463a      	mov	r2, r7
 8009858:	4640      	mov	r0, r8
 800985a:	4798      	blx	r3
 800985c:	6923      	ldr	r3, [r4, #16]
 800985e:	3b01      	subs	r3, #1
 8009860:	6123      	str	r3, [r4, #16]
 8009862:	e7f1      	b.n	8009848 <_scanf_float+0x2fc>
 8009864:	46aa      	mov	sl, r5
 8009866:	9602      	str	r6, [sp, #8]
 8009868:	e7df      	b.n	800982a <_scanf_float+0x2de>
 800986a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	2965      	cmp	r1, #101	; 0x65
 8009872:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009876:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	d00c      	beq.n	8009898 <_scanf_float+0x34c>
 800987e:	2945      	cmp	r1, #69	; 0x45
 8009880:	d00a      	beq.n	8009898 <_scanf_float+0x34c>
 8009882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009886:	463a      	mov	r2, r7
 8009888:	4640      	mov	r0, r8
 800988a:	4798      	blx	r3
 800988c:	6923      	ldr	r3, [r4, #16]
 800988e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009892:	3b01      	subs	r3, #1
 8009894:	1eb5      	subs	r5, r6, #2
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800989c:	463a      	mov	r2, r7
 800989e:	4640      	mov	r0, r8
 80098a0:	4798      	blx	r3
 80098a2:	462e      	mov	r6, r5
 80098a4:	6825      	ldr	r5, [r4, #0]
 80098a6:	f015 0510 	ands.w	r5, r5, #16
 80098aa:	d158      	bne.n	800995e <_scanf_float+0x412>
 80098ac:	7035      	strb	r5, [r6, #0]
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b8:	d11c      	bne.n	80098f4 <_scanf_float+0x3a8>
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	454b      	cmp	r3, r9
 80098be:	eba3 0209 	sub.w	r2, r3, r9
 80098c2:	d124      	bne.n	800990e <_scanf_float+0x3c2>
 80098c4:	2200      	movs	r2, #0
 80098c6:	4659      	mov	r1, fp
 80098c8:	4640      	mov	r0, r8
 80098ca:	f000 ff2d 	bl	800a728 <_strtod_r>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	6821      	ldr	r1, [r4, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f011 0f02 	tst.w	r1, #2
 80098d8:	ec57 6b10 	vmov	r6, r7, d0
 80098dc:	f103 0204 	add.w	r2, r3, #4
 80098e0:	d020      	beq.n	8009924 <_scanf_float+0x3d8>
 80098e2:	9903      	ldr	r1, [sp, #12]
 80098e4:	600a      	str	r2, [r1, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	e9c3 6700 	strd	r6, r7, [r3]
 80098ec:	68e3      	ldr	r3, [r4, #12]
 80098ee:	3301      	adds	r3, #1
 80098f0:	60e3      	str	r3, [r4, #12]
 80098f2:	e66c      	b.n	80095ce <_scanf_float+0x82>
 80098f4:	9b04      	ldr	r3, [sp, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d0e4      	beq.n	80098c4 <_scanf_float+0x378>
 80098fa:	9905      	ldr	r1, [sp, #20]
 80098fc:	230a      	movs	r3, #10
 80098fe:	462a      	mov	r2, r5
 8009900:	3101      	adds	r1, #1
 8009902:	4640      	mov	r0, r8
 8009904:	f000 ffa4 	bl	800a850 <_strtol_r>
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	9e05      	ldr	r6, [sp, #20]
 800990c:	1ac2      	subs	r2, r0, r3
 800990e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009912:	429e      	cmp	r6, r3
 8009914:	bf28      	it	cs
 8009916:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800991a:	4912      	ldr	r1, [pc, #72]	; (8009964 <_scanf_float+0x418>)
 800991c:	4630      	mov	r0, r6
 800991e:	f000 f831 	bl	8009984 <siprintf>
 8009922:	e7cf      	b.n	80098c4 <_scanf_float+0x378>
 8009924:	f011 0f04 	tst.w	r1, #4
 8009928:	9903      	ldr	r1, [sp, #12]
 800992a:	600a      	str	r2, [r1, #0]
 800992c:	d1db      	bne.n	80098e6 <_scanf_float+0x39a>
 800992e:	f8d3 8000 	ldr.w	r8, [r3]
 8009932:	ee10 2a10 	vmov	r2, s0
 8009936:	ee10 0a10 	vmov	r0, s0
 800993a:	463b      	mov	r3, r7
 800993c:	4639      	mov	r1, r7
 800993e:	f7f7 f8f5 	bl	8000b2c <__aeabi_dcmpun>
 8009942:	b128      	cbz	r0, 8009950 <_scanf_float+0x404>
 8009944:	4808      	ldr	r0, [pc, #32]	; (8009968 <_scanf_float+0x41c>)
 8009946:	f001 f8d3 	bl	800aaf0 <nanf>
 800994a:	ed88 0a00 	vstr	s0, [r8]
 800994e:	e7cd      	b.n	80098ec <_scanf_float+0x3a0>
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f7 f948 	bl	8000be8 <__aeabi_d2f>
 8009958:	f8c8 0000 	str.w	r0, [r8]
 800995c:	e7c6      	b.n	80098ec <_scanf_float+0x3a0>
 800995e:	2500      	movs	r5, #0
 8009960:	e635      	b.n	80095ce <_scanf_float+0x82>
 8009962:	bf00      	nop
 8009964:	0800d734 	.word	0x0800d734
 8009968:	0800d945 	.word	0x0800d945

0800996c <__malloc_lock>:
 800996c:	4801      	ldr	r0, [pc, #4]	; (8009974 <__malloc_lock+0x8>)
 800996e:	f001 b8a4 	b.w	800aaba <__retarget_lock_acquire_recursive>
 8009972:	bf00      	nop
 8009974:	20003c3c 	.word	0x20003c3c

08009978 <__malloc_unlock>:
 8009978:	4801      	ldr	r0, [pc, #4]	; (8009980 <__malloc_unlock+0x8>)
 800997a:	f001 b89f 	b.w	800aabc <__retarget_lock_release_recursive>
 800997e:	bf00      	nop
 8009980:	20003c3c 	.word	0x20003c3c

08009984 <siprintf>:
 8009984:	b40e      	push	{r1, r2, r3}
 8009986:	b500      	push	{lr}
 8009988:	b09c      	sub	sp, #112	; 0x70
 800998a:	ab1d      	add	r3, sp, #116	; 0x74
 800998c:	9002      	str	r0, [sp, #8]
 800998e:	9006      	str	r0, [sp, #24]
 8009990:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009994:	4809      	ldr	r0, [pc, #36]	; (80099bc <siprintf+0x38>)
 8009996:	9107      	str	r1, [sp, #28]
 8009998:	9104      	str	r1, [sp, #16]
 800999a:	4909      	ldr	r1, [pc, #36]	; (80099c0 <siprintf+0x3c>)
 800999c:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a0:	9105      	str	r1, [sp, #20]
 80099a2:	6800      	ldr	r0, [r0, #0]
 80099a4:	9301      	str	r3, [sp, #4]
 80099a6:	a902      	add	r1, sp, #8
 80099a8:	f002 fb3e 	bl	800c028 <_svfiprintf_r>
 80099ac:	9b02      	ldr	r3, [sp, #8]
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	b01c      	add	sp, #112	; 0x70
 80099b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b8:	b003      	add	sp, #12
 80099ba:	4770      	bx	lr
 80099bc:	200001d4 	.word	0x200001d4
 80099c0:	ffff0208 	.word	0xffff0208

080099c4 <std>:
 80099c4:	2300      	movs	r3, #0
 80099c6:	b510      	push	{r4, lr}
 80099c8:	4604      	mov	r4, r0
 80099ca:	e9c0 3300 	strd	r3, r3, [r0]
 80099ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099d2:	6083      	str	r3, [r0, #8]
 80099d4:	8181      	strh	r1, [r0, #12]
 80099d6:	6643      	str	r3, [r0, #100]	; 0x64
 80099d8:	81c2      	strh	r2, [r0, #14]
 80099da:	6183      	str	r3, [r0, #24]
 80099dc:	4619      	mov	r1, r3
 80099de:	2208      	movs	r2, #8
 80099e0:	305c      	adds	r0, #92	; 0x5c
 80099e2:	f000 ffcd 	bl	800a980 <memset>
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <std+0x58>)
 80099e8:	6263      	str	r3, [r4, #36]	; 0x24
 80099ea:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <std+0x5c>)
 80099ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80099ee:	4b0d      	ldr	r3, [pc, #52]	; (8009a24 <std+0x60>)
 80099f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099f2:	4b0d      	ldr	r3, [pc, #52]	; (8009a28 <std+0x64>)
 80099f4:	6323      	str	r3, [r4, #48]	; 0x30
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <std+0x68>)
 80099f8:	6224      	str	r4, [r4, #32]
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d006      	beq.n	8009a0c <std+0x48>
 80099fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a02:	4294      	cmp	r4, r2
 8009a04:	d002      	beq.n	8009a0c <std+0x48>
 8009a06:	33d0      	adds	r3, #208	; 0xd0
 8009a08:	429c      	cmp	r4, r3
 8009a0a:	d105      	bne.n	8009a18 <std+0x54>
 8009a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f001 b850 	b.w	800aab8 <__retarget_lock_init_recursive>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	bf00      	nop
 8009a1c:	0800ccff 	.word	0x0800ccff
 8009a20:	0800cd21 	.word	0x0800cd21
 8009a24:	0800cd59 	.word	0x0800cd59
 8009a28:	0800cd7d 	.word	0x0800cd7d
 8009a2c:	20003afc 	.word	0x20003afc

08009a30 <stdio_exit_handler>:
 8009a30:	4a02      	ldr	r2, [pc, #8]	; (8009a3c <stdio_exit_handler+0xc>)
 8009a32:	4903      	ldr	r1, [pc, #12]	; (8009a40 <stdio_exit_handler+0x10>)
 8009a34:	4803      	ldr	r0, [pc, #12]	; (8009a44 <stdio_exit_handler+0x14>)
 8009a36:	f000 bf17 	b.w	800a868 <_fwalk_sglue>
 8009a3a:	bf00      	nop
 8009a3c:	20000010 	.word	0x20000010
 8009a40:	0800c355 	.word	0x0800c355
 8009a44:	20000188 	.word	0x20000188

08009a48 <cleanup_stdio>:
 8009a48:	6841      	ldr	r1, [r0, #4]
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <cleanup_stdio+0x34>)
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	d001      	beq.n	8009a58 <cleanup_stdio+0x10>
 8009a54:	f002 fc7e 	bl	800c354 <_fflush_r>
 8009a58:	68a1      	ldr	r1, [r4, #8]
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <cleanup_stdio+0x38>)
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	d002      	beq.n	8009a66 <cleanup_stdio+0x1e>
 8009a60:	4620      	mov	r0, r4
 8009a62:	f002 fc77 	bl	800c354 <_fflush_r>
 8009a66:	68e1      	ldr	r1, [r4, #12]
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <cleanup_stdio+0x3c>)
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	d004      	beq.n	8009a78 <cleanup_stdio+0x30>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f002 bc6e 	b.w	800c354 <_fflush_r>
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20003afc 	.word	0x20003afc
 8009a80:	20003b64 	.word	0x20003b64
 8009a84:	20003bcc 	.word	0x20003bcc

08009a88 <global_stdio_init.part.0>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <global_stdio_init.part.0+0x30>)
 8009a8c:	4c0b      	ldr	r4, [pc, #44]	; (8009abc <global_stdio_init.part.0+0x34>)
 8009a8e:	4a0c      	ldr	r2, [pc, #48]	; (8009ac0 <global_stdio_init.part.0+0x38>)
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	4620      	mov	r0, r4
 8009a94:	2200      	movs	r2, #0
 8009a96:	2104      	movs	r1, #4
 8009a98:	f7ff ff94 	bl	80099c4 <std>
 8009a9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	2109      	movs	r1, #9
 8009aa4:	f7ff ff8e 	bl	80099c4 <std>
 8009aa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009aac:	2202      	movs	r2, #2
 8009aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab2:	2112      	movs	r1, #18
 8009ab4:	f7ff bf86 	b.w	80099c4 <std>
 8009ab8:	20003c34 	.word	0x20003c34
 8009abc:	20003afc 	.word	0x20003afc
 8009ac0:	08009a31 	.word	0x08009a31

08009ac4 <__sfp_lock_acquire>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__sfp_lock_acquire+0x8>)
 8009ac6:	f000 bff8 	b.w	800aaba <__retarget_lock_acquire_recursive>
 8009aca:	bf00      	nop
 8009acc:	20003c3d 	.word	0x20003c3d

08009ad0 <__sfp_lock_release>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sfp_lock_release+0x8>)
 8009ad2:	f000 bff3 	b.w	800aabc <__retarget_lock_release_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20003c3d 	.word	0x20003c3d

08009adc <__sinit>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	4604      	mov	r4, r0
 8009ae0:	f7ff fff0 	bl	8009ac4 <__sfp_lock_acquire>
 8009ae4:	6a23      	ldr	r3, [r4, #32]
 8009ae6:	b11b      	cbz	r3, 8009af0 <__sinit+0x14>
 8009ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aec:	f7ff bff0 	b.w	8009ad0 <__sfp_lock_release>
 8009af0:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <__sinit+0x28>)
 8009af2:	6223      	str	r3, [r4, #32]
 8009af4:	4b04      	ldr	r3, [pc, #16]	; (8009b08 <__sinit+0x2c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1f5      	bne.n	8009ae8 <__sinit+0xc>
 8009afc:	f7ff ffc4 	bl	8009a88 <global_stdio_init.part.0>
 8009b00:	e7f2      	b.n	8009ae8 <__sinit+0xc>
 8009b02:	bf00      	nop
 8009b04:	08009a49 	.word	0x08009a49
 8009b08:	20003c34 	.word	0x20003c34

08009b0c <sulp>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4604      	mov	r4, r0
 8009b10:	460d      	mov	r5, r1
 8009b12:	ec45 4b10 	vmov	d0, r4, r5
 8009b16:	4616      	mov	r6, r2
 8009b18:	f002 ffb0 	bl	800ca7c <__ulp>
 8009b1c:	ec51 0b10 	vmov	r0, r1, d0
 8009b20:	b17e      	cbz	r6, 8009b42 <sulp+0x36>
 8009b22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dd09      	ble.n	8009b42 <sulp+0x36>
 8009b2e:	051b      	lsls	r3, r3, #20
 8009b30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009b34:	2400      	movs	r4, #0
 8009b36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	bd70      	pop	{r4, r5, r6, pc}
 8009b44:	0000      	movs	r0, r0
	...

08009b48 <_strtod_l>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	ed2d 8b02 	vpush	{d8}
 8009b50:	b09b      	sub	sp, #108	; 0x6c
 8009b52:	4604      	mov	r4, r0
 8009b54:	9213      	str	r2, [sp, #76]	; 0x4c
 8009b56:	2200      	movs	r2, #0
 8009b58:	9216      	str	r2, [sp, #88]	; 0x58
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	f04f 0800 	mov.w	r8, #0
 8009b60:	f04f 0900 	mov.w	r9, #0
 8009b64:	460a      	mov	r2, r1
 8009b66:	9215      	str	r2, [sp, #84]	; 0x54
 8009b68:	7811      	ldrb	r1, [r2, #0]
 8009b6a:	292b      	cmp	r1, #43	; 0x2b
 8009b6c:	d04c      	beq.n	8009c08 <_strtod_l+0xc0>
 8009b6e:	d83a      	bhi.n	8009be6 <_strtod_l+0x9e>
 8009b70:	290d      	cmp	r1, #13
 8009b72:	d834      	bhi.n	8009bde <_strtod_l+0x96>
 8009b74:	2908      	cmp	r1, #8
 8009b76:	d834      	bhi.n	8009be2 <_strtod_l+0x9a>
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d03d      	beq.n	8009bf8 <_strtod_l+0xb0>
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	920a      	str	r2, [sp, #40]	; 0x28
 8009b80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009b82:	7832      	ldrb	r2, [r6, #0]
 8009b84:	2a30      	cmp	r2, #48	; 0x30
 8009b86:	f040 80b4 	bne.w	8009cf2 <_strtod_l+0x1aa>
 8009b8a:	7872      	ldrb	r2, [r6, #1]
 8009b8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b90:	2a58      	cmp	r2, #88	; 0x58
 8009b92:	d170      	bne.n	8009c76 <_strtod_l+0x12e>
 8009b94:	9302      	str	r3, [sp, #8]
 8009b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	ab16      	add	r3, sp, #88	; 0x58
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4a8e      	ldr	r2, [pc, #568]	; (8009dd8 <_strtod_l+0x290>)
 8009ba0:	ab17      	add	r3, sp, #92	; 0x5c
 8009ba2:	a915      	add	r1, sp, #84	; 0x54
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f001 fef5 	bl	800b994 <__gethex>
 8009baa:	f010 070f 	ands.w	r7, r0, #15
 8009bae:	4605      	mov	r5, r0
 8009bb0:	d005      	beq.n	8009bbe <_strtod_l+0x76>
 8009bb2:	2f06      	cmp	r7, #6
 8009bb4:	d12a      	bne.n	8009c0c <_strtod_l+0xc4>
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9615      	str	r6, [sp, #84]	; 0x54
 8009bbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009bbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 857f 	bne.w	800a6c4 <_strtod_l+0xb7c>
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	b1db      	cbz	r3, 8009c02 <_strtod_l+0xba>
 8009bca:	4642      	mov	r2, r8
 8009bcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009bd0:	ec43 2b10 	vmov	d0, r2, r3
 8009bd4:	b01b      	add	sp, #108	; 0x6c
 8009bd6:	ecbd 8b02 	vpop	{d8}
 8009bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bde:	2920      	cmp	r1, #32
 8009be0:	d1cc      	bne.n	8009b7c <_strtod_l+0x34>
 8009be2:	3201      	adds	r2, #1
 8009be4:	e7bf      	b.n	8009b66 <_strtod_l+0x1e>
 8009be6:	292d      	cmp	r1, #45	; 0x2d
 8009be8:	d1c8      	bne.n	8009b7c <_strtod_l+0x34>
 8009bea:	2101      	movs	r1, #1
 8009bec:	910a      	str	r1, [sp, #40]	; 0x28
 8009bee:	1c51      	adds	r1, r2, #1
 8009bf0:	9115      	str	r1, [sp, #84]	; 0x54
 8009bf2:	7852      	ldrb	r2, [r2, #1]
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	d1c3      	bne.n	8009b80 <_strtod_l+0x38>
 8009bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bfa:	9515      	str	r5, [sp, #84]	; 0x54
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 855f 	bne.w	800a6c0 <_strtod_l+0xb78>
 8009c02:	4642      	mov	r2, r8
 8009c04:	464b      	mov	r3, r9
 8009c06:	e7e3      	b.n	8009bd0 <_strtod_l+0x88>
 8009c08:	2100      	movs	r1, #0
 8009c0a:	e7ef      	b.n	8009bec <_strtod_l+0xa4>
 8009c0c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009c0e:	b13a      	cbz	r2, 8009c20 <_strtod_l+0xd8>
 8009c10:	2135      	movs	r1, #53	; 0x35
 8009c12:	a818      	add	r0, sp, #96	; 0x60
 8009c14:	f003 f82f 	bl	800cc76 <__copybits>
 8009c18:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f002 fc02 	bl	800c424 <_Bfree>
 8009c20:	3f01      	subs	r7, #1
 8009c22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009c24:	2f04      	cmp	r7, #4
 8009c26:	d806      	bhi.n	8009c36 <_strtod_l+0xee>
 8009c28:	e8df f007 	tbb	[pc, r7]
 8009c2c:	201d0314 	.word	0x201d0314
 8009c30:	14          	.byte	0x14
 8009c31:	00          	.byte	0x00
 8009c32:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009c36:	05e9      	lsls	r1, r5, #23
 8009c38:	bf48      	it	mi
 8009c3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c42:	0d1b      	lsrs	r3, r3, #20
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1b9      	bne.n	8009bbe <_strtod_l+0x76>
 8009c4a:	f000 ff0b 	bl	800aa64 <__errno>
 8009c4e:	2322      	movs	r3, #34	; 0x22
 8009c50:	6003      	str	r3, [r0, #0]
 8009c52:	e7b4      	b.n	8009bbe <_strtod_l+0x76>
 8009c54:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009c58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009c60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009c64:	e7e7      	b.n	8009c36 <_strtod_l+0xee>
 8009c66:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009de0 <_strtod_l+0x298>
 8009c6a:	e7e4      	b.n	8009c36 <_strtod_l+0xee>
 8009c6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009c70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009c74:	e7df      	b.n	8009c36 <_strtod_l+0xee>
 8009c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	9215      	str	r2, [sp, #84]	; 0x54
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b30      	cmp	r3, #48	; 0x30
 8009c80:	d0f9      	beq.n	8009c76 <_strtod_l+0x12e>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d09b      	beq.n	8009bbe <_strtod_l+0x76>
 8009c86:	2301      	movs	r3, #1
 8009c88:	f04f 0a00 	mov.w	sl, #0
 8009c8c:	9304      	str	r3, [sp, #16]
 8009c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009c96:	46d3      	mov	fp, sl
 8009c98:	220a      	movs	r2, #10
 8009c9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009c9c:	7806      	ldrb	r6, [r0, #0]
 8009c9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009ca2:	b2d9      	uxtb	r1, r3
 8009ca4:	2909      	cmp	r1, #9
 8009ca6:	d926      	bls.n	8009cf6 <_strtod_l+0x1ae>
 8009ca8:	494c      	ldr	r1, [pc, #304]	; (8009ddc <_strtod_l+0x294>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	f000 fdfa 	bl	800a8a4 <strncmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d030      	beq.n	8009d16 <_strtod_l+0x1ce>
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	9005      	str	r0, [sp, #20]
 8009cba:	465e      	mov	r6, fp
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2a65      	cmp	r2, #101	; 0x65
 8009cc0:	d001      	beq.n	8009cc6 <_strtod_l+0x17e>
 8009cc2:	2a45      	cmp	r2, #69	; 0x45
 8009cc4:	d113      	bne.n	8009cee <_strtod_l+0x1a6>
 8009cc6:	b91e      	cbnz	r6, 8009cd0 <_strtod_l+0x188>
 8009cc8:	9a04      	ldr	r2, [sp, #16]
 8009cca:	4302      	orrs	r2, r0
 8009ccc:	d094      	beq.n	8009bf8 <_strtod_l+0xb0>
 8009cce:	2600      	movs	r6, #0
 8009cd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009cd2:	1c6a      	adds	r2, r5, #1
 8009cd4:	9215      	str	r2, [sp, #84]	; 0x54
 8009cd6:	786a      	ldrb	r2, [r5, #1]
 8009cd8:	2a2b      	cmp	r2, #43	; 0x2b
 8009cda:	d074      	beq.n	8009dc6 <_strtod_l+0x27e>
 8009cdc:	2a2d      	cmp	r2, #45	; 0x2d
 8009cde:	d078      	beq.n	8009dd2 <_strtod_l+0x28a>
 8009ce0:	f04f 0c00 	mov.w	ip, #0
 8009ce4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ce8:	2909      	cmp	r1, #9
 8009cea:	d97f      	bls.n	8009dec <_strtod_l+0x2a4>
 8009cec:	9515      	str	r5, [sp, #84]	; 0x54
 8009cee:	2700      	movs	r7, #0
 8009cf0:	e09e      	b.n	8009e30 <_strtod_l+0x2e8>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e7c8      	b.n	8009c88 <_strtod_l+0x140>
 8009cf6:	f1bb 0f08 	cmp.w	fp, #8
 8009cfa:	bfd8      	it	le
 8009cfc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009cfe:	f100 0001 	add.w	r0, r0, #1
 8009d02:	bfda      	itte	le
 8009d04:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d08:	9309      	strle	r3, [sp, #36]	; 0x24
 8009d0a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009d0e:	f10b 0b01 	add.w	fp, fp, #1
 8009d12:	9015      	str	r0, [sp, #84]	; 0x54
 8009d14:	e7c1      	b.n	8009c9a <_strtod_l+0x152>
 8009d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	9215      	str	r2, [sp, #84]	; 0x54
 8009d1c:	785a      	ldrb	r2, [r3, #1]
 8009d1e:	f1bb 0f00 	cmp.w	fp, #0
 8009d22:	d037      	beq.n	8009d94 <_strtod_l+0x24c>
 8009d24:	9005      	str	r0, [sp, #20]
 8009d26:	465e      	mov	r6, fp
 8009d28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009d2c:	2b09      	cmp	r3, #9
 8009d2e:	d912      	bls.n	8009d56 <_strtod_l+0x20e>
 8009d30:	2301      	movs	r3, #1
 8009d32:	e7c4      	b.n	8009cbe <_strtod_l+0x176>
 8009d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	9215      	str	r2, [sp, #84]	; 0x54
 8009d3a:	785a      	ldrb	r2, [r3, #1]
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	2a30      	cmp	r2, #48	; 0x30
 8009d40:	d0f8      	beq.n	8009d34 <_strtod_l+0x1ec>
 8009d42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009d46:	2b08      	cmp	r3, #8
 8009d48:	f200 84c1 	bhi.w	800a6ce <_strtod_l+0xb86>
 8009d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d4e:	9005      	str	r0, [sp, #20]
 8009d50:	2000      	movs	r0, #0
 8009d52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d54:	4606      	mov	r6, r0
 8009d56:	3a30      	subs	r2, #48	; 0x30
 8009d58:	f100 0301 	add.w	r3, r0, #1
 8009d5c:	d014      	beq.n	8009d88 <_strtod_l+0x240>
 8009d5e:	9905      	ldr	r1, [sp, #20]
 8009d60:	4419      	add	r1, r3
 8009d62:	9105      	str	r1, [sp, #20]
 8009d64:	4633      	mov	r3, r6
 8009d66:	eb00 0c06 	add.w	ip, r0, r6
 8009d6a:	210a      	movs	r1, #10
 8009d6c:	4563      	cmp	r3, ip
 8009d6e:	d113      	bne.n	8009d98 <_strtod_l+0x250>
 8009d70:	1833      	adds	r3, r6, r0
 8009d72:	2b08      	cmp	r3, #8
 8009d74:	f106 0601 	add.w	r6, r6, #1
 8009d78:	4406      	add	r6, r0
 8009d7a:	dc1a      	bgt.n	8009db2 <_strtod_l+0x26a>
 8009d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d7e:	230a      	movs	r3, #10
 8009d80:	fb03 2301 	mla	r3, r3, r1, r2
 8009d84:	9309      	str	r3, [sp, #36]	; 0x24
 8009d86:	2300      	movs	r3, #0
 8009d88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d8a:	1c51      	adds	r1, r2, #1
 8009d8c:	9115      	str	r1, [sp, #84]	; 0x54
 8009d8e:	7852      	ldrb	r2, [r2, #1]
 8009d90:	4618      	mov	r0, r3
 8009d92:	e7c9      	b.n	8009d28 <_strtod_l+0x1e0>
 8009d94:	4658      	mov	r0, fp
 8009d96:	e7d2      	b.n	8009d3e <_strtod_l+0x1f6>
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	f103 0301 	add.w	r3, r3, #1
 8009d9e:	dc03      	bgt.n	8009da8 <_strtod_l+0x260>
 8009da0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009da2:	434f      	muls	r7, r1
 8009da4:	9709      	str	r7, [sp, #36]	; 0x24
 8009da6:	e7e1      	b.n	8009d6c <_strtod_l+0x224>
 8009da8:	2b10      	cmp	r3, #16
 8009daa:	bfd8      	it	le
 8009dac:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009db0:	e7dc      	b.n	8009d6c <_strtod_l+0x224>
 8009db2:	2e10      	cmp	r6, #16
 8009db4:	bfdc      	itt	le
 8009db6:	230a      	movle	r3, #10
 8009db8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009dbc:	e7e3      	b.n	8009d86 <_strtod_l+0x23e>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9305      	str	r3, [sp, #20]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e780      	b.n	8009cc8 <_strtod_l+0x180>
 8009dc6:	f04f 0c00 	mov.w	ip, #0
 8009dca:	1caa      	adds	r2, r5, #2
 8009dcc:	9215      	str	r2, [sp, #84]	; 0x54
 8009dce:	78aa      	ldrb	r2, [r5, #2]
 8009dd0:	e788      	b.n	8009ce4 <_strtod_l+0x19c>
 8009dd2:	f04f 0c01 	mov.w	ip, #1
 8009dd6:	e7f8      	b.n	8009dca <_strtod_l+0x282>
 8009dd8:	0800d73c 	.word	0x0800d73c
 8009ddc:	0800d739 	.word	0x0800d739
 8009de0:	7ff00000 	.word	0x7ff00000
 8009de4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009de6:	1c51      	adds	r1, r2, #1
 8009de8:	9115      	str	r1, [sp, #84]	; 0x54
 8009dea:	7852      	ldrb	r2, [r2, #1]
 8009dec:	2a30      	cmp	r2, #48	; 0x30
 8009dee:	d0f9      	beq.n	8009de4 <_strtod_l+0x29c>
 8009df0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009df4:	2908      	cmp	r1, #8
 8009df6:	f63f af7a 	bhi.w	8009cee <_strtod_l+0x1a6>
 8009dfa:	3a30      	subs	r2, #48	; 0x30
 8009dfc:	9208      	str	r2, [sp, #32]
 8009dfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e00:	920c      	str	r2, [sp, #48]	; 0x30
 8009e02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e04:	1c57      	adds	r7, r2, #1
 8009e06:	9715      	str	r7, [sp, #84]	; 0x54
 8009e08:	7852      	ldrb	r2, [r2, #1]
 8009e0a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009e0e:	f1be 0f09 	cmp.w	lr, #9
 8009e12:	d938      	bls.n	8009e86 <_strtod_l+0x33e>
 8009e14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e16:	1a7f      	subs	r7, r7, r1
 8009e18:	2f08      	cmp	r7, #8
 8009e1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009e1e:	dc03      	bgt.n	8009e28 <_strtod_l+0x2e0>
 8009e20:	9908      	ldr	r1, [sp, #32]
 8009e22:	428f      	cmp	r7, r1
 8009e24:	bfa8      	it	ge
 8009e26:	460f      	movge	r7, r1
 8009e28:	f1bc 0f00 	cmp.w	ip, #0
 8009e2c:	d000      	beq.n	8009e30 <_strtod_l+0x2e8>
 8009e2e:	427f      	negs	r7, r7
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d14f      	bne.n	8009ed4 <_strtod_l+0x38c>
 8009e34:	9904      	ldr	r1, [sp, #16]
 8009e36:	4301      	orrs	r1, r0
 8009e38:	f47f aec1 	bne.w	8009bbe <_strtod_l+0x76>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f47f aedb 	bne.w	8009bf8 <_strtod_l+0xb0>
 8009e42:	2a69      	cmp	r2, #105	; 0x69
 8009e44:	d029      	beq.n	8009e9a <_strtod_l+0x352>
 8009e46:	dc26      	bgt.n	8009e96 <_strtod_l+0x34e>
 8009e48:	2a49      	cmp	r2, #73	; 0x49
 8009e4a:	d026      	beq.n	8009e9a <_strtod_l+0x352>
 8009e4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009e4e:	f47f aed3 	bne.w	8009bf8 <_strtod_l+0xb0>
 8009e52:	499b      	ldr	r1, [pc, #620]	; (800a0c0 <_strtod_l+0x578>)
 8009e54:	a815      	add	r0, sp, #84	; 0x54
 8009e56:	f001 ffdd 	bl	800be14 <__match>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f aecc 	beq.w	8009bf8 <_strtod_l+0xb0>
 8009e60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b28      	cmp	r3, #40	; 0x28
 8009e66:	d12f      	bne.n	8009ec8 <_strtod_l+0x380>
 8009e68:	4996      	ldr	r1, [pc, #600]	; (800a0c4 <_strtod_l+0x57c>)
 8009e6a:	aa18      	add	r2, sp, #96	; 0x60
 8009e6c:	a815      	add	r0, sp, #84	; 0x54
 8009e6e:	f001 ffe5 	bl	800be3c <__hexnan>
 8009e72:	2805      	cmp	r0, #5
 8009e74:	d128      	bne.n	8009ec8 <_strtod_l+0x380>
 8009e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009e80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009e84:	e69b      	b.n	8009bbe <_strtod_l+0x76>
 8009e86:	9f08      	ldr	r7, [sp, #32]
 8009e88:	210a      	movs	r1, #10
 8009e8a:	fb01 2107 	mla	r1, r1, r7, r2
 8009e8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009e92:	9208      	str	r2, [sp, #32]
 8009e94:	e7b5      	b.n	8009e02 <_strtod_l+0x2ba>
 8009e96:	2a6e      	cmp	r2, #110	; 0x6e
 8009e98:	e7d9      	b.n	8009e4e <_strtod_l+0x306>
 8009e9a:	498b      	ldr	r1, [pc, #556]	; (800a0c8 <_strtod_l+0x580>)
 8009e9c:	a815      	add	r0, sp, #84	; 0x54
 8009e9e:	f001 ffb9 	bl	800be14 <__match>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f43f aea8 	beq.w	8009bf8 <_strtod_l+0xb0>
 8009ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eaa:	4988      	ldr	r1, [pc, #544]	; (800a0cc <_strtod_l+0x584>)
 8009eac:	3b01      	subs	r3, #1
 8009eae:	a815      	add	r0, sp, #84	; 0x54
 8009eb0:	9315      	str	r3, [sp, #84]	; 0x54
 8009eb2:	f001 ffaf 	bl	800be14 <__match>
 8009eb6:	b910      	cbnz	r0, 8009ebe <_strtod_l+0x376>
 8009eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eba:	3301      	adds	r3, #1
 8009ebc:	9315      	str	r3, [sp, #84]	; 0x54
 8009ebe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a0dc <_strtod_l+0x594>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	e67a      	b.n	8009bbe <_strtod_l+0x76>
 8009ec8:	4881      	ldr	r0, [pc, #516]	; (800a0d0 <_strtod_l+0x588>)
 8009eca:	f000 fe09 	bl	800aae0 <nan>
 8009ece:	ec59 8b10 	vmov	r8, r9, d0
 8009ed2:	e674      	b.n	8009bbe <_strtod_l+0x76>
 8009ed4:	9b05      	ldr	r3, [sp, #20]
 8009ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ed8:	1afb      	subs	r3, r7, r3
 8009eda:	f1bb 0f00 	cmp.w	fp, #0
 8009ede:	bf08      	it	eq
 8009ee0:	46b3      	moveq	fp, r6
 8009ee2:	2e10      	cmp	r6, #16
 8009ee4:	9308      	str	r3, [sp, #32]
 8009ee6:	4635      	mov	r5, r6
 8009ee8:	bfa8      	it	ge
 8009eea:	2510      	movge	r5, #16
 8009eec:	f7f6 fb0a 	bl	8000504 <__aeabi_ui2d>
 8009ef0:	2e09      	cmp	r6, #9
 8009ef2:	4680      	mov	r8, r0
 8009ef4:	4689      	mov	r9, r1
 8009ef6:	dd13      	ble.n	8009f20 <_strtod_l+0x3d8>
 8009ef8:	4b76      	ldr	r3, [pc, #472]	; (800a0d4 <_strtod_l+0x58c>)
 8009efa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009efe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009f02:	f7f6 fb79 	bl	80005f8 <__aeabi_dmul>
 8009f06:	4680      	mov	r8, r0
 8009f08:	4650      	mov	r0, sl
 8009f0a:	4689      	mov	r9, r1
 8009f0c:	f7f6 fafa 	bl	8000504 <__aeabi_ui2d>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4640      	mov	r0, r8
 8009f16:	4649      	mov	r1, r9
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4689      	mov	r9, r1
 8009f20:	2e0f      	cmp	r6, #15
 8009f22:	dc38      	bgt.n	8009f96 <_strtod_l+0x44e>
 8009f24:	9b08      	ldr	r3, [sp, #32]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f43f ae49 	beq.w	8009bbe <_strtod_l+0x76>
 8009f2c:	dd24      	ble.n	8009f78 <_strtod_l+0x430>
 8009f2e:	2b16      	cmp	r3, #22
 8009f30:	dc0b      	bgt.n	8009f4a <_strtod_l+0x402>
 8009f32:	4968      	ldr	r1, [pc, #416]	; (800a0d4 <_strtod_l+0x58c>)
 8009f34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f3c:	4642      	mov	r2, r8
 8009f3e:	464b      	mov	r3, r9
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	4680      	mov	r8, r0
 8009f46:	4689      	mov	r9, r1
 8009f48:	e639      	b.n	8009bbe <_strtod_l+0x76>
 8009f4a:	9a08      	ldr	r2, [sp, #32]
 8009f4c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009f50:	4293      	cmp	r3, r2
 8009f52:	db20      	blt.n	8009f96 <_strtod_l+0x44e>
 8009f54:	4c5f      	ldr	r4, [pc, #380]	; (800a0d4 <_strtod_l+0x58c>)
 8009f56:	f1c6 060f 	rsb	r6, r6, #15
 8009f5a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f66:	f7f6 fb47 	bl	80005f8 <__aeabi_dmul>
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	1b9e      	subs	r6, r3, r6
 8009f6e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009f72:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009f76:	e7e3      	b.n	8009f40 <_strtod_l+0x3f8>
 8009f78:	9b08      	ldr	r3, [sp, #32]
 8009f7a:	3316      	adds	r3, #22
 8009f7c:	db0b      	blt.n	8009f96 <_strtod_l+0x44e>
 8009f7e:	9b05      	ldr	r3, [sp, #20]
 8009f80:	1bdf      	subs	r7, r3, r7
 8009f82:	4b54      	ldr	r3, [pc, #336]	; (800a0d4 <_strtod_l+0x58c>)
 8009f84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 fc5c 	bl	800084c <__aeabi_ddiv>
 8009f94:	e7d6      	b.n	8009f44 <_strtod_l+0x3fc>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	1b75      	subs	r5, r6, r5
 8009f9a:	441d      	add	r5, r3
 8009f9c:	2d00      	cmp	r5, #0
 8009f9e:	dd70      	ble.n	800a082 <_strtod_l+0x53a>
 8009fa0:	f015 030f 	ands.w	r3, r5, #15
 8009fa4:	d00a      	beq.n	8009fbc <_strtod_l+0x474>
 8009fa6:	494b      	ldr	r1, [pc, #300]	; (800a0d4 <_strtod_l+0x58c>)
 8009fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb4:	f7f6 fb20 	bl	80005f8 <__aeabi_dmul>
 8009fb8:	4680      	mov	r8, r0
 8009fba:	4689      	mov	r9, r1
 8009fbc:	f035 050f 	bics.w	r5, r5, #15
 8009fc0:	d04d      	beq.n	800a05e <_strtod_l+0x516>
 8009fc2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009fc6:	dd22      	ble.n	800a00e <_strtod_l+0x4c6>
 8009fc8:	2500      	movs	r5, #0
 8009fca:	46ab      	mov	fp, r5
 8009fcc:	9509      	str	r5, [sp, #36]	; 0x24
 8009fce:	9505      	str	r5, [sp, #20]
 8009fd0:	2322      	movs	r3, #34	; 0x22
 8009fd2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a0dc <_strtod_l+0x594>
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	f04f 0800 	mov.w	r8, #0
 8009fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f43f aded 	beq.w	8009bbe <_strtod_l+0x76>
 8009fe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	f002 fa1c 	bl	800c424 <_Bfree>
 8009fec:	9905      	ldr	r1, [sp, #20]
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f002 fa18 	bl	800c424 <_Bfree>
 8009ff4:	4659      	mov	r1, fp
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f002 fa14 	bl	800c424 <_Bfree>
 8009ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ffe:	4620      	mov	r0, r4
 800a000:	f002 fa10 	bl	800c424 <_Bfree>
 800a004:	4629      	mov	r1, r5
 800a006:	4620      	mov	r0, r4
 800a008:	f002 fa0c 	bl	800c424 <_Bfree>
 800a00c:	e5d7      	b.n	8009bbe <_strtod_l+0x76>
 800a00e:	4b32      	ldr	r3, [pc, #200]	; (800a0d8 <_strtod_l+0x590>)
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	2300      	movs	r3, #0
 800a014:	112d      	asrs	r5, r5, #4
 800a016:	4640      	mov	r0, r8
 800a018:	4649      	mov	r1, r9
 800a01a:	469a      	mov	sl, r3
 800a01c:	2d01      	cmp	r5, #1
 800a01e:	dc21      	bgt.n	800a064 <_strtod_l+0x51c>
 800a020:	b10b      	cbz	r3, 800a026 <_strtod_l+0x4de>
 800a022:	4680      	mov	r8, r0
 800a024:	4689      	mov	r9, r1
 800a026:	492c      	ldr	r1, [pc, #176]	; (800a0d8 <_strtod_l+0x590>)
 800a028:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a02c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a038:	f7f6 fade 	bl	80005f8 <__aeabi_dmul>
 800a03c:	4b27      	ldr	r3, [pc, #156]	; (800a0dc <_strtod_l+0x594>)
 800a03e:	460a      	mov	r2, r1
 800a040:	400b      	ands	r3, r1
 800a042:	4927      	ldr	r1, [pc, #156]	; (800a0e0 <_strtod_l+0x598>)
 800a044:	428b      	cmp	r3, r1
 800a046:	4680      	mov	r8, r0
 800a048:	d8be      	bhi.n	8009fc8 <_strtod_l+0x480>
 800a04a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a04e:	428b      	cmp	r3, r1
 800a050:	bf86      	itte	hi
 800a052:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a0e4 <_strtod_l+0x59c>
 800a056:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800a05a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a05e:	2300      	movs	r3, #0
 800a060:	9304      	str	r3, [sp, #16]
 800a062:	e07b      	b.n	800a15c <_strtod_l+0x614>
 800a064:	07ea      	lsls	r2, r5, #31
 800a066:	d505      	bpl.n	800a074 <_strtod_l+0x52c>
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	2301      	movs	r3, #1
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	3208      	adds	r2, #8
 800a078:	f10a 0a01 	add.w	sl, sl, #1
 800a07c:	106d      	asrs	r5, r5, #1
 800a07e:	9204      	str	r2, [sp, #16]
 800a080:	e7cc      	b.n	800a01c <_strtod_l+0x4d4>
 800a082:	d0ec      	beq.n	800a05e <_strtod_l+0x516>
 800a084:	426d      	negs	r5, r5
 800a086:	f015 020f 	ands.w	r2, r5, #15
 800a08a:	d00a      	beq.n	800a0a2 <_strtod_l+0x55a>
 800a08c:	4b11      	ldr	r3, [pc, #68]	; (800a0d4 <_strtod_l+0x58c>)
 800a08e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 fbd7 	bl	800084c <__aeabi_ddiv>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4689      	mov	r9, r1
 800a0a2:	112d      	asrs	r5, r5, #4
 800a0a4:	d0db      	beq.n	800a05e <_strtod_l+0x516>
 800a0a6:	2d1f      	cmp	r5, #31
 800a0a8:	dd1e      	ble.n	800a0e8 <_strtod_l+0x5a0>
 800a0aa:	2500      	movs	r5, #0
 800a0ac:	46ab      	mov	fp, r5
 800a0ae:	9509      	str	r5, [sp, #36]	; 0x24
 800a0b0:	9505      	str	r5, [sp, #20]
 800a0b2:	2322      	movs	r3, #34	; 0x22
 800a0b4:	f04f 0800 	mov.w	r8, #0
 800a0b8:	f04f 0900 	mov.w	r9, #0
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	e78d      	b.n	8009fdc <_strtod_l+0x494>
 800a0c0:	0800d70d 	.word	0x0800d70d
 800a0c4:	0800d750 	.word	0x0800d750
 800a0c8:	0800d705 	.word	0x0800d705
 800a0cc:	0800d949 	.word	0x0800d949
 800a0d0:	0800d945 	.word	0x0800d945
 800a0d4:	0800dab0 	.word	0x0800dab0
 800a0d8:	0800da88 	.word	0x0800da88
 800a0dc:	7ff00000 	.word	0x7ff00000
 800a0e0:	7ca00000 	.word	0x7ca00000
 800a0e4:	7fefffff 	.word	0x7fefffff
 800a0e8:	f015 0310 	ands.w	r3, r5, #16
 800a0ec:	bf18      	it	ne
 800a0ee:	236a      	movne	r3, #106	; 0x6a
 800a0f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a494 <_strtod_l+0x94c>
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	07ea      	lsls	r2, r5, #31
 800a0fe:	d504      	bpl.n	800a10a <_strtod_l+0x5c2>
 800a100:	e9da 2300 	ldrd	r2, r3, [sl]
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	2301      	movs	r3, #1
 800a10a:	106d      	asrs	r5, r5, #1
 800a10c:	f10a 0a08 	add.w	sl, sl, #8
 800a110:	d1f4      	bne.n	800a0fc <_strtod_l+0x5b4>
 800a112:	b10b      	cbz	r3, 800a118 <_strtod_l+0x5d0>
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	9b04      	ldr	r3, [sp, #16]
 800a11a:	b1bb      	cbz	r3, 800a14c <_strtod_l+0x604>
 800a11c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a120:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a124:	2b00      	cmp	r3, #0
 800a126:	4649      	mov	r1, r9
 800a128:	dd10      	ble.n	800a14c <_strtod_l+0x604>
 800a12a:	2b1f      	cmp	r3, #31
 800a12c:	f340 811e 	ble.w	800a36c <_strtod_l+0x824>
 800a130:	2b34      	cmp	r3, #52	; 0x34
 800a132:	bfde      	ittt	le
 800a134:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a138:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a13c:	4093      	lslle	r3, r2
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	bfcc      	ite	gt
 800a144:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a148:	ea03 0901 	andle.w	r9, r3, r1
 800a14c:	2200      	movs	r2, #0
 800a14e:	2300      	movs	r3, #0
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 fcb8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1a6      	bne.n	800a0aa <_strtod_l+0x562>
 800a15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a162:	4633      	mov	r3, r6
 800a164:	465a      	mov	r2, fp
 800a166:	4620      	mov	r0, r4
 800a168:	f002 f9c4 	bl	800c4f4 <__s2b>
 800a16c:	9009      	str	r0, [sp, #36]	; 0x24
 800a16e:	2800      	cmp	r0, #0
 800a170:	f43f af2a 	beq.w	8009fc8 <_strtod_l+0x480>
 800a174:	9a08      	ldr	r2, [sp, #32]
 800a176:	9b05      	ldr	r3, [sp, #20]
 800a178:	2a00      	cmp	r2, #0
 800a17a:	eba3 0307 	sub.w	r3, r3, r7
 800a17e:	bfa8      	it	ge
 800a180:	2300      	movge	r3, #0
 800a182:	930c      	str	r3, [sp, #48]	; 0x30
 800a184:	2500      	movs	r5, #0
 800a186:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a18a:	9312      	str	r3, [sp, #72]	; 0x48
 800a18c:	46ab      	mov	fp, r5
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	4620      	mov	r0, r4
 800a192:	6859      	ldr	r1, [r3, #4]
 800a194:	f002 f906 	bl	800c3a4 <_Balloc>
 800a198:	9005      	str	r0, [sp, #20]
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f43f af18 	beq.w	8009fd0 <_strtod_l+0x488>
 800a1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	3202      	adds	r2, #2
 800a1a6:	f103 010c 	add.w	r1, r3, #12
 800a1aa:	0092      	lsls	r2, r2, #2
 800a1ac:	300c      	adds	r0, #12
 800a1ae:	f000 fc86 	bl	800aabe <memcpy>
 800a1b2:	ec49 8b10 	vmov	d0, r8, r9
 800a1b6:	aa18      	add	r2, sp, #96	; 0x60
 800a1b8:	a917      	add	r1, sp, #92	; 0x5c
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f002 fcce 	bl	800cb5c <__d2b>
 800a1c0:	ec49 8b18 	vmov	d8, r8, r9
 800a1c4:	9016      	str	r0, [sp, #88]	; 0x58
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	f43f af02 	beq.w	8009fd0 <_strtod_l+0x488>
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f002 fa28 	bl	800c624 <__i2b>
 800a1d4:	4683      	mov	fp, r0
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f aefa 	beq.w	8009fd0 <_strtod_l+0x488>
 800a1dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a1de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1e0:	2e00      	cmp	r6, #0
 800a1e2:	bfab      	itete	ge
 800a1e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a1e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a1e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a1ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a1ee:	bfac      	ite	ge
 800a1f0:	eb06 0a03 	addge.w	sl, r6, r3
 800a1f4:	1b9f      	sublt	r7, r3, r6
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	1af6      	subs	r6, r6, r3
 800a1fa:	4416      	add	r6, r2
 800a1fc:	4ba0      	ldr	r3, [pc, #640]	; (800a480 <_strtod_l+0x938>)
 800a1fe:	3e01      	subs	r6, #1
 800a200:	429e      	cmp	r6, r3
 800a202:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a206:	f280 80c4 	bge.w	800a392 <_strtod_l+0x84a>
 800a20a:	1b9b      	subs	r3, r3, r6
 800a20c:	2b1f      	cmp	r3, #31
 800a20e:	eba2 0203 	sub.w	r2, r2, r3
 800a212:	f04f 0101 	mov.w	r1, #1
 800a216:	f300 80b0 	bgt.w	800a37a <_strtod_l+0x832>
 800a21a:	fa01 f303 	lsl.w	r3, r1, r3
 800a21e:	930e      	str	r3, [sp, #56]	; 0x38
 800a220:	2300      	movs	r3, #0
 800a222:	930d      	str	r3, [sp, #52]	; 0x34
 800a224:	eb0a 0602 	add.w	r6, sl, r2
 800a228:	9b04      	ldr	r3, [sp, #16]
 800a22a:	45b2      	cmp	sl, r6
 800a22c:	4417      	add	r7, r2
 800a22e:	441f      	add	r7, r3
 800a230:	4653      	mov	r3, sl
 800a232:	bfa8      	it	ge
 800a234:	4633      	movge	r3, r6
 800a236:	42bb      	cmp	r3, r7
 800a238:	bfa8      	it	ge
 800a23a:	463b      	movge	r3, r7
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfc2      	ittt	gt
 800a240:	1af6      	subgt	r6, r6, r3
 800a242:	1aff      	subgt	r7, r7, r3
 800a244:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dd17      	ble.n	800a27e <_strtod_l+0x736>
 800a24e:	4659      	mov	r1, fp
 800a250:	461a      	mov	r2, r3
 800a252:	4620      	mov	r0, r4
 800a254:	f002 faa6 	bl	800c7a4 <__pow5mult>
 800a258:	4683      	mov	fp, r0
 800a25a:	2800      	cmp	r0, #0
 800a25c:	f43f aeb8 	beq.w	8009fd0 <_strtod_l+0x488>
 800a260:	4601      	mov	r1, r0
 800a262:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a264:	4620      	mov	r0, r4
 800a266:	f002 f9f3 	bl	800c650 <__multiply>
 800a26a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f43f aeaf 	beq.w	8009fd0 <_strtod_l+0x488>
 800a272:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a274:	4620      	mov	r0, r4
 800a276:	f002 f8d5 	bl	800c424 <_Bfree>
 800a27a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a27c:	9316      	str	r3, [sp, #88]	; 0x58
 800a27e:	2e00      	cmp	r6, #0
 800a280:	f300 808c 	bgt.w	800a39c <_strtod_l+0x854>
 800a284:	9b08      	ldr	r3, [sp, #32]
 800a286:	2b00      	cmp	r3, #0
 800a288:	dd08      	ble.n	800a29c <_strtod_l+0x754>
 800a28a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a28c:	9905      	ldr	r1, [sp, #20]
 800a28e:	4620      	mov	r0, r4
 800a290:	f002 fa88 	bl	800c7a4 <__pow5mult>
 800a294:	9005      	str	r0, [sp, #20]
 800a296:	2800      	cmp	r0, #0
 800a298:	f43f ae9a 	beq.w	8009fd0 <_strtod_l+0x488>
 800a29c:	2f00      	cmp	r7, #0
 800a29e:	dd08      	ble.n	800a2b2 <_strtod_l+0x76a>
 800a2a0:	9905      	ldr	r1, [sp, #20]
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f002 fad7 	bl	800c858 <__lshift>
 800a2aa:	9005      	str	r0, [sp, #20]
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	f43f ae8f 	beq.w	8009fd0 <_strtod_l+0x488>
 800a2b2:	f1ba 0f00 	cmp.w	sl, #0
 800a2b6:	dd08      	ble.n	800a2ca <_strtod_l+0x782>
 800a2b8:	4659      	mov	r1, fp
 800a2ba:	4652      	mov	r2, sl
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f002 facb 	bl	800c858 <__lshift>
 800a2c2:	4683      	mov	fp, r0
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	f43f ae83 	beq.w	8009fd0 <_strtod_l+0x488>
 800a2ca:	9a05      	ldr	r2, [sp, #20]
 800a2cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f002 fb4a 	bl	800c968 <__mdiff>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f43f ae7a 	beq.w	8009fd0 <_strtod_l+0x488>
 800a2dc:	68c3      	ldr	r3, [r0, #12]
 800a2de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	60c3      	str	r3, [r0, #12]
 800a2e4:	4659      	mov	r1, fp
 800a2e6:	f002 fb23 	bl	800c930 <__mcmp>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	da60      	bge.n	800a3b0 <_strtod_l+0x868>
 800a2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f0:	ea53 0308 	orrs.w	r3, r3, r8
 800a2f4:	f040 8084 	bne.w	800a400 <_strtod_l+0x8b8>
 800a2f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d17f      	bne.n	800a400 <_strtod_l+0x8b8>
 800a300:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a304:	0d1b      	lsrs	r3, r3, #20
 800a306:	051b      	lsls	r3, r3, #20
 800a308:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a30c:	d978      	bls.n	800a400 <_strtod_l+0x8b8>
 800a30e:	696b      	ldr	r3, [r5, #20]
 800a310:	b913      	cbnz	r3, 800a318 <_strtod_l+0x7d0>
 800a312:	692b      	ldr	r3, [r5, #16]
 800a314:	2b01      	cmp	r3, #1
 800a316:	dd73      	ble.n	800a400 <_strtod_l+0x8b8>
 800a318:	4629      	mov	r1, r5
 800a31a:	2201      	movs	r2, #1
 800a31c:	4620      	mov	r0, r4
 800a31e:	f002 fa9b 	bl	800c858 <__lshift>
 800a322:	4659      	mov	r1, fp
 800a324:	4605      	mov	r5, r0
 800a326:	f002 fb03 	bl	800c930 <__mcmp>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	dd68      	ble.n	800a400 <_strtod_l+0x8b8>
 800a32e:	9904      	ldr	r1, [sp, #16]
 800a330:	4a54      	ldr	r2, [pc, #336]	; (800a484 <_strtod_l+0x93c>)
 800a332:	464b      	mov	r3, r9
 800a334:	2900      	cmp	r1, #0
 800a336:	f000 8084 	beq.w	800a442 <_strtod_l+0x8fa>
 800a33a:	ea02 0109 	and.w	r1, r2, r9
 800a33e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a342:	dc7e      	bgt.n	800a442 <_strtod_l+0x8fa>
 800a344:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a348:	f77f aeb3 	ble.w	800a0b2 <_strtod_l+0x56a>
 800a34c:	4b4e      	ldr	r3, [pc, #312]	; (800a488 <_strtod_l+0x940>)
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	2200      	movs	r2, #0
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	4b4a      	ldr	r3, [pc, #296]	; (800a484 <_strtod_l+0x93c>)
 800a35a:	400b      	ands	r3, r1
 800a35c:	4680      	mov	r8, r0
 800a35e:	4689      	mov	r9, r1
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f ae3f 	bne.w	8009fe4 <_strtod_l+0x49c>
 800a366:	2322      	movs	r3, #34	; 0x22
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	e63b      	b.n	8009fe4 <_strtod_l+0x49c>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a370:	fa02 f303 	lsl.w	r3, r2, r3
 800a374:	ea03 0808 	and.w	r8, r3, r8
 800a378:	e6e8      	b.n	800a14c <_strtod_l+0x604>
 800a37a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a37e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a382:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a386:	36e2      	adds	r6, #226	; 0xe2
 800a388:	fa01 f306 	lsl.w	r3, r1, r6
 800a38c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a390:	e748      	b.n	800a224 <_strtod_l+0x6dc>
 800a392:	2100      	movs	r1, #0
 800a394:	2301      	movs	r3, #1
 800a396:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a39a:	e743      	b.n	800a224 <_strtod_l+0x6dc>
 800a39c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a39e:	4632      	mov	r2, r6
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f002 fa59 	bl	800c858 <__lshift>
 800a3a6:	9016      	str	r0, [sp, #88]	; 0x58
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f47f af6b 	bne.w	800a284 <_strtod_l+0x73c>
 800a3ae:	e60f      	b.n	8009fd0 <_strtod_l+0x488>
 800a3b0:	46ca      	mov	sl, r9
 800a3b2:	d171      	bne.n	800a498 <_strtod_l+0x950>
 800a3b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a3ba:	b352      	cbz	r2, 800a412 <_strtod_l+0x8ca>
 800a3bc:	4a33      	ldr	r2, [pc, #204]	; (800a48c <_strtod_l+0x944>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d12a      	bne.n	800a418 <_strtod_l+0x8d0>
 800a3c2:	9b04      	ldr	r3, [sp, #16]
 800a3c4:	4641      	mov	r1, r8
 800a3c6:	b1fb      	cbz	r3, 800a408 <_strtod_l+0x8c0>
 800a3c8:	4b2e      	ldr	r3, [pc, #184]	; (800a484 <_strtod_l+0x93c>)
 800a3ca:	ea09 0303 	and.w	r3, r9, r3
 800a3ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3d6:	d81a      	bhi.n	800a40e <_strtod_l+0x8c6>
 800a3d8:	0d1b      	lsrs	r3, r3, #20
 800a3da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3de:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e2:	4299      	cmp	r1, r3
 800a3e4:	d118      	bne.n	800a418 <_strtod_l+0x8d0>
 800a3e6:	4b2a      	ldr	r3, [pc, #168]	; (800a490 <_strtod_l+0x948>)
 800a3e8:	459a      	cmp	sl, r3
 800a3ea:	d102      	bne.n	800a3f2 <_strtod_l+0x8aa>
 800a3ec:	3101      	adds	r1, #1
 800a3ee:	f43f adef 	beq.w	8009fd0 <_strtod_l+0x488>
 800a3f2:	4b24      	ldr	r3, [pc, #144]	; (800a484 <_strtod_l+0x93c>)
 800a3f4:	ea0a 0303 	and.w	r3, sl, r3
 800a3f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a3fc:	f04f 0800 	mov.w	r8, #0
 800a400:	9b04      	ldr	r3, [sp, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1a2      	bne.n	800a34c <_strtod_l+0x804>
 800a406:	e5ed      	b.n	8009fe4 <_strtod_l+0x49c>
 800a408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a40c:	e7e9      	b.n	800a3e2 <_strtod_l+0x89a>
 800a40e:	4613      	mov	r3, r2
 800a410:	e7e7      	b.n	800a3e2 <_strtod_l+0x89a>
 800a412:	ea53 0308 	orrs.w	r3, r3, r8
 800a416:	d08a      	beq.n	800a32e <_strtod_l+0x7e6>
 800a418:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a41a:	b1e3      	cbz	r3, 800a456 <_strtod_l+0x90e>
 800a41c:	ea13 0f0a 	tst.w	r3, sl
 800a420:	d0ee      	beq.n	800a400 <_strtod_l+0x8b8>
 800a422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a424:	9a04      	ldr	r2, [sp, #16]
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	b1c3      	cbz	r3, 800a45e <_strtod_l+0x916>
 800a42c:	f7ff fb6e 	bl	8009b0c <sulp>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	ec51 0b18 	vmov	r0, r1, d8
 800a438:	f7f5 ff28 	bl	800028c <__adddf3>
 800a43c:	4680      	mov	r8, r0
 800a43e:	4689      	mov	r9, r1
 800a440:	e7de      	b.n	800a400 <_strtod_l+0x8b8>
 800a442:	4013      	ands	r3, r2
 800a444:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a448:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a44c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a450:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a454:	e7d4      	b.n	800a400 <_strtod_l+0x8b8>
 800a456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a458:	ea13 0f08 	tst.w	r3, r8
 800a45c:	e7e0      	b.n	800a420 <_strtod_l+0x8d8>
 800a45e:	f7ff fb55 	bl	8009b0c <sulp>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	ec51 0b18 	vmov	r0, r1, d8
 800a46a:	f7f5 ff0d 	bl	8000288 <__aeabi_dsub>
 800a46e:	2200      	movs	r2, #0
 800a470:	2300      	movs	r3, #0
 800a472:	4680      	mov	r8, r0
 800a474:	4689      	mov	r9, r1
 800a476:	f7f6 fb27 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d0c0      	beq.n	800a400 <_strtod_l+0x8b8>
 800a47e:	e618      	b.n	800a0b2 <_strtod_l+0x56a>
 800a480:	fffffc02 	.word	0xfffffc02
 800a484:	7ff00000 	.word	0x7ff00000
 800a488:	39500000 	.word	0x39500000
 800a48c:	000fffff 	.word	0x000fffff
 800a490:	7fefffff 	.word	0x7fefffff
 800a494:	0800d768 	.word	0x0800d768
 800a498:	4659      	mov	r1, fp
 800a49a:	4628      	mov	r0, r5
 800a49c:	f002 fbb8 	bl	800cc10 <__ratio>
 800a4a0:	ec57 6b10 	vmov	r6, r7, d0
 800a4a4:	ee10 0a10 	vmov	r0, s0
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	f7f6 fb1e 	bl	8000af0 <__aeabi_dcmple>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d071      	beq.n	800a59c <_strtod_l+0xa54>
 800a4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d17c      	bne.n	800a5b8 <_strtod_l+0xa70>
 800a4be:	f1b8 0f00 	cmp.w	r8, #0
 800a4c2:	d15a      	bne.n	800a57a <_strtod_l+0xa32>
 800a4c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d15d      	bne.n	800a588 <_strtod_l+0xa40>
 800a4cc:	4b90      	ldr	r3, [pc, #576]	; (800a710 <_strtod_l+0xbc8>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f6 fb02 	bl	8000adc <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d15c      	bne.n	800a596 <_strtod_l+0xa4e>
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	4b8c      	ldr	r3, [pc, #560]	; (800a714 <_strtod_l+0xbcc>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f7f6 f888 	bl	80005f8 <__aeabi_dmul>
 800a4e8:	4606      	mov	r6, r0
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a4f0:	9606      	str	r6, [sp, #24]
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a4fc:	4b86      	ldr	r3, [pc, #536]	; (800a718 <_strtod_l+0xbd0>)
 800a4fe:	ea0a 0303 	and.w	r3, sl, r3
 800a502:	930d      	str	r3, [sp, #52]	; 0x34
 800a504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a506:	4b85      	ldr	r3, [pc, #532]	; (800a71c <_strtod_l+0xbd4>)
 800a508:	429a      	cmp	r2, r3
 800a50a:	f040 8090 	bne.w	800a62e <_strtod_l+0xae6>
 800a50e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a512:	ec49 8b10 	vmov	d0, r8, r9
 800a516:	f002 fab1 	bl	800ca7c <__ulp>
 800a51a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a51e:	ec51 0b10 	vmov	r0, r1, d0
 800a522:	f7f6 f869 	bl	80005f8 <__aeabi_dmul>
 800a526:	4642      	mov	r2, r8
 800a528:	464b      	mov	r3, r9
 800a52a:	f7f5 feaf 	bl	800028c <__adddf3>
 800a52e:	460b      	mov	r3, r1
 800a530:	4979      	ldr	r1, [pc, #484]	; (800a718 <_strtod_l+0xbd0>)
 800a532:	4a7b      	ldr	r2, [pc, #492]	; (800a720 <_strtod_l+0xbd8>)
 800a534:	4019      	ands	r1, r3
 800a536:	4291      	cmp	r1, r2
 800a538:	4680      	mov	r8, r0
 800a53a:	d944      	bls.n	800a5c6 <_strtod_l+0xa7e>
 800a53c:	ee18 2a90 	vmov	r2, s17
 800a540:	4b78      	ldr	r3, [pc, #480]	; (800a724 <_strtod_l+0xbdc>)
 800a542:	429a      	cmp	r2, r3
 800a544:	d104      	bne.n	800a550 <_strtod_l+0xa08>
 800a546:	ee18 3a10 	vmov	r3, s16
 800a54a:	3301      	adds	r3, #1
 800a54c:	f43f ad40 	beq.w	8009fd0 <_strtod_l+0x488>
 800a550:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a724 <_strtod_l+0xbdc>
 800a554:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a558:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a55a:	4620      	mov	r0, r4
 800a55c:	f001 ff62 	bl	800c424 <_Bfree>
 800a560:	9905      	ldr	r1, [sp, #20]
 800a562:	4620      	mov	r0, r4
 800a564:	f001 ff5e 	bl	800c424 <_Bfree>
 800a568:	4659      	mov	r1, fp
 800a56a:	4620      	mov	r0, r4
 800a56c:	f001 ff5a 	bl	800c424 <_Bfree>
 800a570:	4629      	mov	r1, r5
 800a572:	4620      	mov	r0, r4
 800a574:	f001 ff56 	bl	800c424 <_Bfree>
 800a578:	e609      	b.n	800a18e <_strtod_l+0x646>
 800a57a:	f1b8 0f01 	cmp.w	r8, #1
 800a57e:	d103      	bne.n	800a588 <_strtod_l+0xa40>
 800a580:	f1b9 0f00 	cmp.w	r9, #0
 800a584:	f43f ad95 	beq.w	800a0b2 <_strtod_l+0x56a>
 800a588:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a6e0 <_strtod_l+0xb98>
 800a58c:	4f60      	ldr	r7, [pc, #384]	; (800a710 <_strtod_l+0xbc8>)
 800a58e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a592:	2600      	movs	r6, #0
 800a594:	e7ae      	b.n	800a4f4 <_strtod_l+0x9ac>
 800a596:	4f5f      	ldr	r7, [pc, #380]	; (800a714 <_strtod_l+0xbcc>)
 800a598:	2600      	movs	r6, #0
 800a59a:	e7a7      	b.n	800a4ec <_strtod_l+0x9a4>
 800a59c:	4b5d      	ldr	r3, [pc, #372]	; (800a714 <_strtod_l+0xbcc>)
 800a59e:	4630      	mov	r0, r6
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f7f6 f828 	bl	80005f8 <__aeabi_dmul>
 800a5a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d09c      	beq.n	800a4ec <_strtod_l+0x9a4>
 800a5b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a5b6:	e79d      	b.n	800a4f4 <_strtod_l+0x9ac>
 800a5b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a6e8 <_strtod_l+0xba0>
 800a5bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5c0:	ec57 6b17 	vmov	r6, r7, d7
 800a5c4:	e796      	b.n	800a4f4 <_strtod_l+0x9ac>
 800a5c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	46ca      	mov	sl, r9
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1c2      	bne.n	800a558 <_strtod_l+0xa10>
 800a5d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5d8:	0d1b      	lsrs	r3, r3, #20
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d1bb      	bne.n	800a558 <_strtod_l+0xa10>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fb68 	bl	8000cb8 <__aeabi_d2lz>
 800a5e8:	f7f5 ffd8 	bl	800059c <__aeabi_l2d>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5fe:	ea43 0308 	orr.w	r3, r3, r8
 800a602:	4313      	orrs	r3, r2
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	d054      	beq.n	800a6b4 <_strtod_l+0xb6c>
 800a60a:	a339      	add	r3, pc, #228	; (adr r3, 800a6f0 <_strtod_l+0xba8>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7f6 fa64 	bl	8000adc <__aeabi_dcmplt>
 800a614:	2800      	cmp	r0, #0
 800a616:	f47f ace5 	bne.w	8009fe4 <_strtod_l+0x49c>
 800a61a:	a337      	add	r3, pc, #220	; (adr r3, 800a6f8 <_strtod_l+0xbb0>)
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f6 fa78 	bl	8000b18 <__aeabi_dcmpgt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d095      	beq.n	800a558 <_strtod_l+0xa10>
 800a62c:	e4da      	b.n	8009fe4 <_strtod_l+0x49c>
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	b333      	cbz	r3, 800a680 <_strtod_l+0xb38>
 800a632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a634:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a638:	d822      	bhi.n	800a680 <_strtod_l+0xb38>
 800a63a:	a331      	add	r3, pc, #196	; (adr r3, 800a700 <_strtod_l+0xbb8>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	4630      	mov	r0, r6
 800a642:	4639      	mov	r1, r7
 800a644:	f7f6 fa54 	bl	8000af0 <__aeabi_dcmple>
 800a648:	b1a0      	cbz	r0, 800a674 <_strtod_l+0xb2c>
 800a64a:	4639      	mov	r1, r7
 800a64c:	4630      	mov	r0, r6
 800a64e:	f7f6 faab 	bl	8000ba8 <__aeabi_d2uiz>
 800a652:	2801      	cmp	r0, #1
 800a654:	bf38      	it	cc
 800a656:	2001      	movcc	r0, #1
 800a658:	f7f5 ff54 	bl	8000504 <__aeabi_ui2d>
 800a65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a65e:	4606      	mov	r6, r0
 800a660:	460f      	mov	r7, r1
 800a662:	bb23      	cbnz	r3, 800a6ae <_strtod_l+0xb66>
 800a664:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a668:	9010      	str	r0, [sp, #64]	; 0x40
 800a66a:	9311      	str	r3, [sp, #68]	; 0x44
 800a66c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a670:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a678:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a680:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a684:	eeb0 0a48 	vmov.f32	s0, s16
 800a688:	eef0 0a68 	vmov.f32	s1, s17
 800a68c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a690:	f002 f9f4 	bl	800ca7c <__ulp>
 800a694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a698:	ec53 2b10 	vmov	r2, r3, d0
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	ec53 2b18 	vmov	r2, r3, d8
 800a6a4:	f7f5 fdf2 	bl	800028c <__adddf3>
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4689      	mov	r9, r1
 800a6ac:	e78d      	b.n	800a5ca <_strtod_l+0xa82>
 800a6ae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a6b2:	e7db      	b.n	800a66c <_strtod_l+0xb24>
 800a6b4:	a314      	add	r3, pc, #80	; (adr r3, 800a708 <_strtod_l+0xbc0>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f6 fa0f 	bl	8000adc <__aeabi_dcmplt>
 800a6be:	e7b3      	b.n	800a628 <_strtod_l+0xae0>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	f7ff ba7c 	b.w	8009bc6 <_strtod_l+0x7e>
 800a6ce:	2a65      	cmp	r2, #101	; 0x65
 800a6d0:	f43f ab75 	beq.w	8009dbe <_strtod_l+0x276>
 800a6d4:	2a45      	cmp	r2, #69	; 0x45
 800a6d6:	f43f ab72 	beq.w	8009dbe <_strtod_l+0x276>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	f7ff bbaa 	b.w	8009e34 <_strtod_l+0x2ec>
 800a6e0:	00000000 	.word	0x00000000
 800a6e4:	bff00000 	.word	0xbff00000
 800a6e8:	00000000 	.word	0x00000000
 800a6ec:	3ff00000 	.word	0x3ff00000
 800a6f0:	94a03595 	.word	0x94a03595
 800a6f4:	3fdfffff 	.word	0x3fdfffff
 800a6f8:	35afe535 	.word	0x35afe535
 800a6fc:	3fe00000 	.word	0x3fe00000
 800a700:	ffc00000 	.word	0xffc00000
 800a704:	41dfffff 	.word	0x41dfffff
 800a708:	94a03595 	.word	0x94a03595
 800a70c:	3fcfffff 	.word	0x3fcfffff
 800a710:	3ff00000 	.word	0x3ff00000
 800a714:	3fe00000 	.word	0x3fe00000
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	7fe00000 	.word	0x7fe00000
 800a720:	7c9fffff 	.word	0x7c9fffff
 800a724:	7fefffff 	.word	0x7fefffff

0800a728 <_strtod_r>:
 800a728:	4b01      	ldr	r3, [pc, #4]	; (800a730 <_strtod_r+0x8>)
 800a72a:	f7ff ba0d 	b.w	8009b48 <_strtod_l>
 800a72e:	bf00      	nop
 800a730:	2000001c 	.word	0x2000001c

0800a734 <strtod>:
 800a734:	460a      	mov	r2, r1
 800a736:	4601      	mov	r1, r0
 800a738:	4802      	ldr	r0, [pc, #8]	; (800a744 <strtod+0x10>)
 800a73a:	4b03      	ldr	r3, [pc, #12]	; (800a748 <strtod+0x14>)
 800a73c:	6800      	ldr	r0, [r0, #0]
 800a73e:	f7ff ba03 	b.w	8009b48 <_strtod_l>
 800a742:	bf00      	nop
 800a744:	200001d4 	.word	0x200001d4
 800a748:	2000001c 	.word	0x2000001c

0800a74c <_strtol_l.constprop.0>:
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a752:	d001      	beq.n	800a758 <_strtol_l.constprop.0+0xc>
 800a754:	2b24      	cmp	r3, #36	; 0x24
 800a756:	d906      	bls.n	800a766 <_strtol_l.constprop.0+0x1a>
 800a758:	f000 f984 	bl	800aa64 <__errno>
 800a75c:	2316      	movs	r3, #22
 800a75e:	6003      	str	r3, [r0, #0]
 800a760:	2000      	movs	r0, #0
 800a762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a766:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a84c <_strtol_l.constprop.0+0x100>
 800a76a:	460d      	mov	r5, r1
 800a76c:	462e      	mov	r6, r5
 800a76e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a772:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a776:	f017 0708 	ands.w	r7, r7, #8
 800a77a:	d1f7      	bne.n	800a76c <_strtol_l.constprop.0+0x20>
 800a77c:	2c2d      	cmp	r4, #45	; 0x2d
 800a77e:	d132      	bne.n	800a7e6 <_strtol_l.constprop.0+0x9a>
 800a780:	782c      	ldrb	r4, [r5, #0]
 800a782:	2701      	movs	r7, #1
 800a784:	1cb5      	adds	r5, r6, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d05b      	beq.n	800a842 <_strtol_l.constprop.0+0xf6>
 800a78a:	2b10      	cmp	r3, #16
 800a78c:	d109      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a78e:	2c30      	cmp	r4, #48	; 0x30
 800a790:	d107      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a792:	782c      	ldrb	r4, [r5, #0]
 800a794:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a798:	2c58      	cmp	r4, #88	; 0x58
 800a79a:	d14d      	bne.n	800a838 <_strtol_l.constprop.0+0xec>
 800a79c:	786c      	ldrb	r4, [r5, #1]
 800a79e:	2310      	movs	r3, #16
 800a7a0:	3502      	adds	r5, #2
 800a7a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a7a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a7aa:	f04f 0e00 	mov.w	lr, #0
 800a7ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800a7b2:	4676      	mov	r6, lr
 800a7b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800a7b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a7bc:	f1bc 0f09 	cmp.w	ip, #9
 800a7c0:	d816      	bhi.n	800a7f0 <_strtol_l.constprop.0+0xa4>
 800a7c2:	4664      	mov	r4, ip
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	dd24      	ble.n	800a812 <_strtol_l.constprop.0+0xc6>
 800a7c8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a7cc:	d008      	beq.n	800a7e0 <_strtol_l.constprop.0+0x94>
 800a7ce:	45b1      	cmp	r9, r6
 800a7d0:	d31c      	bcc.n	800a80c <_strtol_l.constprop.0+0xc0>
 800a7d2:	d101      	bne.n	800a7d8 <_strtol_l.constprop.0+0x8c>
 800a7d4:	45a2      	cmp	sl, r4
 800a7d6:	db19      	blt.n	800a80c <_strtol_l.constprop.0+0xc0>
 800a7d8:	fb06 4603 	mla	r6, r6, r3, r4
 800a7dc:	f04f 0e01 	mov.w	lr, #1
 800a7e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7e4:	e7e8      	b.n	800a7b8 <_strtol_l.constprop.0+0x6c>
 800a7e6:	2c2b      	cmp	r4, #43	; 0x2b
 800a7e8:	bf04      	itt	eq
 800a7ea:	782c      	ldrbeq	r4, [r5, #0]
 800a7ec:	1cb5      	addeq	r5, r6, #2
 800a7ee:	e7ca      	b.n	800a786 <_strtol_l.constprop.0+0x3a>
 800a7f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a7f4:	f1bc 0f19 	cmp.w	ip, #25
 800a7f8:	d801      	bhi.n	800a7fe <_strtol_l.constprop.0+0xb2>
 800a7fa:	3c37      	subs	r4, #55	; 0x37
 800a7fc:	e7e2      	b.n	800a7c4 <_strtol_l.constprop.0+0x78>
 800a7fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a802:	f1bc 0f19 	cmp.w	ip, #25
 800a806:	d804      	bhi.n	800a812 <_strtol_l.constprop.0+0xc6>
 800a808:	3c57      	subs	r4, #87	; 0x57
 800a80a:	e7db      	b.n	800a7c4 <_strtol_l.constprop.0+0x78>
 800a80c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a810:	e7e6      	b.n	800a7e0 <_strtol_l.constprop.0+0x94>
 800a812:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a816:	d105      	bne.n	800a824 <_strtol_l.constprop.0+0xd8>
 800a818:	2322      	movs	r3, #34	; 0x22
 800a81a:	6003      	str	r3, [r0, #0]
 800a81c:	4646      	mov	r6, r8
 800a81e:	b942      	cbnz	r2, 800a832 <_strtol_l.constprop.0+0xe6>
 800a820:	4630      	mov	r0, r6
 800a822:	e79e      	b.n	800a762 <_strtol_l.constprop.0+0x16>
 800a824:	b107      	cbz	r7, 800a828 <_strtol_l.constprop.0+0xdc>
 800a826:	4276      	negs	r6, r6
 800a828:	2a00      	cmp	r2, #0
 800a82a:	d0f9      	beq.n	800a820 <_strtol_l.constprop.0+0xd4>
 800a82c:	f1be 0f00 	cmp.w	lr, #0
 800a830:	d000      	beq.n	800a834 <_strtol_l.constprop.0+0xe8>
 800a832:	1e69      	subs	r1, r5, #1
 800a834:	6011      	str	r1, [r2, #0]
 800a836:	e7f3      	b.n	800a820 <_strtol_l.constprop.0+0xd4>
 800a838:	2430      	movs	r4, #48	; 0x30
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1b1      	bne.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a83e:	2308      	movs	r3, #8
 800a840:	e7af      	b.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a842:	2c30      	cmp	r4, #48	; 0x30
 800a844:	d0a5      	beq.n	800a792 <_strtol_l.constprop.0+0x46>
 800a846:	230a      	movs	r3, #10
 800a848:	e7ab      	b.n	800a7a2 <_strtol_l.constprop.0+0x56>
 800a84a:	bf00      	nop
 800a84c:	0800d80a 	.word	0x0800d80a

0800a850 <_strtol_r>:
 800a850:	f7ff bf7c 	b.w	800a74c <_strtol_l.constprop.0>

0800a854 <strtol>:
 800a854:	4613      	mov	r3, r2
 800a856:	460a      	mov	r2, r1
 800a858:	4601      	mov	r1, r0
 800a85a:	4802      	ldr	r0, [pc, #8]	; (800a864 <strtol+0x10>)
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f7ff bf75 	b.w	800a74c <_strtol_l.constprop.0>
 800a862:	bf00      	nop
 800a864:	200001d4 	.word	0x200001d4

0800a868 <_fwalk_sglue>:
 800a868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a86c:	4607      	mov	r7, r0
 800a86e:	4688      	mov	r8, r1
 800a870:	4614      	mov	r4, r2
 800a872:	2600      	movs	r6, #0
 800a874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a878:	f1b9 0901 	subs.w	r9, r9, #1
 800a87c:	d505      	bpl.n	800a88a <_fwalk_sglue+0x22>
 800a87e:	6824      	ldr	r4, [r4, #0]
 800a880:	2c00      	cmp	r4, #0
 800a882:	d1f7      	bne.n	800a874 <_fwalk_sglue+0xc>
 800a884:	4630      	mov	r0, r6
 800a886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d907      	bls.n	800a8a0 <_fwalk_sglue+0x38>
 800a890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a894:	3301      	adds	r3, #1
 800a896:	d003      	beq.n	800a8a0 <_fwalk_sglue+0x38>
 800a898:	4629      	mov	r1, r5
 800a89a:	4638      	mov	r0, r7
 800a89c:	47c0      	blx	r8
 800a89e:	4306      	orrs	r6, r0
 800a8a0:	3568      	adds	r5, #104	; 0x68
 800a8a2:	e7e9      	b.n	800a878 <_fwalk_sglue+0x10>

0800a8a4 <strncmp>:
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	b16a      	cbz	r2, 800a8c4 <strncmp+0x20>
 800a8a8:	3901      	subs	r1, #1
 800a8aa:	1884      	adds	r4, r0, r2
 800a8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d103      	bne.n	800a8c0 <strncmp+0x1c>
 800a8b8:	42a0      	cmp	r0, r4
 800a8ba:	d001      	beq.n	800a8c0 <strncmp+0x1c>
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d1f5      	bne.n	800a8ac <strncmp+0x8>
 800a8c0:	1ad0      	subs	r0, r2, r3
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	e7fc      	b.n	800a8c2 <strncmp+0x1e>

0800a8c8 <strtok>:
 800a8c8:	4b16      	ldr	r3, [pc, #88]	; (800a924 <strtok+0x5c>)
 800a8ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8cc:	681e      	ldr	r6, [r3, #0]
 800a8ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b9fc      	cbnz	r4, 800a914 <strtok+0x4c>
 800a8d4:	2050      	movs	r0, #80	; 0x50
 800a8d6:	9101      	str	r1, [sp, #4]
 800a8d8:	f7fe fc00 	bl	80090dc <malloc>
 800a8dc:	9901      	ldr	r1, [sp, #4]
 800a8de:	6470      	str	r0, [r6, #68]	; 0x44
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	b920      	cbnz	r0, 800a8ee <strtok+0x26>
 800a8e4:	4b10      	ldr	r3, [pc, #64]	; (800a928 <strtok+0x60>)
 800a8e6:	4811      	ldr	r0, [pc, #68]	; (800a92c <strtok+0x64>)
 800a8e8:	215b      	movs	r1, #91	; 0x5b
 800a8ea:	f000 f907 	bl	800aafc <__assert_func>
 800a8ee:	e9c0 4400 	strd	r4, r4, [r0]
 800a8f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a8f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a8fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a8fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a902:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a906:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a90a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a90e:	6184      	str	r4, [r0, #24]
 800a910:	7704      	strb	r4, [r0, #28]
 800a912:	6244      	str	r4, [r0, #36]	; 0x24
 800a914:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a916:	2301      	movs	r3, #1
 800a918:	4628      	mov	r0, r5
 800a91a:	b002      	add	sp, #8
 800a91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a920:	f000 b806 	b.w	800a930 <__strtok_r>
 800a924:	200001d4 	.word	0x200001d4
 800a928:	0800d790 	.word	0x0800d790
 800a92c:	0800d7a7 	.word	0x0800d7a7

0800a930 <__strtok_r>:
 800a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a932:	b908      	cbnz	r0, 800a938 <__strtok_r+0x8>
 800a934:	6810      	ldr	r0, [r2, #0]
 800a936:	b188      	cbz	r0, 800a95c <__strtok_r+0x2c>
 800a938:	4604      	mov	r4, r0
 800a93a:	4620      	mov	r0, r4
 800a93c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a940:	460f      	mov	r7, r1
 800a942:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a946:	b91e      	cbnz	r6, 800a950 <__strtok_r+0x20>
 800a948:	b965      	cbnz	r5, 800a964 <__strtok_r+0x34>
 800a94a:	6015      	str	r5, [r2, #0]
 800a94c:	4628      	mov	r0, r5
 800a94e:	e005      	b.n	800a95c <__strtok_r+0x2c>
 800a950:	42b5      	cmp	r5, r6
 800a952:	d1f6      	bne.n	800a942 <__strtok_r+0x12>
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1f0      	bne.n	800a93a <__strtok_r+0xa>
 800a958:	6014      	str	r4, [r2, #0]
 800a95a:	7003      	strb	r3, [r0, #0]
 800a95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a95e:	461c      	mov	r4, r3
 800a960:	e00c      	b.n	800a97c <__strtok_r+0x4c>
 800a962:	b915      	cbnz	r5, 800a96a <__strtok_r+0x3a>
 800a964:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a968:	460e      	mov	r6, r1
 800a96a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a96e:	42ab      	cmp	r3, r5
 800a970:	d1f7      	bne.n	800a962 <__strtok_r+0x32>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0f3      	beq.n	800a95e <__strtok_r+0x2e>
 800a976:	2300      	movs	r3, #0
 800a978:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a97c:	6014      	str	r4, [r2, #0]
 800a97e:	e7ed      	b.n	800a95c <__strtok_r+0x2c>

0800a980 <memset>:
 800a980:	4402      	add	r2, r0
 800a982:	4603      	mov	r3, r0
 800a984:	4293      	cmp	r3, r2
 800a986:	d100      	bne.n	800a98a <memset+0xa>
 800a988:	4770      	bx	lr
 800a98a:	f803 1b01 	strb.w	r1, [r3], #1
 800a98e:	e7f9      	b.n	800a984 <memset+0x4>

0800a990 <_localeconv_r>:
 800a990:	4800      	ldr	r0, [pc, #0]	; (800a994 <_localeconv_r+0x4>)
 800a992:	4770      	bx	lr
 800a994:	2000010c 	.word	0x2000010c

0800a998 <_reclaim_reent>:
 800a998:	4b29      	ldr	r3, [pc, #164]	; (800aa40 <_reclaim_reent+0xa8>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4283      	cmp	r3, r0
 800a99e:	b570      	push	{r4, r5, r6, lr}
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	d04b      	beq.n	800aa3c <_reclaim_reent+0xa4>
 800a9a4:	69c3      	ldr	r3, [r0, #28]
 800a9a6:	b143      	cbz	r3, 800a9ba <_reclaim_reent+0x22>
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d144      	bne.n	800aa38 <_reclaim_reent+0xa0>
 800a9ae:	69e3      	ldr	r3, [r4, #28]
 800a9b0:	6819      	ldr	r1, [r3, #0]
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x22>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 ff39 	bl	800b82c <_free_r>
 800a9ba:	6961      	ldr	r1, [r4, #20]
 800a9bc:	b111      	cbz	r1, 800a9c4 <_reclaim_reent+0x2c>
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f000 ff34 	bl	800b82c <_free_r>
 800a9c4:	69e1      	ldr	r1, [r4, #28]
 800a9c6:	b111      	cbz	r1, 800a9ce <_reclaim_reent+0x36>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 ff2f 	bl	800b82c <_free_r>
 800a9ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a9d0:	b111      	cbz	r1, 800a9d8 <_reclaim_reent+0x40>
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 ff2a 	bl	800b82c <_free_r>
 800a9d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9da:	b111      	cbz	r1, 800a9e2 <_reclaim_reent+0x4a>
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f000 ff25 	bl	800b82c <_free_r>
 800a9e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a9e4:	b111      	cbz	r1, 800a9ec <_reclaim_reent+0x54>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 ff20 	bl	800b82c <_free_r>
 800a9ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9ee:	b111      	cbz	r1, 800a9f6 <_reclaim_reent+0x5e>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f000 ff1b 	bl	800b82c <_free_r>
 800a9f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a9f8:	b111      	cbz	r1, 800aa00 <_reclaim_reent+0x68>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 ff16 	bl	800b82c <_free_r>
 800aa00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa02:	b111      	cbz	r1, 800aa0a <_reclaim_reent+0x72>
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 ff11 	bl	800b82c <_free_r>
 800aa0a:	6a23      	ldr	r3, [r4, #32]
 800aa0c:	b1b3      	cbz	r3, 800aa3c <_reclaim_reent+0xa4>
 800aa0e:	4620      	mov	r0, r4
 800aa10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa14:	4718      	bx	r3
 800aa16:	5949      	ldr	r1, [r1, r5]
 800aa18:	b941      	cbnz	r1, 800aa2c <_reclaim_reent+0x94>
 800aa1a:	3504      	adds	r5, #4
 800aa1c:	69e3      	ldr	r3, [r4, #28]
 800aa1e:	2d80      	cmp	r5, #128	; 0x80
 800aa20:	68d9      	ldr	r1, [r3, #12]
 800aa22:	d1f8      	bne.n	800aa16 <_reclaim_reent+0x7e>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 ff01 	bl	800b82c <_free_r>
 800aa2a:	e7c0      	b.n	800a9ae <_reclaim_reent+0x16>
 800aa2c:	680e      	ldr	r6, [r1, #0]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 fefc 	bl	800b82c <_free_r>
 800aa34:	4631      	mov	r1, r6
 800aa36:	e7ef      	b.n	800aa18 <_reclaim_reent+0x80>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	e7ef      	b.n	800aa1c <_reclaim_reent+0x84>
 800aa3c:	bd70      	pop	{r4, r5, r6, pc}
 800aa3e:	bf00      	nop
 800aa40:	200001d4 	.word	0x200001d4

0800aa44 <_sbrk_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_sbrk_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f7 f9e0 	bl	8001e14 <_sbrk>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_sbrk_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_sbrk_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	20003c38 	.word	0x20003c38

0800aa64 <__errno>:
 800aa64:	4b01      	ldr	r3, [pc, #4]	; (800aa6c <__errno+0x8>)
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	200001d4 	.word	0x200001d4

0800aa70 <__libc_init_array>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	4d0d      	ldr	r5, [pc, #52]	; (800aaa8 <__libc_init_array+0x38>)
 800aa74:	4c0d      	ldr	r4, [pc, #52]	; (800aaac <__libc_init_array+0x3c>)
 800aa76:	1b64      	subs	r4, r4, r5
 800aa78:	10a4      	asrs	r4, r4, #2
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	42a6      	cmp	r6, r4
 800aa7e:	d109      	bne.n	800aa94 <__libc_init_array+0x24>
 800aa80:	4d0b      	ldr	r5, [pc, #44]	; (800aab0 <__libc_init_array+0x40>)
 800aa82:	4c0c      	ldr	r4, [pc, #48]	; (800aab4 <__libc_init_array+0x44>)
 800aa84:	f002 fcf2 	bl	800d46c <_init>
 800aa88:	1b64      	subs	r4, r4, r5
 800aa8a:	10a4      	asrs	r4, r4, #2
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	d105      	bne.n	800aa9e <__libc_init_array+0x2e>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa98:	4798      	blx	r3
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7ee      	b.n	800aa7c <__libc_init_array+0xc>
 800aa9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa2:	4798      	blx	r3
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	e7f2      	b.n	800aa8e <__libc_init_array+0x1e>
 800aaa8:	0800db8c 	.word	0x0800db8c
 800aaac:	0800db8c 	.word	0x0800db8c
 800aab0:	0800db8c 	.word	0x0800db8c
 800aab4:	0800db90 	.word	0x0800db90

0800aab8 <__retarget_lock_init_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <__retarget_lock_acquire_recursive>:
 800aaba:	4770      	bx	lr

0800aabc <__retarget_lock_release_recursive>:
 800aabc:	4770      	bx	lr

0800aabe <memcpy>:
 800aabe:	440a      	add	r2, r1
 800aac0:	4291      	cmp	r1, r2
 800aac2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aac6:	d100      	bne.n	800aaca <memcpy+0xc>
 800aac8:	4770      	bx	lr
 800aaca:	b510      	push	{r4, lr}
 800aacc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad4:	4291      	cmp	r1, r2
 800aad6:	d1f9      	bne.n	800aacc <memcpy+0xe>
 800aad8:	bd10      	pop	{r4, pc}
 800aada:	0000      	movs	r0, r0
 800aadc:	0000      	movs	r0, r0
	...

0800aae0 <nan>:
 800aae0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aae8 <nan+0x8>
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	00000000 	.word	0x00000000
 800aaec:	7ff80000 	.word	0x7ff80000

0800aaf0 <nanf>:
 800aaf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aaf8 <nanf+0x8>
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	7fc00000 	.word	0x7fc00000

0800aafc <__assert_func>:
 800aafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aafe:	4614      	mov	r4, r2
 800ab00:	461a      	mov	r2, r3
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <__assert_func+0x2c>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4605      	mov	r5, r0
 800ab08:	68d8      	ldr	r0, [r3, #12]
 800ab0a:	b14c      	cbz	r4, 800ab20 <__assert_func+0x24>
 800ab0c:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <__assert_func+0x30>)
 800ab0e:	9100      	str	r1, [sp, #0]
 800ab10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab14:	4906      	ldr	r1, [pc, #24]	; (800ab30 <__assert_func+0x34>)
 800ab16:	462b      	mov	r3, r5
 800ab18:	f002 f934 	bl	800cd84 <fiprintf>
 800ab1c:	f002 f9e0 	bl	800cee0 <abort>
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <__assert_func+0x38>)
 800ab22:	461c      	mov	r4, r3
 800ab24:	e7f3      	b.n	800ab0e <__assert_func+0x12>
 800ab26:	bf00      	nop
 800ab28:	200001d4 	.word	0x200001d4
 800ab2c:	0800d90a 	.word	0x0800d90a
 800ab30:	0800d917 	.word	0x0800d917
 800ab34:	0800d945 	.word	0x0800d945

0800ab38 <quorem>:
 800ab38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	6903      	ldr	r3, [r0, #16]
 800ab3e:	690c      	ldr	r4, [r1, #16]
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	4607      	mov	r7, r0
 800ab44:	db7e      	blt.n	800ac44 <quorem+0x10c>
 800ab46:	3c01      	subs	r4, #1
 800ab48:	f101 0814 	add.w	r8, r1, #20
 800ab4c:	f100 0514 	add.w	r5, r0, #20
 800ab50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	429a      	cmp	r2, r3
 800ab62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab6a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab6e:	d331      	bcc.n	800abd4 <quorem+0x9c>
 800ab70:	f04f 0e00 	mov.w	lr, #0
 800ab74:	4640      	mov	r0, r8
 800ab76:	46ac      	mov	ip, r5
 800ab78:	46f2      	mov	sl, lr
 800ab7a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab7e:	b293      	uxth	r3, r2
 800ab80:	fb06 e303 	mla	r3, r6, r3, lr
 800ab84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ab88:	0c1a      	lsrs	r2, r3, #16
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	ebaa 0303 	sub.w	r3, sl, r3
 800ab90:	f8dc a000 	ldr.w	sl, [ip]
 800ab94:	fa13 f38a 	uxtah	r3, r3, sl
 800ab98:	fb06 220e 	mla	r2, r6, lr, r2
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	9b00      	ldr	r3, [sp, #0]
 800aba0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aba4:	b292      	uxth	r2, r2
 800aba6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abae:	f8bd 3000 	ldrh.w	r3, [sp]
 800abb2:	4581      	cmp	r9, r0
 800abb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abb8:	f84c 3b04 	str.w	r3, [ip], #4
 800abbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abc0:	d2db      	bcs.n	800ab7a <quorem+0x42>
 800abc2:	f855 300b 	ldr.w	r3, [r5, fp]
 800abc6:	b92b      	cbnz	r3, 800abd4 <quorem+0x9c>
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	3b04      	subs	r3, #4
 800abcc:	429d      	cmp	r5, r3
 800abce:	461a      	mov	r2, r3
 800abd0:	d32c      	bcc.n	800ac2c <quorem+0xf4>
 800abd2:	613c      	str	r4, [r7, #16]
 800abd4:	4638      	mov	r0, r7
 800abd6:	f001 feab 	bl	800c930 <__mcmp>
 800abda:	2800      	cmp	r0, #0
 800abdc:	db22      	blt.n	800ac24 <quorem+0xec>
 800abde:	3601      	adds	r6, #1
 800abe0:	4629      	mov	r1, r5
 800abe2:	2000      	movs	r0, #0
 800abe4:	f858 2b04 	ldr.w	r2, [r8], #4
 800abe8:	f8d1 c000 	ldr.w	ip, [r1]
 800abec:	b293      	uxth	r3, r2
 800abee:	1ac3      	subs	r3, r0, r3
 800abf0:	0c12      	lsrs	r2, r2, #16
 800abf2:	fa13 f38c 	uxtah	r3, r3, ip
 800abf6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800abfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac04:	45c1      	cmp	r9, r8
 800ac06:	f841 3b04 	str.w	r3, [r1], #4
 800ac0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac0e:	d2e9      	bcs.n	800abe4 <quorem+0xac>
 800ac10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac18:	b922      	cbnz	r2, 800ac24 <quorem+0xec>
 800ac1a:	3b04      	subs	r3, #4
 800ac1c:	429d      	cmp	r5, r3
 800ac1e:	461a      	mov	r2, r3
 800ac20:	d30a      	bcc.n	800ac38 <quorem+0x100>
 800ac22:	613c      	str	r4, [r7, #16]
 800ac24:	4630      	mov	r0, r6
 800ac26:	b003      	add	sp, #12
 800ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	6812      	ldr	r2, [r2, #0]
 800ac2e:	3b04      	subs	r3, #4
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	d1ce      	bne.n	800abd2 <quorem+0x9a>
 800ac34:	3c01      	subs	r4, #1
 800ac36:	e7c9      	b.n	800abcc <quorem+0x94>
 800ac38:	6812      	ldr	r2, [r2, #0]
 800ac3a:	3b04      	subs	r3, #4
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d1f0      	bne.n	800ac22 <quorem+0xea>
 800ac40:	3c01      	subs	r4, #1
 800ac42:	e7eb      	b.n	800ac1c <quorem+0xe4>
 800ac44:	2000      	movs	r0, #0
 800ac46:	e7ee      	b.n	800ac26 <quorem+0xee>

0800ac48 <_dtoa_r>:
 800ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	ed2d 8b04 	vpush	{d8-d9}
 800ac50:	69c5      	ldr	r5, [r0, #28]
 800ac52:	b093      	sub	sp, #76	; 0x4c
 800ac54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac58:	ec57 6b10 	vmov	r6, r7, d0
 800ac5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac60:	9107      	str	r1, [sp, #28]
 800ac62:	4604      	mov	r4, r0
 800ac64:	920a      	str	r2, [sp, #40]	; 0x28
 800ac66:	930d      	str	r3, [sp, #52]	; 0x34
 800ac68:	b975      	cbnz	r5, 800ac88 <_dtoa_r+0x40>
 800ac6a:	2010      	movs	r0, #16
 800ac6c:	f7fe fa36 	bl	80090dc <malloc>
 800ac70:	4602      	mov	r2, r0
 800ac72:	61e0      	str	r0, [r4, #28]
 800ac74:	b920      	cbnz	r0, 800ac80 <_dtoa_r+0x38>
 800ac76:	4bae      	ldr	r3, [pc, #696]	; (800af30 <_dtoa_r+0x2e8>)
 800ac78:	21ef      	movs	r1, #239	; 0xef
 800ac7a:	48ae      	ldr	r0, [pc, #696]	; (800af34 <_dtoa_r+0x2ec>)
 800ac7c:	f7ff ff3e 	bl	800aafc <__assert_func>
 800ac80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac84:	6005      	str	r5, [r0, #0]
 800ac86:	60c5      	str	r5, [r0, #12]
 800ac88:	69e3      	ldr	r3, [r4, #28]
 800ac8a:	6819      	ldr	r1, [r3, #0]
 800ac8c:	b151      	cbz	r1, 800aca4 <_dtoa_r+0x5c>
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	604a      	str	r2, [r1, #4]
 800ac92:	2301      	movs	r3, #1
 800ac94:	4093      	lsls	r3, r2
 800ac96:	608b      	str	r3, [r1, #8]
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f001 fbc3 	bl	800c424 <_Bfree>
 800ac9e:	69e3      	ldr	r3, [r4, #28]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	1e3b      	subs	r3, r7, #0
 800aca6:	bfbb      	ittet	lt
 800aca8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acac:	9303      	strlt	r3, [sp, #12]
 800acae:	2300      	movge	r3, #0
 800acb0:	2201      	movlt	r2, #1
 800acb2:	bfac      	ite	ge
 800acb4:	f8c8 3000 	strge.w	r3, [r8]
 800acb8:	f8c8 2000 	strlt.w	r2, [r8]
 800acbc:	4b9e      	ldr	r3, [pc, #632]	; (800af38 <_dtoa_r+0x2f0>)
 800acbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800acc2:	ea33 0308 	bics.w	r3, r3, r8
 800acc6:	d11b      	bne.n	800ad00 <_dtoa_r+0xb8>
 800acc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acca:	f242 730f 	movw	r3, #9999	; 0x270f
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800acd4:	4333      	orrs	r3, r6
 800acd6:	f000 8593 	beq.w	800b800 <_dtoa_r+0xbb8>
 800acda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acdc:	b963      	cbnz	r3, 800acf8 <_dtoa_r+0xb0>
 800acde:	4b97      	ldr	r3, [pc, #604]	; (800af3c <_dtoa_r+0x2f4>)
 800ace0:	e027      	b.n	800ad32 <_dtoa_r+0xea>
 800ace2:	4b97      	ldr	r3, [pc, #604]	; (800af40 <_dtoa_r+0x2f8>)
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	9800      	ldr	r0, [sp, #0]
 800acee:	b013      	add	sp, #76	; 0x4c
 800acf0:	ecbd 8b04 	vpop	{d8-d9}
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	4b90      	ldr	r3, [pc, #576]	; (800af3c <_dtoa_r+0x2f4>)
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	3303      	adds	r3, #3
 800acfe:	e7f3      	b.n	800ace8 <_dtoa_r+0xa0>
 800ad00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad04:	2200      	movs	r2, #0
 800ad06:	ec51 0b17 	vmov	r0, r1, d7
 800ad0a:	eeb0 8a47 	vmov.f32	s16, s14
 800ad0e:	eef0 8a67 	vmov.f32	s17, s15
 800ad12:	2300      	movs	r3, #0
 800ad14:	f7f5 fed8 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad18:	4681      	mov	r9, r0
 800ad1a:	b160      	cbz	r0, 800ad36 <_dtoa_r+0xee>
 800ad1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad1e:	2301      	movs	r3, #1
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8568 	beq.w	800b7fa <_dtoa_r+0xbb2>
 800ad2a:	4b86      	ldr	r3, [pc, #536]	; (800af44 <_dtoa_r+0x2fc>)
 800ad2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	3b01      	subs	r3, #1
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	e7da      	b.n	800acec <_dtoa_r+0xa4>
 800ad36:	aa10      	add	r2, sp, #64	; 0x40
 800ad38:	a911      	add	r1, sp, #68	; 0x44
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad40:	eef0 0a68 	vmov.f32	s1, s17
 800ad44:	f001 ff0a 	bl	800cb5c <__d2b>
 800ad48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	2d00      	cmp	r5, #0
 800ad50:	d07f      	beq.n	800ae52 <_dtoa_r+0x20a>
 800ad52:	ee18 3a90 	vmov	r3, s17
 800ad56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ad5e:	ec51 0b18 	vmov	r0, r1, d8
 800ad62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad6e:	4619      	mov	r1, r3
 800ad70:	2200      	movs	r2, #0
 800ad72:	4b75      	ldr	r3, [pc, #468]	; (800af48 <_dtoa_r+0x300>)
 800ad74:	f7f5 fa88 	bl	8000288 <__aeabi_dsub>
 800ad78:	a367      	add	r3, pc, #412	; (adr r3, 800af18 <_dtoa_r+0x2d0>)
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f7f5 fc3b 	bl	80005f8 <__aeabi_dmul>
 800ad82:	a367      	add	r3, pc, #412	; (adr r3, 800af20 <_dtoa_r+0x2d8>)
 800ad84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad88:	f7f5 fa80 	bl	800028c <__adddf3>
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	4628      	mov	r0, r5
 800ad90:	460f      	mov	r7, r1
 800ad92:	f7f5 fbc7 	bl	8000524 <__aeabi_i2d>
 800ad96:	a364      	add	r3, pc, #400	; (adr r3, 800af28 <_dtoa_r+0x2e0>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fc2c 	bl	80005f8 <__aeabi_dmul>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fa70 	bl	800028c <__adddf3>
 800adac:	4606      	mov	r6, r0
 800adae:	460f      	mov	r7, r1
 800adb0:	f7f5 fed2 	bl	8000b58 <__aeabi_d2iz>
 800adb4:	2200      	movs	r2, #0
 800adb6:	4683      	mov	fp, r0
 800adb8:	2300      	movs	r3, #0
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 fe8d 	bl	8000adc <__aeabi_dcmplt>
 800adc2:	b148      	cbz	r0, 800add8 <_dtoa_r+0x190>
 800adc4:	4658      	mov	r0, fp
 800adc6:	f7f5 fbad 	bl	8000524 <__aeabi_i2d>
 800adca:	4632      	mov	r2, r6
 800adcc:	463b      	mov	r3, r7
 800adce:	f7f5 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800add2:	b908      	cbnz	r0, 800add8 <_dtoa_r+0x190>
 800add4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800add8:	f1bb 0f16 	cmp.w	fp, #22
 800addc:	d857      	bhi.n	800ae8e <_dtoa_r+0x246>
 800adde:	4b5b      	ldr	r3, [pc, #364]	; (800af4c <_dtoa_r+0x304>)
 800ade0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	ec51 0b18 	vmov	r0, r1, d8
 800adec:	f7f5 fe76 	bl	8000adc <__aeabi_dcmplt>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d04e      	beq.n	800ae92 <_dtoa_r+0x24a>
 800adf4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800adf8:	2300      	movs	r3, #0
 800adfa:	930c      	str	r3, [sp, #48]	; 0x30
 800adfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adfe:	1b5b      	subs	r3, r3, r5
 800ae00:	1e5a      	subs	r2, r3, #1
 800ae02:	bf45      	ittet	mi
 800ae04:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae08:	9305      	strmi	r3, [sp, #20]
 800ae0a:	2300      	movpl	r3, #0
 800ae0c:	2300      	movmi	r3, #0
 800ae0e:	9206      	str	r2, [sp, #24]
 800ae10:	bf54      	ite	pl
 800ae12:	9305      	strpl	r3, [sp, #20]
 800ae14:	9306      	strmi	r3, [sp, #24]
 800ae16:	f1bb 0f00 	cmp.w	fp, #0
 800ae1a:	db3c      	blt.n	800ae96 <_dtoa_r+0x24e>
 800ae1c:	9b06      	ldr	r3, [sp, #24]
 800ae1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae22:	445b      	add	r3, fp
 800ae24:	9306      	str	r3, [sp, #24]
 800ae26:	2300      	movs	r3, #0
 800ae28:	9308      	str	r3, [sp, #32]
 800ae2a:	9b07      	ldr	r3, [sp, #28]
 800ae2c:	2b09      	cmp	r3, #9
 800ae2e:	d868      	bhi.n	800af02 <_dtoa_r+0x2ba>
 800ae30:	2b05      	cmp	r3, #5
 800ae32:	bfc4      	itt	gt
 800ae34:	3b04      	subgt	r3, #4
 800ae36:	9307      	strgt	r3, [sp, #28]
 800ae38:	9b07      	ldr	r3, [sp, #28]
 800ae3a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae3e:	bfcc      	ite	gt
 800ae40:	2500      	movgt	r5, #0
 800ae42:	2501      	movle	r5, #1
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	f200 8085 	bhi.w	800af54 <_dtoa_r+0x30c>
 800ae4a:	e8df f003 	tbb	[pc, r3]
 800ae4e:	3b2e      	.short	0x3b2e
 800ae50:	5839      	.short	0x5839
 800ae52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae56:	441d      	add	r5, r3
 800ae58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae5c:	2b20      	cmp	r3, #32
 800ae5e:	bfc1      	itttt	gt
 800ae60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae64:	fa08 f803 	lslgt.w	r8, r8, r3
 800ae68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ae6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ae70:	bfd6      	itet	le
 800ae72:	f1c3 0320 	rsble	r3, r3, #32
 800ae76:	ea48 0003 	orrgt.w	r0, r8, r3
 800ae7a:	fa06 f003 	lslle.w	r0, r6, r3
 800ae7e:	f7f5 fb41 	bl	8000504 <__aeabi_ui2d>
 800ae82:	2201      	movs	r2, #1
 800ae84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ae88:	3d01      	subs	r5, #1
 800ae8a:	920e      	str	r2, [sp, #56]	; 0x38
 800ae8c:	e76f      	b.n	800ad6e <_dtoa_r+0x126>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e7b3      	b.n	800adfa <_dtoa_r+0x1b2>
 800ae92:	900c      	str	r0, [sp, #48]	; 0x30
 800ae94:	e7b2      	b.n	800adfc <_dtoa_r+0x1b4>
 800ae96:	9b05      	ldr	r3, [sp, #20]
 800ae98:	eba3 030b 	sub.w	r3, r3, fp
 800ae9c:	9305      	str	r3, [sp, #20]
 800ae9e:	f1cb 0300 	rsb	r3, fp, #0
 800aea2:	9308      	str	r3, [sp, #32]
 800aea4:	2300      	movs	r3, #0
 800aea6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea8:	e7bf      	b.n	800ae2a <_dtoa_r+0x1e2>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9309      	str	r3, [sp, #36]	; 0x24
 800aeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc52      	bgt.n	800af5a <_dtoa_r+0x312>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	9304      	str	r3, [sp, #16]
 800aeba:	461a      	mov	r2, r3
 800aebc:	920a      	str	r2, [sp, #40]	; 0x28
 800aebe:	e00b      	b.n	800aed8 <_dtoa_r+0x290>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7f3      	b.n	800aeac <_dtoa_r+0x264>
 800aec4:	2300      	movs	r3, #0
 800aec6:	9309      	str	r3, [sp, #36]	; 0x24
 800aec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeca:	445b      	add	r3, fp
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	3301      	adds	r3, #1
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	bfb8      	it	lt
 800aed6:	2301      	movlt	r3, #1
 800aed8:	69e0      	ldr	r0, [r4, #28]
 800aeda:	2100      	movs	r1, #0
 800aedc:	2204      	movs	r2, #4
 800aede:	f102 0614 	add.w	r6, r2, #20
 800aee2:	429e      	cmp	r6, r3
 800aee4:	d93d      	bls.n	800af62 <_dtoa_r+0x31a>
 800aee6:	6041      	str	r1, [r0, #4]
 800aee8:	4620      	mov	r0, r4
 800aeea:	f001 fa5b 	bl	800c3a4 <_Balloc>
 800aeee:	9000      	str	r0, [sp, #0]
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d139      	bne.n	800af68 <_dtoa_r+0x320>
 800aef4:	4b16      	ldr	r3, [pc, #88]	; (800af50 <_dtoa_r+0x308>)
 800aef6:	4602      	mov	r2, r0
 800aef8:	f240 11af 	movw	r1, #431	; 0x1af
 800aefc:	e6bd      	b.n	800ac7a <_dtoa_r+0x32>
 800aefe:	2301      	movs	r3, #1
 800af00:	e7e1      	b.n	800aec6 <_dtoa_r+0x27e>
 800af02:	2501      	movs	r5, #1
 800af04:	2300      	movs	r3, #0
 800af06:	9307      	str	r3, [sp, #28]
 800af08:	9509      	str	r5, [sp, #36]	; 0x24
 800af0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	2200      	movs	r2, #0
 800af14:	2312      	movs	r3, #18
 800af16:	e7d1      	b.n	800aebc <_dtoa_r+0x274>
 800af18:	636f4361 	.word	0x636f4361
 800af1c:	3fd287a7 	.word	0x3fd287a7
 800af20:	8b60c8b3 	.word	0x8b60c8b3
 800af24:	3fc68a28 	.word	0x3fc68a28
 800af28:	509f79fb 	.word	0x509f79fb
 800af2c:	3fd34413 	.word	0x3fd34413
 800af30:	0800d790 	.word	0x0800d790
 800af34:	0800d953 	.word	0x0800d953
 800af38:	7ff00000 	.word	0x7ff00000
 800af3c:	0800d94f 	.word	0x0800d94f
 800af40:	0800d946 	.word	0x0800d946
 800af44:	0800d711 	.word	0x0800d711
 800af48:	3ff80000 	.word	0x3ff80000
 800af4c:	0800dab0 	.word	0x0800dab0
 800af50:	0800d9ab 	.word	0x0800d9ab
 800af54:	2301      	movs	r3, #1
 800af56:	9309      	str	r3, [sp, #36]	; 0x24
 800af58:	e7d7      	b.n	800af0a <_dtoa_r+0x2c2>
 800af5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	e7ba      	b.n	800aed8 <_dtoa_r+0x290>
 800af62:	3101      	adds	r1, #1
 800af64:	0052      	lsls	r2, r2, #1
 800af66:	e7ba      	b.n	800aede <_dtoa_r+0x296>
 800af68:	69e3      	ldr	r3, [r4, #28]
 800af6a:	9a00      	ldr	r2, [sp, #0]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	2b0e      	cmp	r3, #14
 800af72:	f200 80a8 	bhi.w	800b0c6 <_dtoa_r+0x47e>
 800af76:	2d00      	cmp	r5, #0
 800af78:	f000 80a5 	beq.w	800b0c6 <_dtoa_r+0x47e>
 800af7c:	f1bb 0f00 	cmp.w	fp, #0
 800af80:	dd38      	ble.n	800aff4 <_dtoa_r+0x3ac>
 800af82:	4bc0      	ldr	r3, [pc, #768]	; (800b284 <_dtoa_r+0x63c>)
 800af84:	f00b 020f 	and.w	r2, fp, #15
 800af88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800af90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800af94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800af98:	d019      	beq.n	800afce <_dtoa_r+0x386>
 800af9a:	4bbb      	ldr	r3, [pc, #748]	; (800b288 <_dtoa_r+0x640>)
 800af9c:	ec51 0b18 	vmov	r0, r1, d8
 800afa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afa4:	f7f5 fc52 	bl	800084c <__aeabi_ddiv>
 800afa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afac:	f008 080f 	and.w	r8, r8, #15
 800afb0:	2503      	movs	r5, #3
 800afb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b288 <_dtoa_r+0x640>
 800afb6:	f1b8 0f00 	cmp.w	r8, #0
 800afba:	d10a      	bne.n	800afd2 <_dtoa_r+0x38a>
 800afbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 fc42 	bl	800084c <__aeabi_ddiv>
 800afc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afcc:	e02b      	b.n	800b026 <_dtoa_r+0x3de>
 800afce:	2502      	movs	r5, #2
 800afd0:	e7ef      	b.n	800afb2 <_dtoa_r+0x36a>
 800afd2:	f018 0f01 	tst.w	r8, #1
 800afd6:	d008      	beq.n	800afea <_dtoa_r+0x3a2>
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800afe0:	f7f5 fb0a 	bl	80005f8 <__aeabi_dmul>
 800afe4:	3501      	adds	r5, #1
 800afe6:	4606      	mov	r6, r0
 800afe8:	460f      	mov	r7, r1
 800afea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800afee:	f109 0908 	add.w	r9, r9, #8
 800aff2:	e7e0      	b.n	800afb6 <_dtoa_r+0x36e>
 800aff4:	f000 809f 	beq.w	800b136 <_dtoa_r+0x4ee>
 800aff8:	f1cb 0600 	rsb	r6, fp, #0
 800affc:	4ba1      	ldr	r3, [pc, #644]	; (800b284 <_dtoa_r+0x63c>)
 800affe:	4fa2      	ldr	r7, [pc, #648]	; (800b288 <_dtoa_r+0x640>)
 800b000:	f006 020f 	and.w	r2, r6, #15
 800b004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	ec51 0b18 	vmov	r0, r1, d8
 800b010:	f7f5 faf2 	bl	80005f8 <__aeabi_dmul>
 800b014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b018:	1136      	asrs	r6, r6, #4
 800b01a:	2300      	movs	r3, #0
 800b01c:	2502      	movs	r5, #2
 800b01e:	2e00      	cmp	r6, #0
 800b020:	d17e      	bne.n	800b120 <_dtoa_r+0x4d8>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1d0      	bne.n	800afc8 <_dtoa_r+0x380>
 800b026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b028:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8084 	beq.w	800b13a <_dtoa_r+0x4f2>
 800b032:	4b96      	ldr	r3, [pc, #600]	; (800b28c <_dtoa_r+0x644>)
 800b034:	2200      	movs	r2, #0
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	f7f5 fd4f 	bl	8000adc <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d07b      	beq.n	800b13a <_dtoa_r+0x4f2>
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d078      	beq.n	800b13a <_dtoa_r+0x4f2>
 800b048:	9b01      	ldr	r3, [sp, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dd39      	ble.n	800b0c2 <_dtoa_r+0x47a>
 800b04e:	4b90      	ldr	r3, [pc, #576]	; (800b290 <_dtoa_r+0x648>)
 800b050:	2200      	movs	r2, #0
 800b052:	4640      	mov	r0, r8
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05e:	9e01      	ldr	r6, [sp, #4]
 800b060:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b064:	3501      	adds	r5, #1
 800b066:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b06a:	4628      	mov	r0, r5
 800b06c:	f7f5 fa5a 	bl	8000524 <__aeabi_i2d>
 800b070:	4642      	mov	r2, r8
 800b072:	464b      	mov	r3, r9
 800b074:	f7f5 fac0 	bl	80005f8 <__aeabi_dmul>
 800b078:	4b86      	ldr	r3, [pc, #536]	; (800b294 <_dtoa_r+0x64c>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 f906 	bl	800028c <__adddf3>
 800b080:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b088:	9303      	str	r3, [sp, #12]
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d158      	bne.n	800b140 <_dtoa_r+0x4f8>
 800b08e:	4b82      	ldr	r3, [pc, #520]	; (800b298 <_dtoa_r+0x650>)
 800b090:	2200      	movs	r2, #0
 800b092:	4640      	mov	r0, r8
 800b094:	4649      	mov	r1, r9
 800b096:	f7f5 f8f7 	bl	8000288 <__aeabi_dsub>
 800b09a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b09e:	4680      	mov	r8, r0
 800b0a0:	4689      	mov	r9, r1
 800b0a2:	f7f5 fd39 	bl	8000b18 <__aeabi_dcmpgt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 8296 	bne.w	800b5d8 <_dtoa_r+0x990>
 800b0ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0b6:	4649      	mov	r1, r9
 800b0b8:	f7f5 fd10 	bl	8000adc <__aeabi_dcmplt>
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	f040 8289 	bne.w	800b5d4 <_dtoa_r+0x98c>
 800b0c2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f2c0 814e 	blt.w	800b36a <_dtoa_r+0x722>
 800b0ce:	f1bb 0f0e 	cmp.w	fp, #14
 800b0d2:	f300 814a 	bgt.w	800b36a <_dtoa_r+0x722>
 800b0d6:	4b6b      	ldr	r3, [pc, #428]	; (800b284 <_dtoa_r+0x63c>)
 800b0d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f280 80dc 	bge.w	800b2a0 <_dtoa_r+0x658>
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f300 80d8 	bgt.w	800b2a0 <_dtoa_r+0x658>
 800b0f0:	f040 826f 	bne.w	800b5d2 <_dtoa_r+0x98a>
 800b0f4:	4b68      	ldr	r3, [pc, #416]	; (800b298 <_dtoa_r+0x650>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 fa7c 	bl	80005f8 <__aeabi_dmul>
 800b100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b104:	f7f5 fcfe 	bl	8000b04 <__aeabi_dcmpge>
 800b108:	9e04      	ldr	r6, [sp, #16]
 800b10a:	4637      	mov	r7, r6
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f040 8245 	bne.w	800b59c <_dtoa_r+0x954>
 800b112:	9d00      	ldr	r5, [sp, #0]
 800b114:	2331      	movs	r3, #49	; 0x31
 800b116:	f805 3b01 	strb.w	r3, [r5], #1
 800b11a:	f10b 0b01 	add.w	fp, fp, #1
 800b11e:	e241      	b.n	800b5a4 <_dtoa_r+0x95c>
 800b120:	07f2      	lsls	r2, r6, #31
 800b122:	d505      	bpl.n	800b130 <_dtoa_r+0x4e8>
 800b124:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b128:	f7f5 fa66 	bl	80005f8 <__aeabi_dmul>
 800b12c:	3501      	adds	r5, #1
 800b12e:	2301      	movs	r3, #1
 800b130:	1076      	asrs	r6, r6, #1
 800b132:	3708      	adds	r7, #8
 800b134:	e773      	b.n	800b01e <_dtoa_r+0x3d6>
 800b136:	2502      	movs	r5, #2
 800b138:	e775      	b.n	800b026 <_dtoa_r+0x3de>
 800b13a:	9e04      	ldr	r6, [sp, #16]
 800b13c:	465f      	mov	r7, fp
 800b13e:	e792      	b.n	800b066 <_dtoa_r+0x41e>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	4b50      	ldr	r3, [pc, #320]	; (800b284 <_dtoa_r+0x63c>)
 800b144:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b148:	4431      	add	r1, r6
 800b14a:	9102      	str	r1, [sp, #8]
 800b14c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b14e:	eeb0 9a47 	vmov.f32	s18, s14
 800b152:	eef0 9a67 	vmov.f32	s19, s15
 800b156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b15a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b15e:	2900      	cmp	r1, #0
 800b160:	d044      	beq.n	800b1ec <_dtoa_r+0x5a4>
 800b162:	494e      	ldr	r1, [pc, #312]	; (800b29c <_dtoa_r+0x654>)
 800b164:	2000      	movs	r0, #0
 800b166:	f7f5 fb71 	bl	800084c <__aeabi_ddiv>
 800b16a:	ec53 2b19 	vmov	r2, r3, d9
 800b16e:	f7f5 f88b 	bl	8000288 <__aeabi_dsub>
 800b172:	9d00      	ldr	r5, [sp, #0]
 800b174:	ec41 0b19 	vmov	d9, r0, r1
 800b178:	4649      	mov	r1, r9
 800b17a:	4640      	mov	r0, r8
 800b17c:	f7f5 fcec 	bl	8000b58 <__aeabi_d2iz>
 800b180:	4606      	mov	r6, r0
 800b182:	f7f5 f9cf 	bl	8000524 <__aeabi_i2d>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4640      	mov	r0, r8
 800b18c:	4649      	mov	r1, r9
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	3630      	adds	r6, #48	; 0x30
 800b194:	f805 6b01 	strb.w	r6, [r5], #1
 800b198:	ec53 2b19 	vmov	r2, r3, d9
 800b19c:	4680      	mov	r8, r0
 800b19e:	4689      	mov	r9, r1
 800b1a0:	f7f5 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d164      	bne.n	800b272 <_dtoa_r+0x62a>
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	464b      	mov	r3, r9
 800b1ac:	4937      	ldr	r1, [pc, #220]	; (800b28c <_dtoa_r+0x644>)
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f7f5 f86a 	bl	8000288 <__aeabi_dsub>
 800b1b4:	ec53 2b19 	vmov	r2, r3, d9
 800b1b8:	f7f5 fc90 	bl	8000adc <__aeabi_dcmplt>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	f040 80b6 	bne.w	800b32e <_dtoa_r+0x6e6>
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	429d      	cmp	r5, r3
 800b1c6:	f43f af7c 	beq.w	800b0c2 <_dtoa_r+0x47a>
 800b1ca:	4b31      	ldr	r3, [pc, #196]	; (800b290 <_dtoa_r+0x648>)
 800b1cc:	ec51 0b19 	vmov	r0, r1, d9
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f7f5 fa11 	bl	80005f8 <__aeabi_dmul>
 800b1d6:	4b2e      	ldr	r3, [pc, #184]	; (800b290 <_dtoa_r+0x648>)
 800b1d8:	ec41 0b19 	vmov	d9, r0, r1
 800b1dc:	2200      	movs	r2, #0
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	f7f5 fa09 	bl	80005f8 <__aeabi_dmul>
 800b1e6:	4680      	mov	r8, r0
 800b1e8:	4689      	mov	r9, r1
 800b1ea:	e7c5      	b.n	800b178 <_dtoa_r+0x530>
 800b1ec:	ec51 0b17 	vmov	r0, r1, d7
 800b1f0:	f7f5 fa02 	bl	80005f8 <__aeabi_dmul>
 800b1f4:	9b02      	ldr	r3, [sp, #8]
 800b1f6:	9d00      	ldr	r5, [sp, #0]
 800b1f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fa:	ec41 0b19 	vmov	d9, r0, r1
 800b1fe:	4649      	mov	r1, r9
 800b200:	4640      	mov	r0, r8
 800b202:	f7f5 fca9 	bl	8000b58 <__aeabi_d2iz>
 800b206:	4606      	mov	r6, r0
 800b208:	f7f5 f98c 	bl	8000524 <__aeabi_i2d>
 800b20c:	3630      	adds	r6, #48	; 0x30
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	f805 6b01 	strb.w	r6, [r5], #1
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	429d      	cmp	r5, r3
 800b222:	4680      	mov	r8, r0
 800b224:	4689      	mov	r9, r1
 800b226:	f04f 0200 	mov.w	r2, #0
 800b22a:	d124      	bne.n	800b276 <_dtoa_r+0x62e>
 800b22c:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <_dtoa_r+0x654>)
 800b22e:	ec51 0b19 	vmov	r0, r1, d9
 800b232:	f7f5 f82b 	bl	800028c <__adddf3>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4640      	mov	r0, r8
 800b23c:	4649      	mov	r1, r9
 800b23e:	f7f5 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 800b242:	2800      	cmp	r0, #0
 800b244:	d173      	bne.n	800b32e <_dtoa_r+0x6e6>
 800b246:	ec53 2b19 	vmov	r2, r3, d9
 800b24a:	4914      	ldr	r1, [pc, #80]	; (800b29c <_dtoa_r+0x654>)
 800b24c:	2000      	movs	r0, #0
 800b24e:	f7f5 f81b 	bl	8000288 <__aeabi_dsub>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4640      	mov	r0, r8
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 fc3f 	bl	8000adc <__aeabi_dcmplt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f af2f 	beq.w	800b0c2 <_dtoa_r+0x47a>
 800b264:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b266:	1e6b      	subs	r3, r5, #1
 800b268:	930f      	str	r3, [sp, #60]	; 0x3c
 800b26a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b26e:	2b30      	cmp	r3, #48	; 0x30
 800b270:	d0f8      	beq.n	800b264 <_dtoa_r+0x61c>
 800b272:	46bb      	mov	fp, r7
 800b274:	e04a      	b.n	800b30c <_dtoa_r+0x6c4>
 800b276:	4b06      	ldr	r3, [pc, #24]	; (800b290 <_dtoa_r+0x648>)
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	e7bd      	b.n	800b1fe <_dtoa_r+0x5b6>
 800b282:	bf00      	nop
 800b284:	0800dab0 	.word	0x0800dab0
 800b288:	0800da88 	.word	0x0800da88
 800b28c:	3ff00000 	.word	0x3ff00000
 800b290:	40240000 	.word	0x40240000
 800b294:	401c0000 	.word	0x401c0000
 800b298:	40140000 	.word	0x40140000
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2a4:	9d00      	ldr	r5, [sp, #0]
 800b2a6:	4642      	mov	r2, r8
 800b2a8:	464b      	mov	r3, r9
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	f7f5 facd 	bl	800084c <__aeabi_ddiv>
 800b2b2:	f7f5 fc51 	bl	8000b58 <__aeabi_d2iz>
 800b2b6:	9001      	str	r0, [sp, #4]
 800b2b8:	f7f5 f934 	bl	8000524 <__aeabi_i2d>
 800b2bc:	4642      	mov	r2, r8
 800b2be:	464b      	mov	r3, r9
 800b2c0:	f7f5 f99a 	bl	80005f8 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f4 ffdc 	bl	8000288 <__aeabi_dsub>
 800b2d0:	9e01      	ldr	r6, [sp, #4]
 800b2d2:	9f04      	ldr	r7, [sp, #16]
 800b2d4:	3630      	adds	r6, #48	; 0x30
 800b2d6:	f805 6b01 	strb.w	r6, [r5], #1
 800b2da:	9e00      	ldr	r6, [sp, #0]
 800b2dc:	1bae      	subs	r6, r5, r6
 800b2de:	42b7      	cmp	r7, r6
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	d134      	bne.n	800b350 <_dtoa_r+0x708>
 800b2e6:	f7f4 ffd1 	bl	800028c <__adddf3>
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	464b      	mov	r3, r9
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	f7f5 fc11 	bl	8000b18 <__aeabi_dcmpgt>
 800b2f6:	b9c8      	cbnz	r0, 800b32c <_dtoa_r+0x6e4>
 800b2f8:	4642      	mov	r2, r8
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f5 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b304:	b110      	cbz	r0, 800b30c <_dtoa_r+0x6c4>
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	07db      	lsls	r3, r3, #31
 800b30a:	d40f      	bmi.n	800b32c <_dtoa_r+0x6e4>
 800b30c:	4651      	mov	r1, sl
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 f888 	bl	800c424 <_Bfree>
 800b314:	2300      	movs	r3, #0
 800b316:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b318:	702b      	strb	r3, [r5, #0]
 800b31a:	f10b 0301 	add.w	r3, fp, #1
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b322:	2b00      	cmp	r3, #0
 800b324:	f43f ace2 	beq.w	800acec <_dtoa_r+0xa4>
 800b328:	601d      	str	r5, [r3, #0]
 800b32a:	e4df      	b.n	800acec <_dtoa_r+0xa4>
 800b32c:	465f      	mov	r7, fp
 800b32e:	462b      	mov	r3, r5
 800b330:	461d      	mov	r5, r3
 800b332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b336:	2a39      	cmp	r2, #57	; 0x39
 800b338:	d106      	bne.n	800b348 <_dtoa_r+0x700>
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d1f7      	bne.n	800b330 <_dtoa_r+0x6e8>
 800b340:	9900      	ldr	r1, [sp, #0]
 800b342:	2230      	movs	r2, #48	; 0x30
 800b344:	3701      	adds	r7, #1
 800b346:	700a      	strb	r2, [r1, #0]
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	3201      	adds	r2, #1
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	e790      	b.n	800b272 <_dtoa_r+0x62a>
 800b350:	4ba3      	ldr	r3, [pc, #652]	; (800b5e0 <_dtoa_r+0x998>)
 800b352:	2200      	movs	r2, #0
 800b354:	f7f5 f950 	bl	80005f8 <__aeabi_dmul>
 800b358:	2200      	movs	r2, #0
 800b35a:	2300      	movs	r3, #0
 800b35c:	4606      	mov	r6, r0
 800b35e:	460f      	mov	r7, r1
 800b360:	f7f5 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b364:	2800      	cmp	r0, #0
 800b366:	d09e      	beq.n	800b2a6 <_dtoa_r+0x65e>
 800b368:	e7d0      	b.n	800b30c <_dtoa_r+0x6c4>
 800b36a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36c:	2a00      	cmp	r2, #0
 800b36e:	f000 80ca 	beq.w	800b506 <_dtoa_r+0x8be>
 800b372:	9a07      	ldr	r2, [sp, #28]
 800b374:	2a01      	cmp	r2, #1
 800b376:	f300 80ad 	bgt.w	800b4d4 <_dtoa_r+0x88c>
 800b37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	f000 80a5 	beq.w	800b4cc <_dtoa_r+0x884>
 800b382:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b386:	9e08      	ldr	r6, [sp, #32]
 800b388:	9d05      	ldr	r5, [sp, #20]
 800b38a:	9a05      	ldr	r2, [sp, #20]
 800b38c:	441a      	add	r2, r3
 800b38e:	9205      	str	r2, [sp, #20]
 800b390:	9a06      	ldr	r2, [sp, #24]
 800b392:	2101      	movs	r1, #1
 800b394:	441a      	add	r2, r3
 800b396:	4620      	mov	r0, r4
 800b398:	9206      	str	r2, [sp, #24]
 800b39a:	f001 f943 	bl	800c624 <__i2b>
 800b39e:	4607      	mov	r7, r0
 800b3a0:	b165      	cbz	r5, 800b3bc <_dtoa_r+0x774>
 800b3a2:	9b06      	ldr	r3, [sp, #24]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd09      	ble.n	800b3bc <_dtoa_r+0x774>
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	9a05      	ldr	r2, [sp, #20]
 800b3ac:	bfa8      	it	ge
 800b3ae:	462b      	movge	r3, r5
 800b3b0:	1ad2      	subs	r2, r2, r3
 800b3b2:	9205      	str	r2, [sp, #20]
 800b3b4:	9a06      	ldr	r2, [sp, #24]
 800b3b6:	1aed      	subs	r5, r5, r3
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	9306      	str	r3, [sp, #24]
 800b3bc:	9b08      	ldr	r3, [sp, #32]
 800b3be:	b1f3      	cbz	r3, 800b3fe <_dtoa_r+0x7b6>
 800b3c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 80a3 	beq.w	800b50e <_dtoa_r+0x8c6>
 800b3c8:	2e00      	cmp	r6, #0
 800b3ca:	dd10      	ble.n	800b3ee <_dtoa_r+0x7a6>
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f001 f9e7 	bl	800c7a4 <__pow5mult>
 800b3d6:	4652      	mov	r2, sl
 800b3d8:	4601      	mov	r1, r0
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f001 f937 	bl	800c650 <__multiply>
 800b3e2:	4651      	mov	r1, sl
 800b3e4:	4680      	mov	r8, r0
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f001 f81c 	bl	800c424 <_Bfree>
 800b3ec:	46c2      	mov	sl, r8
 800b3ee:	9b08      	ldr	r3, [sp, #32]
 800b3f0:	1b9a      	subs	r2, r3, r6
 800b3f2:	d004      	beq.n	800b3fe <_dtoa_r+0x7b6>
 800b3f4:	4651      	mov	r1, sl
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f001 f9d4 	bl	800c7a4 <__pow5mult>
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	2101      	movs	r1, #1
 800b400:	4620      	mov	r0, r4
 800b402:	f001 f90f 	bl	800c624 <__i2b>
 800b406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	4606      	mov	r6, r0
 800b40c:	f340 8081 	ble.w	800b512 <_dtoa_r+0x8ca>
 800b410:	461a      	mov	r2, r3
 800b412:	4601      	mov	r1, r0
 800b414:	4620      	mov	r0, r4
 800b416:	f001 f9c5 	bl	800c7a4 <__pow5mult>
 800b41a:	9b07      	ldr	r3, [sp, #28]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	4606      	mov	r6, r0
 800b420:	dd7a      	ble.n	800b518 <_dtoa_r+0x8d0>
 800b422:	f04f 0800 	mov.w	r8, #0
 800b426:	6933      	ldr	r3, [r6, #16]
 800b428:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b42c:	6918      	ldr	r0, [r3, #16]
 800b42e:	f001 f8ab 	bl	800c588 <__hi0bits>
 800b432:	f1c0 0020 	rsb	r0, r0, #32
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	4418      	add	r0, r3
 800b43a:	f010 001f 	ands.w	r0, r0, #31
 800b43e:	f000 8094 	beq.w	800b56a <_dtoa_r+0x922>
 800b442:	f1c0 0320 	rsb	r3, r0, #32
 800b446:	2b04      	cmp	r3, #4
 800b448:	f340 8085 	ble.w	800b556 <_dtoa_r+0x90e>
 800b44c:	9b05      	ldr	r3, [sp, #20]
 800b44e:	f1c0 001c 	rsb	r0, r0, #28
 800b452:	4403      	add	r3, r0
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	9b06      	ldr	r3, [sp, #24]
 800b458:	4403      	add	r3, r0
 800b45a:	4405      	add	r5, r0
 800b45c:	9306      	str	r3, [sp, #24]
 800b45e:	9b05      	ldr	r3, [sp, #20]
 800b460:	2b00      	cmp	r3, #0
 800b462:	dd05      	ble.n	800b470 <_dtoa_r+0x828>
 800b464:	4651      	mov	r1, sl
 800b466:	461a      	mov	r2, r3
 800b468:	4620      	mov	r0, r4
 800b46a:	f001 f9f5 	bl	800c858 <__lshift>
 800b46e:	4682      	mov	sl, r0
 800b470:	9b06      	ldr	r3, [sp, #24]
 800b472:	2b00      	cmp	r3, #0
 800b474:	dd05      	ble.n	800b482 <_dtoa_r+0x83a>
 800b476:	4631      	mov	r1, r6
 800b478:	461a      	mov	r2, r3
 800b47a:	4620      	mov	r0, r4
 800b47c:	f001 f9ec 	bl	800c858 <__lshift>
 800b480:	4606      	mov	r6, r0
 800b482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b484:	2b00      	cmp	r3, #0
 800b486:	d072      	beq.n	800b56e <_dtoa_r+0x926>
 800b488:	4631      	mov	r1, r6
 800b48a:	4650      	mov	r0, sl
 800b48c:	f001 fa50 	bl	800c930 <__mcmp>
 800b490:	2800      	cmp	r0, #0
 800b492:	da6c      	bge.n	800b56e <_dtoa_r+0x926>
 800b494:	2300      	movs	r3, #0
 800b496:	4651      	mov	r1, sl
 800b498:	220a      	movs	r2, #10
 800b49a:	4620      	mov	r0, r4
 800b49c:	f000 ffe4 	bl	800c468 <__multadd>
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b4a6:	4682      	mov	sl, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 81b0 	beq.w	800b80e <_dtoa_r+0xbc6>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	220a      	movs	r2, #10
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 ffd7 	bl	800c468 <__multadd>
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	4607      	mov	r7, r0
 800b4c0:	f300 8096 	bgt.w	800b5f0 <_dtoa_r+0x9a8>
 800b4c4:	9b07      	ldr	r3, [sp, #28]
 800b4c6:	2b02      	cmp	r3, #2
 800b4c8:	dc59      	bgt.n	800b57e <_dtoa_r+0x936>
 800b4ca:	e091      	b.n	800b5f0 <_dtoa_r+0x9a8>
 800b4cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4d2:	e758      	b.n	800b386 <_dtoa_r+0x73e>
 800b4d4:	9b04      	ldr	r3, [sp, #16]
 800b4d6:	1e5e      	subs	r6, r3, #1
 800b4d8:	9b08      	ldr	r3, [sp, #32]
 800b4da:	42b3      	cmp	r3, r6
 800b4dc:	bfbf      	itttt	lt
 800b4de:	9b08      	ldrlt	r3, [sp, #32]
 800b4e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b4e2:	9608      	strlt	r6, [sp, #32]
 800b4e4:	1af3      	sublt	r3, r6, r3
 800b4e6:	bfb4      	ite	lt
 800b4e8:	18d2      	addlt	r2, r2, r3
 800b4ea:	1b9e      	subge	r6, r3, r6
 800b4ec:	9b04      	ldr	r3, [sp, #16]
 800b4ee:	bfbc      	itt	lt
 800b4f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b4f2:	2600      	movlt	r6, #0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	bfb7      	itett	lt
 800b4f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b4fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b500:	1a9d      	sublt	r5, r3, r2
 800b502:	2300      	movlt	r3, #0
 800b504:	e741      	b.n	800b38a <_dtoa_r+0x742>
 800b506:	9e08      	ldr	r6, [sp, #32]
 800b508:	9d05      	ldr	r5, [sp, #20]
 800b50a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b50c:	e748      	b.n	800b3a0 <_dtoa_r+0x758>
 800b50e:	9a08      	ldr	r2, [sp, #32]
 800b510:	e770      	b.n	800b3f4 <_dtoa_r+0x7ac>
 800b512:	9b07      	ldr	r3, [sp, #28]
 800b514:	2b01      	cmp	r3, #1
 800b516:	dc19      	bgt.n	800b54c <_dtoa_r+0x904>
 800b518:	9b02      	ldr	r3, [sp, #8]
 800b51a:	b9bb      	cbnz	r3, 800b54c <_dtoa_r+0x904>
 800b51c:	9b03      	ldr	r3, [sp, #12]
 800b51e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b522:	b99b      	cbnz	r3, 800b54c <_dtoa_r+0x904>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b52a:	0d1b      	lsrs	r3, r3, #20
 800b52c:	051b      	lsls	r3, r3, #20
 800b52e:	b183      	cbz	r3, 800b552 <_dtoa_r+0x90a>
 800b530:	9b05      	ldr	r3, [sp, #20]
 800b532:	3301      	adds	r3, #1
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	9b06      	ldr	r3, [sp, #24]
 800b538:	3301      	adds	r3, #1
 800b53a:	9306      	str	r3, [sp, #24]
 800b53c:	f04f 0801 	mov.w	r8, #1
 800b540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b542:	2b00      	cmp	r3, #0
 800b544:	f47f af6f 	bne.w	800b426 <_dtoa_r+0x7de>
 800b548:	2001      	movs	r0, #1
 800b54a:	e774      	b.n	800b436 <_dtoa_r+0x7ee>
 800b54c:	f04f 0800 	mov.w	r8, #0
 800b550:	e7f6      	b.n	800b540 <_dtoa_r+0x8f8>
 800b552:	4698      	mov	r8, r3
 800b554:	e7f4      	b.n	800b540 <_dtoa_r+0x8f8>
 800b556:	d082      	beq.n	800b45e <_dtoa_r+0x816>
 800b558:	9a05      	ldr	r2, [sp, #20]
 800b55a:	331c      	adds	r3, #28
 800b55c:	441a      	add	r2, r3
 800b55e:	9205      	str	r2, [sp, #20]
 800b560:	9a06      	ldr	r2, [sp, #24]
 800b562:	441a      	add	r2, r3
 800b564:	441d      	add	r5, r3
 800b566:	9206      	str	r2, [sp, #24]
 800b568:	e779      	b.n	800b45e <_dtoa_r+0x816>
 800b56a:	4603      	mov	r3, r0
 800b56c:	e7f4      	b.n	800b558 <_dtoa_r+0x910>
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	2b00      	cmp	r3, #0
 800b572:	dc37      	bgt.n	800b5e4 <_dtoa_r+0x99c>
 800b574:	9b07      	ldr	r3, [sp, #28]
 800b576:	2b02      	cmp	r3, #2
 800b578:	dd34      	ble.n	800b5e4 <_dtoa_r+0x99c>
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	9b01      	ldr	r3, [sp, #4]
 800b580:	b963      	cbnz	r3, 800b59c <_dtoa_r+0x954>
 800b582:	4631      	mov	r1, r6
 800b584:	2205      	movs	r2, #5
 800b586:	4620      	mov	r0, r4
 800b588:	f000 ff6e 	bl	800c468 <__multadd>
 800b58c:	4601      	mov	r1, r0
 800b58e:	4606      	mov	r6, r0
 800b590:	4650      	mov	r0, sl
 800b592:	f001 f9cd 	bl	800c930 <__mcmp>
 800b596:	2800      	cmp	r0, #0
 800b598:	f73f adbb 	bgt.w	800b112 <_dtoa_r+0x4ca>
 800b59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59e:	9d00      	ldr	r5, [sp, #0]
 800b5a0:	ea6f 0b03 	mvn.w	fp, r3
 800b5a4:	f04f 0800 	mov.w	r8, #0
 800b5a8:	4631      	mov	r1, r6
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 ff3a 	bl	800c424 <_Bfree>
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	f43f aeab 	beq.w	800b30c <_dtoa_r+0x6c4>
 800b5b6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ba:	d005      	beq.n	800b5c8 <_dtoa_r+0x980>
 800b5bc:	45b8      	cmp	r8, r7
 800b5be:	d003      	beq.n	800b5c8 <_dtoa_r+0x980>
 800b5c0:	4641      	mov	r1, r8
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 ff2e 	bl	800c424 <_Bfree>
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f000 ff2a 	bl	800c424 <_Bfree>
 800b5d0:	e69c      	b.n	800b30c <_dtoa_r+0x6c4>
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	e7e1      	b.n	800b59c <_dtoa_r+0x954>
 800b5d8:	46bb      	mov	fp, r7
 800b5da:	4637      	mov	r7, r6
 800b5dc:	e599      	b.n	800b112 <_dtoa_r+0x4ca>
 800b5de:	bf00      	nop
 800b5e0:	40240000 	.word	0x40240000
 800b5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f000 80c8 	beq.w	800b77c <_dtoa_r+0xb34>
 800b5ec:	9b04      	ldr	r3, [sp, #16]
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	dd05      	ble.n	800b600 <_dtoa_r+0x9b8>
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f001 f92d 	bl	800c858 <__lshift>
 800b5fe:	4607      	mov	r7, r0
 800b600:	f1b8 0f00 	cmp.w	r8, #0
 800b604:	d05b      	beq.n	800b6be <_dtoa_r+0xa76>
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fecb 	bl	800c3a4 <_Balloc>
 800b60e:	4605      	mov	r5, r0
 800b610:	b928      	cbnz	r0, 800b61e <_dtoa_r+0x9d6>
 800b612:	4b83      	ldr	r3, [pc, #524]	; (800b820 <_dtoa_r+0xbd8>)
 800b614:	4602      	mov	r2, r0
 800b616:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b61a:	f7ff bb2e 	b.w	800ac7a <_dtoa_r+0x32>
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	3202      	adds	r2, #2
 800b622:	0092      	lsls	r2, r2, #2
 800b624:	f107 010c 	add.w	r1, r7, #12
 800b628:	300c      	adds	r0, #12
 800b62a:	f7ff fa48 	bl	800aabe <memcpy>
 800b62e:	2201      	movs	r2, #1
 800b630:	4629      	mov	r1, r5
 800b632:	4620      	mov	r0, r4
 800b634:	f001 f910 	bl	800c858 <__lshift>
 800b638:	9b00      	ldr	r3, [sp, #0]
 800b63a:	3301      	adds	r3, #1
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b642:	4413      	add	r3, r2
 800b644:	9308      	str	r3, [sp, #32]
 800b646:	9b02      	ldr	r3, [sp, #8]
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	46b8      	mov	r8, r7
 800b64e:	9306      	str	r3, [sp, #24]
 800b650:	4607      	mov	r7, r0
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	4631      	mov	r1, r6
 800b656:	3b01      	subs	r3, #1
 800b658:	4650      	mov	r0, sl
 800b65a:	9301      	str	r3, [sp, #4]
 800b65c:	f7ff fa6c 	bl	800ab38 <quorem>
 800b660:	4641      	mov	r1, r8
 800b662:	9002      	str	r0, [sp, #8]
 800b664:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b668:	4650      	mov	r0, sl
 800b66a:	f001 f961 	bl	800c930 <__mcmp>
 800b66e:	463a      	mov	r2, r7
 800b670:	9005      	str	r0, [sp, #20]
 800b672:	4631      	mov	r1, r6
 800b674:	4620      	mov	r0, r4
 800b676:	f001 f977 	bl	800c968 <__mdiff>
 800b67a:	68c2      	ldr	r2, [r0, #12]
 800b67c:	4605      	mov	r5, r0
 800b67e:	bb02      	cbnz	r2, 800b6c2 <_dtoa_r+0xa7a>
 800b680:	4601      	mov	r1, r0
 800b682:	4650      	mov	r0, sl
 800b684:	f001 f954 	bl	800c930 <__mcmp>
 800b688:	4602      	mov	r2, r0
 800b68a:	4629      	mov	r1, r5
 800b68c:	4620      	mov	r0, r4
 800b68e:	9209      	str	r2, [sp, #36]	; 0x24
 800b690:	f000 fec8 	bl	800c424 <_Bfree>
 800b694:	9b07      	ldr	r3, [sp, #28]
 800b696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b698:	9d04      	ldr	r5, [sp, #16]
 800b69a:	ea43 0102 	orr.w	r1, r3, r2
 800b69e:	9b06      	ldr	r3, [sp, #24]
 800b6a0:	4319      	orrs	r1, r3
 800b6a2:	d110      	bne.n	800b6c6 <_dtoa_r+0xa7e>
 800b6a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6a8:	d029      	beq.n	800b6fe <_dtoa_r+0xab6>
 800b6aa:	9b05      	ldr	r3, [sp, #20]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	dd02      	ble.n	800b6b6 <_dtoa_r+0xa6e>
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	f883 9000 	strb.w	r9, [r3]
 800b6bc:	e774      	b.n	800b5a8 <_dtoa_r+0x960>
 800b6be:	4638      	mov	r0, r7
 800b6c0:	e7ba      	b.n	800b638 <_dtoa_r+0x9f0>
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7e1      	b.n	800b68a <_dtoa_r+0xa42>
 800b6c6:	9b05      	ldr	r3, [sp, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	db04      	blt.n	800b6d6 <_dtoa_r+0xa8e>
 800b6cc:	9907      	ldr	r1, [sp, #28]
 800b6ce:	430b      	orrs	r3, r1
 800b6d0:	9906      	ldr	r1, [sp, #24]
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	d120      	bne.n	800b718 <_dtoa_r+0xad0>
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	dded      	ble.n	800b6b6 <_dtoa_r+0xa6e>
 800b6da:	4651      	mov	r1, sl
 800b6dc:	2201      	movs	r2, #1
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f001 f8ba 	bl	800c858 <__lshift>
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4682      	mov	sl, r0
 800b6e8:	f001 f922 	bl	800c930 <__mcmp>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	dc03      	bgt.n	800b6f8 <_dtoa_r+0xab0>
 800b6f0:	d1e1      	bne.n	800b6b6 <_dtoa_r+0xa6e>
 800b6f2:	f019 0f01 	tst.w	r9, #1
 800b6f6:	d0de      	beq.n	800b6b6 <_dtoa_r+0xa6e>
 800b6f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6fc:	d1d8      	bne.n	800b6b0 <_dtoa_r+0xa68>
 800b6fe:	9a01      	ldr	r2, [sp, #4]
 800b700:	2339      	movs	r3, #57	; 0x39
 800b702:	7013      	strb	r3, [r2, #0]
 800b704:	462b      	mov	r3, r5
 800b706:	461d      	mov	r5, r3
 800b708:	3b01      	subs	r3, #1
 800b70a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b70e:	2a39      	cmp	r2, #57	; 0x39
 800b710:	d06c      	beq.n	800b7ec <_dtoa_r+0xba4>
 800b712:	3201      	adds	r2, #1
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	e747      	b.n	800b5a8 <_dtoa_r+0x960>
 800b718:	2a00      	cmp	r2, #0
 800b71a:	dd07      	ble.n	800b72c <_dtoa_r+0xae4>
 800b71c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b720:	d0ed      	beq.n	800b6fe <_dtoa_r+0xab6>
 800b722:	9a01      	ldr	r2, [sp, #4]
 800b724:	f109 0301 	add.w	r3, r9, #1
 800b728:	7013      	strb	r3, [r2, #0]
 800b72a:	e73d      	b.n	800b5a8 <_dtoa_r+0x960>
 800b72c:	9b04      	ldr	r3, [sp, #16]
 800b72e:	9a08      	ldr	r2, [sp, #32]
 800b730:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b734:	4293      	cmp	r3, r2
 800b736:	d043      	beq.n	800b7c0 <_dtoa_r+0xb78>
 800b738:	4651      	mov	r1, sl
 800b73a:	2300      	movs	r3, #0
 800b73c:	220a      	movs	r2, #10
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 fe92 	bl	800c468 <__multadd>
 800b744:	45b8      	cmp	r8, r7
 800b746:	4682      	mov	sl, r0
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	f04f 020a 	mov.w	r2, #10
 800b750:	4641      	mov	r1, r8
 800b752:	4620      	mov	r0, r4
 800b754:	d107      	bne.n	800b766 <_dtoa_r+0xb1e>
 800b756:	f000 fe87 	bl	800c468 <__multadd>
 800b75a:	4680      	mov	r8, r0
 800b75c:	4607      	mov	r7, r0
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	e775      	b.n	800b652 <_dtoa_r+0xa0a>
 800b766:	f000 fe7f 	bl	800c468 <__multadd>
 800b76a:	4639      	mov	r1, r7
 800b76c:	4680      	mov	r8, r0
 800b76e:	2300      	movs	r3, #0
 800b770:	220a      	movs	r2, #10
 800b772:	4620      	mov	r0, r4
 800b774:	f000 fe78 	bl	800c468 <__multadd>
 800b778:	4607      	mov	r7, r0
 800b77a:	e7f0      	b.n	800b75e <_dtoa_r+0xb16>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	9d00      	ldr	r5, [sp, #0]
 800b782:	4631      	mov	r1, r6
 800b784:	4650      	mov	r0, sl
 800b786:	f7ff f9d7 	bl	800ab38 <quorem>
 800b78a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	f805 9b01 	strb.w	r9, [r5], #1
 800b794:	1aea      	subs	r2, r5, r3
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	4293      	cmp	r3, r2
 800b79a:	dd07      	ble.n	800b7ac <_dtoa_r+0xb64>
 800b79c:	4651      	mov	r1, sl
 800b79e:	2300      	movs	r3, #0
 800b7a0:	220a      	movs	r2, #10
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 fe60 	bl	800c468 <__multadd>
 800b7a8:	4682      	mov	sl, r0
 800b7aa:	e7ea      	b.n	800b782 <_dtoa_r+0xb3a>
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfc8      	it	gt
 800b7b2:	461d      	movgt	r5, r3
 800b7b4:	9b00      	ldr	r3, [sp, #0]
 800b7b6:	bfd8      	it	le
 800b7b8:	2501      	movle	r5, #1
 800b7ba:	441d      	add	r5, r3
 800b7bc:	f04f 0800 	mov.w	r8, #0
 800b7c0:	4651      	mov	r1, sl
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f001 f847 	bl	800c858 <__lshift>
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4682      	mov	sl, r0
 800b7ce:	f001 f8af 	bl	800c930 <__mcmp>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	dc96      	bgt.n	800b704 <_dtoa_r+0xabc>
 800b7d6:	d102      	bne.n	800b7de <_dtoa_r+0xb96>
 800b7d8:	f019 0f01 	tst.w	r9, #1
 800b7dc:	d192      	bne.n	800b704 <_dtoa_r+0xabc>
 800b7de:	462b      	mov	r3, r5
 800b7e0:	461d      	mov	r5, r3
 800b7e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e6:	2a30      	cmp	r2, #48	; 0x30
 800b7e8:	d0fa      	beq.n	800b7e0 <_dtoa_r+0xb98>
 800b7ea:	e6dd      	b.n	800b5a8 <_dtoa_r+0x960>
 800b7ec:	9a00      	ldr	r2, [sp, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d189      	bne.n	800b706 <_dtoa_r+0xabe>
 800b7f2:	f10b 0b01 	add.w	fp, fp, #1
 800b7f6:	2331      	movs	r3, #49	; 0x31
 800b7f8:	e796      	b.n	800b728 <_dtoa_r+0xae0>
 800b7fa:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <_dtoa_r+0xbdc>)
 800b7fc:	f7ff ba99 	b.w	800ad32 <_dtoa_r+0xea>
 800b800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f aa6d 	bne.w	800ace2 <_dtoa_r+0x9a>
 800b808:	4b07      	ldr	r3, [pc, #28]	; (800b828 <_dtoa_r+0xbe0>)
 800b80a:	f7ff ba92 	b.w	800ad32 <_dtoa_r+0xea>
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	dcb5      	bgt.n	800b780 <_dtoa_r+0xb38>
 800b814:	9b07      	ldr	r3, [sp, #28]
 800b816:	2b02      	cmp	r3, #2
 800b818:	f73f aeb1 	bgt.w	800b57e <_dtoa_r+0x936>
 800b81c:	e7b0      	b.n	800b780 <_dtoa_r+0xb38>
 800b81e:	bf00      	nop
 800b820:	0800d9ab 	.word	0x0800d9ab
 800b824:	0800d710 	.word	0x0800d710
 800b828:	0800d946 	.word	0x0800d946

0800b82c <_free_r>:
 800b82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b82e:	2900      	cmp	r1, #0
 800b830:	d044      	beq.n	800b8bc <_free_r+0x90>
 800b832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b836:	9001      	str	r0, [sp, #4]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f1a1 0404 	sub.w	r4, r1, #4
 800b83e:	bfb8      	it	lt
 800b840:	18e4      	addlt	r4, r4, r3
 800b842:	f7fe f893 	bl	800996c <__malloc_lock>
 800b846:	4a1e      	ldr	r2, [pc, #120]	; (800b8c0 <_free_r+0x94>)
 800b848:	9801      	ldr	r0, [sp, #4]
 800b84a:	6813      	ldr	r3, [r2, #0]
 800b84c:	b933      	cbnz	r3, 800b85c <_free_r+0x30>
 800b84e:	6063      	str	r3, [r4, #4]
 800b850:	6014      	str	r4, [r2, #0]
 800b852:	b003      	add	sp, #12
 800b854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b858:	f7fe b88e 	b.w	8009978 <__malloc_unlock>
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	d908      	bls.n	800b872 <_free_r+0x46>
 800b860:	6825      	ldr	r5, [r4, #0]
 800b862:	1961      	adds	r1, r4, r5
 800b864:	428b      	cmp	r3, r1
 800b866:	bf01      	itttt	eq
 800b868:	6819      	ldreq	r1, [r3, #0]
 800b86a:	685b      	ldreq	r3, [r3, #4]
 800b86c:	1949      	addeq	r1, r1, r5
 800b86e:	6021      	streq	r1, [r4, #0]
 800b870:	e7ed      	b.n	800b84e <_free_r+0x22>
 800b872:	461a      	mov	r2, r3
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	b10b      	cbz	r3, 800b87c <_free_r+0x50>
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d9fa      	bls.n	800b872 <_free_r+0x46>
 800b87c:	6811      	ldr	r1, [r2, #0]
 800b87e:	1855      	adds	r5, r2, r1
 800b880:	42a5      	cmp	r5, r4
 800b882:	d10b      	bne.n	800b89c <_free_r+0x70>
 800b884:	6824      	ldr	r4, [r4, #0]
 800b886:	4421      	add	r1, r4
 800b888:	1854      	adds	r4, r2, r1
 800b88a:	42a3      	cmp	r3, r4
 800b88c:	6011      	str	r1, [r2, #0]
 800b88e:	d1e0      	bne.n	800b852 <_free_r+0x26>
 800b890:	681c      	ldr	r4, [r3, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	6053      	str	r3, [r2, #4]
 800b896:	440c      	add	r4, r1
 800b898:	6014      	str	r4, [r2, #0]
 800b89a:	e7da      	b.n	800b852 <_free_r+0x26>
 800b89c:	d902      	bls.n	800b8a4 <_free_r+0x78>
 800b89e:	230c      	movs	r3, #12
 800b8a0:	6003      	str	r3, [r0, #0]
 800b8a2:	e7d6      	b.n	800b852 <_free_r+0x26>
 800b8a4:	6825      	ldr	r5, [r4, #0]
 800b8a6:	1961      	adds	r1, r4, r5
 800b8a8:	428b      	cmp	r3, r1
 800b8aa:	bf04      	itt	eq
 800b8ac:	6819      	ldreq	r1, [r3, #0]
 800b8ae:	685b      	ldreq	r3, [r3, #4]
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	bf04      	itt	eq
 800b8b4:	1949      	addeq	r1, r1, r5
 800b8b6:	6021      	streq	r1, [r4, #0]
 800b8b8:	6054      	str	r4, [r2, #4]
 800b8ba:	e7ca      	b.n	800b852 <_free_r+0x26>
 800b8bc:	b003      	add	sp, #12
 800b8be:	bd30      	pop	{r4, r5, pc}
 800b8c0:	20003af4 	.word	0x20003af4

0800b8c4 <rshift>:
 800b8c4:	6903      	ldr	r3, [r0, #16]
 800b8c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8d2:	f100 0414 	add.w	r4, r0, #20
 800b8d6:	dd45      	ble.n	800b964 <rshift+0xa0>
 800b8d8:	f011 011f 	ands.w	r1, r1, #31
 800b8dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8e4:	d10c      	bne.n	800b900 <rshift+0x3c>
 800b8e6:	f100 0710 	add.w	r7, r0, #16
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	42b1      	cmp	r1, r6
 800b8ee:	d334      	bcc.n	800b95a <rshift+0x96>
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	1eea      	subs	r2, r5, #3
 800b8f6:	4296      	cmp	r6, r2
 800b8f8:	bf38      	it	cc
 800b8fa:	2300      	movcc	r3, #0
 800b8fc:	4423      	add	r3, r4
 800b8fe:	e015      	b.n	800b92c <rshift+0x68>
 800b900:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b904:	f1c1 0820 	rsb	r8, r1, #32
 800b908:	40cf      	lsrs	r7, r1
 800b90a:	f105 0e04 	add.w	lr, r5, #4
 800b90e:	46a1      	mov	r9, r4
 800b910:	4576      	cmp	r6, lr
 800b912:	46f4      	mov	ip, lr
 800b914:	d815      	bhi.n	800b942 <rshift+0x7e>
 800b916:	1a9a      	subs	r2, r3, r2
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	3a04      	subs	r2, #4
 800b91c:	3501      	adds	r5, #1
 800b91e:	42ae      	cmp	r6, r5
 800b920:	bf38      	it	cc
 800b922:	2200      	movcc	r2, #0
 800b924:	18a3      	adds	r3, r4, r2
 800b926:	50a7      	str	r7, [r4, r2]
 800b928:	b107      	cbz	r7, 800b92c <rshift+0x68>
 800b92a:	3304      	adds	r3, #4
 800b92c:	1b1a      	subs	r2, r3, r4
 800b92e:	42a3      	cmp	r3, r4
 800b930:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b934:	bf08      	it	eq
 800b936:	2300      	moveq	r3, #0
 800b938:	6102      	str	r2, [r0, #16]
 800b93a:	bf08      	it	eq
 800b93c:	6143      	streq	r3, [r0, #20]
 800b93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b942:	f8dc c000 	ldr.w	ip, [ip]
 800b946:	fa0c fc08 	lsl.w	ip, ip, r8
 800b94a:	ea4c 0707 	orr.w	r7, ip, r7
 800b94e:	f849 7b04 	str.w	r7, [r9], #4
 800b952:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b956:	40cf      	lsrs	r7, r1
 800b958:	e7da      	b.n	800b910 <rshift+0x4c>
 800b95a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b95e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b962:	e7c3      	b.n	800b8ec <rshift+0x28>
 800b964:	4623      	mov	r3, r4
 800b966:	e7e1      	b.n	800b92c <rshift+0x68>

0800b968 <__hexdig_fun>:
 800b968:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b96c:	2b09      	cmp	r3, #9
 800b96e:	d802      	bhi.n	800b976 <__hexdig_fun+0xe>
 800b970:	3820      	subs	r0, #32
 800b972:	b2c0      	uxtb	r0, r0
 800b974:	4770      	bx	lr
 800b976:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b97a:	2b05      	cmp	r3, #5
 800b97c:	d801      	bhi.n	800b982 <__hexdig_fun+0x1a>
 800b97e:	3847      	subs	r0, #71	; 0x47
 800b980:	e7f7      	b.n	800b972 <__hexdig_fun+0xa>
 800b982:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b986:	2b05      	cmp	r3, #5
 800b988:	d801      	bhi.n	800b98e <__hexdig_fun+0x26>
 800b98a:	3827      	subs	r0, #39	; 0x27
 800b98c:	e7f1      	b.n	800b972 <__hexdig_fun+0xa>
 800b98e:	2000      	movs	r0, #0
 800b990:	4770      	bx	lr
	...

0800b994 <__gethex>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4617      	mov	r7, r2
 800b99a:	680a      	ldr	r2, [r1, #0]
 800b99c:	b085      	sub	sp, #20
 800b99e:	f102 0b02 	add.w	fp, r2, #2
 800b9a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b9a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b9aa:	4681      	mov	r9, r0
 800b9ac:	468a      	mov	sl, r1
 800b9ae:	9302      	str	r3, [sp, #8]
 800b9b0:	32fe      	adds	r2, #254	; 0xfe
 800b9b2:	eb02 030b 	add.w	r3, r2, fp
 800b9b6:	46d8      	mov	r8, fp
 800b9b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	2830      	cmp	r0, #48	; 0x30
 800b9c0:	d0f7      	beq.n	800b9b2 <__gethex+0x1e>
 800b9c2:	f7ff ffd1 	bl	800b968 <__hexdig_fun>
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d138      	bne.n	800ba3e <__gethex+0xaa>
 800b9cc:	49a7      	ldr	r1, [pc, #668]	; (800bc6c <__gethex+0x2d8>)
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	f7fe ff67 	bl	800a8a4 <strncmp>
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d169      	bne.n	800bab0 <__gethex+0x11c>
 800b9dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b9e0:	465d      	mov	r5, fp
 800b9e2:	f7ff ffc1 	bl	800b968 <__hexdig_fun>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d064      	beq.n	800bab4 <__gethex+0x120>
 800b9ea:	465a      	mov	r2, fp
 800b9ec:	7810      	ldrb	r0, [r2, #0]
 800b9ee:	2830      	cmp	r0, #48	; 0x30
 800b9f0:	4690      	mov	r8, r2
 800b9f2:	f102 0201 	add.w	r2, r2, #1
 800b9f6:	d0f9      	beq.n	800b9ec <__gethex+0x58>
 800b9f8:	f7ff ffb6 	bl	800b968 <__hexdig_fun>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	fab0 f480 	clz	r4, r0
 800ba02:	0964      	lsrs	r4, r4, #5
 800ba04:	465e      	mov	r6, fp
 800ba06:	9301      	str	r3, [sp, #4]
 800ba08:	4642      	mov	r2, r8
 800ba0a:	4615      	mov	r5, r2
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	7828      	ldrb	r0, [r5, #0]
 800ba10:	f7ff ffaa 	bl	800b968 <__hexdig_fun>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1f8      	bne.n	800ba0a <__gethex+0x76>
 800ba18:	4994      	ldr	r1, [pc, #592]	; (800bc6c <__gethex+0x2d8>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f7fe ff41 	bl	800a8a4 <strncmp>
 800ba22:	b978      	cbnz	r0, 800ba44 <__gethex+0xb0>
 800ba24:	b946      	cbnz	r6, 800ba38 <__gethex+0xa4>
 800ba26:	1c6e      	adds	r6, r5, #1
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4615      	mov	r5, r2
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	7828      	ldrb	r0, [r5, #0]
 800ba30:	f7ff ff9a 	bl	800b968 <__hexdig_fun>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d1f8      	bne.n	800ba2a <__gethex+0x96>
 800ba38:	1b73      	subs	r3, r6, r5
 800ba3a:	009e      	lsls	r6, r3, #2
 800ba3c:	e004      	b.n	800ba48 <__gethex+0xb4>
 800ba3e:	2400      	movs	r4, #0
 800ba40:	4626      	mov	r6, r4
 800ba42:	e7e1      	b.n	800ba08 <__gethex+0x74>
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	d1f7      	bne.n	800ba38 <__gethex+0xa4>
 800ba48:	782b      	ldrb	r3, [r5, #0]
 800ba4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba4e:	2b50      	cmp	r3, #80	; 0x50
 800ba50:	d13d      	bne.n	800bace <__gethex+0x13a>
 800ba52:	786b      	ldrb	r3, [r5, #1]
 800ba54:	2b2b      	cmp	r3, #43	; 0x2b
 800ba56:	d02f      	beq.n	800bab8 <__gethex+0x124>
 800ba58:	2b2d      	cmp	r3, #45	; 0x2d
 800ba5a:	d031      	beq.n	800bac0 <__gethex+0x12c>
 800ba5c:	1c69      	adds	r1, r5, #1
 800ba5e:	f04f 0b00 	mov.w	fp, #0
 800ba62:	7808      	ldrb	r0, [r1, #0]
 800ba64:	f7ff ff80 	bl	800b968 <__hexdig_fun>
 800ba68:	1e42      	subs	r2, r0, #1
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	2a18      	cmp	r2, #24
 800ba6e:	d82e      	bhi.n	800bace <__gethex+0x13a>
 800ba70:	f1a0 0210 	sub.w	r2, r0, #16
 800ba74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba78:	f7ff ff76 	bl	800b968 <__hexdig_fun>
 800ba7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ba80:	fa5f fc8c 	uxtb.w	ip, ip
 800ba84:	f1bc 0f18 	cmp.w	ip, #24
 800ba88:	d91d      	bls.n	800bac6 <__gethex+0x132>
 800ba8a:	f1bb 0f00 	cmp.w	fp, #0
 800ba8e:	d000      	beq.n	800ba92 <__gethex+0xfe>
 800ba90:	4252      	negs	r2, r2
 800ba92:	4416      	add	r6, r2
 800ba94:	f8ca 1000 	str.w	r1, [sl]
 800ba98:	b1dc      	cbz	r4, 800bad2 <__gethex+0x13e>
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bf14      	ite	ne
 800baa0:	f04f 0800 	movne.w	r8, #0
 800baa4:	f04f 0806 	moveq.w	r8, #6
 800baa8:	4640      	mov	r0, r8
 800baaa:	b005      	add	sp, #20
 800baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab0:	4645      	mov	r5, r8
 800bab2:	4626      	mov	r6, r4
 800bab4:	2401      	movs	r4, #1
 800bab6:	e7c7      	b.n	800ba48 <__gethex+0xb4>
 800bab8:	f04f 0b00 	mov.w	fp, #0
 800babc:	1ca9      	adds	r1, r5, #2
 800babe:	e7d0      	b.n	800ba62 <__gethex+0xce>
 800bac0:	f04f 0b01 	mov.w	fp, #1
 800bac4:	e7fa      	b.n	800babc <__gethex+0x128>
 800bac6:	230a      	movs	r3, #10
 800bac8:	fb03 0002 	mla	r0, r3, r2, r0
 800bacc:	e7d0      	b.n	800ba70 <__gethex+0xdc>
 800bace:	4629      	mov	r1, r5
 800bad0:	e7e0      	b.n	800ba94 <__gethex+0x100>
 800bad2:	eba5 0308 	sub.w	r3, r5, r8
 800bad6:	3b01      	subs	r3, #1
 800bad8:	4621      	mov	r1, r4
 800bada:	2b07      	cmp	r3, #7
 800badc:	dc0a      	bgt.n	800baf4 <__gethex+0x160>
 800bade:	4648      	mov	r0, r9
 800bae0:	f000 fc60 	bl	800c3a4 <_Balloc>
 800bae4:	4604      	mov	r4, r0
 800bae6:	b940      	cbnz	r0, 800bafa <__gethex+0x166>
 800bae8:	4b61      	ldr	r3, [pc, #388]	; (800bc70 <__gethex+0x2dc>)
 800baea:	4602      	mov	r2, r0
 800baec:	21e4      	movs	r1, #228	; 0xe4
 800baee:	4861      	ldr	r0, [pc, #388]	; (800bc74 <__gethex+0x2e0>)
 800baf0:	f7ff f804 	bl	800aafc <__assert_func>
 800baf4:	3101      	adds	r1, #1
 800baf6:	105b      	asrs	r3, r3, #1
 800baf8:	e7ef      	b.n	800bada <__gethex+0x146>
 800bafa:	f100 0a14 	add.w	sl, r0, #20
 800bafe:	2300      	movs	r3, #0
 800bb00:	495a      	ldr	r1, [pc, #360]	; (800bc6c <__gethex+0x2d8>)
 800bb02:	f8cd a004 	str.w	sl, [sp, #4]
 800bb06:	469b      	mov	fp, r3
 800bb08:	45a8      	cmp	r8, r5
 800bb0a:	d342      	bcc.n	800bb92 <__gethex+0x1fe>
 800bb0c:	9801      	ldr	r0, [sp, #4]
 800bb0e:	f840 bb04 	str.w	fp, [r0], #4
 800bb12:	eba0 000a 	sub.w	r0, r0, sl
 800bb16:	1080      	asrs	r0, r0, #2
 800bb18:	6120      	str	r0, [r4, #16]
 800bb1a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bb1e:	4658      	mov	r0, fp
 800bb20:	f000 fd32 	bl	800c588 <__hi0bits>
 800bb24:	683d      	ldr	r5, [r7, #0]
 800bb26:	eba8 0000 	sub.w	r0, r8, r0
 800bb2a:	42a8      	cmp	r0, r5
 800bb2c:	dd59      	ble.n	800bbe2 <__gethex+0x24e>
 800bb2e:	eba0 0805 	sub.w	r8, r0, r5
 800bb32:	4641      	mov	r1, r8
 800bb34:	4620      	mov	r0, r4
 800bb36:	f001 f8c1 	bl	800ccbc <__any_on>
 800bb3a:	4683      	mov	fp, r0
 800bb3c:	b1b8      	cbz	r0, 800bb6e <__gethex+0x1da>
 800bb3e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800bb42:	1159      	asrs	r1, r3, #5
 800bb44:	f003 021f 	and.w	r2, r3, #31
 800bb48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb4c:	f04f 0b01 	mov.w	fp, #1
 800bb50:	fa0b f202 	lsl.w	r2, fp, r2
 800bb54:	420a      	tst	r2, r1
 800bb56:	d00a      	beq.n	800bb6e <__gethex+0x1da>
 800bb58:	455b      	cmp	r3, fp
 800bb5a:	dd06      	ble.n	800bb6a <__gethex+0x1d6>
 800bb5c:	f1a8 0102 	sub.w	r1, r8, #2
 800bb60:	4620      	mov	r0, r4
 800bb62:	f001 f8ab 	bl	800ccbc <__any_on>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d138      	bne.n	800bbdc <__gethex+0x248>
 800bb6a:	f04f 0b02 	mov.w	fp, #2
 800bb6e:	4641      	mov	r1, r8
 800bb70:	4620      	mov	r0, r4
 800bb72:	f7ff fea7 	bl	800b8c4 <rshift>
 800bb76:	4446      	add	r6, r8
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	42b3      	cmp	r3, r6
 800bb7c:	da41      	bge.n	800bc02 <__gethex+0x26e>
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4648      	mov	r0, r9
 800bb82:	f000 fc4f 	bl	800c424 <_Bfree>
 800bb86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb88:	2300      	movs	r3, #0
 800bb8a:	6013      	str	r3, [r2, #0]
 800bb8c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb90:	e78a      	b.n	800baa8 <__gethex+0x114>
 800bb92:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb96:	2a2e      	cmp	r2, #46	; 0x2e
 800bb98:	d014      	beq.n	800bbc4 <__gethex+0x230>
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d106      	bne.n	800bbac <__gethex+0x218>
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	f843 bb04 	str.w	fp, [r3], #4
 800bba4:	f04f 0b00 	mov.w	fp, #0
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	465b      	mov	r3, fp
 800bbac:	7828      	ldrb	r0, [r5, #0]
 800bbae:	9303      	str	r3, [sp, #12]
 800bbb0:	f7ff feda 	bl	800b968 <__hexdig_fun>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	f000 000f 	and.w	r0, r0, #15
 800bbba:	4098      	lsls	r0, r3
 800bbbc:	ea4b 0b00 	orr.w	fp, fp, r0
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	e7a1      	b.n	800bb08 <__gethex+0x174>
 800bbc4:	45a8      	cmp	r8, r5
 800bbc6:	d8e8      	bhi.n	800bb9a <__gethex+0x206>
 800bbc8:	2201      	movs	r2, #1
 800bbca:	4628      	mov	r0, r5
 800bbcc:	9303      	str	r3, [sp, #12]
 800bbce:	f7fe fe69 	bl	800a8a4 <strncmp>
 800bbd2:	4926      	ldr	r1, [pc, #152]	; (800bc6c <__gethex+0x2d8>)
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d1df      	bne.n	800bb9a <__gethex+0x206>
 800bbda:	e795      	b.n	800bb08 <__gethex+0x174>
 800bbdc:	f04f 0b03 	mov.w	fp, #3
 800bbe0:	e7c5      	b.n	800bb6e <__gethex+0x1da>
 800bbe2:	da0b      	bge.n	800bbfc <__gethex+0x268>
 800bbe4:	eba5 0800 	sub.w	r8, r5, r0
 800bbe8:	4621      	mov	r1, r4
 800bbea:	4642      	mov	r2, r8
 800bbec:	4648      	mov	r0, r9
 800bbee:	f000 fe33 	bl	800c858 <__lshift>
 800bbf2:	eba6 0608 	sub.w	r6, r6, r8
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	f100 0a14 	add.w	sl, r0, #20
 800bbfc:	f04f 0b00 	mov.w	fp, #0
 800bc00:	e7ba      	b.n	800bb78 <__gethex+0x1e4>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	42b3      	cmp	r3, r6
 800bc06:	dd73      	ble.n	800bcf0 <__gethex+0x35c>
 800bc08:	1b9e      	subs	r6, r3, r6
 800bc0a:	42b5      	cmp	r5, r6
 800bc0c:	dc34      	bgt.n	800bc78 <__gethex+0x2e4>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d023      	beq.n	800bc5c <__gethex+0x2c8>
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d025      	beq.n	800bc64 <__gethex+0x2d0>
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d115      	bne.n	800bc48 <__gethex+0x2b4>
 800bc1c:	42b5      	cmp	r5, r6
 800bc1e:	d113      	bne.n	800bc48 <__gethex+0x2b4>
 800bc20:	2d01      	cmp	r5, #1
 800bc22:	d10b      	bne.n	800bc3c <__gethex+0x2a8>
 800bc24:	9a02      	ldr	r2, [sp, #8]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	6123      	str	r3, [r4, #16]
 800bc2e:	f8ca 3000 	str.w	r3, [sl]
 800bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc34:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bc38:	601c      	str	r4, [r3, #0]
 800bc3a:	e735      	b.n	800baa8 <__gethex+0x114>
 800bc3c:	1e69      	subs	r1, r5, #1
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f001 f83c 	bl	800ccbc <__any_on>
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1ed      	bne.n	800bc24 <__gethex+0x290>
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4648      	mov	r0, r9
 800bc4c:	f000 fbea 	bl	800c424 <_Bfree>
 800bc50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc52:	2300      	movs	r3, #0
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bc5a:	e725      	b.n	800baa8 <__gethex+0x114>
 800bc5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1f2      	bne.n	800bc48 <__gethex+0x2b4>
 800bc62:	e7df      	b.n	800bc24 <__gethex+0x290>
 800bc64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1dc      	bne.n	800bc24 <__gethex+0x290>
 800bc6a:	e7ed      	b.n	800bc48 <__gethex+0x2b4>
 800bc6c:	0800d739 	.word	0x0800d739
 800bc70:	0800d9ab 	.word	0x0800d9ab
 800bc74:	0800d9bc 	.word	0x0800d9bc
 800bc78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800bc7c:	f1bb 0f00 	cmp.w	fp, #0
 800bc80:	d133      	bne.n	800bcea <__gethex+0x356>
 800bc82:	f1b8 0f00 	cmp.w	r8, #0
 800bc86:	d004      	beq.n	800bc92 <__gethex+0x2fe>
 800bc88:	4641      	mov	r1, r8
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f001 f816 	bl	800ccbc <__any_on>
 800bc90:	4683      	mov	fp, r0
 800bc92:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc96:	2301      	movs	r3, #1
 800bc98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc9c:	f008 081f 	and.w	r8, r8, #31
 800bca0:	fa03 f308 	lsl.w	r3, r3, r8
 800bca4:	4213      	tst	r3, r2
 800bca6:	4631      	mov	r1, r6
 800bca8:	4620      	mov	r0, r4
 800bcaa:	bf18      	it	ne
 800bcac:	f04b 0b02 	orrne.w	fp, fp, #2
 800bcb0:	1bad      	subs	r5, r5, r6
 800bcb2:	f7ff fe07 	bl	800b8c4 <rshift>
 800bcb6:	687e      	ldr	r6, [r7, #4]
 800bcb8:	f04f 0802 	mov.w	r8, #2
 800bcbc:	f1bb 0f00 	cmp.w	fp, #0
 800bcc0:	d04a      	beq.n	800bd58 <__gethex+0x3c4>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	d016      	beq.n	800bcf6 <__gethex+0x362>
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d018      	beq.n	800bcfe <__gethex+0x36a>
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d109      	bne.n	800bce4 <__gethex+0x350>
 800bcd0:	f01b 0f02 	tst.w	fp, #2
 800bcd4:	d006      	beq.n	800bce4 <__gethex+0x350>
 800bcd6:	f8da 3000 	ldr.w	r3, [sl]
 800bcda:	ea4b 0b03 	orr.w	fp, fp, r3
 800bcde:	f01b 0f01 	tst.w	fp, #1
 800bce2:	d10f      	bne.n	800bd04 <__gethex+0x370>
 800bce4:	f048 0810 	orr.w	r8, r8, #16
 800bce8:	e036      	b.n	800bd58 <__gethex+0x3c4>
 800bcea:	f04f 0b01 	mov.w	fp, #1
 800bcee:	e7d0      	b.n	800bc92 <__gethex+0x2fe>
 800bcf0:	f04f 0801 	mov.w	r8, #1
 800bcf4:	e7e2      	b.n	800bcbc <__gethex+0x328>
 800bcf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcf8:	f1c3 0301 	rsb	r3, r3, #1
 800bcfc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d0ef      	beq.n	800bce4 <__gethex+0x350>
 800bd04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd08:	f104 0214 	add.w	r2, r4, #20
 800bd0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bd16:	2300      	movs	r3, #0
 800bd18:	4694      	mov	ip, r2
 800bd1a:	f852 1b04 	ldr.w	r1, [r2], #4
 800bd1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800bd22:	d01e      	beq.n	800bd62 <__gethex+0x3ce>
 800bd24:	3101      	adds	r1, #1
 800bd26:	f8cc 1000 	str.w	r1, [ip]
 800bd2a:	f1b8 0f02 	cmp.w	r8, #2
 800bd2e:	f104 0214 	add.w	r2, r4, #20
 800bd32:	d13d      	bne.n	800bdb0 <__gethex+0x41c>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	42ab      	cmp	r3, r5
 800bd3a:	d10b      	bne.n	800bd54 <__gethex+0x3c0>
 800bd3c:	1169      	asrs	r1, r5, #5
 800bd3e:	2301      	movs	r3, #1
 800bd40:	f005 051f 	and.w	r5, r5, #31
 800bd44:	fa03 f505 	lsl.w	r5, r3, r5
 800bd48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd4c:	421d      	tst	r5, r3
 800bd4e:	bf18      	it	ne
 800bd50:	f04f 0801 	movne.w	r8, #1
 800bd54:	f048 0820 	orr.w	r8, r8, #32
 800bd58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd5a:	601c      	str	r4, [r3, #0]
 800bd5c:	9b02      	ldr	r3, [sp, #8]
 800bd5e:	601e      	str	r6, [r3, #0]
 800bd60:	e6a2      	b.n	800baa8 <__gethex+0x114>
 800bd62:	4290      	cmp	r0, r2
 800bd64:	f842 3c04 	str.w	r3, [r2, #-4]
 800bd68:	d8d6      	bhi.n	800bd18 <__gethex+0x384>
 800bd6a:	68a2      	ldr	r2, [r4, #8]
 800bd6c:	4593      	cmp	fp, r2
 800bd6e:	db17      	blt.n	800bda0 <__gethex+0x40c>
 800bd70:	6861      	ldr	r1, [r4, #4]
 800bd72:	4648      	mov	r0, r9
 800bd74:	3101      	adds	r1, #1
 800bd76:	f000 fb15 	bl	800c3a4 <_Balloc>
 800bd7a:	4682      	mov	sl, r0
 800bd7c:	b918      	cbnz	r0, 800bd86 <__gethex+0x3f2>
 800bd7e:	4b1b      	ldr	r3, [pc, #108]	; (800bdec <__gethex+0x458>)
 800bd80:	4602      	mov	r2, r0
 800bd82:	2184      	movs	r1, #132	; 0x84
 800bd84:	e6b3      	b.n	800baee <__gethex+0x15a>
 800bd86:	6922      	ldr	r2, [r4, #16]
 800bd88:	3202      	adds	r2, #2
 800bd8a:	f104 010c 	add.w	r1, r4, #12
 800bd8e:	0092      	lsls	r2, r2, #2
 800bd90:	300c      	adds	r0, #12
 800bd92:	f7fe fe94 	bl	800aabe <memcpy>
 800bd96:	4621      	mov	r1, r4
 800bd98:	4648      	mov	r0, r9
 800bd9a:	f000 fb43 	bl	800c424 <_Bfree>
 800bd9e:	4654      	mov	r4, sl
 800bda0:	6922      	ldr	r2, [r4, #16]
 800bda2:	1c51      	adds	r1, r2, #1
 800bda4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bda8:	6121      	str	r1, [r4, #16]
 800bdaa:	2101      	movs	r1, #1
 800bdac:	6151      	str	r1, [r2, #20]
 800bdae:	e7bc      	b.n	800bd2a <__gethex+0x396>
 800bdb0:	6921      	ldr	r1, [r4, #16]
 800bdb2:	4559      	cmp	r1, fp
 800bdb4:	dd0b      	ble.n	800bdce <__gethex+0x43a>
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff fd83 	bl	800b8c4 <rshift>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3601      	adds	r6, #1
 800bdc2:	42b3      	cmp	r3, r6
 800bdc4:	f6ff aedb 	blt.w	800bb7e <__gethex+0x1ea>
 800bdc8:	f04f 0801 	mov.w	r8, #1
 800bdcc:	e7c2      	b.n	800bd54 <__gethex+0x3c0>
 800bdce:	f015 051f 	ands.w	r5, r5, #31
 800bdd2:	d0f9      	beq.n	800bdc8 <__gethex+0x434>
 800bdd4:	9b01      	ldr	r3, [sp, #4]
 800bdd6:	441a      	add	r2, r3
 800bdd8:	f1c5 0520 	rsb	r5, r5, #32
 800bddc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bde0:	f000 fbd2 	bl	800c588 <__hi0bits>
 800bde4:	42a8      	cmp	r0, r5
 800bde6:	dbe6      	blt.n	800bdb6 <__gethex+0x422>
 800bde8:	e7ee      	b.n	800bdc8 <__gethex+0x434>
 800bdea:	bf00      	nop
 800bdec:	0800d9ab 	.word	0x0800d9ab

0800bdf0 <L_shift>:
 800bdf0:	f1c2 0208 	rsb	r2, r2, #8
 800bdf4:	0092      	lsls	r2, r2, #2
 800bdf6:	b570      	push	{r4, r5, r6, lr}
 800bdf8:	f1c2 0620 	rsb	r6, r2, #32
 800bdfc:	6843      	ldr	r3, [r0, #4]
 800bdfe:	6804      	ldr	r4, [r0, #0]
 800be00:	fa03 f506 	lsl.w	r5, r3, r6
 800be04:	432c      	orrs	r4, r5
 800be06:	40d3      	lsrs	r3, r2
 800be08:	6004      	str	r4, [r0, #0]
 800be0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800be0e:	4288      	cmp	r0, r1
 800be10:	d3f4      	bcc.n	800bdfc <L_shift+0xc>
 800be12:	bd70      	pop	{r4, r5, r6, pc}

0800be14 <__match>:
 800be14:	b530      	push	{r4, r5, lr}
 800be16:	6803      	ldr	r3, [r0, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	b914      	cbnz	r4, 800be26 <__match+0x12>
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	bd30      	pop	{r4, r5, pc}
 800be26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be2e:	2d19      	cmp	r5, #25
 800be30:	bf98      	it	ls
 800be32:	3220      	addls	r2, #32
 800be34:	42a2      	cmp	r2, r4
 800be36:	d0f0      	beq.n	800be1a <__match+0x6>
 800be38:	2000      	movs	r0, #0
 800be3a:	e7f3      	b.n	800be24 <__match+0x10>

0800be3c <__hexnan>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	680b      	ldr	r3, [r1, #0]
 800be42:	6801      	ldr	r1, [r0, #0]
 800be44:	115e      	asrs	r6, r3, #5
 800be46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be4a:	f013 031f 	ands.w	r3, r3, #31
 800be4e:	b087      	sub	sp, #28
 800be50:	bf18      	it	ne
 800be52:	3604      	addne	r6, #4
 800be54:	2500      	movs	r5, #0
 800be56:	1f37      	subs	r7, r6, #4
 800be58:	4682      	mov	sl, r0
 800be5a:	4690      	mov	r8, r2
 800be5c:	9301      	str	r3, [sp, #4]
 800be5e:	f846 5c04 	str.w	r5, [r6, #-4]
 800be62:	46b9      	mov	r9, r7
 800be64:	463c      	mov	r4, r7
 800be66:	9502      	str	r5, [sp, #8]
 800be68:	46ab      	mov	fp, r5
 800be6a:	784a      	ldrb	r2, [r1, #1]
 800be6c:	1c4b      	adds	r3, r1, #1
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	b342      	cbz	r2, 800bec4 <__hexnan+0x88>
 800be72:	4610      	mov	r0, r2
 800be74:	9105      	str	r1, [sp, #20]
 800be76:	9204      	str	r2, [sp, #16]
 800be78:	f7ff fd76 	bl	800b968 <__hexdig_fun>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d14f      	bne.n	800bf20 <__hexnan+0xe4>
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	9905      	ldr	r1, [sp, #20]
 800be84:	2a20      	cmp	r2, #32
 800be86:	d818      	bhi.n	800beba <__hexnan+0x7e>
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	459b      	cmp	fp, r3
 800be8c:	dd13      	ble.n	800beb6 <__hexnan+0x7a>
 800be8e:	454c      	cmp	r4, r9
 800be90:	d206      	bcs.n	800bea0 <__hexnan+0x64>
 800be92:	2d07      	cmp	r5, #7
 800be94:	dc04      	bgt.n	800bea0 <__hexnan+0x64>
 800be96:	462a      	mov	r2, r5
 800be98:	4649      	mov	r1, r9
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff ffa8 	bl	800bdf0 <L_shift>
 800bea0:	4544      	cmp	r4, r8
 800bea2:	d950      	bls.n	800bf46 <__hexnan+0x10a>
 800bea4:	2300      	movs	r3, #0
 800bea6:	f1a4 0904 	sub.w	r9, r4, #4
 800beaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800beae:	f8cd b008 	str.w	fp, [sp, #8]
 800beb2:	464c      	mov	r4, r9
 800beb4:	461d      	mov	r5, r3
 800beb6:	9903      	ldr	r1, [sp, #12]
 800beb8:	e7d7      	b.n	800be6a <__hexnan+0x2e>
 800beba:	2a29      	cmp	r2, #41	; 0x29
 800bebc:	d155      	bne.n	800bf6a <__hexnan+0x12e>
 800bebe:	3102      	adds	r1, #2
 800bec0:	f8ca 1000 	str.w	r1, [sl]
 800bec4:	f1bb 0f00 	cmp.w	fp, #0
 800bec8:	d04f      	beq.n	800bf6a <__hexnan+0x12e>
 800beca:	454c      	cmp	r4, r9
 800becc:	d206      	bcs.n	800bedc <__hexnan+0xa0>
 800bece:	2d07      	cmp	r5, #7
 800bed0:	dc04      	bgt.n	800bedc <__hexnan+0xa0>
 800bed2:	462a      	mov	r2, r5
 800bed4:	4649      	mov	r1, r9
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff ff8a 	bl	800bdf0 <L_shift>
 800bedc:	4544      	cmp	r4, r8
 800bede:	d934      	bls.n	800bf4a <__hexnan+0x10e>
 800bee0:	f1a8 0204 	sub.w	r2, r8, #4
 800bee4:	4623      	mov	r3, r4
 800bee6:	f853 1b04 	ldr.w	r1, [r3], #4
 800beea:	f842 1f04 	str.w	r1, [r2, #4]!
 800beee:	429f      	cmp	r7, r3
 800bef0:	d2f9      	bcs.n	800bee6 <__hexnan+0xaa>
 800bef2:	1b3b      	subs	r3, r7, r4
 800bef4:	f023 0303 	bic.w	r3, r3, #3
 800bef8:	3304      	adds	r3, #4
 800befa:	3e03      	subs	r6, #3
 800befc:	3401      	adds	r4, #1
 800befe:	42a6      	cmp	r6, r4
 800bf00:	bf38      	it	cc
 800bf02:	2304      	movcc	r3, #4
 800bf04:	4443      	add	r3, r8
 800bf06:	2200      	movs	r2, #0
 800bf08:	f843 2b04 	str.w	r2, [r3], #4
 800bf0c:	429f      	cmp	r7, r3
 800bf0e:	d2fb      	bcs.n	800bf08 <__hexnan+0xcc>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	b91b      	cbnz	r3, 800bf1c <__hexnan+0xe0>
 800bf14:	4547      	cmp	r7, r8
 800bf16:	d126      	bne.n	800bf66 <__hexnan+0x12a>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	2005      	movs	r0, #5
 800bf1e:	e025      	b.n	800bf6c <__hexnan+0x130>
 800bf20:	3501      	adds	r5, #1
 800bf22:	2d08      	cmp	r5, #8
 800bf24:	f10b 0b01 	add.w	fp, fp, #1
 800bf28:	dd06      	ble.n	800bf38 <__hexnan+0xfc>
 800bf2a:	4544      	cmp	r4, r8
 800bf2c:	d9c3      	bls.n	800beb6 <__hexnan+0x7a>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf34:	2501      	movs	r5, #1
 800bf36:	3c04      	subs	r4, #4
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	f000 000f 	and.w	r0, r0, #15
 800bf3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf42:	6020      	str	r0, [r4, #0]
 800bf44:	e7b7      	b.n	800beb6 <__hexnan+0x7a>
 800bf46:	2508      	movs	r5, #8
 800bf48:	e7b5      	b.n	800beb6 <__hexnan+0x7a>
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0df      	beq.n	800bf10 <__hexnan+0xd4>
 800bf50:	f1c3 0320 	rsb	r3, r3, #32
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf58:	40da      	lsrs	r2, r3
 800bf5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf64:	e7d4      	b.n	800bf10 <__hexnan+0xd4>
 800bf66:	3f04      	subs	r7, #4
 800bf68:	e7d2      	b.n	800bf10 <__hexnan+0xd4>
 800bf6a:	2004      	movs	r0, #4
 800bf6c:	b007      	add	sp, #28
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf72 <__ssputs_r>:
 800bf72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf76:	688e      	ldr	r6, [r1, #8]
 800bf78:	461f      	mov	r7, r3
 800bf7a:	42be      	cmp	r6, r7
 800bf7c:	680b      	ldr	r3, [r1, #0]
 800bf7e:	4682      	mov	sl, r0
 800bf80:	460c      	mov	r4, r1
 800bf82:	4690      	mov	r8, r2
 800bf84:	d82c      	bhi.n	800bfe0 <__ssputs_r+0x6e>
 800bf86:	898a      	ldrh	r2, [r1, #12]
 800bf88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bf8c:	d026      	beq.n	800bfdc <__ssputs_r+0x6a>
 800bf8e:	6965      	ldr	r5, [r4, #20]
 800bf90:	6909      	ldr	r1, [r1, #16]
 800bf92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf96:	eba3 0901 	sub.w	r9, r3, r1
 800bf9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf9e:	1c7b      	adds	r3, r7, #1
 800bfa0:	444b      	add	r3, r9
 800bfa2:	106d      	asrs	r5, r5, #1
 800bfa4:	429d      	cmp	r5, r3
 800bfa6:	bf38      	it	cc
 800bfa8:	461d      	movcc	r5, r3
 800bfaa:	0553      	lsls	r3, r2, #21
 800bfac:	d527      	bpl.n	800bffe <__ssputs_r+0x8c>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	f7fd f8bc 	bl	800912c <_malloc_r>
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	b360      	cbz	r0, 800c012 <__ssputs_r+0xa0>
 800bfb8:	6921      	ldr	r1, [r4, #16]
 800bfba:	464a      	mov	r2, r9
 800bfbc:	f7fe fd7f 	bl	800aabe <memcpy>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	6126      	str	r6, [r4, #16]
 800bfce:	6165      	str	r5, [r4, #20]
 800bfd0:	444e      	add	r6, r9
 800bfd2:	eba5 0509 	sub.w	r5, r5, r9
 800bfd6:	6026      	str	r6, [r4, #0]
 800bfd8:	60a5      	str	r5, [r4, #8]
 800bfda:	463e      	mov	r6, r7
 800bfdc:	42be      	cmp	r6, r7
 800bfde:	d900      	bls.n	800bfe2 <__ssputs_r+0x70>
 800bfe0:	463e      	mov	r6, r7
 800bfe2:	6820      	ldr	r0, [r4, #0]
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4641      	mov	r1, r8
 800bfe8:	f000 ff1a 	bl	800ce20 <memmove>
 800bfec:	68a3      	ldr	r3, [r4, #8]
 800bfee:	1b9b      	subs	r3, r3, r6
 800bff0:	60a3      	str	r3, [r4, #8]
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	4433      	add	r3, r6
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	2000      	movs	r0, #0
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	462a      	mov	r2, r5
 800c000:	f000 fed2 	bl	800cda8 <_realloc_r>
 800c004:	4606      	mov	r6, r0
 800c006:	2800      	cmp	r0, #0
 800c008:	d1e0      	bne.n	800bfcc <__ssputs_r+0x5a>
 800c00a:	6921      	ldr	r1, [r4, #16]
 800c00c:	4650      	mov	r0, sl
 800c00e:	f7ff fc0d 	bl	800b82c <_free_r>
 800c012:	230c      	movs	r3, #12
 800c014:	f8ca 3000 	str.w	r3, [sl]
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c01e:	81a3      	strh	r3, [r4, #12]
 800c020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c024:	e7e9      	b.n	800bffa <__ssputs_r+0x88>
	...

0800c028 <_svfiprintf_r>:
 800c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	4698      	mov	r8, r3
 800c02e:	898b      	ldrh	r3, [r1, #12]
 800c030:	061b      	lsls	r3, r3, #24
 800c032:	b09d      	sub	sp, #116	; 0x74
 800c034:	4607      	mov	r7, r0
 800c036:	460d      	mov	r5, r1
 800c038:	4614      	mov	r4, r2
 800c03a:	d50e      	bpl.n	800c05a <_svfiprintf_r+0x32>
 800c03c:	690b      	ldr	r3, [r1, #16]
 800c03e:	b963      	cbnz	r3, 800c05a <_svfiprintf_r+0x32>
 800c040:	2140      	movs	r1, #64	; 0x40
 800c042:	f7fd f873 	bl	800912c <_malloc_r>
 800c046:	6028      	str	r0, [r5, #0]
 800c048:	6128      	str	r0, [r5, #16]
 800c04a:	b920      	cbnz	r0, 800c056 <_svfiprintf_r+0x2e>
 800c04c:	230c      	movs	r3, #12
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c054:	e0d0      	b.n	800c1f8 <_svfiprintf_r+0x1d0>
 800c056:	2340      	movs	r3, #64	; 0x40
 800c058:	616b      	str	r3, [r5, #20]
 800c05a:	2300      	movs	r3, #0
 800c05c:	9309      	str	r3, [sp, #36]	; 0x24
 800c05e:	2320      	movs	r3, #32
 800c060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c064:	f8cd 800c 	str.w	r8, [sp, #12]
 800c068:	2330      	movs	r3, #48	; 0x30
 800c06a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c210 <_svfiprintf_r+0x1e8>
 800c06e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c072:	f04f 0901 	mov.w	r9, #1
 800c076:	4623      	mov	r3, r4
 800c078:	469a      	mov	sl, r3
 800c07a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c07e:	b10a      	cbz	r2, 800c084 <_svfiprintf_r+0x5c>
 800c080:	2a25      	cmp	r2, #37	; 0x25
 800c082:	d1f9      	bne.n	800c078 <_svfiprintf_r+0x50>
 800c084:	ebba 0b04 	subs.w	fp, sl, r4
 800c088:	d00b      	beq.n	800c0a2 <_svfiprintf_r+0x7a>
 800c08a:	465b      	mov	r3, fp
 800c08c:	4622      	mov	r2, r4
 800c08e:	4629      	mov	r1, r5
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff ff6e 	bl	800bf72 <__ssputs_r>
 800c096:	3001      	adds	r0, #1
 800c098:	f000 80a9 	beq.w	800c1ee <_svfiprintf_r+0x1c6>
 800c09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c09e:	445a      	add	r2, fp
 800c0a0:	9209      	str	r2, [sp, #36]	; 0x24
 800c0a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 80a1 	beq.w	800c1ee <_svfiprintf_r+0x1c6>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b6:	f10a 0a01 	add.w	sl, sl, #1
 800c0ba:	9304      	str	r3, [sp, #16]
 800c0bc:	9307      	str	r3, [sp, #28]
 800c0be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0c2:	931a      	str	r3, [sp, #104]	; 0x68
 800c0c4:	4654      	mov	r4, sl
 800c0c6:	2205      	movs	r2, #5
 800c0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0cc:	4850      	ldr	r0, [pc, #320]	; (800c210 <_svfiprintf_r+0x1e8>)
 800c0ce:	f7f4 f87f 	bl	80001d0 <memchr>
 800c0d2:	9a04      	ldr	r2, [sp, #16]
 800c0d4:	b9d8      	cbnz	r0, 800c10e <_svfiprintf_r+0xe6>
 800c0d6:	06d0      	lsls	r0, r2, #27
 800c0d8:	bf44      	itt	mi
 800c0da:	2320      	movmi	r3, #32
 800c0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e0:	0711      	lsls	r1, r2, #28
 800c0e2:	bf44      	itt	mi
 800c0e4:	232b      	movmi	r3, #43	; 0x2b
 800c0e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f0:	d015      	beq.n	800c11e <_svfiprintf_r+0xf6>
 800c0f2:	9a07      	ldr	r2, [sp, #28]
 800c0f4:	4654      	mov	r4, sl
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f04f 0c0a 	mov.w	ip, #10
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c102:	3b30      	subs	r3, #48	; 0x30
 800c104:	2b09      	cmp	r3, #9
 800c106:	d94d      	bls.n	800c1a4 <_svfiprintf_r+0x17c>
 800c108:	b1b0      	cbz	r0, 800c138 <_svfiprintf_r+0x110>
 800c10a:	9207      	str	r2, [sp, #28]
 800c10c:	e014      	b.n	800c138 <_svfiprintf_r+0x110>
 800c10e:	eba0 0308 	sub.w	r3, r0, r8
 800c112:	fa09 f303 	lsl.w	r3, r9, r3
 800c116:	4313      	orrs	r3, r2
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	46a2      	mov	sl, r4
 800c11c:	e7d2      	b.n	800c0c4 <_svfiprintf_r+0x9c>
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	1d19      	adds	r1, r3, #4
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	9103      	str	r1, [sp, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	bfbb      	ittet	lt
 800c12a:	425b      	neglt	r3, r3
 800c12c:	f042 0202 	orrlt.w	r2, r2, #2
 800c130:	9307      	strge	r3, [sp, #28]
 800c132:	9307      	strlt	r3, [sp, #28]
 800c134:	bfb8      	it	lt
 800c136:	9204      	strlt	r2, [sp, #16]
 800c138:	7823      	ldrb	r3, [r4, #0]
 800c13a:	2b2e      	cmp	r3, #46	; 0x2e
 800c13c:	d10c      	bne.n	800c158 <_svfiprintf_r+0x130>
 800c13e:	7863      	ldrb	r3, [r4, #1]
 800c140:	2b2a      	cmp	r3, #42	; 0x2a
 800c142:	d134      	bne.n	800c1ae <_svfiprintf_r+0x186>
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	1d1a      	adds	r2, r3, #4
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	9203      	str	r2, [sp, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	bfb8      	it	lt
 800c150:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c154:	3402      	adds	r4, #2
 800c156:	9305      	str	r3, [sp, #20]
 800c158:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c220 <_svfiprintf_r+0x1f8>
 800c15c:	7821      	ldrb	r1, [r4, #0]
 800c15e:	2203      	movs	r2, #3
 800c160:	4650      	mov	r0, sl
 800c162:	f7f4 f835 	bl	80001d0 <memchr>
 800c166:	b138      	cbz	r0, 800c178 <_svfiprintf_r+0x150>
 800c168:	9b04      	ldr	r3, [sp, #16]
 800c16a:	eba0 000a 	sub.w	r0, r0, sl
 800c16e:	2240      	movs	r2, #64	; 0x40
 800c170:	4082      	lsls	r2, r0
 800c172:	4313      	orrs	r3, r2
 800c174:	3401      	adds	r4, #1
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17c:	4825      	ldr	r0, [pc, #148]	; (800c214 <_svfiprintf_r+0x1ec>)
 800c17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c182:	2206      	movs	r2, #6
 800c184:	f7f4 f824 	bl	80001d0 <memchr>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d038      	beq.n	800c1fe <_svfiprintf_r+0x1d6>
 800c18c:	4b22      	ldr	r3, [pc, #136]	; (800c218 <_svfiprintf_r+0x1f0>)
 800c18e:	bb1b      	cbnz	r3, 800c1d8 <_svfiprintf_r+0x1b0>
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	3307      	adds	r3, #7
 800c194:	f023 0307 	bic.w	r3, r3, #7
 800c198:	3308      	adds	r3, #8
 800c19a:	9303      	str	r3, [sp, #12]
 800c19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19e:	4433      	add	r3, r6
 800c1a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a2:	e768      	b.n	800c076 <_svfiprintf_r+0x4e>
 800c1a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	e7a6      	b.n	800c0fc <_svfiprintf_r+0xd4>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	3401      	adds	r4, #1
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f04f 0c0a 	mov.w	ip, #10
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1c0:	3a30      	subs	r2, #48	; 0x30
 800c1c2:	2a09      	cmp	r2, #9
 800c1c4:	d903      	bls.n	800c1ce <_svfiprintf_r+0x1a6>
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d0c6      	beq.n	800c158 <_svfiprintf_r+0x130>
 800c1ca:	9105      	str	r1, [sp, #20]
 800c1cc:	e7c4      	b.n	800c158 <_svfiprintf_r+0x130>
 800c1ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e7f0      	b.n	800c1ba <_svfiprintf_r+0x192>
 800c1d8:	ab03      	add	r3, sp, #12
 800c1da:	9300      	str	r3, [sp, #0]
 800c1dc:	462a      	mov	r2, r5
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <_svfiprintf_r+0x1f4>)
 800c1e0:	a904      	add	r1, sp, #16
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	f7fc fd44 	bl	8008c70 <_printf_float>
 800c1e8:	1c42      	adds	r2, r0, #1
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	d1d6      	bne.n	800c19c <_svfiprintf_r+0x174>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	065b      	lsls	r3, r3, #25
 800c1f2:	f53f af2d 	bmi.w	800c050 <_svfiprintf_r+0x28>
 800c1f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1f8:	b01d      	add	sp, #116	; 0x74
 800c1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fe:	ab03      	add	r3, sp, #12
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	462a      	mov	r2, r5
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <_svfiprintf_r+0x1f4>)
 800c206:	a904      	add	r1, sp, #16
 800c208:	4638      	mov	r0, r7
 800c20a:	f7fd f87d 	bl	8009308 <_printf_i>
 800c20e:	e7eb      	b.n	800c1e8 <_svfiprintf_r+0x1c0>
 800c210:	0800da1c 	.word	0x0800da1c
 800c214:	0800da26 	.word	0x0800da26
 800c218:	08008c71 	.word	0x08008c71
 800c21c:	0800bf73 	.word	0x0800bf73
 800c220:	0800da22 	.word	0x0800da22

0800c224 <__ascii_mbtowc>:
 800c224:	b082      	sub	sp, #8
 800c226:	b901      	cbnz	r1, 800c22a <__ascii_mbtowc+0x6>
 800c228:	a901      	add	r1, sp, #4
 800c22a:	b142      	cbz	r2, 800c23e <__ascii_mbtowc+0x1a>
 800c22c:	b14b      	cbz	r3, 800c242 <__ascii_mbtowc+0x1e>
 800c22e:	7813      	ldrb	r3, [r2, #0]
 800c230:	600b      	str	r3, [r1, #0]
 800c232:	7812      	ldrb	r2, [r2, #0]
 800c234:	1e10      	subs	r0, r2, #0
 800c236:	bf18      	it	ne
 800c238:	2001      	movne	r0, #1
 800c23a:	b002      	add	sp, #8
 800c23c:	4770      	bx	lr
 800c23e:	4610      	mov	r0, r2
 800c240:	e7fb      	b.n	800c23a <__ascii_mbtowc+0x16>
 800c242:	f06f 0001 	mvn.w	r0, #1
 800c246:	e7f8      	b.n	800c23a <__ascii_mbtowc+0x16>

0800c248 <__sflush_r>:
 800c248:	898a      	ldrh	r2, [r1, #12]
 800c24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24e:	4605      	mov	r5, r0
 800c250:	0710      	lsls	r0, r2, #28
 800c252:	460c      	mov	r4, r1
 800c254:	d458      	bmi.n	800c308 <__sflush_r+0xc0>
 800c256:	684b      	ldr	r3, [r1, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	dc05      	bgt.n	800c268 <__sflush_r+0x20>
 800c25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c25e:	2b00      	cmp	r3, #0
 800c260:	dc02      	bgt.n	800c268 <__sflush_r+0x20>
 800c262:	2000      	movs	r0, #0
 800c264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c26a:	2e00      	cmp	r6, #0
 800c26c:	d0f9      	beq.n	800c262 <__sflush_r+0x1a>
 800c26e:	2300      	movs	r3, #0
 800c270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c274:	682f      	ldr	r7, [r5, #0]
 800c276:	6a21      	ldr	r1, [r4, #32]
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	d032      	beq.n	800c2e2 <__sflush_r+0x9a>
 800c27c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c27e:	89a3      	ldrh	r3, [r4, #12]
 800c280:	075a      	lsls	r2, r3, #29
 800c282:	d505      	bpl.n	800c290 <__sflush_r+0x48>
 800c284:	6863      	ldr	r3, [r4, #4]
 800c286:	1ac0      	subs	r0, r0, r3
 800c288:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c28a:	b10b      	cbz	r3, 800c290 <__sflush_r+0x48>
 800c28c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c28e:	1ac0      	subs	r0, r0, r3
 800c290:	2300      	movs	r3, #0
 800c292:	4602      	mov	r2, r0
 800c294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c296:	6a21      	ldr	r1, [r4, #32]
 800c298:	4628      	mov	r0, r5
 800c29a:	47b0      	blx	r6
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	d106      	bne.n	800c2b0 <__sflush_r+0x68>
 800c2a2:	6829      	ldr	r1, [r5, #0]
 800c2a4:	291d      	cmp	r1, #29
 800c2a6:	d82b      	bhi.n	800c300 <__sflush_r+0xb8>
 800c2a8:	4a29      	ldr	r2, [pc, #164]	; (800c350 <__sflush_r+0x108>)
 800c2aa:	410a      	asrs	r2, r1
 800c2ac:	07d6      	lsls	r6, r2, #31
 800c2ae:	d427      	bmi.n	800c300 <__sflush_r+0xb8>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	6062      	str	r2, [r4, #4]
 800c2b4:	04d9      	lsls	r1, r3, #19
 800c2b6:	6922      	ldr	r2, [r4, #16]
 800c2b8:	6022      	str	r2, [r4, #0]
 800c2ba:	d504      	bpl.n	800c2c6 <__sflush_r+0x7e>
 800c2bc:	1c42      	adds	r2, r0, #1
 800c2be:	d101      	bne.n	800c2c4 <__sflush_r+0x7c>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b903      	cbnz	r3, 800c2c6 <__sflush_r+0x7e>
 800c2c4:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c8:	602f      	str	r7, [r5, #0]
 800c2ca:	2900      	cmp	r1, #0
 800c2cc:	d0c9      	beq.n	800c262 <__sflush_r+0x1a>
 800c2ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d2:	4299      	cmp	r1, r3
 800c2d4:	d002      	beq.n	800c2dc <__sflush_r+0x94>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	f7ff faa8 	bl	800b82c <_free_r>
 800c2dc:	2000      	movs	r0, #0
 800c2de:	6360      	str	r0, [r4, #52]	; 0x34
 800c2e0:	e7c0      	b.n	800c264 <__sflush_r+0x1c>
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47b0      	blx	r6
 800c2e8:	1c41      	adds	r1, r0, #1
 800c2ea:	d1c8      	bne.n	800c27e <__sflush_r+0x36>
 800c2ec:	682b      	ldr	r3, [r5, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0c5      	beq.n	800c27e <__sflush_r+0x36>
 800c2f2:	2b1d      	cmp	r3, #29
 800c2f4:	d001      	beq.n	800c2fa <__sflush_r+0xb2>
 800c2f6:	2b16      	cmp	r3, #22
 800c2f8:	d101      	bne.n	800c2fe <__sflush_r+0xb6>
 800c2fa:	602f      	str	r7, [r5, #0]
 800c2fc:	e7b1      	b.n	800c262 <__sflush_r+0x1a>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c304:	81a3      	strh	r3, [r4, #12]
 800c306:	e7ad      	b.n	800c264 <__sflush_r+0x1c>
 800c308:	690f      	ldr	r7, [r1, #16]
 800c30a:	2f00      	cmp	r7, #0
 800c30c:	d0a9      	beq.n	800c262 <__sflush_r+0x1a>
 800c30e:	0793      	lsls	r3, r2, #30
 800c310:	680e      	ldr	r6, [r1, #0]
 800c312:	bf08      	it	eq
 800c314:	694b      	ldreq	r3, [r1, #20]
 800c316:	600f      	str	r7, [r1, #0]
 800c318:	bf18      	it	ne
 800c31a:	2300      	movne	r3, #0
 800c31c:	eba6 0807 	sub.w	r8, r6, r7
 800c320:	608b      	str	r3, [r1, #8]
 800c322:	f1b8 0f00 	cmp.w	r8, #0
 800c326:	dd9c      	ble.n	800c262 <__sflush_r+0x1a>
 800c328:	6a21      	ldr	r1, [r4, #32]
 800c32a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c32c:	4643      	mov	r3, r8
 800c32e:	463a      	mov	r2, r7
 800c330:	4628      	mov	r0, r5
 800c332:	47b0      	blx	r6
 800c334:	2800      	cmp	r0, #0
 800c336:	dc06      	bgt.n	800c346 <__sflush_r+0xfe>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c344:	e78e      	b.n	800c264 <__sflush_r+0x1c>
 800c346:	4407      	add	r7, r0
 800c348:	eba8 0800 	sub.w	r8, r8, r0
 800c34c:	e7e9      	b.n	800c322 <__sflush_r+0xda>
 800c34e:	bf00      	nop
 800c350:	dfbffffe 	.word	0xdfbffffe

0800c354 <_fflush_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	690b      	ldr	r3, [r1, #16]
 800c358:	4605      	mov	r5, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	b913      	cbnz	r3, 800c364 <_fflush_r+0x10>
 800c35e:	2500      	movs	r5, #0
 800c360:	4628      	mov	r0, r5
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	b118      	cbz	r0, 800c36e <_fflush_r+0x1a>
 800c366:	6a03      	ldr	r3, [r0, #32]
 800c368:	b90b      	cbnz	r3, 800c36e <_fflush_r+0x1a>
 800c36a:	f7fd fbb7 	bl	8009adc <__sinit>
 800c36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0f3      	beq.n	800c35e <_fflush_r+0xa>
 800c376:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c378:	07d0      	lsls	r0, r2, #31
 800c37a:	d404      	bmi.n	800c386 <_fflush_r+0x32>
 800c37c:	0599      	lsls	r1, r3, #22
 800c37e:	d402      	bmi.n	800c386 <_fflush_r+0x32>
 800c380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c382:	f7fe fb9a 	bl	800aaba <__retarget_lock_acquire_recursive>
 800c386:	4628      	mov	r0, r5
 800c388:	4621      	mov	r1, r4
 800c38a:	f7ff ff5d 	bl	800c248 <__sflush_r>
 800c38e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c390:	07da      	lsls	r2, r3, #31
 800c392:	4605      	mov	r5, r0
 800c394:	d4e4      	bmi.n	800c360 <_fflush_r+0xc>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	059b      	lsls	r3, r3, #22
 800c39a:	d4e1      	bmi.n	800c360 <_fflush_r+0xc>
 800c39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39e:	f7fe fb8d 	bl	800aabc <__retarget_lock_release_recursive>
 800c3a2:	e7dd      	b.n	800c360 <_fflush_r+0xc>

0800c3a4 <_Balloc>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	69c6      	ldr	r6, [r0, #28]
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	b976      	cbnz	r6, 800c3cc <_Balloc+0x28>
 800c3ae:	2010      	movs	r0, #16
 800c3b0:	f7fc fe94 	bl	80090dc <malloc>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	61e0      	str	r0, [r4, #28]
 800c3b8:	b920      	cbnz	r0, 800c3c4 <_Balloc+0x20>
 800c3ba:	4b18      	ldr	r3, [pc, #96]	; (800c41c <_Balloc+0x78>)
 800c3bc:	4818      	ldr	r0, [pc, #96]	; (800c420 <_Balloc+0x7c>)
 800c3be:	216b      	movs	r1, #107	; 0x6b
 800c3c0:	f7fe fb9c 	bl	800aafc <__assert_func>
 800c3c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3c8:	6006      	str	r6, [r0, #0]
 800c3ca:	60c6      	str	r6, [r0, #12]
 800c3cc:	69e6      	ldr	r6, [r4, #28]
 800c3ce:	68f3      	ldr	r3, [r6, #12]
 800c3d0:	b183      	cbz	r3, 800c3f4 <_Balloc+0x50>
 800c3d2:	69e3      	ldr	r3, [r4, #28]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3da:	b9b8      	cbnz	r0, 800c40c <_Balloc+0x68>
 800c3dc:	2101      	movs	r1, #1
 800c3de:	fa01 f605 	lsl.w	r6, r1, r5
 800c3e2:	1d72      	adds	r2, r6, #5
 800c3e4:	0092      	lsls	r2, r2, #2
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 fd81 	bl	800ceee <_calloc_r>
 800c3ec:	b160      	cbz	r0, 800c408 <_Balloc+0x64>
 800c3ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c3f2:	e00e      	b.n	800c412 <_Balloc+0x6e>
 800c3f4:	2221      	movs	r2, #33	; 0x21
 800c3f6:	2104      	movs	r1, #4
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fd78 	bl	800ceee <_calloc_r>
 800c3fe:	69e3      	ldr	r3, [r4, #28]
 800c400:	60f0      	str	r0, [r6, #12]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e4      	bne.n	800c3d2 <_Balloc+0x2e>
 800c408:	2000      	movs	r0, #0
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	6802      	ldr	r2, [r0, #0]
 800c40e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c412:	2300      	movs	r3, #0
 800c414:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c418:	e7f7      	b.n	800c40a <_Balloc+0x66>
 800c41a:	bf00      	nop
 800c41c:	0800d790 	.word	0x0800d790
 800c420:	0800da2d 	.word	0x0800da2d

0800c424 <_Bfree>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	69c6      	ldr	r6, [r0, #28]
 800c428:	4605      	mov	r5, r0
 800c42a:	460c      	mov	r4, r1
 800c42c:	b976      	cbnz	r6, 800c44c <_Bfree+0x28>
 800c42e:	2010      	movs	r0, #16
 800c430:	f7fc fe54 	bl	80090dc <malloc>
 800c434:	4602      	mov	r2, r0
 800c436:	61e8      	str	r0, [r5, #28]
 800c438:	b920      	cbnz	r0, 800c444 <_Bfree+0x20>
 800c43a:	4b09      	ldr	r3, [pc, #36]	; (800c460 <_Bfree+0x3c>)
 800c43c:	4809      	ldr	r0, [pc, #36]	; (800c464 <_Bfree+0x40>)
 800c43e:	218f      	movs	r1, #143	; 0x8f
 800c440:	f7fe fb5c 	bl	800aafc <__assert_func>
 800c444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c448:	6006      	str	r6, [r0, #0]
 800c44a:	60c6      	str	r6, [r0, #12]
 800c44c:	b13c      	cbz	r4, 800c45e <_Bfree+0x3a>
 800c44e:	69eb      	ldr	r3, [r5, #28]
 800c450:	6862      	ldr	r2, [r4, #4]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c458:	6021      	str	r1, [r4, #0]
 800c45a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	0800d790 	.word	0x0800d790
 800c464:	0800da2d 	.word	0x0800da2d

0800c468 <__multadd>:
 800c468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46c:	690d      	ldr	r5, [r1, #16]
 800c46e:	4607      	mov	r7, r0
 800c470:	460c      	mov	r4, r1
 800c472:	461e      	mov	r6, r3
 800c474:	f101 0c14 	add.w	ip, r1, #20
 800c478:	2000      	movs	r0, #0
 800c47a:	f8dc 3000 	ldr.w	r3, [ip]
 800c47e:	b299      	uxth	r1, r3
 800c480:	fb02 6101 	mla	r1, r2, r1, r6
 800c484:	0c1e      	lsrs	r6, r3, #16
 800c486:	0c0b      	lsrs	r3, r1, #16
 800c488:	fb02 3306 	mla	r3, r2, r6, r3
 800c48c:	b289      	uxth	r1, r1
 800c48e:	3001      	adds	r0, #1
 800c490:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c494:	4285      	cmp	r5, r0
 800c496:	f84c 1b04 	str.w	r1, [ip], #4
 800c49a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c49e:	dcec      	bgt.n	800c47a <__multadd+0x12>
 800c4a0:	b30e      	cbz	r6, 800c4e6 <__multadd+0x7e>
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	42ab      	cmp	r3, r5
 800c4a6:	dc19      	bgt.n	800c4dc <__multadd+0x74>
 800c4a8:	6861      	ldr	r1, [r4, #4]
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	3101      	adds	r1, #1
 800c4ae:	f7ff ff79 	bl	800c3a4 <_Balloc>
 800c4b2:	4680      	mov	r8, r0
 800c4b4:	b928      	cbnz	r0, 800c4c2 <__multadd+0x5a>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <__multadd+0x84>)
 800c4ba:	480d      	ldr	r0, [pc, #52]	; (800c4f0 <__multadd+0x88>)
 800c4bc:	21ba      	movs	r1, #186	; 0xba
 800c4be:	f7fe fb1d 	bl	800aafc <__assert_func>
 800c4c2:	6922      	ldr	r2, [r4, #16]
 800c4c4:	3202      	adds	r2, #2
 800c4c6:	f104 010c 	add.w	r1, r4, #12
 800c4ca:	0092      	lsls	r2, r2, #2
 800c4cc:	300c      	adds	r0, #12
 800c4ce:	f7fe faf6 	bl	800aabe <memcpy>
 800c4d2:	4621      	mov	r1, r4
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f7ff ffa5 	bl	800c424 <_Bfree>
 800c4da:	4644      	mov	r4, r8
 800c4dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4e0:	3501      	adds	r5, #1
 800c4e2:	615e      	str	r6, [r3, #20]
 800c4e4:	6125      	str	r5, [r4, #16]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4ec:	0800d9ab 	.word	0x0800d9ab
 800c4f0:	0800da2d 	.word	0x0800da2d

0800c4f4 <__s2b>:
 800c4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	4615      	mov	r5, r2
 800c4fc:	461f      	mov	r7, r3
 800c4fe:	2209      	movs	r2, #9
 800c500:	3308      	adds	r3, #8
 800c502:	4606      	mov	r6, r0
 800c504:	fb93 f3f2 	sdiv	r3, r3, r2
 800c508:	2100      	movs	r1, #0
 800c50a:	2201      	movs	r2, #1
 800c50c:	429a      	cmp	r2, r3
 800c50e:	db09      	blt.n	800c524 <__s2b+0x30>
 800c510:	4630      	mov	r0, r6
 800c512:	f7ff ff47 	bl	800c3a4 <_Balloc>
 800c516:	b940      	cbnz	r0, 800c52a <__s2b+0x36>
 800c518:	4602      	mov	r2, r0
 800c51a:	4b19      	ldr	r3, [pc, #100]	; (800c580 <__s2b+0x8c>)
 800c51c:	4819      	ldr	r0, [pc, #100]	; (800c584 <__s2b+0x90>)
 800c51e:	21d3      	movs	r1, #211	; 0xd3
 800c520:	f7fe faec 	bl	800aafc <__assert_func>
 800c524:	0052      	lsls	r2, r2, #1
 800c526:	3101      	adds	r1, #1
 800c528:	e7f0      	b.n	800c50c <__s2b+0x18>
 800c52a:	9b08      	ldr	r3, [sp, #32]
 800c52c:	6143      	str	r3, [r0, #20]
 800c52e:	2d09      	cmp	r5, #9
 800c530:	f04f 0301 	mov.w	r3, #1
 800c534:	6103      	str	r3, [r0, #16]
 800c536:	dd16      	ble.n	800c566 <__s2b+0x72>
 800c538:	f104 0909 	add.w	r9, r4, #9
 800c53c:	46c8      	mov	r8, r9
 800c53e:	442c      	add	r4, r5
 800c540:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c544:	4601      	mov	r1, r0
 800c546:	3b30      	subs	r3, #48	; 0x30
 800c548:	220a      	movs	r2, #10
 800c54a:	4630      	mov	r0, r6
 800c54c:	f7ff ff8c 	bl	800c468 <__multadd>
 800c550:	45a0      	cmp	r8, r4
 800c552:	d1f5      	bne.n	800c540 <__s2b+0x4c>
 800c554:	f1a5 0408 	sub.w	r4, r5, #8
 800c558:	444c      	add	r4, r9
 800c55a:	1b2d      	subs	r5, r5, r4
 800c55c:	1963      	adds	r3, r4, r5
 800c55e:	42bb      	cmp	r3, r7
 800c560:	db04      	blt.n	800c56c <__s2b+0x78>
 800c562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c566:	340a      	adds	r4, #10
 800c568:	2509      	movs	r5, #9
 800c56a:	e7f6      	b.n	800c55a <__s2b+0x66>
 800c56c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c570:	4601      	mov	r1, r0
 800c572:	3b30      	subs	r3, #48	; 0x30
 800c574:	220a      	movs	r2, #10
 800c576:	4630      	mov	r0, r6
 800c578:	f7ff ff76 	bl	800c468 <__multadd>
 800c57c:	e7ee      	b.n	800c55c <__s2b+0x68>
 800c57e:	bf00      	nop
 800c580:	0800d9ab 	.word	0x0800d9ab
 800c584:	0800da2d 	.word	0x0800da2d

0800c588 <__hi0bits>:
 800c588:	0c03      	lsrs	r3, r0, #16
 800c58a:	041b      	lsls	r3, r3, #16
 800c58c:	b9d3      	cbnz	r3, 800c5c4 <__hi0bits+0x3c>
 800c58e:	0400      	lsls	r0, r0, #16
 800c590:	2310      	movs	r3, #16
 800c592:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c596:	bf04      	itt	eq
 800c598:	0200      	lsleq	r0, r0, #8
 800c59a:	3308      	addeq	r3, #8
 800c59c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5a0:	bf04      	itt	eq
 800c5a2:	0100      	lsleq	r0, r0, #4
 800c5a4:	3304      	addeq	r3, #4
 800c5a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5aa:	bf04      	itt	eq
 800c5ac:	0080      	lsleq	r0, r0, #2
 800c5ae:	3302      	addeq	r3, #2
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	db05      	blt.n	800c5c0 <__hi0bits+0x38>
 800c5b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5b8:	f103 0301 	add.w	r3, r3, #1
 800c5bc:	bf08      	it	eq
 800c5be:	2320      	moveq	r3, #32
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	4770      	bx	lr
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e7e4      	b.n	800c592 <__hi0bits+0xa>

0800c5c8 <__lo0bits>:
 800c5c8:	6803      	ldr	r3, [r0, #0]
 800c5ca:	f013 0207 	ands.w	r2, r3, #7
 800c5ce:	d00c      	beq.n	800c5ea <__lo0bits+0x22>
 800c5d0:	07d9      	lsls	r1, r3, #31
 800c5d2:	d422      	bmi.n	800c61a <__lo0bits+0x52>
 800c5d4:	079a      	lsls	r2, r3, #30
 800c5d6:	bf49      	itett	mi
 800c5d8:	085b      	lsrmi	r3, r3, #1
 800c5da:	089b      	lsrpl	r3, r3, #2
 800c5dc:	6003      	strmi	r3, [r0, #0]
 800c5de:	2201      	movmi	r2, #1
 800c5e0:	bf5c      	itt	pl
 800c5e2:	6003      	strpl	r3, [r0, #0]
 800c5e4:	2202      	movpl	r2, #2
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4770      	bx	lr
 800c5ea:	b299      	uxth	r1, r3
 800c5ec:	b909      	cbnz	r1, 800c5f2 <__lo0bits+0x2a>
 800c5ee:	0c1b      	lsrs	r3, r3, #16
 800c5f0:	2210      	movs	r2, #16
 800c5f2:	b2d9      	uxtb	r1, r3
 800c5f4:	b909      	cbnz	r1, 800c5fa <__lo0bits+0x32>
 800c5f6:	3208      	adds	r2, #8
 800c5f8:	0a1b      	lsrs	r3, r3, #8
 800c5fa:	0719      	lsls	r1, r3, #28
 800c5fc:	bf04      	itt	eq
 800c5fe:	091b      	lsreq	r3, r3, #4
 800c600:	3204      	addeq	r2, #4
 800c602:	0799      	lsls	r1, r3, #30
 800c604:	bf04      	itt	eq
 800c606:	089b      	lsreq	r3, r3, #2
 800c608:	3202      	addeq	r2, #2
 800c60a:	07d9      	lsls	r1, r3, #31
 800c60c:	d403      	bmi.n	800c616 <__lo0bits+0x4e>
 800c60e:	085b      	lsrs	r3, r3, #1
 800c610:	f102 0201 	add.w	r2, r2, #1
 800c614:	d003      	beq.n	800c61e <__lo0bits+0x56>
 800c616:	6003      	str	r3, [r0, #0]
 800c618:	e7e5      	b.n	800c5e6 <__lo0bits+0x1e>
 800c61a:	2200      	movs	r2, #0
 800c61c:	e7e3      	b.n	800c5e6 <__lo0bits+0x1e>
 800c61e:	2220      	movs	r2, #32
 800c620:	e7e1      	b.n	800c5e6 <__lo0bits+0x1e>
	...

0800c624 <__i2b>:
 800c624:	b510      	push	{r4, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	2101      	movs	r1, #1
 800c62a:	f7ff febb 	bl	800c3a4 <_Balloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	b928      	cbnz	r0, 800c63e <__i2b+0x1a>
 800c632:	4b05      	ldr	r3, [pc, #20]	; (800c648 <__i2b+0x24>)
 800c634:	4805      	ldr	r0, [pc, #20]	; (800c64c <__i2b+0x28>)
 800c636:	f240 1145 	movw	r1, #325	; 0x145
 800c63a:	f7fe fa5f 	bl	800aafc <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	6144      	str	r4, [r0, #20]
 800c642:	6103      	str	r3, [r0, #16]
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	0800d9ab 	.word	0x0800d9ab
 800c64c:	0800da2d 	.word	0x0800da2d

0800c650 <__multiply>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4691      	mov	r9, r2
 800c656:	690a      	ldr	r2, [r1, #16]
 800c658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	bfb8      	it	lt
 800c660:	460b      	movlt	r3, r1
 800c662:	460c      	mov	r4, r1
 800c664:	bfbc      	itt	lt
 800c666:	464c      	movlt	r4, r9
 800c668:	4699      	movlt	r9, r3
 800c66a:	6927      	ldr	r7, [r4, #16]
 800c66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	6861      	ldr	r1, [r4, #4]
 800c674:	eb07 060a 	add.w	r6, r7, sl
 800c678:	42b3      	cmp	r3, r6
 800c67a:	b085      	sub	sp, #20
 800c67c:	bfb8      	it	lt
 800c67e:	3101      	addlt	r1, #1
 800c680:	f7ff fe90 	bl	800c3a4 <_Balloc>
 800c684:	b930      	cbnz	r0, 800c694 <__multiply+0x44>
 800c686:	4602      	mov	r2, r0
 800c688:	4b44      	ldr	r3, [pc, #272]	; (800c79c <__multiply+0x14c>)
 800c68a:	4845      	ldr	r0, [pc, #276]	; (800c7a0 <__multiply+0x150>)
 800c68c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c690:	f7fe fa34 	bl	800aafc <__assert_func>
 800c694:	f100 0514 	add.w	r5, r0, #20
 800c698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c69c:	462b      	mov	r3, r5
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4543      	cmp	r3, r8
 800c6a2:	d321      	bcc.n	800c6e8 <__multiply+0x98>
 800c6a4:	f104 0314 	add.w	r3, r4, #20
 800c6a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6ac:	f109 0314 	add.w	r3, r9, #20
 800c6b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6b4:	9202      	str	r2, [sp, #8]
 800c6b6:	1b3a      	subs	r2, r7, r4
 800c6b8:	3a15      	subs	r2, #21
 800c6ba:	f022 0203 	bic.w	r2, r2, #3
 800c6be:	3204      	adds	r2, #4
 800c6c0:	f104 0115 	add.w	r1, r4, #21
 800c6c4:	428f      	cmp	r7, r1
 800c6c6:	bf38      	it	cc
 800c6c8:	2204      	movcc	r2, #4
 800c6ca:	9201      	str	r2, [sp, #4]
 800c6cc:	9a02      	ldr	r2, [sp, #8]
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d80c      	bhi.n	800c6ee <__multiply+0x9e>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	dd03      	ble.n	800c6e0 <__multiply+0x90>
 800c6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05b      	beq.n	800c798 <__multiply+0x148>
 800c6e0:	6106      	str	r6, [r0, #16]
 800c6e2:	b005      	add	sp, #20
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ec:	e7d8      	b.n	800c6a0 <__multiply+0x50>
 800c6ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6f2:	f1ba 0f00 	cmp.w	sl, #0
 800c6f6:	d024      	beq.n	800c742 <__multiply+0xf2>
 800c6f8:	f104 0e14 	add.w	lr, r4, #20
 800c6fc:	46a9      	mov	r9, r5
 800c6fe:	f04f 0c00 	mov.w	ip, #0
 800c702:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c706:	f8d9 1000 	ldr.w	r1, [r9]
 800c70a:	fa1f fb82 	uxth.w	fp, r2
 800c70e:	b289      	uxth	r1, r1
 800c710:	fb0a 110b 	mla	r1, sl, fp, r1
 800c714:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c718:	f8d9 2000 	ldr.w	r2, [r9]
 800c71c:	4461      	add	r1, ip
 800c71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c722:	fb0a c20b 	mla	r2, sl, fp, ip
 800c726:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c72a:	b289      	uxth	r1, r1
 800c72c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c730:	4577      	cmp	r7, lr
 800c732:	f849 1b04 	str.w	r1, [r9], #4
 800c736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c73a:	d8e2      	bhi.n	800c702 <__multiply+0xb2>
 800c73c:	9a01      	ldr	r2, [sp, #4]
 800c73e:	f845 c002 	str.w	ip, [r5, r2]
 800c742:	9a03      	ldr	r2, [sp, #12]
 800c744:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c748:	3304      	adds	r3, #4
 800c74a:	f1b9 0f00 	cmp.w	r9, #0
 800c74e:	d021      	beq.n	800c794 <__multiply+0x144>
 800c750:	6829      	ldr	r1, [r5, #0]
 800c752:	f104 0c14 	add.w	ip, r4, #20
 800c756:	46ae      	mov	lr, r5
 800c758:	f04f 0a00 	mov.w	sl, #0
 800c75c:	f8bc b000 	ldrh.w	fp, [ip]
 800c760:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c764:	fb09 220b 	mla	r2, r9, fp, r2
 800c768:	4452      	add	r2, sl
 800c76a:	b289      	uxth	r1, r1
 800c76c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c770:	f84e 1b04 	str.w	r1, [lr], #4
 800c774:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c778:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c77c:	f8be 1000 	ldrh.w	r1, [lr]
 800c780:	fb09 110a 	mla	r1, r9, sl, r1
 800c784:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c788:	4567      	cmp	r7, ip
 800c78a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c78e:	d8e5      	bhi.n	800c75c <__multiply+0x10c>
 800c790:	9a01      	ldr	r2, [sp, #4]
 800c792:	50a9      	str	r1, [r5, r2]
 800c794:	3504      	adds	r5, #4
 800c796:	e799      	b.n	800c6cc <__multiply+0x7c>
 800c798:	3e01      	subs	r6, #1
 800c79a:	e79b      	b.n	800c6d4 <__multiply+0x84>
 800c79c:	0800d9ab 	.word	0x0800d9ab
 800c7a0:	0800da2d 	.word	0x0800da2d

0800c7a4 <__pow5mult>:
 800c7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a8:	4615      	mov	r5, r2
 800c7aa:	f012 0203 	ands.w	r2, r2, #3
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	d007      	beq.n	800c7c4 <__pow5mult+0x20>
 800c7b4:	4c25      	ldr	r4, [pc, #148]	; (800c84c <__pow5mult+0xa8>)
 800c7b6:	3a01      	subs	r2, #1
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7be:	f7ff fe53 	bl	800c468 <__multadd>
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	10ad      	asrs	r5, r5, #2
 800c7c6:	d03d      	beq.n	800c844 <__pow5mult+0xa0>
 800c7c8:	69f4      	ldr	r4, [r6, #28]
 800c7ca:	b97c      	cbnz	r4, 800c7ec <__pow5mult+0x48>
 800c7cc:	2010      	movs	r0, #16
 800c7ce:	f7fc fc85 	bl	80090dc <malloc>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	61f0      	str	r0, [r6, #28]
 800c7d6:	b928      	cbnz	r0, 800c7e4 <__pow5mult+0x40>
 800c7d8:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <__pow5mult+0xac>)
 800c7da:	481e      	ldr	r0, [pc, #120]	; (800c854 <__pow5mult+0xb0>)
 800c7dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c7e0:	f7fe f98c 	bl	800aafc <__assert_func>
 800c7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7e8:	6004      	str	r4, [r0, #0]
 800c7ea:	60c4      	str	r4, [r0, #12]
 800c7ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7f4:	b94c      	cbnz	r4, 800c80a <__pow5mult+0x66>
 800c7f6:	f240 2171 	movw	r1, #625	; 0x271
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ff12 	bl	800c624 <__i2b>
 800c800:	2300      	movs	r3, #0
 800c802:	f8c8 0008 	str.w	r0, [r8, #8]
 800c806:	4604      	mov	r4, r0
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	f04f 0900 	mov.w	r9, #0
 800c80e:	07eb      	lsls	r3, r5, #31
 800c810:	d50a      	bpl.n	800c828 <__pow5mult+0x84>
 800c812:	4639      	mov	r1, r7
 800c814:	4622      	mov	r2, r4
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ff1a 	bl	800c650 <__multiply>
 800c81c:	4639      	mov	r1, r7
 800c81e:	4680      	mov	r8, r0
 800c820:	4630      	mov	r0, r6
 800c822:	f7ff fdff 	bl	800c424 <_Bfree>
 800c826:	4647      	mov	r7, r8
 800c828:	106d      	asrs	r5, r5, #1
 800c82a:	d00b      	beq.n	800c844 <__pow5mult+0xa0>
 800c82c:	6820      	ldr	r0, [r4, #0]
 800c82e:	b938      	cbnz	r0, 800c840 <__pow5mult+0x9c>
 800c830:	4622      	mov	r2, r4
 800c832:	4621      	mov	r1, r4
 800c834:	4630      	mov	r0, r6
 800c836:	f7ff ff0b 	bl	800c650 <__multiply>
 800c83a:	6020      	str	r0, [r4, #0]
 800c83c:	f8c0 9000 	str.w	r9, [r0]
 800c840:	4604      	mov	r4, r0
 800c842:	e7e4      	b.n	800c80e <__pow5mult+0x6a>
 800c844:	4638      	mov	r0, r7
 800c846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84a:	bf00      	nop
 800c84c:	0800db78 	.word	0x0800db78
 800c850:	0800d790 	.word	0x0800d790
 800c854:	0800da2d 	.word	0x0800da2d

0800c858 <__lshift>:
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	460c      	mov	r4, r1
 800c85e:	6849      	ldr	r1, [r1, #4]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	4607      	mov	r7, r0
 800c86a:	4691      	mov	r9, r2
 800c86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c870:	f108 0601 	add.w	r6, r8, #1
 800c874:	42b3      	cmp	r3, r6
 800c876:	db0b      	blt.n	800c890 <__lshift+0x38>
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff fd93 	bl	800c3a4 <_Balloc>
 800c87e:	4605      	mov	r5, r0
 800c880:	b948      	cbnz	r0, 800c896 <__lshift+0x3e>
 800c882:	4602      	mov	r2, r0
 800c884:	4b28      	ldr	r3, [pc, #160]	; (800c928 <__lshift+0xd0>)
 800c886:	4829      	ldr	r0, [pc, #164]	; (800c92c <__lshift+0xd4>)
 800c888:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c88c:	f7fe f936 	bl	800aafc <__assert_func>
 800c890:	3101      	adds	r1, #1
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	e7ee      	b.n	800c874 <__lshift+0x1c>
 800c896:	2300      	movs	r3, #0
 800c898:	f100 0114 	add.w	r1, r0, #20
 800c89c:	f100 0210 	add.w	r2, r0, #16
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	4553      	cmp	r3, sl
 800c8a4:	db33      	blt.n	800c90e <__lshift+0xb6>
 800c8a6:	6920      	ldr	r0, [r4, #16]
 800c8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8ac:	f104 0314 	add.w	r3, r4, #20
 800c8b0:	f019 091f 	ands.w	r9, r9, #31
 800c8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8bc:	d02b      	beq.n	800c916 <__lshift+0xbe>
 800c8be:	f1c9 0e20 	rsb	lr, r9, #32
 800c8c2:	468a      	mov	sl, r1
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	fa00 f009 	lsl.w	r0, r0, r9
 800c8cc:	4310      	orrs	r0, r2
 800c8ce:	f84a 0b04 	str.w	r0, [sl], #4
 800c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d6:	459c      	cmp	ip, r3
 800c8d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8dc:	d8f3      	bhi.n	800c8c6 <__lshift+0x6e>
 800c8de:	ebac 0304 	sub.w	r3, ip, r4
 800c8e2:	3b15      	subs	r3, #21
 800c8e4:	f023 0303 	bic.w	r3, r3, #3
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	f104 0015 	add.w	r0, r4, #21
 800c8ee:	4584      	cmp	ip, r0
 800c8f0:	bf38      	it	cc
 800c8f2:	2304      	movcc	r3, #4
 800c8f4:	50ca      	str	r2, [r1, r3]
 800c8f6:	b10a      	cbz	r2, 800c8fc <__lshift+0xa4>
 800c8f8:	f108 0602 	add.w	r6, r8, #2
 800c8fc:	3e01      	subs	r6, #1
 800c8fe:	4638      	mov	r0, r7
 800c900:	612e      	str	r6, [r5, #16]
 800c902:	4621      	mov	r1, r4
 800c904:	f7ff fd8e 	bl	800c424 <_Bfree>
 800c908:	4628      	mov	r0, r5
 800c90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c90e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c912:	3301      	adds	r3, #1
 800c914:	e7c5      	b.n	800c8a2 <__lshift+0x4a>
 800c916:	3904      	subs	r1, #4
 800c918:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c920:	459c      	cmp	ip, r3
 800c922:	d8f9      	bhi.n	800c918 <__lshift+0xc0>
 800c924:	e7ea      	b.n	800c8fc <__lshift+0xa4>
 800c926:	bf00      	nop
 800c928:	0800d9ab 	.word	0x0800d9ab
 800c92c:	0800da2d 	.word	0x0800da2d

0800c930 <__mcmp>:
 800c930:	b530      	push	{r4, r5, lr}
 800c932:	6902      	ldr	r2, [r0, #16]
 800c934:	690c      	ldr	r4, [r1, #16]
 800c936:	1b12      	subs	r2, r2, r4
 800c938:	d10e      	bne.n	800c958 <__mcmp+0x28>
 800c93a:	f100 0314 	add.w	r3, r0, #20
 800c93e:	3114      	adds	r1, #20
 800c940:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c944:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c948:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c94c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c950:	42a5      	cmp	r5, r4
 800c952:	d003      	beq.n	800c95c <__mcmp+0x2c>
 800c954:	d305      	bcc.n	800c962 <__mcmp+0x32>
 800c956:	2201      	movs	r2, #1
 800c958:	4610      	mov	r0, r2
 800c95a:	bd30      	pop	{r4, r5, pc}
 800c95c:	4283      	cmp	r3, r0
 800c95e:	d3f3      	bcc.n	800c948 <__mcmp+0x18>
 800c960:	e7fa      	b.n	800c958 <__mcmp+0x28>
 800c962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c966:	e7f7      	b.n	800c958 <__mcmp+0x28>

0800c968 <__mdiff>:
 800c968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96c:	460c      	mov	r4, r1
 800c96e:	4606      	mov	r6, r0
 800c970:	4611      	mov	r1, r2
 800c972:	4620      	mov	r0, r4
 800c974:	4690      	mov	r8, r2
 800c976:	f7ff ffdb 	bl	800c930 <__mcmp>
 800c97a:	1e05      	subs	r5, r0, #0
 800c97c:	d110      	bne.n	800c9a0 <__mdiff+0x38>
 800c97e:	4629      	mov	r1, r5
 800c980:	4630      	mov	r0, r6
 800c982:	f7ff fd0f 	bl	800c3a4 <_Balloc>
 800c986:	b930      	cbnz	r0, 800c996 <__mdiff+0x2e>
 800c988:	4b3a      	ldr	r3, [pc, #232]	; (800ca74 <__mdiff+0x10c>)
 800c98a:	4602      	mov	r2, r0
 800c98c:	f240 2137 	movw	r1, #567	; 0x237
 800c990:	4839      	ldr	r0, [pc, #228]	; (800ca78 <__mdiff+0x110>)
 800c992:	f7fe f8b3 	bl	800aafc <__assert_func>
 800c996:	2301      	movs	r3, #1
 800c998:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c99c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	bfa4      	itt	ge
 800c9a2:	4643      	movge	r3, r8
 800c9a4:	46a0      	movge	r8, r4
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9ac:	bfa6      	itte	ge
 800c9ae:	461c      	movge	r4, r3
 800c9b0:	2500      	movge	r5, #0
 800c9b2:	2501      	movlt	r5, #1
 800c9b4:	f7ff fcf6 	bl	800c3a4 <_Balloc>
 800c9b8:	b920      	cbnz	r0, 800c9c4 <__mdiff+0x5c>
 800c9ba:	4b2e      	ldr	r3, [pc, #184]	; (800ca74 <__mdiff+0x10c>)
 800c9bc:	4602      	mov	r2, r0
 800c9be:	f240 2145 	movw	r1, #581	; 0x245
 800c9c2:	e7e5      	b.n	800c990 <__mdiff+0x28>
 800c9c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9c8:	6926      	ldr	r6, [r4, #16]
 800c9ca:	60c5      	str	r5, [r0, #12]
 800c9cc:	f104 0914 	add.w	r9, r4, #20
 800c9d0:	f108 0514 	add.w	r5, r8, #20
 800c9d4:	f100 0e14 	add.w	lr, r0, #20
 800c9d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9e0:	f108 0210 	add.w	r2, r8, #16
 800c9e4:	46f2      	mov	sl, lr
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9f0:	fa11 f88b 	uxtah	r8, r1, fp
 800c9f4:	b299      	uxth	r1, r3
 800c9f6:	0c1b      	lsrs	r3, r3, #16
 800c9f8:	eba8 0801 	sub.w	r8, r8, r1
 800c9fc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca04:	fa1f f888 	uxth.w	r8, r8
 800ca08:	1419      	asrs	r1, r3, #16
 800ca0a:	454e      	cmp	r6, r9
 800ca0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca10:	f84a 3b04 	str.w	r3, [sl], #4
 800ca14:	d8e8      	bhi.n	800c9e8 <__mdiff+0x80>
 800ca16:	1b33      	subs	r3, r6, r4
 800ca18:	3b15      	subs	r3, #21
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	3304      	adds	r3, #4
 800ca20:	3415      	adds	r4, #21
 800ca22:	42a6      	cmp	r6, r4
 800ca24:	bf38      	it	cc
 800ca26:	2304      	movcc	r3, #4
 800ca28:	441d      	add	r5, r3
 800ca2a:	4473      	add	r3, lr
 800ca2c:	469e      	mov	lr, r3
 800ca2e:	462e      	mov	r6, r5
 800ca30:	4566      	cmp	r6, ip
 800ca32:	d30e      	bcc.n	800ca52 <__mdiff+0xea>
 800ca34:	f10c 0203 	add.w	r2, ip, #3
 800ca38:	1b52      	subs	r2, r2, r5
 800ca3a:	f022 0203 	bic.w	r2, r2, #3
 800ca3e:	3d03      	subs	r5, #3
 800ca40:	45ac      	cmp	ip, r5
 800ca42:	bf38      	it	cc
 800ca44:	2200      	movcc	r2, #0
 800ca46:	4413      	add	r3, r2
 800ca48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca4c:	b17a      	cbz	r2, 800ca6e <__mdiff+0x106>
 800ca4e:	6107      	str	r7, [r0, #16]
 800ca50:	e7a4      	b.n	800c99c <__mdiff+0x34>
 800ca52:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca56:	fa11 f288 	uxtah	r2, r1, r8
 800ca5a:	1414      	asrs	r4, r2, #16
 800ca5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca60:	b292      	uxth	r2, r2
 800ca62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca66:	f84e 2b04 	str.w	r2, [lr], #4
 800ca6a:	1421      	asrs	r1, r4, #16
 800ca6c:	e7e0      	b.n	800ca30 <__mdiff+0xc8>
 800ca6e:	3f01      	subs	r7, #1
 800ca70:	e7ea      	b.n	800ca48 <__mdiff+0xe0>
 800ca72:	bf00      	nop
 800ca74:	0800d9ab 	.word	0x0800d9ab
 800ca78:	0800da2d 	.word	0x0800da2d

0800ca7c <__ulp>:
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	ed8d 0b00 	vstr	d0, [sp]
 800ca82:	9a01      	ldr	r2, [sp, #4]
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <__ulp+0x48>)
 800ca86:	4013      	ands	r3, r2
 800ca88:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc08      	bgt.n	800caa2 <__ulp+0x26>
 800ca90:	425b      	negs	r3, r3
 800ca92:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ca96:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ca9a:	da04      	bge.n	800caa6 <__ulp+0x2a>
 800ca9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800caa0:	4113      	asrs	r3, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	e008      	b.n	800cab8 <__ulp+0x3c>
 800caa6:	f1a2 0314 	sub.w	r3, r2, #20
 800caaa:	2b1e      	cmp	r3, #30
 800caac:	bfda      	itte	le
 800caae:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cab2:	40da      	lsrle	r2, r3
 800cab4:	2201      	movgt	r2, #1
 800cab6:	2300      	movs	r3, #0
 800cab8:	4619      	mov	r1, r3
 800caba:	4610      	mov	r0, r2
 800cabc:	ec41 0b10 	vmov	d0, r0, r1
 800cac0:	b002      	add	sp, #8
 800cac2:	4770      	bx	lr
 800cac4:	7ff00000 	.word	0x7ff00000

0800cac8 <__b2d>:
 800cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cacc:	6906      	ldr	r6, [r0, #16]
 800cace:	f100 0814 	add.w	r8, r0, #20
 800cad2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cad6:	1f37      	subs	r7, r6, #4
 800cad8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cadc:	4610      	mov	r0, r2
 800cade:	f7ff fd53 	bl	800c588 <__hi0bits>
 800cae2:	f1c0 0320 	rsb	r3, r0, #32
 800cae6:	280a      	cmp	r0, #10
 800cae8:	600b      	str	r3, [r1, #0]
 800caea:	491b      	ldr	r1, [pc, #108]	; (800cb58 <__b2d+0x90>)
 800caec:	dc15      	bgt.n	800cb1a <__b2d+0x52>
 800caee:	f1c0 0c0b 	rsb	ip, r0, #11
 800caf2:	fa22 f30c 	lsr.w	r3, r2, ip
 800caf6:	45b8      	cmp	r8, r7
 800caf8:	ea43 0501 	orr.w	r5, r3, r1
 800cafc:	bf34      	ite	cc
 800cafe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb02:	2300      	movcs	r3, #0
 800cb04:	3015      	adds	r0, #21
 800cb06:	fa02 f000 	lsl.w	r0, r2, r0
 800cb0a:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb0e:	4303      	orrs	r3, r0
 800cb10:	461c      	mov	r4, r3
 800cb12:	ec45 4b10 	vmov	d0, r4, r5
 800cb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1a:	45b8      	cmp	r8, r7
 800cb1c:	bf3a      	itte	cc
 800cb1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb22:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb26:	2300      	movcs	r3, #0
 800cb28:	380b      	subs	r0, #11
 800cb2a:	d012      	beq.n	800cb52 <__b2d+0x8a>
 800cb2c:	f1c0 0120 	rsb	r1, r0, #32
 800cb30:	fa23 f401 	lsr.w	r4, r3, r1
 800cb34:	4082      	lsls	r2, r0
 800cb36:	4322      	orrs	r2, r4
 800cb38:	4547      	cmp	r7, r8
 800cb3a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cb3e:	bf8c      	ite	hi
 800cb40:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb44:	2200      	movls	r2, #0
 800cb46:	4083      	lsls	r3, r0
 800cb48:	40ca      	lsrs	r2, r1
 800cb4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	e7de      	b.n	800cb10 <__b2d+0x48>
 800cb52:	ea42 0501 	orr.w	r5, r2, r1
 800cb56:	e7db      	b.n	800cb10 <__b2d+0x48>
 800cb58:	3ff00000 	.word	0x3ff00000

0800cb5c <__d2b>:
 800cb5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	460f      	mov	r7, r1
 800cb62:	2101      	movs	r1, #1
 800cb64:	ec59 8b10 	vmov	r8, r9, d0
 800cb68:	4616      	mov	r6, r2
 800cb6a:	f7ff fc1b 	bl	800c3a4 <_Balloc>
 800cb6e:	4604      	mov	r4, r0
 800cb70:	b930      	cbnz	r0, 800cb80 <__d2b+0x24>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b24      	ldr	r3, [pc, #144]	; (800cc08 <__d2b+0xac>)
 800cb76:	4825      	ldr	r0, [pc, #148]	; (800cc0c <__d2b+0xb0>)
 800cb78:	f240 310f 	movw	r1, #783	; 0x30f
 800cb7c:	f7fd ffbe 	bl	800aafc <__assert_func>
 800cb80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb88:	bb2d      	cbnz	r5, 800cbd6 <__d2b+0x7a>
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	f1b8 0300 	subs.w	r3, r8, #0
 800cb90:	d026      	beq.n	800cbe0 <__d2b+0x84>
 800cb92:	4668      	mov	r0, sp
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	f7ff fd17 	bl	800c5c8 <__lo0bits>
 800cb9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb9e:	b1e8      	cbz	r0, 800cbdc <__d2b+0x80>
 800cba0:	f1c0 0320 	rsb	r3, r0, #32
 800cba4:	fa02 f303 	lsl.w	r3, r2, r3
 800cba8:	430b      	orrs	r3, r1
 800cbaa:	40c2      	lsrs	r2, r0
 800cbac:	6163      	str	r3, [r4, #20]
 800cbae:	9201      	str	r2, [sp, #4]
 800cbb0:	9b01      	ldr	r3, [sp, #4]
 800cbb2:	61a3      	str	r3, [r4, #24]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bf14      	ite	ne
 800cbb8:	2202      	movne	r2, #2
 800cbba:	2201      	moveq	r2, #1
 800cbbc:	6122      	str	r2, [r4, #16]
 800cbbe:	b1bd      	cbz	r5, 800cbf0 <__d2b+0x94>
 800cbc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbc4:	4405      	add	r5, r0
 800cbc6:	603d      	str	r5, [r7, #0]
 800cbc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbcc:	6030      	str	r0, [r6, #0]
 800cbce:	4620      	mov	r0, r4
 800cbd0:	b003      	add	sp, #12
 800cbd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbda:	e7d6      	b.n	800cb8a <__d2b+0x2e>
 800cbdc:	6161      	str	r1, [r4, #20]
 800cbde:	e7e7      	b.n	800cbb0 <__d2b+0x54>
 800cbe0:	a801      	add	r0, sp, #4
 800cbe2:	f7ff fcf1 	bl	800c5c8 <__lo0bits>
 800cbe6:	9b01      	ldr	r3, [sp, #4]
 800cbe8:	6163      	str	r3, [r4, #20]
 800cbea:	3020      	adds	r0, #32
 800cbec:	2201      	movs	r2, #1
 800cbee:	e7e5      	b.n	800cbbc <__d2b+0x60>
 800cbf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cbf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cbf8:	6038      	str	r0, [r7, #0]
 800cbfa:	6918      	ldr	r0, [r3, #16]
 800cbfc:	f7ff fcc4 	bl	800c588 <__hi0bits>
 800cc00:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc04:	e7e2      	b.n	800cbcc <__d2b+0x70>
 800cc06:	bf00      	nop
 800cc08:	0800d9ab 	.word	0x0800d9ab
 800cc0c:	0800da2d 	.word	0x0800da2d

0800cc10 <__ratio>:
 800cc10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc14:	4688      	mov	r8, r1
 800cc16:	4669      	mov	r1, sp
 800cc18:	4681      	mov	r9, r0
 800cc1a:	f7ff ff55 	bl	800cac8 <__b2d>
 800cc1e:	a901      	add	r1, sp, #4
 800cc20:	4640      	mov	r0, r8
 800cc22:	ec55 4b10 	vmov	r4, r5, d0
 800cc26:	f7ff ff4f 	bl	800cac8 <__b2d>
 800cc2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cc32:	eba3 0c02 	sub.w	ip, r3, r2
 800cc36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cc3a:	1a9b      	subs	r3, r3, r2
 800cc3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	bfd6      	itet	le
 800cc48:	460a      	movle	r2, r1
 800cc4a:	462a      	movgt	r2, r5
 800cc4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc50:	468b      	mov	fp, r1
 800cc52:	462f      	mov	r7, r5
 800cc54:	bfd4      	ite	le
 800cc56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cc5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cc5e:	4620      	mov	r0, r4
 800cc60:	ee10 2a10 	vmov	r2, s0
 800cc64:	465b      	mov	r3, fp
 800cc66:	4639      	mov	r1, r7
 800cc68:	f7f3 fdf0 	bl	800084c <__aeabi_ddiv>
 800cc6c:	ec41 0b10 	vmov	d0, r0, r1
 800cc70:	b003      	add	sp, #12
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc76 <__copybits>:
 800cc76:	3901      	subs	r1, #1
 800cc78:	b570      	push	{r4, r5, r6, lr}
 800cc7a:	1149      	asrs	r1, r1, #5
 800cc7c:	6914      	ldr	r4, [r2, #16]
 800cc7e:	3101      	adds	r1, #1
 800cc80:	f102 0314 	add.w	r3, r2, #20
 800cc84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc8c:	1f05      	subs	r5, r0, #4
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	d30c      	bcc.n	800ccac <__copybits+0x36>
 800cc92:	1aa3      	subs	r3, r4, r2
 800cc94:	3b11      	subs	r3, #17
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	3211      	adds	r2, #17
 800cc9c:	42a2      	cmp	r2, r4
 800cc9e:	bf88      	it	hi
 800cca0:	2300      	movhi	r3, #0
 800cca2:	4418      	add	r0, r3
 800cca4:	2300      	movs	r3, #0
 800cca6:	4288      	cmp	r0, r1
 800cca8:	d305      	bcc.n	800ccb6 <__copybits+0x40>
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}
 800ccac:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccb0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ccb4:	e7eb      	b.n	800cc8e <__copybits+0x18>
 800ccb6:	f840 3b04 	str.w	r3, [r0], #4
 800ccba:	e7f4      	b.n	800cca6 <__copybits+0x30>

0800ccbc <__any_on>:
 800ccbc:	f100 0214 	add.w	r2, r0, #20
 800ccc0:	6900      	ldr	r0, [r0, #16]
 800ccc2:	114b      	asrs	r3, r1, #5
 800ccc4:	4298      	cmp	r0, r3
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	db11      	blt.n	800ccee <__any_on+0x32>
 800ccca:	dd0a      	ble.n	800cce2 <__any_on+0x26>
 800cccc:	f011 011f 	ands.w	r1, r1, #31
 800ccd0:	d007      	beq.n	800cce2 <__any_on+0x26>
 800ccd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ccd6:	fa24 f001 	lsr.w	r0, r4, r1
 800ccda:	fa00 f101 	lsl.w	r1, r0, r1
 800ccde:	428c      	cmp	r4, r1
 800cce0:	d10b      	bne.n	800ccfa <__any_on+0x3e>
 800cce2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d803      	bhi.n	800ccf2 <__any_on+0x36>
 800ccea:	2000      	movs	r0, #0
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	4603      	mov	r3, r0
 800ccf0:	e7f7      	b.n	800cce2 <__any_on+0x26>
 800ccf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ccf6:	2900      	cmp	r1, #0
 800ccf8:	d0f5      	beq.n	800cce6 <__any_on+0x2a>
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	e7f6      	b.n	800ccec <__any_on+0x30>

0800ccfe <__sread>:
 800ccfe:	b510      	push	{r4, lr}
 800cd00:	460c      	mov	r4, r1
 800cd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd06:	f000 f8c7 	bl	800ce98 <_read_r>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	bfab      	itete	ge
 800cd0e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd10:	89a3      	ldrhlt	r3, [r4, #12]
 800cd12:	181b      	addge	r3, r3, r0
 800cd14:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd18:	bfac      	ite	ge
 800cd1a:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd1c:	81a3      	strhlt	r3, [r4, #12]
 800cd1e:	bd10      	pop	{r4, pc}

0800cd20 <__swrite>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	461f      	mov	r7, r3
 800cd26:	898b      	ldrh	r3, [r1, #12]
 800cd28:	05db      	lsls	r3, r3, #23
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	4616      	mov	r6, r2
 800cd30:	d505      	bpl.n	800cd3e <__swrite+0x1e>
 800cd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd36:	2302      	movs	r3, #2
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f000 f89b 	bl	800ce74 <_lseek_r>
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	4632      	mov	r2, r6
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	4628      	mov	r0, r5
 800cd50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	f000 b8b2 	b.w	800cebc <_write_r>

0800cd58 <__sseek>:
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd60:	f000 f888 	bl	800ce74 <_lseek_r>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	bf15      	itete	ne
 800cd6a:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd6c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd70:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd74:	81a3      	strheq	r3, [r4, #12]
 800cd76:	bf18      	it	ne
 800cd78:	81a3      	strhne	r3, [r4, #12]
 800cd7a:	bd10      	pop	{r4, pc}

0800cd7c <__sclose>:
 800cd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd80:	f000 b868 	b.w	800ce54 <_close_r>

0800cd84 <fiprintf>:
 800cd84:	b40e      	push	{r1, r2, r3}
 800cd86:	b503      	push	{r0, r1, lr}
 800cd88:	4601      	mov	r1, r0
 800cd8a:	ab03      	add	r3, sp, #12
 800cd8c:	4805      	ldr	r0, [pc, #20]	; (800cda4 <fiprintf+0x20>)
 800cd8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd92:	6800      	ldr	r0, [r0, #0]
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	f000 f8e9 	bl	800cf6c <_vfiprintf_r>
 800cd9a:	b002      	add	sp, #8
 800cd9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda0:	b003      	add	sp, #12
 800cda2:	4770      	bx	lr
 800cda4:	200001d4 	.word	0x200001d4

0800cda8 <_realloc_r>:
 800cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdac:	4680      	mov	r8, r0
 800cdae:	4614      	mov	r4, r2
 800cdb0:	460e      	mov	r6, r1
 800cdb2:	b921      	cbnz	r1, 800cdbe <_realloc_r+0x16>
 800cdb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb8:	4611      	mov	r1, r2
 800cdba:	f7fc b9b7 	b.w	800912c <_malloc_r>
 800cdbe:	b92a      	cbnz	r2, 800cdcc <_realloc_r+0x24>
 800cdc0:	f7fe fd34 	bl	800b82c <_free_r>
 800cdc4:	4625      	mov	r5, r4
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdcc:	f000 f9e8 	bl	800d1a0 <_malloc_usable_size_r>
 800cdd0:	4284      	cmp	r4, r0
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	d802      	bhi.n	800cddc <_realloc_r+0x34>
 800cdd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdda:	d812      	bhi.n	800ce02 <_realloc_r+0x5a>
 800cddc:	4621      	mov	r1, r4
 800cdde:	4640      	mov	r0, r8
 800cde0:	f7fc f9a4 	bl	800912c <_malloc_r>
 800cde4:	4605      	mov	r5, r0
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d0ed      	beq.n	800cdc6 <_realloc_r+0x1e>
 800cdea:	42bc      	cmp	r4, r7
 800cdec:	4622      	mov	r2, r4
 800cdee:	4631      	mov	r1, r6
 800cdf0:	bf28      	it	cs
 800cdf2:	463a      	movcs	r2, r7
 800cdf4:	f7fd fe63 	bl	800aabe <memcpy>
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	f7fe fd16 	bl	800b82c <_free_r>
 800ce00:	e7e1      	b.n	800cdc6 <_realloc_r+0x1e>
 800ce02:	4635      	mov	r5, r6
 800ce04:	e7df      	b.n	800cdc6 <_realloc_r+0x1e>

0800ce06 <__ascii_wctomb>:
 800ce06:	b149      	cbz	r1, 800ce1c <__ascii_wctomb+0x16>
 800ce08:	2aff      	cmp	r2, #255	; 0xff
 800ce0a:	bf85      	ittet	hi
 800ce0c:	238a      	movhi	r3, #138	; 0x8a
 800ce0e:	6003      	strhi	r3, [r0, #0]
 800ce10:	700a      	strbls	r2, [r1, #0]
 800ce12:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ce16:	bf98      	it	ls
 800ce18:	2001      	movls	r0, #1
 800ce1a:	4770      	bx	lr
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	4770      	bx	lr

0800ce20 <memmove>:
 800ce20:	4288      	cmp	r0, r1
 800ce22:	b510      	push	{r4, lr}
 800ce24:	eb01 0402 	add.w	r4, r1, r2
 800ce28:	d902      	bls.n	800ce30 <memmove+0x10>
 800ce2a:	4284      	cmp	r4, r0
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	d807      	bhi.n	800ce40 <memmove+0x20>
 800ce30:	1e43      	subs	r3, r0, #1
 800ce32:	42a1      	cmp	r1, r4
 800ce34:	d008      	beq.n	800ce48 <memmove+0x28>
 800ce36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce3e:	e7f8      	b.n	800ce32 <memmove+0x12>
 800ce40:	4402      	add	r2, r0
 800ce42:	4601      	mov	r1, r0
 800ce44:	428a      	cmp	r2, r1
 800ce46:	d100      	bne.n	800ce4a <memmove+0x2a>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce52:	e7f7      	b.n	800ce44 <memmove+0x24>

0800ce54 <_close_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d06      	ldr	r5, [pc, #24]	; (800ce70 <_close_r+0x1c>)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	602b      	str	r3, [r5, #0]
 800ce60:	f7f4 ffa3 	bl	8001daa <_close>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_close_r+0x1a>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_close_r+0x1a>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	20003c38 	.word	0x20003c38

0800ce74 <_lseek_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	; (800ce94 <_lseek_r+0x20>)
 800ce78:	4604      	mov	r4, r0
 800ce7a:	4608      	mov	r0, r1
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	602a      	str	r2, [r5, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f7f4 ffb8 	bl	8001df8 <_lseek>
 800ce88:	1c43      	adds	r3, r0, #1
 800ce8a:	d102      	bne.n	800ce92 <_lseek_r+0x1e>
 800ce8c:	682b      	ldr	r3, [r5, #0]
 800ce8e:	b103      	cbz	r3, 800ce92 <_lseek_r+0x1e>
 800ce90:	6023      	str	r3, [r4, #0]
 800ce92:	bd38      	pop	{r3, r4, r5, pc}
 800ce94:	20003c38 	.word	0x20003c38

0800ce98 <_read_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d07      	ldr	r5, [pc, #28]	; (800ceb8 <_read_r+0x20>)
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	4608      	mov	r0, r1
 800cea0:	4611      	mov	r1, r2
 800cea2:	2200      	movs	r2, #0
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	f7f4 ff46 	bl	8001d38 <_read>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_read_r+0x1e>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_read_r+0x1e>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	20003c38 	.word	0x20003c38

0800cebc <_write_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_write_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f4 ff51 	bl	8001d72 <_write>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_write_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_write_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20003c38 	.word	0x20003c38

0800cee0 <abort>:
 800cee0:	b508      	push	{r3, lr}
 800cee2:	2006      	movs	r0, #6
 800cee4:	f000 faa6 	bl	800d434 <raise>
 800cee8:	2001      	movs	r0, #1
 800ceea:	f7f4 ff1b 	bl	8001d24 <_exit>

0800ceee <_calloc_r>:
 800ceee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef0:	fba1 2402 	umull	r2, r4, r1, r2
 800cef4:	b94c      	cbnz	r4, 800cf0a <_calloc_r+0x1c>
 800cef6:	4611      	mov	r1, r2
 800cef8:	9201      	str	r2, [sp, #4]
 800cefa:	f7fc f917 	bl	800912c <_malloc_r>
 800cefe:	9a01      	ldr	r2, [sp, #4]
 800cf00:	4605      	mov	r5, r0
 800cf02:	b930      	cbnz	r0, 800cf12 <_calloc_r+0x24>
 800cf04:	4628      	mov	r0, r5
 800cf06:	b003      	add	sp, #12
 800cf08:	bd30      	pop	{r4, r5, pc}
 800cf0a:	220c      	movs	r2, #12
 800cf0c:	6002      	str	r2, [r0, #0]
 800cf0e:	2500      	movs	r5, #0
 800cf10:	e7f8      	b.n	800cf04 <_calloc_r+0x16>
 800cf12:	4621      	mov	r1, r4
 800cf14:	f7fd fd34 	bl	800a980 <memset>
 800cf18:	e7f4      	b.n	800cf04 <_calloc_r+0x16>

0800cf1a <__sfputc_r>:
 800cf1a:	6893      	ldr	r3, [r2, #8]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	b410      	push	{r4}
 800cf22:	6093      	str	r3, [r2, #8]
 800cf24:	da08      	bge.n	800cf38 <__sfputc_r+0x1e>
 800cf26:	6994      	ldr	r4, [r2, #24]
 800cf28:	42a3      	cmp	r3, r4
 800cf2a:	db01      	blt.n	800cf30 <__sfputc_r+0x16>
 800cf2c:	290a      	cmp	r1, #10
 800cf2e:	d103      	bne.n	800cf38 <__sfputc_r+0x1e>
 800cf30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf34:	f000 b93c 	b.w	800d1b0 <__swbuf_r>
 800cf38:	6813      	ldr	r3, [r2, #0]
 800cf3a:	1c58      	adds	r0, r3, #1
 800cf3c:	6010      	str	r0, [r2, #0]
 800cf3e:	7019      	strb	r1, [r3, #0]
 800cf40:	4608      	mov	r0, r1
 800cf42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <__sfputs_r>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	460f      	mov	r7, r1
 800cf4e:	4614      	mov	r4, r2
 800cf50:	18d5      	adds	r5, r2, r3
 800cf52:	42ac      	cmp	r4, r5
 800cf54:	d101      	bne.n	800cf5a <__sfputs_r+0x12>
 800cf56:	2000      	movs	r0, #0
 800cf58:	e007      	b.n	800cf6a <__sfputs_r+0x22>
 800cf5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5e:	463a      	mov	r2, r7
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff ffda 	bl	800cf1a <__sfputc_r>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	d1f3      	bne.n	800cf52 <__sfputs_r+0xa>
 800cf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf6c <_vfiprintf_r>:
 800cf6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf70:	460d      	mov	r5, r1
 800cf72:	b09d      	sub	sp, #116	; 0x74
 800cf74:	4614      	mov	r4, r2
 800cf76:	4698      	mov	r8, r3
 800cf78:	4606      	mov	r6, r0
 800cf7a:	b118      	cbz	r0, 800cf84 <_vfiprintf_r+0x18>
 800cf7c:	6a03      	ldr	r3, [r0, #32]
 800cf7e:	b90b      	cbnz	r3, 800cf84 <_vfiprintf_r+0x18>
 800cf80:	f7fc fdac 	bl	8009adc <__sinit>
 800cf84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf86:	07d9      	lsls	r1, r3, #31
 800cf88:	d405      	bmi.n	800cf96 <_vfiprintf_r+0x2a>
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	059a      	lsls	r2, r3, #22
 800cf8e:	d402      	bmi.n	800cf96 <_vfiprintf_r+0x2a>
 800cf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf92:	f7fd fd92 	bl	800aaba <__retarget_lock_acquire_recursive>
 800cf96:	89ab      	ldrh	r3, [r5, #12]
 800cf98:	071b      	lsls	r3, r3, #28
 800cf9a:	d501      	bpl.n	800cfa0 <_vfiprintf_r+0x34>
 800cf9c:	692b      	ldr	r3, [r5, #16]
 800cf9e:	b99b      	cbnz	r3, 800cfc8 <_vfiprintf_r+0x5c>
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	f000 f942 	bl	800d22c <__swsetup_r>
 800cfa8:	b170      	cbz	r0, 800cfc8 <_vfiprintf_r+0x5c>
 800cfaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfac:	07dc      	lsls	r4, r3, #31
 800cfae:	d504      	bpl.n	800cfba <_vfiprintf_r+0x4e>
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfb4:	b01d      	add	sp, #116	; 0x74
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	89ab      	ldrh	r3, [r5, #12]
 800cfbc:	0598      	lsls	r0, r3, #22
 800cfbe:	d4f7      	bmi.n	800cfb0 <_vfiprintf_r+0x44>
 800cfc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfc2:	f7fd fd7b 	bl	800aabc <__retarget_lock_release_recursive>
 800cfc6:	e7f3      	b.n	800cfb0 <_vfiprintf_r+0x44>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	9309      	str	r3, [sp, #36]	; 0x24
 800cfcc:	2320      	movs	r3, #32
 800cfce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfd6:	2330      	movs	r3, #48	; 0x30
 800cfd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d18c <_vfiprintf_r+0x220>
 800cfdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfe0:	f04f 0901 	mov.w	r9, #1
 800cfe4:	4623      	mov	r3, r4
 800cfe6:	469a      	mov	sl, r3
 800cfe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfec:	b10a      	cbz	r2, 800cff2 <_vfiprintf_r+0x86>
 800cfee:	2a25      	cmp	r2, #37	; 0x25
 800cff0:	d1f9      	bne.n	800cfe6 <_vfiprintf_r+0x7a>
 800cff2:	ebba 0b04 	subs.w	fp, sl, r4
 800cff6:	d00b      	beq.n	800d010 <_vfiprintf_r+0xa4>
 800cff8:	465b      	mov	r3, fp
 800cffa:	4622      	mov	r2, r4
 800cffc:	4629      	mov	r1, r5
 800cffe:	4630      	mov	r0, r6
 800d000:	f7ff ffa2 	bl	800cf48 <__sfputs_r>
 800d004:	3001      	adds	r0, #1
 800d006:	f000 80a9 	beq.w	800d15c <_vfiprintf_r+0x1f0>
 800d00a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d00c:	445a      	add	r2, fp
 800d00e:	9209      	str	r2, [sp, #36]	; 0x24
 800d010:	f89a 3000 	ldrb.w	r3, [sl]
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 80a1 	beq.w	800d15c <_vfiprintf_r+0x1f0>
 800d01a:	2300      	movs	r3, #0
 800d01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d024:	f10a 0a01 	add.w	sl, sl, #1
 800d028:	9304      	str	r3, [sp, #16]
 800d02a:	9307      	str	r3, [sp, #28]
 800d02c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d030:	931a      	str	r3, [sp, #104]	; 0x68
 800d032:	4654      	mov	r4, sl
 800d034:	2205      	movs	r2, #5
 800d036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03a:	4854      	ldr	r0, [pc, #336]	; (800d18c <_vfiprintf_r+0x220>)
 800d03c:	f7f3 f8c8 	bl	80001d0 <memchr>
 800d040:	9a04      	ldr	r2, [sp, #16]
 800d042:	b9d8      	cbnz	r0, 800d07c <_vfiprintf_r+0x110>
 800d044:	06d1      	lsls	r1, r2, #27
 800d046:	bf44      	itt	mi
 800d048:	2320      	movmi	r3, #32
 800d04a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d04e:	0713      	lsls	r3, r2, #28
 800d050:	bf44      	itt	mi
 800d052:	232b      	movmi	r3, #43	; 0x2b
 800d054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d058:	f89a 3000 	ldrb.w	r3, [sl]
 800d05c:	2b2a      	cmp	r3, #42	; 0x2a
 800d05e:	d015      	beq.n	800d08c <_vfiprintf_r+0x120>
 800d060:	9a07      	ldr	r2, [sp, #28]
 800d062:	4654      	mov	r4, sl
 800d064:	2000      	movs	r0, #0
 800d066:	f04f 0c0a 	mov.w	ip, #10
 800d06a:	4621      	mov	r1, r4
 800d06c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d070:	3b30      	subs	r3, #48	; 0x30
 800d072:	2b09      	cmp	r3, #9
 800d074:	d94d      	bls.n	800d112 <_vfiprintf_r+0x1a6>
 800d076:	b1b0      	cbz	r0, 800d0a6 <_vfiprintf_r+0x13a>
 800d078:	9207      	str	r2, [sp, #28]
 800d07a:	e014      	b.n	800d0a6 <_vfiprintf_r+0x13a>
 800d07c:	eba0 0308 	sub.w	r3, r0, r8
 800d080:	fa09 f303 	lsl.w	r3, r9, r3
 800d084:	4313      	orrs	r3, r2
 800d086:	9304      	str	r3, [sp, #16]
 800d088:	46a2      	mov	sl, r4
 800d08a:	e7d2      	b.n	800d032 <_vfiprintf_r+0xc6>
 800d08c:	9b03      	ldr	r3, [sp, #12]
 800d08e:	1d19      	adds	r1, r3, #4
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	9103      	str	r1, [sp, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	bfbb      	ittet	lt
 800d098:	425b      	neglt	r3, r3
 800d09a:	f042 0202 	orrlt.w	r2, r2, #2
 800d09e:	9307      	strge	r3, [sp, #28]
 800d0a0:	9307      	strlt	r3, [sp, #28]
 800d0a2:	bfb8      	it	lt
 800d0a4:	9204      	strlt	r2, [sp, #16]
 800d0a6:	7823      	ldrb	r3, [r4, #0]
 800d0a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d0aa:	d10c      	bne.n	800d0c6 <_vfiprintf_r+0x15a>
 800d0ac:	7863      	ldrb	r3, [r4, #1]
 800d0ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b0:	d134      	bne.n	800d11c <_vfiprintf_r+0x1b0>
 800d0b2:	9b03      	ldr	r3, [sp, #12]
 800d0b4:	1d1a      	adds	r2, r3, #4
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	9203      	str	r2, [sp, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bfb8      	it	lt
 800d0be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0c2:	3402      	adds	r4, #2
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d19c <_vfiprintf_r+0x230>
 800d0ca:	7821      	ldrb	r1, [r4, #0]
 800d0cc:	2203      	movs	r2, #3
 800d0ce:	4650      	mov	r0, sl
 800d0d0:	f7f3 f87e 	bl	80001d0 <memchr>
 800d0d4:	b138      	cbz	r0, 800d0e6 <_vfiprintf_r+0x17a>
 800d0d6:	9b04      	ldr	r3, [sp, #16]
 800d0d8:	eba0 000a 	sub.w	r0, r0, sl
 800d0dc:	2240      	movs	r2, #64	; 0x40
 800d0de:	4082      	lsls	r2, r0
 800d0e0:	4313      	orrs	r3, r2
 800d0e2:	3401      	adds	r4, #1
 800d0e4:	9304      	str	r3, [sp, #16]
 800d0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ea:	4829      	ldr	r0, [pc, #164]	; (800d190 <_vfiprintf_r+0x224>)
 800d0ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0f0:	2206      	movs	r2, #6
 800d0f2:	f7f3 f86d 	bl	80001d0 <memchr>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d03f      	beq.n	800d17a <_vfiprintf_r+0x20e>
 800d0fa:	4b26      	ldr	r3, [pc, #152]	; (800d194 <_vfiprintf_r+0x228>)
 800d0fc:	bb1b      	cbnz	r3, 800d146 <_vfiprintf_r+0x1da>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	3307      	adds	r3, #7
 800d102:	f023 0307 	bic.w	r3, r3, #7
 800d106:	3308      	adds	r3, #8
 800d108:	9303      	str	r3, [sp, #12]
 800d10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d10c:	443b      	add	r3, r7
 800d10e:	9309      	str	r3, [sp, #36]	; 0x24
 800d110:	e768      	b.n	800cfe4 <_vfiprintf_r+0x78>
 800d112:	fb0c 3202 	mla	r2, ip, r2, r3
 800d116:	460c      	mov	r4, r1
 800d118:	2001      	movs	r0, #1
 800d11a:	e7a6      	b.n	800d06a <_vfiprintf_r+0xfe>
 800d11c:	2300      	movs	r3, #0
 800d11e:	3401      	adds	r4, #1
 800d120:	9305      	str	r3, [sp, #20]
 800d122:	4619      	mov	r1, r3
 800d124:	f04f 0c0a 	mov.w	ip, #10
 800d128:	4620      	mov	r0, r4
 800d12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d12e:	3a30      	subs	r2, #48	; 0x30
 800d130:	2a09      	cmp	r2, #9
 800d132:	d903      	bls.n	800d13c <_vfiprintf_r+0x1d0>
 800d134:	2b00      	cmp	r3, #0
 800d136:	d0c6      	beq.n	800d0c6 <_vfiprintf_r+0x15a>
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	e7c4      	b.n	800d0c6 <_vfiprintf_r+0x15a>
 800d13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d140:	4604      	mov	r4, r0
 800d142:	2301      	movs	r3, #1
 800d144:	e7f0      	b.n	800d128 <_vfiprintf_r+0x1bc>
 800d146:	ab03      	add	r3, sp, #12
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	462a      	mov	r2, r5
 800d14c:	4b12      	ldr	r3, [pc, #72]	; (800d198 <_vfiprintf_r+0x22c>)
 800d14e:	a904      	add	r1, sp, #16
 800d150:	4630      	mov	r0, r6
 800d152:	f7fb fd8d 	bl	8008c70 <_printf_float>
 800d156:	4607      	mov	r7, r0
 800d158:	1c78      	adds	r0, r7, #1
 800d15a:	d1d6      	bne.n	800d10a <_vfiprintf_r+0x19e>
 800d15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15e:	07d9      	lsls	r1, r3, #31
 800d160:	d405      	bmi.n	800d16e <_vfiprintf_r+0x202>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	059a      	lsls	r2, r3, #22
 800d166:	d402      	bmi.n	800d16e <_vfiprintf_r+0x202>
 800d168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d16a:	f7fd fca7 	bl	800aabc <__retarget_lock_release_recursive>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	065b      	lsls	r3, r3, #25
 800d172:	f53f af1d 	bmi.w	800cfb0 <_vfiprintf_r+0x44>
 800d176:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d178:	e71c      	b.n	800cfb4 <_vfiprintf_r+0x48>
 800d17a:	ab03      	add	r3, sp, #12
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	462a      	mov	r2, r5
 800d180:	4b05      	ldr	r3, [pc, #20]	; (800d198 <_vfiprintf_r+0x22c>)
 800d182:	a904      	add	r1, sp, #16
 800d184:	4630      	mov	r0, r6
 800d186:	f7fc f8bf 	bl	8009308 <_printf_i>
 800d18a:	e7e4      	b.n	800d156 <_vfiprintf_r+0x1ea>
 800d18c:	0800da1c 	.word	0x0800da1c
 800d190:	0800da26 	.word	0x0800da26
 800d194:	08008c71 	.word	0x08008c71
 800d198:	0800cf49 	.word	0x0800cf49
 800d19c:	0800da22 	.word	0x0800da22

0800d1a0 <_malloc_usable_size_r>:
 800d1a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a4:	1f18      	subs	r0, r3, #4
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	bfbc      	itt	lt
 800d1aa:	580b      	ldrlt	r3, [r1, r0]
 800d1ac:	18c0      	addlt	r0, r0, r3
 800d1ae:	4770      	bx	lr

0800d1b0 <__swbuf_r>:
 800d1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b2:	460e      	mov	r6, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	4605      	mov	r5, r0
 800d1b8:	b118      	cbz	r0, 800d1c2 <__swbuf_r+0x12>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <__swbuf_r+0x12>
 800d1be:	f7fc fc8d 	bl	8009adc <__sinit>
 800d1c2:	69a3      	ldr	r3, [r4, #24]
 800d1c4:	60a3      	str	r3, [r4, #8]
 800d1c6:	89a3      	ldrh	r3, [r4, #12]
 800d1c8:	071a      	lsls	r2, r3, #28
 800d1ca:	d525      	bpl.n	800d218 <__swbuf_r+0x68>
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	b31b      	cbz	r3, 800d218 <__swbuf_r+0x68>
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	6922      	ldr	r2, [r4, #16]
 800d1d4:	1a98      	subs	r0, r3, r2
 800d1d6:	6963      	ldr	r3, [r4, #20]
 800d1d8:	b2f6      	uxtb	r6, r6
 800d1da:	4283      	cmp	r3, r0
 800d1dc:	4637      	mov	r7, r6
 800d1de:	dc04      	bgt.n	800d1ea <__swbuf_r+0x3a>
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	f7ff f8b6 	bl	800c354 <_fflush_r>
 800d1e8:	b9e0      	cbnz	r0, 800d224 <__swbuf_r+0x74>
 800d1ea:	68a3      	ldr	r3, [r4, #8]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	60a3      	str	r3, [r4, #8]
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	6022      	str	r2, [r4, #0]
 800d1f6:	701e      	strb	r6, [r3, #0]
 800d1f8:	6962      	ldr	r2, [r4, #20]
 800d1fa:	1c43      	adds	r3, r0, #1
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d004      	beq.n	800d20a <__swbuf_r+0x5a>
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	07db      	lsls	r3, r3, #31
 800d204:	d506      	bpl.n	800d214 <__swbuf_r+0x64>
 800d206:	2e0a      	cmp	r6, #10
 800d208:	d104      	bne.n	800d214 <__swbuf_r+0x64>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4628      	mov	r0, r5
 800d20e:	f7ff f8a1 	bl	800c354 <_fflush_r>
 800d212:	b938      	cbnz	r0, 800d224 <__swbuf_r+0x74>
 800d214:	4638      	mov	r0, r7
 800d216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d218:	4621      	mov	r1, r4
 800d21a:	4628      	mov	r0, r5
 800d21c:	f000 f806 	bl	800d22c <__swsetup_r>
 800d220:	2800      	cmp	r0, #0
 800d222:	d0d5      	beq.n	800d1d0 <__swbuf_r+0x20>
 800d224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d228:	e7f4      	b.n	800d214 <__swbuf_r+0x64>
	...

0800d22c <__swsetup_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4b2a      	ldr	r3, [pc, #168]	; (800d2d8 <__swsetup_r+0xac>)
 800d230:	4605      	mov	r5, r0
 800d232:	6818      	ldr	r0, [r3, #0]
 800d234:	460c      	mov	r4, r1
 800d236:	b118      	cbz	r0, 800d240 <__swsetup_r+0x14>
 800d238:	6a03      	ldr	r3, [r0, #32]
 800d23a:	b90b      	cbnz	r3, 800d240 <__swsetup_r+0x14>
 800d23c:	f7fc fc4e 	bl	8009adc <__sinit>
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d246:	0718      	lsls	r0, r3, #28
 800d248:	d422      	bmi.n	800d290 <__swsetup_r+0x64>
 800d24a:	06d9      	lsls	r1, r3, #27
 800d24c:	d407      	bmi.n	800d25e <__swsetup_r+0x32>
 800d24e:	2309      	movs	r3, #9
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d25c:	e034      	b.n	800d2c8 <__swsetup_r+0x9c>
 800d25e:	0758      	lsls	r0, r3, #29
 800d260:	d512      	bpl.n	800d288 <__swsetup_r+0x5c>
 800d262:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d264:	b141      	cbz	r1, 800d278 <__swsetup_r+0x4c>
 800d266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d26a:	4299      	cmp	r1, r3
 800d26c:	d002      	beq.n	800d274 <__swsetup_r+0x48>
 800d26e:	4628      	mov	r0, r5
 800d270:	f7fe fadc 	bl	800b82c <_free_r>
 800d274:	2300      	movs	r3, #0
 800d276:	6363      	str	r3, [r4, #52]	; 0x34
 800d278:	89a3      	ldrh	r3, [r4, #12]
 800d27a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	2300      	movs	r3, #0
 800d282:	6063      	str	r3, [r4, #4]
 800d284:	6923      	ldr	r3, [r4, #16]
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	f043 0308 	orr.w	r3, r3, #8
 800d28e:	81a3      	strh	r3, [r4, #12]
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	b94b      	cbnz	r3, 800d2a8 <__swsetup_r+0x7c>
 800d294:	89a3      	ldrh	r3, [r4, #12]
 800d296:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d29a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d29e:	d003      	beq.n	800d2a8 <__swsetup_r+0x7c>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 f840 	bl	800d328 <__smakebuf_r>
 800d2a8:	89a0      	ldrh	r0, [r4, #12]
 800d2aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2ae:	f010 0301 	ands.w	r3, r0, #1
 800d2b2:	d00a      	beq.n	800d2ca <__swsetup_r+0x9e>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	60a3      	str	r3, [r4, #8]
 800d2b8:	6963      	ldr	r3, [r4, #20]
 800d2ba:	425b      	negs	r3, r3
 800d2bc:	61a3      	str	r3, [r4, #24]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	b943      	cbnz	r3, 800d2d4 <__swsetup_r+0xa8>
 800d2c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2c6:	d1c4      	bne.n	800d252 <__swsetup_r+0x26>
 800d2c8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ca:	0781      	lsls	r1, r0, #30
 800d2cc:	bf58      	it	pl
 800d2ce:	6963      	ldrpl	r3, [r4, #20]
 800d2d0:	60a3      	str	r3, [r4, #8]
 800d2d2:	e7f4      	b.n	800d2be <__swsetup_r+0x92>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	e7f7      	b.n	800d2c8 <__swsetup_r+0x9c>
 800d2d8:	200001d4 	.word	0x200001d4

0800d2dc <__swhatbuf_r>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	460c      	mov	r4, r1
 800d2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	b096      	sub	sp, #88	; 0x58
 800d2e8:	4615      	mov	r5, r2
 800d2ea:	461e      	mov	r6, r3
 800d2ec:	da0d      	bge.n	800d30a <__swhatbuf_r+0x2e>
 800d2ee:	89a3      	ldrh	r3, [r4, #12]
 800d2f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2f4:	f04f 0100 	mov.w	r1, #0
 800d2f8:	bf0c      	ite	eq
 800d2fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2fe:	2340      	movne	r3, #64	; 0x40
 800d300:	2000      	movs	r0, #0
 800d302:	6031      	str	r1, [r6, #0]
 800d304:	602b      	str	r3, [r5, #0]
 800d306:	b016      	add	sp, #88	; 0x58
 800d308:	bd70      	pop	{r4, r5, r6, pc}
 800d30a:	466a      	mov	r2, sp
 800d30c:	f000 f848 	bl	800d3a0 <_fstat_r>
 800d310:	2800      	cmp	r0, #0
 800d312:	dbec      	blt.n	800d2ee <__swhatbuf_r+0x12>
 800d314:	9901      	ldr	r1, [sp, #4]
 800d316:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d31a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d31e:	4259      	negs	r1, r3
 800d320:	4159      	adcs	r1, r3
 800d322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d326:	e7eb      	b.n	800d300 <__swhatbuf_r+0x24>

0800d328 <__smakebuf_r>:
 800d328:	898b      	ldrh	r3, [r1, #12]
 800d32a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d32c:	079d      	lsls	r5, r3, #30
 800d32e:	4606      	mov	r6, r0
 800d330:	460c      	mov	r4, r1
 800d332:	d507      	bpl.n	800d344 <__smakebuf_r+0x1c>
 800d334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	6123      	str	r3, [r4, #16]
 800d33c:	2301      	movs	r3, #1
 800d33e:	6163      	str	r3, [r4, #20]
 800d340:	b002      	add	sp, #8
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	ab01      	add	r3, sp, #4
 800d346:	466a      	mov	r2, sp
 800d348:	f7ff ffc8 	bl	800d2dc <__swhatbuf_r>
 800d34c:	9900      	ldr	r1, [sp, #0]
 800d34e:	4605      	mov	r5, r0
 800d350:	4630      	mov	r0, r6
 800d352:	f7fb feeb 	bl	800912c <_malloc_r>
 800d356:	b948      	cbnz	r0, 800d36c <__smakebuf_r+0x44>
 800d358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d35c:	059a      	lsls	r2, r3, #22
 800d35e:	d4ef      	bmi.n	800d340 <__smakebuf_r+0x18>
 800d360:	f023 0303 	bic.w	r3, r3, #3
 800d364:	f043 0302 	orr.w	r3, r3, #2
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	e7e3      	b.n	800d334 <__smakebuf_r+0xc>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	6020      	str	r0, [r4, #0]
 800d370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	9b00      	ldr	r3, [sp, #0]
 800d378:	6163      	str	r3, [r4, #20]
 800d37a:	9b01      	ldr	r3, [sp, #4]
 800d37c:	6120      	str	r0, [r4, #16]
 800d37e:	b15b      	cbz	r3, 800d398 <__smakebuf_r+0x70>
 800d380:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d384:	4630      	mov	r0, r6
 800d386:	f000 f81d 	bl	800d3c4 <_isatty_r>
 800d38a:	b128      	cbz	r0, 800d398 <__smakebuf_r+0x70>
 800d38c:	89a3      	ldrh	r3, [r4, #12]
 800d38e:	f023 0303 	bic.w	r3, r3, #3
 800d392:	f043 0301 	orr.w	r3, r3, #1
 800d396:	81a3      	strh	r3, [r4, #12]
 800d398:	89a3      	ldrh	r3, [r4, #12]
 800d39a:	431d      	orrs	r5, r3
 800d39c:	81a5      	strh	r5, [r4, #12]
 800d39e:	e7cf      	b.n	800d340 <__smakebuf_r+0x18>

0800d3a0 <_fstat_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	; (800d3c0 <_fstat_r+0x20>)
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	602b      	str	r3, [r5, #0]
 800d3ae:	f7f4 fd08 	bl	8001dc2 <_fstat>
 800d3b2:	1c43      	adds	r3, r0, #1
 800d3b4:	d102      	bne.n	800d3bc <_fstat_r+0x1c>
 800d3b6:	682b      	ldr	r3, [r5, #0]
 800d3b8:	b103      	cbz	r3, 800d3bc <_fstat_r+0x1c>
 800d3ba:	6023      	str	r3, [r4, #0]
 800d3bc:	bd38      	pop	{r3, r4, r5, pc}
 800d3be:	bf00      	nop
 800d3c0:	20003c38 	.word	0x20003c38

0800d3c4 <_isatty_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	4d06      	ldr	r5, [pc, #24]	; (800d3e0 <_isatty_r+0x1c>)
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	602b      	str	r3, [r5, #0]
 800d3d0:	f7f4 fd07 	bl	8001de2 <_isatty>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_isatty_r+0x1a>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_isatty_r+0x1a>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20003c38 	.word	0x20003c38

0800d3e4 <_raise_r>:
 800d3e4:	291f      	cmp	r1, #31
 800d3e6:	b538      	push	{r3, r4, r5, lr}
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	d904      	bls.n	800d3f8 <_raise_r+0x14>
 800d3ee:	2316      	movs	r3, #22
 800d3f0:	6003      	str	r3, [r0, #0]
 800d3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3fa:	b112      	cbz	r2, 800d402 <_raise_r+0x1e>
 800d3fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d400:	b94b      	cbnz	r3, 800d416 <_raise_r+0x32>
 800d402:	4620      	mov	r0, r4
 800d404:	f000 f830 	bl	800d468 <_getpid_r>
 800d408:	462a      	mov	r2, r5
 800d40a:	4601      	mov	r1, r0
 800d40c:	4620      	mov	r0, r4
 800d40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d412:	f000 b817 	b.w	800d444 <_kill_r>
 800d416:	2b01      	cmp	r3, #1
 800d418:	d00a      	beq.n	800d430 <_raise_r+0x4c>
 800d41a:	1c59      	adds	r1, r3, #1
 800d41c:	d103      	bne.n	800d426 <_raise_r+0x42>
 800d41e:	2316      	movs	r3, #22
 800d420:	6003      	str	r3, [r0, #0]
 800d422:	2001      	movs	r0, #1
 800d424:	e7e7      	b.n	800d3f6 <_raise_r+0x12>
 800d426:	2400      	movs	r4, #0
 800d428:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d42c:	4628      	mov	r0, r5
 800d42e:	4798      	blx	r3
 800d430:	2000      	movs	r0, #0
 800d432:	e7e0      	b.n	800d3f6 <_raise_r+0x12>

0800d434 <raise>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <raise+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f7ff bfd3 	b.w	800d3e4 <_raise_r>
 800d43e:	bf00      	nop
 800d440:	200001d4 	.word	0x200001d4

0800d444 <_kill_r>:
 800d444:	b538      	push	{r3, r4, r5, lr}
 800d446:	4d07      	ldr	r5, [pc, #28]	; (800d464 <_kill_r+0x20>)
 800d448:	2300      	movs	r3, #0
 800d44a:	4604      	mov	r4, r0
 800d44c:	4608      	mov	r0, r1
 800d44e:	4611      	mov	r1, r2
 800d450:	602b      	str	r3, [r5, #0]
 800d452:	f7f4 fc57 	bl	8001d04 <_kill>
 800d456:	1c43      	adds	r3, r0, #1
 800d458:	d102      	bne.n	800d460 <_kill_r+0x1c>
 800d45a:	682b      	ldr	r3, [r5, #0]
 800d45c:	b103      	cbz	r3, 800d460 <_kill_r+0x1c>
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	bd38      	pop	{r3, r4, r5, pc}
 800d462:	bf00      	nop
 800d464:	20003c38 	.word	0x20003c38

0800d468 <_getpid_r>:
 800d468:	f7f4 bc44 	b.w	8001cf4 <_getpid>

0800d46c <_init>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	bf00      	nop
 800d470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d472:	bc08      	pop	{r3}
 800d474:	469e      	mov	lr, r3
 800d476:	4770      	bx	lr

0800d478 <_fini>:
 800d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47a:	bf00      	nop
 800d47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	469e      	mov	lr, r3
 800d482:	4770      	bx	lr
