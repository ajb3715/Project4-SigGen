
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  0800f430  0800f430  0001f430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd28  0800fd28  000205dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd28  0800fd28  0001fd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd30  0800fd30  000205dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  0800fd38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000245c  200005dc  08010314  000205dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a38  08010314  00022a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002060c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfb3  00000000  00000000  0002064f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000401a  00000000  00000000  0003d602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00041620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140a  00000000  00000000  00043000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029f83  00000000  00000000  0004440a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d01e  00000000  00000000  0006e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001017d0  00000000  00000000  0008b3ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084b4  00000000  00000000  0018cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00195030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005dc 	.word	0x200005dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f418 	.word	0x0800f418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e0 	.word	0x200005e0
 80001cc:	0800f418 	.word	0x0800f418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b9a6 	b.w	8000f4c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9e08      	ldr	r6, [sp, #32]
 8000c8a:	460d      	mov	r5, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	460f      	mov	r7, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4694      	mov	ip, r2
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0xe2>
 8000c9a:	fab2 f382 	clz	r3, r2
 8000c9e:	b143      	cbz	r3, 8000cb2 <__udivmoddi4+0x2e>
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	f1c3 0220 	rsb	r2, r3, #32
 8000ca8:	409f      	lsls	r7, r3
 8000caa:	fa20 f202 	lsr.w	r2, r0, r2
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	409c      	lsls	r4, r3
 8000cb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cb6:	fa1f f58c 	uxth.w	r5, ip
 8000cba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cbe:	0c22      	lsrs	r2, r4, #16
 8000cc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc8:	fb01 f005 	mul.w	r0, r1, r5
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	d90a      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cd8:	f080 811c 	bcs.w	8000f14 <__udivmoddi4+0x290>
 8000cdc:	4290      	cmp	r0, r2
 8000cde:	f240 8119 	bls.w	8000f14 <__udivmoddi4+0x290>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	4462      	add	r2, ip
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	b2a4      	uxth	r4, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf6:	fb00 f505 	mul.w	r5, r0, r5
 8000cfa:	42a5      	cmp	r5, r4
 8000cfc:	d90a      	bls.n	8000d14 <__udivmoddi4+0x90>
 8000cfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000d02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x294>
 8000d0a:	42a5      	cmp	r5, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x294>
 8000d10:	4464      	add	r4, ip
 8000d12:	3802      	subs	r0, #2
 8000d14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11e      	cbz	r6, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40dc      	lsrs	r4, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	e9c6 4300 	strd	r4, r3, [r6]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0xbc>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f000 80ed 	beq.w	8000f0e <__udivmoddi4+0x28a>
 8000d34:	2100      	movs	r1, #0
 8000d36:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	fab3 f183 	clz	r1, r3
 8000d44:	2900      	cmp	r1, #0
 8000d46:	d149      	bne.n	8000ddc <__udivmoddi4+0x158>
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	d302      	bcc.n	8000d52 <__udivmoddi4+0xce>
 8000d4c:	4282      	cmp	r2, r0
 8000d4e:	f200 80f8 	bhi.w	8000f42 <__udivmoddi4+0x2be>
 8000d52:	1a84      	subs	r4, r0, r2
 8000d54:	eb65 0203 	sbc.w	r2, r5, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4617      	mov	r7, r2
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d0e2      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	e9c6 4700 	strd	r4, r7, [r6]
 8000d64:	e7df      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d66:	b902      	cbnz	r2, 8000d6a <__udivmoddi4+0xe6>
 8000d68:	deff      	udf	#255	; 0xff
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8090 	bne.w	8000e94 <__udivmoddi4+0x210>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d84:	fb07 2015 	mls	r0, r7, r5, r2
 8000d88:	0c22      	lsrs	r2, r4, #16
 8000d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d8e:	fb0e f005 	mul.w	r0, lr, r5
 8000d92:	4290      	cmp	r0, r2
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x124>
 8000d96:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x122>
 8000da0:	4290      	cmp	r0, r2
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2b8>
 8000da6:	4645      	mov	r5, r8
 8000da8:	1a12      	subs	r2, r2, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db0:	fb07 2210 	mls	r2, r7, r0, r2
 8000db4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x14e>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x14c>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2c2>
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dda:	e79f      	b.n	8000d1c <__udivmoddi4+0x98>
 8000ddc:	f1c1 0720 	rsb	r7, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa05 f401 	lsl.w	r4, r5, r1
 8000dee:	fa20 f307 	lsr.w	r3, r0, r7
 8000df2:	40fd      	lsrs	r5, r7
 8000df4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df8:	4323      	orrs	r3, r4
 8000dfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	fb09 5518 	mls	r5, r9, r8, r5
 8000e06:	0c1c      	lsrs	r4, r3, #16
 8000e08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b0>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2b4>
 8000e28:	42a5      	cmp	r5, r4
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2b4>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4464      	add	r4, ip
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	b29d      	uxth	r5, r3
 8000e38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1da>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2ac>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2ac>
 8000e5a:	3b02      	subs	r3, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fba3 9502 	umull	r9, r5, r3, r2
 8000e66:	eba4 040e 	sub.w	r4, r4, lr
 8000e6a:	42ac      	cmp	r4, r5
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46ae      	mov	lr, r5
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x29c>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x298>
 8000e74:	b156      	cbz	r6, 8000e8c <__udivmoddi4+0x208>
 8000e76:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000e7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e82:	40ca      	lsrs	r2, r1
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	4317      	orrs	r7, r2
 8000e88:	e9c6 7400 	strd	r7, r4, [r6]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e94:	f1c3 0120 	rsb	r1, r3, #32
 8000e98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea4:	409d      	lsls	r5, r3
 8000ea6:	432a      	orrs	r2, r5
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000eb8:	0c11      	lsrs	r1, r2, #16
 8000eba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ebe:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec2:	428d      	cmp	r5, r1
 8000ec4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x258>
 8000eca:	eb1c 0101 	adds.w	r1, ip, r1
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed4:	428d      	cmp	r5, r1
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b0>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1b49      	subs	r1, r1, r5
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef0:	4291      	cmp	r1, r2
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x282>
 8000ef4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ef8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2a8>
 8000efe:	4291      	cmp	r1, r2
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2a8>
 8000f02:	3d02      	subs	r5, #2
 8000f04:	4462      	add	r2, ip
 8000f06:	1a52      	subs	r2, r2, r1
 8000f08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0xfc>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000f14:	4639      	mov	r1, r7
 8000f16:	e6e6      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000f18:	4610      	mov	r0, r2
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x90>
 8000f1c:	4548      	cmp	r0, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f0>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f0>
 8000f2c:	4645      	mov	r5, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f30:	462b      	mov	r3, r5
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1da>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x258>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b0>
 8000f3c:	3d02      	subs	r5, #2
 8000f3e:	4462      	add	r2, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x124>
 8000f42:	4608      	mov	r0, r1
 8000f44:	e70a      	b.n	8000d5c <__udivmoddi4+0xd8>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x14e>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <get_noise>:
    1701, 1690, 1690, 1701, 1690, 1690, 1701, 1701, 1701, 1701, 1722, 1722, 1712, 1722, 1722, 1733,
    1733, 1733, 1733, 1712, 1712, 1712, 1733, 1733, 1733, 1733, 1733, 1733, 1744, 1744, 1744, 1744,
    1744, 1744, 1733, 1733, 1722, 1722, 1722, 1722, 1722, 1722, 1733, 1722, 1722, 1722, 1722, 1722,
    1701, 1669, 1669, 1680, 1690, 1690, 1690, 1701, 1701, 1712, 1712, 1712, 1690, 1669, 1669, 1680
};
uint16_t get_noise(int noise){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	switch(noise){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b0c      	cmp	r3, #12
 8000f5c:	d83a      	bhi.n	8000fd4 <get_noise+0x84>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <get_noise+0x14>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f99 	.word	0x08000f99
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fa1 	.word	0x08000fa1
 8000f70:	08000fa5 	.word	0x08000fa5
 8000f74:	08000fa9 	.word	0x08000fa9
 8000f78:	08000fad 	.word	0x08000fad
 8000f7c:	08000fb1 	.word	0x08000fb1
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fb9 	.word	0x08000fb9
 8000f88:	08000fbd 	.word	0x08000fbd
 8000f8c:	08000fc3 	.word	0x08000fc3
 8000f90:	08000fc9 	.word	0x08000fc9
 8000f94:	08000fcf 	.word	0x08000fcf
		case(0):
			return (uint16_t)0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e01c      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(1):
			return (uint16_t)0x01;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e01a      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(2):
			return (uint16_t)0x03;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e018      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(3):
			return (uint16_t)0x07;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	e016      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(4):
			return (uint16_t)0x0F;
 8000fa8:	230f      	movs	r3, #15
 8000faa:	e014      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(5):
			return (uint16_t)0x1F;
 8000fac:	231f      	movs	r3, #31
 8000fae:	e012      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(6):
			return (uint16_t)0x3F;
 8000fb0:	233f      	movs	r3, #63	; 0x3f
 8000fb2:	e010      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(7):
			return (uint16_t)0x7F;
 8000fb4:	237f      	movs	r3, #127	; 0x7f
 8000fb6:	e00e      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(8):
			return (uint16_t)0xFF;
 8000fb8:	23ff      	movs	r3, #255	; 0xff
 8000fba:	e00c      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(9):
			return (uint16_t)0x1FF;
 8000fbc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000fc0:	e009      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(10):
			return (uint16_t)0x3FF;
 8000fc2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000fc6:	e006      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(11):
			return (uint16_t)0x7FF;
 8000fc8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fcc:	e003      	b.n	8000fd6 <get_noise+0x86>
			break;
		case(12):
			return (uint16_t)0xFFF;
 8000fce:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000fd2:	e000      	b.n	8000fd6 <get_noise+0x86>
			break;
		default:
			return (uint16_t) 0;
 8000fd4:	2300      	movs	r3, #0

	}

}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <init_DC>:
void init_DC(float maxv, float minv, int noise, RNG_HandleTypeDef *hrng,int channel){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ff2:	edc7 0a04 	vstr	s1, [r7, #16]
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f7ff ffa7 	bl	8000f50 <get_noise>
 8001002:	4603      	mov	r3, r0
 8001004:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d13c      	bne.n	8001086 <init_DC+0x9e>
	for(int i = 0; i < NUM_SAMPLES; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001010:	e033      	b.n	800107a <init_DC+0x92>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	68b8      	ldr	r0, [r7, #8]
 800101a:	f004 f8f4 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	b29a      	uxth	r2, r3
 8001022:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001024:	4013      	ands	r3, r2
 8001026:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (minv*4096/3.3);
 8001028:	edd7 7a04 	vldr	s15, [r7, #16]
 800102c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001110 <init_DC+0x128>
 8001030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001034:	ee17 0a90 	vmov	r0, s15
 8001038:	f7ff fa86 	bl	8000548 <__aeabi_f2d>
 800103c:	a332      	add	r3, pc, #200	; (adr r3, 8001108 <init_DC+0x120>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fc03 	bl	800084c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f7ff fdab 	bl	8000ba8 <__aeabi_d2uiz>
 8001052:	4603      	mov	r3, r0
 8001054:	b29b      	uxth	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	4a2e      	ldr	r2, [pc, #184]	; (8001114 <init_DC+0x12c>)
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		waveform[i] |= new_noise;
 8001060:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <init_DC+0x12c>)
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800106a:	431a      	orrs	r2, r3
 800106c:	4929      	ldr	r1, [pc, #164]	; (8001114 <init_DC+0x12c>)
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	3301      	adds	r3, #1
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <init_DC+0x130>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001080:	429a      	cmp	r2, r3
 8001082:	dbc6      	blt.n	8001012 <init_DC+0x2a>
			waveform2[i] = (uint16_t) (minv*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}

}
 8001084:	e03b      	b.n	80010fe <init_DC+0x116>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
 800108a:	e033      	b.n	80010f4 <init_DC+0x10c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	68b8      	ldr	r0, [r7, #8]
 8001094:	f004 f8b7 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	b29a      	uxth	r2, r3
 800109c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800109e:	4013      	ands	r3, r2
 80010a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (minv*4096/3.3);
 80010a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001110 <init_DC+0x128>
 80010aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ae:	ee17 0a90 	vmov	r0, s15
 80010b2:	f7ff fa49 	bl	8000548 <__aeabi_f2d>
 80010b6:	a314      	add	r3, pc, #80	; (adr r3, 8001108 <init_DC+0x120>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fbc6 	bl	800084c <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd6e 	bl	8000ba8 <__aeabi_d2uiz>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <init_DC+0x134>)
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <init_DC+0x134>)
 80010dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e4:	431a      	orrs	r2, r3
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <init_DC+0x134>)
 80010e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 80010ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f0:	3301      	adds	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <init_DC+0x130>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dbc6      	blt.n	800108c <init_DC+0xa4>
}
 80010fe:	bf00      	nop
 8001100:	3730      	adds	r7, #48	; 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	66666666 	.word	0x66666666
 800110c:	400a6666 	.word	0x400a6666
 8001110:	45800000 	.word	0x45800000
 8001114:	200005f8 	.word	0x200005f8
 8001118:	20000000 	.word	0x20000000
 800111c:	200009f8 	.word	0x200009f8

08001120 <init_generator>:

void init_generator(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	ed87 0a05 	vstr	s0, [r7, #20]
 800112a:	edc7 0a04 	vstr	s1, [r7, #16]
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ff0b 	bl	8000f50 <get_noise>
 800113a:	4603      	mov	r3, r0
 800113c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f040 8091 	bne.w	8001268 <init_generator+0x148>
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800114a:	e086      	b.n	800125a <init_generator+0x13a>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	68b8      	ldr	r0, [r7, #8]
 8001154:	f004 f857 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	b29a      	uxth	r2, r3
 800115c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800115e:	4013      	ands	r3, r2
 8001160:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001164:	f7ff f9de 	bl	8000524 <__aeabi_i2d>
 8001168:	a38b      	add	r3, pc, #556	; (adr r3, 8001398 <init_generator+0x278>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fa43 	bl	80005f8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4614      	mov	r4, r2
 8001178:	461d      	mov	r5, r3
 800117a:	4b89      	ldr	r3, [pc, #548]	; (80013a0 <init_generator+0x280>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff fb5d 	bl	800084c <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	ec43 2b17 	vmov	d7, r2, r3
 800119a:	eeb0 0a47 	vmov.f32	s0, s14
 800119e:	eef0 0a67 	vmov.f32	s1, s15
 80011a2:	f00d f8b1 	bl	800e308 <sin>
 80011a6:	ec55 4b10 	vmov	r4, r5, d0
 80011aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80011ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011be:	ee16 0a90 	vmov	r0, s13
 80011c2:	f7ff f9c1 	bl	8000548 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff fa13 	bl	80005f8 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	ed97 7a05 	vldr	s14, [r7, #20]
 80011de:	edd7 7a04 	vldr	s15, [r7, #16]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80011ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ee:	ee16 0a90 	vmov	r0, s13
 80011f2:	f7ff f9a9 	bl	8000548 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f845 	bl	800028c <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <init_generator+0x284>)
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a35c      	add	r3, pc, #368	; (adr r3, 8001390 <init_generator+0x270>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fb13 	bl	800084c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fcbb 	bl	8000ba8 <__aeabi_d2uiz>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	4a5b      	ldr	r2, [pc, #364]	; (80013a8 <init_generator+0x288>)
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//waveform[i] = round(((sin(i*2*M_PI / 256) + 1)*((4096 / 3.3*(maxv - minv)) / 2)) + 4096 / 3.3 * minv);
		waveform[i] |= new_noise;
 8001240:	4a59      	ldr	r2, [pc, #356]	; (80013a8 <init_generator+0x288>)
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800124a:	431a      	orrs	r2, r3
 800124c:	4956      	ldr	r1, [pc, #344]	; (80013a8 <init_generator+0x288>)
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	3301      	adds	r3, #1
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <init_generator+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001260:	429a      	cmp	r2, r3
 8001262:	f6ff af73 	blt.w	800114c <init_generator+0x2c>
			uint16_t new_noise = (uint16_t)(random & bits);
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}
}
 8001266:	e08f      	b.n	8001388 <init_generator+0x268>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
 800126c:	e086      	b.n	800137c <init_generator+0x25c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f003 ffc6 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	b29a      	uxth	r2, r3
 800127e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001280:	4013      	ands	r3, r2
 8001282:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001286:	f7ff f94d 	bl	8000524 <__aeabi_i2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <init_generator+0x278>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9b2 	bl	80005f8 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4614      	mov	r4, r2
 800129a:	461d      	mov	r5, r3
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <init_generator+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f93e 	bl	8000524 <__aeabi_i2d>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff facc 	bl	800084c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b17 	vmov	d7, r2, r3
 80012bc:	eeb0 0a47 	vmov.f32	s0, s14
 80012c0:	eef0 0a67 	vmov.f32	s1, s15
 80012c4:	f00d f820 	bl	800e308 <sin>
 80012c8:	ec55 4b10 	vmov	r4, r5, d0
 80012cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e0:	ee16 0a90 	vmov	r0, s13
 80012e4:	f7ff f930 	bl	8000548 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	f7ff f982 	bl	80005f8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4614      	mov	r4, r2
 80012fa:	461d      	mov	r5, r3
 80012fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001300:	edd7 7a04 	vldr	s15, [r7, #16]
 8001304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001308:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800130c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001310:	ee16 0a90 	vmov	r0, s13
 8001314:	f7ff f918 	bl	8000548 <__aeabi_f2d>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ffb4 	bl	800028c <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <init_generator+0x284>)
 8001332:	f7ff f961 	bl	80005f8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	a314      	add	r3, pc, #80	; (adr r3, 8001390 <init_generator+0x270>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fa82 	bl	800084c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fc2a 	bl	8000ba8 <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	4a14      	ldr	r2, [pc, #80]	; (80013ac <init_generator+0x28c>)
 800135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <init_generator+0x28c>)
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800136a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800136c:	431a      	orrs	r2, r3
 800136e:	490f      	ldr	r1, [pc, #60]	; (80013ac <init_generator+0x28c>)
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	3301      	adds	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <init_generator+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	429a      	cmp	r2, r3
 8001384:	f6ff af73 	blt.w	800126e <init_generator+0x14e>
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	66666666 	.word	0x66666666
 8001394:	400a6666 	.word	0x400a6666
 8001398:	54442d18 	.word	0x54442d18
 800139c:	401921fb 	.word	0x401921fb
 80013a0:	20000000 	.word	0x20000000
 80013a4:	40b00000 	.word	0x40b00000
 80013a8:	200005f8 	.word	0x200005f8
 80013ac:	200009f8 	.word	0x200009f8

080013b0 <init_triangle>:

void init_triangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80013ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff fdc3 	bl	8000f50 <get_noise>
 80013ca:	4603      	mov	r3, r0
 80013cc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 809a 	bne.w	800150a <init_triangle+0x15a>
    for(int i = 0; i < NUM_SAMPLES; i++){
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013da:	e08f      	b.n	80014fc <init_triangle+0x14c>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	f003 ff0f 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ee:	4013      	ands	r3, r2
 80013f0:	847b      	strh	r3, [r7, #34]	; 0x22
        if(i < NUM_SAMPLES/2){
 80013f2:	4b97      	ldr	r3, [pc, #604]	; (8001650 <init_triangle+0x2a0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	0fda      	lsrs	r2, r3, #31
 80013f8:	4413      	add	r3, r2
 80013fa:	105b      	asrs	r3, r3, #1
 80013fc:	461a      	mov	r2, r3
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	4293      	cmp	r3, r2
 8001402:	da35      	bge.n	8001470 <init_triangle+0xc0>
        	waveform[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001410:	4b8f      	ldr	r3, [pc, #572]	; (8001650 <init_triangle+0x2a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001422:	edd7 6a05 	vldr	s13, [r7, #20]
 8001426:	edd7 7a04 	vldr	s15, [r7, #16]
 800142a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800142e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001432:	edd7 7a04 	vldr	s15, [r7, #16]
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001654 <init_triangle+0x2a4>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	ee17 0a90 	vmov	r0, s15
 8001446:	f7ff f87f 	bl	8000548 <__aeabi_f2d>
 800144a:	a37f      	add	r3, pc, #508	; (adr r3, 8001648 <init_triangle+0x298>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f9fc 	bl	800084c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fba4 	bl	8000ba8 <__aeabi_d2uiz>
 8001460:	4603      	mov	r3, r0
 8001462:	b29b      	uxth	r3, r3
 8001464:	4619      	mov	r1, r3
 8001466:	4a7c      	ldr	r2, [pc, #496]	; (8001658 <init_triangle+0x2a8>)
 8001468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800146e:	e038      	b.n	80014e2 <init_triangle+0x132>
        }else{
        	waveform[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <init_triangle+0x2a0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	1e5a      	subs	r2, r3, #1
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001484:	4b72      	ldr	r3, [pc, #456]	; (8001650 <init_triangle+0x2a0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001496:	edd7 6a05 	vldr	s13, [r7, #20]
 800149a:	edd7 7a04 	vldr	s15, [r7, #16]
 800149e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ae:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001654 <init_triangle+0x2a4>
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	a362      	add	r3, pc, #392	; (adr r3, 8001648 <init_triangle+0x298>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f9c2 	bl	800084c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fb6a 	bl	8000ba8 <__aeabi_d2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <init_triangle+0x2a8>)
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    	waveform[i] |= noise;
 80014e2:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <init_triangle+0x2a8>)
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014ec:	431a      	orrs	r2, r3
 80014ee:	495a      	ldr	r1, [pc, #360]	; (8001658 <init_triangle+0x2a8>)
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 80014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fc:	4b54      	ldr	r3, [pc, #336]	; (8001650 <init_triangle+0x2a0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	429a      	cmp	r2, r3
 8001504:	f6ff af6a 	blt.w	80013dc <init_triangle+0x2c>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
	        }
	    	waveform2[i] |= noise;
	    }
	}
}
 8001508:	e098      	b.n	800163c <init_triangle+0x28c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
 800150e:	e08f      	b.n	8001630 <init_triangle+0x280>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	68b8      	ldr	r0, [r7, #8]
 8001518:	f003 fe75 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	b29a      	uxth	r2, r3
 8001520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001522:	4013      	ands	r3, r2
 8001524:	84bb      	strh	r3, [r7, #36]	; 0x24
	        if(i < NUM_SAMPLES/2){
 8001526:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <init_triangle+0x2a0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0fda      	lsrs	r2, r3, #31
 800152c:	4413      	add	r3, r2
 800152e:	105b      	asrs	r3, r3, #1
 8001530:	461a      	mov	r2, r3
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	4293      	cmp	r3, r2
 8001536:	da35      	bge.n	80015a4 <init_triangle+0x1f4>
	        	waveform2[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <init_triangle+0x2a0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001556:	edd7 6a05 	vldr	s13, [r7, #20]
 800155a:	edd7 7a04 	vldr	s15, [r7, #16]
 800155e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001566:	edd7 7a04 	vldr	s15, [r7, #16]
 800156a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001654 <init_triangle+0x2a4>
 8001572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe ffe5 	bl	8000548 <__aeabi_f2d>
 800157e:	a332      	add	r3, pc, #200	; (adr r3, 8001648 <init_triangle+0x298>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f962 	bl	800084c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb0a 	bl	8000ba8 <__aeabi_d2uiz>
 8001594:	4603      	mov	r3, r0
 8001596:	b29b      	uxth	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <init_triangle+0x2ac>)
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80015a2:	e038      	b.n	8001616 <init_triangle+0x266>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <init_triangle+0x2a0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1e5a      	subs	r2, r3, #1
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <init_triangle+0x2a0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3b01      	subs	r3, #1
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ca:	edd7 6a05 	vldr	s13, [r7, #20]
 80015ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015da:	edd7 7a05 	vldr	s15, [r7, #20]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001654 <init_triangle+0x2a4>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	ee17 0a90 	vmov	r0, s15
 80015ee:	f7fe ffab 	bl	8000548 <__aeabi_f2d>
 80015f2:	a315      	add	r3, pc, #84	; (adr r3, 8001648 <init_triangle+0x298>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f928 	bl	800084c <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fad0 	bl	8000ba8 <__aeabi_d2uiz>
 8001608:	4603      	mov	r3, r0
 800160a:	b29b      	uxth	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <init_triangle+0x2ac>)
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <init_triangle+0x2ac>)
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800161e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001620:	431a      	orrs	r2, r3
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <init_triangle+0x2ac>)
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	3301      	adds	r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <init_triangle+0x2a0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001636:	429a      	cmp	r2, r3
 8001638:	f6ff af6a 	blt.w	8001510 <init_triangle+0x160>
}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	f3af 8000 	nop.w
 8001648:	66666666 	.word	0x66666666
 800164c:	400a6666 	.word	0x400a6666
 8001650:	20000000 	.word	0x20000000
 8001654:	45800000 	.word	0x45800000
 8001658:	200005f8 	.word	0x200005f8
 800165c:	200009f8 	.word	0x200009f8

08001660 <init_rectangle>:


void init_rectangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng,int channel){
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a05 	vstr	s0, [r7, #20]
 800166a:	edc7 0a04 	vstr	s1, [r7, #16]
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fc6b 	bl	8000f50 <get_noise>
 800167a:	4603      	mov	r3, r0
 800167c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d148      	bne.n	8001716 <init_rectangle+0xb6>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001688:	e03f      	b.n	800170a <init_rectangle+0xaa>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f003 fdb8 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	b29a      	uxth	r2, r3
 800169a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800169c:	4013      	ands	r3, r2
 800169e:	847b      	strh	r3, [r7, #34]	; 0x22
    	waveform[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <init_rectangle+0x158>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0fda      	lsrs	r2, r3, #31
 80016a6:	4413      	add	r3, r2
 80016a8:	105b      	asrs	r3, r3, #1
 80016aa:	461a      	mov	r2, r3
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	4293      	cmp	r3, r2
 80016b0:	da02      	bge.n	80016b8 <init_rectangle+0x58>
 80016b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b6:	e001      	b.n	80016bc <init_rectangle+0x5c>
 80016b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016bc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80017bc <init_rectangle+0x15c>
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe ff3e 	bl	8000548 <__aeabi_f2d>
 80016cc:	a338      	add	r3, pc, #224	; (adr r3, 80017b0 <init_rectangle+0x150>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7ff f8bb 	bl	800084c <__aeabi_ddiv>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa63 	bl	8000ba8 <__aeabi_d2uiz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4619      	mov	r1, r3
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <init_rectangle+0x160>)
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	waveform[i] |= noise;
 80016f0:	4a33      	ldr	r2, [pc, #204]	; (80017c0 <init_rectangle+0x160>)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80016fa:	431a      	orrs	r2, r3
 80016fc:	4930      	ldr	r1, [pc, #192]	; (80017c0 <init_rectangle+0x160>)
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	3301      	adds	r3, #1
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <init_rectangle+0x158>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001710:	429a      	cmp	r2, r3
 8001712:	dbba      	blt.n	800168a <init_rectangle+0x2a>
			uint16_t noise = (uint16_t)(random & bits);
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
	    	waveform2[i] |= noise;
	    }
	}
}
 8001714:	e047      	b.n	80017a6 <init_rectangle+0x146>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
 800171a:	e03f      	b.n	800179c <init_rectangle+0x13c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	68b8      	ldr	r0, [r7, #8]
 8001724:	f003 fd6f 	bl	8005206 <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	b29a      	uxth	r2, r3
 800172c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800172e:	4013      	ands	r3, r2
 8001730:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <init_rectangle+0x158>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0fda      	lsrs	r2, r3, #31
 8001738:	4413      	add	r3, r2
 800173a:	105b      	asrs	r3, r3, #1
 800173c:	461a      	mov	r2, r3
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	4293      	cmp	r3, r2
 8001742:	da02      	bge.n	800174a <init_rectangle+0xea>
 8001744:	edd7 7a04 	vldr	s15, [r7, #16]
 8001748:	e001      	b.n	800174e <init_rectangle+0xee>
 800174a:	edd7 7a05 	vldr	s15, [r7, #20]
 800174e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80017bc <init_rectangle+0x15c>
 8001752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001756:	ee17 0a90 	vmov	r0, s15
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	a314      	add	r3, pc, #80	; (adr r3, 80017b0 <init_rectangle+0x150>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f872 	bl	800084c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff fa1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001774:	4603      	mov	r3, r0
 8001776:	b29b      	uxth	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <init_rectangle+0x164>)
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <init_rectangle+0x164>)
 8001784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001786:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800178a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800178c:	431a      	orrs	r2, r3
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <init_rectangle+0x164>)
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <init_rectangle+0x158>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a2:	429a      	cmp	r2, r3
 80017a4:	dbba      	blt.n	800171c <init_rectangle+0xbc>
}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	; 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	66666666 	.word	0x66666666
 80017b4:	400a6666 	.word	0x400a6666
 80017b8:	20000000 	.word	0x20000000
 80017bc:	45800000 	.word	0x45800000
 80017c0:	200005f8 	.word	0x200005f8
 80017c4:	200009f8 	.word	0x200009f8

080017c8 <init_ekg>:

void init_ekg(int channel){
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if(channel == 1){
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d113      	bne.n	80017fe <init_ekg+0x36>
		for(int i = 0; i < NUM_SAMPLES; i++){
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e00a      	b.n	80017f2 <init_ekg+0x2a>
			waveform[i] = ekg[i];
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <init_ekg+0x68>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017e4:	4913      	ldr	r1, [pc, #76]	; (8001834 <init_ekg+0x6c>)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3301      	adds	r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <init_ekg+0x70>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dbef      	blt.n	80017dc <init_ekg+0x14>
	else{
	    for(int i = 0; i < NUM_SAMPLES; i++){
	        waveform2[i] = ekg[i];
	    }
	}
}
 80017fc:	e012      	b.n	8001824 <init_ekg+0x5c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e00a      	b.n	800181a <init_ekg+0x52>
	        waveform2[i] = ekg[i];
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <init_ekg+0x68>)
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800180c:	490b      	ldr	r1, [pc, #44]	; (800183c <init_ekg+0x74>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3301      	adds	r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <init_ekg+0x70>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbef      	blt.n	8001804 <init_ekg+0x3c>
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000004 	.word	0x20000004
 8001834:	200005f8 	.word	0x200005f8
 8001838:	20000000 	.word	0x20000000
 800183c:	200009f8 	.word	0x200009f8

08001840 <sig_gen>:

void sig_gen(struct user_command *cmd, RNG_HandleTypeDef *hrng,DAC_HandleTypeDef *dac ){
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b087      	sub	sp, #28
 8001844:	af02      	add	r7, sp, #8
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
	//Process user input
	if(cmd->channel == 1){
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d104      	bne.n	800185e <sig_gen+0x1e>
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 8001854:	2100      	movs	r1, #0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 fb6a 	bl	8002f30 <HAL_DAC_Stop_DMA>
 800185c:	e003      	b.n	8001866 <sig_gen+0x26>
	}
	else{
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_2);
 800185e:	2110      	movs	r1, #16
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f001 fb65 	bl	8002f30 <HAL_DAC_Stop_DMA>
	}
	switch(cmd->wave){
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	7d1b      	ldrb	r3, [r3, #20]
 800186a:	3b41      	subs	r3, #65	; 0x41
 800186c:	2b13      	cmp	r3, #19
 800186e:	f200 8085 	bhi.w	800197c <sig_gen+0x13c>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <sig_gen+0x38>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001971 	.word	0x08001971
 800187c:	0800197d 	.word	0x0800197d
 8001880:	0800197d 	.word	0x0800197d
 8001884:	0800197d 	.word	0x0800197d
 8001888:	0800197d 	.word	0x0800197d
 800188c:	0800197d 	.word	0x0800197d
 8001890:	0800197d 	.word	0x0800197d
 8001894:	0800197d 	.word	0x0800197d
 8001898:	0800197d 	.word	0x0800197d
 800189c:	0800197d 	.word	0x0800197d
 80018a0:	0800197d 	.word	0x0800197d
 80018a4:	0800197d 	.word	0x0800197d
 80018a8:	0800197d 	.word	0x0800197d
 80018ac:	0800197d 	.word	0x0800197d
 80018b0:	0800197d 	.word	0x0800197d
 80018b4:	0800197d 	.word	0x0800197d
 80018b8:	0800197d 	.word	0x0800197d
 80018bc:	080018c9 	.word	0x080018c9
 80018c0:	080018ef 	.word	0x080018ef
 80018c4:	0800194b 	.word	0x0800194b
	case('R'):
		//Change to Rectangle wave
		init_rectangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6918      	ldr	r0, [r3, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	eef0 0a47 	vmov.f32	s1, s14
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff feba 	bl	8001660 <init_rectangle>
		break;
 80018ec:	e047      	b.n	800197e <sig_gen+0x13e>
	case('S'):
		// Change to Sine wave

		if(cmd->frequency != 0.0){
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d012      	beq.n	8001924 <sig_gen+0xe4>
			init_generator(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	edd3 7a03 	vldr	s15, [r3, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	ed93 7a02 	vldr	s14, [r3, #8]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6918      	ldr	r0, [r3, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	eef0 0a47 	vmov.f32	s1, s14
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	f7ff fbff 	bl	8001120 <init_generator>
		}
		else{
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
		}
		break;
 8001922:	e02c      	b.n	800197e <sig_gen+0x13e>
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	edd3 7a03 	vldr	s15, [r3, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6918      	ldr	r0, [r3, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	eef0 0a47 	vmov.f32	s1, s14
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	f7ff fb50 	bl	8000fe8 <init_DC>
		break;
 8001948:	e019      	b.n	800197e <sig_gen+0x13e>
	case('T'):
		//Change to Triangle
		init_triangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	ed93 7a02 	vldr	s14, [r3, #8]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6918      	ldr	r0, [r3, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	eef0 0a47 	vmov.f32	s1, s14
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	f7ff fd21 	bl	80013b0 <init_triangle>
		break;
 800196e:	e006      	b.n	800197e <sig_gen+0x13e>
	case('A'):
		//Change to ekg
		init_ekg(cmd->channel);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff27 	bl	80017c8 <init_ekg>
		break;
 800197a:	e000      	b.n	800197e <sig_gen+0x13e>
	default:
		break;
 800197c:	bf00      	nop
	}

	if(cmd->channel == 1){
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d137      	bne.n	80019f6 <sig_gen+0x1b6>
		TIM2->ARR = round(80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001986:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <sig_gen+0x220>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	edd3 7a01 	vldr	s15, [r3, #4]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fdd2 	bl	8000548 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	a12b      	add	r1, pc, #172	; (adr r1, 8001a58 <sig_gen+0x218>)
 80019aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ae:	f7fe ff4d 	bl	800084c <__aeabi_ddiv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	ec43 2b17 	vmov	d7, r2, r3
 80019ba:	eeb0 0a47 	vmov.f32	s0, s14
 80019be:	eef0 0a67 	vmov.f32	s1, s15
 80019c2:	f00c fcf9 	bl	800e3b8 <round>
 80019c6:	ec53 2b10 	vmov	r2, r3, d0
 80019ca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f8e9 	bl	8000ba8 <__aeabi_d2uiz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->EGR = TIM_EGR_UG;
 80019da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019de:	2201      	movs	r2, #1
 80019e0:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_1, (uint32_t*)waveform, SAMPLES, DAC_ALIGN_12B_R);
 80019e2:	2300      	movs	r3, #0
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ea:	4a1e      	ldr	r2, [pc, #120]	; (8001a64 <sig_gen+0x224>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f001 f9d2 	bl	8002d98 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
	}



}
 80019f4:	e02a      	b.n	8001a4c <sig_gen+0x20c>
		TIM5->ARR = (80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <sig_gen+0x220>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0c:	ee17 0a90 	vmov	r0, s15
 8001a10:	f7fe fd9a 	bl	8000548 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	a10f      	add	r1, pc, #60	; (adr r1, 8001a58 <sig_gen+0x218>)
 8001a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a1e:	f7fe ff15 	bl	800084c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4c10      	ldr	r4, [pc, #64]	; (8001a68 <sig_gen+0x228>)
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8bc 	bl	8000ba8 <__aeabi_d2uiz>
 8001a30:	4603      	mov	r3, r0
 8001a32:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM5->EGR = TIM_EGR_UG;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <sig_gen+0x228>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <sig_gen+0x22c>)
 8001a44:	2110      	movs	r1, #16
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f001 f9a6 	bl	8002d98 <HAL_DAC_Start_DMA>
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	f3af 8000 	nop.w
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	419312d0 	.word	0x419312d0
 8001a60:	20000000 	.word	0x20000000
 8001a64:	200005f8 	.word	0x200005f8
 8001a68:	40000c00 	.word	0x40000c00
 8001a6c:	200009f8 	.word	0x200009f8

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a74:	f000 ffbc 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a78:	f000 f850 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a7c:	f000 f9e4 	bl	8001e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a80:	f000 f9bc 	bl	8001dfc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001a84:	f000 f98a 	bl	8001d9c <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8001a88:	f000 f89a 	bl	8001bc0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001a8c:	f000 f8ea 	bl	8001c64 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001a90:	f000 f936 	bl	8001d00 <MX_TIM5_Init>
  MX_RNG_Init();
 8001a94:	f000 f8d2 	bl	8001c3c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001a98:	4814      	ldr	r0, [pc, #80]	; (8001aec <main+0x7c>)
 8001a9a:	f003 fce1 	bl	8005460 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <main+0x80>)
 8001aa0:	f003 fcde 	bl	8005460 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aa4:	f004 fe6e 	bl	8006784 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <main+0x84>)
 8001aaa:	f004 ff47 	bl	800693c <osMutexNew>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <main+0x88>)
 8001ab2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandQueue_attributes);
 8001ab4:	4a11      	ldr	r2, [pc, #68]	; (8001afc <main+0x8c>)
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	2010      	movs	r0, #16
 8001aba:	f005 f84d 	bl	8006b58 <osMessageQueueNew>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <main+0x90>)
 8001ac2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProcessCommand */
  ProcessCommandHandle = osThreadNew(StartProcessCommand, NULL, &ProcessCommand_attributes);
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <main+0x94>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <main+0x98>)
 8001aca:	f004 fea5 	bl	8006818 <osThreadNew>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4a0e      	ldr	r2, [pc, #56]	; (8001b0c <main+0x9c>)
 8001ad2:	6013      	str	r3, [r2, #0]

  /* creation of RecieveCommand */
  RecieveCommandHandle = osThreadNew(StartRecieveCommand, NULL, &RecieveCommand_attributes);
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <main+0xa0>)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <main+0xa4>)
 8001ada:	f004 fe9d 	bl	8006818 <osThreadNew>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <main+0xa8>)
 8001ae2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ae4:	f004 fe72 	bl	80067cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <main+0x78>
 8001aea:	bf00      	nop
 8001aec:	20000eac 	.word	0x20000eac
 8001af0:	20000ef8 	.word	0x20000ef8
 8001af4:	0800f678 	.word	0x0800f678
 8001af8:	20000fd8 	.word	0x20000fd8
 8001afc:	0800f660 	.word	0x0800f660
 8001b00:	20000fd4 	.word	0x20000fd4
 8001b04:	0800f618 	.word	0x0800f618
 8001b08:	08001eed 	.word	0x08001eed
 8001b0c:	20000fcc 	.word	0x20000fcc
 8001b10:	0800f63c 	.word	0x0800f63c
 8001b14:	08002361 	.word	0x08002361
 8001b18:	20000fd0 	.word	0x20000fd0

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b096      	sub	sp, #88	; 0x58
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2244      	movs	r2, #68	; 0x44
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f009 fed0 	bl	800b8d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b42:	f001 fff7 	bl	8003b34 <HAL_PWREx_ControlVoltageScaling>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b4c:	f000 fc68 	bl	8002420 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b50:	2302      	movs	r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b62:	2302      	movs	r3, #2
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f002 f82e 	bl	8003be0 <HAL_RCC_OscConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b8a:	f000 fc49 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8e:	230f      	movs	r3, #15
 8001b90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b92:	2303      	movs	r3, #3
 8001b94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fbf6 	bl	8004398 <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bb2:	f000 fc35 	bl	8002420 <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3758      	adds	r7, #88	; 0x58
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f009 fe7f 	bl	800b8d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_DAC1_Init+0x74>)
 8001bd4:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <MX_DAC1_Init+0x78>)
 8001bd6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001bd8:	4816      	ldr	r0, [pc, #88]	; (8001c34 <MX_DAC1_Init+0x74>)
 8001bda:	f001 f8ba 	bl	8002d52 <HAL_DAC_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001be4:	f000 fc1c 	bl	8002420 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001bec:	2324      	movs	r3, #36	; 0x24
 8001bee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4619      	mov	r1, r3
 8001c02:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_DAC1_Init+0x74>)
 8001c04:	f001 f9f7 	bl	8002ff6 <HAL_DAC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f000 fc07 	bl	8002420 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001c12:	231c      	movs	r3, #28
 8001c14:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2210      	movs	r2, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_DAC1_Init+0x74>)
 8001c1e:	f001 f9ea 	bl	8002ff6 <HAL_DAC_ConfigChannel>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001c28:	f000 fbfa 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000df8 	.word	0x20000df8
 8001c38:	40007400 	.word	0x40007400

08001c3c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_RNG_Init+0x20>)
 8001c42:	4a07      	ldr	r2, [pc, #28]	; (8001c60 <MX_RNG_Init+0x24>)
 8001c44:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_RNG_Init+0x20>)
 8001c48:	f003 fa86 	bl	8005158 <HAL_RNG_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001c52:	f000 fbe5 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000e9c 	.word	0x20000e9c
 8001c60:	50060800 	.word	0x50060800

08001c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001caa:	4814      	ldr	r0, [pc, #80]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001cac:	f003 fb80 	bl	80053b0 <HAL_TIM_Base_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001cb6:	f000 fbb3 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001cc8:	f003 fc32 	bl	8005530 <HAL_TIM_ConfigClockSource>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cd2:	f000 fba5 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <MX_TIM2_Init+0x98>)
 8001ce4:	f003 fe22 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cee:	f000 fb97 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000eac 	.word	0x20000eac

08001d00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <MX_TIM5_Init+0x98>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d36:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d44:	4813      	ldr	r0, [pc, #76]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d46:	f003 fb33 	bl	80053b0 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001d50:	f000 fb66 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d62:	f003 fbe5 	bl	8005530 <HAL_TIM_ConfigClockSource>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001d6c:	f000 fb58 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <MX_TIM5_Init+0x94>)
 8001d7e:	f003 fdd5 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d88:	f000 fb4a 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000ef8 	.word	0x20000ef8
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001da2:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <MX_USART2_UART_Init+0x5c>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001da6:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_USART2_UART_Init+0x58>)
 8001de0:	f003 fe2c 	bl	8005a3c <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dea:	f000 fb19 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000f44 	.word	0x20000f44
 8001df8:	40004400 	.word	0x40004400

08001dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <MX_DMA_Init+0x48>)
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <MX_DMA_Init+0x48>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <MX_DMA_Init+0x48>)
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	200d      	movs	r0, #13
 8001e20:	f000 ff61 	bl	8002ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001e24:	200d      	movs	r0, #13
 8001e26:	f000 ff7a 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	200e      	movs	r0, #14
 8001e30:	f000 ff59 	bl	8002ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e34:	200e      	movs	r0, #14
 8001e36:	f000 ff72 	bl	8002d1e <HAL_NVIC_EnableIRQ>

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_GPIO_Init+0x9c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ec4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ec8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_GPIO_Init+0xa0>)
 8001ed6:	f001 fc75 	bl	80037c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eda:	bf00      	nop
 8001edc:	3728      	adds	r7, #40	; 0x28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48000800 	.word	0x48000800

08001eec <StartProcessCommand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProcessCommand */
void StartProcessCommand(void *argument)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0e4      	sub	sp, #400	; 0x190
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ef6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001efa:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  /* Infinite loop */
  for(;;)
  {
	  	uint8_t c = 0;
 8001f0e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f12:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 8001f1a:	f107 0113 	add.w	r1, r7, #19
 8001f1e:	2364      	movs	r3, #100	; 0x64
 8001f20:	2201      	movs	r2, #1
 8001f22:	48b5      	ldr	r0, [pc, #724]	; (80021f8 <StartProcessCommand+0x30c>)
 8001f24:	f003 fe62 	bl	8005bec <HAL_UART_Receive>
	  	HAL_UART_Transmit(&huart2, &c, 1, 100);
 8001f28:	f107 0113 	add.w	r1, r7, #19
 8001f2c:	2364      	movs	r3, #100	; 0x64
 8001f2e:	2201      	movs	r2, #1
 8001f30:	48b1      	ldr	r0, [pc, #708]	; (80021f8 <StartProcessCommand+0x30c>)
 8001f32:	f003 fdd1 	bl	8005ad8 <HAL_UART_Transmit>

	  	if ((char)c == '\r'){
 8001f36:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f3a:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b0d      	cmp	r3, #13
 8001f42:	f040 81e7 	bne.w	8002314 <StartProcessCommand+0x428>
//	  		if enter is pressed, process command to see if valid
	  		struct user_command* command = (struct user_command *)malloc(sizeof(struct user_command));
 8001f46:	2018      	movs	r0, #24
 8001f48:	f008 fa80 	bl	800a44c <malloc>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f54:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f58:	601a      	str	r2, [r3, #0]
	  		command_buffer[i] = '\r';
 8001f5a:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f62:	4413      	add	r3, r2
 8001f64:	220d      	movs	r2, #13
 8001f66:	701a      	strb	r2, [r3, #0]
	  		command_buffer[i+1] = '\n';
 8001f68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001f72:	443b      	add	r3, r7
 8001f74:	220a      	movs	r2, #10
 8001f76:	f803 2c7c 	strb.w	r2, [r3, #-124]
	  		command_buffer[i+2] = '\0';
 8001f7a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f7e:	3302      	adds	r3, #2
 8001f80:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001f84:	443b      	add	r3, r7
 8001f86:	2200      	movs	r2, #0
 8001f88:	f803 2c7c 	strb.w	r2, [r3, #-124]
	  		print_size = sprintf(print_buffer, command_buffer);
 8001f8c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f008 fca4 	bl	800a8e4 <siprintf>
 8001f9c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
 8001fa0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f107 0114 	add.w	r1, r7, #20
 8001faa:	2364      	movs	r3, #100	; 0x64
 8001fac:	4892      	ldr	r0, [pc, #584]	; (80021f8 <StartProcessCommand+0x30c>)
 8001fae:	f003 fd93 	bl	8005ad8 <HAL_UART_Transmit>
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 8001fb2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001fb6:	4991      	ldr	r1, [pc, #580]	; (80021fc <StartProcessCommand+0x310>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f009 fc2d 	bl	800b818 <strtok>
 8001fbe:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 8001fce:	498b      	ldr	r1, [pc, #556]	; (80021fc <StartProcessCommand+0x310>)
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f009 fc21 	bl	800b818 <strtok>
 8001fd6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 8001fda:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001fde:	f007 ff48 	bl	8009e72 <atoi>
 8001fe2:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 8001fe6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	dc03      	bgt.n	8001ff6 <StartProcessCommand+0x10a>
 8001fee:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dc13      	bgt.n	800201e <StartProcessCommand+0x132>
	  			valid_entry = 0;														// if not make command invalid
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	497f      	ldr	r1, [pc, #508]	; (8002200 <StartProcessCommand+0x314>)
 8002002:	4618      	mov	r0, r3
 8002004:	f008 fc6e 	bl	800a8e4 <siprintf>
 8002008:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800200c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002010:	b29a      	uxth	r2, r3
 8002012:	f107 0114 	add.w	r1, r7, #20
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	4877      	ldr	r0, [pc, #476]	; (80021f8 <StartProcessCommand+0x30c>)
 800201a:	f003 fd5d 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 800201e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002022:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800202c:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 800202e:	4973      	ldr	r1, [pc, #460]	; (80021fc <StartProcessCommand+0x310>)
 8002030:	2000      	movs	r0, #0
 8002032:	f009 fbf1 	bl	800b818 <strtok>
 8002036:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 800203a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b41      	cmp	r3, #65	; 0x41
 8002042:	d022      	beq.n	800208a <StartProcessCommand+0x19e>
 8002044:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b52      	cmp	r3, #82	; 0x52
 800204c:	d01d      	beq.n	800208a <StartProcessCommand+0x19e>
 800204e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b53      	cmp	r3, #83	; 0x53
 8002056:	d018      	beq.n	800208a <StartProcessCommand+0x19e>
 8002058:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b54      	cmp	r3, #84	; 0x54
 8002060:	d013      	beq.n	800208a <StartProcessCommand+0x19e>
	  			valid_entry = 0;														// if not make command invalid
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4965      	ldr	r1, [pc, #404]	; (8002204 <StartProcessCommand+0x318>)
 800206e:	4618      	mov	r0, r3
 8002070:	f008 fc38 	bl	800a8e4 <siprintf>
 8002074:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002078:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800207c:	b29a      	uxth	r2, r3
 800207e:	f107 0114 	add.w	r1, r7, #20
 8002082:	2364      	movs	r3, #100	; 0x64
 8002084:	485c      	ldr	r0, [pc, #368]	; (80021f8 <StartProcessCommand+0x30c>)
 8002086:	f003 fd27 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 800208a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800208e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 800209c:	4957      	ldr	r1, [pc, #348]	; (80021fc <StartProcessCommand+0x310>)
 800209e:	2000      	movs	r0, #0
 80020a0:	f009 fbba 	bl	800b818 <strtok>
 80020a4:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int fvalue = atof(word);
 80020a8:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80020ac:	f007 fede 	bl	8009e6c <atof>
 80020b0:	ec53 2b10 	vmov	r2, r3, d0
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fd4e 	bl	8000b58 <__aeabi_d2iz>
 80020bc:	4603      	mov	r3, r0
 80020be:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  		if (fvalue > 10000 || fvalue < 0.5 || fvalue != 0){							// check if frequncy value is valid
 80020c2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80020c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80020ca:	4293      	cmp	r3, r2
 80020cc:	dc07      	bgt.n	80020de <StartProcessCommand+0x1f2>
 80020ce:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	dd03      	ble.n	80020de <StartProcessCommand+0x1f2>
 80020d6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d013      	beq.n	8002106 <StartProcessCommand+0x21a>
	  			valid_entry = 0;														// if not make command invalid
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4947      	ldr	r1, [pc, #284]	; (8002208 <StartProcessCommand+0x31c>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f008 fbfa 	bl	800a8e4 <siprintf>
 80020f0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80020f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 0114 	add.w	r1, r7, #20
 80020fe:	2364      	movs	r3, #100	; 0x64
 8002100:	483d      	ldr	r0, [pc, #244]	; (80021f8 <StartProcessCommand+0x30c>)
 8002102:	f003 fce9 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 8002106:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800210a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002114:	ee07 2a90 	vmov	s15, r2
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	edc3 7a01 	vstr	s15, [r3, #4]

	  		word = strtok(NULL, " ");
 8002120:	4936      	ldr	r1, [pc, #216]	; (80021fc <StartProcessCommand+0x310>)
 8002122:	2000      	movs	r0, #0
 8002124:	f009 fb78 	bl	800b818 <strtok>
 8002128:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 800212c:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002130:	f007 fe9c 	bl	8009e6c <atof>
 8002134:	ec53 2b10 	vmov	r2, r3, d0
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fd0c 	bl	8000b58 <__aeabi_d2iz>
 8002140:	4603      	mov	r3, r0
 8002142:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 8002146:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800214a:	2b03      	cmp	r3, #3
 800214c:	dc03      	bgt.n	8002156 <StartProcessCommand+0x26a>
 800214e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8002152:	2b00      	cmp	r3, #0
 8002154:	da13      	bge.n	800217e <StartProcessCommand+0x292>
	  			valid_entry = 0;														// if not make command invalid
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	492a      	ldr	r1, [pc, #168]	; (800220c <StartProcessCommand+0x320>)
 8002162:	4618      	mov	r0, r3
 8002164:	f008 fbbe 	bl	800a8e4 <siprintf>
 8002168:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800216c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002170:	b29a      	uxth	r2, r3
 8002172:	f107 0114 	add.w	r1, r7, #20
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	481f      	ldr	r0, [pc, #124]	; (80021f8 <StartProcessCommand+0x30c>)
 800217a:	f003 fcad 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 800217e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002182:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800218c:	ee07 2a90 	vmov	s15, r2
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	edc3 7a02 	vstr	s15, [r3, #8]

	  		word = strtok(NULL, " ");
 8002198:	4918      	ldr	r1, [pc, #96]	; (80021fc <StartProcessCommand+0x310>)
 800219a:	2000      	movs	r0, #0
 800219c:	f009 fb3c 	bl	800b818 <strtok>
 80021a0:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 80021a4:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80021a8:	f007 fe60 	bl	8009e6c <atof>
 80021ac:	ec53 2b10 	vmov	r2, r3, d0
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fcd0 	bl	8000b58 <__aeabi_d2iz>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 80021be:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	dc03      	bgt.n	80021ce <StartProcessCommand+0x2e2>
 80021c6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	da22      	bge.n	8002214 <StartProcessCommand+0x328>
	  			valid_entry = 0;														// if not make command invalid
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	490d      	ldr	r1, [pc, #52]	; (8002210 <StartProcessCommand+0x324>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f008 fb82 	bl	800a8e4 <siprintf>
 80021e0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80021e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f107 0114 	add.w	r1, r7, #20
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	4801      	ldr	r0, [pc, #4]	; (80021f8 <StartProcessCommand+0x30c>)
 80021f2:	f003 fc71 	bl	8005ad8 <HAL_UART_Transmit>
 80021f6:	e033      	b.n	8002260 <StartProcessCommand+0x374>
 80021f8:	20000f44 	.word	0x20000f44
 80021fc:	0800f468 	.word	0x0800f468
 8002200:	0800f46c 	.word	0x0800f46c
 8002204:	0800f48c 	.word	0x0800f48c
 8002208:	0800f4dc 	.word	0x0800f4dc
 800220c:	0800f518 	.word	0x0800f518
 8002210:	0800f544 	.word	0x0800f544
	  		} else if (ivalue <= command->minv){										// check if max voltage value is less than min voltage
 8002214:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002220:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002224:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	edd3 7a02 	vldr	s15, [r3, #8]
 800222e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d813      	bhi.n	8002260 <StartProcessCommand+0x374>
	  			valid_entry = 0;														// if not make command invalid
 8002238:	2300      	movs	r3, #0
 800223a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	4941      	ldr	r1, [pc, #260]	; (8002348 <StartProcessCommand+0x45c>)
 8002244:	4618      	mov	r0, r3
 8002246:	f008 fb4d 	bl	800a8e4 <siprintf>
 800224a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800224e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002252:	b29a      	uxth	r2, r3
 8002254:	f107 0114 	add.w	r1, r7, #20
 8002258:	2364      	movs	r3, #100	; 0x64
 800225a:	483c      	ldr	r0, [pc, #240]	; (800234c <StartProcessCommand+0x460>)
 800225c:	f003 fc3c 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 8002260:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002264:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800226e:	ee07 2a90 	vmov	s15, r2
 8002272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002276:	edc3 7a03 	vstr	s15, [r3, #12]

	  		word = strtok(NULL, " ");
 800227a:	4935      	ldr	r1, [pc, #212]	; (8002350 <StartProcessCommand+0x464>)
 800227c:	2000      	movs	r0, #0
 800227e:	f009 facb 	bl	800b818 <strtok>
 8002282:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 8002286:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800228a:	f007 fdf2 	bl	8009e72 <atoi>
 800228e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 8002292:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002296:	2b0c      	cmp	r3, #12
 8002298:	dc03      	bgt.n	80022a2 <StartProcessCommand+0x3b6>
 800229a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da13      	bge.n	80022ca <StartProcessCommand+0x3de>
	  			valid_entry = 0;														// if not make command invalid
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4929      	ldr	r1, [pc, #164]	; (8002354 <StartProcessCommand+0x468>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f008 fb18 	bl	800a8e4 <siprintf>
 80022b4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80022b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f107 0114 	add.w	r1, r7, #20
 80022c2:	2364      	movs	r3, #100	; 0x64
 80022c4:	4821      	ldr	r0, [pc, #132]	; (800234c <StartProcessCommand+0x460>)
 80022c6:	f003 fc07 	bl	8005ad8 <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 80022ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80022ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80022d8:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 80022da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f43f ae15 	beq.w	8001f0e <StartProcessCommand+0x22>
				osMutexAcquire(MUTEXHandle, osWaitForever);
 80022e4:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <StartProcessCommand+0x46c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ec:	4618      	mov	r0, r3
 80022ee:	f004 fbab 	bl	8006a48 <osMutexAcquire>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <StartProcessCommand+0x470>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f107 010c 	add.w	r1, r7, #12
 80022fa:	2300      	movs	r3, #0
 80022fc:	2200      	movs	r2, #0
 80022fe:	f004 fc9f 	bl	8006c40 <osMessageQueuePut>
				osMutexRelease(MUTEXHandle);
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <StartProcessCommand+0x46c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f004 fbe9 	bl	8006ade <osMutexRelease>
				valid_entry = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002312:	e5fc      	b.n	8001f0e <StartProcessCommand+0x22>
  			}

	  	} else if (c != 0){						// if character is valid and not enter key
 8002314:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002318:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f43f adf5 	beq.w	8001f0e <StartProcessCommand+0x22>
	  		command_buffer[i] = c;				// add to buffer to save
 8002324:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002328:	f2a3 137d 	subw	r3, r3, #381	; 0x17d
 800232c:	7819      	ldrb	r1, [r3, #0]
 800232e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8002332:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002336:	4413      	add	r3, r2
 8002338:	460a      	mov	r2, r1
 800233a:	701a      	strb	r2, [r3, #0]
	  		i++;
 800233c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002340:	3301      	adds	r3, #1
 8002342:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  {
 8002346:	e5e2      	b.n	8001f0e <StartProcessCommand+0x22>
 8002348:	0800f570 	.word	0x0800f570
 800234c:	20000f44 	.word	0x20000f44
 8002350:	0800f468 	.word	0x0800f468
 8002354:	0800f5a4 	.word	0x0800f5a4
 8002358:	20000fd8 	.word	0x20000fd8
 800235c:	20000fd4 	.word	0x20000fd4

08002360 <StartRecieveCommand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecieveCommand */
void StartRecieveCommand(void *argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0c4      	sub	sp, #272	; 0x110
 8002364:	af00      	add	r7, sp, #0
 8002366:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800236a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800236e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRecieveCommand */
  /* Infinite loop */
  for(;;)
  {
  osMutexAcquire(MUTEXHandle, osWaitForever);
 8002370:	4b25      	ldr	r3, [pc, #148]	; (8002408 <StartRecieveCommand+0xa8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fb65 	bl	8006a48 <osMutexAcquire>
			  if(osMessageQueueGetCount(CommandQueueHandle) != 0){
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <StartRecieveCommand+0xac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 fd1a 	bl	8006dbc <osMessageQueueGetCount>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d033      	beq.n	80023f6 <StartRecieveCommand+0x96>
				  char buf[256];
				  struct user_command *cmd = (struct user_command *)malloc(sizeof(struct user_command));
 800238e:	2018      	movs	r0, #24
 8002390:	f008 f85c 	bl	800a44c <malloc>
 8002394:	4603      	mov	r3, r0
 8002396:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				  if(cmd == NULL){
 800239a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <StartRecieveCommand+0x48>
					  exit(98);
 80023a2:	2062      	movs	r0, #98	; 0x62
 80023a4:	f007 fd6a 	bl	8009e7c <exit>
				  }
				  osMessageQueueGet(CommandQueueHandle, &cmd, 0, 0);
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <StartRecieveCommand+0xac>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80023b0:	2300      	movs	r3, #0
 80023b2:	2200      	movs	r2, #0
 80023b4:	f004 fca4 	bl	8006d00 <osMessageQueueGet>
				  sig_gen(cmd, &hrng, &hdac1);
 80023b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <StartRecieveCommand+0xb0>)
 80023be:	4915      	ldr	r1, [pc, #84]	; (8002414 <StartRecieveCommand+0xb4>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fa3d 	bl	8001840 <sig_gen>
				  sprintf(buf,"\r\n Enter another wave generation! \r\n");
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4913      	ldr	r1, [pc, #76]	; (8002418 <StartRecieveCommand+0xb8>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 fa89 	bl	800a8e4 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fd ff4a 	bl	8000270 <strlen>
 80023dc:	4603      	mov	r3, r0
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f107 010c 	add.w	r1, r7, #12
 80023e4:	2364      	movs	r3, #100	; 0x64
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <StartRecieveCommand+0xbc>)
 80023e8:	f003 fb76 	bl	8005ad8 <HAL_UART_Transmit>
				  free(cmd);
 80023ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f0:	4618      	mov	r0, r3
 80023f2:	f008 f833 	bl	800a45c <free>

		  }

			  osMutexRelease(MUTEXHandle);
 80023f6:	4b04      	ldr	r3, [pc, #16]	; (8002408 <StartRecieveCommand+0xa8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f004 fb6f 	bl	8006ade <osMutexRelease>
		   vTaskDelay(100);
 8002400:	2064      	movs	r0, #100	; 0x64
 8002402:	f005 ff41 	bl	8008288 <vTaskDelay>
  osMutexAcquire(MUTEXHandle, osWaitForever);
 8002406:	e7b3      	b.n	8002370 <StartRecieveCommand+0x10>
 8002408:	20000fd8 	.word	0x20000fd8
 800240c:	20000fd4 	.word	0x20000fd4
 8002410:	20000df8 	.word	0x20000df8
 8002414:	20000e9c 	.word	0x20000e9c
 8002418:	0800f5d8 	.word	0x0800f5d8
 800241c:	20000f44 	.word	0x20000f44

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	e7fe      	b.n	8002428 <Error_Handler+0x8>
	...

0800242c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_MspInit+0x4c>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_MspInit+0x4c>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6613      	str	r3, [r2, #96]	; 0x60
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_MspInit+0x4c>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_MspInit+0x4c>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_MspInit+0x4c>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_MspInit+0x4c>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	210f      	movs	r1, #15
 8002466:	f06f 0001 	mvn.w	r0, #1
 800246a:	f000 fc3c 	bl	8002ce6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <HAL_DAC_MspInit+0x120>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d17a      	bne.n	8002594 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	4a3f      	ldr	r2, [pc, #252]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024a8:	6593      	str	r3, [r2, #88]	; 0x58
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_DAC_MspInit+0x124>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024ce:	2330      	movs	r3, #48	; 0x30
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d2:	2303      	movs	r3, #3
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f001 f96e 	bl	80037c4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 80024ea:	4a2f      	ldr	r2, [pc, #188]	; (80025a8 <HAL_DAC_MspInit+0x12c>)
 80024ec:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 80024f0:	2206      	movs	r2, #6
 80024f2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 80024f6:	2210      	movs	r2, #16
 80024f8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fa:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002522:	4820      	ldr	r0, [pc, #128]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002524:	f000 ff18 	bl	8003358 <HAL_DMA_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800252e:	f7ff ff77 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a1b      	ldr	r2, [pc, #108]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_DAC_MspInit+0x128>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002540:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_DAC_MspInit+0x134>)
 8002542:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002546:	2205      	movs	r2, #5
 8002548:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <HAL_DAC_MspInit+0x130>)
 800254c:	2210      	movs	r2, #16
 800254e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_DAC_MspInit+0x130>)
 800255e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002562:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800256a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_DAC_MspInit+0x130>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002578:	480c      	ldr	r0, [pc, #48]	; (80025ac <HAL_DAC_MspInit+0x130>)
 800257a:	f000 feed 	bl	8003358 <HAL_DMA_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002584:	f7ff ff4c 	bl	8002420 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_DAC_MspInit+0x130>)
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_DAC_MspInit+0x130>)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	; 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40007400 	.word	0x40007400
 80025a0:	40021000 	.word	0x40021000
 80025a4:	20000e0c 	.word	0x20000e0c
 80025a8:	40020030 	.word	0x40020030
 80025ac:	20000e54 	.word	0x20000e54
 80025b0:	40020044 	.word	0x40020044

080025b4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0a6      	sub	sp, #152	; 0x98
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	2288      	movs	r2, #136	; 0x88
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f009 f983 	bl	800b8d0 <memset>
  if(hrng->Instance==RNG)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1d      	ldr	r2, [pc, #116]	; (8002644 <HAL_RNG_MspInit+0x90>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d133      	bne.n	800263c <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80025d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80025da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80025de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80025e2:	2302      	movs	r3, #2
 80025e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80025ea:	2310      	movs	r3, #16
 80025ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80025ee:	2307      	movs	r3, #7
 80025f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV8;
 80025f2:	2308      	movs	r3, #8
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80025f6:	2302      	movs	r3, #2
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80025fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4618      	mov	r0, r3
 8002606:	f002 f8eb 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002610:	f7ff ff06 	bl	8002420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_RNG_MspInit+0x94>)
 8002616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_RNG_MspInit+0x94>)
 800261a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RNG_MspInit+0x94>)
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2105      	movs	r1, #5
 8002630:	2050      	movs	r0, #80	; 0x50
 8002632:	f000 fb58 	bl	8002ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8002636:	2050      	movs	r0, #80	; 0x50
 8002638:	f000 fb71 	bl	8002d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3798      	adds	r7, #152	; 0x98
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	50060800 	.word	0x50060800
 8002648:	40021000 	.word	0x40021000

0800264c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d10c      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6593      	str	r3, [r2, #88]	; 0x58
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002676:	e010      	b.n	800269a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_TIM_Base_MspInit+0x60>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10b      	bne.n	800269a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_TIM_Base_MspInit+0x5c>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40000c00 	.word	0x40000c00

080026b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0ac      	sub	sp, #176	; 0xb0
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2288      	movs	r2, #136	; 0x88
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f009 f8fd 	bl	800b8d0 <memset>
  if(huart->Instance==USART2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_UART_MspInit+0xb0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d13b      	bne.n	8002758 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 f877 	bl	80047e0 <HAL_RCCEx_PeriphCLKConfig>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026f8:	f7ff fe92 	bl	8002420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_UART_MspInit+0xb4>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	4a18      	ldr	r2, [pc, #96]	; (8002764 <HAL_UART_MspInit+0xb4>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002706:	6593      	str	r3, [r2, #88]	; 0x58
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_UART_MspInit+0xb4>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <HAL_UART_MspInit+0xb4>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <HAL_UART_MspInit+0xb4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_UART_MspInit+0xb4>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800272c:	230c      	movs	r3, #12
 800272e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002744:	2307      	movs	r3, #7
 8002746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800274e:	4619      	mov	r1, r3
 8002750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002754:	f001 f836 	bl	80037c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	37b0      	adds	r7, #176	; 0xb0
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40004400 	.word	0x40004400
 8002764:	40021000 	.word	0x40021000

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800276c:	e7fe      	b.n	800276c <NMI_Handler+0x4>

0800276e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <HardFault_Handler+0x4>

08002774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <MemManage_Handler+0x4>

0800277a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <BusFault_Handler+0x4>

08002780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <UsageFault_Handler+0x4>

08002786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002798:	f000 f986 	bl	8002aa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800279c:	f006 fa00 	bl	8008ba0 <xTaskGetSchedulerState>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d001      	beq.n	80027aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027a6:	f007 f8e7 	bl	8009978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <DMA1_Channel3_IRQHandler+0x10>)
 80027b6:	f000 ff25 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000e0c 	.word	0x20000e0c

080027c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <DMA1_Channel4_IRQHandler+0x10>)
 80027ca:	f000 ff1b 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000e54 	.word	0x20000e54

080027d8 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <RNG_IRQHandler+0x10>)
 80027de:	f002 fd68 	bl	80052b2 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000e9c 	.word	0x20000e9c

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_kill>:

int _kill(int pid, int sig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002806:	f009 f87f 	bl	800b908 <__errno>
 800280a:	4603      	mov	r3, r0
 800280c:	2216      	movs	r2, #22
 800280e:	601a      	str	r2, [r3, #0]
  return -1;
 8002810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_exit>:

void _exit (int status)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ffe7 	bl	80027fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800282e:	e7fe      	b.n	800282e <_exit+0x12>

08002830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e00a      	b.n	8002858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002842:	f3af 8000 	nop.w
 8002846:	4601      	mov	r1, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	60ba      	str	r2, [r7, #8]
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <_read+0x12>
  }

  return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e009      	b.n	8002890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	60ba      	str	r2, [r7, #8]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbf1      	blt.n	800287c <_write+0x12>
  }
  return len;
 8002898:	687b      	ldr	r3, [r7, #4]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <_close>:

int _close(int file)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ca:	605a      	str	r2, [r3, #4]
  return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_isatty>:

int _isatty(int file)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f008 ffe4 	bl	800b908 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20018000 	.word	0x20018000
 800296c:	00000400 	.word	0x00000400
 8002970:	20000fdc 	.word	0x20000fdc
 8002974:	20002a38 	.word	0x20002a38

08002978 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <SystemInit+0x20>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <SystemInit+0x20>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029a0:	f7ff ffea 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a6:	490d      	ldr	r1, [pc, #52]	; (80029dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LoopForever+0xe>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <LoopForever+0x16>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ca:	f008 ffa3 	bl	800b914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ce:	f7ff f84f 	bl	8001a70 <main>

080029d2 <LoopForever>:

LoopForever:
    b LoopForever
 80029d2:	e7fe      	b.n	80029d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 80029e0:	0800fd38 	.word	0x0800fd38
  ldr r2, =_sbss
 80029e4:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 80029e8:	20002a38 	.word	0x20002a38

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_Init+0x3c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_Init+0x3c>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a06:	2003      	movs	r0, #3
 8002a08:	f000 f962 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a0c:	200f      	movs	r0, #15
 8002a0e:	f000 f80f 	bl	8002a30 <HAL_InitTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	e001      	b.n	8002a22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a1e:	f7ff fd05 	bl	800242c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a22:	79fb      	ldrb	r3, [r7, #7]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40022000 	.word	0x40022000

08002a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a3c:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <HAL_InitTick+0x6c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d023      	beq.n	8002a8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_InitTick+0x70>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <HAL_InitTick+0x6c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f96d 	bl	8002d3a <HAL_SYSTICK_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b0f      	cmp	r3, #15
 8002a6a:	d809      	bhi.n	8002a80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a74:	f000 f937 	bl	8002ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_InitTick+0x74>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e004      	b.n	8002a90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e001      	b.n	8002a90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000040c 	.word	0x2000040c
 8002aa0:	20000404 	.word	0x20000404
 8002aa4:	20000408 	.word	0x20000408

08002aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_IncTick+0x24>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_IncTick+0x24>)
 8002aba:	6013      	str	r3, [r2, #0]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	2000040c 	.word	0x2000040c
 8002acc:	20000fe0 	.word	0x20000fe0

08002ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <HAL_GetTick+0x14>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000fe0 	.word	0x20000fe0

08002ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff ffee 	bl	8002ad0 <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d005      	beq.n	8002b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_Delay+0x44>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b0e:	bf00      	nop
 8002b10:	f7ff ffde 	bl	8002ad0 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d8f7      	bhi.n	8002b10 <HAL_Delay+0x28>
  {
  }
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000040c 	.word	0x2000040c

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e014      	b.n	8002d8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	791b      	ldrb	r3, [r3, #4]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fb81 	bl	800247c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	795b      	ldrb	r3, [r3, #5]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_DAC_Start_DMA+0x1e>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0ab      	b.n	8002f0e <HAL_DAC_Start_DMA+0x176>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d12f      	bne.n	8002e28 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <HAL_DAC_Start_DMA+0x180>)
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a51      	ldr	r2, [pc, #324]	; (8002f1c <HAL_DAC_Start_DMA+0x184>)
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a50      	ldr	r2, [pc, #320]	; (8002f20 <HAL_DAC_Start_DMA+0x188>)
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d013      	beq.n	8002e1e <HAL_DAC_Start_DMA+0x86>
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d845      	bhi.n	8002e88 <HAL_DAC_Start_DMA+0xf0>
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_DAC_Start_DMA+0x72>
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d005      	beq.n	8002e14 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e08:	e03e      	b.n	8002e88 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	613b      	str	r3, [r7, #16]
        break;
 8002e12:	e03c      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	613b      	str	r3, [r7, #16]
        break;
 8002e1c:	e037      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3310      	adds	r3, #16
 8002e24:	613b      	str	r3, [r7, #16]
        break;
 8002e26:	e032      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_DAC_Start_DMA+0x18c>)
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a3c      	ldr	r2, [pc, #240]	; (8002f28 <HAL_DAC_Start_DMA+0x190>)
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <HAL_DAC_Start_DMA+0x194>)
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d013      	beq.n	8002e7e <HAL_DAC_Start_DMA+0xe6>
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d817      	bhi.n	8002e8c <HAL_DAC_Start_DMA+0xf4>
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_DAC_Start_DMA+0xd2>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d005      	beq.n	8002e74 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e68:	e010      	b.n	8002e8c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3314      	adds	r3, #20
 8002e70:	613b      	str	r3, [r7, #16]
        break;
 8002e72:	e00c      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3318      	adds	r3, #24
 8002e7a:	613b      	str	r3, [r7, #16]
        break;
 8002e7c:	e007      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	331c      	adds	r3, #28
 8002e84:	613b      	str	r3, [r7, #16]
        break;
 8002e86:	e002      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002e8c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6898      	ldr	r0, [r3, #8]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	f000 fb0b 	bl	80034c8 <HAL_DMA_Start_IT>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]
 8002eb6:	e010      	b.n	8002eda <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68d8      	ldr	r0, [r3, #12]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	f000 faf9 	bl	80034c8 <HAL_DMA_Start_IT>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6819      	ldr	r1, [r3, #0]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e005      	b.n	8002f0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08003245 	.word	0x08003245
 8002f1c:	08003267 	.word	0x08003267
 8002f20:	08003283 	.word	0x08003283
 8002f24:	080032ed 	.word	0x080032ed
 8002f28:	0800330f 	.word	0x0800330f
 8002f2c:	0800332b 	.word	0x0800332b

08002f30 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	400a      	ands	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2201      	movs	r2, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fb02 	bl	8003588 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e00c      	b.n	8002fb0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 faf4 	bl	8003588 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002fae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b088      	sub	sp, #32
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	795b      	ldrb	r3, [r3, #5]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_DAC_ConfigChannel+0x1c>
 800300e:	2302      	movs	r3, #2
 8003010:	e114      	b.n	800323c <HAL_DAC_ConfigChannel+0x246>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2202      	movs	r2, #2
 800301c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b04      	cmp	r3, #4
 8003024:	f040 8081 	bne.w	800312a <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003028:	f7ff fd52 	bl	8002ad0 <HAL_GetTick>
 800302c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d140      	bne.n	80030b6 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003034:	e018      	b.n	8003068 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003036:	f7ff fd4b 	bl	8002ad0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d911      	bls.n	8003068 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0e9      	b.n	800323c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1df      	bne.n	8003036 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003076:	2001      	movs	r0, #1
 8003078:	f7ff fd36 	bl	8002ae8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	6992      	ldr	r2, [r2, #24]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
 8003086:	e023      	b.n	80030d0 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003088:	f7ff fd22 	bl	8002ad0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d90f      	bls.n	80030b6 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	2b00      	cmp	r3, #0
 800309e:	da0a      	bge.n	80030b6 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f043 0208 	orr.w	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2203      	movs	r2, #3
 80030b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0c2      	b.n	800323c <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	2b00      	cmp	r3, #0
 80030be:	dbe3      	blt.n	8003088 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7ff fd11 	bl	8002ae8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	ea02 0103 	and.w	r1, r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f003 0310 	and.w	r3, r3, #16
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	21ff      	movs	r1, #255	; 0xff
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	ea02 0103 	and.w	r1, r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	409a      	lsls	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d11d      	bne.n	800316e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	221f      	movs	r2, #31
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2207      	movs	r2, #7
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	431a      	orrs	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	22c0      	movs	r2, #192	; 0xc0
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff feb1 	bl	8002fba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	711a      	strb	r2, [r3, #4]
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff feaa 	bl	8002fce <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fea0 	bl	8002fe2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	711a      	strb	r2, [r3, #4]
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff ffd8 	bl	80032b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	711a      	strb	r2, [r3, #4]
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff ffd1 	bl	80032c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ffc7 	bl	80032d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	711a      	strb	r2, [r3, #4]
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e098      	b.n	800349c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_DMA_Init+0x150>)
 8003372:	429a      	cmp	r2, r3
 8003374:	d80f      	bhi.n	8003396 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_DMA_Init+0x154>)
 800337e:	4413      	add	r3, r2
 8003380:	4a4b      	ldr	r2, [pc, #300]	; (80034b0 <HAL_DMA_Init+0x158>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	009a      	lsls	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_DMA_Init+0x15c>)
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
 8003394:	e00e      	b.n	80033b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <HAL_DMA_Init+0x160>)
 800339e:	4413      	add	r3, r2
 80033a0:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <HAL_DMA_Init+0x158>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a42      	ldr	r2, [pc, #264]	; (80034bc <HAL_DMA_Init+0x164>)
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800340e:	d039      	beq.n	8003484 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_DMA_Init+0x15c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11a      	bne.n	8003450 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800341a:	4b29      	ldr	r3, [pc, #164]	; (80034c0 <HAL_DMA_Init+0x168>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f003 031c 	and.w	r3, r3, #28
 8003426:	210f      	movs	r1, #15
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	4924      	ldr	r1, [pc, #144]	; (80034c0 <HAL_DMA_Init+0x168>)
 8003430:	4013      	ands	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_DMA_Init+0x168>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f003 031c 	and.w	r3, r3, #28
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	491d      	ldr	r1, [pc, #116]	; (80034c0 <HAL_DMA_Init+0x168>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
 800344e:	e019      	b.n	8003484 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003450:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <HAL_DMA_Init+0x16c>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	f003 031c 	and.w	r3, r3, #28
 800345c:	210f      	movs	r1, #15
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	4917      	ldr	r1, [pc, #92]	; (80034c4 <HAL_DMA_Init+0x16c>)
 8003466:	4013      	ands	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_DMA_Init+0x16c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6859      	ldr	r1, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f003 031c 	and.w	r3, r3, #28
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	4911      	ldr	r1, [pc, #68]	; (80034c4 <HAL_DMA_Init+0x16c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40020407 	.word	0x40020407
 80034ac:	bffdfff8 	.word	0xbffdfff8
 80034b0:	cccccccd 	.word	0xcccccccd
 80034b4:	40020000 	.word	0x40020000
 80034b8:	bffdfbf8 	.word	0xbffdfbf8
 80034bc:	40020400 	.word	0x40020400
 80034c0:	400200a8 	.word	0x400200a8
 80034c4:	400204a8 	.word	0x400204a8

080034c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_DMA_Start_IT+0x20>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e04b      	b.n	8003580 <HAL_DMA_Start_IT+0xb8>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d13a      	bne.n	8003572 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f91e 	bl	8003762 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 020e 	orr.w	r2, r2, #14
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e00f      	b.n	8003560 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0204 	bic.w	r2, r2, #4
 800354e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 020a 	orr.w	r2, r2, #10
 800355e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e005      	b.n	800357e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800357e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d008      	beq.n	80035b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2204      	movs	r2, #4
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 020e 	bic.w	r2, r2, #14
 80035c0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f003 021c 	and.w	r2, r3, #28
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f202 	lsl.w	r2, r1, r2
 80035e4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	f003 031c 	and.w	r3, r3, #28
 8003624:	2204      	movs	r2, #4
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d026      	beq.n	800367e <HAL_DMA_IRQHandler+0x7a>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d021      	beq.n	800367e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0320 	and.w	r3, r3, #32
 8003644:	2b00      	cmp	r3, #0
 8003646:	d107      	bne.n	8003658 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f003 021c 	and.w	r2, r3, #28
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2104      	movs	r1, #4
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d071      	beq.n	8003758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800367c:	e06c      	b.n	8003758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f003 031c 	and.w	r3, r3, #28
 8003686:	2202      	movs	r2, #2
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02e      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xec>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d029      	beq.n	80036f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 020a 	bic.w	r2, r2, #10
 80036b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	f003 021c 	and.w	r2, r3, #28
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2102      	movs	r1, #2
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d038      	beq.n	8003758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036ee:	e033      	b.n	8003758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	f003 031c 	and.w	r3, r3, #28
 80036f8:	2208      	movs	r2, #8
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02a      	beq.n	800375a <HAL_DMA_IRQHandler+0x156>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d025      	beq.n	800375a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 020e 	bic.w	r2, r2, #14
 800371c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f003 021c 	and.w	r2, r3, #28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	d004      	beq.n	800375a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003758:	bf00      	nop
 800375a:	bf00      	nop
}
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	f003 021c 	and.w	r2, r3, #28
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b10      	cmp	r3, #16
 8003792:	d108      	bne.n	80037a6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037a4:	e007      	b.n	80037b6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d2:	e17f      	b.n	8003ad4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8171 	beq.w	8003ace <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d005      	beq.n	8003804 <HAL_GPIO_Init+0x40>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d130      	bne.n	8003866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383a:	2201      	movs	r2, #1
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43db      	mvns	r3, r3
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	091b      	lsrs	r3, r3, #4
 8003850:	f003 0201 	and.w	r2, r3, #1
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b03      	cmp	r3, #3
 8003870:	d118      	bne.n	80038a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003878:	2201      	movs	r2, #1
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	f003 0201 	and.w	r2, r3, #1
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d017      	beq.n	80038e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d123      	bne.n	8003934 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	220f      	movs	r2, #15
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4013      	ands	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	6939      	ldr	r1, [r7, #16]
 8003930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	2203      	movs	r2, #3
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0203 	and.w	r2, r3, #3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80ac 	beq.w	8003ace <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_GPIO_Init+0x330>)
 8003978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397a:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <HAL_GPIO_Init+0x330>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	6613      	str	r3, [r2, #96]	; 0x60
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_GPIO_Init+0x330>)
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800398e:	4a5a      	ldr	r2, [pc, #360]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	3302      	adds	r3, #2
 8003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	220f      	movs	r2, #15
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039b8:	d025      	beq.n	8003a06 <HAL_GPIO_Init+0x242>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4f      	ldr	r2, [pc, #316]	; (8003afc <HAL_GPIO_Init+0x338>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01f      	beq.n	8003a02 <HAL_GPIO_Init+0x23e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4e      	ldr	r2, [pc, #312]	; (8003b00 <HAL_GPIO_Init+0x33c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d019      	beq.n	80039fe <HAL_GPIO_Init+0x23a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4d      	ldr	r2, [pc, #308]	; (8003b04 <HAL_GPIO_Init+0x340>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_GPIO_Init+0x236>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4c      	ldr	r2, [pc, #304]	; (8003b08 <HAL_GPIO_Init+0x344>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x232>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <HAL_GPIO_Init+0x348>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x22e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4a      	ldr	r2, [pc, #296]	; (8003b10 <HAL_GPIO_Init+0x34c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x22a>
 80039ea:	2306      	movs	r3, #6
 80039ec:	e00c      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 80039ee:	2307      	movs	r3, #7
 80039f0:	e00a      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 80039f2:	2305      	movs	r3, #5
 80039f4:	e008      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 80039f6:	2304      	movs	r3, #4
 80039f8:	e006      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 80039fa:	2303      	movs	r3, #3
 80039fc:	e004      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e002      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <HAL_GPIO_Init+0x244>
 8003a06:	2300      	movs	r3, #0
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	f002 0203 	and.w	r2, r2, #3
 8003a0e:	0092      	lsls	r2, r2, #2
 8003a10:	4093      	lsls	r3, r2
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a18:	4937      	ldr	r1, [pc, #220]	; (8003af8 <HAL_GPIO_Init+0x334>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	3302      	adds	r3, #2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a50:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4013      	ands	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac8:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <HAL_GPIO_Init+0x350>)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f47f ae78 	bne.w	80037d4 <HAL_GPIO_Init+0x10>
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	48000400 	.word	0x48000400
 8003b00:	48000800 	.word	0x48000800
 8003b04:	48000c00 	.word	0x48000c00
 8003b08:	48001000 	.word	0x48001000
 8003b0c:	48001400 	.word	0x48001400
 8003b10:	48001800 	.word	0x48001800
 8003b14:	40010400 	.word	0x40010400

08003b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40007000 	.word	0x40007000

08003b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b42:	d130      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b44:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b50:	d038      	beq.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2232      	movs	r2, #50	; 0x32
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	; (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0c9b      	lsrs	r3, r3, #18
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b78:	e002      	b.n	8003b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d102      	bne.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f2      	bne.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba0:	d110      	bne.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	d007      	beq.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bbc:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40007000 	.word	0x40007000
 8003bd8:	20000404 	.word	0x20000404
 8003bdc:	431bde83 	.word	0x431bde83

08003be0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e3ca      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf2:	4b97      	ldr	r3, [pc, #604]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfc:	4b94      	ldr	r3, [pc, #592]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80e4 	beq.w	8003ddc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <HAL_RCC_OscConfig+0x4a>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	f040 808b 	bne.w	8003d38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 8087 	bne.w	8003d38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c2a:	4b89      	ldr	r3, [pc, #548]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e3a2      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	4b82      	ldr	r3, [pc, #520]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_RCC_OscConfig+0x7c>
 8003c52:	4b7f      	ldr	r3, [pc, #508]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c5a:	e005      	b.n	8003c68 <HAL_RCC_OscConfig+0x88>
 8003c5c:	4b7c      	ldr	r3, [pc, #496]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d223      	bcs.n	8003cb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fd55 	bl	8004720 <RCC_SetFlashLatencyFromMSIRange>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e383      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c80:	4b73      	ldr	r3, [pc, #460]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a72      	ldr	r2, [pc, #456]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c86:	f043 0308 	orr.w	r3, r3, #8
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b70      	ldr	r3, [pc, #448]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	496d      	ldr	r1, [pc, #436]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	4968      	ldr	r1, [pc, #416]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
 8003cb2:	e025      	b.n	8003d00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb4:	4b66      	ldr	r3, [pc, #408]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cba:	f043 0308 	orr.w	r3, r3, #8
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4960      	ldr	r1, [pc, #384]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	495b      	ldr	r1, [pc, #364]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fd15 	bl	8004720 <RCC_SetFlashLatencyFromMSIRange>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e343      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d00:	f000 fc4a 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b52      	ldr	r3, [pc, #328]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	4950      	ldr	r1, [pc, #320]	; (8003e54 <HAL_RCC_OscConfig+0x274>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	4a4e      	ldr	r2, [pc, #312]	; (8003e58 <HAL_RCC_OscConfig+0x278>)
 8003d1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d20:	4b4e      	ldr	r3, [pc, #312]	; (8003e5c <HAL_RCC_OscConfig+0x27c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fe fe83 	bl	8002a30 <HAL_InitTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d052      	beq.n	8003dda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	e327      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d032      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe fec0 	bl	8002ad0 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d54:	f7fe febc 	bl	8002ad0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e310      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d66:	4b3a      	ldr	r3, [pc, #232]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d72:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a36      	ldr	r2, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4931      	ldr	r1, [pc, #196]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	492c      	ldr	r1, [pc, #176]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	604b      	str	r3, [r1, #4]
 8003da4:	e01a      	b.n	8003ddc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fe8d 	bl	8002ad0 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dba:	f7fe fe89 	bl	8002ad0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e2dd      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x1da>
 8003dd8:	e000      	b.n	8003ddc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d074      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x21a>
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	d10e      	bne.n	8003e12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d10b      	bne.n	8003e12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d064      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2f0>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d160      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e2ba      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCC_OscConfig+0x24a>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	e026      	b.n	8003e78 <HAL_RCC_OscConfig+0x298>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e32:	d115      	bne.n	8003e60 <HAL_RCC_OscConfig+0x280>
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b03      	ldr	r3, [pc, #12]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a02      	ldr	r2, [pc, #8]	; (8003e50 <HAL_RCC_OscConfig+0x270>)
 8003e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e014      	b.n	8003e78 <HAL_RCC_OscConfig+0x298>
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	0800f688 	.word	0x0800f688
 8003e58:	20000404 	.word	0x20000404
 8003e5c:	20000408 	.word	0x20000408
 8003e60:	4ba0      	ldr	r3, [pc, #640]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a9f      	ldr	r2, [pc, #636]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b9d      	ldr	r3, [pc, #628]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a9c      	ldr	r2, [pc, #624]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fe26 	bl	8002ad0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fe22 	bl	8002ad0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e276      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9a:	4b92      	ldr	r3, [pc, #584]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x2a8>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fe12 	bl	8002ad0 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fe0e 	bl	8002ad0 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e262      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2d0>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d060      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x310>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d119      	bne.n	8003f1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d116      	bne.n	8003f1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef0:	4b7c      	ldr	r3, [pc, #496]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x328>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e23f      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b76      	ldr	r3, [pc, #472]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	4973      	ldr	r1, [pc, #460]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	e040      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f26:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe fdcd 	bl	8002ad0 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fdc9 	bl	8002ad0 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e21d      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4c:	4b65      	ldr	r3, [pc, #404]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f58:	4b62      	ldr	r3, [pc, #392]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	495f      	ldr	r1, [pc, #380]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	e018      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6e:	4b5d      	ldr	r3, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a5c      	ldr	r2, [pc, #368]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fda9 	bl	8002ad0 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fda5 	bl	8002ad0 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1f9      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f94:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d03c      	beq.n	8004026 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01c      	beq.n	8003fee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fba:	4a4a      	ldr	r2, [pc, #296]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fd84 	bl	8002ad0 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fcc:	f7fe fd80 	bl	8002ad0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e1d4      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fde:	4b41      	ldr	r3, [pc, #260]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <HAL_RCC_OscConfig+0x3ec>
 8003fec:	e01b      	b.n	8004026 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff4:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fe fd67 	bl	8002ad0 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004006:	f7fe fd63 	bl	8002ad0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1b7      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004018:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 800401a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ef      	bne.n	8004006 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80a6 	beq.w	8004180 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004034:	2300      	movs	r3, #0
 8004036:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004038:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10d      	bne.n	8004060 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	6593      	str	r3, [r2, #88]	; 0x58
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405c:	2301      	movs	r3, #1
 800405e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCC_OscConfig+0x508>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d118      	bne.n	800409e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <HAL_RCC_OscConfig+0x508>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <HAL_RCC_OscConfig+0x508>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004078:	f7fe fd2a 	bl	8002ad0 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004080:	f7fe fd26 	bl	8002ad0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e17a      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_RCC_OscConfig+0x508>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d108      	bne.n	80040b8 <HAL_RCC_OscConfig+0x4d8>
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b6:	e029      	b.n	800410c <HAL_RCC_OscConfig+0x52c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d115      	bne.n	80040ec <HAL_RCC_OscConfig+0x50c>
 80040c0:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	4a03      	ldr	r2, [pc, #12]	; (80040e4 <HAL_RCC_OscConfig+0x504>)
 80040d8:	f043 0301 	orr.w	r3, r3, #1
 80040dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e0:	e014      	b.n	800410c <HAL_RCC_OscConfig+0x52c>
 80040e2:	bf00      	nop
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	4b9c      	ldr	r3, [pc, #624]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a9b      	ldr	r2, [pc, #620]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80040f4:	f023 0301 	bic.w	r3, r3, #1
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040fc:	4b98      	ldr	r3, [pc, #608]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	4a97      	ldr	r2, [pc, #604]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004104:	f023 0304 	bic.w	r3, r3, #4
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fe fcdc 	bl	8002ad0 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fe fcd8 	bl	8002ad0 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e12a      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ed      	beq.n	800411c <HAL_RCC_OscConfig+0x53c>
 8004140:	e015      	b.n	800416e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fe fcc5 	bl	8002ad0 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fcc1 	bl	8002ad0 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e113      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004160:	4b7f      	ldr	r3, [pc, #508]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ed      	bne.n	800414a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416e:	7ffb      	ldrb	r3, [r7, #31]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b7a      	ldr	r3, [pc, #488]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	4a79      	ldr	r2, [pc, #484]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80fe 	beq.w	8004386 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2b02      	cmp	r3, #2
 8004190:	f040 80d0 	bne.w	8004334 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004194:	4b72      	ldr	r3, [pc, #456]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 0203 	and.w	r2, r3, #3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d130      	bne.n	800420a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	3b01      	subs	r3, #1
 80041b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d127      	bne.n	800420a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d11f      	bne.n	800420a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d4:	2a07      	cmp	r2, #7
 80041d6:	bf14      	ite	ne
 80041d8:	2201      	movne	r2, #1
 80041da:	2200      	moveq	r2, #0
 80041dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	085b      	lsrs	r3, r3, #1
 80041ee:	3b01      	subs	r3, #1
 80041f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d109      	bne.n	800420a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d06e      	beq.n	80042e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b0c      	cmp	r3, #12
 800420e:	d069      	beq.n	80042e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0ad      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800422c:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004236:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004238:	f7fe fc4a 	bl	8002ad0 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe fc46 	bl	8002ad0 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e09a      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004252:	4b43      	ldr	r3, [pc, #268]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800425e:	4b40      	ldr	r3, [pc, #256]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_RCC_OscConfig+0x784>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800426e:	3a01      	subs	r2, #1
 8004270:	0112      	lsls	r2, r2, #4
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004278:	0212      	lsls	r2, r2, #8
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004280:	0852      	lsrs	r2, r2, #1
 8004282:	3a01      	subs	r2, #1
 8004284:	0552      	lsls	r2, r2, #21
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800428c:	0852      	lsrs	r2, r2, #1
 800428e:	3a01      	subs	r2, #1
 8004290:	0652      	lsls	r2, r2, #25
 8004292:	4311      	orrs	r1, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004298:	0912      	lsrs	r2, r2, #4
 800429a:	0452      	lsls	r2, r2, #17
 800429c:	430a      	orrs	r2, r1
 800429e:	4930      	ldr	r1, [pc, #192]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2d      	ldr	r2, [pc, #180]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a2a      	ldr	r2, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042bc:	f7fe fc08 	bl	8002ad0 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c4:	f7fe fc04 	bl	8002ad0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e058      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042e2:	e050      	b.n	8004386 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e04f      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d148      	bne.n	8004386 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800430a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800430c:	f7fe fbe0 	bl	8002ad0 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004314:	f7fe fbdc 	bl	8002ad0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e030      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0x734>
 8004332:	e028      	b.n	8004386 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	2b0c      	cmp	r3, #12
 8004338:	d023      	beq.n	8004382 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <HAL_RCC_OscConfig+0x780>)
 8004340:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fe fbc3 	bl	8002ad0 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800434c:	e00c      	b.n	8004368 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434e:	f7fe fbbf 	bl	8002ad0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d905      	bls.n	8004368 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e013      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
 8004360:	40021000 	.word	0x40021000
 8004364:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCC_OscConfig+0x7b0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ec      	bne.n	800434e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x7b0>)
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	4905      	ldr	r1, [pc, #20]	; (8004390 <HAL_RCC_OscConfig+0x7b0>)
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_OscConfig+0x7b4>)
 800437c:	4013      	ands	r3, r2
 800437e:	60cb      	str	r3, [r1, #12]
 8004380:	e001      	b.n	8004386 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3720      	adds	r7, #32
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40021000 	.word	0x40021000
 8004394:	feeefffc 	.word	0xfeeefffc

08004398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0e7      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ac:	4b75      	ldr	r3, [pc, #468]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d910      	bls.n	80043dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b72      	ldr	r3, [pc, #456]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 0207 	bic.w	r2, r3, #7
 80043c2:	4970      	ldr	r1, [pc, #448]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ca:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0cf      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b66      	ldr	r3, [pc, #408]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d908      	bls.n	800440a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f8:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4960      	ldr	r1, [pc, #384]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d04c      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	4b5a      	ldr	r3, [pc, #360]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d121      	bne.n	800446e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0a6      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004436:	4b54      	ldr	r3, [pc, #336]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d115      	bne.n	800446e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e09a      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800444e:	4b4e      	ldr	r3, [pc, #312]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e08e      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445e:	4b4a      	ldr	r3, [pc, #296]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e086      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800446e:	4b46      	ldr	r3, [pc, #280]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f023 0203 	bic.w	r2, r3, #3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4943      	ldr	r1, [pc, #268]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004480:	f7fe fb26 	bl	8002ad0 <HAL_GetTick>
 8004484:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	e00a      	b.n	800449e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004488:	f7fe fb22 	bl	8002ad0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e06e      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 020c 	and.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d1eb      	bne.n	8004488 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b31      	ldr	r3, [pc, #196]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d208      	bcs.n	80044de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b2e      	ldr	r3, [pc, #184]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	492b      	ldr	r1, [pc, #172]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044de:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d210      	bcs.n	800450e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 0207 	bic.w	r2, r3, #7
 80044f4:	4923      	ldr	r1, [pc, #140]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCC_ClockConfig+0x1ec>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e036      	b.n	800457c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4918      	ldr	r1, [pc, #96]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4910      	ldr	r1, [pc, #64]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454c:	f000 f824 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	490b      	ldr	r1, [pc, #44]	; (800458c <HAL_RCC_ClockConfig+0x1f4>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	4a09      	ldr	r2, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1f8>)
 800456a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800456c:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1fc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fa5d 	bl	8002a30 <HAL_InitTick>
 8004576:	4603      	mov	r3, r0
 8004578:	72fb      	strb	r3, [r7, #11]

  return status;
 800457a:	7afb      	ldrb	r3, [r7, #11]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40022000 	.word	0x40022000
 8004588:	40021000 	.word	0x40021000
 800458c:	0800f688 	.word	0x0800f688
 8004590:	20000404 	.word	0x20000404
 8004594:	20000408 	.word	0x20000408

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a6:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x34>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d121      	bne.n	800460a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d11e      	bne.n	800460a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045cc:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045d8:	4b31      	ldr	r3, [pc, #196]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	e005      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045e8:	4b2d      	ldr	r3, [pc, #180]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10d      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004608:	e00a      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b04      	cmp	r3, #4
 800460e:	d102      	bne.n	8004616 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004612:	61bb      	str	r3, [r7, #24]
 8004614:	e004      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d101      	bne.n	8004620 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_RCC_GetSysClockFreq+0x114>)
 800461e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d134      	bne.n	8004690 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d003      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0xa6>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d003      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0xac>
 800463c:	e005      	b.n	800464a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004640:	617b      	str	r3, [r7, #20]
      break;
 8004642:	e005      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_GetSysClockFreq+0x114>)
 8004646:	617b      	str	r3, [r7, #20]
      break;
 8004648:	e002      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	617b      	str	r3, [r7, #20]
      break;
 800464e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	3301      	adds	r3, #1
 800465c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	0a1b      	lsrs	r3, r3, #8
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	fb03 f202 	mul.w	r2, r3, r2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	0e5b      	lsrs	r3, r3, #25
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	3301      	adds	r3, #1
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004690:	69bb      	ldr	r3, [r7, #24]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800f6a0 	.word	0x0800f6a0
 80046a8:	00f42400 	.word	0x00f42400
 80046ac:	007a1200 	.word	0x007a1200

080046b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000404 	.word	0x20000404

080046c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046cc:	f7ff fff0 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4904      	ldr	r1, [pc, #16]	; (80046f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021000 	.word	0x40021000
 80046f0:	0800f698 	.word	0x0800f698

080046f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046f8:	f7ff ffda 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0adb      	lsrs	r3, r3, #11
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4904      	ldr	r1, [pc, #16]	; (800471c <HAL_RCC_GetPCLK2Freq+0x28>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	0800f698 	.word	0x0800f698

08004720 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800472c:	4b2a      	ldr	r3, [pc, #168]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004738:	f7ff f9ee 	bl	8003b18 <HAL_PWREx_GetVoltageRange>
 800473c:	6178      	str	r0, [r7, #20]
 800473e:	e014      	b.n	800476a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004740:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474a:	6593      	str	r3, [r2, #88]	; 0x58
 800474c:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004758:	f7ff f9de 	bl	8003b18 <HAL_PWREx_GetVoltageRange>
 800475c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800475e:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004768:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d10b      	bne.n	800478a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b80      	cmp	r3, #128	; 0x80
 8004776:	d919      	bls.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2ba0      	cmp	r3, #160	; 0xa0
 800477c:	d902      	bls.n	8004784 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800477e:	2302      	movs	r3, #2
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e013      	b.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004784:	2301      	movs	r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e010      	b.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d902      	bls.n	8004796 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004790:	2303      	movs	r3, #3
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	e00a      	b.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b80      	cmp	r3, #128	; 0x80
 800479a:	d102      	bne.n	80047a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800479c:	2302      	movs	r3, #2
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e004      	b.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b70      	cmp	r3, #112	; 0x70
 80047a6:	d101      	bne.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a8:	2301      	movs	r3, #1
 80047aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 0207 	bic.w	r2, r3, #7
 80047b4:	4909      	ldr	r1, [pc, #36]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d001      	beq.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	40022000 	.word	0x40022000

080047e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047e8:	2300      	movs	r3, #0
 80047ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d041      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004800:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004804:	d02a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004806:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800480a:	d824      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800480c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004810:	d008      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004816:	d81e      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800481c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004820:	d010      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004822:	e018      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004824:	4b86      	ldr	r3, [pc, #536]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a85      	ldr	r2, [pc, #532]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004830:	e015      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fabb 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004842:	e00c      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3320      	adds	r3, #32
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fba6 	bl	8004f9c <RCCEx_PLLSAI2_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004854:	e003      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	74fb      	strb	r3, [r7, #19]
      break;
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004864:	4b76      	ldr	r3, [pc, #472]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004872:	4973      	ldr	r1, [pc, #460]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800487a:	e001      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d041      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004890:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004894:	d02a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800489a:	d824      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800489c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a0:	d008      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a6:	d81e      	bhi.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b0:	d010      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048b2:	e018      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b4:	4b62      	ldr	r3, [pc, #392]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a61      	ldr	r2, [pc, #388]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c0:	e015      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fa73 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d2:	e00c      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3320      	adds	r3, #32
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fb5e 	bl	8004f9c <RCCEx_PLLSAI2_Config>
 80048e0:	4603      	mov	r3, r0
 80048e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	74fb      	strb	r3, [r7, #19]
      break;
 80048ea:	e000      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f4:	4b52      	ldr	r3, [pc, #328]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004902:	494f      	ldr	r1, [pc, #316]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800490a:	e001      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 80a0 	beq.w	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491e:	2300      	movs	r3, #0
 8004920:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004942:	6593      	str	r3, [r2, #88]	; 0x58
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004950:	2301      	movs	r3, #1
 8004952:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004954:	4b3b      	ldr	r3, [pc, #236]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3a      	ldr	r2, [pc, #232]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800495a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004960:	f7fe f8b6 	bl	8002ad0 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004966:	e009      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004968:	f7fe f8b2 	bl	8002ad0 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d902      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	74fb      	strb	r3, [r7, #19]
        break;
 800497a:	e005      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800497c:	4b31      	ldr	r3, [pc, #196]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0ef      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d15c      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004998:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d019      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049ac:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049be:	4a20      	ldr	r2, [pc, #128]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c8:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fe f871 	bl	8002ad0 <HAL_GetTick>
 80049ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f0:	e00b      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fe f86d 	bl	8002ad0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d902      	bls.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	74fb      	strb	r3, [r7, #19]
            break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ec      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2e:	4904      	ldr	r1, [pc, #16]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a36:	e009      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a48:	7cfb      	ldrb	r3, [r7, #19]
 8004a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4c:	7c7b      	ldrb	r3, [r7, #17]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4b9e      	ldr	r3, [pc, #632]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	4a9d      	ldr	r2, [pc, #628]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6a:	4b98      	ldr	r3, [pc, #608]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f023 0203 	bic.w	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	4994      	ldr	r1, [pc, #592]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f023 020c 	bic.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	498c      	ldr	r1, [pc, #560]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aae:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	4983      	ldr	r1, [pc, #524]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad0:	4b7e      	ldr	r3, [pc, #504]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	497b      	ldr	r1, [pc, #492]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b00:	4972      	ldr	r1, [pc, #456]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b14:	4b6d      	ldr	r3, [pc, #436]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	496a      	ldr	r1, [pc, #424]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b36:	4b65      	ldr	r3, [pc, #404]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	4961      	ldr	r1, [pc, #388]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b58:	4b5c      	ldr	r3, [pc, #368]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b66:	4959      	ldr	r1, [pc, #356]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7a:	4b54      	ldr	r3, [pc, #336]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	4950      	ldr	r1, [pc, #320]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	4948      	ldr	r1, [pc, #288]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bbe:	4b43      	ldr	r3, [pc, #268]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	493f      	ldr	r1, [pc, #252]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d028      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be0:	4b3a      	ldr	r3, [pc, #232]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bee:	4937      	ldr	r1, [pc, #220]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b32      	ldr	r3, [pc, #200]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a31      	ldr	r2, [pc, #196]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
 8004c0c:	e011      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f8c8 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c28:	7cfb      	ldrb	r3, [r7, #19]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	491f      	ldr	r1, [pc, #124]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c68:	60d3      	str	r3, [r2, #12]
 8004c6a:	e011      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 f899 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	4908      	ldr	r1, [pc, #32]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cba:	d109      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a02      	ldr	r2, [pc, #8]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc6:	60d3      	str	r3, [r2, #12]
 8004cc8:	e014      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cca:	bf00      	nop
 8004ccc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	2101      	movs	r1, #1
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f867 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02f      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d00:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0e:	4928      	ldr	r1, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1e:	d10d      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2102      	movs	r1, #2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f844 	bl	8004db4 <RCCEx_PLLSAI1_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d014      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	74bb      	strb	r3, [r7, #18]
 8004d3a:	e011      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	3320      	adds	r3, #32
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f925 	bl	8004f9c <RCCEx_PLLSAI2_Config>
 8004d52:	4603      	mov	r3, r0
 8004d54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7a:	490d      	ldr	r1, [pc, #52]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d9e:	4904      	ldr	r1, [pc, #16]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004da6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40021000 	.word	0x40021000

08004db4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dc2:	4b75      	ldr	r3, [pc, #468]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d018      	beq.n	8004e00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dce:	4b72      	ldr	r3, [pc, #456]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d10d      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
       ||
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004de6:	4b6c      	ldr	r3, [pc, #432]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
       ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d047      	beq.n	8004e8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
 8004dfe:	e044      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d018      	beq.n	8004e3a <RCCEx_PLLSAI1_Config+0x86>
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d825      	bhi.n	8004e58 <RCCEx_PLLSAI1_Config+0xa4>
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d002      	beq.n	8004e16 <RCCEx_PLLSAI1_Config+0x62>
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d009      	beq.n	8004e28 <RCCEx_PLLSAI1_Config+0x74>
 8004e14:	e020      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e16:	4b60      	ldr	r3, [pc, #384]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11d      	bne.n	8004e5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e26:	e01a      	b.n	8004e5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d116      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e38:	e013      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e3a:	4b57      	ldr	r3, [pc, #348]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e46:	4b54      	ldr	r3, [pc, #336]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e56:	e006      	b.n	8004e66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5c:	e004      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e6e:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	430b      	orrs	r3, r1
 8004e84:	4944      	ldr	r1, [pc, #272]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d17d      	bne.n	8004f8c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e90:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a40      	ldr	r2, [pc, #256]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fd fe18 	bl	8002ad0 <HAL_GetTick>
 8004ea0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea2:	e009      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea4:	f7fd fe14 	bl	8002ad0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb6:	e005      	b.n	8004ec4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eb8:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ef      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d160      	bne.n	8004f8c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d111      	bne.n	8004ef4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed0:	4b31      	ldr	r3, [pc, #196]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6892      	ldr	r2, [r2, #8]
 8004ee0:	0211      	lsls	r1, r2, #8
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68d2      	ldr	r2, [r2, #12]
 8004ee6:	0912      	lsrs	r2, r2, #4
 8004ee8:	0452      	lsls	r2, r2, #17
 8004eea:	430a      	orrs	r2, r1
 8004eec:	492a      	ldr	r1, [pc, #168]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	610b      	str	r3, [r1, #16]
 8004ef2:	e027      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d112      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efa:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	0211      	lsls	r1, r2, #8
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6912      	ldr	r2, [r2, #16]
 8004f10:	0852      	lsrs	r2, r2, #1
 8004f12:	3a01      	subs	r2, #1
 8004f14:	0552      	lsls	r2, r2, #21
 8004f16:	430a      	orrs	r2, r1
 8004f18:	491f      	ldr	r1, [pc, #124]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	610b      	str	r3, [r1, #16]
 8004f1e:	e011      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6892      	ldr	r2, [r2, #8]
 8004f30:	0211      	lsls	r1, r2, #8
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6952      	ldr	r2, [r2, #20]
 8004f36:	0852      	lsrs	r2, r2, #1
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0652      	lsls	r2, r2, #25
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	4916      	ldr	r1, [pc, #88]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f50:	f7fd fdbe 	bl	8002ad0 <HAL_GetTick>
 8004f54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f56:	e009      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f58:	f7fd fdba 	bl	8002ad0 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	73fb      	strb	r3, [r7, #15]
          break;
 8004f6a:	e005      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ef      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	4904      	ldr	r1, [pc, #16]	; (8004f98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000

08004f9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004faa:	4b6a      	ldr	r3, [pc, #424]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fb6:	4b67      	ldr	r3, [pc, #412]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0203 	and.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d009      	beq.n	8004fe2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fce:	4b61      	ldr	r3, [pc, #388]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
       ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d047      	beq.n	8005072 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e044      	b.n	8005072 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d018      	beq.n	8005022 <RCCEx_PLLSAI2_Config+0x86>
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d825      	bhi.n	8005040 <RCCEx_PLLSAI2_Config+0xa4>
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d002      	beq.n	8004ffe <RCCEx_PLLSAI2_Config+0x62>
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d009      	beq.n	8005010 <RCCEx_PLLSAI2_Config+0x74>
 8004ffc:	e020      	b.n	8005040 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ffe:	4b55      	ldr	r3, [pc, #340]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11d      	bne.n	8005046 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e01a      	b.n	8005046 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005010:	4b50      	ldr	r3, [pc, #320]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d116      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005020:	e013      	b.n	800504a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005022:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800502e:	4b49      	ldr	r3, [pc, #292]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d109      	bne.n	800504e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800503e:	e006      	b.n	800504e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e004      	b.n	8005050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005046:	bf00      	nop
 8005048:	e002      	b.n	8005050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504a:	bf00      	nop
 800504c:	e000      	b.n	8005050 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005056:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	430b      	orrs	r3, r1
 800506c:	4939      	ldr	r1, [pc, #228]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506e:	4313      	orrs	r3, r2
 8005070:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d167      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005078:	4b36      	ldr	r3, [pc, #216]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a35      	ldr	r2, [pc, #212]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005084:	f7fd fd24 	bl	8002ad0 <HAL_GetTick>
 8005088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800508a:	e009      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800508c:	f7fd fd20 	bl	8002ad0 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d902      	bls.n	80050a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	73fb      	strb	r3, [r7, #15]
        break;
 800509e:	e005      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ef      	bne.n	800508c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d14a      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d111      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b8:	4b26      	ldr	r3, [pc, #152]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6892      	ldr	r2, [r2, #8]
 80050c8:	0211      	lsls	r1, r2, #8
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68d2      	ldr	r2, [r2, #12]
 80050ce:	0912      	lsrs	r2, r2, #4
 80050d0:	0452      	lsls	r2, r2, #17
 80050d2:	430a      	orrs	r2, r1
 80050d4:	491f      	ldr	r1, [pc, #124]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	614b      	str	r3, [r1, #20]
 80050da:	e011      	b.n	8005100 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050dc:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	0211      	lsls	r1, r2, #8
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6912      	ldr	r2, [r2, #16]
 80050f2:	0852      	lsrs	r2, r2, #1
 80050f4:	3a01      	subs	r2, #1
 80050f6:	0652      	lsls	r2, r2, #25
 80050f8:	430a      	orrs	r2, r1
 80050fa:	4916      	ldr	r1, [pc, #88]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fd fce0 	bl	8002ad0 <HAL_GetTick>
 8005110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005112:	e009      	b.n	8005128 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005114:	f7fd fcdc 	bl	8002ad0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	73fb      	strb	r3, [r7, #15]
          break;
 8005126:	e005      	b.n	8005134 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ef      	beq.n	8005114 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4904      	ldr	r1, [pc, #16]	; (8005154 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e049      	b.n	80051fe <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	795b      	ldrb	r3, [r3, #5]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd fa1a 	bl	80025b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d104      	bne.n	80051ae <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2204      	movs	r2, #4
 80051a8:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e027      	b.n	80051fe <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80051ae:	f7fd fc8f 	bl	8002ad0 <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80051b4:	e015      	b.n	80051e2 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80051b6:	f7fd fc8b 	bl	8002ad0 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d90e      	bls.n	80051e2 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d107      	bne.n	80051e2 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e00d      	b.n	80051fe <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b04      	cmp	r3, #4
 80051ee:	d0e2      	beq.n	80051b6 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	791b      	ldrb	r3, [r3, #4]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_RNG_GenerateRandomNumber+0x1a>
 800521c:	2302      	movs	r3, #2
 800521e:	e044      	b.n	80052aa <HAL_RNG_GenerateRandomNumber+0xa4>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	795b      	ldrb	r3, [r3, #5]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d133      	bne.n	8005298 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005236:	f7fd fc4b 	bl	8002ad0 <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800523c:	e018      	b.n	8005270 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800523e:	f7fd fc47 	bl	8002ad0 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d911      	bls.n	8005270 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	d00a      	beq.n	8005270 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e01c      	b.n	80052aa <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d1df      	bne.n	800523e <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	715a      	strb	r2, [r3, #5]
 8005296:	e004      	b.n	80052a2 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2204      	movs	r2, #4
 800529c:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	711a      	strb	r2, [r3, #4]

  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2210      	movs	r2, #16
 80052d4:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80052d6:	2301      	movs	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e01f      	b.n	800531c <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01a      	beq.n	800531c <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	e00c      	b.n	800531c <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0208 	bic.w	r2, r2, #8
 800531a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10b      	bne.n	800533a <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2204      	movs	r2, #4
 8005326:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f837 	bl	800539c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8005336:	605a      	str	r2, [r3, #4]

    return;
 8005338:	e022      	b.n	8005380 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01d      	beq.n	8005380 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0208 	bic.w	r2, r2, #8
 8005352:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	795b      	ldrb	r3, [r3, #5]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b04      	cmp	r3, #4
 8005366:	d00b      	beq.n	8005380 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f803 	bl	8005386 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e049      	b.n	8005456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd f938 	bl	800264c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 f968 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e047      	b.n	8005508 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a23      	ldr	r2, [pc, #140]	; (8005514 <HAL_TIM_Base_Start+0xb4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005492:	d018      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <HAL_TIM_Base_Start+0xb8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <HAL_TIM_Base_Start+0xbc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_TIM_Base_Start+0xc0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_TIM_Base_Start+0xc4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIM_Base_Start+0x66>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <HAL_TIM_Base_Start+0xc8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d115      	bne.n	80054f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b17      	ldr	r3, [pc, #92]	; (800552c <HAL_TIM_Base_Start+0xcc>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2b06      	cmp	r3, #6
 80054d6:	d015      	beq.n	8005504 <HAL_TIM_Base_Start+0xa4>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054de:	d011      	beq.n	8005504 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	e008      	b.n	8005504 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40000400 	.word	0x40000400
 800551c:	40000800 	.word	0x40000800
 8005520:	40000c00 	.word	0x40000c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40014000 	.word	0x40014000
 800552c:	00010007 	.word	0x00010007

08005530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0b6      	b.n	80056ba <HAL_TIM_ConfigClockSource+0x18a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005588:	d03e      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0xd8>
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	f200 8087 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005596:	f000 8086 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x176>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d87f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055a0:	2b70      	cmp	r3, #112	; 0x70
 80055a2:	d01a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0xaa>
 80055a4:	2b70      	cmp	r3, #112	; 0x70
 80055a6:	d87b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055a8:	2b60      	cmp	r3, #96	; 0x60
 80055aa:	d050      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x11e>
 80055ac:	2b60      	cmp	r3, #96	; 0x60
 80055ae:	d877      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055b0:	2b50      	cmp	r3, #80	; 0x50
 80055b2:	d03c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xfe>
 80055b4:	2b50      	cmp	r3, #80	; 0x50
 80055b6:	d873      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d058      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x13e>
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d86f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055c0:	2b30      	cmp	r3, #48	; 0x30
 80055c2:	d064      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055c4:	2b30      	cmp	r3, #48	; 0x30
 80055c6:	d86b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d060      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d867      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d05a      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055d8:	e062      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	f000 f97f 	bl	80058ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	609a      	str	r2, [r3, #8]
      break;
 8005606:	e04f      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005618:	f000 f968 	bl	80058ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562a:	609a      	str	r2, [r3, #8]
      break;
 800562c:	e03c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563a:	461a      	mov	r2, r3
 800563c:	f000 f8dc 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2150      	movs	r1, #80	; 0x50
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f935 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800564c:	e02c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565a:	461a      	mov	r2, r3
 800565c:	f000 f8fb 	bl	8005856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2160      	movs	r1, #96	; 0x60
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f925 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800566c:	e01c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	461a      	mov	r2, r3
 800567c:	f000 f8bc 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2140      	movs	r1, #64	; 0x40
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f915 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800568c:	e00c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f000 f90c 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800569e:	e003      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e000      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a40      	ldr	r2, [pc, #256]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d013      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e2:	d00f      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a3d      	ldr	r2, [pc, #244]	; (80057dc <TIM_Base_SetConfig+0x118>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00b      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <TIM_Base_SetConfig+0x11c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3b      	ldr	r2, [pc, #236]	; (80057e4 <TIM_Base_SetConfig+0x120>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d003      	beq.n	8005704 <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3a      	ldr	r2, [pc, #232]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d108      	bne.n	8005716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2f      	ldr	r2, [pc, #188]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <TIM_Base_SetConfig+0x118>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <TIM_Base_SetConfig+0x11c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	; (80057e4 <TIM_Base_SetConfig+0x120>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a28      	ldr	r2, [pc, #160]	; (80057ec <TIM_Base_SetConfig+0x128>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a27      	ldr	r2, [pc, #156]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a26      	ldr	r2, [pc, #152]	; (80057f4 <TIM_Base_SetConfig+0x130>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <TIM_Base_SetConfig+0x114>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <TIM_Base_SetConfig+0x124>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a11      	ldr	r2, [pc, #68]	; (80057ec <TIM_Base_SetConfig+0x128>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a10      	ldr	r2, [pc, #64]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a0f      	ldr	r2, [pc, #60]	; (80057f4 <TIM_Base_SetConfig+0x130>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0210 	bic.w	r2, r3, #16
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005880:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005892:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e068      	b.n	8005a16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2e      	ldr	r2, [pc, #184]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d108      	bne.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800597e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01d      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d018      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00e      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d004      	beq.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d10c      	bne.n	8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40013400 	.word	0x40013400
 8005a2c:	40000400 	.word	0x40000400
 8005a30:	40000800 	.word	0x40000800
 8005a34:	40000c00 	.word	0x40000c00
 8005a38:	40014000 	.word	0x40014000

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e040      	b.n	8005ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc fe26 	bl	80026b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	; 0x24
 8005a68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fc34 	bl	80062f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f979 	bl	8005d80 <UART_SetConfig>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e01b      	b.n	8005ad0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fcb3 	bl	8006434 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d178      	bne.n	8005be2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Transmit+0x24>
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e071      	b.n	8005be4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	; 0x21
 8005b0c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b0e:	f7fc ffdf 	bl	8002ad0 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2c:	d108      	bne.n	8005b40 <HAL_UART_Transmit+0x68>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e003      	b.n	8005b48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b48:	e030      	b.n	8005bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fd15 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e03c      	b.n	8005be4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	881a      	ldrh	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	3302      	adds	r3, #2
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e008      	b.n	8005b9a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	b292      	uxth	r2, r2
 8005b92:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	3301      	adds	r3, #1
 8005b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1c8      	bne.n	8005b4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2140      	movs	r1, #64	; 0x40
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fcde 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e005      	b.n	8005be4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e000      	b.n	8005be4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005be2:	2302      	movs	r3, #2
  }
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	f040 80b6 	bne.w	8005d74 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_UART_Receive+0x28>
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0ae      	b.n	8005d76 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc ff4f 	bl	8002ad0 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	88fa      	ldrh	r2, [r7, #6]
 8005c40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	d10e      	bne.n	8005c6c <HAL_UART_Receive+0x80>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <HAL_UART_Receive+0x76>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c60:	e02d      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	22ff      	movs	r2, #255	; 0xff
 8005c66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c6a:	e028      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <HAL_UART_Receive+0xa4>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_UART_Receive+0x9a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	22ff      	movs	r2, #255	; 0xff
 8005c80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c84:	e01b      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	227f      	movs	r2, #127	; 0x7f
 8005c8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c8e:	e016      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c98:	d10d      	bne.n	8005cb6 <HAL_UART_Receive+0xca>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d104      	bne.n	8005cac <HAL_UART_Receive+0xc0>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	227f      	movs	r2, #127	; 0x7f
 8005ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005caa:	e008      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	223f      	movs	r2, #63	; 0x3f
 8005cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cb4:	e003      	b.n	8005cbe <HAL_UART_Receive+0xd2>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cc4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d108      	bne.n	8005ce2 <HAL_UART_Receive+0xf6>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	61bb      	str	r3, [r7, #24]
 8005ce0:	e003      	b.n	8005cea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cea:	e037      	b.n	8005d5c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2120      	movs	r1, #32
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fc44 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e033      	b.n	8005d76 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10c      	bne.n	8005d2e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	8a7b      	ldrh	r3, [r7, #18]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3302      	adds	r3, #2
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e00d      	b.n	8005d4a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	8a7b      	ldrh	r3, [r7, #18]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1c1      	bne.n	8005cec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
 8005d72:	e000      	b.n	8005d76 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d84:	b08a      	sub	sp, #40	; 0x28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4ba4      	ldr	r3, [pc, #656]	; (8006040 <UART_SetConfig+0x2c0>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a99      	ldr	r2, [pc, #612]	; (8006044 <UART_SetConfig+0x2c4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de8:	4313      	orrs	r3, r2
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a90      	ldr	r2, [pc, #576]	; (8006048 <UART_SetConfig+0x2c8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d126      	bne.n	8005e58 <UART_SetConfig+0xd8>
 8005e0a:	4b90      	ldr	r3, [pc, #576]	; (800604c <UART_SetConfig+0x2cc>)
 8005e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d81b      	bhi.n	8005e50 <UART_SetConfig+0xd0>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0xa0>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e41 	.word	0x08005e41
 8005e28:	08005e39 	.word	0x08005e39
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	2301      	movs	r3, #1
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e36:	e116      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e112      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e10e      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e10a      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e106      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7c      	ldr	r2, [pc, #496]	; (8006050 <UART_SetConfig+0x2d0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d138      	bne.n	8005ed4 <UART_SetConfig+0x154>
 8005e62:	4b7a      	ldr	r3, [pc, #488]	; (800604c <UART_SetConfig+0x2cc>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f003 030c 	and.w	r3, r3, #12
 8005e6c:	2b0c      	cmp	r3, #12
 8005e6e:	d82d      	bhi.n	8005ecc <UART_SetConfig+0x14c>
 8005e70:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0xf8>)
 8005e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e76:	bf00      	nop
 8005e78:	08005ead 	.word	0x08005ead
 8005e7c:	08005ecd 	.word	0x08005ecd
 8005e80:	08005ecd 	.word	0x08005ecd
 8005e84:	08005ecd 	.word	0x08005ecd
 8005e88:	08005ebd 	.word	0x08005ebd
 8005e8c:	08005ecd 	.word	0x08005ecd
 8005e90:	08005ecd 	.word	0x08005ecd
 8005e94:	08005ecd 	.word	0x08005ecd
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	08005ecd 	.word	0x08005ecd
 8005ea0:	08005ecd 	.word	0x08005ecd
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ec5 	.word	0x08005ec5
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e0d8      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e0d4      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e0d0      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e0cc      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed2:	e0c8      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a5e      	ldr	r2, [pc, #376]	; (8006054 <UART_SetConfig+0x2d4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d125      	bne.n	8005f2a <UART_SetConfig+0x1aa>
 8005ede:	4b5b      	ldr	r3, [pc, #364]	; (800604c <UART_SetConfig+0x2cc>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ee8:	2b30      	cmp	r3, #48	; 0x30
 8005eea:	d016      	beq.n	8005f1a <UART_SetConfig+0x19a>
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d818      	bhi.n	8005f22 <UART_SetConfig+0x1a2>
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d00a      	beq.n	8005f0a <UART_SetConfig+0x18a>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d814      	bhi.n	8005f22 <UART_SetConfig+0x1a2>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <UART_SetConfig+0x182>
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d008      	beq.n	8005f12 <UART_SetConfig+0x192>
 8005f00:	e00f      	b.n	8005f22 <UART_SetConfig+0x1a2>
 8005f02:	2300      	movs	r3, #0
 8005f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f08:	e0ad      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f10:	e0a9      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f12:	2304      	movs	r3, #4
 8005f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f18:	e0a5      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f20:	e0a1      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f22:	2310      	movs	r3, #16
 8005f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f28:	e09d      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <UART_SetConfig+0x2d8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d125      	bne.n	8005f80 <UART_SetConfig+0x200>
 8005f34:	4b45      	ldr	r3, [pc, #276]	; (800604c <UART_SetConfig+0x2cc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005f40:	d016      	beq.n	8005f70 <UART_SetConfig+0x1f0>
 8005f42:	2bc0      	cmp	r3, #192	; 0xc0
 8005f44:	d818      	bhi.n	8005f78 <UART_SetConfig+0x1f8>
 8005f46:	2b80      	cmp	r3, #128	; 0x80
 8005f48:	d00a      	beq.n	8005f60 <UART_SetConfig+0x1e0>
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d814      	bhi.n	8005f78 <UART_SetConfig+0x1f8>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <UART_SetConfig+0x1d8>
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d008      	beq.n	8005f68 <UART_SetConfig+0x1e8>
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x1f8>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5e:	e082      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f66:	e07e      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e07a      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e076      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e072      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a35      	ldr	r2, [pc, #212]	; (800605c <UART_SetConfig+0x2dc>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d12a      	bne.n	8005fe0 <UART_SetConfig+0x260>
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <UART_SetConfig+0x2cc>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f98:	d01a      	beq.n	8005fd0 <UART_SetConfig+0x250>
 8005f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9e:	d81b      	bhi.n	8005fd8 <UART_SetConfig+0x258>
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa4:	d00c      	beq.n	8005fc0 <UART_SetConfig+0x240>
 8005fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005faa:	d815      	bhi.n	8005fd8 <UART_SetConfig+0x258>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <UART_SetConfig+0x238>
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb4:	d008      	beq.n	8005fc8 <UART_SetConfig+0x248>
 8005fb6:	e00f      	b.n	8005fd8 <UART_SetConfig+0x258>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e052      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e04e      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e04a      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e046      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e042      	b.n	8006066 <UART_SetConfig+0x2e6>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a17      	ldr	r2, [pc, #92]	; (8006044 <UART_SetConfig+0x2c4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d13a      	bne.n	8006060 <UART_SetConfig+0x2e0>
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <UART_SetConfig+0x2cc>)
 8005fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff8:	d01a      	beq.n	8006030 <UART_SetConfig+0x2b0>
 8005ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffe:	d81b      	bhi.n	8006038 <UART_SetConfig+0x2b8>
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006004:	d00c      	beq.n	8006020 <UART_SetConfig+0x2a0>
 8006006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600a:	d815      	bhi.n	8006038 <UART_SetConfig+0x2b8>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <UART_SetConfig+0x298>
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006014:	d008      	beq.n	8006028 <UART_SetConfig+0x2a8>
 8006016:	e00f      	b.n	8006038 <UART_SetConfig+0x2b8>
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601e:	e022      	b.n	8006066 <UART_SetConfig+0x2e6>
 8006020:	2302      	movs	r3, #2
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006026:	e01e      	b.n	8006066 <UART_SetConfig+0x2e6>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602e:	e01a      	b.n	8006066 <UART_SetConfig+0x2e6>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006036:	e016      	b.n	8006066 <UART_SetConfig+0x2e6>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603e:	e012      	b.n	8006066 <UART_SetConfig+0x2e6>
 8006040:	efff69f3 	.word	0xefff69f3
 8006044:	40008000 	.word	0x40008000
 8006048:	40013800 	.word	0x40013800
 800604c:	40021000 	.word	0x40021000
 8006050:	40004400 	.word	0x40004400
 8006054:	40004800 	.word	0x40004800
 8006058:	40004c00 	.word	0x40004c00
 800605c:	40005000 	.word	0x40005000
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a9f      	ldr	r2, [pc, #636]	; (80062e8 <UART_SetConfig+0x568>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d17a      	bne.n	8006166 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006074:	2b08      	cmp	r3, #8
 8006076:	d824      	bhi.n	80060c2 <UART_SetConfig+0x342>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <UART_SetConfig+0x300>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060a5 	.word	0x080060a5
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060b3 	.word	0x080060b3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060c3 	.word	0x080060c3
 800609c:	080060c3 	.word	0x080060c3
 80060a0:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a4:	f7fe fb10 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 80060a8:	61f8      	str	r0, [r7, #28]
        break;
 80060aa:	e010      	b.n	80060ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b8f      	ldr	r3, [pc, #572]	; (80062ec <UART_SetConfig+0x56c>)
 80060ae:	61fb      	str	r3, [r7, #28]
        break;
 80060b0:	e00d      	b.n	80060ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fe fa71 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80060b6:	61f8      	str	r0, [r7, #28]
        break;
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	61fb      	str	r3, [r7, #28]
        break;
 80060c0:	e005      	b.n	80060ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80fb 	beq.w	80062cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d305      	bcc.n	80060f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d903      	bls.n	80060fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060f8:	e0e8      	b.n	80062cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	2200      	movs	r2, #0
 80060fe:	461c      	mov	r4, r3
 8006100:	4615      	mov	r5, r2
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	022b      	lsls	r3, r5, #8
 800610c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006110:	0222      	lsls	r2, r4, #8
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6849      	ldr	r1, [r1, #4]
 8006116:	0849      	lsrs	r1, r1, #1
 8006118:	2000      	movs	r0, #0
 800611a:	4688      	mov	r8, r1
 800611c:	4681      	mov	r9, r0
 800611e:	eb12 0a08 	adds.w	sl, r2, r8
 8006122:	eb43 0b09 	adc.w	fp, r3, r9
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa fd56 	bl	8000be8 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614a:	d308      	bcc.n	800615e <UART_SetConfig+0x3de>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006152:	d204      	bcs.n	800615e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e0b6      	b.n	80062cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006164:	e0b2      	b.n	80062cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616e:	d15e      	bne.n	800622e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006174:	2b08      	cmp	r3, #8
 8006176:	d828      	bhi.n	80061ca <UART_SetConfig+0x44a>
 8006178:	a201      	add	r2, pc, #4	; (adr r2, 8006180 <UART_SetConfig+0x400>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061ad 	.word	0x080061ad
 8006188:	080061b5 	.word	0x080061b5
 800618c:	080061cb 	.word	0x080061cb
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061cb 	.word	0x080061cb
 8006198:	080061cb 	.word	0x080061cb
 800619c:	080061cb 	.word	0x080061cb
 80061a0:	080061c3 	.word	0x080061c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a4:	f7fe fa90 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 80061a8:	61f8      	str	r0, [r7, #28]
        break;
 80061aa:	e014      	b.n	80061d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ac:	f7fe faa2 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 80061b0:	61f8      	str	r0, [r7, #28]
        break;
 80061b2:	e010      	b.n	80061d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b4:	4b4d      	ldr	r3, [pc, #308]	; (80062ec <UART_SetConfig+0x56c>)
 80061b6:	61fb      	str	r3, [r7, #28]
        break;
 80061b8:	e00d      	b.n	80061d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ba:	f7fe f9ed 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80061be:	61f8      	str	r0, [r7, #28]
        break;
 80061c0:	e009      	b.n	80061d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	61fb      	str	r3, [r7, #28]
        break;
 80061c8:	e005      	b.n	80061d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d077      	beq.n	80062cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	005a      	lsls	r2, r3, #1
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	085b      	lsrs	r3, r3, #1
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b0f      	cmp	r3, #15
 80061f6:	d916      	bls.n	8006226 <UART_SetConfig+0x4a6>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fe:	d212      	bcs.n	8006226 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f023 030f 	bic.w	r3, r3, #15
 8006208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	b29b      	uxth	r3, r3
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	b29a      	uxth	r2, r3
 8006216:	8afb      	ldrh	r3, [r7, #22]
 8006218:	4313      	orrs	r3, r2
 800621a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	8afa      	ldrh	r2, [r7, #22]
 8006222:	60da      	str	r2, [r3, #12]
 8006224:	e052      	b.n	80062cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800622c:	e04e      	b.n	80062cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800622e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006232:	2b08      	cmp	r3, #8
 8006234:	d827      	bhi.n	8006286 <UART_SetConfig+0x506>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x4bc>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	08006287 	.word	0x08006287
 800624c:	08006277 	.word	0x08006277
 8006250:	08006287 	.word	0x08006287
 8006254:	08006287 	.word	0x08006287
 8006258:	08006287 	.word	0x08006287
 800625c:	0800627f 	.word	0x0800627f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe fa32 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8006264:	61f8      	str	r0, [r7, #28]
        break;
 8006266:	e014      	b.n	8006292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006268:	f7fe fa44 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 800626c:	61f8      	str	r0, [r7, #28]
        break;
 800626e:	e010      	b.n	8006292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <UART_SetConfig+0x56c>)
 8006272:	61fb      	str	r3, [r7, #28]
        break;
 8006274:	e00d      	b.n	8006292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006276:	f7fe f98f 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800627a:	61f8      	str	r0, [r7, #28]
        break;
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61fb      	str	r3, [r7, #28]
        break;
 8006284:	e005      	b.n	8006292 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006290:	bf00      	nop
    }

    if (pclk != 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d019      	beq.n	80062cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	085a      	lsrs	r2, r3, #1
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b0f      	cmp	r3, #15
 80062b0:	d909      	bls.n	80062c6 <UART_SetConfig+0x546>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d205      	bcs.n	80062c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60da      	str	r2, [r3, #12]
 80062c4:	e002      	b.n	80062cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	; 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062e6:	bf00      	nop
 80062e8:	40008000 	.word	0x40008000
 80062ec:	00f42400 	.word	0x00f42400

080062f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01a      	beq.n	8006406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ee:	d10a      	bne.n	8006406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  }
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b098      	sub	sp, #96	; 0x60
 8006438:	af02      	add	r7, sp, #8
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006444:	f7fc fb44 	bl	8002ad0 <HAL_GetTick>
 8006448:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0308 	and.w	r3, r3, #8
 8006454:	2b08      	cmp	r3, #8
 8006456:	d12e      	bne.n	80064b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f88c 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d021      	beq.n	80064b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006486:	653b      	str	r3, [r7, #80]	; 0x50
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e062      	b.n	800657c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d149      	bne.n	8006558 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f856 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03c      	beq.n	8006558 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	623b      	str	r3, [r7, #32]
   return(result);
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30
 80064fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e6      	bne.n	80064de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	64bb      	str	r3, [r7, #72]	; 0x48
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006530:	61fa      	str	r2, [r7, #28]
 8006532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	69b9      	ldr	r1, [r7, #24]
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	617b      	str	r3, [r7, #20]
   return(result);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e011      	b.n	800657c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3758      	adds	r7, #88	; 0x58
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	e049      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659c:	d045      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fc fa97 	bl	8002ad0 <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d302      	bcc.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e048      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d031      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b08      	cmp	r3, #8
 80065d2:	d110      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2208      	movs	r2, #8
 80065da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f838 	bl	8006652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2208      	movs	r2, #8
 80065e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e029      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006604:	d111      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800660e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 f81e 	bl	8006652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e00f      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4013      	ands	r3, r2
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	429a      	cmp	r2, r3
 8006638:	bf0c      	ite	eq
 800663a:	2301      	moveq	r3, #1
 800663c:	2300      	movne	r3, #0
 800663e:	b2db      	uxtb	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	429a      	cmp	r2, r3
 8006646:	d0a6      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006652:	b480      	push	{r7}
 8006654:	b095      	sub	sp, #84	; 0x54
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
 800667a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800667e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e6      	bne.n	800665a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3308      	adds	r3, #8
 8006692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	61fb      	str	r3, [r7, #28]
   return(result);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3308      	adds	r3, #8
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d118      	bne.n	80066fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	647b      	str	r3, [r7, #68]	; 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6979      	ldr	r1, [r7, #20]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	613b      	str	r3, [r7, #16]
   return(result);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800670e:	bf00      	nop
 8006710:	3754      	adds	r7, #84	; 0x54
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <__NVIC_SetPriority>:
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672c:	2b00      	cmp	r3, #0
 800672e:	db0a      	blt.n	8006746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	490c      	ldr	r1, [pc, #48]	; (8006768 <__NVIC_SetPriority+0x4c>)
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	0112      	lsls	r2, r2, #4
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	440b      	add	r3, r1
 8006740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006744:	e00a      	b.n	800675c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	4908      	ldr	r1, [pc, #32]	; (800676c <__NVIC_SetPriority+0x50>)
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	3b04      	subs	r3, #4
 8006754:	0112      	lsls	r2, r2, #4
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	440b      	add	r3, r1
 800675a:	761a      	strb	r2, [r3, #24]
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	e000e100 	.word	0xe000e100
 800676c:	e000ed00 	.word	0xe000ed00

08006770 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006774:	2100      	movs	r1, #0
 8006776:	f06f 0004 	mvn.w	r0, #4
 800677a:	f7ff ffcf 	bl	800671c <__NVIC_SetPriority>
#endif
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678a:	f3ef 8305 	mrs	r3, IPSR
 800678e:	603b      	str	r3, [r7, #0]
  return(result);
 8006790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006796:	f06f 0305 	mvn.w	r3, #5
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e00c      	b.n	80067b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800679e:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <osKernelInitialize+0x44>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d105      	bne.n	80067b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <osKernelInitialize+0x44>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	e002      	b.n	80067b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067b8:	687b      	ldr	r3, [r7, #4]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000fe4 	.word	0x20000fe4

080067cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d2:	f3ef 8305 	mrs	r3, IPSR
 80067d6:	603b      	str	r3, [r7, #0]
  return(result);
 80067d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80067de:	f06f 0305 	mvn.w	r3, #5
 80067e2:	607b      	str	r3, [r7, #4]
 80067e4:	e010      	b.n	8006808 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <osKernelStart+0x48>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d109      	bne.n	8006802 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067ee:	f7ff ffbf 	bl	8006770 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <osKernelStart+0x48>)
 80067f4:	2202      	movs	r2, #2
 80067f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067f8:	f001 fd7a 	bl	80082f0 <vTaskStartScheduler>
      stat = osOK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	607b      	str	r3, [r7, #4]
 8006800:	e002      	b.n	8006808 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006806:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006808:	687b      	ldr	r3, [r7, #4]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000fe4 	.word	0x20000fe4

08006818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af04      	add	r7, sp, #16
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006828:	f3ef 8305 	mrs	r3, IPSR
 800682c:	617b      	str	r3, [r7, #20]
  return(result);
 800682e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006830:	2b00      	cmp	r3, #0
 8006832:	d17e      	bne.n	8006932 <osThreadNew+0x11a>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d07b      	beq.n	8006932 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800683a:	2380      	movs	r3, #128	; 0x80
 800683c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800683e:	2318      	movs	r3, #24
 8006840:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006842:	2300      	movs	r3, #0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800684a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d045      	beq.n	80068de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <osThreadNew+0x48>
        name = attr->name;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d008      	beq.n	8006886 <osThreadNew+0x6e>
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	2b38      	cmp	r3, #56	; 0x38
 8006878:	d805      	bhi.n	8006886 <osThreadNew+0x6e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <osThreadNew+0x72>
        return (NULL);
 8006886:	2300      	movs	r3, #0
 8006888:	e054      	b.n	8006934 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	089b      	lsrs	r3, r3, #2
 8006898:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00e      	beq.n	80068c0 <osThreadNew+0xa8>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b5b      	cmp	r3, #91	; 0x5b
 80068a8:	d90a      	bls.n	80068c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <osThreadNew+0xa8>
        mem = 1;
 80068ba:	2301      	movs	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	e010      	b.n	80068e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10c      	bne.n	80068e2 <osThreadNew+0xca>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d108      	bne.n	80068e2 <osThreadNew+0xca>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <osThreadNew+0xca>
          mem = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e001      	b.n	80068e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d110      	bne.n	800690a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068f0:	9202      	str	r2, [sp, #8]
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f001 fb20 	bl	8007f44 <xTaskCreateStatic>
 8006904:	4603      	mov	r3, r0
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	e013      	b.n	8006932 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d110      	bne.n	8006932 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	b29a      	uxth	r2, r3
 8006914:	f107 0310 	add.w	r3, r7, #16
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f001 fb6b 	bl	8007ffe <xTaskCreate>
 8006928:	4603      	mov	r3, r0
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <osThreadNew+0x11a>
            hTask = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006932:	693b      	ldr	r3, [r7, #16]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006948:	f3ef 8305 	mrs	r3, IPSR
 800694c:	60bb      	str	r3, [r7, #8]
  return(result);
 800694e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006950:	2b00      	cmp	r3, #0
 8006952:	d174      	bne.n	8006a3e <osMutexNew+0x102>
    if (attr != NULL) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <osMutexNew+0x26>
      type = attr->attr_bits;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e001      	b.n	8006966 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <osMutexNew+0x3a>
      rmtx = 1U;
 8006970:	2301      	movs	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e001      	b.n	800697a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0308 	and.w	r3, r3, #8
 8006980:	2b00      	cmp	r3, #0
 8006982:	d15c      	bne.n	8006a3e <osMutexNew+0x102>
      mem = -1;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006988:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d015      	beq.n	80069bc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d006      	beq.n	80069a6 <osMutexNew+0x6a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b4f      	cmp	r3, #79	; 0x4f
 800699e:	d902      	bls.n	80069a6 <osMutexNew+0x6a>
          mem = 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e00c      	b.n	80069c0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d108      	bne.n	80069c0 <osMutexNew+0x84>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <osMutexNew+0x84>
            mem = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	e001      	b.n	80069c0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d112      	bne.n	80069ec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4619      	mov	r1, r3
 80069d2:	2004      	movs	r0, #4
 80069d4:	f000 fc69 	bl	80072aa <xQueueCreateMutexStatic>
 80069d8:	61f8      	str	r0, [r7, #28]
 80069da:	e016      	b.n	8006a0a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	4619      	mov	r1, r3
 80069e2:	2001      	movs	r0, #1
 80069e4:	f000 fc61 	bl	80072aa <xQueueCreateMutexStatic>
 80069e8:	61f8      	str	r0, [r7, #28]
 80069ea:	e00e      	b.n	8006a0a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80069f8:	2004      	movs	r0, #4
 80069fa:	f000 fc3e 	bl	800727a <xQueueCreateMutex>
 80069fe:	61f8      	str	r0, [r7, #28]
 8006a00:	e003      	b.n	8006a0a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006a02:	2001      	movs	r0, #1
 8006a04:	f000 fc39 	bl	800727a <xQueueCreateMutex>
 8006a08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00c      	beq.n	8006a2a <osMutexNew+0xee>
        if (attr != NULL) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <osMutexNew+0xe2>
          name = attr->name;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e001      	b.n	8006a22 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	69f8      	ldr	r0, [r7, #28]
 8006a26:	f001 fa2f 	bl	8007e88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <osMutexNew+0x102>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f023 0301 	bic.w	r3, r3, #1
 8006a58:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a66:	f3ef 8305 	mrs	r3, IPSR
 8006a6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a6c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006a72:	f06f 0305 	mvn.w	r3, #5
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e02c      	b.n	8006ad4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006a80:	f06f 0303 	mvn.w	r3, #3
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e025      	b.n	8006ad4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d011      	beq.n	8006ab2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f000 fc59 	bl	8007348 <xQueueTakeMutexRecursive>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d01b      	beq.n	8006ad4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006aa2:	f06f 0301 	mvn.w	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e014      	b.n	8006ad4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006aaa:	f06f 0302 	mvn.w	r3, #2
 8006aae:	617b      	str	r3, [r7, #20]
 8006ab0:	e010      	b.n	8006ad4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f000 fef7 	bl	80078a8 <xQueueSemaphoreTake>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d009      	beq.n	8006ad4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006ac6:	f06f 0301 	mvn.w	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e002      	b.n	8006ad4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ace:	f06f 0302 	mvn.w	r3, #2
 8006ad2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006ad4:	697b      	ldr	r3, [r7, #20]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006afa:	f3ef 8305 	mrs	r3, IPSR
 8006afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <osMutexRelease+0x30>
    stat = osErrorISR;
 8006b06:	f06f 0305 	mvn.w	r3, #5
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	e01f      	b.n	8006b4e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006b14:	f06f 0303 	mvn.w	r3, #3
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	e018      	b.n	8006b4e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d009      	beq.n	8006b36 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006b22:	6938      	ldr	r0, [r7, #16]
 8006b24:	f000 fbdc 	bl	80072e0 <xQueueGiveMutexRecursive>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d00f      	beq.n	8006b4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b2e:	f06f 0302 	mvn.w	r3, #2
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e00b      	b.n	8006b4e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006b36:	2300      	movs	r3, #0
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6938      	ldr	r0, [r7, #16]
 8006b3e:	f000 fc39 	bl	80073b4 <xQueueGenericSend>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d002      	beq.n	8006b4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b48:	f06f 0302 	mvn.w	r3, #2
 8006b4c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b4e:	697b      	ldr	r3, [r7, #20]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b68:	f3ef 8305 	mrs	r3, IPSR
 8006b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d15f      	bne.n	8006c34 <osMessageQueueNew+0xdc>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05c      	beq.n	8006c34 <osMessageQueueNew+0xdc>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d059      	beq.n	8006c34 <osMessageQueueNew+0xdc>
    mem = -1;
 8006b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d029      	beq.n	8006be0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <osMessageQueueNew+0x62>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b4f      	cmp	r3, #79	; 0x4f
 8006b9a:	d90e      	bls.n	8006bba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <osMessageQueueNew+0x62>
        mem = 1;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e014      	b.n	8006be4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d110      	bne.n	8006be4 <osMessageQueueNew+0x8c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10c      	bne.n	8006be4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d108      	bne.n	8006be4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <osMessageQueueNew+0x8c>
          mem = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e001      	b.n	8006be4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d10b      	bne.n	8006c02 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	9100      	str	r1, [sp, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fa4f 	bl	800709c <xQueueGenericCreateStatic>
 8006bfe:	61f8      	str	r0, [r7, #28]
 8006c00:	e008      	b.n	8006c14 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fabd 	bl	800718c <xQueueGenericCreate>
 8006c12:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e001      	b.n	8006c2c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	69f8      	ldr	r0, [r7, #28]
 8006c30:	f001 f92a 	bl	8007e88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c34:	69fb      	ldr	r3, [r7, #28]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c58:	f3ef 8305 	mrs	r3, IPSR
 8006c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d028      	beq.n	8006cb6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <osMessageQueuePut+0x36>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <osMessageQueuePut+0x36>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c76:	f06f 0303 	mvn.w	r3, #3
 8006c7a:	61fb      	str	r3, [r7, #28]
 8006c7c:	e038      	b.n	8006cf0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c82:	f107 0210 	add.w	r2, r7, #16
 8006c86:	2300      	movs	r3, #0
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	69b8      	ldr	r0, [r7, #24]
 8006c8c:	f000 fc90 	bl	80075b0 <xQueueGenericSendFromISR>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d003      	beq.n	8006c9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006c96:	f06f 0302 	mvn.w	r3, #2
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	e028      	b.n	8006cf0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d025      	beq.n	8006cf0 <osMessageQueuePut+0xb0>
 8006ca4:	4b15      	ldr	r3, [pc, #84]	; (8006cfc <osMessageQueuePut+0xbc>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	e01c      	b.n	8006cf0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <osMessageQueuePut+0x82>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006cc2:	f06f 0303 	mvn.w	r3, #3
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e012      	b.n	8006cf0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cca:	2300      	movs	r3, #0
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	69b8      	ldr	r0, [r7, #24]
 8006cd2:	f000 fb6f 	bl	80073b4 <xQueueGenericSend>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d009      	beq.n	8006cf0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006ce2:	f06f 0301 	mvn.w	r3, #1
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e002      	b.n	8006cf0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006cea:	f06f 0302 	mvn.w	r3, #2
 8006cee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cf0:	69fb      	ldr	r3, [r7, #28]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3720      	adds	r7, #32
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	e000ed04 	.word	0xe000ed04

08006d00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b088      	sub	sp, #32
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d16:	f3ef 8305 	mrs	r3, IPSR
 8006d1a:	617b      	str	r3, [r7, #20]
  return(result);
 8006d1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d028      	beq.n	8006d74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <osMessageQueueGet+0x34>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <osMessageQueueGet+0x34>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006d34:	f06f 0303 	mvn.w	r3, #3
 8006d38:	61fb      	str	r3, [r7, #28]
 8006d3a:	e037      	b.n	8006dac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d40:	f107 0310 	add.w	r3, r7, #16
 8006d44:	461a      	mov	r2, r3
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	69b8      	ldr	r0, [r7, #24]
 8006d4a:	f000 feb9 	bl	8007ac0 <xQueueReceiveFromISR>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d003      	beq.n	8006d5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006d54:	f06f 0302 	mvn.w	r3, #2
 8006d58:	61fb      	str	r3, [r7, #28]
 8006d5a:	e027      	b.n	8006dac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d024      	beq.n	8006dac <osMessageQueueGet+0xac>
 8006d62:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <osMessageQueueGet+0xb8>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	e01b      	b.n	8006dac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <osMessageQueueGet+0x80>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006d80:	f06f 0303 	mvn.w	r3, #3
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e011      	b.n	8006dac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	69b8      	ldr	r0, [r7, #24]
 8006d8e:	f000 fcab 	bl	80076e8 <xQueueReceive>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d009      	beq.n	8006dac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006d9e:	f06f 0301 	mvn.w	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
 8006da4:	e002      	b.n	8006dac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006da6:	f06f 0302 	mvn.w	r3, #2
 8006daa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006dac:	69fb      	ldr	r3, [r7, #28]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d102      	bne.n	8006dd4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]
 8006dd2:	e00e      	b.n	8006df2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dd4:	f3ef 8305 	mrs	r3, IPSR
 8006dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006dda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006de0:	6938      	ldr	r0, [r7, #16]
 8006de2:	f000 ff0b 	bl	8007bfc <uxQueueMessagesWaitingFromISR>
 8006de6:	6178      	str	r0, [r7, #20]
 8006de8:	e003      	b.n	8006df2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006dea:	6938      	ldr	r0, [r7, #16]
 8006dec:	f000 fee8 	bl	8007bc0 <uxQueueMessagesWaiting>
 8006df0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006df2:	697b      	ldr	r3, [r7, #20]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a07      	ldr	r2, [pc, #28]	; (8006e28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	4a06      	ldr	r2, [pc, #24]	; (8006e2c <vApplicationGetIdleTaskMemory+0x30>)
 8006e12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	601a      	str	r2, [r3, #0]
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000fe8 	.word	0x20000fe8
 8006e2c:	20001044 	.word	0x20001044

08006e30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a07      	ldr	r2, [pc, #28]	; (8006e5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006e40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <vApplicationGetTimerTaskMemory+0x30>)
 8006e46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e4e:	601a      	str	r2, [r3, #0]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	20001244 	.word	0x20001244
 8006e60:	200012a0 	.word	0x200012a0

08006e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f103 0208 	add.w	r2, r3, #8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f103 0208 	add.w	r2, r3, #8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f103 0208 	add.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f06:	b480      	push	{r7}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1c:	d103      	bne.n	8006f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e00c      	b.n	8006f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e002      	b.n	8006f34 <vListInsert+0x2e>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d2f6      	bcs.n	8006f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6892      	ldr	r2, [r2, #8]
 8006f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6852      	ldr	r2, [r2, #4]
 8006f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d103      	bne.n	8006fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	1e5a      	subs	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ff6:	f002 fc2d 	bl	8009854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007006:	fb01 f303 	mul.w	r3, r1, r3
 800700a:	441a      	add	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	3b01      	subs	r3, #1
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d114      	bne.n	8007076 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01a      	beq.n	800708a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3310      	adds	r3, #16
 8007058:	4618      	mov	r0, r3
 800705a:	f001 fbd3 	bl	8008804 <xTaskRemoveFromEventList>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <xQueueGenericReset+0xcc>)
 8007066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	e009      	b.n	800708a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3310      	adds	r3, #16
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff fef2 	bl	8006e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3324      	adds	r3, #36	; 0x24
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff feed 	bl	8006e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800708a:	f002 fc13 	bl	80098b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800708e:	2301      	movs	r3, #1
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	e000ed04 	.word	0xe000ed04

0800709c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	; 0x38
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10a      	bne.n	80070e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <xQueueGenericCreateStatic+0x52>
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <xQueueGenericCreateStatic+0x56>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <xQueueGenericCreateStatic+0x58>
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	623b      	str	r3, [r7, #32]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <xQueueGenericCreateStatic+0x7e>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <xQueueGenericCreateStatic+0x82>
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <xQueueGenericCreateStatic+0x84>
 800711e:	2300      	movs	r3, #0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	61fb      	str	r3, [r7, #28]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800713a:	2350      	movs	r3, #80	; 0x50
 800713c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b50      	cmp	r3, #80	; 0x50
 8007142:	d00a      	beq.n	800715a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	61bb      	str	r3, [r7, #24]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800715a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800716e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f83f 	bl	8007200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007184:	4618      	mov	r0, r3
 8007186:	3730      	adds	r7, #48	; 0x30
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	; 0x28
 8007190:	af02      	add	r7, sp, #8
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	fb02 f303 	mul.w	r3, r2, r3
 80071be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	3350      	adds	r3, #80	; 0x50
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 fc67 	bl	8009a98 <pvPortMalloc>
 80071ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d011      	beq.n	80071f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	3350      	adds	r3, #80	; 0x50
 80071da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f805 	bl	8007200 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071f6:	69bb      	ldr	r3, [r7, #24]
	}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e002      	b.n	8007222 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800722e:	2101      	movs	r1, #1
 8007230:	69b8      	ldr	r0, [r7, #24]
 8007232:	f7ff fecb 	bl	8006fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00e      	beq.n	8007272 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007266:	2300      	movs	r3, #0
 8007268:	2200      	movs	r2, #0
 800726a:	2100      	movs	r1, #0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8a1 	bl	80073b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	4603      	mov	r3, r0
 8007282:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	461a      	mov	r2, r3
 8007290:	6939      	ldr	r1, [r7, #16]
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f7ff ff7a 	bl	800718c <xQueueGenericCreate>
 8007298:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff ffd3 	bl	8007246 <prvInitialiseMutex>

		return xNewQueue;
 80072a0:	68fb      	ldr	r3, [r7, #12]
	}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af02      	add	r7, sp, #8
 80072b0:	4603      	mov	r3, r0
 80072b2:	6039      	str	r1, [r7, #0]
 80072b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	2300      	movs	r3, #0
 80072bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	6939      	ldr	r1, [r7, #16]
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f7ff fee7 	bl	800709c <xQueueGenericCreateStatic>
 80072ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff ffb8 	bl	8007246 <prvInitialiseMutex>

		return xNewQueue;
 80072d6:	68fb      	ldr	r3, [r7, #12]
	}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	689c      	ldr	r4, [r3, #8]
 800730c:	f001 fc38 	bl	8008b80 <xTaskGetCurrentTaskHandle>
 8007310:	4603      	mov	r3, r0
 8007312:	429c      	cmp	r4, r3
 8007314:	d111      	bne.n	800733a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	1e5a      	subs	r2, r3, #1
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	6938      	ldr	r0, [r7, #16]
 8007330:	f000 f840 	bl	80073b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007334:	2301      	movs	r3, #1
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e001      	b.n	800733e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800733e:	697b      	ldr	r3, [r7, #20]
	}
 8007340:	4618      	mov	r0, r3
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	bd90      	pop	{r4, r7, pc}

08007348 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	60fb      	str	r3, [r7, #12]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	689c      	ldr	r4, [r3, #8]
 8007376:	f001 fc03 	bl	8008b80 <xTaskGetCurrentTaskHandle>
 800737a:	4603      	mov	r3, r0
 800737c:	429c      	cmp	r4, r3
 800737e:	d107      	bne.n	8007390 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800738a:	2301      	movs	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	e00c      	b.n	80073aa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6938      	ldr	r0, [r7, #16]
 8007394:	f000 fa88 	bl	80078a8 <xQueueSemaphoreTake>
 8007398:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80073aa:	697b      	ldr	r3, [r7, #20]
	}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd90      	pop	{r4, r7, pc}

080073b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08e      	sub	sp, #56	; 0x38
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <xQueueGenericSend+0x32>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <xQueueGenericSend+0x40>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <xQueueGenericSend+0x44>
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <xQueueGenericSend+0x46>
 80073f8:	2300      	movs	r3, #0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <xQueueGenericSend+0x60>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d103      	bne.n	8007422 <xQueueGenericSend+0x6e>
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <xQueueGenericSend+0x72>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <xQueueGenericSend+0x74>
 8007426:	2300      	movs	r3, #0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xQueueGenericSend+0x8e>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007442:	f001 fbad 	bl	8008ba0 <xTaskGetSchedulerState>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <xQueueGenericSend+0x9e>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <xQueueGenericSend+0xa2>
 8007452:	2301      	movs	r3, #1
 8007454:	e000      	b.n	8007458 <xQueueGenericSend+0xa4>
 8007456:	2300      	movs	r3, #0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueGenericSend+0xbe>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	61fb      	str	r3, [r7, #28]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007472:	f002 f9ef 	bl	8009854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <xQueueGenericSend+0xd4>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d129      	bne.n	80074dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800748e:	f000 fbeb 	bl	8007c68 <prvCopyDataToQueue>
 8007492:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d010      	beq.n	80074be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	3324      	adds	r3, #36	; 0x24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 f9af 	bl	8008804 <xTaskRemoveFromEventList>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074ac:	4b3f      	ldr	r3, [pc, #252]	; (80075ac <xQueueGenericSend+0x1f8>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	e00a      	b.n	80074d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074c4:	4b39      	ldr	r3, [pc, #228]	; (80075ac <xQueueGenericSend+0x1f8>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074d4:	f002 f9ee 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 80074d8:	2301      	movs	r3, #1
 80074da:	e063      	b.n	80075a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074e2:	f002 f9e7 	bl	80098b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e05c      	b.n	80075a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f9e9 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074fe:	f002 f9d9 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007502:	f000 ff5b 	bl	80083bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007506:	f002 f9a5 	bl	8009854 <vPortEnterCritical>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007510:	b25b      	sxtb	r3, r3
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007516:	d103      	bne.n	8007520 <xQueueGenericSend+0x16c>
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800752c:	d103      	bne.n	8007536 <xQueueGenericSend+0x182>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007536:	f002 f9bd 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f9d8 	bl	80088f8 <xTaskCheckForTimeOut>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d124      	bne.n	8007598 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800754e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007550:	f000 fc82 	bl	8007e58 <prvIsQueueFull>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d018      	beq.n	800758c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	3310      	adds	r3, #16
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f8fe 	bl	8008764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800756a:	f000 fc0d 	bl	8007d88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800756e:	f000 ff33 	bl	80083d8 <xTaskResumeAll>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	f47f af7c 	bne.w	8007472 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <xQueueGenericSend+0x1f8>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	e772      	b.n	8007472 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800758c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758e:	f000 fbfb 	bl	8007d88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007592:	f000 ff21 	bl	80083d8 <xTaskResumeAll>
 8007596:	e76c      	b.n	8007472 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759a:	f000 fbf5 	bl	8007d88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800759e:	f000 ff1b 	bl	80083d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3738      	adds	r7, #56	; 0x38
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b090      	sub	sp, #64	; 0x40
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <xQueueGenericSendFromISR+0x3c>
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <xQueueGenericSendFromISR+0x40>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <xQueueGenericSendFromISR+0x42>
 80075f0:	2300      	movs	r3, #0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007608:	bf00      	nop
 800760a:	e7fe      	b.n	800760a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2b02      	cmp	r3, #2
 8007610:	d103      	bne.n	800761a <xQueueGenericSendFromISR+0x6a>
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <xQueueGenericSendFromISR+0x6e>
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <xQueueGenericSendFromISR+0x70>
 800761e:	2300      	movs	r3, #0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	623b      	str	r3, [r7, #32]
}
 8007636:	bf00      	nop
 8007638:	e7fe      	b.n	8007638 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800763a:	f002 f9ed 	bl	8009a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800763e:	f3ef 8211 	mrs	r2, BASEPRI
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	61fa      	str	r2, [r7, #28]
 8007654:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007656:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	429a      	cmp	r2, r3
 8007664:	d302      	bcc.n	800766c <xQueueGenericSendFromISR+0xbc>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d12f      	bne.n	80076cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007682:	f000 faf1 	bl	8007c68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007686:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800768e:	d112      	bne.n	80076b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	d016      	beq.n	80076c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769a:	3324      	adds	r3, #36	; 0x24
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f8b1 	bl	8008804 <xTaskRemoveFromEventList>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00e      	beq.n	80076c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e007      	b.n	80076c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	b25a      	sxtb	r2, r3
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076c6:	2301      	movs	r3, #1
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076ca:	e001      	b.n	80076d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3740      	adds	r7, #64	; 0x40
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08c      	sub	sp, #48	; 0x30
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xQueueReceive+0x30>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	623b      	str	r3, [r7, #32]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <xQueueReceive+0x3e>
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <xQueueReceive+0x42>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <xQueueReceive+0x44>
 800772a:	2300      	movs	r3, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xQueueReceive+0x5e>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	61fb      	str	r3, [r7, #28]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007746:	f001 fa2b 	bl	8008ba0 <xTaskGetSchedulerState>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <xQueueReceive+0x6e>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <xQueueReceive+0x72>
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <xQueueReceive+0x74>
 800775a:	2300      	movs	r3, #0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <xQueueReceive+0x8e>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61bb      	str	r3, [r7, #24]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007776:	f002 f86d 	bl	8009854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d01f      	beq.n	80077c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007786:	68b9      	ldr	r1, [r7, #8]
 8007788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800778a:	f000 fad7 	bl	8007d3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	1e5a      	subs	r2, r3, #1
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	3310      	adds	r3, #16
 80077a2:	4618      	mov	r0, r3
 80077a4:	f001 f82e 	bl	8008804 <xTaskRemoveFromEventList>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ae:	4b3d      	ldr	r3, [pc, #244]	; (80078a4 <xQueueReceive+0x1bc>)
 80077b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077be:	f002 f879 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e069      	b.n	800789a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077cc:	f002 f872 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e062      	b.n	800789a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077da:	f107 0310 	add.w	r3, r7, #16
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 f874 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077e8:	f002 f864 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077ec:	f000 fde6 	bl	80083bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077f0:	f002 f830 	bl	8009854 <vPortEnterCritical>
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077fa:	b25b      	sxtb	r3, r3
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007800:	d103      	bne.n	800780a <xQueueReceive+0x122>
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007810:	b25b      	sxtb	r3, r3
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007816:	d103      	bne.n	8007820 <xQueueReceive+0x138>
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007820:	f002 f848 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007824:	1d3a      	adds	r2, r7, #4
 8007826:	f107 0310 	add.w	r3, r7, #16
 800782a:	4611      	mov	r1, r2
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f863 	bl	80088f8 <xTaskCheckForTimeOut>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d123      	bne.n	8007880 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800783a:	f000 faf7 	bl	8007e2c <prvIsQueueEmpty>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d017      	beq.n	8007874 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	3324      	adds	r3, #36	; 0x24
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f000 ff89 	bl	8008764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007854:	f000 fa98 	bl	8007d88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007858:	f000 fdbe 	bl	80083d8 <xTaskResumeAll>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d189      	bne.n	8007776 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007862:	4b10      	ldr	r3, [pc, #64]	; (80078a4 <xQueueReceive+0x1bc>)
 8007864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	e780      	b.n	8007776 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007876:	f000 fa87 	bl	8007d88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800787a:	f000 fdad 	bl	80083d8 <xTaskResumeAll>
 800787e:	e77a      	b.n	8007776 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007882:	f000 fa81 	bl	8007d88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007886:	f000 fda7 	bl	80083d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800788a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788c:	f000 face 	bl	8007e2c <prvIsQueueEmpty>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	f43f af6f 	beq.w	8007776 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007898:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800789a:	4618      	mov	r0, r3
 800789c:	3730      	adds	r7, #48	; 0x30
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08e      	sub	sp, #56	; 0x38
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10a      	bne.n	80078da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	623b      	str	r3, [r7, #32]
}
 80078d6:	bf00      	nop
 80078d8:	e7fe      	b.n	80078d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	61fb      	str	r3, [r7, #28]
}
 80078f4:	bf00      	nop
 80078f6:	e7fe      	b.n	80078f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f8:	f001 f952 	bl	8008ba0 <xTaskGetSchedulerState>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <xQueueSemaphoreTake+0x60>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <xQueueSemaphoreTake+0x64>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <xQueueSemaphoreTake+0x66>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10a      	bne.n	8007928 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	61bb      	str	r3, [r7, #24]
}
 8007924:	bf00      	nop
 8007926:	e7fe      	b.n	8007926 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007928:	f001 ff94 	bl	8009854 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d024      	beq.n	8007982 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	1e5a      	subs	r2, r3, #1
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007948:	f001 faa0 	bl	8008e8c <pvTaskIncrementMutexHeldCount>
 800794c:	4602      	mov	r2, r0
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00f      	beq.n	800797a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	3310      	adds	r3, #16
 800795e:	4618      	mov	r0, r3
 8007960:	f000 ff50 	bl	8008804 <xTaskRemoveFromEventList>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800796a:	4b54      	ldr	r3, [pc, #336]	; (8007abc <xQueueSemaphoreTake+0x214>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800797a:	f001 ff9b 	bl	80098b4 <vPortExitCritical>
				return pdPASS;
 800797e:	2301      	movs	r3, #1
 8007980:	e097      	b.n	8007ab2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d111      	bne.n	80079ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	617b      	str	r3, [r7, #20]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079a4:	f001 ff86 	bl	80098b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e082      	b.n	8007ab2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 ff88 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079c0:	f001 ff78 	bl	80098b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079c4:	f000 fcfa 	bl	80083bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079c8:	f001 ff44 	bl	8009854 <vPortEnterCritical>
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079d2:	b25b      	sxtb	r3, r3
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d8:	d103      	bne.n	80079e2 <xQueueSemaphoreTake+0x13a>
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079e8:	b25b      	sxtb	r3, r3
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ee:	d103      	bne.n	80079f8 <xQueueSemaphoreTake+0x150>
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079f8:	f001 ff5c 	bl	80098b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079fc:	463a      	mov	r2, r7
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4611      	mov	r1, r2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 ff77 	bl	80088f8 <xTaskCheckForTimeOut>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d132      	bne.n	8007a76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a12:	f000 fa0b 	bl	8007e2c <prvIsQueueEmpty>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d026      	beq.n	8007a6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a24:	f001 ff16 	bl	8009854 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f001 f8d5 	bl	8008bdc <xTaskPriorityInherit>
 8007a32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a34:	f001 ff3e 	bl	80098b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	3324      	adds	r3, #36	; 0x24
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fe8f 	bl	8008764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a48:	f000 f99e 	bl	8007d88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a4c:	f000 fcc4 	bl	80083d8 <xTaskResumeAll>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f47f af68 	bne.w	8007928 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a58:	4b18      	ldr	r3, [pc, #96]	; (8007abc <xQueueSemaphoreTake+0x214>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	e75e      	b.n	8007928 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a6c:	f000 f98c 	bl	8007d88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a70:	f000 fcb2 	bl	80083d8 <xTaskResumeAll>
 8007a74:	e758      	b.n	8007928 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a78:	f000 f986 	bl	8007d88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a7c:	f000 fcac 	bl	80083d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a82:	f000 f9d3 	bl	8007e2c <prvIsQueueEmpty>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f43f af4d 	beq.w	8007928 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00d      	beq.n	8007ab0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007a94:	f001 fede 	bl	8009854 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a9a:	f000 f8cd 	bl	8007c38 <prvGetDisinheritPriorityAfterTimeout>
 8007a9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 f96e 	bl	8008d88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007aac:	f001 ff02 	bl	80098b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3738      	adds	r7, #56	; 0x38
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	623b      	str	r3, [r7, #32]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <xQueueReceiveFromISR+0x3a>
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <xQueueReceiveFromISR+0x3e>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <xQueueReceiveFromISR+0x40>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	61fb      	str	r3, [r7, #28]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b1a:	f001 ff7d 	bl	8009a18 <vPortValidateInterruptPriority>
	__asm volatile
 8007b1e:	f3ef 8211 	mrs	r2, BASEPRI
 8007b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b26:	f383 8811 	msr	BASEPRI, r3
 8007b2a:	f3bf 8f6f 	isb	sy
 8007b2e:	f3bf 8f4f 	dsb	sy
 8007b32:	61ba      	str	r2, [r7, #24]
 8007b34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d02f      	beq.n	8007ba6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b54:	f000 f8f2 	bl	8007d3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b68:	d112      	bne.n	8007b90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	3310      	adds	r3, #16
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fe44 	bl	8008804 <xTaskRemoveFromEventList>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	e007      	b.n	8007ba0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	3301      	adds	r3, #1
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	b25a      	sxtb	r2, r3
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba4:	e001      	b.n	8007baa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f383 8811 	msr	BASEPRI, r3
}
 8007bb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3738      	adds	r7, #56	; 0x38
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	60bb      	str	r3, [r7, #8]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007be4:	f001 fe36 	bl	8009854 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007bee:	f001 fe61 	bl	80098b4 <vPortExitCritical>

	return uxReturn;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10a      	bne.n	8007c24 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60fb      	str	r3, [r7, #12]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007c2a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d006      	beq.n	8007c56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e001      	b.n	8007c5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10d      	bne.n	8007ca2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d14d      	bne.n	8007d2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 f80a 	bl	8008cac <xTaskPriorityDisinherit>
 8007c98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	609a      	str	r2, [r3, #8]
 8007ca0:	e043      	b.n	8007d2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d119      	bne.n	8007cdc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6858      	ldr	r0, [r3, #4]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	f003 fe55 	bl	800b962 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	441a      	add	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d32b      	bcc.n	8007d2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	605a      	str	r2, [r3, #4]
 8007cda:	e026      	b.n	8007d2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68d8      	ldr	r0, [r3, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68b9      	ldr	r1, [r7, #8]
 8007ce8:	f003 fe3b 	bl	800b962 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	425b      	negs	r3, r3
 8007cf6:	441a      	add	r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d207      	bcs.n	8007d18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	425b      	negs	r3, r3
 8007d12:	441a      	add	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d105      	bne.n	8007d2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d32:	697b      	ldr	r3, [r7, #20]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d018      	beq.n	8007d80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	441a      	add	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d303      	bcc.n	8007d70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68d9      	ldr	r1, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6838      	ldr	r0, [r7, #0]
 8007d7c:	f003 fdf1 	bl	800b962 <memcpy>
	}
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d90:	f001 fd60 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d9c:	e011      	b.n	8007dc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d012      	beq.n	8007dcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3324      	adds	r3, #36	; 0x24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fd2a 	bl	8008804 <xTaskRemoveFromEventList>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007db6:	f000 fe01 	bl	80089bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dce9      	bgt.n	8007d9e <prvUnlockQueue+0x16>
 8007dca:	e000      	b.n	8007dce <prvUnlockQueue+0x46>
					break;
 8007dcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	22ff      	movs	r2, #255	; 0xff
 8007dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007dd6:	f001 fd6d 	bl	80098b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dda:	f001 fd3b 	bl	8009854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007de4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007de6:	e011      	b.n	8007e0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d012      	beq.n	8007e16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3310      	adds	r3, #16
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fd05 	bl	8008804 <xTaskRemoveFromEventList>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e00:	f000 fddc 	bl	80089bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dce9      	bgt.n	8007de8 <prvUnlockQueue+0x60>
 8007e14:	e000      	b.n	8007e18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	22ff      	movs	r2, #255	; 0xff
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e20:	f001 fd48 	bl	80098b4 <vPortExitCritical>
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e34:	f001 fd0e 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d102      	bne.n	8007e46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e001      	b.n	8007e4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e4a:	f001 fd33 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e60:	f001 fcf8 	bl	8009854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d102      	bne.n	8007e76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	e001      	b.n	8007e7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e7a:	f001 fd1b 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e014      	b.n	8007ec2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e98:	4a0f      	ldr	r2, [pc, #60]	; (8007ed8 <vQueueAddToRegistry+0x50>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ea4:	490c      	ldr	r1, [pc, #48]	; (8007ed8 <vQueueAddToRegistry+0x50>)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eae:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <vQueueAddToRegistry+0x50>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	4413      	add	r3, r2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007eba:	e006      	b.n	8007eca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b07      	cmp	r3, #7
 8007ec6:	d9e7      	bls.n	8007e98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	200016a0 	.word	0x200016a0

08007edc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eec:	f001 fcb2 	bl	8009854 <vPortEnterCritical>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007efc:	d103      	bne.n	8007f06 <vQueueWaitForMessageRestricted+0x2a>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0c:	b25b      	sxtb	r3, r3
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f12:	d103      	bne.n	8007f1c <vQueueWaitForMessageRestricted+0x40>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1c:	f001 fcca 	bl	80098b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d106      	bne.n	8007f36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	3324      	adds	r3, #36	; 0x24
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fc3b 	bl	80087ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f36:	6978      	ldr	r0, [r7, #20]
 8007f38:	f7ff ff26 	bl	8007d88 <prvUnlockQueue>
	}
 8007f3c:	bf00      	nop
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08e      	sub	sp, #56	; 0x38
 8007f48:	af04      	add	r7, sp, #16
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10a      	bne.n	8007f6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	623b      	str	r3, [r7, #32]
}
 8007f6a:	bf00      	nop
 8007f6c:	e7fe      	b.n	8007f6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10a      	bne.n	8007f8a <xTaskCreateStatic+0x46>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	61fb      	str	r3, [r7, #28]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f8a:	235c      	movs	r3, #92	; 0x5c
 8007f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	2b5c      	cmp	r3, #92	; 0x5c
 8007f92:	d00a      	beq.n	8007faa <xTaskCreateStatic+0x66>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	61bb      	str	r3, [r7, #24]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007faa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01e      	beq.n	8007ff0 <xTaskCreateStatic+0xac>
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d01b      	beq.n	8007ff0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	9302      	str	r3, [sp, #8]
 8007fd2:	f107 0314 	add.w	r3, r7, #20
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f850 	bl	8008088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fea:	f000 f8dd 	bl	80081a8 <prvAddNewTaskToReadyList>
 8007fee:	e001      	b.n	8007ff4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3728      	adds	r7, #40	; 0x28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b08c      	sub	sp, #48	; 0x30
 8008002:	af04      	add	r7, sp, #16
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	603b      	str	r3, [r7, #0]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fd40 	bl	8009a98 <pvPortMalloc>
 8008018:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00e      	beq.n	800803e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008020:	205c      	movs	r0, #92	; 0x5c
 8008022:	f001 fd39 	bl	8009a98 <pvPortMalloc>
 8008026:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	631a      	str	r2, [r3, #48]	; 0x30
 8008034:	e005      	b.n	8008042 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f001 fdfa 	bl	8009c30 <vPortFree>
 800803c:	e001      	b.n	8008042 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d017      	beq.n	8008078 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008050:	88fa      	ldrh	r2, [r7, #6]
 8008052:	2300      	movs	r3, #0
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 f80e 	bl	8008088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800806c:	69f8      	ldr	r0, [r7, #28]
 800806e:	f000 f89b 	bl	80081a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008072:	2301      	movs	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	e002      	b.n	800807e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800807c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800807e:	69bb      	ldr	r3, [r7, #24]
	}
 8008080:	4618      	mov	r0, r3
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	461a      	mov	r2, r3
 80080a0:	21a5      	movs	r1, #165	; 0xa5
 80080a2:	f003 fc15 	bl	800b8d0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080b0:	3b01      	subs	r3, #1
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	f023 0307 	bic.w	r3, r3, #7
 80080be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	617b      	str	r3, [r7, #20]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01f      	beq.n	8008126 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e012      	b.n	8008112 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	7819      	ldrb	r1, [r3, #0]
 80080f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	4413      	add	r3, r2
 80080fa:	3334      	adds	r3, #52	; 0x34
 80080fc:	460a      	mov	r2, r1
 80080fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	3301      	adds	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	2b0f      	cmp	r3, #15
 8008116:	d9e9      	bls.n	80080ec <prvInitialiseNewTask+0x64>
 8008118:	e000      	b.n	800811c <prvInitialiseNewTask+0x94>
			{
				break;
 800811a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008124:	e003      	b.n	800812e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	2b37      	cmp	r3, #55	; 0x37
 8008132:	d901      	bls.n	8008138 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008134:	2337      	movs	r3, #55	; 0x37
 8008136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008142:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	3304      	adds	r3, #4
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe fea8 	bl	8006ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	3318      	adds	r3, #24
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fea3 	bl	8006ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008176:	2200      	movs	r2, #0
 8008178:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	68f9      	ldr	r1, [r7, #12]
 8008186:	69b8      	ldr	r0, [r7, #24]
 8008188:	f001 fa36 	bl	80095f8 <pxPortInitialiseStack>
 800818c:	4602      	mov	r2, r0
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800819e:	bf00      	nop
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081b0:	f001 fb50 	bl	8009854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081b4:	4b2d      	ldr	r3, [pc, #180]	; (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3301      	adds	r3, #1
 80081ba:	4a2c      	ldr	r2, [pc, #176]	; (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081be:	4b2c      	ldr	r3, [pc, #176]	; (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081c6:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081cc:	4b27      	ldr	r3, [pc, #156]	; (800826c <prvAddNewTaskToReadyList+0xc4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d110      	bne.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081d4:	f000 fc16 	bl	8008a04 <prvInitialiseTaskLists>
 80081d8:	e00d      	b.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081da:	4b26      	ldr	r3, [pc, #152]	; (8008274 <prvAddNewTaskToReadyList+0xcc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081e2:	4b23      	ldr	r3, [pc, #140]	; (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d802      	bhi.n	80081f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081f0:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <prvAddNewTaskToReadyList+0xc8>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <prvAddNewTaskToReadyList+0xd0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <prvAddNewTaskToReadyList+0xd0>)
 80081fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008200:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <prvAddNewTaskToReadyList+0xd0>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820c:	4b1b      	ldr	r3, [pc, #108]	; (800827c <prvAddNewTaskToReadyList+0xd4>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	429a      	cmp	r2, r3
 8008212:	d903      	bls.n	800821c <prvAddNewTaskToReadyList+0x74>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	4a18      	ldr	r2, [pc, #96]	; (800827c <prvAddNewTaskToReadyList+0xd4>)
 800821a:	6013      	str	r3, [r2, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4a15      	ldr	r2, [pc, #84]	; (8008280 <prvAddNewTaskToReadyList+0xd8>)
 800822a:	441a      	add	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f7fe fe43 	bl	8006ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008238:	f001 fb3c 	bl	80098b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <prvAddNewTaskToReadyList+0xcc>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00e      	beq.n	8008262 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <prvAddNewTaskToReadyList+0xc8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	429a      	cmp	r2, r3
 8008250:	d207      	bcs.n	8008262 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008252:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <prvAddNewTaskToReadyList+0xdc>)
 8008254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20001bb4 	.word	0x20001bb4
 8008270:	200016e0 	.word	0x200016e0
 8008274:	20001bc0 	.word	0x20001bc0
 8008278:	20001bd0 	.word	0x20001bd0
 800827c:	20001bbc 	.word	0x20001bbc
 8008280:	200016e4 	.word	0x200016e4
 8008284:	e000ed04 	.word	0xe000ed04

08008288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d017      	beq.n	80082ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800829a:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <vTaskDelay+0x60>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <vTaskDelay+0x30>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082b8:	f000 f880 	bl	80083bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082bc:	2100      	movs	r1, #0
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fdf8 	bl	8008eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082c4:	f000 f888 	bl	80083d8 <xTaskResumeAll>
 80082c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <vTaskDelay+0x64>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20001bdc 	.word	0x20001bdc
 80082ec:	e000ed04 	.word	0xe000ed04

080082f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	; 0x28
 80082f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082fe:	463a      	mov	r2, r7
 8008300:	1d39      	adds	r1, r7, #4
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fd78 	bl	8006dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	9202      	str	r2, [sp, #8]
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	2300      	movs	r3, #0
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2300      	movs	r3, #0
 800831c:	460a      	mov	r2, r1
 800831e:	4921      	ldr	r1, [pc, #132]	; (80083a4 <vTaskStartScheduler+0xb4>)
 8008320:	4821      	ldr	r0, [pc, #132]	; (80083a8 <vTaskStartScheduler+0xb8>)
 8008322:	f7ff fe0f 	bl	8007f44 <xTaskCreateStatic>
 8008326:	4603      	mov	r3, r0
 8008328:	4a20      	ldr	r2, [pc, #128]	; (80083ac <vTaskStartScheduler+0xbc>)
 800832a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800832c:	4b1f      	ldr	r3, [pc, #124]	; (80083ac <vTaskStartScheduler+0xbc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008334:	2301      	movs	r3, #1
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e001      	b.n	800833e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d102      	bne.n	800834a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008344:	f000 fe0a 	bl	8008f5c <xTimerCreateTimerTask>
 8008348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d116      	bne.n	800837e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008364:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <vTaskStartScheduler+0xc0>)
 8008366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800836c:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <vTaskStartScheduler+0xc4>)
 800836e:	2201      	movs	r2, #1
 8008370:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008372:	4b11      	ldr	r3, [pc, #68]	; (80083b8 <vTaskStartScheduler+0xc8>)
 8008374:	2200      	movs	r2, #0
 8008376:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008378:	f001 f9ca 	bl	8009710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800837c:	e00e      	b.n	800839c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008384:	d10a      	bne.n	800839c <vTaskStartScheduler+0xac>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60fb      	str	r3, [r7, #12]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <vTaskStartScheduler+0xaa>
}
 800839c:	bf00      	nop
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	0800f600 	.word	0x0800f600
 80083a8:	080089d5 	.word	0x080089d5
 80083ac:	20001bd8 	.word	0x20001bd8
 80083b0:	20001bd4 	.word	0x20001bd4
 80083b4:	20001bc0 	.word	0x20001bc0
 80083b8:	20001bb8 	.word	0x20001bb8

080083bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <vTaskSuspendAll+0x18>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	4a03      	ldr	r2, [pc, #12]	; (80083d4 <vTaskSuspendAll+0x18>)
 80083c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083ca:	bf00      	nop
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	20001bdc 	.word	0x20001bdc

080083d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083e6:	4b42      	ldr	r3, [pc, #264]	; (80084f0 <xTaskResumeAll+0x118>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10a      	bne.n	8008404 <xTaskResumeAll+0x2c>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	603b      	str	r3, [r7, #0]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008404:	f001 fa26 	bl	8009854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008408:	4b39      	ldr	r3, [pc, #228]	; (80084f0 <xTaskResumeAll+0x118>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3b01      	subs	r3, #1
 800840e:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <xTaskResumeAll+0x118>)
 8008410:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008412:	4b37      	ldr	r3, [pc, #220]	; (80084f0 <xTaskResumeAll+0x118>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d162      	bne.n	80084e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800841a:	4b36      	ldr	r3, [pc, #216]	; (80084f4 <xTaskResumeAll+0x11c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d05e      	beq.n	80084e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008422:	e02f      	b.n	8008484 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008424:	4b34      	ldr	r3, [pc, #208]	; (80084f8 <xTaskResumeAll+0x120>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3318      	adds	r3, #24
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fda1 	bl	8006f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3304      	adds	r3, #4
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fd9c 	bl	8006f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	4b2d      	ldr	r3, [pc, #180]	; (80084fc <xTaskResumeAll+0x124>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d903      	bls.n	8008454 <xTaskResumeAll+0x7c>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <xTaskResumeAll+0x124>)
 8008452:	6013      	str	r3, [r2, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4a27      	ldr	r2, [pc, #156]	; (8008500 <xTaskResumeAll+0x128>)
 8008462:	441a      	add	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe fd27 	bl	8006ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4b23      	ldr	r3, [pc, #140]	; (8008504 <xTaskResumeAll+0x12c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847a:	429a      	cmp	r2, r3
 800847c:	d302      	bcc.n	8008484 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800847e:	4b22      	ldr	r3, [pc, #136]	; (8008508 <xTaskResumeAll+0x130>)
 8008480:	2201      	movs	r2, #1
 8008482:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008484:	4b1c      	ldr	r3, [pc, #112]	; (80084f8 <xTaskResumeAll+0x120>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1cb      	bne.n	8008424 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008492:	f000 fb55 	bl	8008b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <xTaskResumeAll+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d010      	beq.n	80084c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084a2:	f000 f847 	bl	8008534 <xTaskIncrementTick>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <xTaskResumeAll+0x130>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f1      	bne.n	80084a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <xTaskResumeAll+0x134>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <xTaskResumeAll+0x130>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d009      	beq.n	80084e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <xTaskResumeAll+0x138>)
 80084d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084e0:	f001 f9e8 	bl	80098b4 <vPortExitCritical>

	return xAlreadyYielded;
 80084e4:	68bb      	ldr	r3, [r7, #8]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20001bdc 	.word	0x20001bdc
 80084f4:	20001bb4 	.word	0x20001bb4
 80084f8:	20001b74 	.word	0x20001b74
 80084fc:	20001bbc 	.word	0x20001bbc
 8008500:	200016e4 	.word	0x200016e4
 8008504:	200016e0 	.word	0x200016e0
 8008508:	20001bc8 	.word	0x20001bc8
 800850c:	20001bc4 	.word	0x20001bc4
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800851a:	4b05      	ldr	r3, [pc, #20]	; (8008530 <xTaskGetTickCount+0x1c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008520:	687b      	ldr	r3, [r7, #4]
}
 8008522:	4618      	mov	r0, r3
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20001bb8 	.word	0x20001bb8

08008534 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800853e:	4b4f      	ldr	r3, [pc, #316]	; (800867c <xTaskIncrementTick+0x148>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f040 808f 	bne.w	8008666 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008548:	4b4d      	ldr	r3, [pc, #308]	; (8008680 <xTaskIncrementTick+0x14c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3301      	adds	r3, #1
 800854e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008550:	4a4b      	ldr	r2, [pc, #300]	; (8008680 <xTaskIncrementTick+0x14c>)
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d120      	bne.n	800859e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800855c:	4b49      	ldr	r3, [pc, #292]	; (8008684 <xTaskIncrementTick+0x150>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <xTaskIncrementTick+0x48>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	603b      	str	r3, [r7, #0]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <xTaskIncrementTick+0x46>
 800857c:	4b41      	ldr	r3, [pc, #260]	; (8008684 <xTaskIncrementTick+0x150>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <xTaskIncrementTick+0x154>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a3f      	ldr	r2, [pc, #252]	; (8008684 <xTaskIncrementTick+0x150>)
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	4a3f      	ldr	r2, [pc, #252]	; (8008688 <xTaskIncrementTick+0x154>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4b3e      	ldr	r3, [pc, #248]	; (800868c <xTaskIncrementTick+0x158>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a3d      	ldr	r2, [pc, #244]	; (800868c <xTaskIncrementTick+0x158>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	f000 fad1 	bl	8008b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800859e:	4b3c      	ldr	r3, [pc, #240]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d349      	bcc.n	800863c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a8:	4b36      	ldr	r3, [pc, #216]	; (8008684 <xTaskIncrementTick+0x150>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b2:	4b37      	ldr	r3, [pc, #220]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b8:	601a      	str	r2, [r3, #0]
					break;
 80085ba:	e03f      	b.n	800863c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085bc:	4b31      	ldr	r3, [pc, #196]	; (8008684 <xTaskIncrementTick+0x150>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d203      	bcs.n	80085dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085d4:	4a2e      	ldr	r2, [pc, #184]	; (8008690 <xTaskIncrementTick+0x15c>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085da:	e02f      	b.n	800863c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3304      	adds	r3, #4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fcc9 	bl	8006f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	3318      	adds	r3, #24
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fcc0 	bl	8006f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4b25      	ldr	r3, [pc, #148]	; (8008694 <xTaskIncrementTick+0x160>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d903      	bls.n	800860c <xTaskIncrementTick+0xd8>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	4a22      	ldr	r2, [pc, #136]	; (8008694 <xTaskIncrementTick+0x160>)
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4a1f      	ldr	r2, [pc, #124]	; (8008698 <xTaskIncrementTick+0x164>)
 800861a:	441a      	add	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	3304      	adds	r3, #4
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f7fe fc4b 	bl	8006ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	4b1b      	ldr	r3, [pc, #108]	; (800869c <xTaskIncrementTick+0x168>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	429a      	cmp	r2, r3
 8008634:	d3b8      	bcc.n	80085a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800863a:	e7b5      	b.n	80085a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800863c:	4b17      	ldr	r3, [pc, #92]	; (800869c <xTaskIncrementTick+0x168>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4915      	ldr	r1, [pc, #84]	; (8008698 <xTaskIncrementTick+0x164>)
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d901      	bls.n	8008658 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008658:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <xTaskIncrementTick+0x16c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d007      	beq.n	8008670 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008660:	2301      	movs	r3, #1
 8008662:	617b      	str	r3, [r7, #20]
 8008664:	e004      	b.n	8008670 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008666:	4b0f      	ldr	r3, [pc, #60]	; (80086a4 <xTaskIncrementTick+0x170>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	4a0d      	ldr	r2, [pc, #52]	; (80086a4 <xTaskIncrementTick+0x170>)
 800866e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008670:	697b      	ldr	r3, [r7, #20]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3718      	adds	r7, #24
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20001bdc 	.word	0x20001bdc
 8008680:	20001bb8 	.word	0x20001bb8
 8008684:	20001b6c 	.word	0x20001b6c
 8008688:	20001b70 	.word	0x20001b70
 800868c:	20001bcc 	.word	0x20001bcc
 8008690:	20001bd4 	.word	0x20001bd4
 8008694:	20001bbc 	.word	0x20001bbc
 8008698:	200016e4 	.word	0x200016e4
 800869c:	200016e0 	.word	0x200016e0
 80086a0:	20001bc8 	.word	0x20001bc8
 80086a4:	20001bc4 	.word	0x20001bc4

080086a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086ae:	4b28      	ldr	r3, [pc, #160]	; (8008750 <vTaskSwitchContext+0xa8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086b6:	4b27      	ldr	r3, [pc, #156]	; (8008754 <vTaskSwitchContext+0xac>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086bc:	e041      	b.n	8008742 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80086be:	4b25      	ldr	r3, [pc, #148]	; (8008754 <vTaskSwitchContext+0xac>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <vTaskSwitchContext+0xb0>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60fb      	str	r3, [r7, #12]
 80086ca:	e010      	b.n	80086ee <vTaskSwitchContext+0x46>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	607b      	str	r3, [r7, #4]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vTaskSwitchContext+0x3e>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	491b      	ldr	r1, [pc, #108]	; (800875c <vTaskSwitchContext+0xb4>)
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0e4      	beq.n	80086cc <vTaskSwitchContext+0x24>
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4a13      	ldr	r2, [pc, #76]	; (800875c <vTaskSwitchContext+0xb4>)
 800870e:	4413      	add	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	605a      	str	r2, [r3, #4]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	3308      	adds	r3, #8
 8008724:	429a      	cmp	r2, r3
 8008726:	d104      	bne.n	8008732 <vTaskSwitchContext+0x8a>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	605a      	str	r2, [r3, #4]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4a09      	ldr	r2, [pc, #36]	; (8008760 <vTaskSwitchContext+0xb8>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	4a06      	ldr	r2, [pc, #24]	; (8008758 <vTaskSwitchContext+0xb0>)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6013      	str	r3, [r2, #0]
}
 8008742:	bf00      	nop
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20001bdc 	.word	0x20001bdc
 8008754:	20001bc8 	.word	0x20001bc8
 8008758:	20001bbc 	.word	0x20001bbc
 800875c:	200016e4 	.word	0x200016e4
 8008760:	200016e0 	.word	0x200016e0

08008764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800878a:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <vTaskPlaceOnEventList+0x44>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3318      	adds	r3, #24
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fe fbb7 	bl	8006f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008798:	2101      	movs	r1, #1
 800879a:	6838      	ldr	r0, [r7, #0]
 800879c:	f000 fb8a 	bl	8008eb4 <prvAddCurrentTaskToDelayedList>
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	200016e0 	.word	0x200016e0

080087ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10a      	bne.n	80087d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <vTaskPlaceOnEventListRestricted+0x54>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3318      	adds	r3, #24
 80087da:	4619      	mov	r1, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7fe fb6e 	bl	8006ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80087e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	68b8      	ldr	r0, [r7, #8]
 80087f2:	f000 fb5f 	bl	8008eb4 <prvAddCurrentTaskToDelayedList>
	}
 80087f6:	bf00      	nop
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	200016e0 	.word	0x200016e0

08008804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10a      	bne.n	8008830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60fb      	str	r3, [r7, #12]
}
 800882c:	bf00      	nop
 800882e:	e7fe      	b.n	800882e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	3318      	adds	r3, #24
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fb9f 	bl	8006f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <xTaskRemoveFromEventList+0xb0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11d      	bne.n	800887e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	3304      	adds	r3, #4
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fb96 	bl	8006f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b19      	ldr	r3, [pc, #100]	; (80088b8 <xTaskRemoveFromEventList+0xb4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d903      	bls.n	8008860 <xTaskRemoveFromEventList+0x5c>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	4a16      	ldr	r2, [pc, #88]	; (80088b8 <xTaskRemoveFromEventList+0xb4>)
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4a13      	ldr	r2, [pc, #76]	; (80088bc <xTaskRemoveFromEventList+0xb8>)
 800886e:	441a      	add	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	3304      	adds	r3, #4
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	f7fe fb21 	bl	8006ebe <vListInsertEnd>
 800887c:	e005      	b.n	800888a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3318      	adds	r3, #24
 8008882:	4619      	mov	r1, r3
 8008884:	480e      	ldr	r0, [pc, #56]	; (80088c0 <xTaskRemoveFromEventList+0xbc>)
 8008886:	f7fe fb1a 	bl	8006ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <xTaskRemoveFromEventList+0xc0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	429a      	cmp	r2, r3
 8008896:	d905      	bls.n	80088a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800889c:	4b0a      	ldr	r3, [pc, #40]	; (80088c8 <xTaskRemoveFromEventList+0xc4>)
 800889e:	2201      	movs	r2, #1
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	e001      	b.n	80088a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088a8:	697b      	ldr	r3, [r7, #20]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20001bdc 	.word	0x20001bdc
 80088b8:	20001bbc 	.word	0x20001bbc
 80088bc:	200016e4 	.word	0x200016e4
 80088c0:	20001b74 	.word	0x20001b74
 80088c4:	200016e0 	.word	0x200016e0
 80088c8:	20001bc8 	.word	0x20001bc8

080088cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088d4:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <vTaskInternalSetTimeOutState+0x24>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <vTaskInternalSetTimeOutState+0x28>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	605a      	str	r2, [r3, #4]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20001bcc 	.word	0x20001bcc
 80088f4:	20001bb8 	.word	0x20001bb8

080088f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10a      	bne.n	800891e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	613b      	str	r3, [r7, #16]
}
 800891a:	bf00      	nop
 800891c:	e7fe      	b.n	800891c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	60fb      	str	r3, [r7, #12]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800893a:	f000 ff8b 	bl	8009854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800893e:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <xTaskCheckForTimeOut+0xbc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008956:	d102      	bne.n	800895e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e023      	b.n	80089a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <xTaskCheckForTimeOut+0xc0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d007      	beq.n	800897a <xTaskCheckForTimeOut+0x82>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	429a      	cmp	r2, r3
 8008972:	d302      	bcc.n	800897a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	61fb      	str	r3, [r7, #28]
 8008978:	e015      	b.n	80089a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	429a      	cmp	r2, r3
 8008982:	d20b      	bcs.n	800899c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	1ad2      	subs	r2, r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff ff9b 	bl	80088cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	e004      	b.n	80089a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089a6:	f000 ff85 	bl	80098b4 <vPortExitCritical>

	return xReturn;
 80089aa:	69fb      	ldr	r3, [r7, #28]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3720      	adds	r7, #32
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20001bb8 	.word	0x20001bb8
 80089b8:	20001bcc 	.word	0x20001bcc

080089bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089c0:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <vTaskMissedYield+0x14>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
}
 80089c6:	bf00      	nop
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	20001bc8 	.word	0x20001bc8

080089d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089dc:	f000 f852 	bl	8008a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <prvIdleTask+0x28>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d9f9      	bls.n	80089dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <prvIdleTask+0x2c>)
 80089ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089f8:	e7f0      	b.n	80089dc <prvIdleTask+0x8>
 80089fa:	bf00      	nop
 80089fc:	200016e4 	.word	0x200016e4
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]
 8008a0e:	e00c      	b.n	8008a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4613      	mov	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4a12      	ldr	r2, [pc, #72]	; (8008a64 <prvInitialiseTaskLists+0x60>)
 8008a1c:	4413      	add	r3, r2
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fa20 	bl	8006e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3301      	adds	r3, #1
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b37      	cmp	r3, #55	; 0x37
 8008a2e:	d9ef      	bls.n	8008a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a30:	480d      	ldr	r0, [pc, #52]	; (8008a68 <prvInitialiseTaskLists+0x64>)
 8008a32:	f7fe fa17 	bl	8006e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a36:	480d      	ldr	r0, [pc, #52]	; (8008a6c <prvInitialiseTaskLists+0x68>)
 8008a38:	f7fe fa14 	bl	8006e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a3c:	480c      	ldr	r0, [pc, #48]	; (8008a70 <prvInitialiseTaskLists+0x6c>)
 8008a3e:	f7fe fa11 	bl	8006e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a42:	480c      	ldr	r0, [pc, #48]	; (8008a74 <prvInitialiseTaskLists+0x70>)
 8008a44:	f7fe fa0e 	bl	8006e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a48:	480b      	ldr	r0, [pc, #44]	; (8008a78 <prvInitialiseTaskLists+0x74>)
 8008a4a:	f7fe fa0b 	bl	8006e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <prvInitialiseTaskLists+0x78>)
 8008a50:	4a05      	ldr	r2, [pc, #20]	; (8008a68 <prvInitialiseTaskLists+0x64>)
 8008a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <prvInitialiseTaskLists+0x7c>)
 8008a56:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <prvInitialiseTaskLists+0x68>)
 8008a58:	601a      	str	r2, [r3, #0]
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200016e4 	.word	0x200016e4
 8008a68:	20001b44 	.word	0x20001b44
 8008a6c:	20001b58 	.word	0x20001b58
 8008a70:	20001b74 	.word	0x20001b74
 8008a74:	20001b88 	.word	0x20001b88
 8008a78:	20001ba0 	.word	0x20001ba0
 8008a7c:	20001b6c 	.word	0x20001b6c
 8008a80:	20001b70 	.word	0x20001b70

08008a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a8a:	e019      	b.n	8008ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a8c:	f000 fee2 	bl	8009854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a90:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <prvCheckTasksWaitingTermination+0x50>)
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fa6b 	bl	8006f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <prvCheckTasksWaitingTermination+0x54>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	4a0b      	ldr	r2, [pc, #44]	; (8008ad8 <prvCheckTasksWaitingTermination+0x54>)
 8008aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aac:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <prvCheckTasksWaitingTermination+0x58>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	4a0a      	ldr	r2, [pc, #40]	; (8008adc <prvCheckTasksWaitingTermination+0x58>)
 8008ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ab6:	f000 fefd 	bl	80098b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f810 	bl	8008ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <prvCheckTasksWaitingTermination+0x58>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e1      	bne.n	8008a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20001b88 	.word	0x20001b88
 8008ad8:	20001bb4 	.word	0x20001bb4
 8008adc:	20001b9c 	.word	0x20001b9c

08008ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d108      	bne.n	8008b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 f89a 	bl	8009c30 <vPortFree>
				vPortFree( pxTCB );
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 f897 	bl	8009c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b02:	e018      	b.n	8008b36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d103      	bne.n	8008b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 f88e 	bl	8009c30 <vPortFree>
	}
 8008b14:	e00f      	b.n	8008b36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d00a      	beq.n	8008b36 <prvDeleteTCB+0x56>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	60fb      	str	r3, [r7, #12]
}
 8008b32:	bf00      	nop
 8008b34:	e7fe      	b.n	8008b34 <prvDeleteTCB+0x54>
	}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <prvResetNextTaskUnblockTime+0x38>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d104      	bne.n	8008b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <prvResetNextTaskUnblockTime+0x3c>)
 8008b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b58:	e008      	b.n	8008b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5a:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <prvResetNextTaskUnblockTime+0x38>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	4a04      	ldr	r2, [pc, #16]	; (8008b7c <prvResetNextTaskUnblockTime+0x3c>)
 8008b6a:	6013      	str	r3, [r2, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20001b6c 	.word	0x20001b6c
 8008b7c:	20001bd4 	.word	0x20001bd4

08008b80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b86:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <xTaskGetCurrentTaskHandle+0x1c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008b8c:	687b      	ldr	r3, [r7, #4]
	}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	200016e0 	.word	0x200016e0

08008ba0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <xTaskGetSchedulerState+0x34>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d102      	bne.n	8008bb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	607b      	str	r3, [r7, #4]
 8008bb2:	e008      	b.n	8008bc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb4:	4b08      	ldr	r3, [pc, #32]	; (8008bd8 <xTaskGetSchedulerState+0x38>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d102      	bne.n	8008bc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e001      	b.n	8008bc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bc6:	687b      	ldr	r3, [r7, #4]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20001bc0 	.word	0x20001bc0
 8008bd8:	20001bdc 	.word	0x20001bdc

08008bdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d051      	beq.n	8008c96 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4b2a      	ldr	r3, [pc, #168]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d241      	bcs.n	8008c84 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	db06      	blt.n	8008c16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c08:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6959      	ldr	r1, [r3, #20]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <xTaskPriorityInherit+0xc8>)
 8008c28:	4413      	add	r3, r2
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d122      	bne.n	8008c74 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f9a0 	bl	8006f78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c38:	4b19      	ldr	r3, [pc, #100]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <xTaskPriorityInherit+0xcc>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d903      	bls.n	8008c56 <xTaskPriorityInherit+0x7a>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <xTaskPriorityInherit+0xcc>)
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4a10      	ldr	r2, [pc, #64]	; (8008ca4 <xTaskPriorityInherit+0xc8>)
 8008c64:	441a      	add	r2, r3
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f7fe f926 	bl	8006ebe <vListInsertEnd>
 8008c72:	e004      	b.n	8008c7e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e008      	b.n	8008c96 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <xTaskPriorityInherit+0xc4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d201      	bcs.n	8008c96 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c92:	2301      	movs	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c96:	68fb      	ldr	r3, [r7, #12]
	}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	200016e0 	.word	0x200016e0
 8008ca4:	200016e4 	.word	0x200016e4
 8008ca8:	20001bbc 	.word	0x20001bbc

08008cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d056      	beq.n	8008d70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cc2:	4b2e      	ldr	r3, [pc, #184]	; (8008d7c <xTaskPriorityDisinherit+0xd0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d00a      	beq.n	8008ce2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	60fb      	str	r3, [r7, #12]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	60bb      	str	r3, [r7, #8]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d04:	1e5a      	subs	r2, r3, #1
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d02c      	beq.n	8008d70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d128      	bne.n	8008d70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe f928 	bl	8006f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4b0f      	ldr	r3, [pc, #60]	; (8008d80 <xTaskPriorityDisinherit+0xd4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d903      	bls.n	8008d50 <xTaskPriorityDisinherit+0xa4>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	4a0c      	ldr	r2, [pc, #48]	; (8008d80 <xTaskPriorityDisinherit+0xd4>)
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4a09      	ldr	r2, [pc, #36]	; (8008d84 <xTaskPriorityDisinherit+0xd8>)
 8008d5e:	441a      	add	r2, r3
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fe f8a9 	bl	8006ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d70:	697b      	ldr	r3, [r7, #20]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200016e0 	.word	0x200016e0
 8008d80:	20001bbc 	.word	0x20001bbc
 8008d84:	200016e4 	.word	0x200016e4

08008d88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d06a      	beq.n	8008e76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d902      	bls.n	8008dce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	61fb      	str	r3, [r7, #28]
 8008dcc:	e002      	b.n	8008dd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d04b      	beq.n	8008e76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d146      	bne.n	8008e76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69ba      	ldr	r2, [r7, #24]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d10a      	bne.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	db04      	blt.n	8008e26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	6959      	ldr	r1, [r3, #20]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4a13      	ldr	r2, [pc, #76]	; (8008e84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e36:	4413      	add	r3, r2
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d11c      	bne.n	8008e76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe f899 	bl	8006f78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d903      	bls.n	8008e5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	4a0c      	ldr	r2, [pc, #48]	; (8008e88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5e:	4613      	mov	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e68:	441a      	add	r2, r3
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4610      	mov	r0, r2
 8008e72:	f7fe f824 	bl	8006ebe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e76:	bf00      	nop
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	200016e0 	.word	0x200016e0
 8008e84:	200016e4 	.word	0x200016e4
 8008e88:	20001bbc 	.word	0x20001bbc

08008e8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e9e:	3201      	adds	r2, #1
 8008ea0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ea2:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
	}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	200016e0 	.word	0x200016e0

08008eb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec4:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe f854 	bl	8006f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed6:	d10a      	bne.n	8008eee <prvAddCurrentTaskToDelayedList+0x3a>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d007      	beq.n	8008eee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ede:	4b1a      	ldr	r3, [pc, #104]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	4819      	ldr	r0, [pc, #100]	; (8008f4c <prvAddCurrentTaskToDelayedList+0x98>)
 8008ee8:	f7fd ffe9 	bl	8006ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eec:	e026      	b.n	8008f3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d209      	bcs.n	8008f1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f06:	4b12      	ldr	r3, [pc, #72]	; (8008f50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b0f      	ldr	r3, [pc, #60]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fd fff7 	bl	8006f06 <vListInsert>
}
 8008f18:	e010      	b.n	8008f3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1a:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fd ffed 	bl	8006f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d202      	bcs.n	8008f3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f36:	4a08      	ldr	r2, [pc, #32]	; (8008f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6013      	str	r3, [r2, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	20001bb8 	.word	0x20001bb8
 8008f48:	200016e0 	.word	0x200016e0
 8008f4c:	20001ba0 	.word	0x20001ba0
 8008f50:	20001b70 	.word	0x20001b70
 8008f54:	20001b6c 	.word	0x20001b6c
 8008f58:	20001bd4 	.word	0x20001bd4

08008f5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08a      	sub	sp, #40	; 0x28
 8008f60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f66:	f000 fb07 	bl	8009578 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f6a:	4b1c      	ldr	r3, [pc, #112]	; (8008fdc <xTimerCreateTimerTask+0x80>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d021      	beq.n	8008fb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f7a:	1d3a      	adds	r2, r7, #4
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fd ff53 	bl	8006e30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	9202      	str	r2, [sp, #8]
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	2302      	movs	r3, #2
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	460a      	mov	r2, r1
 8008f9c:	4910      	ldr	r1, [pc, #64]	; (8008fe0 <xTimerCreateTimerTask+0x84>)
 8008f9e:	4811      	ldr	r0, [pc, #68]	; (8008fe4 <xTimerCreateTimerTask+0x88>)
 8008fa0:	f7fe ffd0 	bl	8007f44 <xTaskCreateStatic>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	4a10      	ldr	r2, [pc, #64]	; (8008fe8 <xTimerCreateTimerTask+0x8c>)
 8008fa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <xTimerCreateTimerTask+0x8c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	613b      	str	r3, [r7, #16]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fd2:	697b      	ldr	r3, [r7, #20]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20001c10 	.word	0x20001c10
 8008fe0:	0800f608 	.word	0x0800f608
 8008fe4:	08009121 	.word	0x08009121
 8008fe8:	20001c14 	.word	0x20001c14

08008fec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10a      	bne.n	800901a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	623b      	str	r3, [r7, #32]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800901a:	4b1a      	ldr	r3, [pc, #104]	; (8009084 <xTimerGenericCommand+0x98>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d02a      	beq.n	8009078 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b05      	cmp	r3, #5
 8009032:	dc18      	bgt.n	8009066 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009034:	f7ff fdb4 	bl	8008ba0 <xTaskGetSchedulerState>
 8009038:	4603      	mov	r3, r0
 800903a:	2b02      	cmp	r3, #2
 800903c:	d109      	bne.n	8009052 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800903e:	4b11      	ldr	r3, [pc, #68]	; (8009084 <xTimerGenericCommand+0x98>)
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	f107 0110 	add.w	r1, r7, #16
 8009046:	2300      	movs	r3, #0
 8009048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904a:	f7fe f9b3 	bl	80073b4 <xQueueGenericSend>
 800904e:	6278      	str	r0, [r7, #36]	; 0x24
 8009050:	e012      	b.n	8009078 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009052:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <xTimerGenericCommand+0x98>)
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f107 0110 	add.w	r1, r7, #16
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	f7fe f9a9 	bl	80073b4 <xQueueGenericSend>
 8009062:	6278      	str	r0, [r7, #36]	; 0x24
 8009064:	e008      	b.n	8009078 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <xTimerGenericCommand+0x98>)
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f107 0110 	add.w	r1, r7, #16
 800906e:	2300      	movs	r3, #0
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	f7fe fa9d 	bl	80075b0 <xQueueGenericSendFromISR>
 8009076:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800907a:	4618      	mov	r0, r3
 800907c:	3728      	adds	r7, #40	; 0x28
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20001c10 	.word	0x20001c10

08009088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af02      	add	r7, sp, #8
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009092:	4b22      	ldr	r3, [pc, #136]	; (800911c <prvProcessExpiredTimer+0x94>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	3304      	adds	r3, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fd ff69 	bl	8006f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ac:	f003 0304 	and.w	r3, r3, #4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d022      	beq.n	80090fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	18d1      	adds	r1, r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	6978      	ldr	r0, [r7, #20]
 80090c2:	f000 f8d1 	bl	8009268 <prvInsertTimerInActiveList>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01f      	beq.n	800910c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090cc:	2300      	movs	r3, #0
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2300      	movs	r3, #0
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	2100      	movs	r1, #0
 80090d6:	6978      	ldr	r0, [r7, #20]
 80090d8:	f7ff ff88 	bl	8008fec <xTimerGenericCommand>
 80090dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d113      	bne.n	800910c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	60fb      	str	r3, [r7, #12]
}
 80090f6:	bf00      	nop
 80090f8:	e7fe      	b.n	80090f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	6978      	ldr	r0, [r7, #20]
 8009112:	4798      	blx	r3
}
 8009114:	bf00      	nop
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20001c08 	.word	0x20001c08

08009120 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f000 f857 	bl	80091e0 <prvGetNextExpireTime>
 8009132:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	4619      	mov	r1, r3
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f803 	bl	8009144 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800913e:	f000 f8d5 	bl	80092ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009142:	e7f1      	b.n	8009128 <prvTimerTask+0x8>

08009144 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800914e:	f7ff f935 	bl	80083bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009152:	f107 0308 	add.w	r3, r7, #8
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f866 	bl	8009228 <prvSampleTimeNow>
 800915c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d130      	bne.n	80091c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10a      	bne.n	8009180 <prvProcessTimerOrBlockTask+0x3c>
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	429a      	cmp	r2, r3
 8009170:	d806      	bhi.n	8009180 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009172:	f7ff f931 	bl	80083d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff ff85 	bl	8009088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800917e:	e024      	b.n	80091ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d008      	beq.n	8009198 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009186:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <prvProcessTimerOrBlockTask+0x90>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <prvProcessTimerOrBlockTask+0x50>
 8009190:	2301      	movs	r3, #1
 8009192:	e000      	b.n	8009196 <prvProcessTimerOrBlockTask+0x52>
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009198:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <prvProcessTimerOrBlockTask+0x94>)
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	f7fe fe99 	bl	8007edc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091aa:	f7ff f915 	bl	80083d8 <xTaskResumeAll>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091b4:	4b09      	ldr	r3, [pc, #36]	; (80091dc <prvProcessTimerOrBlockTask+0x98>)
 80091b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	f3bf 8f6f 	isb	sy
}
 80091c4:	e001      	b.n	80091ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091c6:	f7ff f907 	bl	80083d8 <xTaskResumeAll>
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20001c0c 	.word	0x20001c0c
 80091d8:	20001c10 	.word	0x20001c10
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <prvGetNextExpireTime+0x44>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <prvGetNextExpireTime+0x16>
 80091f2:	2201      	movs	r2, #1
 80091f4:	e000      	b.n	80091f8 <prvGetNextExpireTime+0x18>
 80091f6:	2200      	movs	r2, #0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d105      	bne.n	8009210 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009204:	4b07      	ldr	r3, [pc, #28]	; (8009224 <prvGetNextExpireTime+0x44>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e001      	b.n	8009214 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009214:	68fb      	ldr	r3, [r7, #12]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	20001c08 	.word	0x20001c08

08009228 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009230:	f7ff f970 	bl	8008514 <xTaskGetTickCount>
 8009234:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <prvSampleTimeNow+0x3c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	429a      	cmp	r2, r3
 800923e:	d205      	bcs.n	800924c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009240:	f000 f936 	bl	80094b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	601a      	str	r2, [r3, #0]
 800924a:	e002      	b.n	8009252 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009252:	4a04      	ldr	r2, [pc, #16]	; (8009264 <prvSampleTimeNow+0x3c>)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009258:	68fb      	ldr	r3, [r7, #12]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20001c18 	.word	0x20001c18

08009268 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009276:	2300      	movs	r3, #0
 8009278:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d812      	bhi.n	80092b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	1ad2      	subs	r2, r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	429a      	cmp	r2, r3
 800929a:	d302      	bcc.n	80092a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e01b      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <prvInsertTimerInActiveList+0x7c>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f7fd fe2a 	bl	8006f06 <vListInsert>
 80092b2:	e012      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d206      	bcs.n	80092ca <prvInsertTimerInActiveList+0x62>
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d302      	bcc.n	80092ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092c4:	2301      	movs	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e007      	b.n	80092da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ca:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <prvInsertTimerInActiveList+0x80>)
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3304      	adds	r3, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	4610      	mov	r0, r2
 80092d6:	f7fd fe16 	bl	8006f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092da:	697b      	ldr	r3, [r7, #20]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20001c0c 	.word	0x20001c0c
 80092e8:	20001c08 	.word	0x20001c08

080092ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08e      	sub	sp, #56	; 0x38
 80092f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092f2:	e0ca      	b.n	800948a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da18      	bge.n	800932c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092fa:	1d3b      	adds	r3, r7, #4
 80092fc:	3304      	adds	r3, #4
 80092fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	61fb      	str	r3, [r7, #28]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009322:	6850      	ldr	r0, [r2, #4]
 8009324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009326:	6892      	ldr	r2, [r2, #8]
 8009328:	4611      	mov	r1, r2
 800932a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f2c0 80ab 	blt.w	800948a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	3304      	adds	r3, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd fe17 	bl	8006f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800934a:	463b      	mov	r3, r7
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff6b 	bl	8009228 <prvSampleTimeNow>
 8009352:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b09      	cmp	r3, #9
 8009358:	f200 8096 	bhi.w	8009488 <prvProcessReceivedCommands+0x19c>
 800935c:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <prvProcessReceivedCommands+0x78>)
 800935e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009362:	bf00      	nop
 8009364:	0800938d 	.word	0x0800938d
 8009368:	0800938d 	.word	0x0800938d
 800936c:	0800938d 	.word	0x0800938d
 8009370:	08009401 	.word	0x08009401
 8009374:	08009415 	.word	0x08009415
 8009378:	0800945f 	.word	0x0800945f
 800937c:	0800938d 	.word	0x0800938d
 8009380:	0800938d 	.word	0x0800938d
 8009384:	08009401 	.word	0x08009401
 8009388:	08009415 	.word	0x08009415
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009392:	f043 0301 	orr.w	r3, r3, #1
 8009396:	b2da      	uxtb	r2, r3
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	18d1      	adds	r1, r2, r3
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ac:	f7ff ff5c 	bl	8009268 <prvInsertTimerInActiveList>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d069      	beq.n	800948a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d05e      	beq.n	800948a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	441a      	add	r2, r3
 80093d4:	2300      	movs	r3, #0
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2300      	movs	r3, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f7ff fe05 	bl	8008fec <xTimerGenericCommand>
 80093e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d14f      	bne.n	800948a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	61bb      	str	r3, [r7, #24]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009406:	f023 0301 	bic.w	r3, r3, #1
 800940a:	b2da      	uxtb	r2, r3
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009412:	e03a      	b.n	800948a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	b2da      	uxtb	r2, r3
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10a      	bne.n	800944a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	617b      	str	r3, [r7, #20]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	699a      	ldr	r2, [r3, #24]
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	18d1      	adds	r1, r2, r3
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009458:	f7ff ff06 	bl	8009268 <prvInsertTimerInActiveList>
					break;
 800945c:	e015      	b.n	800948a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800946c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946e:	f000 fbdf 	bl	8009c30 <vPortFree>
 8009472:	e00a      	b.n	800948a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800947a:	f023 0301 	bic.w	r3, r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009486:	e000      	b.n	800948a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009488:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800948a:	4b08      	ldr	r3, [pc, #32]	; (80094ac <prvProcessReceivedCommands+0x1c0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	1d39      	adds	r1, r7, #4
 8009490:	2200      	movs	r2, #0
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe f928 	bl	80076e8 <xQueueReceive>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	f47f af2a 	bne.w	80092f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80094a0:	bf00      	nop
 80094a2:	bf00      	nop
 80094a4:	3730      	adds	r7, #48	; 0x30
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001c10 	.word	0x20001c10

080094b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094b6:	e048      	b.n	800954a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094b8:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <prvSwitchTimerLists+0xc0>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c2:	4b2b      	ldr	r3, [pc, #172]	; (8009570 <prvSwitchTimerLists+0xc0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3304      	adds	r3, #4
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fd fd51 	bl	8006f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d02e      	beq.n	800954a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	4413      	add	r3, r2
 80094f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d90e      	bls.n	800951c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800950a:	4b19      	ldr	r3, [pc, #100]	; (8009570 <prvSwitchTimerLists+0xc0>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3304      	adds	r3, #4
 8009512:	4619      	mov	r1, r3
 8009514:	4610      	mov	r0, r2
 8009516:	f7fd fcf6 	bl	8006f06 <vListInsert>
 800951a:	e016      	b.n	800954a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800951c:	2300      	movs	r3, #0
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	2300      	movs	r3, #0
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff fd60 	bl	8008fec <xTimerGenericCommand>
 800952c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	603b      	str	r3, [r7, #0]
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <prvSwitchTimerLists+0xc0>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1b1      	bne.n	80094b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <prvSwitchTimerLists+0xc0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800955a:	4b06      	ldr	r3, [pc, #24]	; (8009574 <prvSwitchTimerLists+0xc4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a04      	ldr	r2, [pc, #16]	; (8009570 <prvSwitchTimerLists+0xc0>)
 8009560:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009562:	4a04      	ldr	r2, [pc, #16]	; (8009574 <prvSwitchTimerLists+0xc4>)
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	6013      	str	r3, [r2, #0]
}
 8009568:	bf00      	nop
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20001c08 	.word	0x20001c08
 8009574:	20001c0c 	.word	0x20001c0c

08009578 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800957e:	f000 f969 	bl	8009854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009582:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d120      	bne.n	80095cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800958a:	4814      	ldr	r0, [pc, #80]	; (80095dc <prvCheckForValidListAndQueue+0x64>)
 800958c:	f7fd fc6a 	bl	8006e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009590:	4813      	ldr	r0, [pc, #76]	; (80095e0 <prvCheckForValidListAndQueue+0x68>)
 8009592:	f7fd fc67 	bl	8006e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009596:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <prvCheckForValidListAndQueue+0x6c>)
 8009598:	4a10      	ldr	r2, [pc, #64]	; (80095dc <prvCheckForValidListAndQueue+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <prvCheckForValidListAndQueue+0x70>)
 800959e:	4a10      	ldr	r2, [pc, #64]	; (80095e0 <prvCheckForValidListAndQueue+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095a2:	2300      	movs	r3, #0
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	4b11      	ldr	r3, [pc, #68]	; (80095ec <prvCheckForValidListAndQueue+0x74>)
 80095a8:	4a11      	ldr	r2, [pc, #68]	; (80095f0 <prvCheckForValidListAndQueue+0x78>)
 80095aa:	2110      	movs	r1, #16
 80095ac:	200a      	movs	r0, #10
 80095ae:	f7fd fd75 	bl	800709c <xQueueGenericCreateStatic>
 80095b2:	4603      	mov	r3, r0
 80095b4:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095b8:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d005      	beq.n	80095cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095c0:	4b05      	ldr	r3, [pc, #20]	; (80095d8 <prvCheckForValidListAndQueue+0x60>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	490b      	ldr	r1, [pc, #44]	; (80095f4 <prvCheckForValidListAndQueue+0x7c>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fc5e 	bl	8007e88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095cc:	f000 f972 	bl	80098b4 <vPortExitCritical>
}
 80095d0:	bf00      	nop
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20001c10 	.word	0x20001c10
 80095dc:	20001be0 	.word	0x20001be0
 80095e0:	20001bf4 	.word	0x20001bf4
 80095e4:	20001c08 	.word	0x20001c08
 80095e8:	20001c0c 	.word	0x20001c0c
 80095ec:	20001cbc 	.word	0x20001cbc
 80095f0:	20001c1c 	.word	0x20001c1c
 80095f4:	0800f610 	.word	0x0800f610

080095f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3b04      	subs	r3, #4
 8009608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3b04      	subs	r3, #4
 8009616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0201 	bic.w	r2, r3, #1
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	3b04      	subs	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009628:	4a0c      	ldr	r2, [pc, #48]	; (800965c <pxPortInitialiseStack+0x64>)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3b14      	subs	r3, #20
 8009632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3b04      	subs	r3, #4
 800963e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f06f 0202 	mvn.w	r2, #2
 8009646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3b20      	subs	r3, #32
 800964c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	08009661 	.word	0x08009661

08009660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009666:	2300      	movs	r3, #0
 8009668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <prvTaskExitError+0x54>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009672:	d00a      	beq.n	800968a <prvTaskExitError+0x2a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <prvTaskExitError+0x28>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	60bb      	str	r3, [r7, #8]
}
 800969c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800969e:	bf00      	nop
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0fc      	beq.n	80096a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000410 	.word	0x20000410
	...

080096c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <pxCurrentTCBConst2>)
 80096c2:	6819      	ldr	r1, [r3, #0]
 80096c4:	6808      	ldr	r0, [r1, #0]
 80096c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ca:	f380 8809 	msr	PSP, r0
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f04f 0000 	mov.w	r0, #0
 80096d6:	f380 8811 	msr	BASEPRI, r0
 80096da:	4770      	bx	lr
 80096dc:	f3af 8000 	nop.w

080096e0 <pxCurrentTCBConst2>:
 80096e0:	200016e0 	.word	0x200016e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop

080096e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096e8:	4808      	ldr	r0, [pc, #32]	; (800970c <prvPortStartFirstTask+0x24>)
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	6800      	ldr	r0, [r0, #0]
 80096ee:	f380 8808 	msr	MSP, r0
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8814 	msr	CONTROL, r0
 80096fa:	b662      	cpsie	i
 80096fc:	b661      	cpsie	f
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	df00      	svc	0
 8009708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800970a:	bf00      	nop
 800970c:	e000ed08 	.word	0xe000ed08

08009710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009716:	4b46      	ldr	r3, [pc, #280]	; (8009830 <xPortStartScheduler+0x120>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a46      	ldr	r2, [pc, #280]	; (8009834 <xPortStartScheduler+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10a      	bne.n	8009736 <xPortStartScheduler+0x26>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	613b      	str	r3, [r7, #16]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009736:	4b3e      	ldr	r3, [pc, #248]	; (8009830 <xPortStartScheduler+0x120>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a3f      	ldr	r2, [pc, #252]	; (8009838 <xPortStartScheduler+0x128>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d10a      	bne.n	8009756 <xPortStartScheduler+0x46>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	60fb      	str	r3, [r7, #12]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009756:	4b39      	ldr	r3, [pc, #228]	; (800983c <xPortStartScheduler+0x12c>)
 8009758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	22ff      	movs	r2, #255	; 0xff
 8009766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009778:	b2da      	uxtb	r2, r3
 800977a:	4b31      	ldr	r3, [pc, #196]	; (8009840 <xPortStartScheduler+0x130>)
 800977c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800977e:	4b31      	ldr	r3, [pc, #196]	; (8009844 <xPortStartScheduler+0x134>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009784:	e009      	b.n	800979a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009786:	4b2f      	ldr	r3, [pc, #188]	; (8009844 <xPortStartScheduler+0x134>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3b01      	subs	r3, #1
 800978c:	4a2d      	ldr	r2, [pc, #180]	; (8009844 <xPortStartScheduler+0x134>)
 800978e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	b2db      	uxtb	r3, r3
 8009798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800979a:	78fb      	ldrb	r3, [r7, #3]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a2:	2b80      	cmp	r3, #128	; 0x80
 80097a4:	d0ef      	beq.n	8009786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097a6:	4b27      	ldr	r3, [pc, #156]	; (8009844 <xPortStartScheduler+0x134>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f1c3 0307 	rsb	r3, r3, #7
 80097ae:	2b04      	cmp	r3, #4
 80097b0:	d00a      	beq.n	80097c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60bb      	str	r3, [r7, #8]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097c8:	4b1e      	ldr	r3, [pc, #120]	; (8009844 <xPortStartScheduler+0x134>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	4a1d      	ldr	r2, [pc, #116]	; (8009844 <xPortStartScheduler+0x134>)
 80097d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <xPortStartScheduler+0x134>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <xPortStartScheduler+0x134>)
 80097dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097e6:	4b18      	ldr	r3, [pc, #96]	; (8009848 <xPortStartScheduler+0x138>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a17      	ldr	r2, [pc, #92]	; (8009848 <xPortStartScheduler+0x138>)
 80097ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <xPortStartScheduler+0x138>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a14      	ldr	r2, [pc, #80]	; (8009848 <xPortStartScheduler+0x138>)
 80097f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097fe:	f000 f8dd 	bl	80099bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009802:	4b12      	ldr	r3, [pc, #72]	; (800984c <xPortStartScheduler+0x13c>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009808:	f000 f8fc 	bl	8009a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <xPortStartScheduler+0x140>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0f      	ldr	r2, [pc, #60]	; (8009850 <xPortStartScheduler+0x140>)
 8009812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009818:	f7ff ff66 	bl	80096e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800981c:	f7fe ff44 	bl	80086a8 <vTaskSwitchContext>
	prvTaskExitError();
 8009820:	f7ff ff1e 	bl	8009660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	e000ed00 	.word	0xe000ed00
 8009834:	410fc271 	.word	0x410fc271
 8009838:	410fc270 	.word	0x410fc270
 800983c:	e000e400 	.word	0xe000e400
 8009840:	20001d0c 	.word	0x20001d0c
 8009844:	20001d10 	.word	0x20001d10
 8009848:	e000ed20 	.word	0xe000ed20
 800984c:	20000410 	.word	0x20000410
 8009850:	e000ef34 	.word	0xe000ef34

08009854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
 800986a:	607b      	str	r3, [r7, #4]
}
 800986c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800986e:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <vPortEnterCritical+0x58>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	3301      	adds	r3, #1
 8009874:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <vPortEnterCritical+0x58>)
 8009876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009878:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <vPortEnterCritical+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d10f      	bne.n	80098a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortEnterCritical+0x5c>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	603b      	str	r3, [r7, #0]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <vPortEnterCritical+0x4a>
	}
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	20000410 	.word	0x20000410
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <vPortExitCritical+0x50>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10a      	bne.n	80098d8 <vPortExitCritical+0x24>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	607b      	str	r3, [r7, #4]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098d8:	4b0a      	ldr	r3, [pc, #40]	; (8009904 <vPortExitCritical+0x50>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3b01      	subs	r3, #1
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <vPortExitCritical+0x50>)
 80098e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d105      	bne.n	80098f6 <vPortExitCritical+0x42>
 80098ea:	2300      	movs	r3, #0
 80098ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f383 8811 	msr	BASEPRI, r3
}
 80098f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098f6:	bf00      	nop
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000410 	.word	0x20000410
	...

08009910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009910:	f3ef 8009 	mrs	r0, PSP
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4b15      	ldr	r3, [pc, #84]	; (8009970 <pxCurrentTCBConst>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	f01e 0f10 	tst.w	lr, #16
 8009920:	bf08      	it	eq
 8009922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009934:	f380 8811 	msr	BASEPRI, r0
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f7fe feb2 	bl	80086a8 <vTaskSwitchContext>
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f380 8811 	msr	BASEPRI, r0
 800994c:	bc09      	pop	{r0, r3}
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	6808      	ldr	r0, [r1, #0]
 8009952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009956:	f01e 0f10 	tst.w	lr, #16
 800995a:	bf08      	it	eq
 800995c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009960:	f380 8809 	msr	PSP, r0
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst>:
 8009970:	200016e0 	.word	0x200016e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	607b      	str	r3, [r7, #4]
}
 8009990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009992:	f7fe fdcf 	bl	8008534 <xTaskIncrementTick>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800999c:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <xPortSysTickHandler+0x40>)
 800999e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099b0:	bf00      	nop
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099c6:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <vPortSetupTimerInterrupt+0x38>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <vPortSetupTimerInterrupt+0x3c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <vPortSetupTimerInterrupt+0x40>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	099b      	lsrs	r3, r3, #6
 80099d8:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <vPortSetupTimerInterrupt+0x44>)
 80099da:	3b01      	subs	r3, #1
 80099dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099de:	4b04      	ldr	r3, [pc, #16]	; (80099f0 <vPortSetupTimerInterrupt+0x34>)
 80099e0:	2207      	movs	r2, #7
 80099e2:	601a      	str	r2, [r3, #0]
}
 80099e4:	bf00      	nop
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	e000e010 	.word	0xe000e010
 80099f4:	e000e018 	.word	0xe000e018
 80099f8:	20000404 	.word	0x20000404
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	e000e014 	.word	0xe000e014

08009a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a14 <vPortEnableVFP+0x10>
 8009a08:	6801      	ldr	r1, [r0, #0]
 8009a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a0e:	6001      	str	r1, [r0, #0]
 8009a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a12:	bf00      	nop
 8009a14:	e000ed88 	.word	0xe000ed88

08009a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b0f      	cmp	r3, #15
 8009a28:	d914      	bls.n	8009a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <vPortValidateInterruptPriority+0x70>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a34:	4b15      	ldr	r3, [pc, #84]	; (8009a8c <vPortValidateInterruptPriority+0x74>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	7afa      	ldrb	r2, [r7, #11]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d20a      	bcs.n	8009a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	607b      	str	r3, [r7, #4]
}
 8009a50:	bf00      	nop
 8009a52:	e7fe      	b.n	8009a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a54:	4b0e      	ldr	r3, [pc, #56]	; (8009a90 <vPortValidateInterruptPriority+0x78>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <vPortValidateInterruptPriority+0x7c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d90a      	bls.n	8009a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a68:	f383 8811 	msr	BASEPRI, r3
 8009a6c:	f3bf 8f6f 	isb	sy
 8009a70:	f3bf 8f4f 	dsb	sy
 8009a74:	603b      	str	r3, [r7, #0]
}
 8009a76:	bf00      	nop
 8009a78:	e7fe      	b.n	8009a78 <vPortValidateInterruptPriority+0x60>
	}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	e000e3f0 	.word	0xe000e3f0
 8009a8c:	20001d0c 	.word	0x20001d0c
 8009a90:	e000ed0c 	.word	0xe000ed0c
 8009a94:	20001d10 	.word	0x20001d10

08009a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b08a      	sub	sp, #40	; 0x28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009aa4:	f7fe fc8a 	bl	80083bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009aa8:	4b5b      	ldr	r3, [pc, #364]	; (8009c18 <pvPortMalloc+0x180>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d101      	bne.n	8009ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab0:	f000 f920 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ab4:	4b59      	ldr	r3, [pc, #356]	; (8009c1c <pvPortMalloc+0x184>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f040 8093 	bne.w	8009be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d01d      	beq.n	8009b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ac8:	2208      	movs	r2, #8
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4413      	add	r3, r2
 8009ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d014      	beq.n	8009b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f023 0307 	bic.w	r3, r3, #7
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <pvPortMalloc+0x6c>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	617b      	str	r3, [r7, #20]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d06e      	beq.n	8009be8 <pvPortMalloc+0x150>
 8009b0a:	4b45      	ldr	r3, [pc, #276]	; (8009c20 <pvPortMalloc+0x188>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d869      	bhi.n	8009be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b14:	4b43      	ldr	r3, [pc, #268]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b18:	4b42      	ldr	r3, [pc, #264]	; (8009c24 <pvPortMalloc+0x18c>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1e:	e004      	b.n	8009b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d903      	bls.n	8009b3c <pvPortMalloc+0xa4>
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f1      	bne.n	8009b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b3c:	4b36      	ldr	r3, [pc, #216]	; (8009c18 <pvPortMalloc+0x180>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d050      	beq.n	8009be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2208      	movs	r2, #8
 8009b4c:	4413      	add	r3, r2
 8009b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	2308      	movs	r3, #8
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d91f      	bls.n	8009ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0307 	and.w	r3, r3, #7
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <pvPortMalloc+0xf8>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	613b      	str	r3, [r7, #16]
}
 8009b8c:	bf00      	nop
 8009b8e:	e7fe      	b.n	8009b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1ad2      	subs	r2, r2, r3
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ba2:	69b8      	ldr	r0, [r7, #24]
 8009ba4:	f000 f908 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ba8:	4b1d      	ldr	r3, [pc, #116]	; (8009c20 <pvPortMalloc+0x188>)
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bb6:	4b1a      	ldr	r3, [pc, #104]	; (8009c20 <pvPortMalloc+0x188>)
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	4b1b      	ldr	r3, [pc, #108]	; (8009c28 <pvPortMalloc+0x190>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d203      	bcs.n	8009bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <pvPortMalloc+0x188>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <pvPortMalloc+0x190>)
 8009bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <pvPortMalloc+0x184>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	2200      	movs	r2, #0
 8009bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x194>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a11      	ldr	r2, [pc, #68]	; (8009c2c <pvPortMalloc+0x194>)
 8009be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009be8:	f7fe fbf6 	bl	80083d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00a      	beq.n	8009c0c <pvPortMalloc+0x174>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	60fb      	str	r3, [r7, #12]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <pvPortMalloc+0x172>
	return pvReturn;
 8009c0c:	69fb      	ldr	r3, [r7, #28]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3728      	adds	r7, #40	; 0x28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200028d4 	.word	0x200028d4
 8009c1c:	200028e8 	.word	0x200028e8
 8009c20:	200028d8 	.word	0x200028d8
 8009c24:	200028cc 	.word	0x200028cc
 8009c28:	200028dc 	.word	0x200028dc
 8009c2c:	200028e0 	.word	0x200028e0

08009c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04d      	beq.n	8009cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c42:	2308      	movs	r3, #8
 8009c44:	425b      	negs	r3, r3
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4413      	add	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4b24      	ldr	r3, [pc, #144]	; (8009ce8 <vPortFree+0xb8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4013      	ands	r3, r2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <vPortFree+0x44>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <vPortFree+0x62>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	f383 8811 	msr	BASEPRI, r3
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	60bb      	str	r3, [r7, #8]
}
 8009c8e:	bf00      	nop
 8009c90:	e7fe      	b.n	8009c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	685a      	ldr	r2, [r3, #4]
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <vPortFree+0xb8>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01e      	beq.n	8009cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11a      	bne.n	8009cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	4b0e      	ldr	r3, [pc, #56]	; (8009ce8 <vPortFree+0xb8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	43db      	mvns	r3, r3
 8009cb2:	401a      	ands	r2, r3
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cb8:	f7fe fb80 	bl	80083bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <vPortFree+0xbc>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	4a09      	ldr	r2, [pc, #36]	; (8009cec <vPortFree+0xbc>)
 8009cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cca:	6938      	ldr	r0, [r7, #16]
 8009ccc:	f000 f874 	bl	8009db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xc0>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xc0>)
 8009cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cda:	f7fe fb7d 	bl	80083d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200028e8 	.word	0x200028e8
 8009cec:	200028d8 	.word	0x200028d8
 8009cf0:	200028e4 	.word	0x200028e4

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20001d14 	.word	0x20001d14
 8009da4:	200028cc 	.word	0x200028cc
 8009da8:	200028d4 	.word	0x200028d4
 8009dac:	200028dc 	.word	0x200028dc
 8009db0:	200028d8 	.word	0x200028d8
 8009db4:	200028e8 	.word	0x200028e8

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	200028cc 	.word	0x200028cc
 8009e68:	200028d4 	.word	0x200028d4

08009e6c <atof>:
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	f001 bc0b 	b.w	800b688 <strtod>

08009e72 <atoi>:
 8009e72:	220a      	movs	r2, #10
 8009e74:	2100      	movs	r1, #0
 8009e76:	f001 bc95 	b.w	800b7a4 <strtol>
	...

08009e7c <exit>:
 8009e7c:	b508      	push	{r3, lr}
 8009e7e:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <exit+0x1c>)
 8009e80:	4604      	mov	r4, r0
 8009e82:	b113      	cbz	r3, 8009e8a <exit+0xe>
 8009e84:	2100      	movs	r1, #0
 8009e86:	f3af 8000 	nop.w
 8009e8a:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <exit+0x20>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	b103      	cbz	r3, 8009e92 <exit+0x16>
 8009e90:	4798      	blx	r3
 8009e92:	4620      	mov	r0, r4
 8009e94:	f7f8 fcc2 	bl	800281c <_exit>
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	20002a2c 	.word	0x20002a2c

08009ea0 <__cvt>:
 8009ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea4:	ec55 4b10 	vmov	r4, r5, d0
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4619      	mov	r1, r3
 8009eae:	462b      	mov	r3, r5
 8009eb0:	bfbb      	ittet	lt
 8009eb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009eb6:	461d      	movlt	r5, r3
 8009eb8:	2300      	movge	r3, #0
 8009eba:	232d      	movlt	r3, #45	; 0x2d
 8009ebc:	700b      	strb	r3, [r1, #0]
 8009ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	f023 0820 	bic.w	r8, r3, #32
 8009eca:	bfbc      	itt	lt
 8009ecc:	4622      	movlt	r2, r4
 8009ece:	4614      	movlt	r4, r2
 8009ed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ed4:	d005      	beq.n	8009ee2 <__cvt+0x42>
 8009ed6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eda:	d100      	bne.n	8009ede <__cvt+0x3e>
 8009edc:	3601      	adds	r6, #1
 8009ede:	2102      	movs	r1, #2
 8009ee0:	e000      	b.n	8009ee4 <__cvt+0x44>
 8009ee2:	2103      	movs	r1, #3
 8009ee4:	ab03      	add	r3, sp, #12
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	ab02      	add	r3, sp, #8
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	ec45 4b10 	vmov	d0, r4, r5
 8009ef0:	4653      	mov	r3, sl
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	f001 fdf4 	bl	800bae0 <_dtoa_r>
 8009ef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009efc:	4607      	mov	r7, r0
 8009efe:	d102      	bne.n	8009f06 <__cvt+0x66>
 8009f00:	f019 0f01 	tst.w	r9, #1
 8009f04:	d022      	beq.n	8009f4c <__cvt+0xac>
 8009f06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f0a:	eb07 0906 	add.w	r9, r7, r6
 8009f0e:	d110      	bne.n	8009f32 <__cvt+0x92>
 8009f10:	783b      	ldrb	r3, [r7, #0]
 8009f12:	2b30      	cmp	r3, #48	; 0x30
 8009f14:	d10a      	bne.n	8009f2c <__cvt+0x8c>
 8009f16:	2200      	movs	r2, #0
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f22:	b918      	cbnz	r0, 8009f2c <__cvt+0x8c>
 8009f24:	f1c6 0601 	rsb	r6, r6, #1
 8009f28:	f8ca 6000 	str.w	r6, [sl]
 8009f2c:	f8da 3000 	ldr.w	r3, [sl]
 8009f30:	4499      	add	r9, r3
 8009f32:	2200      	movs	r2, #0
 8009f34:	2300      	movs	r3, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f3e:	b108      	cbz	r0, 8009f44 <__cvt+0xa4>
 8009f40:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f44:	2230      	movs	r2, #48	; 0x30
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	454b      	cmp	r3, r9
 8009f4a:	d307      	bcc.n	8009f5c <__cvt+0xbc>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f50:	1bdb      	subs	r3, r3, r7
 8009f52:	4638      	mov	r0, r7
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	b004      	add	sp, #16
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5c:	1c59      	adds	r1, r3, #1
 8009f5e:	9103      	str	r1, [sp, #12]
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	e7f0      	b.n	8009f46 <__cvt+0xa6>

08009f64 <__exponent>:
 8009f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f66:	4603      	mov	r3, r0
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	bfb8      	it	lt
 8009f6c:	4249      	neglt	r1, r1
 8009f6e:	f803 2b02 	strb.w	r2, [r3], #2
 8009f72:	bfb4      	ite	lt
 8009f74:	222d      	movlt	r2, #45	; 0x2d
 8009f76:	222b      	movge	r2, #43	; 0x2b
 8009f78:	2909      	cmp	r1, #9
 8009f7a:	7042      	strb	r2, [r0, #1]
 8009f7c:	dd2a      	ble.n	8009fd4 <__exponent+0x70>
 8009f7e:	f10d 0207 	add.w	r2, sp, #7
 8009f82:	4617      	mov	r7, r2
 8009f84:	260a      	movs	r6, #10
 8009f86:	4694      	mov	ip, r2
 8009f88:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f8c:	fb06 1415 	mls	r4, r6, r5, r1
 8009f90:	3430      	adds	r4, #48	; 0x30
 8009f92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f96:	460c      	mov	r4, r1
 8009f98:	2c63      	cmp	r4, #99	; 0x63
 8009f9a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	dcf1      	bgt.n	8009f86 <__exponent+0x22>
 8009fa2:	3130      	adds	r1, #48	; 0x30
 8009fa4:	f1ac 0402 	sub.w	r4, ip, #2
 8009fa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fac:	1c41      	adds	r1, r0, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	42ba      	cmp	r2, r7
 8009fb2:	d30a      	bcc.n	8009fca <__exponent+0x66>
 8009fb4:	f10d 0209 	add.w	r2, sp, #9
 8009fb8:	eba2 020c 	sub.w	r2, r2, ip
 8009fbc:	42bc      	cmp	r4, r7
 8009fbe:	bf88      	it	hi
 8009fc0:	2200      	movhi	r2, #0
 8009fc2:	4413      	add	r3, r2
 8009fc4:	1a18      	subs	r0, r3, r0
 8009fc6:	b003      	add	sp, #12
 8009fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009fce:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009fd2:	e7ed      	b.n	8009fb0 <__exponent+0x4c>
 8009fd4:	2330      	movs	r3, #48	; 0x30
 8009fd6:	3130      	adds	r1, #48	; 0x30
 8009fd8:	7083      	strb	r3, [r0, #2]
 8009fda:	70c1      	strb	r1, [r0, #3]
 8009fdc:	1d03      	adds	r3, r0, #4
 8009fde:	e7f1      	b.n	8009fc4 <__exponent+0x60>

08009fe0 <_printf_float>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ed2d 8b02 	vpush	{d8}
 8009fe8:	b08d      	sub	sp, #52	; 0x34
 8009fea:	460c      	mov	r4, r1
 8009fec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	f001 fc73 	bl	800b8e0 <_localeconv_r>
 8009ffa:	f8d0 a000 	ldr.w	sl, [r0]
 8009ffe:	4650      	mov	r0, sl
 800a000:	f7f6 f936 	bl	8000270 <strlen>
 800a004:	2300      	movs	r3, #0
 800a006:	930a      	str	r3, [sp, #40]	; 0x28
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a014:	3307      	adds	r3, #7
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	f103 0208 	add.w	r2, r3, #8
 800a01e:	f8c8 2000 	str.w	r2, [r8]
 800a022:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a030:	ee08 0a10 	vmov	s16, r0
 800a034:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03c:	4b9e      	ldr	r3, [pc, #632]	; (800a2b8 <_printf_float+0x2d8>)
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a042:	f7f6 fd73 	bl	8000b2c <__aeabi_dcmpun>
 800a046:	bb88      	cbnz	r0, 800a0ac <_printf_float+0xcc>
 800a048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04c:	4b9a      	ldr	r3, [pc, #616]	; (800a2b8 <_printf_float+0x2d8>)
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a052:	f7f6 fd4d 	bl	8000af0 <__aeabi_dcmple>
 800a056:	bb48      	cbnz	r0, 800a0ac <_printf_float+0xcc>
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800a064:	b110      	cbz	r0, 800a06c <_printf_float+0x8c>
 800a066:	232d      	movs	r3, #45	; 0x2d
 800a068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a06c:	4a93      	ldr	r2, [pc, #588]	; (800a2bc <_printf_float+0x2dc>)
 800a06e:	4b94      	ldr	r3, [pc, #592]	; (800a2c0 <_printf_float+0x2e0>)
 800a070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a074:	bf94      	ite	ls
 800a076:	4690      	movls	r8, r2
 800a078:	4698      	movhi	r8, r3
 800a07a:	2303      	movs	r3, #3
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	f023 0304 	bic.w	r3, r3, #4
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	f04f 0900 	mov.w	r9, #0
 800a08a:	9700      	str	r7, [sp, #0]
 800a08c:	4633      	mov	r3, r6
 800a08e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 fa8a 	bl	800a5ac <_printf_common>
 800a098:	3001      	adds	r0, #1
 800a09a:	f040 8090 	bne.w	800a1be <_printf_float+0x1de>
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0a2:	b00d      	add	sp, #52	; 0x34
 800a0a4:	ecbd 8b02 	vpop	{d8}
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 800a0b8:	b140      	cbz	r0, 800a0cc <_printf_float+0xec>
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfbc      	itt	lt
 800a0c0:	232d      	movlt	r3, #45	; 0x2d
 800a0c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0c6:	4a7f      	ldr	r2, [pc, #508]	; (800a2c4 <_printf_float+0x2e4>)
 800a0c8:	4b7f      	ldr	r3, [pc, #508]	; (800a2c8 <_printf_float+0x2e8>)
 800a0ca:	e7d1      	b.n	800a070 <_printf_float+0x90>
 800a0cc:	6863      	ldr	r3, [r4, #4]
 800a0ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0d2:	9206      	str	r2, [sp, #24]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	d13f      	bne.n	800a158 <_printf_float+0x178>
 800a0d8:	2306      	movs	r3, #6
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	6861      	ldr	r1, [r4, #4]
 800a0e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9303      	str	r3, [sp, #12]
 800a0e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a0ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0ee:	ab09      	add	r3, sp, #36	; 0x24
 800a0f0:	ec49 8b10 	vmov	d0, r8, r9
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	6022      	str	r2, [r4, #0]
 800a0f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f7ff fecf 	bl	8009ea0 <__cvt>
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a106:	2b47      	cmp	r3, #71	; 0x47
 800a108:	4680      	mov	r8, r0
 800a10a:	d108      	bne.n	800a11e <_printf_float+0x13e>
 800a10c:	1cc8      	adds	r0, r1, #3
 800a10e:	db02      	blt.n	800a116 <_printf_float+0x136>
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	dd41      	ble.n	800a19a <_printf_float+0x1ba>
 800a116:	f1ab 0302 	sub.w	r3, fp, #2
 800a11a:	fa5f fb83 	uxtb.w	fp, r3
 800a11e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a122:	d820      	bhi.n	800a166 <_printf_float+0x186>
 800a124:	3901      	subs	r1, #1
 800a126:	465a      	mov	r2, fp
 800a128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a12c:	9109      	str	r1, [sp, #36]	; 0x24
 800a12e:	f7ff ff19 	bl	8009f64 <__exponent>
 800a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a134:	1813      	adds	r3, r2, r0
 800a136:	2a01      	cmp	r2, #1
 800a138:	4681      	mov	r9, r0
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	dc02      	bgt.n	800a144 <_printf_float+0x164>
 800a13e:	6822      	ldr	r2, [r4, #0]
 800a140:	07d2      	lsls	r2, r2, #31
 800a142:	d501      	bpl.n	800a148 <_printf_float+0x168>
 800a144:	3301      	adds	r3, #1
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d09c      	beq.n	800a08a <_printf_float+0xaa>
 800a150:	232d      	movs	r3, #45	; 0x2d
 800a152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a156:	e798      	b.n	800a08a <_printf_float+0xaa>
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	2a47      	cmp	r2, #71	; 0x47
 800a15c:	d1be      	bne.n	800a0dc <_printf_float+0xfc>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1bc      	bne.n	800a0dc <_printf_float+0xfc>
 800a162:	2301      	movs	r3, #1
 800a164:	e7b9      	b.n	800a0da <_printf_float+0xfa>
 800a166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a16a:	d118      	bne.n	800a19e <_printf_float+0x1be>
 800a16c:	2900      	cmp	r1, #0
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	dd0b      	ble.n	800a18a <_printf_float+0x1aa>
 800a172:	6121      	str	r1, [r4, #16]
 800a174:	b913      	cbnz	r3, 800a17c <_printf_float+0x19c>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	07d0      	lsls	r0, r2, #31
 800a17a:	d502      	bpl.n	800a182 <_printf_float+0x1a2>
 800a17c:	3301      	adds	r3, #1
 800a17e:	440b      	add	r3, r1
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	65a1      	str	r1, [r4, #88]	; 0x58
 800a184:	f04f 0900 	mov.w	r9, #0
 800a188:	e7de      	b.n	800a148 <_printf_float+0x168>
 800a18a:	b913      	cbnz	r3, 800a192 <_printf_float+0x1b2>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	07d2      	lsls	r2, r2, #31
 800a190:	d501      	bpl.n	800a196 <_printf_float+0x1b6>
 800a192:	3302      	adds	r3, #2
 800a194:	e7f4      	b.n	800a180 <_printf_float+0x1a0>
 800a196:	2301      	movs	r3, #1
 800a198:	e7f2      	b.n	800a180 <_printf_float+0x1a0>
 800a19a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	db05      	blt.n	800a1b0 <_printf_float+0x1d0>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	6121      	str	r1, [r4, #16]
 800a1a8:	07d8      	lsls	r0, r3, #31
 800a1aa:	d5ea      	bpl.n	800a182 <_printf_float+0x1a2>
 800a1ac:	1c4b      	adds	r3, r1, #1
 800a1ae:	e7e7      	b.n	800a180 <_printf_float+0x1a0>
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	bfd4      	ite	le
 800a1b4:	f1c1 0202 	rsble	r2, r1, #2
 800a1b8:	2201      	movgt	r2, #1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	e7e0      	b.n	800a180 <_printf_float+0x1a0>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	055a      	lsls	r2, r3, #21
 800a1c2:	d407      	bmi.n	800a1d4 <_printf_float+0x1f4>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d12c      	bne.n	800a22c <_printf_float+0x24c>
 800a1d2:	e764      	b.n	800a09e <_printf_float+0xbe>
 800a1d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1d8:	f240 80e0 	bls.w	800a39c <_printf_float+0x3bc>
 800a1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f7f6 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d034      	beq.n	800a256 <_printf_float+0x276>
 800a1ec:	4a37      	ldr	r2, [pc, #220]	; (800a2cc <_printf_float+0x2ec>)
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f af51 	beq.w	800a09e <_printf_float+0xbe>
 800a1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a200:	429a      	cmp	r2, r3
 800a202:	db02      	blt.n	800a20a <_printf_float+0x22a>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	07d8      	lsls	r0, r3, #31
 800a208:	d510      	bpl.n	800a22c <_printf_float+0x24c>
 800a20a:	ee18 3a10 	vmov	r3, s16
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af41 	beq.w	800a09e <_printf_float+0xbe>
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f104 091a 	add.w	r9, r4, #26
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	4543      	cmp	r3, r8
 800a22a:	dc09      	bgt.n	800a240 <_printf_float+0x260>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	079b      	lsls	r3, r3, #30
 800a230:	f100 8107 	bmi.w	800a442 <_printf_float+0x462>
 800a234:	68e0      	ldr	r0, [r4, #12]
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	4298      	cmp	r0, r3
 800a23a:	bfb8      	it	lt
 800a23c:	4618      	movlt	r0, r3
 800a23e:	e730      	b.n	800a0a2 <_printf_float+0xc2>
 800a240:	2301      	movs	r3, #1
 800a242:	464a      	mov	r2, r9
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	f43f af27 	beq.w	800a09e <_printf_float+0xbe>
 800a250:	f108 0801 	add.w	r8, r8, #1
 800a254:	e7e6      	b.n	800a224 <_printf_float+0x244>
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc39      	bgt.n	800a2d0 <_printf_float+0x2f0>
 800a25c:	4a1b      	ldr	r2, [pc, #108]	; (800a2cc <_printf_float+0x2ec>)
 800a25e:	2301      	movs	r3, #1
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af19 	beq.w	800a09e <_printf_float+0xbe>
 800a26c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a270:	4313      	orrs	r3, r2
 800a272:	d102      	bne.n	800a27a <_printf_float+0x29a>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	07d9      	lsls	r1, r3, #31
 800a278:	d5d8      	bpl.n	800a22c <_printf_float+0x24c>
 800a27a:	ee18 3a10 	vmov	r3, s16
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f af09 	beq.w	800a09e <_printf_float+0xbe>
 800a28c:	f04f 0900 	mov.w	r9, #0
 800a290:	f104 0a1a 	add.w	sl, r4, #26
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	425b      	negs	r3, r3
 800a298:	454b      	cmp	r3, r9
 800a29a:	dc01      	bgt.n	800a2a0 <_printf_float+0x2c0>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29e:	e792      	b.n	800a1c6 <_printf_float+0x1e6>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f aef7 	beq.w	800a09e <_printf_float+0xbe>
 800a2b0:	f109 0901 	add.w	r9, r9, #1
 800a2b4:	e7ee      	b.n	800a294 <_printf_float+0x2b4>
 800a2b6:	bf00      	nop
 800a2b8:	7fefffff 	.word	0x7fefffff
 800a2bc:	0800f6d0 	.word	0x0800f6d0
 800a2c0:	0800f6d4 	.word	0x0800f6d4
 800a2c4:	0800f6d8 	.word	0x0800f6d8
 800a2c8:	0800f6dc 	.word	0x0800f6dc
 800a2cc:	0800f6e0 	.word	0x0800f6e0
 800a2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfa8      	it	ge
 800a2d8:	461a      	movge	r2, r3
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	4691      	mov	r9, r2
 800a2de:	dc37      	bgt.n	800a350 <_printf_float+0x370>
 800a2e0:	f04f 0b00 	mov.w	fp, #0
 800a2e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e8:	f104 021a 	add.w	r2, r4, #26
 800a2ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ee:	9305      	str	r3, [sp, #20]
 800a2f0:	eba3 0309 	sub.w	r3, r3, r9
 800a2f4:	455b      	cmp	r3, fp
 800a2f6:	dc33      	bgt.n	800a360 <_printf_float+0x380>
 800a2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	db3b      	blt.n	800a378 <_printf_float+0x398>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	07da      	lsls	r2, r3, #31
 800a304:	d438      	bmi.n	800a378 <_printf_float+0x398>
 800a306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a30a:	eba2 0903 	sub.w	r9, r2, r3
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	4591      	cmp	r9, r2
 800a314:	bfa8      	it	ge
 800a316:	4691      	movge	r9, r2
 800a318:	f1b9 0f00 	cmp.w	r9, #0
 800a31c:	dc35      	bgt.n	800a38a <_printf_float+0x3aa>
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a326:	f104 0a1a 	add.w	sl, r4, #26
 800a32a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	eba3 0309 	sub.w	r3, r3, r9
 800a334:	4543      	cmp	r3, r8
 800a336:	f77f af79 	ble.w	800a22c <_printf_float+0x24c>
 800a33a:	2301      	movs	r3, #1
 800a33c:	4652      	mov	r2, sl
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f aeaa 	beq.w	800a09e <_printf_float+0xbe>
 800a34a:	f108 0801 	add.w	r8, r8, #1
 800a34e:	e7ec      	b.n	800a32a <_printf_float+0x34a>
 800a350:	4613      	mov	r3, r2
 800a352:	4631      	mov	r1, r6
 800a354:	4642      	mov	r2, r8
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	d1c0      	bne.n	800a2e0 <_printf_float+0x300>
 800a35e:	e69e      	b.n	800a09e <_printf_float+0xbe>
 800a360:	2301      	movs	r3, #1
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	9205      	str	r2, [sp, #20]
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	f43f ae97 	beq.w	800a09e <_printf_float+0xbe>
 800a370:	9a05      	ldr	r2, [sp, #20]
 800a372:	f10b 0b01 	add.w	fp, fp, #1
 800a376:	e7b9      	b.n	800a2ec <_printf_float+0x30c>
 800a378:	ee18 3a10 	vmov	r3, s16
 800a37c:	4652      	mov	r2, sl
 800a37e:	4631      	mov	r1, r6
 800a380:	4628      	mov	r0, r5
 800a382:	47b8      	blx	r7
 800a384:	3001      	adds	r0, #1
 800a386:	d1be      	bne.n	800a306 <_printf_float+0x326>
 800a388:	e689      	b.n	800a09e <_printf_float+0xbe>
 800a38a:	9a05      	ldr	r2, [sp, #20]
 800a38c:	464b      	mov	r3, r9
 800a38e:	4442      	add	r2, r8
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	d1c1      	bne.n	800a31e <_printf_float+0x33e>
 800a39a:	e680      	b.n	800a09e <_printf_float+0xbe>
 800a39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a39e:	2a01      	cmp	r2, #1
 800a3a0:	dc01      	bgt.n	800a3a6 <_printf_float+0x3c6>
 800a3a2:	07db      	lsls	r3, r3, #31
 800a3a4:	d53a      	bpl.n	800a41c <_printf_float+0x43c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f ae74 	beq.w	800a09e <_printf_float+0xbe>
 800a3b6:	ee18 3a10 	vmov	r3, s16
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f ae6b 	beq.w	800a09e <_printf_float+0xbe>
 800a3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3d4:	f7f6 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3d8:	b9d8      	cbnz	r0, 800a412 <_printf_float+0x432>
 800a3da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a3de:	f108 0201 	add.w	r2, r8, #1
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d10e      	bne.n	800a40a <_printf_float+0x42a>
 800a3ec:	e657      	b.n	800a09e <_printf_float+0xbe>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f ae50 	beq.w	800a09e <_printf_float+0xbe>
 800a3fe:	f108 0801 	add.w	r8, r8, #1
 800a402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a404:	3b01      	subs	r3, #1
 800a406:	4543      	cmp	r3, r8
 800a408:	dcf1      	bgt.n	800a3ee <_printf_float+0x40e>
 800a40a:	464b      	mov	r3, r9
 800a40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a410:	e6da      	b.n	800a1c8 <_printf_float+0x1e8>
 800a412:	f04f 0800 	mov.w	r8, #0
 800a416:	f104 0a1a 	add.w	sl, r4, #26
 800a41a:	e7f2      	b.n	800a402 <_printf_float+0x422>
 800a41c:	2301      	movs	r3, #1
 800a41e:	4642      	mov	r2, r8
 800a420:	e7df      	b.n	800a3e2 <_printf_float+0x402>
 800a422:	2301      	movs	r3, #1
 800a424:	464a      	mov	r2, r9
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae36 	beq.w	800a09e <_printf_float+0xbe>
 800a432:	f108 0801 	add.w	r8, r8, #1
 800a436:	68e3      	ldr	r3, [r4, #12]
 800a438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a43a:	1a5b      	subs	r3, r3, r1
 800a43c:	4543      	cmp	r3, r8
 800a43e:	dcf0      	bgt.n	800a422 <_printf_float+0x442>
 800a440:	e6f8      	b.n	800a234 <_printf_float+0x254>
 800a442:	f04f 0800 	mov.w	r8, #0
 800a446:	f104 0919 	add.w	r9, r4, #25
 800a44a:	e7f4      	b.n	800a436 <_printf_float+0x456>

0800a44c <malloc>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	; (800a458 <malloc+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f000 b82b 	b.w	800a4ac <_malloc_r>
 800a456:	bf00      	nop
 800a458:	200005d8 	.word	0x200005d8

0800a45c <free>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <free+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f002 b92f 	b.w	800c6c4 <_free_r>
 800a466:	bf00      	nop
 800a468:	200005d8 	.word	0x200005d8

0800a46c <sbrk_aligned>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4e0e      	ldr	r6, [pc, #56]	; (800a4a8 <sbrk_aligned+0x3c>)
 800a470:	460c      	mov	r4, r1
 800a472:	6831      	ldr	r1, [r6, #0]
 800a474:	4605      	mov	r5, r0
 800a476:	b911      	cbnz	r1, 800a47e <sbrk_aligned+0x12>
 800a478:	f001 fa36 	bl	800b8e8 <_sbrk_r>
 800a47c:	6030      	str	r0, [r6, #0]
 800a47e:	4621      	mov	r1, r4
 800a480:	4628      	mov	r0, r5
 800a482:	f001 fa31 	bl	800b8e8 <_sbrk_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d00a      	beq.n	800a4a0 <sbrk_aligned+0x34>
 800a48a:	1cc4      	adds	r4, r0, #3
 800a48c:	f024 0403 	bic.w	r4, r4, #3
 800a490:	42a0      	cmp	r0, r4
 800a492:	d007      	beq.n	800a4a4 <sbrk_aligned+0x38>
 800a494:	1a21      	subs	r1, r4, r0
 800a496:	4628      	mov	r0, r5
 800a498:	f001 fa26 	bl	800b8e8 <_sbrk_r>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d101      	bne.n	800a4a4 <sbrk_aligned+0x38>
 800a4a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	200028f0 	.word	0x200028f0

0800a4ac <_malloc_r>:
 800a4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b0:	1ccd      	adds	r5, r1, #3
 800a4b2:	f025 0503 	bic.w	r5, r5, #3
 800a4b6:	3508      	adds	r5, #8
 800a4b8:	2d0c      	cmp	r5, #12
 800a4ba:	bf38      	it	cc
 800a4bc:	250c      	movcc	r5, #12
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	db01      	blt.n	800a4c8 <_malloc_r+0x1c>
 800a4c4:	42a9      	cmp	r1, r5
 800a4c6:	d905      	bls.n	800a4d4 <_malloc_r+0x28>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5a8 <_malloc_r+0xfc>
 800a4d8:	f000 f9f8 	bl	800a8cc <__malloc_lock>
 800a4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e0:	461c      	mov	r4, r3
 800a4e2:	bb5c      	cbnz	r4, 800a53c <_malloc_r+0x90>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff ffc0 	bl	800a46c <sbrk_aligned>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	d155      	bne.n	800a59e <_malloc_r+0xf2>
 800a4f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f6:	4626      	mov	r6, r4
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	d145      	bne.n	800a588 <_malloc_r+0xdc>
 800a4fc:	2c00      	cmp	r4, #0
 800a4fe:	d048      	beq.n	800a592 <_malloc_r+0xe6>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	4631      	mov	r1, r6
 800a504:	4638      	mov	r0, r7
 800a506:	eb04 0903 	add.w	r9, r4, r3
 800a50a:	f001 f9ed 	bl	800b8e8 <_sbrk_r>
 800a50e:	4581      	cmp	r9, r0
 800a510:	d13f      	bne.n	800a592 <_malloc_r+0xe6>
 800a512:	6821      	ldr	r1, [r4, #0]
 800a514:	1a6d      	subs	r5, r5, r1
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	f7ff ffa7 	bl	800a46c <sbrk_aligned>
 800a51e:	3001      	adds	r0, #1
 800a520:	d037      	beq.n	800a592 <_malloc_r+0xe6>
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	442b      	add	r3, r5
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	f8d8 3000 	ldr.w	r3, [r8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d038      	beq.n	800a5a2 <_malloc_r+0xf6>
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	42a2      	cmp	r2, r4
 800a534:	d12b      	bne.n	800a58e <_malloc_r+0xe2>
 800a536:	2200      	movs	r2, #0
 800a538:	605a      	str	r2, [r3, #4]
 800a53a:	e00f      	b.n	800a55c <_malloc_r+0xb0>
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	1b52      	subs	r2, r2, r5
 800a540:	d41f      	bmi.n	800a582 <_malloc_r+0xd6>
 800a542:	2a0b      	cmp	r2, #11
 800a544:	d917      	bls.n	800a576 <_malloc_r+0xca>
 800a546:	1961      	adds	r1, r4, r5
 800a548:	42a3      	cmp	r3, r4
 800a54a:	6025      	str	r5, [r4, #0]
 800a54c:	bf18      	it	ne
 800a54e:	6059      	strne	r1, [r3, #4]
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	bf08      	it	eq
 800a554:	f8c8 1000 	streq.w	r1, [r8]
 800a558:	5162      	str	r2, [r4, r5]
 800a55a:	604b      	str	r3, [r1, #4]
 800a55c:	4638      	mov	r0, r7
 800a55e:	f104 060b 	add.w	r6, r4, #11
 800a562:	f000 f9b9 	bl	800a8d8 <__malloc_unlock>
 800a566:	f026 0607 	bic.w	r6, r6, #7
 800a56a:	1d23      	adds	r3, r4, #4
 800a56c:	1af2      	subs	r2, r6, r3
 800a56e:	d0ae      	beq.n	800a4ce <_malloc_r+0x22>
 800a570:	1b9b      	subs	r3, r3, r6
 800a572:	50a3      	str	r3, [r4, r2]
 800a574:	e7ab      	b.n	800a4ce <_malloc_r+0x22>
 800a576:	42a3      	cmp	r3, r4
 800a578:	6862      	ldr	r2, [r4, #4]
 800a57a:	d1dd      	bne.n	800a538 <_malloc_r+0x8c>
 800a57c:	f8c8 2000 	str.w	r2, [r8]
 800a580:	e7ec      	b.n	800a55c <_malloc_r+0xb0>
 800a582:	4623      	mov	r3, r4
 800a584:	6864      	ldr	r4, [r4, #4]
 800a586:	e7ac      	b.n	800a4e2 <_malloc_r+0x36>
 800a588:	4634      	mov	r4, r6
 800a58a:	6876      	ldr	r6, [r6, #4]
 800a58c:	e7b4      	b.n	800a4f8 <_malloc_r+0x4c>
 800a58e:	4613      	mov	r3, r2
 800a590:	e7cc      	b.n	800a52c <_malloc_r+0x80>
 800a592:	230c      	movs	r3, #12
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	4638      	mov	r0, r7
 800a598:	f000 f99e 	bl	800a8d8 <__malloc_unlock>
 800a59c:	e797      	b.n	800a4ce <_malloc_r+0x22>
 800a59e:	6025      	str	r5, [r4, #0]
 800a5a0:	e7dc      	b.n	800a55c <_malloc_r+0xb0>
 800a5a2:	605b      	str	r3, [r3, #4]
 800a5a4:	deff      	udf	#255	; 0xff
 800a5a6:	bf00      	nop
 800a5a8:	200028ec 	.word	0x200028ec

0800a5ac <_printf_common>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	4699      	mov	r9, r3
 800a5b4:	688a      	ldr	r2, [r1, #8]
 800a5b6:	690b      	ldr	r3, [r1, #16]
 800a5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	bfb8      	it	lt
 800a5c0:	4613      	movlt	r3, r2
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	b10a      	cbz	r2, 800a5d2 <_printf_common+0x26>
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	6033      	str	r3, [r6, #0]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	0699      	lsls	r1, r3, #26
 800a5d6:	bf42      	ittt	mi
 800a5d8:	6833      	ldrmi	r3, [r6, #0]
 800a5da:	3302      	addmi	r3, #2
 800a5dc:	6033      	strmi	r3, [r6, #0]
 800a5de:	6825      	ldr	r5, [r4, #0]
 800a5e0:	f015 0506 	ands.w	r5, r5, #6
 800a5e4:	d106      	bne.n	800a5f4 <_printf_common+0x48>
 800a5e6:	f104 0a19 	add.w	sl, r4, #25
 800a5ea:	68e3      	ldr	r3, [r4, #12]
 800a5ec:	6832      	ldr	r2, [r6, #0]
 800a5ee:	1a9b      	subs	r3, r3, r2
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	dc26      	bgt.n	800a642 <_printf_common+0x96>
 800a5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f8:	1e13      	subs	r3, r2, #0
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	bf18      	it	ne
 800a5fe:	2301      	movne	r3, #1
 800a600:	0692      	lsls	r2, r2, #26
 800a602:	d42b      	bmi.n	800a65c <_printf_common+0xb0>
 800a604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a608:	4649      	mov	r1, r9
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c0      	blx	r8
 800a60e:	3001      	adds	r0, #1
 800a610:	d01e      	beq.n	800a650 <_printf_common+0xa4>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6922      	ldr	r2, [r4, #16]
 800a616:	f003 0306 	and.w	r3, r3, #6
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	bf02      	ittt	eq
 800a61e:	68e5      	ldreq	r5, [r4, #12]
 800a620:	6833      	ldreq	r3, [r6, #0]
 800a622:	1aed      	subeq	r5, r5, r3
 800a624:	68a3      	ldr	r3, [r4, #8]
 800a626:	bf0c      	ite	eq
 800a628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a62c:	2500      	movne	r5, #0
 800a62e:	4293      	cmp	r3, r2
 800a630:	bfc4      	itt	gt
 800a632:	1a9b      	subgt	r3, r3, r2
 800a634:	18ed      	addgt	r5, r5, r3
 800a636:	2600      	movs	r6, #0
 800a638:	341a      	adds	r4, #26
 800a63a:	42b5      	cmp	r5, r6
 800a63c:	d11a      	bne.n	800a674 <_printf_common+0xc8>
 800a63e:	2000      	movs	r0, #0
 800a640:	e008      	b.n	800a654 <_printf_common+0xa8>
 800a642:	2301      	movs	r3, #1
 800a644:	4652      	mov	r2, sl
 800a646:	4649      	mov	r1, r9
 800a648:	4638      	mov	r0, r7
 800a64a:	47c0      	blx	r8
 800a64c:	3001      	adds	r0, #1
 800a64e:	d103      	bne.n	800a658 <_printf_common+0xac>
 800a650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	3501      	adds	r5, #1
 800a65a:	e7c6      	b.n	800a5ea <_printf_common+0x3e>
 800a65c:	18e1      	adds	r1, r4, r3
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	2030      	movs	r0, #48	; 0x30
 800a662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a666:	4422      	add	r2, r4
 800a668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a670:	3302      	adds	r3, #2
 800a672:	e7c7      	b.n	800a604 <_printf_common+0x58>
 800a674:	2301      	movs	r3, #1
 800a676:	4622      	mov	r2, r4
 800a678:	4649      	mov	r1, r9
 800a67a:	4638      	mov	r0, r7
 800a67c:	47c0      	blx	r8
 800a67e:	3001      	adds	r0, #1
 800a680:	d0e6      	beq.n	800a650 <_printf_common+0xa4>
 800a682:	3601      	adds	r6, #1
 800a684:	e7d9      	b.n	800a63a <_printf_common+0x8e>
	...

0800a688 <_printf_i>:
 800a688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	7e0f      	ldrb	r7, [r1, #24]
 800a68e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a690:	2f78      	cmp	r7, #120	; 0x78
 800a692:	4691      	mov	r9, r2
 800a694:	4680      	mov	r8, r0
 800a696:	460c      	mov	r4, r1
 800a698:	469a      	mov	sl, r3
 800a69a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a69e:	d807      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6a0:	2f62      	cmp	r7, #98	; 0x62
 800a6a2:	d80a      	bhi.n	800a6ba <_printf_i+0x32>
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	f000 80d4 	beq.w	800a852 <_printf_i+0x1ca>
 800a6aa:	2f58      	cmp	r7, #88	; 0x58
 800a6ac:	f000 80c0 	beq.w	800a830 <_printf_i+0x1a8>
 800a6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6b8:	e03a      	b.n	800a730 <_printf_i+0xa8>
 800a6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6be:	2b15      	cmp	r3, #21
 800a6c0:	d8f6      	bhi.n	800a6b0 <_printf_i+0x28>
 800a6c2:	a101      	add	r1, pc, #4	; (adr r1, 800a6c8 <_printf_i+0x40>)
 800a6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6c8:	0800a721 	.word	0x0800a721
 800a6cc:	0800a735 	.word	0x0800a735
 800a6d0:	0800a6b1 	.word	0x0800a6b1
 800a6d4:	0800a6b1 	.word	0x0800a6b1
 800a6d8:	0800a6b1 	.word	0x0800a6b1
 800a6dc:	0800a6b1 	.word	0x0800a6b1
 800a6e0:	0800a735 	.word	0x0800a735
 800a6e4:	0800a6b1 	.word	0x0800a6b1
 800a6e8:	0800a6b1 	.word	0x0800a6b1
 800a6ec:	0800a6b1 	.word	0x0800a6b1
 800a6f0:	0800a6b1 	.word	0x0800a6b1
 800a6f4:	0800a839 	.word	0x0800a839
 800a6f8:	0800a761 	.word	0x0800a761
 800a6fc:	0800a7f3 	.word	0x0800a7f3
 800a700:	0800a6b1 	.word	0x0800a6b1
 800a704:	0800a6b1 	.word	0x0800a6b1
 800a708:	0800a85b 	.word	0x0800a85b
 800a70c:	0800a6b1 	.word	0x0800a6b1
 800a710:	0800a761 	.word	0x0800a761
 800a714:	0800a6b1 	.word	0x0800a6b1
 800a718:	0800a6b1 	.word	0x0800a6b1
 800a71c:	0800a7fb 	.word	0x0800a7fb
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	1d1a      	adds	r2, r3, #4
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	602a      	str	r2, [r5, #0]
 800a728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a730:	2301      	movs	r3, #1
 800a732:	e09f      	b.n	800a874 <_printf_i+0x1ec>
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	682b      	ldr	r3, [r5, #0]
 800a738:	0607      	lsls	r7, r0, #24
 800a73a:	f103 0104 	add.w	r1, r3, #4
 800a73e:	6029      	str	r1, [r5, #0]
 800a740:	d501      	bpl.n	800a746 <_printf_i+0xbe>
 800a742:	681e      	ldr	r6, [r3, #0]
 800a744:	e003      	b.n	800a74e <_printf_i+0xc6>
 800a746:	0646      	lsls	r6, r0, #25
 800a748:	d5fb      	bpl.n	800a742 <_printf_i+0xba>
 800a74a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a74e:	2e00      	cmp	r6, #0
 800a750:	da03      	bge.n	800a75a <_printf_i+0xd2>
 800a752:	232d      	movs	r3, #45	; 0x2d
 800a754:	4276      	negs	r6, r6
 800a756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75a:	485a      	ldr	r0, [pc, #360]	; (800a8c4 <_printf_i+0x23c>)
 800a75c:	230a      	movs	r3, #10
 800a75e:	e012      	b.n	800a786 <_printf_i+0xfe>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	6820      	ldr	r0, [r4, #0]
 800a764:	1d19      	adds	r1, r3, #4
 800a766:	6029      	str	r1, [r5, #0]
 800a768:	0605      	lsls	r5, r0, #24
 800a76a:	d501      	bpl.n	800a770 <_printf_i+0xe8>
 800a76c:	681e      	ldr	r6, [r3, #0]
 800a76e:	e002      	b.n	800a776 <_printf_i+0xee>
 800a770:	0641      	lsls	r1, r0, #25
 800a772:	d5fb      	bpl.n	800a76c <_printf_i+0xe4>
 800a774:	881e      	ldrh	r6, [r3, #0]
 800a776:	4853      	ldr	r0, [pc, #332]	; (800a8c4 <_printf_i+0x23c>)
 800a778:	2f6f      	cmp	r7, #111	; 0x6f
 800a77a:	bf0c      	ite	eq
 800a77c:	2308      	moveq	r3, #8
 800a77e:	230a      	movne	r3, #10
 800a780:	2100      	movs	r1, #0
 800a782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a786:	6865      	ldr	r5, [r4, #4]
 800a788:	60a5      	str	r5, [r4, #8]
 800a78a:	2d00      	cmp	r5, #0
 800a78c:	bfa2      	ittt	ge
 800a78e:	6821      	ldrge	r1, [r4, #0]
 800a790:	f021 0104 	bicge.w	r1, r1, #4
 800a794:	6021      	strge	r1, [r4, #0]
 800a796:	b90e      	cbnz	r6, 800a79c <_printf_i+0x114>
 800a798:	2d00      	cmp	r5, #0
 800a79a:	d04b      	beq.n	800a834 <_printf_i+0x1ac>
 800a79c:	4615      	mov	r5, r2
 800a79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a7a6:	5dc7      	ldrb	r7, [r0, r7]
 800a7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7ac:	4637      	mov	r7, r6
 800a7ae:	42bb      	cmp	r3, r7
 800a7b0:	460e      	mov	r6, r1
 800a7b2:	d9f4      	bls.n	800a79e <_printf_i+0x116>
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d10b      	bne.n	800a7d0 <_printf_i+0x148>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	07de      	lsls	r6, r3, #31
 800a7bc:	d508      	bpl.n	800a7d0 <_printf_i+0x148>
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	6861      	ldr	r1, [r4, #4]
 800a7c2:	4299      	cmp	r1, r3
 800a7c4:	bfde      	ittt	le
 800a7c6:	2330      	movle	r3, #48	; 0x30
 800a7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a7d0:	1b52      	subs	r2, r2, r5
 800a7d2:	6122      	str	r2, [r4, #16]
 800a7d4:	f8cd a000 	str.w	sl, [sp]
 800a7d8:	464b      	mov	r3, r9
 800a7da:	aa03      	add	r2, sp, #12
 800a7dc:	4621      	mov	r1, r4
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f7ff fee4 	bl	800a5ac <_printf_common>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d14a      	bne.n	800a87e <_printf_i+0x1f6>
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7ec:	b004      	add	sp, #16
 800a7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	f043 0320 	orr.w	r3, r3, #32
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	4833      	ldr	r0, [pc, #204]	; (800a8c8 <_printf_i+0x240>)
 800a7fc:	2778      	movs	r7, #120	; 0x78
 800a7fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	6829      	ldr	r1, [r5, #0]
 800a806:	061f      	lsls	r7, r3, #24
 800a808:	f851 6b04 	ldr.w	r6, [r1], #4
 800a80c:	d402      	bmi.n	800a814 <_printf_i+0x18c>
 800a80e:	065f      	lsls	r7, r3, #25
 800a810:	bf48      	it	mi
 800a812:	b2b6      	uxthmi	r6, r6
 800a814:	07df      	lsls	r7, r3, #31
 800a816:	bf48      	it	mi
 800a818:	f043 0320 	orrmi.w	r3, r3, #32
 800a81c:	6029      	str	r1, [r5, #0]
 800a81e:	bf48      	it	mi
 800a820:	6023      	strmi	r3, [r4, #0]
 800a822:	b91e      	cbnz	r6, 800a82c <_printf_i+0x1a4>
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	f023 0320 	bic.w	r3, r3, #32
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	2310      	movs	r3, #16
 800a82e:	e7a7      	b.n	800a780 <_printf_i+0xf8>
 800a830:	4824      	ldr	r0, [pc, #144]	; (800a8c4 <_printf_i+0x23c>)
 800a832:	e7e4      	b.n	800a7fe <_printf_i+0x176>
 800a834:	4615      	mov	r5, r2
 800a836:	e7bd      	b.n	800a7b4 <_printf_i+0x12c>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	6826      	ldr	r6, [r4, #0]
 800a83c:	6961      	ldr	r1, [r4, #20]
 800a83e:	1d18      	adds	r0, r3, #4
 800a840:	6028      	str	r0, [r5, #0]
 800a842:	0635      	lsls	r5, r6, #24
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	d501      	bpl.n	800a84c <_printf_i+0x1c4>
 800a848:	6019      	str	r1, [r3, #0]
 800a84a:	e002      	b.n	800a852 <_printf_i+0x1ca>
 800a84c:	0670      	lsls	r0, r6, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0x1c0>
 800a850:	8019      	strh	r1, [r3, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	6123      	str	r3, [r4, #16]
 800a856:	4615      	mov	r5, r2
 800a858:	e7bc      	b.n	800a7d4 <_printf_i+0x14c>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	1d1a      	adds	r2, r3, #4
 800a85e:	602a      	str	r2, [r5, #0]
 800a860:	681d      	ldr	r5, [r3, #0]
 800a862:	6862      	ldr	r2, [r4, #4]
 800a864:	2100      	movs	r1, #0
 800a866:	4628      	mov	r0, r5
 800a868:	f7f5 fcb2 	bl	80001d0 <memchr>
 800a86c:	b108      	cbz	r0, 800a872 <_printf_i+0x1ea>
 800a86e:	1b40      	subs	r0, r0, r5
 800a870:	6060      	str	r0, [r4, #4]
 800a872:	6863      	ldr	r3, [r4, #4]
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	2300      	movs	r3, #0
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87c:	e7aa      	b.n	800a7d4 <_printf_i+0x14c>
 800a87e:	6923      	ldr	r3, [r4, #16]
 800a880:	462a      	mov	r2, r5
 800a882:	4649      	mov	r1, r9
 800a884:	4640      	mov	r0, r8
 800a886:	47d0      	blx	sl
 800a888:	3001      	adds	r0, #1
 800a88a:	d0ad      	beq.n	800a7e8 <_printf_i+0x160>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	079b      	lsls	r3, r3, #30
 800a890:	d413      	bmi.n	800a8ba <_printf_i+0x232>
 800a892:	68e0      	ldr	r0, [r4, #12]
 800a894:	9b03      	ldr	r3, [sp, #12]
 800a896:	4298      	cmp	r0, r3
 800a898:	bfb8      	it	lt
 800a89a:	4618      	movlt	r0, r3
 800a89c:	e7a6      	b.n	800a7ec <_printf_i+0x164>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d09d      	beq.n	800a7e8 <_printf_i+0x160>
 800a8ac:	3501      	adds	r5, #1
 800a8ae:	68e3      	ldr	r3, [r4, #12]
 800a8b0:	9903      	ldr	r1, [sp, #12]
 800a8b2:	1a5b      	subs	r3, r3, r1
 800a8b4:	42ab      	cmp	r3, r5
 800a8b6:	dcf2      	bgt.n	800a89e <_printf_i+0x216>
 800a8b8:	e7eb      	b.n	800a892 <_printf_i+0x20a>
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	f104 0619 	add.w	r6, r4, #25
 800a8c0:	e7f5      	b.n	800a8ae <_printf_i+0x226>
 800a8c2:	bf00      	nop
 800a8c4:	0800f6e2 	.word	0x0800f6e2
 800a8c8:	0800f6f3 	.word	0x0800f6f3

0800a8cc <__malloc_lock>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__malloc_lock+0x8>)
 800a8ce:	f001 b846 	b.w	800b95e <__retarget_lock_acquire_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20002a30 	.word	0x20002a30

0800a8d8 <__malloc_unlock>:
 800a8d8:	4801      	ldr	r0, [pc, #4]	; (800a8e0 <__malloc_unlock+0x8>)
 800a8da:	f001 b841 	b.w	800b960 <__retarget_lock_release_recursive>
 800a8de:	bf00      	nop
 800a8e0:	20002a30 	.word	0x20002a30

0800a8e4 <siprintf>:
 800a8e4:	b40e      	push	{r1, r2, r3}
 800a8e6:	b500      	push	{lr}
 800a8e8:	b09c      	sub	sp, #112	; 0x70
 800a8ea:	ab1d      	add	r3, sp, #116	; 0x74
 800a8ec:	9002      	str	r0, [sp, #8]
 800a8ee:	9006      	str	r0, [sp, #24]
 800a8f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8f4:	4809      	ldr	r0, [pc, #36]	; (800a91c <siprintf+0x38>)
 800a8f6:	9107      	str	r1, [sp, #28]
 800a8f8:	9104      	str	r1, [sp, #16]
 800a8fa:	4909      	ldr	r1, [pc, #36]	; (800a920 <siprintf+0x3c>)
 800a8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a900:	9105      	str	r1, [sp, #20]
 800a902:	6800      	ldr	r0, [r0, #0]
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	a902      	add	r1, sp, #8
 800a908:	f002 fada 	bl	800cec0 <_svfiprintf_r>
 800a90c:	9b02      	ldr	r3, [sp, #8]
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
 800a912:	b01c      	add	sp, #112	; 0x70
 800a914:	f85d eb04 	ldr.w	lr, [sp], #4
 800a918:	b003      	add	sp, #12
 800a91a:	4770      	bx	lr
 800a91c:	200005d8 	.word	0x200005d8
 800a920:	ffff0208 	.word	0xffff0208

0800a924 <std>:
 800a924:	2300      	movs	r3, #0
 800a926:	b510      	push	{r4, lr}
 800a928:	4604      	mov	r4, r0
 800a92a:	e9c0 3300 	strd	r3, r3, [r0]
 800a92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a932:	6083      	str	r3, [r0, #8]
 800a934:	8181      	strh	r1, [r0, #12]
 800a936:	6643      	str	r3, [r0, #100]	; 0x64
 800a938:	81c2      	strh	r2, [r0, #14]
 800a93a:	6183      	str	r3, [r0, #24]
 800a93c:	4619      	mov	r1, r3
 800a93e:	2208      	movs	r2, #8
 800a940:	305c      	adds	r0, #92	; 0x5c
 800a942:	f000 ffc5 	bl	800b8d0 <memset>
 800a946:	4b0d      	ldr	r3, [pc, #52]	; (800a97c <std+0x58>)
 800a948:	6263      	str	r3, [r4, #36]	; 0x24
 800a94a:	4b0d      	ldr	r3, [pc, #52]	; (800a980 <std+0x5c>)
 800a94c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a94e:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <std+0x60>)
 800a950:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a952:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <std+0x64>)
 800a954:	6323      	str	r3, [r4, #48]	; 0x30
 800a956:	4b0d      	ldr	r3, [pc, #52]	; (800a98c <std+0x68>)
 800a958:	6224      	str	r4, [r4, #32]
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d006      	beq.n	800a96c <std+0x48>
 800a95e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a962:	4294      	cmp	r4, r2
 800a964:	d002      	beq.n	800a96c <std+0x48>
 800a966:	33d0      	adds	r3, #208	; 0xd0
 800a968:	429c      	cmp	r4, r3
 800a96a:	d105      	bne.n	800a978 <std+0x54>
 800a96c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a974:	f000 bff2 	b.w	800b95c <__retarget_lock_init_recursive>
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	bf00      	nop
 800a97c:	0800db97 	.word	0x0800db97
 800a980:	0800dbb9 	.word	0x0800dbb9
 800a984:	0800dbf1 	.word	0x0800dbf1
 800a988:	0800dc15 	.word	0x0800dc15
 800a98c:	200028f4 	.word	0x200028f4

0800a990 <stdio_exit_handler>:
 800a990:	4a02      	ldr	r2, [pc, #8]	; (800a99c <stdio_exit_handler+0xc>)
 800a992:	4903      	ldr	r1, [pc, #12]	; (800a9a0 <stdio_exit_handler+0x10>)
 800a994:	4803      	ldr	r0, [pc, #12]	; (800a9a4 <stdio_exit_handler+0x14>)
 800a996:	f000 bf0f 	b.w	800b7b8 <_fwalk_sglue>
 800a99a:	bf00      	nop
 800a99c:	20000414 	.word	0x20000414
 800a9a0:	0800d1ed 	.word	0x0800d1ed
 800a9a4:	2000058c 	.word	0x2000058c

0800a9a8 <cleanup_stdio>:
 800a9a8:	6841      	ldr	r1, [r0, #4]
 800a9aa:	4b0c      	ldr	r3, [pc, #48]	; (800a9dc <cleanup_stdio+0x34>)
 800a9ac:	4299      	cmp	r1, r3
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	d001      	beq.n	800a9b8 <cleanup_stdio+0x10>
 800a9b4:	f002 fc1a 	bl	800d1ec <_fflush_r>
 800a9b8:	68a1      	ldr	r1, [r4, #8]
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <cleanup_stdio+0x38>)
 800a9bc:	4299      	cmp	r1, r3
 800a9be:	d002      	beq.n	800a9c6 <cleanup_stdio+0x1e>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f002 fc13 	bl	800d1ec <_fflush_r>
 800a9c6:	68e1      	ldr	r1, [r4, #12]
 800a9c8:	4b06      	ldr	r3, [pc, #24]	; (800a9e4 <cleanup_stdio+0x3c>)
 800a9ca:	4299      	cmp	r1, r3
 800a9cc:	d004      	beq.n	800a9d8 <cleanup_stdio+0x30>
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9d4:	f002 bc0a 	b.w	800d1ec <_fflush_r>
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	bf00      	nop
 800a9dc:	200028f4 	.word	0x200028f4
 800a9e0:	2000295c 	.word	0x2000295c
 800a9e4:	200029c4 	.word	0x200029c4

0800a9e8 <global_stdio_init.part.0>:
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <global_stdio_init.part.0+0x30>)
 800a9ec:	4c0b      	ldr	r4, [pc, #44]	; (800aa1c <global_stdio_init.part.0+0x34>)
 800a9ee:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <global_stdio_init.part.0+0x38>)
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2104      	movs	r1, #4
 800a9f8:	f7ff ff94 	bl	800a924 <std>
 800a9fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa00:	2201      	movs	r2, #1
 800aa02:	2109      	movs	r1, #9
 800aa04:	f7ff ff8e 	bl	800a924 <std>
 800aa08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa0c:	2202      	movs	r2, #2
 800aa0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa12:	2112      	movs	r1, #18
 800aa14:	f7ff bf86 	b.w	800a924 <std>
 800aa18:	20002a2c 	.word	0x20002a2c
 800aa1c:	200028f4 	.word	0x200028f4
 800aa20:	0800a991 	.word	0x0800a991

0800aa24 <__sfp_lock_acquire>:
 800aa24:	4801      	ldr	r0, [pc, #4]	; (800aa2c <__sfp_lock_acquire+0x8>)
 800aa26:	f000 bf9a 	b.w	800b95e <__retarget_lock_acquire_recursive>
 800aa2a:	bf00      	nop
 800aa2c:	20002a31 	.word	0x20002a31

0800aa30 <__sfp_lock_release>:
 800aa30:	4801      	ldr	r0, [pc, #4]	; (800aa38 <__sfp_lock_release+0x8>)
 800aa32:	f000 bf95 	b.w	800b960 <__retarget_lock_release_recursive>
 800aa36:	bf00      	nop
 800aa38:	20002a31 	.word	0x20002a31

0800aa3c <__sinit>:
 800aa3c:	b510      	push	{r4, lr}
 800aa3e:	4604      	mov	r4, r0
 800aa40:	f7ff fff0 	bl	800aa24 <__sfp_lock_acquire>
 800aa44:	6a23      	ldr	r3, [r4, #32]
 800aa46:	b11b      	cbz	r3, 800aa50 <__sinit+0x14>
 800aa48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa4c:	f7ff bff0 	b.w	800aa30 <__sfp_lock_release>
 800aa50:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <__sinit+0x28>)
 800aa52:	6223      	str	r3, [r4, #32]
 800aa54:	4b04      	ldr	r3, [pc, #16]	; (800aa68 <__sinit+0x2c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f5      	bne.n	800aa48 <__sinit+0xc>
 800aa5c:	f7ff ffc4 	bl	800a9e8 <global_stdio_init.part.0>
 800aa60:	e7f2      	b.n	800aa48 <__sinit+0xc>
 800aa62:	bf00      	nop
 800aa64:	0800a9a9 	.word	0x0800a9a9
 800aa68:	20002a2c 	.word	0x20002a2c

0800aa6c <sulp>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	4604      	mov	r4, r0
 800aa70:	460d      	mov	r5, r1
 800aa72:	ec45 4b10 	vmov	d0, r4, r5
 800aa76:	4616      	mov	r6, r2
 800aa78:	f002 ff4c 	bl	800d914 <__ulp>
 800aa7c:	ec51 0b10 	vmov	r0, r1, d0
 800aa80:	b17e      	cbz	r6, 800aaa2 <sulp+0x36>
 800aa82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dd09      	ble.n	800aaa2 <sulp+0x36>
 800aa8e:	051b      	lsls	r3, r3, #20
 800aa90:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aa94:	2400      	movs	r4, #0
 800aa96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	f7f5 fdab 	bl	80005f8 <__aeabi_dmul>
 800aaa2:	bd70      	pop	{r4, r5, r6, pc}
 800aaa4:	0000      	movs	r0, r0
	...

0800aaa8 <_strtod_l>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	ed2d 8b02 	vpush	{d8}
 800aab0:	b09b      	sub	sp, #108	; 0x6c
 800aab2:	4604      	mov	r4, r0
 800aab4:	9213      	str	r2, [sp, #76]	; 0x4c
 800aab6:	2200      	movs	r2, #0
 800aab8:	9216      	str	r2, [sp, #88]	; 0x58
 800aaba:	460d      	mov	r5, r1
 800aabc:	f04f 0800 	mov.w	r8, #0
 800aac0:	f04f 0900 	mov.w	r9, #0
 800aac4:	460a      	mov	r2, r1
 800aac6:	9215      	str	r2, [sp, #84]	; 0x54
 800aac8:	7811      	ldrb	r1, [r2, #0]
 800aaca:	292b      	cmp	r1, #43	; 0x2b
 800aacc:	d04c      	beq.n	800ab68 <_strtod_l+0xc0>
 800aace:	d83a      	bhi.n	800ab46 <_strtod_l+0x9e>
 800aad0:	290d      	cmp	r1, #13
 800aad2:	d834      	bhi.n	800ab3e <_strtod_l+0x96>
 800aad4:	2908      	cmp	r1, #8
 800aad6:	d834      	bhi.n	800ab42 <_strtod_l+0x9a>
 800aad8:	2900      	cmp	r1, #0
 800aada:	d03d      	beq.n	800ab58 <_strtod_l+0xb0>
 800aadc:	2200      	movs	r2, #0
 800aade:	920a      	str	r2, [sp, #40]	; 0x28
 800aae0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aae2:	7832      	ldrb	r2, [r6, #0]
 800aae4:	2a30      	cmp	r2, #48	; 0x30
 800aae6:	f040 80b4 	bne.w	800ac52 <_strtod_l+0x1aa>
 800aaea:	7872      	ldrb	r2, [r6, #1]
 800aaec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aaf0:	2a58      	cmp	r2, #88	; 0x58
 800aaf2:	d170      	bne.n	800abd6 <_strtod_l+0x12e>
 800aaf4:	9302      	str	r3, [sp, #8]
 800aaf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	ab16      	add	r3, sp, #88	; 0x58
 800aafc:	9300      	str	r3, [sp, #0]
 800aafe:	4a8e      	ldr	r2, [pc, #568]	; (800ad38 <_strtod_l+0x290>)
 800ab00:	ab17      	add	r3, sp, #92	; 0x5c
 800ab02:	a915      	add	r1, sp, #84	; 0x54
 800ab04:	4620      	mov	r0, r4
 800ab06:	f001 fe91 	bl	800c82c <__gethex>
 800ab0a:	f010 070f 	ands.w	r7, r0, #15
 800ab0e:	4605      	mov	r5, r0
 800ab10:	d005      	beq.n	800ab1e <_strtod_l+0x76>
 800ab12:	2f06      	cmp	r7, #6
 800ab14:	d12a      	bne.n	800ab6c <_strtod_l+0xc4>
 800ab16:	3601      	adds	r6, #1
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9615      	str	r6, [sp, #84]	; 0x54
 800ab1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f040 857f 	bne.w	800b624 <_strtod_l+0xb7c>
 800ab26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab28:	b1db      	cbz	r3, 800ab62 <_strtod_l+0xba>
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab30:	ec43 2b10 	vmov	d0, r2, r3
 800ab34:	b01b      	add	sp, #108	; 0x6c
 800ab36:	ecbd 8b02 	vpop	{d8}
 800ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3e:	2920      	cmp	r1, #32
 800ab40:	d1cc      	bne.n	800aadc <_strtod_l+0x34>
 800ab42:	3201      	adds	r2, #1
 800ab44:	e7bf      	b.n	800aac6 <_strtod_l+0x1e>
 800ab46:	292d      	cmp	r1, #45	; 0x2d
 800ab48:	d1c8      	bne.n	800aadc <_strtod_l+0x34>
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	910a      	str	r1, [sp, #40]	; 0x28
 800ab4e:	1c51      	adds	r1, r2, #1
 800ab50:	9115      	str	r1, [sp, #84]	; 0x54
 800ab52:	7852      	ldrb	r2, [r2, #1]
 800ab54:	2a00      	cmp	r2, #0
 800ab56:	d1c3      	bne.n	800aae0 <_strtod_l+0x38>
 800ab58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab5a:	9515      	str	r5, [sp, #84]	; 0x54
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 855f 	bne.w	800b620 <_strtod_l+0xb78>
 800ab62:	4642      	mov	r2, r8
 800ab64:	464b      	mov	r3, r9
 800ab66:	e7e3      	b.n	800ab30 <_strtod_l+0x88>
 800ab68:	2100      	movs	r1, #0
 800ab6a:	e7ef      	b.n	800ab4c <_strtod_l+0xa4>
 800ab6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab6e:	b13a      	cbz	r2, 800ab80 <_strtod_l+0xd8>
 800ab70:	2135      	movs	r1, #53	; 0x35
 800ab72:	a818      	add	r0, sp, #96	; 0x60
 800ab74:	f002 ffcb 	bl	800db0e <__copybits>
 800ab78:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f002 fb9e 	bl	800d2bc <_Bfree>
 800ab80:	3f01      	subs	r7, #1
 800ab82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ab84:	2f04      	cmp	r7, #4
 800ab86:	d806      	bhi.n	800ab96 <_strtod_l+0xee>
 800ab88:	e8df f007 	tbb	[pc, r7]
 800ab8c:	201d0314 	.word	0x201d0314
 800ab90:	14          	.byte	0x14
 800ab91:	00          	.byte	0x00
 800ab92:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ab96:	05e9      	lsls	r1, r5, #23
 800ab98:	bf48      	it	mi
 800ab9a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ab9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aba2:	0d1b      	lsrs	r3, r3, #20
 800aba4:	051b      	lsls	r3, r3, #20
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1b9      	bne.n	800ab1e <_strtod_l+0x76>
 800abaa:	f000 fead 	bl	800b908 <__errno>
 800abae:	2322      	movs	r3, #34	; 0x22
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	e7b4      	b.n	800ab1e <_strtod_l+0x76>
 800abb4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800abb8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800abc4:	e7e7      	b.n	800ab96 <_strtod_l+0xee>
 800abc6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ad40 <_strtod_l+0x298>
 800abca:	e7e4      	b.n	800ab96 <_strtod_l+0xee>
 800abcc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800abd0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800abd4:	e7df      	b.n	800ab96 <_strtod_l+0xee>
 800abd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd8:	1c5a      	adds	r2, r3, #1
 800abda:	9215      	str	r2, [sp, #84]	; 0x54
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b30      	cmp	r3, #48	; 0x30
 800abe0:	d0f9      	beq.n	800abd6 <_strtod_l+0x12e>
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d09b      	beq.n	800ab1e <_strtod_l+0x76>
 800abe6:	2301      	movs	r3, #1
 800abe8:	f04f 0a00 	mov.w	sl, #0
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abf0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abf6:	46d3      	mov	fp, sl
 800abf8:	220a      	movs	r2, #10
 800abfa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800abfc:	7806      	ldrb	r6, [r0, #0]
 800abfe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac02:	b2d9      	uxtb	r1, r3
 800ac04:	2909      	cmp	r1, #9
 800ac06:	d926      	bls.n	800ac56 <_strtod_l+0x1ae>
 800ac08:	494c      	ldr	r1, [pc, #304]	; (800ad3c <_strtod_l+0x294>)
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f000 fdf2 	bl	800b7f4 <strncmp>
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d030      	beq.n	800ac76 <_strtod_l+0x1ce>
 800ac14:	2000      	movs	r0, #0
 800ac16:	4632      	mov	r2, r6
 800ac18:	9005      	str	r0, [sp, #20]
 800ac1a:	465e      	mov	r6, fp
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2a65      	cmp	r2, #101	; 0x65
 800ac20:	d001      	beq.n	800ac26 <_strtod_l+0x17e>
 800ac22:	2a45      	cmp	r2, #69	; 0x45
 800ac24:	d113      	bne.n	800ac4e <_strtod_l+0x1a6>
 800ac26:	b91e      	cbnz	r6, 800ac30 <_strtod_l+0x188>
 800ac28:	9a04      	ldr	r2, [sp, #16]
 800ac2a:	4302      	orrs	r2, r0
 800ac2c:	d094      	beq.n	800ab58 <_strtod_l+0xb0>
 800ac2e:	2600      	movs	r6, #0
 800ac30:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ac32:	1c6a      	adds	r2, r5, #1
 800ac34:	9215      	str	r2, [sp, #84]	; 0x54
 800ac36:	786a      	ldrb	r2, [r5, #1]
 800ac38:	2a2b      	cmp	r2, #43	; 0x2b
 800ac3a:	d074      	beq.n	800ad26 <_strtod_l+0x27e>
 800ac3c:	2a2d      	cmp	r2, #45	; 0x2d
 800ac3e:	d078      	beq.n	800ad32 <_strtod_l+0x28a>
 800ac40:	f04f 0c00 	mov.w	ip, #0
 800ac44:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac48:	2909      	cmp	r1, #9
 800ac4a:	d97f      	bls.n	800ad4c <_strtod_l+0x2a4>
 800ac4c:	9515      	str	r5, [sp, #84]	; 0x54
 800ac4e:	2700      	movs	r7, #0
 800ac50:	e09e      	b.n	800ad90 <_strtod_l+0x2e8>
 800ac52:	2300      	movs	r3, #0
 800ac54:	e7c8      	b.n	800abe8 <_strtod_l+0x140>
 800ac56:	f1bb 0f08 	cmp.w	fp, #8
 800ac5a:	bfd8      	it	le
 800ac5c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ac5e:	f100 0001 	add.w	r0, r0, #1
 800ac62:	bfda      	itte	le
 800ac64:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac68:	9309      	strle	r3, [sp, #36]	; 0x24
 800ac6a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ac6e:	f10b 0b01 	add.w	fp, fp, #1
 800ac72:	9015      	str	r0, [sp, #84]	; 0x54
 800ac74:	e7c1      	b.n	800abfa <_strtod_l+0x152>
 800ac76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	9215      	str	r2, [sp, #84]	; 0x54
 800ac7c:	785a      	ldrb	r2, [r3, #1]
 800ac7e:	f1bb 0f00 	cmp.w	fp, #0
 800ac82:	d037      	beq.n	800acf4 <_strtod_l+0x24c>
 800ac84:	9005      	str	r0, [sp, #20]
 800ac86:	465e      	mov	r6, fp
 800ac88:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ac8c:	2b09      	cmp	r3, #9
 800ac8e:	d912      	bls.n	800acb6 <_strtod_l+0x20e>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e7c4      	b.n	800ac1e <_strtod_l+0x176>
 800ac94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	9215      	str	r2, [sp, #84]	; 0x54
 800ac9a:	785a      	ldrb	r2, [r3, #1]
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	2a30      	cmp	r2, #48	; 0x30
 800aca0:	d0f8      	beq.n	800ac94 <_strtod_l+0x1ec>
 800aca2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aca6:	2b08      	cmp	r3, #8
 800aca8:	f200 84c1 	bhi.w	800b62e <_strtod_l+0xb86>
 800acac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acae:	9005      	str	r0, [sp, #20]
 800acb0:	2000      	movs	r0, #0
 800acb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb4:	4606      	mov	r6, r0
 800acb6:	3a30      	subs	r2, #48	; 0x30
 800acb8:	f100 0301 	add.w	r3, r0, #1
 800acbc:	d014      	beq.n	800ace8 <_strtod_l+0x240>
 800acbe:	9905      	ldr	r1, [sp, #20]
 800acc0:	4419      	add	r1, r3
 800acc2:	9105      	str	r1, [sp, #20]
 800acc4:	4633      	mov	r3, r6
 800acc6:	eb00 0c06 	add.w	ip, r0, r6
 800acca:	210a      	movs	r1, #10
 800accc:	4563      	cmp	r3, ip
 800acce:	d113      	bne.n	800acf8 <_strtod_l+0x250>
 800acd0:	1833      	adds	r3, r6, r0
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	f106 0601 	add.w	r6, r6, #1
 800acd8:	4406      	add	r6, r0
 800acda:	dc1a      	bgt.n	800ad12 <_strtod_l+0x26a>
 800acdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acde:	230a      	movs	r3, #10
 800ace0:	fb03 2301 	mla	r3, r3, r1, r2
 800ace4:	9309      	str	r3, [sp, #36]	; 0x24
 800ace6:	2300      	movs	r3, #0
 800ace8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acea:	1c51      	adds	r1, r2, #1
 800acec:	9115      	str	r1, [sp, #84]	; 0x54
 800acee:	7852      	ldrb	r2, [r2, #1]
 800acf0:	4618      	mov	r0, r3
 800acf2:	e7c9      	b.n	800ac88 <_strtod_l+0x1e0>
 800acf4:	4658      	mov	r0, fp
 800acf6:	e7d2      	b.n	800ac9e <_strtod_l+0x1f6>
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	f103 0301 	add.w	r3, r3, #1
 800acfe:	dc03      	bgt.n	800ad08 <_strtod_l+0x260>
 800ad00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad02:	434f      	muls	r7, r1
 800ad04:	9709      	str	r7, [sp, #36]	; 0x24
 800ad06:	e7e1      	b.n	800accc <_strtod_l+0x224>
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	bfd8      	it	le
 800ad0c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ad10:	e7dc      	b.n	800accc <_strtod_l+0x224>
 800ad12:	2e10      	cmp	r6, #16
 800ad14:	bfdc      	itt	le
 800ad16:	230a      	movle	r3, #10
 800ad18:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ad1c:	e7e3      	b.n	800ace6 <_strtod_l+0x23e>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	9305      	str	r3, [sp, #20]
 800ad22:	2301      	movs	r3, #1
 800ad24:	e780      	b.n	800ac28 <_strtod_l+0x180>
 800ad26:	f04f 0c00 	mov.w	ip, #0
 800ad2a:	1caa      	adds	r2, r5, #2
 800ad2c:	9215      	str	r2, [sp, #84]	; 0x54
 800ad2e:	78aa      	ldrb	r2, [r5, #2]
 800ad30:	e788      	b.n	800ac44 <_strtod_l+0x19c>
 800ad32:	f04f 0c01 	mov.w	ip, #1
 800ad36:	e7f8      	b.n	800ad2a <_strtod_l+0x282>
 800ad38:	0800f708 	.word	0x0800f708
 800ad3c:	0800f704 	.word	0x0800f704
 800ad40:	7ff00000 	.word	0x7ff00000
 800ad44:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad46:	1c51      	adds	r1, r2, #1
 800ad48:	9115      	str	r1, [sp, #84]	; 0x54
 800ad4a:	7852      	ldrb	r2, [r2, #1]
 800ad4c:	2a30      	cmp	r2, #48	; 0x30
 800ad4e:	d0f9      	beq.n	800ad44 <_strtod_l+0x29c>
 800ad50:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad54:	2908      	cmp	r1, #8
 800ad56:	f63f af7a 	bhi.w	800ac4e <_strtod_l+0x1a6>
 800ad5a:	3a30      	subs	r2, #48	; 0x30
 800ad5c:	9208      	str	r2, [sp, #32]
 800ad5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad60:	920c      	str	r2, [sp, #48]	; 0x30
 800ad62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad64:	1c57      	adds	r7, r2, #1
 800ad66:	9715      	str	r7, [sp, #84]	; 0x54
 800ad68:	7852      	ldrb	r2, [r2, #1]
 800ad6a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad6e:	f1be 0f09 	cmp.w	lr, #9
 800ad72:	d938      	bls.n	800ade6 <_strtod_l+0x33e>
 800ad74:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad76:	1a7f      	subs	r7, r7, r1
 800ad78:	2f08      	cmp	r7, #8
 800ad7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ad7e:	dc03      	bgt.n	800ad88 <_strtod_l+0x2e0>
 800ad80:	9908      	ldr	r1, [sp, #32]
 800ad82:	428f      	cmp	r7, r1
 800ad84:	bfa8      	it	ge
 800ad86:	460f      	movge	r7, r1
 800ad88:	f1bc 0f00 	cmp.w	ip, #0
 800ad8c:	d000      	beq.n	800ad90 <_strtod_l+0x2e8>
 800ad8e:	427f      	negs	r7, r7
 800ad90:	2e00      	cmp	r6, #0
 800ad92:	d14f      	bne.n	800ae34 <_strtod_l+0x38c>
 800ad94:	9904      	ldr	r1, [sp, #16]
 800ad96:	4301      	orrs	r1, r0
 800ad98:	f47f aec1 	bne.w	800ab1e <_strtod_l+0x76>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f47f aedb 	bne.w	800ab58 <_strtod_l+0xb0>
 800ada2:	2a69      	cmp	r2, #105	; 0x69
 800ada4:	d029      	beq.n	800adfa <_strtod_l+0x352>
 800ada6:	dc26      	bgt.n	800adf6 <_strtod_l+0x34e>
 800ada8:	2a49      	cmp	r2, #73	; 0x49
 800adaa:	d026      	beq.n	800adfa <_strtod_l+0x352>
 800adac:	2a4e      	cmp	r2, #78	; 0x4e
 800adae:	f47f aed3 	bne.w	800ab58 <_strtod_l+0xb0>
 800adb2:	499b      	ldr	r1, [pc, #620]	; (800b020 <_strtod_l+0x578>)
 800adb4:	a815      	add	r0, sp, #84	; 0x54
 800adb6:	f001 ff79 	bl	800ccac <__match>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aecc 	beq.w	800ab58 <_strtod_l+0xb0>
 800adc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b28      	cmp	r3, #40	; 0x28
 800adc6:	d12f      	bne.n	800ae28 <_strtod_l+0x380>
 800adc8:	4996      	ldr	r1, [pc, #600]	; (800b024 <_strtod_l+0x57c>)
 800adca:	aa18      	add	r2, sp, #96	; 0x60
 800adcc:	a815      	add	r0, sp, #84	; 0x54
 800adce:	f001 ff81 	bl	800ccd4 <__hexnan>
 800add2:	2805      	cmp	r0, #5
 800add4:	d128      	bne.n	800ae28 <_strtod_l+0x380>
 800add6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800add8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800addc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ade0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ade4:	e69b      	b.n	800ab1e <_strtod_l+0x76>
 800ade6:	9f08      	ldr	r7, [sp, #32]
 800ade8:	210a      	movs	r1, #10
 800adea:	fb01 2107 	mla	r1, r1, r7, r2
 800adee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800adf2:	9208      	str	r2, [sp, #32]
 800adf4:	e7b5      	b.n	800ad62 <_strtod_l+0x2ba>
 800adf6:	2a6e      	cmp	r2, #110	; 0x6e
 800adf8:	e7d9      	b.n	800adae <_strtod_l+0x306>
 800adfa:	498b      	ldr	r1, [pc, #556]	; (800b028 <_strtod_l+0x580>)
 800adfc:	a815      	add	r0, sp, #84	; 0x54
 800adfe:	f001 ff55 	bl	800ccac <__match>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f43f aea8 	beq.w	800ab58 <_strtod_l+0xb0>
 800ae08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae0a:	4988      	ldr	r1, [pc, #544]	; (800b02c <_strtod_l+0x584>)
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	a815      	add	r0, sp, #84	; 0x54
 800ae10:	9315      	str	r3, [sp, #84]	; 0x54
 800ae12:	f001 ff4b 	bl	800ccac <__match>
 800ae16:	b910      	cbnz	r0, 800ae1e <_strtod_l+0x376>
 800ae18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae1e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b03c <_strtod_l+0x594>
 800ae22:	f04f 0800 	mov.w	r8, #0
 800ae26:	e67a      	b.n	800ab1e <_strtod_l+0x76>
 800ae28:	4881      	ldr	r0, [pc, #516]	; (800b030 <_strtod_l+0x588>)
 800ae2a:	f000 fda9 	bl	800b980 <nan>
 800ae2e:	ec59 8b10 	vmov	r8, r9, d0
 800ae32:	e674      	b.n	800ab1e <_strtod_l+0x76>
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae38:	1afb      	subs	r3, r7, r3
 800ae3a:	f1bb 0f00 	cmp.w	fp, #0
 800ae3e:	bf08      	it	eq
 800ae40:	46b3      	moveq	fp, r6
 800ae42:	2e10      	cmp	r6, #16
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	4635      	mov	r5, r6
 800ae48:	bfa8      	it	ge
 800ae4a:	2510      	movge	r5, #16
 800ae4c:	f7f5 fb5a 	bl	8000504 <__aeabi_ui2d>
 800ae50:	2e09      	cmp	r6, #9
 800ae52:	4680      	mov	r8, r0
 800ae54:	4689      	mov	r9, r1
 800ae56:	dd13      	ble.n	800ae80 <_strtod_l+0x3d8>
 800ae58:	4b76      	ldr	r3, [pc, #472]	; (800b034 <_strtod_l+0x58c>)
 800ae5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae62:	f7f5 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ae66:	4680      	mov	r8, r0
 800ae68:	4650      	mov	r0, sl
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	f7f5 fb4a 	bl	8000504 <__aeabi_ui2d>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4640      	mov	r0, r8
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fa08 	bl	800028c <__adddf3>
 800ae7c:	4680      	mov	r8, r0
 800ae7e:	4689      	mov	r9, r1
 800ae80:	2e0f      	cmp	r6, #15
 800ae82:	dc38      	bgt.n	800aef6 <_strtod_l+0x44e>
 800ae84:	9b08      	ldr	r3, [sp, #32]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f43f ae49 	beq.w	800ab1e <_strtod_l+0x76>
 800ae8c:	dd24      	ble.n	800aed8 <_strtod_l+0x430>
 800ae8e:	2b16      	cmp	r3, #22
 800ae90:	dc0b      	bgt.n	800aeaa <_strtod_l+0x402>
 800ae92:	4968      	ldr	r1, [pc, #416]	; (800b034 <_strtod_l+0x58c>)
 800ae94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae9c:	4642      	mov	r2, r8
 800ae9e:	464b      	mov	r3, r9
 800aea0:	f7f5 fbaa 	bl	80005f8 <__aeabi_dmul>
 800aea4:	4680      	mov	r8, r0
 800aea6:	4689      	mov	r9, r1
 800aea8:	e639      	b.n	800ab1e <_strtod_l+0x76>
 800aeaa:	9a08      	ldr	r2, [sp, #32]
 800aeac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	db20      	blt.n	800aef6 <_strtod_l+0x44e>
 800aeb4:	4c5f      	ldr	r4, [pc, #380]	; (800b034 <_strtod_l+0x58c>)
 800aeb6:	f1c6 060f 	rsb	r6, r6, #15
 800aeba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aebe:	4642      	mov	r2, r8
 800aec0:	464b      	mov	r3, r9
 800aec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	1b9e      	subs	r6, r3, r6
 800aece:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aed2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aed6:	e7e3      	b.n	800aea0 <_strtod_l+0x3f8>
 800aed8:	9b08      	ldr	r3, [sp, #32]
 800aeda:	3316      	adds	r3, #22
 800aedc:	db0b      	blt.n	800aef6 <_strtod_l+0x44e>
 800aede:	9b05      	ldr	r3, [sp, #20]
 800aee0:	1bdf      	subs	r7, r3, r7
 800aee2:	4b54      	ldr	r3, [pc, #336]	; (800b034 <_strtod_l+0x58c>)
 800aee4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeec:	4640      	mov	r0, r8
 800aeee:	4649      	mov	r1, r9
 800aef0:	f7f5 fcac 	bl	800084c <__aeabi_ddiv>
 800aef4:	e7d6      	b.n	800aea4 <_strtod_l+0x3fc>
 800aef6:	9b08      	ldr	r3, [sp, #32]
 800aef8:	1b75      	subs	r5, r6, r5
 800aefa:	441d      	add	r5, r3
 800aefc:	2d00      	cmp	r5, #0
 800aefe:	dd70      	ble.n	800afe2 <_strtod_l+0x53a>
 800af00:	f015 030f 	ands.w	r3, r5, #15
 800af04:	d00a      	beq.n	800af1c <_strtod_l+0x474>
 800af06:	494b      	ldr	r1, [pc, #300]	; (800b034 <_strtod_l+0x58c>)
 800af08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af0c:	4642      	mov	r2, r8
 800af0e:	464b      	mov	r3, r9
 800af10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af14:	f7f5 fb70 	bl	80005f8 <__aeabi_dmul>
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	f035 050f 	bics.w	r5, r5, #15
 800af20:	d04d      	beq.n	800afbe <_strtod_l+0x516>
 800af22:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800af26:	dd22      	ble.n	800af6e <_strtod_l+0x4c6>
 800af28:	2500      	movs	r5, #0
 800af2a:	46ab      	mov	fp, r5
 800af2c:	9509      	str	r5, [sp, #36]	; 0x24
 800af2e:	9505      	str	r5, [sp, #20]
 800af30:	2322      	movs	r3, #34	; 0x22
 800af32:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b03c <_strtod_l+0x594>
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	f04f 0800 	mov.w	r8, #0
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f43f aded 	beq.w	800ab1e <_strtod_l+0x76>
 800af44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af46:	4620      	mov	r0, r4
 800af48:	f002 f9b8 	bl	800d2bc <_Bfree>
 800af4c:	9905      	ldr	r1, [sp, #20]
 800af4e:	4620      	mov	r0, r4
 800af50:	f002 f9b4 	bl	800d2bc <_Bfree>
 800af54:	4659      	mov	r1, fp
 800af56:	4620      	mov	r0, r4
 800af58:	f002 f9b0 	bl	800d2bc <_Bfree>
 800af5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af5e:	4620      	mov	r0, r4
 800af60:	f002 f9ac 	bl	800d2bc <_Bfree>
 800af64:	4629      	mov	r1, r5
 800af66:	4620      	mov	r0, r4
 800af68:	f002 f9a8 	bl	800d2bc <_Bfree>
 800af6c:	e5d7      	b.n	800ab1e <_strtod_l+0x76>
 800af6e:	4b32      	ldr	r3, [pc, #200]	; (800b038 <_strtod_l+0x590>)
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	2300      	movs	r3, #0
 800af74:	112d      	asrs	r5, r5, #4
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	469a      	mov	sl, r3
 800af7c:	2d01      	cmp	r5, #1
 800af7e:	dc21      	bgt.n	800afc4 <_strtod_l+0x51c>
 800af80:	b10b      	cbz	r3, 800af86 <_strtod_l+0x4de>
 800af82:	4680      	mov	r8, r0
 800af84:	4689      	mov	r9, r1
 800af86:	492c      	ldr	r1, [pc, #176]	; (800b038 <_strtod_l+0x590>)
 800af88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800af8c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800af90:	4642      	mov	r2, r8
 800af92:	464b      	mov	r3, r9
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	f7f5 fb2e 	bl	80005f8 <__aeabi_dmul>
 800af9c:	4b27      	ldr	r3, [pc, #156]	; (800b03c <_strtod_l+0x594>)
 800af9e:	460a      	mov	r2, r1
 800afa0:	400b      	ands	r3, r1
 800afa2:	4927      	ldr	r1, [pc, #156]	; (800b040 <_strtod_l+0x598>)
 800afa4:	428b      	cmp	r3, r1
 800afa6:	4680      	mov	r8, r0
 800afa8:	d8be      	bhi.n	800af28 <_strtod_l+0x480>
 800afaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afae:	428b      	cmp	r3, r1
 800afb0:	bf86      	itte	hi
 800afb2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b044 <_strtod_l+0x59c>
 800afb6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800afba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800afbe:	2300      	movs	r3, #0
 800afc0:	9304      	str	r3, [sp, #16]
 800afc2:	e07b      	b.n	800b0bc <_strtod_l+0x614>
 800afc4:	07ea      	lsls	r2, r5, #31
 800afc6:	d505      	bpl.n	800afd4 <_strtod_l+0x52c>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 fb13 	bl	80005f8 <__aeabi_dmul>
 800afd2:	2301      	movs	r3, #1
 800afd4:	9a04      	ldr	r2, [sp, #16]
 800afd6:	3208      	adds	r2, #8
 800afd8:	f10a 0a01 	add.w	sl, sl, #1
 800afdc:	106d      	asrs	r5, r5, #1
 800afde:	9204      	str	r2, [sp, #16]
 800afe0:	e7cc      	b.n	800af7c <_strtod_l+0x4d4>
 800afe2:	d0ec      	beq.n	800afbe <_strtod_l+0x516>
 800afe4:	426d      	negs	r5, r5
 800afe6:	f015 020f 	ands.w	r2, r5, #15
 800afea:	d00a      	beq.n	800b002 <_strtod_l+0x55a>
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <_strtod_l+0x58c>)
 800afee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affa:	f7f5 fc27 	bl	800084c <__aeabi_ddiv>
 800affe:	4680      	mov	r8, r0
 800b000:	4689      	mov	r9, r1
 800b002:	112d      	asrs	r5, r5, #4
 800b004:	d0db      	beq.n	800afbe <_strtod_l+0x516>
 800b006:	2d1f      	cmp	r5, #31
 800b008:	dd1e      	ble.n	800b048 <_strtod_l+0x5a0>
 800b00a:	2500      	movs	r5, #0
 800b00c:	46ab      	mov	fp, r5
 800b00e:	9509      	str	r5, [sp, #36]	; 0x24
 800b010:	9505      	str	r5, [sp, #20]
 800b012:	2322      	movs	r3, #34	; 0x22
 800b014:	f04f 0800 	mov.w	r8, #0
 800b018:	f04f 0900 	mov.w	r9, #0
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	e78d      	b.n	800af3c <_strtod_l+0x494>
 800b020:	0800f6dd 	.word	0x0800f6dd
 800b024:	0800f71c 	.word	0x0800f71c
 800b028:	0800f6d5 	.word	0x0800f6d5
 800b02c:	0800f911 	.word	0x0800f911
 800b030:	0800f90d 	.word	0x0800f90d
 800b034:	0800fa78 	.word	0x0800fa78
 800b038:	0800fa50 	.word	0x0800fa50
 800b03c:	7ff00000 	.word	0x7ff00000
 800b040:	7ca00000 	.word	0x7ca00000
 800b044:	7fefffff 	.word	0x7fefffff
 800b048:	f015 0310 	ands.w	r3, r5, #16
 800b04c:	bf18      	it	ne
 800b04e:	236a      	movne	r3, #106	; 0x6a
 800b050:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b3f4 <_strtod_l+0x94c>
 800b054:	9304      	str	r3, [sp, #16]
 800b056:	4640      	mov	r0, r8
 800b058:	4649      	mov	r1, r9
 800b05a:	2300      	movs	r3, #0
 800b05c:	07ea      	lsls	r2, r5, #31
 800b05e:	d504      	bpl.n	800b06a <_strtod_l+0x5c2>
 800b060:	e9da 2300 	ldrd	r2, r3, [sl]
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	2301      	movs	r3, #1
 800b06a:	106d      	asrs	r5, r5, #1
 800b06c:	f10a 0a08 	add.w	sl, sl, #8
 800b070:	d1f4      	bne.n	800b05c <_strtod_l+0x5b4>
 800b072:	b10b      	cbz	r3, 800b078 <_strtod_l+0x5d0>
 800b074:	4680      	mov	r8, r0
 800b076:	4689      	mov	r9, r1
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	b1bb      	cbz	r3, 800b0ac <_strtod_l+0x604>
 800b07c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b080:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b084:	2b00      	cmp	r3, #0
 800b086:	4649      	mov	r1, r9
 800b088:	dd10      	ble.n	800b0ac <_strtod_l+0x604>
 800b08a:	2b1f      	cmp	r3, #31
 800b08c:	f340 811e 	ble.w	800b2cc <_strtod_l+0x824>
 800b090:	2b34      	cmp	r3, #52	; 0x34
 800b092:	bfde      	ittt	le
 800b094:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b098:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b09c:	4093      	lslle	r3, r2
 800b09e:	f04f 0800 	mov.w	r8, #0
 800b0a2:	bfcc      	ite	gt
 800b0a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b0a8:	ea03 0901 	andle.w	r9, r3, r1
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1a6      	bne.n	800b00a <_strtod_l+0x562>
 800b0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0c2:	4633      	mov	r3, r6
 800b0c4:	465a      	mov	r2, fp
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f002 f960 	bl	800d38c <__s2b>
 800b0cc:	9009      	str	r0, [sp, #36]	; 0x24
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f af2a 	beq.w	800af28 <_strtod_l+0x480>
 800b0d4:	9a08      	ldr	r2, [sp, #32]
 800b0d6:	9b05      	ldr	r3, [sp, #20]
 800b0d8:	2a00      	cmp	r2, #0
 800b0da:	eba3 0307 	sub.w	r3, r3, r7
 800b0de:	bfa8      	it	ge
 800b0e0:	2300      	movge	r3, #0
 800b0e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e4:	2500      	movs	r5, #0
 800b0e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0ea:	9312      	str	r3, [sp, #72]	; 0x48
 800b0ec:	46ab      	mov	fp, r5
 800b0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	f002 f8a2 	bl	800d23c <_Balloc>
 800b0f8:	9005      	str	r0, [sp, #20]
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f43f af18 	beq.w	800af30 <_strtod_l+0x488>
 800b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b102:	691a      	ldr	r2, [r3, #16]
 800b104:	3202      	adds	r2, #2
 800b106:	f103 010c 	add.w	r1, r3, #12
 800b10a:	0092      	lsls	r2, r2, #2
 800b10c:	300c      	adds	r0, #12
 800b10e:	f000 fc28 	bl	800b962 <memcpy>
 800b112:	ec49 8b10 	vmov	d0, r8, r9
 800b116:	aa18      	add	r2, sp, #96	; 0x60
 800b118:	a917      	add	r1, sp, #92	; 0x5c
 800b11a:	4620      	mov	r0, r4
 800b11c:	f002 fc6a 	bl	800d9f4 <__d2b>
 800b120:	ec49 8b18 	vmov	d8, r8, r9
 800b124:	9016      	str	r0, [sp, #88]	; 0x58
 800b126:	2800      	cmp	r0, #0
 800b128:	f43f af02 	beq.w	800af30 <_strtod_l+0x488>
 800b12c:	2101      	movs	r1, #1
 800b12e:	4620      	mov	r0, r4
 800b130:	f002 f9c4 	bl	800d4bc <__i2b>
 800b134:	4683      	mov	fp, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	f43f aefa 	beq.w	800af30 <_strtod_l+0x488>
 800b13c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b13e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b140:	2e00      	cmp	r6, #0
 800b142:	bfab      	itete	ge
 800b144:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b146:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b14a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b14e:	bfac      	ite	ge
 800b150:	eb06 0a03 	addge.w	sl, r6, r3
 800b154:	1b9f      	sublt	r7, r3, r6
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	1af6      	subs	r6, r6, r3
 800b15a:	4416      	add	r6, r2
 800b15c:	4ba0      	ldr	r3, [pc, #640]	; (800b3e0 <_strtod_l+0x938>)
 800b15e:	3e01      	subs	r6, #1
 800b160:	429e      	cmp	r6, r3
 800b162:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b166:	f280 80c4 	bge.w	800b2f2 <_strtod_l+0x84a>
 800b16a:	1b9b      	subs	r3, r3, r6
 800b16c:	2b1f      	cmp	r3, #31
 800b16e:	eba2 0203 	sub.w	r2, r2, r3
 800b172:	f04f 0101 	mov.w	r1, #1
 800b176:	f300 80b0 	bgt.w	800b2da <_strtod_l+0x832>
 800b17a:	fa01 f303 	lsl.w	r3, r1, r3
 800b17e:	930e      	str	r3, [sp, #56]	; 0x38
 800b180:	2300      	movs	r3, #0
 800b182:	930d      	str	r3, [sp, #52]	; 0x34
 800b184:	eb0a 0602 	add.w	r6, sl, r2
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	45b2      	cmp	sl, r6
 800b18c:	4417      	add	r7, r2
 800b18e:	441f      	add	r7, r3
 800b190:	4653      	mov	r3, sl
 800b192:	bfa8      	it	ge
 800b194:	4633      	movge	r3, r6
 800b196:	42bb      	cmp	r3, r7
 800b198:	bfa8      	it	ge
 800b19a:	463b      	movge	r3, r7
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfc2      	ittt	gt
 800b1a0:	1af6      	subgt	r6, r6, r3
 800b1a2:	1aff      	subgt	r7, r7, r3
 800b1a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b1a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dd17      	ble.n	800b1de <_strtod_l+0x736>
 800b1ae:	4659      	mov	r1, fp
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f002 fa42 	bl	800d63c <__pow5mult>
 800b1b8:	4683      	mov	fp, r0
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f43f aeb8 	beq.w	800af30 <_strtod_l+0x488>
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f002 f98f 	bl	800d4e8 <__multiply>
 800b1ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f43f aeaf 	beq.w	800af30 <_strtod_l+0x488>
 800b1d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f002 f871 	bl	800d2bc <_Bfree>
 800b1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1dc:	9316      	str	r3, [sp, #88]	; 0x58
 800b1de:	2e00      	cmp	r6, #0
 800b1e0:	f300 808c 	bgt.w	800b2fc <_strtod_l+0x854>
 800b1e4:	9b08      	ldr	r3, [sp, #32]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	dd08      	ble.n	800b1fc <_strtod_l+0x754>
 800b1ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1ec:	9905      	ldr	r1, [sp, #20]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f002 fa24 	bl	800d63c <__pow5mult>
 800b1f4:	9005      	str	r0, [sp, #20]
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f43f ae9a 	beq.w	800af30 <_strtod_l+0x488>
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	dd08      	ble.n	800b212 <_strtod_l+0x76a>
 800b200:	9905      	ldr	r1, [sp, #20]
 800b202:	463a      	mov	r2, r7
 800b204:	4620      	mov	r0, r4
 800b206:	f002 fa73 	bl	800d6f0 <__lshift>
 800b20a:	9005      	str	r0, [sp, #20]
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f43f ae8f 	beq.w	800af30 <_strtod_l+0x488>
 800b212:	f1ba 0f00 	cmp.w	sl, #0
 800b216:	dd08      	ble.n	800b22a <_strtod_l+0x782>
 800b218:	4659      	mov	r1, fp
 800b21a:	4652      	mov	r2, sl
 800b21c:	4620      	mov	r0, r4
 800b21e:	f002 fa67 	bl	800d6f0 <__lshift>
 800b222:	4683      	mov	fp, r0
 800b224:	2800      	cmp	r0, #0
 800b226:	f43f ae83 	beq.w	800af30 <_strtod_l+0x488>
 800b22a:	9a05      	ldr	r2, [sp, #20]
 800b22c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b22e:	4620      	mov	r0, r4
 800b230:	f002 fae6 	bl	800d800 <__mdiff>
 800b234:	4605      	mov	r5, r0
 800b236:	2800      	cmp	r0, #0
 800b238:	f43f ae7a 	beq.w	800af30 <_strtod_l+0x488>
 800b23c:	68c3      	ldr	r3, [r0, #12]
 800b23e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b240:	2300      	movs	r3, #0
 800b242:	60c3      	str	r3, [r0, #12]
 800b244:	4659      	mov	r1, fp
 800b246:	f002 fabf 	bl	800d7c8 <__mcmp>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	da60      	bge.n	800b310 <_strtod_l+0x868>
 800b24e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b250:	ea53 0308 	orrs.w	r3, r3, r8
 800b254:	f040 8084 	bne.w	800b360 <_strtod_l+0x8b8>
 800b258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d17f      	bne.n	800b360 <_strtod_l+0x8b8>
 800b260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b264:	0d1b      	lsrs	r3, r3, #20
 800b266:	051b      	lsls	r3, r3, #20
 800b268:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b26c:	d978      	bls.n	800b360 <_strtod_l+0x8b8>
 800b26e:	696b      	ldr	r3, [r5, #20]
 800b270:	b913      	cbnz	r3, 800b278 <_strtod_l+0x7d0>
 800b272:	692b      	ldr	r3, [r5, #16]
 800b274:	2b01      	cmp	r3, #1
 800b276:	dd73      	ble.n	800b360 <_strtod_l+0x8b8>
 800b278:	4629      	mov	r1, r5
 800b27a:	2201      	movs	r2, #1
 800b27c:	4620      	mov	r0, r4
 800b27e:	f002 fa37 	bl	800d6f0 <__lshift>
 800b282:	4659      	mov	r1, fp
 800b284:	4605      	mov	r5, r0
 800b286:	f002 fa9f 	bl	800d7c8 <__mcmp>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	dd68      	ble.n	800b360 <_strtod_l+0x8b8>
 800b28e:	9904      	ldr	r1, [sp, #16]
 800b290:	4a54      	ldr	r2, [pc, #336]	; (800b3e4 <_strtod_l+0x93c>)
 800b292:	464b      	mov	r3, r9
 800b294:	2900      	cmp	r1, #0
 800b296:	f000 8084 	beq.w	800b3a2 <_strtod_l+0x8fa>
 800b29a:	ea02 0109 	and.w	r1, r2, r9
 800b29e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2a2:	dc7e      	bgt.n	800b3a2 <_strtod_l+0x8fa>
 800b2a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2a8:	f77f aeb3 	ble.w	800b012 <_strtod_l+0x56a>
 800b2ac:	4b4e      	ldr	r3, [pc, #312]	; (800b3e8 <_strtod_l+0x940>)
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	4b4a      	ldr	r3, [pc, #296]	; (800b3e4 <_strtod_l+0x93c>)
 800b2ba:	400b      	ands	r3, r1
 800b2bc:	4680      	mov	r8, r0
 800b2be:	4689      	mov	r9, r1
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f47f ae3f 	bne.w	800af44 <_strtod_l+0x49c>
 800b2c6:	2322      	movs	r3, #34	; 0x22
 800b2c8:	6023      	str	r3, [r4, #0]
 800b2ca:	e63b      	b.n	800af44 <_strtod_l+0x49c>
 800b2cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d4:	ea03 0808 	and.w	r8, r3, r8
 800b2d8:	e6e8      	b.n	800b0ac <_strtod_l+0x604>
 800b2da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b2de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b2e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b2e6:	36e2      	adds	r6, #226	; 0xe2
 800b2e8:	fa01 f306 	lsl.w	r3, r1, r6
 800b2ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b2f0:	e748      	b.n	800b184 <_strtod_l+0x6dc>
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b2fa:	e743      	b.n	800b184 <_strtod_l+0x6dc>
 800b2fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b2fe:	4632      	mov	r2, r6
 800b300:	4620      	mov	r0, r4
 800b302:	f002 f9f5 	bl	800d6f0 <__lshift>
 800b306:	9016      	str	r0, [sp, #88]	; 0x58
 800b308:	2800      	cmp	r0, #0
 800b30a:	f47f af6b 	bne.w	800b1e4 <_strtod_l+0x73c>
 800b30e:	e60f      	b.n	800af30 <_strtod_l+0x488>
 800b310:	46ca      	mov	sl, r9
 800b312:	d171      	bne.n	800b3f8 <_strtod_l+0x950>
 800b314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b316:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b31a:	b352      	cbz	r2, 800b372 <_strtod_l+0x8ca>
 800b31c:	4a33      	ldr	r2, [pc, #204]	; (800b3ec <_strtod_l+0x944>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d12a      	bne.n	800b378 <_strtod_l+0x8d0>
 800b322:	9b04      	ldr	r3, [sp, #16]
 800b324:	4641      	mov	r1, r8
 800b326:	b1fb      	cbz	r3, 800b368 <_strtod_l+0x8c0>
 800b328:	4b2e      	ldr	r3, [pc, #184]	; (800b3e4 <_strtod_l+0x93c>)
 800b32a:	ea09 0303 	and.w	r3, r9, r3
 800b32e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b336:	d81a      	bhi.n	800b36e <_strtod_l+0x8c6>
 800b338:	0d1b      	lsrs	r3, r3, #20
 800b33a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b33e:	fa02 f303 	lsl.w	r3, r2, r3
 800b342:	4299      	cmp	r1, r3
 800b344:	d118      	bne.n	800b378 <_strtod_l+0x8d0>
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <_strtod_l+0x948>)
 800b348:	459a      	cmp	sl, r3
 800b34a:	d102      	bne.n	800b352 <_strtod_l+0x8aa>
 800b34c:	3101      	adds	r1, #1
 800b34e:	f43f adef 	beq.w	800af30 <_strtod_l+0x488>
 800b352:	4b24      	ldr	r3, [pc, #144]	; (800b3e4 <_strtod_l+0x93c>)
 800b354:	ea0a 0303 	and.w	r3, sl, r3
 800b358:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b35c:	f04f 0800 	mov.w	r8, #0
 800b360:	9b04      	ldr	r3, [sp, #16]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1a2      	bne.n	800b2ac <_strtod_l+0x804>
 800b366:	e5ed      	b.n	800af44 <_strtod_l+0x49c>
 800b368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b36c:	e7e9      	b.n	800b342 <_strtod_l+0x89a>
 800b36e:	4613      	mov	r3, r2
 800b370:	e7e7      	b.n	800b342 <_strtod_l+0x89a>
 800b372:	ea53 0308 	orrs.w	r3, r3, r8
 800b376:	d08a      	beq.n	800b28e <_strtod_l+0x7e6>
 800b378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b37a:	b1e3      	cbz	r3, 800b3b6 <_strtod_l+0x90e>
 800b37c:	ea13 0f0a 	tst.w	r3, sl
 800b380:	d0ee      	beq.n	800b360 <_strtod_l+0x8b8>
 800b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b384:	9a04      	ldr	r2, [sp, #16]
 800b386:	4640      	mov	r0, r8
 800b388:	4649      	mov	r1, r9
 800b38a:	b1c3      	cbz	r3, 800b3be <_strtod_l+0x916>
 800b38c:	f7ff fb6e 	bl	800aa6c <sulp>
 800b390:	4602      	mov	r2, r0
 800b392:	460b      	mov	r3, r1
 800b394:	ec51 0b18 	vmov	r0, r1, d8
 800b398:	f7f4 ff78 	bl	800028c <__adddf3>
 800b39c:	4680      	mov	r8, r0
 800b39e:	4689      	mov	r9, r1
 800b3a0:	e7de      	b.n	800b360 <_strtod_l+0x8b8>
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b3ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b3b0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b3b4:	e7d4      	b.n	800b360 <_strtod_l+0x8b8>
 800b3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b8:	ea13 0f08 	tst.w	r3, r8
 800b3bc:	e7e0      	b.n	800b380 <_strtod_l+0x8d8>
 800b3be:	f7ff fb55 	bl	800aa6c <sulp>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	ec51 0b18 	vmov	r0, r1, d8
 800b3ca:	f7f4 ff5d 	bl	8000288 <__aeabi_dsub>
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	4689      	mov	r9, r1
 800b3d6:	f7f5 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0c0      	beq.n	800b360 <_strtod_l+0x8b8>
 800b3de:	e618      	b.n	800b012 <_strtod_l+0x56a>
 800b3e0:	fffffc02 	.word	0xfffffc02
 800b3e4:	7ff00000 	.word	0x7ff00000
 800b3e8:	39500000 	.word	0x39500000
 800b3ec:	000fffff 	.word	0x000fffff
 800b3f0:	7fefffff 	.word	0x7fefffff
 800b3f4:	0800f730 	.word	0x0800f730
 800b3f8:	4659      	mov	r1, fp
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f002 fb54 	bl	800daa8 <__ratio>
 800b400:	ec57 6b10 	vmov	r6, r7, d0
 800b404:	ee10 0a10 	vmov	r0, s0
 800b408:	2200      	movs	r2, #0
 800b40a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b40e:	4639      	mov	r1, r7
 800b410:	f7f5 fb6e 	bl	8000af0 <__aeabi_dcmple>
 800b414:	2800      	cmp	r0, #0
 800b416:	d071      	beq.n	800b4fc <_strtod_l+0xa54>
 800b418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d17c      	bne.n	800b518 <_strtod_l+0xa70>
 800b41e:	f1b8 0f00 	cmp.w	r8, #0
 800b422:	d15a      	bne.n	800b4da <_strtod_l+0xa32>
 800b424:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d15d      	bne.n	800b4e8 <_strtod_l+0xa40>
 800b42c:	4b90      	ldr	r3, [pc, #576]	; (800b670 <_strtod_l+0xbc8>)
 800b42e:	2200      	movs	r2, #0
 800b430:	4630      	mov	r0, r6
 800b432:	4639      	mov	r1, r7
 800b434:	f7f5 fb52 	bl	8000adc <__aeabi_dcmplt>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d15c      	bne.n	800b4f6 <_strtod_l+0xa4e>
 800b43c:	4630      	mov	r0, r6
 800b43e:	4639      	mov	r1, r7
 800b440:	4b8c      	ldr	r3, [pc, #560]	; (800b674 <_strtod_l+0xbcc>)
 800b442:	2200      	movs	r2, #0
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b450:	9606      	str	r6, [sp, #24]
 800b452:	9307      	str	r3, [sp, #28]
 800b454:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b458:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b45c:	4b86      	ldr	r3, [pc, #536]	; (800b678 <_strtod_l+0xbd0>)
 800b45e:	ea0a 0303 	and.w	r3, sl, r3
 800b462:	930d      	str	r3, [sp, #52]	; 0x34
 800b464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b466:	4b85      	ldr	r3, [pc, #532]	; (800b67c <_strtod_l+0xbd4>)
 800b468:	429a      	cmp	r2, r3
 800b46a:	f040 8090 	bne.w	800b58e <_strtod_l+0xae6>
 800b46e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b472:	ec49 8b10 	vmov	d0, r8, r9
 800b476:	f002 fa4d 	bl	800d914 <__ulp>
 800b47a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b47e:	ec51 0b10 	vmov	r0, r1, d0
 800b482:	f7f5 f8b9 	bl	80005f8 <__aeabi_dmul>
 800b486:	4642      	mov	r2, r8
 800b488:	464b      	mov	r3, r9
 800b48a:	f7f4 feff 	bl	800028c <__adddf3>
 800b48e:	460b      	mov	r3, r1
 800b490:	4979      	ldr	r1, [pc, #484]	; (800b678 <_strtod_l+0xbd0>)
 800b492:	4a7b      	ldr	r2, [pc, #492]	; (800b680 <_strtod_l+0xbd8>)
 800b494:	4019      	ands	r1, r3
 800b496:	4291      	cmp	r1, r2
 800b498:	4680      	mov	r8, r0
 800b49a:	d944      	bls.n	800b526 <_strtod_l+0xa7e>
 800b49c:	ee18 2a90 	vmov	r2, s17
 800b4a0:	4b78      	ldr	r3, [pc, #480]	; (800b684 <_strtod_l+0xbdc>)
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d104      	bne.n	800b4b0 <_strtod_l+0xa08>
 800b4a6:	ee18 3a10 	vmov	r3, s16
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	f43f ad40 	beq.w	800af30 <_strtod_l+0x488>
 800b4b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b684 <_strtod_l+0xbdc>
 800b4b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b4b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f001 fefe 	bl	800d2bc <_Bfree>
 800b4c0:	9905      	ldr	r1, [sp, #20]
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f001 fefa 	bl	800d2bc <_Bfree>
 800b4c8:	4659      	mov	r1, fp
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f001 fef6 	bl	800d2bc <_Bfree>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f001 fef2 	bl	800d2bc <_Bfree>
 800b4d8:	e609      	b.n	800b0ee <_strtod_l+0x646>
 800b4da:	f1b8 0f01 	cmp.w	r8, #1
 800b4de:	d103      	bne.n	800b4e8 <_strtod_l+0xa40>
 800b4e0:	f1b9 0f00 	cmp.w	r9, #0
 800b4e4:	f43f ad95 	beq.w	800b012 <_strtod_l+0x56a>
 800b4e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b640 <_strtod_l+0xb98>
 800b4ec:	4f60      	ldr	r7, [pc, #384]	; (800b670 <_strtod_l+0xbc8>)
 800b4ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	e7ae      	b.n	800b454 <_strtod_l+0x9ac>
 800b4f6:	4f5f      	ldr	r7, [pc, #380]	; (800b674 <_strtod_l+0xbcc>)
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	e7a7      	b.n	800b44c <_strtod_l+0x9a4>
 800b4fc:	4b5d      	ldr	r3, [pc, #372]	; (800b674 <_strtod_l+0xbcc>)
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	2200      	movs	r2, #0
 800b504:	f7f5 f878 	bl	80005f8 <__aeabi_dmul>
 800b508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d09c      	beq.n	800b44c <_strtod_l+0x9a4>
 800b512:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b516:	e79d      	b.n	800b454 <_strtod_l+0x9ac>
 800b518:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b648 <_strtod_l+0xba0>
 800b51c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b520:	ec57 6b17 	vmov	r6, r7, d7
 800b524:	e796      	b.n	800b454 <_strtod_l+0x9ac>
 800b526:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b52a:	9b04      	ldr	r3, [sp, #16]
 800b52c:	46ca      	mov	sl, r9
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1c2      	bne.n	800b4b8 <_strtod_l+0xa10>
 800b532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b538:	0d1b      	lsrs	r3, r3, #20
 800b53a:	051b      	lsls	r3, r3, #20
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d1bb      	bne.n	800b4b8 <_strtod_l+0xa10>
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 fb68 	bl	8000c18 <__aeabi_d2lz>
 800b548:	f7f5 f828 	bl	800059c <__aeabi_l2d>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4630      	mov	r0, r6
 800b552:	4639      	mov	r1, r7
 800b554:	f7f4 fe98 	bl	8000288 <__aeabi_dsub>
 800b558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b55a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b55e:	ea43 0308 	orr.w	r3, r3, r8
 800b562:	4313      	orrs	r3, r2
 800b564:	4606      	mov	r6, r0
 800b566:	460f      	mov	r7, r1
 800b568:	d054      	beq.n	800b614 <_strtod_l+0xb6c>
 800b56a:	a339      	add	r3, pc, #228	; (adr r3, 800b650 <_strtod_l+0xba8>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f5 fab4 	bl	8000adc <__aeabi_dcmplt>
 800b574:	2800      	cmp	r0, #0
 800b576:	f47f ace5 	bne.w	800af44 <_strtod_l+0x49c>
 800b57a:	a337      	add	r3, pc, #220	; (adr r3, 800b658 <_strtod_l+0xbb0>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	f7f5 fac8 	bl	8000b18 <__aeabi_dcmpgt>
 800b588:	2800      	cmp	r0, #0
 800b58a:	d095      	beq.n	800b4b8 <_strtod_l+0xa10>
 800b58c:	e4da      	b.n	800af44 <_strtod_l+0x49c>
 800b58e:	9b04      	ldr	r3, [sp, #16]
 800b590:	b333      	cbz	r3, 800b5e0 <_strtod_l+0xb38>
 800b592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b594:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b598:	d822      	bhi.n	800b5e0 <_strtod_l+0xb38>
 800b59a:	a331      	add	r3, pc, #196	; (adr r3, 800b660 <_strtod_l+0xbb8>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	f7f5 faa4 	bl	8000af0 <__aeabi_dcmple>
 800b5a8:	b1a0      	cbz	r0, 800b5d4 <_strtod_l+0xb2c>
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7f5 fafb 	bl	8000ba8 <__aeabi_d2uiz>
 800b5b2:	2801      	cmp	r0, #1
 800b5b4:	bf38      	it	cc
 800b5b6:	2001      	movcc	r0, #1
 800b5b8:	f7f4 ffa4 	bl	8000504 <__aeabi_ui2d>
 800b5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5be:	4606      	mov	r6, r0
 800b5c0:	460f      	mov	r7, r1
 800b5c2:	bb23      	cbnz	r3, 800b60e <_strtod_l+0xb66>
 800b5c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5c8:	9010      	str	r0, [sp, #64]	; 0x40
 800b5ca:	9311      	str	r3, [sp, #68]	; 0x44
 800b5cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b5dc:	1a9b      	subs	r3, r3, r2
 800b5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b5e8:	eef0 0a68 	vmov.f32	s1, s17
 800b5ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b5f0:	f002 f990 	bl	800d914 <__ulp>
 800b5f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b5f8:	ec53 2b10 	vmov	r2, r3, d0
 800b5fc:	f7f4 fffc 	bl	80005f8 <__aeabi_dmul>
 800b600:	ec53 2b18 	vmov	r2, r3, d8
 800b604:	f7f4 fe42 	bl	800028c <__adddf3>
 800b608:	4680      	mov	r8, r0
 800b60a:	4689      	mov	r9, r1
 800b60c:	e78d      	b.n	800b52a <_strtod_l+0xa82>
 800b60e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b612:	e7db      	b.n	800b5cc <_strtod_l+0xb24>
 800b614:	a314      	add	r3, pc, #80	; (adr r3, 800b668 <_strtod_l+0xbc0>)
 800b616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61a:	f7f5 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800b61e:	e7b3      	b.n	800b588 <_strtod_l+0xae0>
 800b620:	2300      	movs	r3, #0
 800b622:	930a      	str	r3, [sp, #40]	; 0x28
 800b624:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b626:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b628:	6013      	str	r3, [r2, #0]
 800b62a:	f7ff ba7c 	b.w	800ab26 <_strtod_l+0x7e>
 800b62e:	2a65      	cmp	r2, #101	; 0x65
 800b630:	f43f ab75 	beq.w	800ad1e <_strtod_l+0x276>
 800b634:	2a45      	cmp	r2, #69	; 0x45
 800b636:	f43f ab72 	beq.w	800ad1e <_strtod_l+0x276>
 800b63a:	2301      	movs	r3, #1
 800b63c:	f7ff bbaa 	b.w	800ad94 <_strtod_l+0x2ec>
 800b640:	00000000 	.word	0x00000000
 800b644:	bff00000 	.word	0xbff00000
 800b648:	00000000 	.word	0x00000000
 800b64c:	3ff00000 	.word	0x3ff00000
 800b650:	94a03595 	.word	0x94a03595
 800b654:	3fdfffff 	.word	0x3fdfffff
 800b658:	35afe535 	.word	0x35afe535
 800b65c:	3fe00000 	.word	0x3fe00000
 800b660:	ffc00000 	.word	0xffc00000
 800b664:	41dfffff 	.word	0x41dfffff
 800b668:	94a03595 	.word	0x94a03595
 800b66c:	3fcfffff 	.word	0x3fcfffff
 800b670:	3ff00000 	.word	0x3ff00000
 800b674:	3fe00000 	.word	0x3fe00000
 800b678:	7ff00000 	.word	0x7ff00000
 800b67c:	7fe00000 	.word	0x7fe00000
 800b680:	7c9fffff 	.word	0x7c9fffff
 800b684:	7fefffff 	.word	0x7fefffff

0800b688 <strtod>:
 800b688:	460a      	mov	r2, r1
 800b68a:	4601      	mov	r1, r0
 800b68c:	4802      	ldr	r0, [pc, #8]	; (800b698 <strtod+0x10>)
 800b68e:	4b03      	ldr	r3, [pc, #12]	; (800b69c <strtod+0x14>)
 800b690:	6800      	ldr	r0, [r0, #0]
 800b692:	f7ff ba09 	b.w	800aaa8 <_strtod_l>
 800b696:	bf00      	nop
 800b698:	200005d8 	.word	0x200005d8
 800b69c:	20000420 	.word	0x20000420

0800b6a0 <_strtol_l.constprop.0>:
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a6:	d001      	beq.n	800b6ac <_strtol_l.constprop.0+0xc>
 800b6a8:	2b24      	cmp	r3, #36	; 0x24
 800b6aa:	d906      	bls.n	800b6ba <_strtol_l.constprop.0+0x1a>
 800b6ac:	f000 f92c 	bl	800b908 <__errno>
 800b6b0:	2316      	movs	r3, #22
 800b6b2:	6003      	str	r3, [r0, #0]
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b7a0 <_strtol_l.constprop.0+0x100>
 800b6be:	460d      	mov	r5, r1
 800b6c0:	462e      	mov	r6, r5
 800b6c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b6ca:	f017 0708 	ands.w	r7, r7, #8
 800b6ce:	d1f7      	bne.n	800b6c0 <_strtol_l.constprop.0+0x20>
 800b6d0:	2c2d      	cmp	r4, #45	; 0x2d
 800b6d2:	d132      	bne.n	800b73a <_strtol_l.constprop.0+0x9a>
 800b6d4:	782c      	ldrb	r4, [r5, #0]
 800b6d6:	2701      	movs	r7, #1
 800b6d8:	1cb5      	adds	r5, r6, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d05b      	beq.n	800b796 <_strtol_l.constprop.0+0xf6>
 800b6de:	2b10      	cmp	r3, #16
 800b6e0:	d109      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b6e2:	2c30      	cmp	r4, #48	; 0x30
 800b6e4:	d107      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b6e6:	782c      	ldrb	r4, [r5, #0]
 800b6e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b6ec:	2c58      	cmp	r4, #88	; 0x58
 800b6ee:	d14d      	bne.n	800b78c <_strtol_l.constprop.0+0xec>
 800b6f0:	786c      	ldrb	r4, [r5, #1]
 800b6f2:	2310      	movs	r3, #16
 800b6f4:	3502      	adds	r5, #2
 800b6f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b6fa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b6fe:	f04f 0e00 	mov.w	lr, #0
 800b702:	fbb8 f9f3 	udiv	r9, r8, r3
 800b706:	4676      	mov	r6, lr
 800b708:	fb03 8a19 	mls	sl, r3, r9, r8
 800b70c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b710:	f1bc 0f09 	cmp.w	ip, #9
 800b714:	d816      	bhi.n	800b744 <_strtol_l.constprop.0+0xa4>
 800b716:	4664      	mov	r4, ip
 800b718:	42a3      	cmp	r3, r4
 800b71a:	dd24      	ble.n	800b766 <_strtol_l.constprop.0+0xc6>
 800b71c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b720:	d008      	beq.n	800b734 <_strtol_l.constprop.0+0x94>
 800b722:	45b1      	cmp	r9, r6
 800b724:	d31c      	bcc.n	800b760 <_strtol_l.constprop.0+0xc0>
 800b726:	d101      	bne.n	800b72c <_strtol_l.constprop.0+0x8c>
 800b728:	45a2      	cmp	sl, r4
 800b72a:	db19      	blt.n	800b760 <_strtol_l.constprop.0+0xc0>
 800b72c:	fb06 4603 	mla	r6, r6, r3, r4
 800b730:	f04f 0e01 	mov.w	lr, #1
 800b734:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b738:	e7e8      	b.n	800b70c <_strtol_l.constprop.0+0x6c>
 800b73a:	2c2b      	cmp	r4, #43	; 0x2b
 800b73c:	bf04      	itt	eq
 800b73e:	782c      	ldrbeq	r4, [r5, #0]
 800b740:	1cb5      	addeq	r5, r6, #2
 800b742:	e7ca      	b.n	800b6da <_strtol_l.constprop.0+0x3a>
 800b744:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b748:	f1bc 0f19 	cmp.w	ip, #25
 800b74c:	d801      	bhi.n	800b752 <_strtol_l.constprop.0+0xb2>
 800b74e:	3c37      	subs	r4, #55	; 0x37
 800b750:	e7e2      	b.n	800b718 <_strtol_l.constprop.0+0x78>
 800b752:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b756:	f1bc 0f19 	cmp.w	ip, #25
 800b75a:	d804      	bhi.n	800b766 <_strtol_l.constprop.0+0xc6>
 800b75c:	3c57      	subs	r4, #87	; 0x57
 800b75e:	e7db      	b.n	800b718 <_strtol_l.constprop.0+0x78>
 800b760:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b764:	e7e6      	b.n	800b734 <_strtol_l.constprop.0+0x94>
 800b766:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b76a:	d105      	bne.n	800b778 <_strtol_l.constprop.0+0xd8>
 800b76c:	2322      	movs	r3, #34	; 0x22
 800b76e:	6003      	str	r3, [r0, #0]
 800b770:	4646      	mov	r6, r8
 800b772:	b942      	cbnz	r2, 800b786 <_strtol_l.constprop.0+0xe6>
 800b774:	4630      	mov	r0, r6
 800b776:	e79e      	b.n	800b6b6 <_strtol_l.constprop.0+0x16>
 800b778:	b107      	cbz	r7, 800b77c <_strtol_l.constprop.0+0xdc>
 800b77a:	4276      	negs	r6, r6
 800b77c:	2a00      	cmp	r2, #0
 800b77e:	d0f9      	beq.n	800b774 <_strtol_l.constprop.0+0xd4>
 800b780:	f1be 0f00 	cmp.w	lr, #0
 800b784:	d000      	beq.n	800b788 <_strtol_l.constprop.0+0xe8>
 800b786:	1e69      	subs	r1, r5, #1
 800b788:	6011      	str	r1, [r2, #0]
 800b78a:	e7f3      	b.n	800b774 <_strtol_l.constprop.0+0xd4>
 800b78c:	2430      	movs	r4, #48	; 0x30
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1b1      	bne.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b792:	2308      	movs	r3, #8
 800b794:	e7af      	b.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b796:	2c30      	cmp	r4, #48	; 0x30
 800b798:	d0a5      	beq.n	800b6e6 <_strtol_l.constprop.0+0x46>
 800b79a:	230a      	movs	r3, #10
 800b79c:	e7ab      	b.n	800b6f6 <_strtol_l.constprop.0+0x56>
 800b79e:	bf00      	nop
 800b7a0:	0800f7d2 	.word	0x0800f7d2

0800b7a4 <strtol>:
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	460a      	mov	r2, r1
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4802      	ldr	r0, [pc, #8]	; (800b7b4 <strtol+0x10>)
 800b7ac:	6800      	ldr	r0, [r0, #0]
 800b7ae:	f7ff bf77 	b.w	800b6a0 <_strtol_l.constprop.0>
 800b7b2:	bf00      	nop
 800b7b4:	200005d8 	.word	0x200005d8

0800b7b8 <_fwalk_sglue>:
 800b7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4688      	mov	r8, r1
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	2600      	movs	r6, #0
 800b7c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b7cc:	d505      	bpl.n	800b7da <_fwalk_sglue+0x22>
 800b7ce:	6824      	ldr	r4, [r4, #0]
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	d1f7      	bne.n	800b7c4 <_fwalk_sglue+0xc>
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d907      	bls.n	800b7f0 <_fwalk_sglue+0x38>
 800b7e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	d003      	beq.n	800b7f0 <_fwalk_sglue+0x38>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	47c0      	blx	r8
 800b7ee:	4306      	orrs	r6, r0
 800b7f0:	3568      	adds	r5, #104	; 0x68
 800b7f2:	e7e9      	b.n	800b7c8 <_fwalk_sglue+0x10>

0800b7f4 <strncmp>:
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	b16a      	cbz	r2, 800b814 <strncmp+0x20>
 800b7f8:	3901      	subs	r1, #1
 800b7fa:	1884      	adds	r4, r0, r2
 800b7fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b804:	429a      	cmp	r2, r3
 800b806:	d103      	bne.n	800b810 <strncmp+0x1c>
 800b808:	42a0      	cmp	r0, r4
 800b80a:	d001      	beq.n	800b810 <strncmp+0x1c>
 800b80c:	2a00      	cmp	r2, #0
 800b80e:	d1f5      	bne.n	800b7fc <strncmp+0x8>
 800b810:	1ad0      	subs	r0, r2, r3
 800b812:	bd10      	pop	{r4, pc}
 800b814:	4610      	mov	r0, r2
 800b816:	e7fc      	b.n	800b812 <strncmp+0x1e>

0800b818 <strtok>:
 800b818:	4b16      	ldr	r3, [pc, #88]	; (800b874 <strtok+0x5c>)
 800b81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b81c:	681e      	ldr	r6, [r3, #0]
 800b81e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800b820:	4605      	mov	r5, r0
 800b822:	b9fc      	cbnz	r4, 800b864 <strtok+0x4c>
 800b824:	2050      	movs	r0, #80	; 0x50
 800b826:	9101      	str	r1, [sp, #4]
 800b828:	f7fe fe10 	bl	800a44c <malloc>
 800b82c:	9901      	ldr	r1, [sp, #4]
 800b82e:	6470      	str	r0, [r6, #68]	; 0x44
 800b830:	4602      	mov	r2, r0
 800b832:	b920      	cbnz	r0, 800b83e <strtok+0x26>
 800b834:	4b10      	ldr	r3, [pc, #64]	; (800b878 <strtok+0x60>)
 800b836:	4811      	ldr	r0, [pc, #68]	; (800b87c <strtok+0x64>)
 800b838:	215b      	movs	r1, #91	; 0x5b
 800b83a:	f000 f8a9 	bl	800b990 <__assert_func>
 800b83e:	e9c0 4400 	strd	r4, r4, [r0]
 800b842:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b846:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b84a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b84e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b852:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b856:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b85a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b85e:	6184      	str	r4, [r0, #24]
 800b860:	7704      	strb	r4, [r0, #28]
 800b862:	6244      	str	r4, [r0, #36]	; 0x24
 800b864:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800b866:	2301      	movs	r3, #1
 800b868:	4628      	mov	r0, r5
 800b86a:	b002      	add	sp, #8
 800b86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b870:	f000 b806 	b.w	800b880 <__strtok_r>
 800b874:	200005d8 	.word	0x200005d8
 800b878:	0800f758 	.word	0x0800f758
 800b87c:	0800f76f 	.word	0x0800f76f

0800b880 <__strtok_r>:
 800b880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b882:	b908      	cbnz	r0, 800b888 <__strtok_r+0x8>
 800b884:	6810      	ldr	r0, [r2, #0]
 800b886:	b188      	cbz	r0, 800b8ac <__strtok_r+0x2c>
 800b888:	4604      	mov	r4, r0
 800b88a:	4620      	mov	r0, r4
 800b88c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b890:	460f      	mov	r7, r1
 800b892:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b896:	b91e      	cbnz	r6, 800b8a0 <__strtok_r+0x20>
 800b898:	b965      	cbnz	r5, 800b8b4 <__strtok_r+0x34>
 800b89a:	6015      	str	r5, [r2, #0]
 800b89c:	4628      	mov	r0, r5
 800b89e:	e005      	b.n	800b8ac <__strtok_r+0x2c>
 800b8a0:	42b5      	cmp	r5, r6
 800b8a2:	d1f6      	bne.n	800b892 <__strtok_r+0x12>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1f0      	bne.n	800b88a <__strtok_r+0xa>
 800b8a8:	6014      	str	r4, [r2, #0]
 800b8aa:	7003      	strb	r3, [r0, #0]
 800b8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ae:	461c      	mov	r4, r3
 800b8b0:	e00c      	b.n	800b8cc <__strtok_r+0x4c>
 800b8b2:	b915      	cbnz	r5, 800b8ba <__strtok_r+0x3a>
 800b8b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8b8:	460e      	mov	r6, r1
 800b8ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b8be:	42ab      	cmp	r3, r5
 800b8c0:	d1f7      	bne.n	800b8b2 <__strtok_r+0x32>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d0f3      	beq.n	800b8ae <__strtok_r+0x2e>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b8cc:	6014      	str	r4, [r2, #0]
 800b8ce:	e7ed      	b.n	800b8ac <__strtok_r+0x2c>

0800b8d0 <memset>:
 800b8d0:	4402      	add	r2, r0
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d100      	bne.n	800b8da <memset+0xa>
 800b8d8:	4770      	bx	lr
 800b8da:	f803 1b01 	strb.w	r1, [r3], #1
 800b8de:	e7f9      	b.n	800b8d4 <memset+0x4>

0800b8e0 <_localeconv_r>:
 800b8e0:	4800      	ldr	r0, [pc, #0]	; (800b8e4 <_localeconv_r+0x4>)
 800b8e2:	4770      	bx	lr
 800b8e4:	20000510 	.word	0x20000510

0800b8e8 <_sbrk_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d06      	ldr	r5, [pc, #24]	; (800b904 <_sbrk_r+0x1c>)
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	602b      	str	r3, [r5, #0]
 800b8f4:	f7f7 f80a 	bl	800290c <_sbrk>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_sbrk_r+0x1a>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_sbrk_r+0x1a>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	20002a34 	.word	0x20002a34

0800b908 <__errno>:
 800b908:	4b01      	ldr	r3, [pc, #4]	; (800b910 <__errno+0x8>)
 800b90a:	6818      	ldr	r0, [r3, #0]
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	200005d8 	.word	0x200005d8

0800b914 <__libc_init_array>:
 800b914:	b570      	push	{r4, r5, r6, lr}
 800b916:	4d0d      	ldr	r5, [pc, #52]	; (800b94c <__libc_init_array+0x38>)
 800b918:	4c0d      	ldr	r4, [pc, #52]	; (800b950 <__libc_init_array+0x3c>)
 800b91a:	1b64      	subs	r4, r4, r5
 800b91c:	10a4      	asrs	r4, r4, #2
 800b91e:	2600      	movs	r6, #0
 800b920:	42a6      	cmp	r6, r4
 800b922:	d109      	bne.n	800b938 <__libc_init_array+0x24>
 800b924:	4d0b      	ldr	r5, [pc, #44]	; (800b954 <__libc_init_array+0x40>)
 800b926:	4c0c      	ldr	r4, [pc, #48]	; (800b958 <__libc_init_array+0x44>)
 800b928:	f003 fd76 	bl	800f418 <_init>
 800b92c:	1b64      	subs	r4, r4, r5
 800b92e:	10a4      	asrs	r4, r4, #2
 800b930:	2600      	movs	r6, #0
 800b932:	42a6      	cmp	r6, r4
 800b934:	d105      	bne.n	800b942 <__libc_init_array+0x2e>
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	f855 3b04 	ldr.w	r3, [r5], #4
 800b93c:	4798      	blx	r3
 800b93e:	3601      	adds	r6, #1
 800b940:	e7ee      	b.n	800b920 <__libc_init_array+0xc>
 800b942:	f855 3b04 	ldr.w	r3, [r5], #4
 800b946:	4798      	blx	r3
 800b948:	3601      	adds	r6, #1
 800b94a:	e7f2      	b.n	800b932 <__libc_init_array+0x1e>
 800b94c:	0800fd30 	.word	0x0800fd30
 800b950:	0800fd30 	.word	0x0800fd30
 800b954:	0800fd30 	.word	0x0800fd30
 800b958:	0800fd34 	.word	0x0800fd34

0800b95c <__retarget_lock_init_recursive>:
 800b95c:	4770      	bx	lr

0800b95e <__retarget_lock_acquire_recursive>:
 800b95e:	4770      	bx	lr

0800b960 <__retarget_lock_release_recursive>:
 800b960:	4770      	bx	lr

0800b962 <memcpy>:
 800b962:	440a      	add	r2, r1
 800b964:	4291      	cmp	r1, r2
 800b966:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b96a:	d100      	bne.n	800b96e <memcpy+0xc>
 800b96c:	4770      	bx	lr
 800b96e:	b510      	push	{r4, lr}
 800b970:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b974:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b978:	4291      	cmp	r1, r2
 800b97a:	d1f9      	bne.n	800b970 <memcpy+0xe>
 800b97c:	bd10      	pop	{r4, pc}
	...

0800b980 <nan>:
 800b980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b988 <nan+0x8>
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	00000000 	.word	0x00000000
 800b98c:	7ff80000 	.word	0x7ff80000

0800b990 <__assert_func>:
 800b990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b992:	4614      	mov	r4, r2
 800b994:	461a      	mov	r2, r3
 800b996:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <__assert_func+0x2c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4605      	mov	r5, r0
 800b99c:	68d8      	ldr	r0, [r3, #12]
 800b99e:	b14c      	cbz	r4, 800b9b4 <__assert_func+0x24>
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <__assert_func+0x30>)
 800b9a2:	9100      	str	r1, [sp, #0]
 800b9a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9a8:	4906      	ldr	r1, [pc, #24]	; (800b9c4 <__assert_func+0x34>)
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	f002 f936 	bl	800dc1c <fiprintf>
 800b9b0:	f002 f9e2 	bl	800dd78 <abort>
 800b9b4:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <__assert_func+0x38>)
 800b9b6:	461c      	mov	r4, r3
 800b9b8:	e7f3      	b.n	800b9a2 <__assert_func+0x12>
 800b9ba:	bf00      	nop
 800b9bc:	200005d8 	.word	0x200005d8
 800b9c0:	0800f8d2 	.word	0x0800f8d2
 800b9c4:	0800f8df 	.word	0x0800f8df
 800b9c8:	0800f90d 	.word	0x0800f90d

0800b9cc <quorem>:
 800b9cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	6903      	ldr	r3, [r0, #16]
 800b9d2:	690c      	ldr	r4, [r1, #16]
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	db7e      	blt.n	800bad8 <quorem+0x10c>
 800b9da:	3c01      	subs	r4, #1
 800b9dc:	f101 0814 	add.w	r8, r1, #20
 800b9e0:	f100 0514 	add.w	r5, r0, #20
 800b9e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9e8:	9301      	str	r3, [sp, #4]
 800b9ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b9fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9fe:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba02:	d331      	bcc.n	800ba68 <quorem+0x9c>
 800ba04:	f04f 0e00 	mov.w	lr, #0
 800ba08:	4640      	mov	r0, r8
 800ba0a:	46ac      	mov	ip, r5
 800ba0c:	46f2      	mov	sl, lr
 800ba0e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba12:	b293      	uxth	r3, r2
 800ba14:	fb06 e303 	mla	r3, r6, r3, lr
 800ba18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba1c:	0c1a      	lsrs	r2, r3, #16
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	ebaa 0303 	sub.w	r3, sl, r3
 800ba24:	f8dc a000 	ldr.w	sl, [ip]
 800ba28:	fa13 f38a 	uxtah	r3, r3, sl
 800ba2c:	fb06 220e 	mla	r2, r6, lr, r2
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	9b00      	ldr	r3, [sp, #0]
 800ba34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba38:	b292      	uxth	r2, r2
 800ba3a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ba3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba42:	f8bd 3000 	ldrh.w	r3, [sp]
 800ba46:	4581      	cmp	r9, r0
 800ba48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba4c:	f84c 3b04 	str.w	r3, [ip], #4
 800ba50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba54:	d2db      	bcs.n	800ba0e <quorem+0x42>
 800ba56:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba5a:	b92b      	cbnz	r3, 800ba68 <quorem+0x9c>
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	3b04      	subs	r3, #4
 800ba60:	429d      	cmp	r5, r3
 800ba62:	461a      	mov	r2, r3
 800ba64:	d32c      	bcc.n	800bac0 <quorem+0xf4>
 800ba66:	613c      	str	r4, [r7, #16]
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f001 fead 	bl	800d7c8 <__mcmp>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	db22      	blt.n	800bab8 <quorem+0xec>
 800ba72:	3601      	adds	r6, #1
 800ba74:	4629      	mov	r1, r5
 800ba76:	2000      	movs	r0, #0
 800ba78:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba7c:	f8d1 c000 	ldr.w	ip, [r1]
 800ba80:	b293      	uxth	r3, r2
 800ba82:	1ac3      	subs	r3, r0, r3
 800ba84:	0c12      	lsrs	r2, r2, #16
 800ba86:	fa13 f38c 	uxtah	r3, r3, ip
 800ba8a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ba8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba98:	45c1      	cmp	r9, r8
 800ba9a:	f841 3b04 	str.w	r3, [r1], #4
 800ba9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800baa2:	d2e9      	bcs.n	800ba78 <quorem+0xac>
 800baa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800baa8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baac:	b922      	cbnz	r2, 800bab8 <quorem+0xec>
 800baae:	3b04      	subs	r3, #4
 800bab0:	429d      	cmp	r5, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	d30a      	bcc.n	800bacc <quorem+0x100>
 800bab6:	613c      	str	r4, [r7, #16]
 800bab8:	4630      	mov	r0, r6
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac0:	6812      	ldr	r2, [r2, #0]
 800bac2:	3b04      	subs	r3, #4
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	d1ce      	bne.n	800ba66 <quorem+0x9a>
 800bac8:	3c01      	subs	r4, #1
 800baca:	e7c9      	b.n	800ba60 <quorem+0x94>
 800bacc:	6812      	ldr	r2, [r2, #0]
 800bace:	3b04      	subs	r3, #4
 800bad0:	2a00      	cmp	r2, #0
 800bad2:	d1f0      	bne.n	800bab6 <quorem+0xea>
 800bad4:	3c01      	subs	r4, #1
 800bad6:	e7eb      	b.n	800bab0 <quorem+0xe4>
 800bad8:	2000      	movs	r0, #0
 800bada:	e7ee      	b.n	800baba <quorem+0xee>
 800badc:	0000      	movs	r0, r0
	...

0800bae0 <_dtoa_r>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	ed2d 8b04 	vpush	{d8-d9}
 800bae8:	69c5      	ldr	r5, [r0, #28]
 800baea:	b093      	sub	sp, #76	; 0x4c
 800baec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800baf0:	ec57 6b10 	vmov	r6, r7, d0
 800baf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800baf8:	9107      	str	r1, [sp, #28]
 800bafa:	4604      	mov	r4, r0
 800bafc:	920a      	str	r2, [sp, #40]	; 0x28
 800bafe:	930d      	str	r3, [sp, #52]	; 0x34
 800bb00:	b975      	cbnz	r5, 800bb20 <_dtoa_r+0x40>
 800bb02:	2010      	movs	r0, #16
 800bb04:	f7fe fca2 	bl	800a44c <malloc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	61e0      	str	r0, [r4, #28]
 800bb0c:	b920      	cbnz	r0, 800bb18 <_dtoa_r+0x38>
 800bb0e:	4bae      	ldr	r3, [pc, #696]	; (800bdc8 <_dtoa_r+0x2e8>)
 800bb10:	21ef      	movs	r1, #239	; 0xef
 800bb12:	48ae      	ldr	r0, [pc, #696]	; (800bdcc <_dtoa_r+0x2ec>)
 800bb14:	f7ff ff3c 	bl	800b990 <__assert_func>
 800bb18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb1c:	6005      	str	r5, [r0, #0]
 800bb1e:	60c5      	str	r5, [r0, #12]
 800bb20:	69e3      	ldr	r3, [r4, #28]
 800bb22:	6819      	ldr	r1, [r3, #0]
 800bb24:	b151      	cbz	r1, 800bb3c <_dtoa_r+0x5c>
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	604a      	str	r2, [r1, #4]
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4093      	lsls	r3, r2
 800bb2e:	608b      	str	r3, [r1, #8]
 800bb30:	4620      	mov	r0, r4
 800bb32:	f001 fbc3 	bl	800d2bc <_Bfree>
 800bb36:	69e3      	ldr	r3, [r4, #28]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	1e3b      	subs	r3, r7, #0
 800bb3e:	bfbb      	ittet	lt
 800bb40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb44:	9303      	strlt	r3, [sp, #12]
 800bb46:	2300      	movge	r3, #0
 800bb48:	2201      	movlt	r2, #1
 800bb4a:	bfac      	ite	ge
 800bb4c:	f8c8 3000 	strge.w	r3, [r8]
 800bb50:	f8c8 2000 	strlt.w	r2, [r8]
 800bb54:	4b9e      	ldr	r3, [pc, #632]	; (800bdd0 <_dtoa_r+0x2f0>)
 800bb56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bb5a:	ea33 0308 	bics.w	r3, r3, r8
 800bb5e:	d11b      	bne.n	800bb98 <_dtoa_r+0xb8>
 800bb60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb62:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb66:	6013      	str	r3, [r2, #0]
 800bb68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bb6c:	4333      	orrs	r3, r6
 800bb6e:	f000 8593 	beq.w	800c698 <_dtoa_r+0xbb8>
 800bb72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb74:	b963      	cbnz	r3, 800bb90 <_dtoa_r+0xb0>
 800bb76:	4b97      	ldr	r3, [pc, #604]	; (800bdd4 <_dtoa_r+0x2f4>)
 800bb78:	e027      	b.n	800bbca <_dtoa_r+0xea>
 800bb7a:	4b97      	ldr	r3, [pc, #604]	; (800bdd8 <_dtoa_r+0x2f8>)
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	9800      	ldr	r0, [sp, #0]
 800bb86:	b013      	add	sp, #76	; 0x4c
 800bb88:	ecbd 8b04 	vpop	{d8-d9}
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	4b90      	ldr	r3, [pc, #576]	; (800bdd4 <_dtoa_r+0x2f4>)
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	3303      	adds	r3, #3
 800bb96:	e7f3      	b.n	800bb80 <_dtoa_r+0xa0>
 800bb98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	ec51 0b17 	vmov	r0, r1, d7
 800bba2:	eeb0 8a47 	vmov.f32	s16, s14
 800bba6:	eef0 8a67 	vmov.f32	s17, s15
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f7f4 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbb0:	4681      	mov	r9, r0
 800bbb2:	b160      	cbz	r0, 800bbce <_dtoa_r+0xee>
 800bbb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8568 	beq.w	800c692 <_dtoa_r+0xbb2>
 800bbc2:	4b86      	ldr	r3, [pc, #536]	; (800bddc <_dtoa_r+0x2fc>)
 800bbc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bbc6:	6013      	str	r3, [r2, #0]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	e7da      	b.n	800bb84 <_dtoa_r+0xa4>
 800bbce:	aa10      	add	r2, sp, #64	; 0x40
 800bbd0:	a911      	add	r1, sp, #68	; 0x44
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd8:	eef0 0a68 	vmov.f32	s1, s17
 800bbdc:	f001 ff0a 	bl	800d9f4 <__d2b>
 800bbe0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bbe4:	4682      	mov	sl, r0
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	d07f      	beq.n	800bcea <_dtoa_r+0x20a>
 800bbea:	ee18 3a90 	vmov	r3, s17
 800bbee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbf2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bbf6:	ec51 0b18 	vmov	r0, r1, d8
 800bbfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bbfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bc02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bc06:	4619      	mov	r1, r3
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4b75      	ldr	r3, [pc, #468]	; (800bde0 <_dtoa_r+0x300>)
 800bc0c:	f7f4 fb3c 	bl	8000288 <__aeabi_dsub>
 800bc10:	a367      	add	r3, pc, #412	; (adr r3, 800bdb0 <_dtoa_r+0x2d0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 fcef 	bl	80005f8 <__aeabi_dmul>
 800bc1a:	a367      	add	r3, pc, #412	; (adr r3, 800bdb8 <_dtoa_r+0x2d8>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb34 	bl	800028c <__adddf3>
 800bc24:	4606      	mov	r6, r0
 800bc26:	4628      	mov	r0, r5
 800bc28:	460f      	mov	r7, r1
 800bc2a:	f7f4 fc7b 	bl	8000524 <__aeabi_i2d>
 800bc2e:	a364      	add	r3, pc, #400	; (adr r3, 800bdc0 <_dtoa_r+0x2e0>)
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f7f4 fb24 	bl	800028c <__adddf3>
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	f7f4 ff86 	bl	8000b58 <__aeabi_d2iz>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	4683      	mov	fp, r0
 800bc50:	2300      	movs	r3, #0
 800bc52:	4630      	mov	r0, r6
 800bc54:	4639      	mov	r1, r7
 800bc56:	f7f4 ff41 	bl	8000adc <__aeabi_dcmplt>
 800bc5a:	b148      	cbz	r0, 800bc70 <_dtoa_r+0x190>
 800bc5c:	4658      	mov	r0, fp
 800bc5e:	f7f4 fc61 	bl	8000524 <__aeabi_i2d>
 800bc62:	4632      	mov	r2, r6
 800bc64:	463b      	mov	r3, r7
 800bc66:	f7f4 ff2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc6a:	b908      	cbnz	r0, 800bc70 <_dtoa_r+0x190>
 800bc6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bc70:	f1bb 0f16 	cmp.w	fp, #22
 800bc74:	d857      	bhi.n	800bd26 <_dtoa_r+0x246>
 800bc76:	4b5b      	ldr	r3, [pc, #364]	; (800bde4 <_dtoa_r+0x304>)
 800bc78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	ec51 0b18 	vmov	r0, r1, d8
 800bc84:	f7f4 ff2a 	bl	8000adc <__aeabi_dcmplt>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d04e      	beq.n	800bd2a <_dtoa_r+0x24a>
 800bc8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bc90:	2300      	movs	r3, #0
 800bc92:	930c      	str	r3, [sp, #48]	; 0x30
 800bc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc96:	1b5b      	subs	r3, r3, r5
 800bc98:	1e5a      	subs	r2, r3, #1
 800bc9a:	bf45      	ittet	mi
 800bc9c:	f1c3 0301 	rsbmi	r3, r3, #1
 800bca0:	9305      	strmi	r3, [sp, #20]
 800bca2:	2300      	movpl	r3, #0
 800bca4:	2300      	movmi	r3, #0
 800bca6:	9206      	str	r2, [sp, #24]
 800bca8:	bf54      	ite	pl
 800bcaa:	9305      	strpl	r3, [sp, #20]
 800bcac:	9306      	strmi	r3, [sp, #24]
 800bcae:	f1bb 0f00 	cmp.w	fp, #0
 800bcb2:	db3c      	blt.n	800bd2e <_dtoa_r+0x24e>
 800bcb4:	9b06      	ldr	r3, [sp, #24]
 800bcb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bcba:	445b      	add	r3, fp
 800bcbc:	9306      	str	r3, [sp, #24]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9308      	str	r3, [sp, #32]
 800bcc2:	9b07      	ldr	r3, [sp, #28]
 800bcc4:	2b09      	cmp	r3, #9
 800bcc6:	d868      	bhi.n	800bd9a <_dtoa_r+0x2ba>
 800bcc8:	2b05      	cmp	r3, #5
 800bcca:	bfc4      	itt	gt
 800bccc:	3b04      	subgt	r3, #4
 800bcce:	9307      	strgt	r3, [sp, #28]
 800bcd0:	9b07      	ldr	r3, [sp, #28]
 800bcd2:	f1a3 0302 	sub.w	r3, r3, #2
 800bcd6:	bfcc      	ite	gt
 800bcd8:	2500      	movgt	r5, #0
 800bcda:	2501      	movle	r5, #1
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	f200 8085 	bhi.w	800bdec <_dtoa_r+0x30c>
 800bce2:	e8df f003 	tbb	[pc, r3]
 800bce6:	3b2e      	.short	0x3b2e
 800bce8:	5839      	.short	0x5839
 800bcea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bcee:	441d      	add	r5, r3
 800bcf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bcf4:	2b20      	cmp	r3, #32
 800bcf6:	bfc1      	itttt	gt
 800bcf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bcfc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bd00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bd04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bd08:	bfd6      	itet	le
 800bd0a:	f1c3 0320 	rsble	r3, r3, #32
 800bd0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800bd12:	fa06 f003 	lslle.w	r0, r6, r3
 800bd16:	f7f4 fbf5 	bl	8000504 <__aeabi_ui2d>
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bd20:	3d01      	subs	r5, #1
 800bd22:	920e      	str	r2, [sp, #56]	; 0x38
 800bd24:	e76f      	b.n	800bc06 <_dtoa_r+0x126>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e7b3      	b.n	800bc92 <_dtoa_r+0x1b2>
 800bd2a:	900c      	str	r0, [sp, #48]	; 0x30
 800bd2c:	e7b2      	b.n	800bc94 <_dtoa_r+0x1b4>
 800bd2e:	9b05      	ldr	r3, [sp, #20]
 800bd30:	eba3 030b 	sub.w	r3, r3, fp
 800bd34:	9305      	str	r3, [sp, #20]
 800bd36:	f1cb 0300 	rsb	r3, fp, #0
 800bd3a:	9308      	str	r3, [sp, #32]
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd40:	e7bf      	b.n	800bcc2 <_dtoa_r+0x1e2>
 800bd42:	2300      	movs	r3, #0
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	dc52      	bgt.n	800bdf2 <_dtoa_r+0x312>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9301      	str	r3, [sp, #4]
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	461a      	mov	r2, r3
 800bd54:	920a      	str	r2, [sp, #40]	; 0x28
 800bd56:	e00b      	b.n	800bd70 <_dtoa_r+0x290>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e7f3      	b.n	800bd44 <_dtoa_r+0x264>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd62:	445b      	add	r3, fp
 800bd64:	9301      	str	r3, [sp, #4]
 800bd66:	3301      	adds	r3, #1
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	bfb8      	it	lt
 800bd6e:	2301      	movlt	r3, #1
 800bd70:	69e0      	ldr	r0, [r4, #28]
 800bd72:	2100      	movs	r1, #0
 800bd74:	2204      	movs	r2, #4
 800bd76:	f102 0614 	add.w	r6, r2, #20
 800bd7a:	429e      	cmp	r6, r3
 800bd7c:	d93d      	bls.n	800bdfa <_dtoa_r+0x31a>
 800bd7e:	6041      	str	r1, [r0, #4]
 800bd80:	4620      	mov	r0, r4
 800bd82:	f001 fa5b 	bl	800d23c <_Balloc>
 800bd86:	9000      	str	r0, [sp, #0]
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d139      	bne.n	800be00 <_dtoa_r+0x320>
 800bd8c:	4b16      	ldr	r3, [pc, #88]	; (800bde8 <_dtoa_r+0x308>)
 800bd8e:	4602      	mov	r2, r0
 800bd90:	f240 11af 	movw	r1, #431	; 0x1af
 800bd94:	e6bd      	b.n	800bb12 <_dtoa_r+0x32>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e7e1      	b.n	800bd5e <_dtoa_r+0x27e>
 800bd9a:	2501      	movs	r5, #1
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	9509      	str	r5, [sp, #36]	; 0x24
 800bda2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2312      	movs	r3, #18
 800bdae:	e7d1      	b.n	800bd54 <_dtoa_r+0x274>
 800bdb0:	636f4361 	.word	0x636f4361
 800bdb4:	3fd287a7 	.word	0x3fd287a7
 800bdb8:	8b60c8b3 	.word	0x8b60c8b3
 800bdbc:	3fc68a28 	.word	0x3fc68a28
 800bdc0:	509f79fb 	.word	0x509f79fb
 800bdc4:	3fd34413 	.word	0x3fd34413
 800bdc8:	0800f758 	.word	0x0800f758
 800bdcc:	0800f91b 	.word	0x0800f91b
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	0800f917 	.word	0x0800f917
 800bdd8:	0800f90e 	.word	0x0800f90e
 800bddc:	0800f6e1 	.word	0x0800f6e1
 800bde0:	3ff80000 	.word	0x3ff80000
 800bde4:	0800fa78 	.word	0x0800fa78
 800bde8:	0800f973 	.word	0x0800f973
 800bdec:	2301      	movs	r3, #1
 800bdee:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf0:	e7d7      	b.n	800bda2 <_dtoa_r+0x2c2>
 800bdf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	9304      	str	r3, [sp, #16]
 800bdf8:	e7ba      	b.n	800bd70 <_dtoa_r+0x290>
 800bdfa:	3101      	adds	r1, #1
 800bdfc:	0052      	lsls	r2, r2, #1
 800bdfe:	e7ba      	b.n	800bd76 <_dtoa_r+0x296>
 800be00:	69e3      	ldr	r3, [r4, #28]
 800be02:	9a00      	ldr	r2, [sp, #0]
 800be04:	601a      	str	r2, [r3, #0]
 800be06:	9b04      	ldr	r3, [sp, #16]
 800be08:	2b0e      	cmp	r3, #14
 800be0a:	f200 80a8 	bhi.w	800bf5e <_dtoa_r+0x47e>
 800be0e:	2d00      	cmp	r5, #0
 800be10:	f000 80a5 	beq.w	800bf5e <_dtoa_r+0x47e>
 800be14:	f1bb 0f00 	cmp.w	fp, #0
 800be18:	dd38      	ble.n	800be8c <_dtoa_r+0x3ac>
 800be1a:	4bc0      	ldr	r3, [pc, #768]	; (800c11c <_dtoa_r+0x63c>)
 800be1c:	f00b 020f 	and.w	r2, fp, #15
 800be20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800be2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800be30:	d019      	beq.n	800be66 <_dtoa_r+0x386>
 800be32:	4bbb      	ldr	r3, [pc, #748]	; (800c120 <_dtoa_r+0x640>)
 800be34:	ec51 0b18 	vmov	r0, r1, d8
 800be38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be3c:	f7f4 fd06 	bl	800084c <__aeabi_ddiv>
 800be40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be44:	f008 080f 	and.w	r8, r8, #15
 800be48:	2503      	movs	r5, #3
 800be4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c120 <_dtoa_r+0x640>
 800be4e:	f1b8 0f00 	cmp.w	r8, #0
 800be52:	d10a      	bne.n	800be6a <_dtoa_r+0x38a>
 800be54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be58:	4632      	mov	r2, r6
 800be5a:	463b      	mov	r3, r7
 800be5c:	f7f4 fcf6 	bl	800084c <__aeabi_ddiv>
 800be60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be64:	e02b      	b.n	800bebe <_dtoa_r+0x3de>
 800be66:	2502      	movs	r5, #2
 800be68:	e7ef      	b.n	800be4a <_dtoa_r+0x36a>
 800be6a:	f018 0f01 	tst.w	r8, #1
 800be6e:	d008      	beq.n	800be82 <_dtoa_r+0x3a2>
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be78:	f7f4 fbbe 	bl	80005f8 <__aeabi_dmul>
 800be7c:	3501      	adds	r5, #1
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be86:	f109 0908 	add.w	r9, r9, #8
 800be8a:	e7e0      	b.n	800be4e <_dtoa_r+0x36e>
 800be8c:	f000 809f 	beq.w	800bfce <_dtoa_r+0x4ee>
 800be90:	f1cb 0600 	rsb	r6, fp, #0
 800be94:	4ba1      	ldr	r3, [pc, #644]	; (800c11c <_dtoa_r+0x63c>)
 800be96:	4fa2      	ldr	r7, [pc, #648]	; (800c120 <_dtoa_r+0x640>)
 800be98:	f006 020f 	and.w	r2, r6, #15
 800be9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	ec51 0b18 	vmov	r0, r1, d8
 800bea8:	f7f4 fba6 	bl	80005f8 <__aeabi_dmul>
 800beac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beb0:	1136      	asrs	r6, r6, #4
 800beb2:	2300      	movs	r3, #0
 800beb4:	2502      	movs	r5, #2
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d17e      	bne.n	800bfb8 <_dtoa_r+0x4d8>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d0      	bne.n	800be60 <_dtoa_r+0x380>
 800bebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bec0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 8084 	beq.w	800bfd2 <_dtoa_r+0x4f2>
 800beca:	4b96      	ldr	r3, [pc, #600]	; (800c124 <_dtoa_r+0x644>)
 800becc:	2200      	movs	r2, #0
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	f7f4 fe03 	bl	8000adc <__aeabi_dcmplt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d07b      	beq.n	800bfd2 <_dtoa_r+0x4f2>
 800beda:	9b04      	ldr	r3, [sp, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d078      	beq.n	800bfd2 <_dtoa_r+0x4f2>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd39      	ble.n	800bf5a <_dtoa_r+0x47a>
 800bee6:	4b90      	ldr	r3, [pc, #576]	; (800c128 <_dtoa_r+0x648>)
 800bee8:	2200      	movs	r2, #0
 800beea:	4640      	mov	r0, r8
 800beec:	4649      	mov	r1, r9
 800beee:	f7f4 fb83 	bl	80005f8 <__aeabi_dmul>
 800bef2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bef6:	9e01      	ldr	r6, [sp, #4]
 800bef8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800befc:	3501      	adds	r5, #1
 800befe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf02:	4628      	mov	r0, r5
 800bf04:	f7f4 fb0e 	bl	8000524 <__aeabi_i2d>
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	f7f4 fb74 	bl	80005f8 <__aeabi_dmul>
 800bf10:	4b86      	ldr	r3, [pc, #536]	; (800c12c <_dtoa_r+0x64c>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	f7f4 f9ba 	bl	800028c <__adddf3>
 800bf18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bf1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf20:	9303      	str	r3, [sp, #12]
 800bf22:	2e00      	cmp	r6, #0
 800bf24:	d158      	bne.n	800bfd8 <_dtoa_r+0x4f8>
 800bf26:	4b82      	ldr	r3, [pc, #520]	; (800c130 <_dtoa_r+0x650>)
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 f9ab 	bl	8000288 <__aeabi_dsub>
 800bf32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf36:	4680      	mov	r8, r0
 800bf38:	4689      	mov	r9, r1
 800bf3a:	f7f4 fded 	bl	8000b18 <__aeabi_dcmpgt>
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f040 8296 	bne.w	800c470 <_dtoa_r+0x990>
 800bf44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bf48:	4640      	mov	r0, r8
 800bf4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf4e:	4649      	mov	r1, r9
 800bf50:	f7f4 fdc4 	bl	8000adc <__aeabi_dcmplt>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	f040 8289 	bne.w	800c46c <_dtoa_r+0x98c>
 800bf5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bf5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f2c0 814e 	blt.w	800c202 <_dtoa_r+0x722>
 800bf66:	f1bb 0f0e 	cmp.w	fp, #14
 800bf6a:	f300 814a 	bgt.w	800c202 <_dtoa_r+0x722>
 800bf6e:	4b6b      	ldr	r3, [pc, #428]	; (800c11c <_dtoa_r+0x63c>)
 800bf70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f280 80dc 	bge.w	800c138 <_dtoa_r+0x658>
 800bf80:	9b04      	ldr	r3, [sp, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f300 80d8 	bgt.w	800c138 <_dtoa_r+0x658>
 800bf88:	f040 826f 	bne.w	800c46a <_dtoa_r+0x98a>
 800bf8c:	4b68      	ldr	r3, [pc, #416]	; (800c130 <_dtoa_r+0x650>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	4640      	mov	r0, r8
 800bf92:	4649      	mov	r1, r9
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf9c:	f7f4 fdb2 	bl	8000b04 <__aeabi_dcmpge>
 800bfa0:	9e04      	ldr	r6, [sp, #16]
 800bfa2:	4637      	mov	r7, r6
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f040 8245 	bne.w	800c434 <_dtoa_r+0x954>
 800bfaa:	9d00      	ldr	r5, [sp, #0]
 800bfac:	2331      	movs	r3, #49	; 0x31
 800bfae:	f805 3b01 	strb.w	r3, [r5], #1
 800bfb2:	f10b 0b01 	add.w	fp, fp, #1
 800bfb6:	e241      	b.n	800c43c <_dtoa_r+0x95c>
 800bfb8:	07f2      	lsls	r2, r6, #31
 800bfba:	d505      	bpl.n	800bfc8 <_dtoa_r+0x4e8>
 800bfbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfc0:	f7f4 fb1a 	bl	80005f8 <__aeabi_dmul>
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	1076      	asrs	r6, r6, #1
 800bfca:	3708      	adds	r7, #8
 800bfcc:	e773      	b.n	800beb6 <_dtoa_r+0x3d6>
 800bfce:	2502      	movs	r5, #2
 800bfd0:	e775      	b.n	800bebe <_dtoa_r+0x3de>
 800bfd2:	9e04      	ldr	r6, [sp, #16]
 800bfd4:	465f      	mov	r7, fp
 800bfd6:	e792      	b.n	800befe <_dtoa_r+0x41e>
 800bfd8:	9900      	ldr	r1, [sp, #0]
 800bfda:	4b50      	ldr	r3, [pc, #320]	; (800c11c <_dtoa_r+0x63c>)
 800bfdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfe0:	4431      	add	r1, r6
 800bfe2:	9102      	str	r1, [sp, #8]
 800bfe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfe6:	eeb0 9a47 	vmov.f32	s18, s14
 800bfea:	eef0 9a67 	vmov.f32	s19, s15
 800bfee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bff2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bff6:	2900      	cmp	r1, #0
 800bff8:	d044      	beq.n	800c084 <_dtoa_r+0x5a4>
 800bffa:	494e      	ldr	r1, [pc, #312]	; (800c134 <_dtoa_r+0x654>)
 800bffc:	2000      	movs	r0, #0
 800bffe:	f7f4 fc25 	bl	800084c <__aeabi_ddiv>
 800c002:	ec53 2b19 	vmov	r2, r3, d9
 800c006:	f7f4 f93f 	bl	8000288 <__aeabi_dsub>
 800c00a:	9d00      	ldr	r5, [sp, #0]
 800c00c:	ec41 0b19 	vmov	d9, r0, r1
 800c010:	4649      	mov	r1, r9
 800c012:	4640      	mov	r0, r8
 800c014:	f7f4 fda0 	bl	8000b58 <__aeabi_d2iz>
 800c018:	4606      	mov	r6, r0
 800c01a:	f7f4 fa83 	bl	8000524 <__aeabi_i2d>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	f7f4 f92f 	bl	8000288 <__aeabi_dsub>
 800c02a:	3630      	adds	r6, #48	; 0x30
 800c02c:	f805 6b01 	strb.w	r6, [r5], #1
 800c030:	ec53 2b19 	vmov	r2, r3, d9
 800c034:	4680      	mov	r8, r0
 800c036:	4689      	mov	r9, r1
 800c038:	f7f4 fd50 	bl	8000adc <__aeabi_dcmplt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d164      	bne.n	800c10a <_dtoa_r+0x62a>
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	4937      	ldr	r1, [pc, #220]	; (800c124 <_dtoa_r+0x644>)
 800c046:	2000      	movs	r0, #0
 800c048:	f7f4 f91e 	bl	8000288 <__aeabi_dsub>
 800c04c:	ec53 2b19 	vmov	r2, r3, d9
 800c050:	f7f4 fd44 	bl	8000adc <__aeabi_dcmplt>
 800c054:	2800      	cmp	r0, #0
 800c056:	f040 80b6 	bne.w	800c1c6 <_dtoa_r+0x6e6>
 800c05a:	9b02      	ldr	r3, [sp, #8]
 800c05c:	429d      	cmp	r5, r3
 800c05e:	f43f af7c 	beq.w	800bf5a <_dtoa_r+0x47a>
 800c062:	4b31      	ldr	r3, [pc, #196]	; (800c128 <_dtoa_r+0x648>)
 800c064:	ec51 0b19 	vmov	r0, r1, d9
 800c068:	2200      	movs	r2, #0
 800c06a:	f7f4 fac5 	bl	80005f8 <__aeabi_dmul>
 800c06e:	4b2e      	ldr	r3, [pc, #184]	; (800c128 <_dtoa_r+0x648>)
 800c070:	ec41 0b19 	vmov	d9, r0, r1
 800c074:	2200      	movs	r2, #0
 800c076:	4640      	mov	r0, r8
 800c078:	4649      	mov	r1, r9
 800c07a:	f7f4 fabd 	bl	80005f8 <__aeabi_dmul>
 800c07e:	4680      	mov	r8, r0
 800c080:	4689      	mov	r9, r1
 800c082:	e7c5      	b.n	800c010 <_dtoa_r+0x530>
 800c084:	ec51 0b17 	vmov	r0, r1, d7
 800c088:	f7f4 fab6 	bl	80005f8 <__aeabi_dmul>
 800c08c:	9b02      	ldr	r3, [sp, #8]
 800c08e:	9d00      	ldr	r5, [sp, #0]
 800c090:	930f      	str	r3, [sp, #60]	; 0x3c
 800c092:	ec41 0b19 	vmov	d9, r0, r1
 800c096:	4649      	mov	r1, r9
 800c098:	4640      	mov	r0, r8
 800c09a:	f7f4 fd5d 	bl	8000b58 <__aeabi_d2iz>
 800c09e:	4606      	mov	r6, r0
 800c0a0:	f7f4 fa40 	bl	8000524 <__aeabi_i2d>
 800c0a4:	3630      	adds	r6, #48	; 0x30
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 f8eb 	bl	8000288 <__aeabi_dsub>
 800c0b2:	f805 6b01 	strb.w	r6, [r5], #1
 800c0b6:	9b02      	ldr	r3, [sp, #8]
 800c0b8:	429d      	cmp	r5, r3
 800c0ba:	4680      	mov	r8, r0
 800c0bc:	4689      	mov	r9, r1
 800c0be:	f04f 0200 	mov.w	r2, #0
 800c0c2:	d124      	bne.n	800c10e <_dtoa_r+0x62e>
 800c0c4:	4b1b      	ldr	r3, [pc, #108]	; (800c134 <_dtoa_r+0x654>)
 800c0c6:	ec51 0b19 	vmov	r0, r1, d9
 800c0ca:	f7f4 f8df 	bl	800028c <__adddf3>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d173      	bne.n	800c1c6 <_dtoa_r+0x6e6>
 800c0de:	ec53 2b19 	vmov	r2, r3, d9
 800c0e2:	4914      	ldr	r1, [pc, #80]	; (800c134 <_dtoa_r+0x654>)
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f7f4 f8cf 	bl	8000288 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	f7f4 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	f43f af2f 	beq.w	800bf5a <_dtoa_r+0x47a>
 800c0fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c0fe:	1e6b      	subs	r3, r5, #1
 800c100:	930f      	str	r3, [sp, #60]	; 0x3c
 800c102:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c106:	2b30      	cmp	r3, #48	; 0x30
 800c108:	d0f8      	beq.n	800c0fc <_dtoa_r+0x61c>
 800c10a:	46bb      	mov	fp, r7
 800c10c:	e04a      	b.n	800c1a4 <_dtoa_r+0x6c4>
 800c10e:	4b06      	ldr	r3, [pc, #24]	; (800c128 <_dtoa_r+0x648>)
 800c110:	f7f4 fa72 	bl	80005f8 <__aeabi_dmul>
 800c114:	4680      	mov	r8, r0
 800c116:	4689      	mov	r9, r1
 800c118:	e7bd      	b.n	800c096 <_dtoa_r+0x5b6>
 800c11a:	bf00      	nop
 800c11c:	0800fa78 	.word	0x0800fa78
 800c120:	0800fa50 	.word	0x0800fa50
 800c124:	3ff00000 	.word	0x3ff00000
 800c128:	40240000 	.word	0x40240000
 800c12c:	401c0000 	.word	0x401c0000
 800c130:	40140000 	.word	0x40140000
 800c134:	3fe00000 	.word	0x3fe00000
 800c138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c13c:	9d00      	ldr	r5, [sp, #0]
 800c13e:	4642      	mov	r2, r8
 800c140:	464b      	mov	r3, r9
 800c142:	4630      	mov	r0, r6
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 fb81 	bl	800084c <__aeabi_ddiv>
 800c14a:	f7f4 fd05 	bl	8000b58 <__aeabi_d2iz>
 800c14e:	9001      	str	r0, [sp, #4]
 800c150:	f7f4 f9e8 	bl	8000524 <__aeabi_i2d>
 800c154:	4642      	mov	r2, r8
 800c156:	464b      	mov	r3, r9
 800c158:	f7f4 fa4e 	bl	80005f8 <__aeabi_dmul>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	4630      	mov	r0, r6
 800c162:	4639      	mov	r1, r7
 800c164:	f7f4 f890 	bl	8000288 <__aeabi_dsub>
 800c168:	9e01      	ldr	r6, [sp, #4]
 800c16a:	9f04      	ldr	r7, [sp, #16]
 800c16c:	3630      	adds	r6, #48	; 0x30
 800c16e:	f805 6b01 	strb.w	r6, [r5], #1
 800c172:	9e00      	ldr	r6, [sp, #0]
 800c174:	1bae      	subs	r6, r5, r6
 800c176:	42b7      	cmp	r7, r6
 800c178:	4602      	mov	r2, r0
 800c17a:	460b      	mov	r3, r1
 800c17c:	d134      	bne.n	800c1e8 <_dtoa_r+0x708>
 800c17e:	f7f4 f885 	bl	800028c <__adddf3>
 800c182:	4642      	mov	r2, r8
 800c184:	464b      	mov	r3, r9
 800c186:	4606      	mov	r6, r0
 800c188:	460f      	mov	r7, r1
 800c18a:	f7f4 fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800c18e:	b9c8      	cbnz	r0, 800c1c4 <_dtoa_r+0x6e4>
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800c19c:	b110      	cbz	r0, 800c1a4 <_dtoa_r+0x6c4>
 800c19e:	9b01      	ldr	r3, [sp, #4]
 800c1a0:	07db      	lsls	r3, r3, #31
 800c1a2:	d40f      	bmi.n	800c1c4 <_dtoa_r+0x6e4>
 800c1a4:	4651      	mov	r1, sl
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f001 f888 	bl	800d2bc <_Bfree>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1b0:	702b      	strb	r3, [r5, #0]
 800c1b2:	f10b 0301 	add.w	r3, fp, #1
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f43f ace2 	beq.w	800bb84 <_dtoa_r+0xa4>
 800c1c0:	601d      	str	r5, [r3, #0]
 800c1c2:	e4df      	b.n	800bb84 <_dtoa_r+0xa4>
 800c1c4:	465f      	mov	r7, fp
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	461d      	mov	r5, r3
 800c1ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ce:	2a39      	cmp	r2, #57	; 0x39
 800c1d0:	d106      	bne.n	800c1e0 <_dtoa_r+0x700>
 800c1d2:	9a00      	ldr	r2, [sp, #0]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d1f7      	bne.n	800c1c8 <_dtoa_r+0x6e8>
 800c1d8:	9900      	ldr	r1, [sp, #0]
 800c1da:	2230      	movs	r2, #48	; 0x30
 800c1dc:	3701      	adds	r7, #1
 800c1de:	700a      	strb	r2, [r1, #0]
 800c1e0:	781a      	ldrb	r2, [r3, #0]
 800c1e2:	3201      	adds	r2, #1
 800c1e4:	701a      	strb	r2, [r3, #0]
 800c1e6:	e790      	b.n	800c10a <_dtoa_r+0x62a>
 800c1e8:	4ba3      	ldr	r3, [pc, #652]	; (800c478 <_dtoa_r+0x998>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	4606      	mov	r6, r0
 800c1f6:	460f      	mov	r7, r1
 800c1f8:	f7f4 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d09e      	beq.n	800c13e <_dtoa_r+0x65e>
 800c200:	e7d0      	b.n	800c1a4 <_dtoa_r+0x6c4>
 800c202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c204:	2a00      	cmp	r2, #0
 800c206:	f000 80ca 	beq.w	800c39e <_dtoa_r+0x8be>
 800c20a:	9a07      	ldr	r2, [sp, #28]
 800c20c:	2a01      	cmp	r2, #1
 800c20e:	f300 80ad 	bgt.w	800c36c <_dtoa_r+0x88c>
 800c212:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c214:	2a00      	cmp	r2, #0
 800c216:	f000 80a5 	beq.w	800c364 <_dtoa_r+0x884>
 800c21a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c21e:	9e08      	ldr	r6, [sp, #32]
 800c220:	9d05      	ldr	r5, [sp, #20]
 800c222:	9a05      	ldr	r2, [sp, #20]
 800c224:	441a      	add	r2, r3
 800c226:	9205      	str	r2, [sp, #20]
 800c228:	9a06      	ldr	r2, [sp, #24]
 800c22a:	2101      	movs	r1, #1
 800c22c:	441a      	add	r2, r3
 800c22e:	4620      	mov	r0, r4
 800c230:	9206      	str	r2, [sp, #24]
 800c232:	f001 f943 	bl	800d4bc <__i2b>
 800c236:	4607      	mov	r7, r0
 800c238:	b165      	cbz	r5, 800c254 <_dtoa_r+0x774>
 800c23a:	9b06      	ldr	r3, [sp, #24]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dd09      	ble.n	800c254 <_dtoa_r+0x774>
 800c240:	42ab      	cmp	r3, r5
 800c242:	9a05      	ldr	r2, [sp, #20]
 800c244:	bfa8      	it	ge
 800c246:	462b      	movge	r3, r5
 800c248:	1ad2      	subs	r2, r2, r3
 800c24a:	9205      	str	r2, [sp, #20]
 800c24c:	9a06      	ldr	r2, [sp, #24]
 800c24e:	1aed      	subs	r5, r5, r3
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	9306      	str	r3, [sp, #24]
 800c254:	9b08      	ldr	r3, [sp, #32]
 800c256:	b1f3      	cbz	r3, 800c296 <_dtoa_r+0x7b6>
 800c258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 80a3 	beq.w	800c3a6 <_dtoa_r+0x8c6>
 800c260:	2e00      	cmp	r6, #0
 800c262:	dd10      	ble.n	800c286 <_dtoa_r+0x7a6>
 800c264:	4639      	mov	r1, r7
 800c266:	4632      	mov	r2, r6
 800c268:	4620      	mov	r0, r4
 800c26a:	f001 f9e7 	bl	800d63c <__pow5mult>
 800c26e:	4652      	mov	r2, sl
 800c270:	4601      	mov	r1, r0
 800c272:	4607      	mov	r7, r0
 800c274:	4620      	mov	r0, r4
 800c276:	f001 f937 	bl	800d4e8 <__multiply>
 800c27a:	4651      	mov	r1, sl
 800c27c:	4680      	mov	r8, r0
 800c27e:	4620      	mov	r0, r4
 800c280:	f001 f81c 	bl	800d2bc <_Bfree>
 800c284:	46c2      	mov	sl, r8
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	1b9a      	subs	r2, r3, r6
 800c28a:	d004      	beq.n	800c296 <_dtoa_r+0x7b6>
 800c28c:	4651      	mov	r1, sl
 800c28e:	4620      	mov	r0, r4
 800c290:	f001 f9d4 	bl	800d63c <__pow5mult>
 800c294:	4682      	mov	sl, r0
 800c296:	2101      	movs	r1, #1
 800c298:	4620      	mov	r0, r4
 800c29a:	f001 f90f 	bl	800d4bc <__i2b>
 800c29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	f340 8081 	ble.w	800c3aa <_dtoa_r+0x8ca>
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4601      	mov	r1, r0
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f001 f9c5 	bl	800d63c <__pow5mult>
 800c2b2:	9b07      	ldr	r3, [sp, #28]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	dd7a      	ble.n	800c3b0 <_dtoa_r+0x8d0>
 800c2ba:	f04f 0800 	mov.w	r8, #0
 800c2be:	6933      	ldr	r3, [r6, #16]
 800c2c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c2c4:	6918      	ldr	r0, [r3, #16]
 800c2c6:	f001 f8ab 	bl	800d420 <__hi0bits>
 800c2ca:	f1c0 0020 	rsb	r0, r0, #32
 800c2ce:	9b06      	ldr	r3, [sp, #24]
 800c2d0:	4418      	add	r0, r3
 800c2d2:	f010 001f 	ands.w	r0, r0, #31
 800c2d6:	f000 8094 	beq.w	800c402 <_dtoa_r+0x922>
 800c2da:	f1c0 0320 	rsb	r3, r0, #32
 800c2de:	2b04      	cmp	r3, #4
 800c2e0:	f340 8085 	ble.w	800c3ee <_dtoa_r+0x90e>
 800c2e4:	9b05      	ldr	r3, [sp, #20]
 800c2e6:	f1c0 001c 	rsb	r0, r0, #28
 800c2ea:	4403      	add	r3, r0
 800c2ec:	9305      	str	r3, [sp, #20]
 800c2ee:	9b06      	ldr	r3, [sp, #24]
 800c2f0:	4403      	add	r3, r0
 800c2f2:	4405      	add	r5, r0
 800c2f4:	9306      	str	r3, [sp, #24]
 800c2f6:	9b05      	ldr	r3, [sp, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dd05      	ble.n	800c308 <_dtoa_r+0x828>
 800c2fc:	4651      	mov	r1, sl
 800c2fe:	461a      	mov	r2, r3
 800c300:	4620      	mov	r0, r4
 800c302:	f001 f9f5 	bl	800d6f0 <__lshift>
 800c306:	4682      	mov	sl, r0
 800c308:	9b06      	ldr	r3, [sp, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	dd05      	ble.n	800c31a <_dtoa_r+0x83a>
 800c30e:	4631      	mov	r1, r6
 800c310:	461a      	mov	r2, r3
 800c312:	4620      	mov	r0, r4
 800c314:	f001 f9ec 	bl	800d6f0 <__lshift>
 800c318:	4606      	mov	r6, r0
 800c31a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d072      	beq.n	800c406 <_dtoa_r+0x926>
 800c320:	4631      	mov	r1, r6
 800c322:	4650      	mov	r0, sl
 800c324:	f001 fa50 	bl	800d7c8 <__mcmp>
 800c328:	2800      	cmp	r0, #0
 800c32a:	da6c      	bge.n	800c406 <_dtoa_r+0x926>
 800c32c:	2300      	movs	r3, #0
 800c32e:	4651      	mov	r1, sl
 800c330:	220a      	movs	r2, #10
 800c332:	4620      	mov	r0, r4
 800c334:	f000 ffe4 	bl	800d300 <__multadd>
 800c338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c33a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c33e:	4682      	mov	sl, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 81b0 	beq.w	800c6a6 <_dtoa_r+0xbc6>
 800c346:	2300      	movs	r3, #0
 800c348:	4639      	mov	r1, r7
 800c34a:	220a      	movs	r2, #10
 800c34c:	4620      	mov	r0, r4
 800c34e:	f000 ffd7 	bl	800d300 <__multadd>
 800c352:	9b01      	ldr	r3, [sp, #4]
 800c354:	2b00      	cmp	r3, #0
 800c356:	4607      	mov	r7, r0
 800c358:	f300 8096 	bgt.w	800c488 <_dtoa_r+0x9a8>
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	2b02      	cmp	r3, #2
 800c360:	dc59      	bgt.n	800c416 <_dtoa_r+0x936>
 800c362:	e091      	b.n	800c488 <_dtoa_r+0x9a8>
 800c364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c36a:	e758      	b.n	800c21e <_dtoa_r+0x73e>
 800c36c:	9b04      	ldr	r3, [sp, #16]
 800c36e:	1e5e      	subs	r6, r3, #1
 800c370:	9b08      	ldr	r3, [sp, #32]
 800c372:	42b3      	cmp	r3, r6
 800c374:	bfbf      	itttt	lt
 800c376:	9b08      	ldrlt	r3, [sp, #32]
 800c378:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c37a:	9608      	strlt	r6, [sp, #32]
 800c37c:	1af3      	sublt	r3, r6, r3
 800c37e:	bfb4      	ite	lt
 800c380:	18d2      	addlt	r2, r2, r3
 800c382:	1b9e      	subge	r6, r3, r6
 800c384:	9b04      	ldr	r3, [sp, #16]
 800c386:	bfbc      	itt	lt
 800c388:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c38a:	2600      	movlt	r6, #0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfb7      	itett	lt
 800c390:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c394:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c398:	1a9d      	sublt	r5, r3, r2
 800c39a:	2300      	movlt	r3, #0
 800c39c:	e741      	b.n	800c222 <_dtoa_r+0x742>
 800c39e:	9e08      	ldr	r6, [sp, #32]
 800c3a0:	9d05      	ldr	r5, [sp, #20]
 800c3a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c3a4:	e748      	b.n	800c238 <_dtoa_r+0x758>
 800c3a6:	9a08      	ldr	r2, [sp, #32]
 800c3a8:	e770      	b.n	800c28c <_dtoa_r+0x7ac>
 800c3aa:	9b07      	ldr	r3, [sp, #28]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	dc19      	bgt.n	800c3e4 <_dtoa_r+0x904>
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	b9bb      	cbnz	r3, 800c3e4 <_dtoa_r+0x904>
 800c3b4:	9b03      	ldr	r3, [sp, #12]
 800c3b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3ba:	b99b      	cbnz	r3, 800c3e4 <_dtoa_r+0x904>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3c2:	0d1b      	lsrs	r3, r3, #20
 800c3c4:	051b      	lsls	r3, r3, #20
 800c3c6:	b183      	cbz	r3, 800c3ea <_dtoa_r+0x90a>
 800c3c8:	9b05      	ldr	r3, [sp, #20]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	9305      	str	r3, [sp, #20]
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	9306      	str	r3, [sp, #24]
 800c3d4:	f04f 0801 	mov.w	r8, #1
 800c3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f47f af6f 	bne.w	800c2be <_dtoa_r+0x7de>
 800c3e0:	2001      	movs	r0, #1
 800c3e2:	e774      	b.n	800c2ce <_dtoa_r+0x7ee>
 800c3e4:	f04f 0800 	mov.w	r8, #0
 800c3e8:	e7f6      	b.n	800c3d8 <_dtoa_r+0x8f8>
 800c3ea:	4698      	mov	r8, r3
 800c3ec:	e7f4      	b.n	800c3d8 <_dtoa_r+0x8f8>
 800c3ee:	d082      	beq.n	800c2f6 <_dtoa_r+0x816>
 800c3f0:	9a05      	ldr	r2, [sp, #20]
 800c3f2:	331c      	adds	r3, #28
 800c3f4:	441a      	add	r2, r3
 800c3f6:	9205      	str	r2, [sp, #20]
 800c3f8:	9a06      	ldr	r2, [sp, #24]
 800c3fa:	441a      	add	r2, r3
 800c3fc:	441d      	add	r5, r3
 800c3fe:	9206      	str	r2, [sp, #24]
 800c400:	e779      	b.n	800c2f6 <_dtoa_r+0x816>
 800c402:	4603      	mov	r3, r0
 800c404:	e7f4      	b.n	800c3f0 <_dtoa_r+0x910>
 800c406:	9b04      	ldr	r3, [sp, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dc37      	bgt.n	800c47c <_dtoa_r+0x99c>
 800c40c:	9b07      	ldr	r3, [sp, #28]
 800c40e:	2b02      	cmp	r3, #2
 800c410:	dd34      	ble.n	800c47c <_dtoa_r+0x99c>
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	9b01      	ldr	r3, [sp, #4]
 800c418:	b963      	cbnz	r3, 800c434 <_dtoa_r+0x954>
 800c41a:	4631      	mov	r1, r6
 800c41c:	2205      	movs	r2, #5
 800c41e:	4620      	mov	r0, r4
 800c420:	f000 ff6e 	bl	800d300 <__multadd>
 800c424:	4601      	mov	r1, r0
 800c426:	4606      	mov	r6, r0
 800c428:	4650      	mov	r0, sl
 800c42a:	f001 f9cd 	bl	800d7c8 <__mcmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	f73f adbb 	bgt.w	800bfaa <_dtoa_r+0x4ca>
 800c434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c436:	9d00      	ldr	r5, [sp, #0]
 800c438:	ea6f 0b03 	mvn.w	fp, r3
 800c43c:	f04f 0800 	mov.w	r8, #0
 800c440:	4631      	mov	r1, r6
 800c442:	4620      	mov	r0, r4
 800c444:	f000 ff3a 	bl	800d2bc <_Bfree>
 800c448:	2f00      	cmp	r7, #0
 800c44a:	f43f aeab 	beq.w	800c1a4 <_dtoa_r+0x6c4>
 800c44e:	f1b8 0f00 	cmp.w	r8, #0
 800c452:	d005      	beq.n	800c460 <_dtoa_r+0x980>
 800c454:	45b8      	cmp	r8, r7
 800c456:	d003      	beq.n	800c460 <_dtoa_r+0x980>
 800c458:	4641      	mov	r1, r8
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 ff2e 	bl	800d2bc <_Bfree>
 800c460:	4639      	mov	r1, r7
 800c462:	4620      	mov	r0, r4
 800c464:	f000 ff2a 	bl	800d2bc <_Bfree>
 800c468:	e69c      	b.n	800c1a4 <_dtoa_r+0x6c4>
 800c46a:	2600      	movs	r6, #0
 800c46c:	4637      	mov	r7, r6
 800c46e:	e7e1      	b.n	800c434 <_dtoa_r+0x954>
 800c470:	46bb      	mov	fp, r7
 800c472:	4637      	mov	r7, r6
 800c474:	e599      	b.n	800bfaa <_dtoa_r+0x4ca>
 800c476:	bf00      	nop
 800c478:	40240000 	.word	0x40240000
 800c47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 80c8 	beq.w	800c614 <_dtoa_r+0xb34>
 800c484:	9b04      	ldr	r3, [sp, #16]
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	2d00      	cmp	r5, #0
 800c48a:	dd05      	ble.n	800c498 <_dtoa_r+0x9b8>
 800c48c:	4639      	mov	r1, r7
 800c48e:	462a      	mov	r2, r5
 800c490:	4620      	mov	r0, r4
 800c492:	f001 f92d 	bl	800d6f0 <__lshift>
 800c496:	4607      	mov	r7, r0
 800c498:	f1b8 0f00 	cmp.w	r8, #0
 800c49c:	d05b      	beq.n	800c556 <_dtoa_r+0xa76>
 800c49e:	6879      	ldr	r1, [r7, #4]
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f000 fecb 	bl	800d23c <_Balloc>
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	b928      	cbnz	r0, 800c4b6 <_dtoa_r+0x9d6>
 800c4aa:	4b83      	ldr	r3, [pc, #524]	; (800c6b8 <_dtoa_r+0xbd8>)
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c4b2:	f7ff bb2e 	b.w	800bb12 <_dtoa_r+0x32>
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	3202      	adds	r2, #2
 800c4ba:	0092      	lsls	r2, r2, #2
 800c4bc:	f107 010c 	add.w	r1, r7, #12
 800c4c0:	300c      	adds	r0, #12
 800c4c2:	f7ff fa4e 	bl	800b962 <memcpy>
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f001 f910 	bl	800d6f0 <__lshift>
 800c4d0:	9b00      	ldr	r3, [sp, #0]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4da:	4413      	add	r3, r2
 800c4dc:	9308      	str	r3, [sp, #32]
 800c4de:	9b02      	ldr	r3, [sp, #8]
 800c4e0:	f003 0301 	and.w	r3, r3, #1
 800c4e4:	46b8      	mov	r8, r7
 800c4e6:	9306      	str	r3, [sp, #24]
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	9b04      	ldr	r3, [sp, #16]
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	4650      	mov	r0, sl
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	f7ff fa6a 	bl	800b9cc <quorem>
 800c4f8:	4641      	mov	r1, r8
 800c4fa:	9002      	str	r0, [sp, #8]
 800c4fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c500:	4650      	mov	r0, sl
 800c502:	f001 f961 	bl	800d7c8 <__mcmp>
 800c506:	463a      	mov	r2, r7
 800c508:	9005      	str	r0, [sp, #20]
 800c50a:	4631      	mov	r1, r6
 800c50c:	4620      	mov	r0, r4
 800c50e:	f001 f977 	bl	800d800 <__mdiff>
 800c512:	68c2      	ldr	r2, [r0, #12]
 800c514:	4605      	mov	r5, r0
 800c516:	bb02      	cbnz	r2, 800c55a <_dtoa_r+0xa7a>
 800c518:	4601      	mov	r1, r0
 800c51a:	4650      	mov	r0, sl
 800c51c:	f001 f954 	bl	800d7c8 <__mcmp>
 800c520:	4602      	mov	r2, r0
 800c522:	4629      	mov	r1, r5
 800c524:	4620      	mov	r0, r4
 800c526:	9209      	str	r2, [sp, #36]	; 0x24
 800c528:	f000 fec8 	bl	800d2bc <_Bfree>
 800c52c:	9b07      	ldr	r3, [sp, #28]
 800c52e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c530:	9d04      	ldr	r5, [sp, #16]
 800c532:	ea43 0102 	orr.w	r1, r3, r2
 800c536:	9b06      	ldr	r3, [sp, #24]
 800c538:	4319      	orrs	r1, r3
 800c53a:	d110      	bne.n	800c55e <_dtoa_r+0xa7e>
 800c53c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c540:	d029      	beq.n	800c596 <_dtoa_r+0xab6>
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	2b00      	cmp	r3, #0
 800c546:	dd02      	ble.n	800c54e <_dtoa_r+0xa6e>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c54e:	9b01      	ldr	r3, [sp, #4]
 800c550:	f883 9000 	strb.w	r9, [r3]
 800c554:	e774      	b.n	800c440 <_dtoa_r+0x960>
 800c556:	4638      	mov	r0, r7
 800c558:	e7ba      	b.n	800c4d0 <_dtoa_r+0x9f0>
 800c55a:	2201      	movs	r2, #1
 800c55c:	e7e1      	b.n	800c522 <_dtoa_r+0xa42>
 800c55e:	9b05      	ldr	r3, [sp, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	db04      	blt.n	800c56e <_dtoa_r+0xa8e>
 800c564:	9907      	ldr	r1, [sp, #28]
 800c566:	430b      	orrs	r3, r1
 800c568:	9906      	ldr	r1, [sp, #24]
 800c56a:	430b      	orrs	r3, r1
 800c56c:	d120      	bne.n	800c5b0 <_dtoa_r+0xad0>
 800c56e:	2a00      	cmp	r2, #0
 800c570:	dded      	ble.n	800c54e <_dtoa_r+0xa6e>
 800c572:	4651      	mov	r1, sl
 800c574:	2201      	movs	r2, #1
 800c576:	4620      	mov	r0, r4
 800c578:	f001 f8ba 	bl	800d6f0 <__lshift>
 800c57c:	4631      	mov	r1, r6
 800c57e:	4682      	mov	sl, r0
 800c580:	f001 f922 	bl	800d7c8 <__mcmp>
 800c584:	2800      	cmp	r0, #0
 800c586:	dc03      	bgt.n	800c590 <_dtoa_r+0xab0>
 800c588:	d1e1      	bne.n	800c54e <_dtoa_r+0xa6e>
 800c58a:	f019 0f01 	tst.w	r9, #1
 800c58e:	d0de      	beq.n	800c54e <_dtoa_r+0xa6e>
 800c590:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c594:	d1d8      	bne.n	800c548 <_dtoa_r+0xa68>
 800c596:	9a01      	ldr	r2, [sp, #4]
 800c598:	2339      	movs	r3, #57	; 0x39
 800c59a:	7013      	strb	r3, [r2, #0]
 800c59c:	462b      	mov	r3, r5
 800c59e:	461d      	mov	r5, r3
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c5a6:	2a39      	cmp	r2, #57	; 0x39
 800c5a8:	d06c      	beq.n	800c684 <_dtoa_r+0xba4>
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	e747      	b.n	800c440 <_dtoa_r+0x960>
 800c5b0:	2a00      	cmp	r2, #0
 800c5b2:	dd07      	ble.n	800c5c4 <_dtoa_r+0xae4>
 800c5b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c5b8:	d0ed      	beq.n	800c596 <_dtoa_r+0xab6>
 800c5ba:	9a01      	ldr	r2, [sp, #4]
 800c5bc:	f109 0301 	add.w	r3, r9, #1
 800c5c0:	7013      	strb	r3, [r2, #0]
 800c5c2:	e73d      	b.n	800c440 <_dtoa_r+0x960>
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	9a08      	ldr	r2, [sp, #32]
 800c5c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d043      	beq.n	800c658 <_dtoa_r+0xb78>
 800c5d0:	4651      	mov	r1, sl
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	220a      	movs	r2, #10
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f000 fe92 	bl	800d300 <__multadd>
 800c5dc:	45b8      	cmp	r8, r7
 800c5de:	4682      	mov	sl, r0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	f04f 020a 	mov.w	r2, #10
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	d107      	bne.n	800c5fe <_dtoa_r+0xb1e>
 800c5ee:	f000 fe87 	bl	800d300 <__multadd>
 800c5f2:	4680      	mov	r8, r0
 800c5f4:	4607      	mov	r7, r0
 800c5f6:	9b04      	ldr	r3, [sp, #16]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	e775      	b.n	800c4ea <_dtoa_r+0xa0a>
 800c5fe:	f000 fe7f 	bl	800d300 <__multadd>
 800c602:	4639      	mov	r1, r7
 800c604:	4680      	mov	r8, r0
 800c606:	2300      	movs	r3, #0
 800c608:	220a      	movs	r2, #10
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 fe78 	bl	800d300 <__multadd>
 800c610:	4607      	mov	r7, r0
 800c612:	e7f0      	b.n	800c5f6 <_dtoa_r+0xb16>
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	9d00      	ldr	r5, [sp, #0]
 800c61a:	4631      	mov	r1, r6
 800c61c:	4650      	mov	r0, sl
 800c61e:	f7ff f9d5 	bl	800b9cc <quorem>
 800c622:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c626:	9b00      	ldr	r3, [sp, #0]
 800c628:	f805 9b01 	strb.w	r9, [r5], #1
 800c62c:	1aea      	subs	r2, r5, r3
 800c62e:	9b01      	ldr	r3, [sp, #4]
 800c630:	4293      	cmp	r3, r2
 800c632:	dd07      	ble.n	800c644 <_dtoa_r+0xb64>
 800c634:	4651      	mov	r1, sl
 800c636:	2300      	movs	r3, #0
 800c638:	220a      	movs	r2, #10
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 fe60 	bl	800d300 <__multadd>
 800c640:	4682      	mov	sl, r0
 800c642:	e7ea      	b.n	800c61a <_dtoa_r+0xb3a>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bfc8      	it	gt
 800c64a:	461d      	movgt	r5, r3
 800c64c:	9b00      	ldr	r3, [sp, #0]
 800c64e:	bfd8      	it	le
 800c650:	2501      	movle	r5, #1
 800c652:	441d      	add	r5, r3
 800c654:	f04f 0800 	mov.w	r8, #0
 800c658:	4651      	mov	r1, sl
 800c65a:	2201      	movs	r2, #1
 800c65c:	4620      	mov	r0, r4
 800c65e:	f001 f847 	bl	800d6f0 <__lshift>
 800c662:	4631      	mov	r1, r6
 800c664:	4682      	mov	sl, r0
 800c666:	f001 f8af 	bl	800d7c8 <__mcmp>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	dc96      	bgt.n	800c59c <_dtoa_r+0xabc>
 800c66e:	d102      	bne.n	800c676 <_dtoa_r+0xb96>
 800c670:	f019 0f01 	tst.w	r9, #1
 800c674:	d192      	bne.n	800c59c <_dtoa_r+0xabc>
 800c676:	462b      	mov	r3, r5
 800c678:	461d      	mov	r5, r3
 800c67a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c67e:	2a30      	cmp	r2, #48	; 0x30
 800c680:	d0fa      	beq.n	800c678 <_dtoa_r+0xb98>
 800c682:	e6dd      	b.n	800c440 <_dtoa_r+0x960>
 800c684:	9a00      	ldr	r2, [sp, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d189      	bne.n	800c59e <_dtoa_r+0xabe>
 800c68a:	f10b 0b01 	add.w	fp, fp, #1
 800c68e:	2331      	movs	r3, #49	; 0x31
 800c690:	e796      	b.n	800c5c0 <_dtoa_r+0xae0>
 800c692:	4b0a      	ldr	r3, [pc, #40]	; (800c6bc <_dtoa_r+0xbdc>)
 800c694:	f7ff ba99 	b.w	800bbca <_dtoa_r+0xea>
 800c698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	f47f aa6d 	bne.w	800bb7a <_dtoa_r+0x9a>
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <_dtoa_r+0xbe0>)
 800c6a2:	f7ff ba92 	b.w	800bbca <_dtoa_r+0xea>
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dcb5      	bgt.n	800c618 <_dtoa_r+0xb38>
 800c6ac:	9b07      	ldr	r3, [sp, #28]
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	f73f aeb1 	bgt.w	800c416 <_dtoa_r+0x936>
 800c6b4:	e7b0      	b.n	800c618 <_dtoa_r+0xb38>
 800c6b6:	bf00      	nop
 800c6b8:	0800f973 	.word	0x0800f973
 800c6bc:	0800f6e0 	.word	0x0800f6e0
 800c6c0:	0800f90e 	.word	0x0800f90e

0800c6c4 <_free_r>:
 800c6c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c6:	2900      	cmp	r1, #0
 800c6c8:	d044      	beq.n	800c754 <_free_r+0x90>
 800c6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ce:	9001      	str	r0, [sp, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c6d6:	bfb8      	it	lt
 800c6d8:	18e4      	addlt	r4, r4, r3
 800c6da:	f7fe f8f7 	bl	800a8cc <__malloc_lock>
 800c6de:	4a1e      	ldr	r2, [pc, #120]	; (800c758 <_free_r+0x94>)
 800c6e0:	9801      	ldr	r0, [sp, #4]
 800c6e2:	6813      	ldr	r3, [r2, #0]
 800c6e4:	b933      	cbnz	r3, 800c6f4 <_free_r+0x30>
 800c6e6:	6063      	str	r3, [r4, #4]
 800c6e8:	6014      	str	r4, [r2, #0]
 800c6ea:	b003      	add	sp, #12
 800c6ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6f0:	f7fe b8f2 	b.w	800a8d8 <__malloc_unlock>
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	d908      	bls.n	800c70a <_free_r+0x46>
 800c6f8:	6825      	ldr	r5, [r4, #0]
 800c6fa:	1961      	adds	r1, r4, r5
 800c6fc:	428b      	cmp	r3, r1
 800c6fe:	bf01      	itttt	eq
 800c700:	6819      	ldreq	r1, [r3, #0]
 800c702:	685b      	ldreq	r3, [r3, #4]
 800c704:	1949      	addeq	r1, r1, r5
 800c706:	6021      	streq	r1, [r4, #0]
 800c708:	e7ed      	b.n	800c6e6 <_free_r+0x22>
 800c70a:	461a      	mov	r2, r3
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	b10b      	cbz	r3, 800c714 <_free_r+0x50>
 800c710:	42a3      	cmp	r3, r4
 800c712:	d9fa      	bls.n	800c70a <_free_r+0x46>
 800c714:	6811      	ldr	r1, [r2, #0]
 800c716:	1855      	adds	r5, r2, r1
 800c718:	42a5      	cmp	r5, r4
 800c71a:	d10b      	bne.n	800c734 <_free_r+0x70>
 800c71c:	6824      	ldr	r4, [r4, #0]
 800c71e:	4421      	add	r1, r4
 800c720:	1854      	adds	r4, r2, r1
 800c722:	42a3      	cmp	r3, r4
 800c724:	6011      	str	r1, [r2, #0]
 800c726:	d1e0      	bne.n	800c6ea <_free_r+0x26>
 800c728:	681c      	ldr	r4, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	6053      	str	r3, [r2, #4]
 800c72e:	440c      	add	r4, r1
 800c730:	6014      	str	r4, [r2, #0]
 800c732:	e7da      	b.n	800c6ea <_free_r+0x26>
 800c734:	d902      	bls.n	800c73c <_free_r+0x78>
 800c736:	230c      	movs	r3, #12
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	e7d6      	b.n	800c6ea <_free_r+0x26>
 800c73c:	6825      	ldr	r5, [r4, #0]
 800c73e:	1961      	adds	r1, r4, r5
 800c740:	428b      	cmp	r3, r1
 800c742:	bf04      	itt	eq
 800c744:	6819      	ldreq	r1, [r3, #0]
 800c746:	685b      	ldreq	r3, [r3, #4]
 800c748:	6063      	str	r3, [r4, #4]
 800c74a:	bf04      	itt	eq
 800c74c:	1949      	addeq	r1, r1, r5
 800c74e:	6021      	streq	r1, [r4, #0]
 800c750:	6054      	str	r4, [r2, #4]
 800c752:	e7ca      	b.n	800c6ea <_free_r+0x26>
 800c754:	b003      	add	sp, #12
 800c756:	bd30      	pop	{r4, r5, pc}
 800c758:	200028ec 	.word	0x200028ec

0800c75c <rshift>:
 800c75c:	6903      	ldr	r3, [r0, #16]
 800c75e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c766:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c76a:	f100 0414 	add.w	r4, r0, #20
 800c76e:	dd45      	ble.n	800c7fc <rshift+0xa0>
 800c770:	f011 011f 	ands.w	r1, r1, #31
 800c774:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c778:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c77c:	d10c      	bne.n	800c798 <rshift+0x3c>
 800c77e:	f100 0710 	add.w	r7, r0, #16
 800c782:	4629      	mov	r1, r5
 800c784:	42b1      	cmp	r1, r6
 800c786:	d334      	bcc.n	800c7f2 <rshift+0x96>
 800c788:	1a9b      	subs	r3, r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	1eea      	subs	r2, r5, #3
 800c78e:	4296      	cmp	r6, r2
 800c790:	bf38      	it	cc
 800c792:	2300      	movcc	r3, #0
 800c794:	4423      	add	r3, r4
 800c796:	e015      	b.n	800c7c4 <rshift+0x68>
 800c798:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c79c:	f1c1 0820 	rsb	r8, r1, #32
 800c7a0:	40cf      	lsrs	r7, r1
 800c7a2:	f105 0e04 	add.w	lr, r5, #4
 800c7a6:	46a1      	mov	r9, r4
 800c7a8:	4576      	cmp	r6, lr
 800c7aa:	46f4      	mov	ip, lr
 800c7ac:	d815      	bhi.n	800c7da <rshift+0x7e>
 800c7ae:	1a9a      	subs	r2, r3, r2
 800c7b0:	0092      	lsls	r2, r2, #2
 800c7b2:	3a04      	subs	r2, #4
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	42ae      	cmp	r6, r5
 800c7b8:	bf38      	it	cc
 800c7ba:	2200      	movcc	r2, #0
 800c7bc:	18a3      	adds	r3, r4, r2
 800c7be:	50a7      	str	r7, [r4, r2]
 800c7c0:	b107      	cbz	r7, 800c7c4 <rshift+0x68>
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	1b1a      	subs	r2, r3, r4
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7cc:	bf08      	it	eq
 800c7ce:	2300      	moveq	r3, #0
 800c7d0:	6102      	str	r2, [r0, #16]
 800c7d2:	bf08      	it	eq
 800c7d4:	6143      	streq	r3, [r0, #20]
 800c7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7da:	f8dc c000 	ldr.w	ip, [ip]
 800c7de:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7e2:	ea4c 0707 	orr.w	r7, ip, r7
 800c7e6:	f849 7b04 	str.w	r7, [r9], #4
 800c7ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c7ee:	40cf      	lsrs	r7, r1
 800c7f0:	e7da      	b.n	800c7a8 <rshift+0x4c>
 800c7f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c7f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c7fa:	e7c3      	b.n	800c784 <rshift+0x28>
 800c7fc:	4623      	mov	r3, r4
 800c7fe:	e7e1      	b.n	800c7c4 <rshift+0x68>

0800c800 <__hexdig_fun>:
 800c800:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c804:	2b09      	cmp	r3, #9
 800c806:	d802      	bhi.n	800c80e <__hexdig_fun+0xe>
 800c808:	3820      	subs	r0, #32
 800c80a:	b2c0      	uxtb	r0, r0
 800c80c:	4770      	bx	lr
 800c80e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c812:	2b05      	cmp	r3, #5
 800c814:	d801      	bhi.n	800c81a <__hexdig_fun+0x1a>
 800c816:	3847      	subs	r0, #71	; 0x47
 800c818:	e7f7      	b.n	800c80a <__hexdig_fun+0xa>
 800c81a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c81e:	2b05      	cmp	r3, #5
 800c820:	d801      	bhi.n	800c826 <__hexdig_fun+0x26>
 800c822:	3827      	subs	r0, #39	; 0x27
 800c824:	e7f1      	b.n	800c80a <__hexdig_fun+0xa>
 800c826:	2000      	movs	r0, #0
 800c828:	4770      	bx	lr
	...

0800c82c <__gethex>:
 800c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c830:	4617      	mov	r7, r2
 800c832:	680a      	ldr	r2, [r1, #0]
 800c834:	b085      	sub	sp, #20
 800c836:	f102 0b02 	add.w	fp, r2, #2
 800c83a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c83e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c842:	4681      	mov	r9, r0
 800c844:	468a      	mov	sl, r1
 800c846:	9302      	str	r3, [sp, #8]
 800c848:	32fe      	adds	r2, #254	; 0xfe
 800c84a:	eb02 030b 	add.w	r3, r2, fp
 800c84e:	46d8      	mov	r8, fp
 800c850:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	2830      	cmp	r0, #48	; 0x30
 800c858:	d0f7      	beq.n	800c84a <__gethex+0x1e>
 800c85a:	f7ff ffd1 	bl	800c800 <__hexdig_fun>
 800c85e:	4604      	mov	r4, r0
 800c860:	2800      	cmp	r0, #0
 800c862:	d138      	bne.n	800c8d6 <__gethex+0xaa>
 800c864:	49a7      	ldr	r1, [pc, #668]	; (800cb04 <__gethex+0x2d8>)
 800c866:	2201      	movs	r2, #1
 800c868:	4640      	mov	r0, r8
 800c86a:	f7fe ffc3 	bl	800b7f4 <strncmp>
 800c86e:	4606      	mov	r6, r0
 800c870:	2800      	cmp	r0, #0
 800c872:	d169      	bne.n	800c948 <__gethex+0x11c>
 800c874:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c878:	465d      	mov	r5, fp
 800c87a:	f7ff ffc1 	bl	800c800 <__hexdig_fun>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d064      	beq.n	800c94c <__gethex+0x120>
 800c882:	465a      	mov	r2, fp
 800c884:	7810      	ldrb	r0, [r2, #0]
 800c886:	2830      	cmp	r0, #48	; 0x30
 800c888:	4690      	mov	r8, r2
 800c88a:	f102 0201 	add.w	r2, r2, #1
 800c88e:	d0f9      	beq.n	800c884 <__gethex+0x58>
 800c890:	f7ff ffb6 	bl	800c800 <__hexdig_fun>
 800c894:	2301      	movs	r3, #1
 800c896:	fab0 f480 	clz	r4, r0
 800c89a:	0964      	lsrs	r4, r4, #5
 800c89c:	465e      	mov	r6, fp
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	4615      	mov	r5, r2
 800c8a4:	3201      	adds	r2, #1
 800c8a6:	7828      	ldrb	r0, [r5, #0]
 800c8a8:	f7ff ffaa 	bl	800c800 <__hexdig_fun>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d1f8      	bne.n	800c8a2 <__gethex+0x76>
 800c8b0:	4994      	ldr	r1, [pc, #592]	; (800cb04 <__gethex+0x2d8>)
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f7fe ff9d 	bl	800b7f4 <strncmp>
 800c8ba:	b978      	cbnz	r0, 800c8dc <__gethex+0xb0>
 800c8bc:	b946      	cbnz	r6, 800c8d0 <__gethex+0xa4>
 800c8be:	1c6e      	adds	r6, r5, #1
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	4615      	mov	r5, r2
 800c8c4:	3201      	adds	r2, #1
 800c8c6:	7828      	ldrb	r0, [r5, #0]
 800c8c8:	f7ff ff9a 	bl	800c800 <__hexdig_fun>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d1f8      	bne.n	800c8c2 <__gethex+0x96>
 800c8d0:	1b73      	subs	r3, r6, r5
 800c8d2:	009e      	lsls	r6, r3, #2
 800c8d4:	e004      	b.n	800c8e0 <__gethex+0xb4>
 800c8d6:	2400      	movs	r4, #0
 800c8d8:	4626      	mov	r6, r4
 800c8da:	e7e1      	b.n	800c8a0 <__gethex+0x74>
 800c8dc:	2e00      	cmp	r6, #0
 800c8de:	d1f7      	bne.n	800c8d0 <__gethex+0xa4>
 800c8e0:	782b      	ldrb	r3, [r5, #0]
 800c8e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c8e6:	2b50      	cmp	r3, #80	; 0x50
 800c8e8:	d13d      	bne.n	800c966 <__gethex+0x13a>
 800c8ea:	786b      	ldrb	r3, [r5, #1]
 800c8ec:	2b2b      	cmp	r3, #43	; 0x2b
 800c8ee:	d02f      	beq.n	800c950 <__gethex+0x124>
 800c8f0:	2b2d      	cmp	r3, #45	; 0x2d
 800c8f2:	d031      	beq.n	800c958 <__gethex+0x12c>
 800c8f4:	1c69      	adds	r1, r5, #1
 800c8f6:	f04f 0b00 	mov.w	fp, #0
 800c8fa:	7808      	ldrb	r0, [r1, #0]
 800c8fc:	f7ff ff80 	bl	800c800 <__hexdig_fun>
 800c900:	1e42      	subs	r2, r0, #1
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	2a18      	cmp	r2, #24
 800c906:	d82e      	bhi.n	800c966 <__gethex+0x13a>
 800c908:	f1a0 0210 	sub.w	r2, r0, #16
 800c90c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c910:	f7ff ff76 	bl	800c800 <__hexdig_fun>
 800c914:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c918:	fa5f fc8c 	uxtb.w	ip, ip
 800c91c:	f1bc 0f18 	cmp.w	ip, #24
 800c920:	d91d      	bls.n	800c95e <__gethex+0x132>
 800c922:	f1bb 0f00 	cmp.w	fp, #0
 800c926:	d000      	beq.n	800c92a <__gethex+0xfe>
 800c928:	4252      	negs	r2, r2
 800c92a:	4416      	add	r6, r2
 800c92c:	f8ca 1000 	str.w	r1, [sl]
 800c930:	b1dc      	cbz	r4, 800c96a <__gethex+0x13e>
 800c932:	9b01      	ldr	r3, [sp, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bf14      	ite	ne
 800c938:	f04f 0800 	movne.w	r8, #0
 800c93c:	f04f 0806 	moveq.w	r8, #6
 800c940:	4640      	mov	r0, r8
 800c942:	b005      	add	sp, #20
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	4645      	mov	r5, r8
 800c94a:	4626      	mov	r6, r4
 800c94c:	2401      	movs	r4, #1
 800c94e:	e7c7      	b.n	800c8e0 <__gethex+0xb4>
 800c950:	f04f 0b00 	mov.w	fp, #0
 800c954:	1ca9      	adds	r1, r5, #2
 800c956:	e7d0      	b.n	800c8fa <__gethex+0xce>
 800c958:	f04f 0b01 	mov.w	fp, #1
 800c95c:	e7fa      	b.n	800c954 <__gethex+0x128>
 800c95e:	230a      	movs	r3, #10
 800c960:	fb03 0002 	mla	r0, r3, r2, r0
 800c964:	e7d0      	b.n	800c908 <__gethex+0xdc>
 800c966:	4629      	mov	r1, r5
 800c968:	e7e0      	b.n	800c92c <__gethex+0x100>
 800c96a:	eba5 0308 	sub.w	r3, r5, r8
 800c96e:	3b01      	subs	r3, #1
 800c970:	4621      	mov	r1, r4
 800c972:	2b07      	cmp	r3, #7
 800c974:	dc0a      	bgt.n	800c98c <__gethex+0x160>
 800c976:	4648      	mov	r0, r9
 800c978:	f000 fc60 	bl	800d23c <_Balloc>
 800c97c:	4604      	mov	r4, r0
 800c97e:	b940      	cbnz	r0, 800c992 <__gethex+0x166>
 800c980:	4b61      	ldr	r3, [pc, #388]	; (800cb08 <__gethex+0x2dc>)
 800c982:	4602      	mov	r2, r0
 800c984:	21e4      	movs	r1, #228	; 0xe4
 800c986:	4861      	ldr	r0, [pc, #388]	; (800cb0c <__gethex+0x2e0>)
 800c988:	f7ff f802 	bl	800b990 <__assert_func>
 800c98c:	3101      	adds	r1, #1
 800c98e:	105b      	asrs	r3, r3, #1
 800c990:	e7ef      	b.n	800c972 <__gethex+0x146>
 800c992:	f100 0a14 	add.w	sl, r0, #20
 800c996:	2300      	movs	r3, #0
 800c998:	495a      	ldr	r1, [pc, #360]	; (800cb04 <__gethex+0x2d8>)
 800c99a:	f8cd a004 	str.w	sl, [sp, #4]
 800c99e:	469b      	mov	fp, r3
 800c9a0:	45a8      	cmp	r8, r5
 800c9a2:	d342      	bcc.n	800ca2a <__gethex+0x1fe>
 800c9a4:	9801      	ldr	r0, [sp, #4]
 800c9a6:	f840 bb04 	str.w	fp, [r0], #4
 800c9aa:	eba0 000a 	sub.w	r0, r0, sl
 800c9ae:	1080      	asrs	r0, r0, #2
 800c9b0:	6120      	str	r0, [r4, #16]
 800c9b2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f000 fd32 	bl	800d420 <__hi0bits>
 800c9bc:	683d      	ldr	r5, [r7, #0]
 800c9be:	eba8 0000 	sub.w	r0, r8, r0
 800c9c2:	42a8      	cmp	r0, r5
 800c9c4:	dd59      	ble.n	800ca7a <__gethex+0x24e>
 800c9c6:	eba0 0805 	sub.w	r8, r0, r5
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f001 f8c1 	bl	800db54 <__any_on>
 800c9d2:	4683      	mov	fp, r0
 800c9d4:	b1b8      	cbz	r0, 800ca06 <__gethex+0x1da>
 800c9d6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c9da:	1159      	asrs	r1, r3, #5
 800c9dc:	f003 021f 	and.w	r2, r3, #31
 800c9e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c9e4:	f04f 0b01 	mov.w	fp, #1
 800c9e8:	fa0b f202 	lsl.w	r2, fp, r2
 800c9ec:	420a      	tst	r2, r1
 800c9ee:	d00a      	beq.n	800ca06 <__gethex+0x1da>
 800c9f0:	455b      	cmp	r3, fp
 800c9f2:	dd06      	ble.n	800ca02 <__gethex+0x1d6>
 800c9f4:	f1a8 0102 	sub.w	r1, r8, #2
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f001 f8ab 	bl	800db54 <__any_on>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d138      	bne.n	800ca74 <__gethex+0x248>
 800ca02:	f04f 0b02 	mov.w	fp, #2
 800ca06:	4641      	mov	r1, r8
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7ff fea7 	bl	800c75c <rshift>
 800ca0e:	4446      	add	r6, r8
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	42b3      	cmp	r3, r6
 800ca14:	da41      	bge.n	800ca9a <__gethex+0x26e>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4648      	mov	r0, r9
 800ca1a:	f000 fc4f 	bl	800d2bc <_Bfree>
 800ca1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca20:	2300      	movs	r3, #0
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ca28:	e78a      	b.n	800c940 <__gethex+0x114>
 800ca2a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ca2e:	2a2e      	cmp	r2, #46	; 0x2e
 800ca30:	d014      	beq.n	800ca5c <__gethex+0x230>
 800ca32:	2b20      	cmp	r3, #32
 800ca34:	d106      	bne.n	800ca44 <__gethex+0x218>
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	f843 bb04 	str.w	fp, [r3], #4
 800ca3c:	f04f 0b00 	mov.w	fp, #0
 800ca40:	9301      	str	r3, [sp, #4]
 800ca42:	465b      	mov	r3, fp
 800ca44:	7828      	ldrb	r0, [r5, #0]
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	f7ff feda 	bl	800c800 <__hexdig_fun>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	f000 000f 	and.w	r0, r0, #15
 800ca52:	4098      	lsls	r0, r3
 800ca54:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca58:	3304      	adds	r3, #4
 800ca5a:	e7a1      	b.n	800c9a0 <__gethex+0x174>
 800ca5c:	45a8      	cmp	r8, r5
 800ca5e:	d8e8      	bhi.n	800ca32 <__gethex+0x206>
 800ca60:	2201      	movs	r2, #1
 800ca62:	4628      	mov	r0, r5
 800ca64:	9303      	str	r3, [sp, #12]
 800ca66:	f7fe fec5 	bl	800b7f4 <strncmp>
 800ca6a:	4926      	ldr	r1, [pc, #152]	; (800cb04 <__gethex+0x2d8>)
 800ca6c:	9b03      	ldr	r3, [sp, #12]
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	d1df      	bne.n	800ca32 <__gethex+0x206>
 800ca72:	e795      	b.n	800c9a0 <__gethex+0x174>
 800ca74:	f04f 0b03 	mov.w	fp, #3
 800ca78:	e7c5      	b.n	800ca06 <__gethex+0x1da>
 800ca7a:	da0b      	bge.n	800ca94 <__gethex+0x268>
 800ca7c:	eba5 0800 	sub.w	r8, r5, r0
 800ca80:	4621      	mov	r1, r4
 800ca82:	4642      	mov	r2, r8
 800ca84:	4648      	mov	r0, r9
 800ca86:	f000 fe33 	bl	800d6f0 <__lshift>
 800ca8a:	eba6 0608 	sub.w	r6, r6, r8
 800ca8e:	4604      	mov	r4, r0
 800ca90:	f100 0a14 	add.w	sl, r0, #20
 800ca94:	f04f 0b00 	mov.w	fp, #0
 800ca98:	e7ba      	b.n	800ca10 <__gethex+0x1e4>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	42b3      	cmp	r3, r6
 800ca9e:	dd73      	ble.n	800cb88 <__gethex+0x35c>
 800caa0:	1b9e      	subs	r6, r3, r6
 800caa2:	42b5      	cmp	r5, r6
 800caa4:	dc34      	bgt.n	800cb10 <__gethex+0x2e4>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d023      	beq.n	800caf4 <__gethex+0x2c8>
 800caac:	2b03      	cmp	r3, #3
 800caae:	d025      	beq.n	800cafc <__gethex+0x2d0>
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d115      	bne.n	800cae0 <__gethex+0x2b4>
 800cab4:	42b5      	cmp	r5, r6
 800cab6:	d113      	bne.n	800cae0 <__gethex+0x2b4>
 800cab8:	2d01      	cmp	r5, #1
 800caba:	d10b      	bne.n	800cad4 <__gethex+0x2a8>
 800cabc:	9a02      	ldr	r2, [sp, #8]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	2301      	movs	r3, #1
 800cac4:	6123      	str	r3, [r4, #16]
 800cac6:	f8ca 3000 	str.w	r3, [sl]
 800caca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cacc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cad0:	601c      	str	r4, [r3, #0]
 800cad2:	e735      	b.n	800c940 <__gethex+0x114>
 800cad4:	1e69      	subs	r1, r5, #1
 800cad6:	4620      	mov	r0, r4
 800cad8:	f001 f83c 	bl	800db54 <__any_on>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d1ed      	bne.n	800cabc <__gethex+0x290>
 800cae0:	4621      	mov	r1, r4
 800cae2:	4648      	mov	r0, r9
 800cae4:	f000 fbea 	bl	800d2bc <_Bfree>
 800cae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caea:	2300      	movs	r3, #0
 800caec:	6013      	str	r3, [r2, #0]
 800caee:	f04f 0850 	mov.w	r8, #80	; 0x50
 800caf2:	e725      	b.n	800c940 <__gethex+0x114>
 800caf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f2      	bne.n	800cae0 <__gethex+0x2b4>
 800cafa:	e7df      	b.n	800cabc <__gethex+0x290>
 800cafc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1dc      	bne.n	800cabc <__gethex+0x290>
 800cb02:	e7ed      	b.n	800cae0 <__gethex+0x2b4>
 800cb04:	0800f704 	.word	0x0800f704
 800cb08:	0800f973 	.word	0x0800f973
 800cb0c:	0800f984 	.word	0x0800f984
 800cb10:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800cb14:	f1bb 0f00 	cmp.w	fp, #0
 800cb18:	d133      	bne.n	800cb82 <__gethex+0x356>
 800cb1a:	f1b8 0f00 	cmp.w	r8, #0
 800cb1e:	d004      	beq.n	800cb2a <__gethex+0x2fe>
 800cb20:	4641      	mov	r1, r8
 800cb22:	4620      	mov	r0, r4
 800cb24:	f001 f816 	bl	800db54 <__any_on>
 800cb28:	4683      	mov	fp, r0
 800cb2a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cb2e:	2301      	movs	r3, #1
 800cb30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb34:	f008 081f 	and.w	r8, r8, #31
 800cb38:	fa03 f308 	lsl.w	r3, r3, r8
 800cb3c:	4213      	tst	r3, r2
 800cb3e:	4631      	mov	r1, r6
 800cb40:	4620      	mov	r0, r4
 800cb42:	bf18      	it	ne
 800cb44:	f04b 0b02 	orrne.w	fp, fp, #2
 800cb48:	1bad      	subs	r5, r5, r6
 800cb4a:	f7ff fe07 	bl	800c75c <rshift>
 800cb4e:	687e      	ldr	r6, [r7, #4]
 800cb50:	f04f 0802 	mov.w	r8, #2
 800cb54:	f1bb 0f00 	cmp.w	fp, #0
 800cb58:	d04a      	beq.n	800cbf0 <__gethex+0x3c4>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	d016      	beq.n	800cb8e <__gethex+0x362>
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d018      	beq.n	800cb96 <__gethex+0x36a>
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d109      	bne.n	800cb7c <__gethex+0x350>
 800cb68:	f01b 0f02 	tst.w	fp, #2
 800cb6c:	d006      	beq.n	800cb7c <__gethex+0x350>
 800cb6e:	f8da 3000 	ldr.w	r3, [sl]
 800cb72:	ea4b 0b03 	orr.w	fp, fp, r3
 800cb76:	f01b 0f01 	tst.w	fp, #1
 800cb7a:	d10f      	bne.n	800cb9c <__gethex+0x370>
 800cb7c:	f048 0810 	orr.w	r8, r8, #16
 800cb80:	e036      	b.n	800cbf0 <__gethex+0x3c4>
 800cb82:	f04f 0b01 	mov.w	fp, #1
 800cb86:	e7d0      	b.n	800cb2a <__gethex+0x2fe>
 800cb88:	f04f 0801 	mov.w	r8, #1
 800cb8c:	e7e2      	b.n	800cb54 <__gethex+0x328>
 800cb8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb90:	f1c3 0301 	rsb	r3, r3, #1
 800cb94:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0ef      	beq.n	800cb7c <__gethex+0x350>
 800cb9c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cba0:	f104 0214 	add.w	r2, r4, #20
 800cba4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cba8:	9301      	str	r3, [sp, #4]
 800cbaa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cbae:	2300      	movs	r3, #0
 800cbb0:	4694      	mov	ip, r2
 800cbb2:	f852 1b04 	ldr.w	r1, [r2], #4
 800cbb6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cbba:	d01e      	beq.n	800cbfa <__gethex+0x3ce>
 800cbbc:	3101      	adds	r1, #1
 800cbbe:	f8cc 1000 	str.w	r1, [ip]
 800cbc2:	f1b8 0f02 	cmp.w	r8, #2
 800cbc6:	f104 0214 	add.w	r2, r4, #20
 800cbca:	d13d      	bne.n	800cc48 <__gethex+0x41c>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	42ab      	cmp	r3, r5
 800cbd2:	d10b      	bne.n	800cbec <__gethex+0x3c0>
 800cbd4:	1169      	asrs	r1, r5, #5
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f005 051f 	and.w	r5, r5, #31
 800cbdc:	fa03 f505 	lsl.w	r5, r3, r5
 800cbe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbe4:	421d      	tst	r5, r3
 800cbe6:	bf18      	it	ne
 800cbe8:	f04f 0801 	movne.w	r8, #1
 800cbec:	f048 0820 	orr.w	r8, r8, #32
 800cbf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbf2:	601c      	str	r4, [r3, #0]
 800cbf4:	9b02      	ldr	r3, [sp, #8]
 800cbf6:	601e      	str	r6, [r3, #0]
 800cbf8:	e6a2      	b.n	800c940 <__gethex+0x114>
 800cbfa:	4290      	cmp	r0, r2
 800cbfc:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc00:	d8d6      	bhi.n	800cbb0 <__gethex+0x384>
 800cc02:	68a2      	ldr	r2, [r4, #8]
 800cc04:	4593      	cmp	fp, r2
 800cc06:	db17      	blt.n	800cc38 <__gethex+0x40c>
 800cc08:	6861      	ldr	r1, [r4, #4]
 800cc0a:	4648      	mov	r0, r9
 800cc0c:	3101      	adds	r1, #1
 800cc0e:	f000 fb15 	bl	800d23c <_Balloc>
 800cc12:	4682      	mov	sl, r0
 800cc14:	b918      	cbnz	r0, 800cc1e <__gethex+0x3f2>
 800cc16:	4b1b      	ldr	r3, [pc, #108]	; (800cc84 <__gethex+0x458>)
 800cc18:	4602      	mov	r2, r0
 800cc1a:	2184      	movs	r1, #132	; 0x84
 800cc1c:	e6b3      	b.n	800c986 <__gethex+0x15a>
 800cc1e:	6922      	ldr	r2, [r4, #16]
 800cc20:	3202      	adds	r2, #2
 800cc22:	f104 010c 	add.w	r1, r4, #12
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	300c      	adds	r0, #12
 800cc2a:	f7fe fe9a 	bl	800b962 <memcpy>
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4648      	mov	r0, r9
 800cc32:	f000 fb43 	bl	800d2bc <_Bfree>
 800cc36:	4654      	mov	r4, sl
 800cc38:	6922      	ldr	r2, [r4, #16]
 800cc3a:	1c51      	adds	r1, r2, #1
 800cc3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc40:	6121      	str	r1, [r4, #16]
 800cc42:	2101      	movs	r1, #1
 800cc44:	6151      	str	r1, [r2, #20]
 800cc46:	e7bc      	b.n	800cbc2 <__gethex+0x396>
 800cc48:	6921      	ldr	r1, [r4, #16]
 800cc4a:	4559      	cmp	r1, fp
 800cc4c:	dd0b      	ble.n	800cc66 <__gethex+0x43a>
 800cc4e:	2101      	movs	r1, #1
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7ff fd83 	bl	800c75c <rshift>
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	3601      	adds	r6, #1
 800cc5a:	42b3      	cmp	r3, r6
 800cc5c:	f6ff aedb 	blt.w	800ca16 <__gethex+0x1ea>
 800cc60:	f04f 0801 	mov.w	r8, #1
 800cc64:	e7c2      	b.n	800cbec <__gethex+0x3c0>
 800cc66:	f015 051f 	ands.w	r5, r5, #31
 800cc6a:	d0f9      	beq.n	800cc60 <__gethex+0x434>
 800cc6c:	9b01      	ldr	r3, [sp, #4]
 800cc6e:	441a      	add	r2, r3
 800cc70:	f1c5 0520 	rsb	r5, r5, #32
 800cc74:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cc78:	f000 fbd2 	bl	800d420 <__hi0bits>
 800cc7c:	42a8      	cmp	r0, r5
 800cc7e:	dbe6      	blt.n	800cc4e <__gethex+0x422>
 800cc80:	e7ee      	b.n	800cc60 <__gethex+0x434>
 800cc82:	bf00      	nop
 800cc84:	0800f973 	.word	0x0800f973

0800cc88 <L_shift>:
 800cc88:	f1c2 0208 	rsb	r2, r2, #8
 800cc8c:	0092      	lsls	r2, r2, #2
 800cc8e:	b570      	push	{r4, r5, r6, lr}
 800cc90:	f1c2 0620 	rsb	r6, r2, #32
 800cc94:	6843      	ldr	r3, [r0, #4]
 800cc96:	6804      	ldr	r4, [r0, #0]
 800cc98:	fa03 f506 	lsl.w	r5, r3, r6
 800cc9c:	432c      	orrs	r4, r5
 800cc9e:	40d3      	lsrs	r3, r2
 800cca0:	6004      	str	r4, [r0, #0]
 800cca2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cca6:	4288      	cmp	r0, r1
 800cca8:	d3f4      	bcc.n	800cc94 <L_shift+0xc>
 800ccaa:	bd70      	pop	{r4, r5, r6, pc}

0800ccac <__match>:
 800ccac:	b530      	push	{r4, r5, lr}
 800ccae:	6803      	ldr	r3, [r0, #0]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccb6:	b914      	cbnz	r4, 800ccbe <__match+0x12>
 800ccb8:	6003      	str	r3, [r0, #0]
 800ccba:	2001      	movs	r0, #1
 800ccbc:	bd30      	pop	{r4, r5, pc}
 800ccbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccc6:	2d19      	cmp	r5, #25
 800ccc8:	bf98      	it	ls
 800ccca:	3220      	addls	r2, #32
 800cccc:	42a2      	cmp	r2, r4
 800ccce:	d0f0      	beq.n	800ccb2 <__match+0x6>
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	e7f3      	b.n	800ccbc <__match+0x10>

0800ccd4 <__hexnan>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	680b      	ldr	r3, [r1, #0]
 800ccda:	6801      	ldr	r1, [r0, #0]
 800ccdc:	115e      	asrs	r6, r3, #5
 800ccde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cce2:	f013 031f 	ands.w	r3, r3, #31
 800cce6:	b087      	sub	sp, #28
 800cce8:	bf18      	it	ne
 800ccea:	3604      	addne	r6, #4
 800ccec:	2500      	movs	r5, #0
 800ccee:	1f37      	subs	r7, r6, #4
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	4690      	mov	r8, r2
 800ccf4:	9301      	str	r3, [sp, #4]
 800ccf6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ccfa:	46b9      	mov	r9, r7
 800ccfc:	463c      	mov	r4, r7
 800ccfe:	9502      	str	r5, [sp, #8]
 800cd00:	46ab      	mov	fp, r5
 800cd02:	784a      	ldrb	r2, [r1, #1]
 800cd04:	1c4b      	adds	r3, r1, #1
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	b342      	cbz	r2, 800cd5c <__hexnan+0x88>
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	9105      	str	r1, [sp, #20]
 800cd0e:	9204      	str	r2, [sp, #16]
 800cd10:	f7ff fd76 	bl	800c800 <__hexdig_fun>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d14f      	bne.n	800cdb8 <__hexnan+0xe4>
 800cd18:	9a04      	ldr	r2, [sp, #16]
 800cd1a:	9905      	ldr	r1, [sp, #20]
 800cd1c:	2a20      	cmp	r2, #32
 800cd1e:	d818      	bhi.n	800cd52 <__hexnan+0x7e>
 800cd20:	9b02      	ldr	r3, [sp, #8]
 800cd22:	459b      	cmp	fp, r3
 800cd24:	dd13      	ble.n	800cd4e <__hexnan+0x7a>
 800cd26:	454c      	cmp	r4, r9
 800cd28:	d206      	bcs.n	800cd38 <__hexnan+0x64>
 800cd2a:	2d07      	cmp	r5, #7
 800cd2c:	dc04      	bgt.n	800cd38 <__hexnan+0x64>
 800cd2e:	462a      	mov	r2, r5
 800cd30:	4649      	mov	r1, r9
 800cd32:	4620      	mov	r0, r4
 800cd34:	f7ff ffa8 	bl	800cc88 <L_shift>
 800cd38:	4544      	cmp	r4, r8
 800cd3a:	d950      	bls.n	800cdde <__hexnan+0x10a>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f1a4 0904 	sub.w	r9, r4, #4
 800cd42:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd46:	f8cd b008 	str.w	fp, [sp, #8]
 800cd4a:	464c      	mov	r4, r9
 800cd4c:	461d      	mov	r5, r3
 800cd4e:	9903      	ldr	r1, [sp, #12]
 800cd50:	e7d7      	b.n	800cd02 <__hexnan+0x2e>
 800cd52:	2a29      	cmp	r2, #41	; 0x29
 800cd54:	d155      	bne.n	800ce02 <__hexnan+0x12e>
 800cd56:	3102      	adds	r1, #2
 800cd58:	f8ca 1000 	str.w	r1, [sl]
 800cd5c:	f1bb 0f00 	cmp.w	fp, #0
 800cd60:	d04f      	beq.n	800ce02 <__hexnan+0x12e>
 800cd62:	454c      	cmp	r4, r9
 800cd64:	d206      	bcs.n	800cd74 <__hexnan+0xa0>
 800cd66:	2d07      	cmp	r5, #7
 800cd68:	dc04      	bgt.n	800cd74 <__hexnan+0xa0>
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7ff ff8a 	bl	800cc88 <L_shift>
 800cd74:	4544      	cmp	r4, r8
 800cd76:	d934      	bls.n	800cde2 <__hexnan+0x10e>
 800cd78:	f1a8 0204 	sub.w	r2, r8, #4
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cd82:	f842 1f04 	str.w	r1, [r2, #4]!
 800cd86:	429f      	cmp	r7, r3
 800cd88:	d2f9      	bcs.n	800cd7e <__hexnan+0xaa>
 800cd8a:	1b3b      	subs	r3, r7, r4
 800cd8c:	f023 0303 	bic.w	r3, r3, #3
 800cd90:	3304      	adds	r3, #4
 800cd92:	3e03      	subs	r6, #3
 800cd94:	3401      	adds	r4, #1
 800cd96:	42a6      	cmp	r6, r4
 800cd98:	bf38      	it	cc
 800cd9a:	2304      	movcc	r3, #4
 800cd9c:	4443      	add	r3, r8
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f843 2b04 	str.w	r2, [r3], #4
 800cda4:	429f      	cmp	r7, r3
 800cda6:	d2fb      	bcs.n	800cda0 <__hexnan+0xcc>
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	b91b      	cbnz	r3, 800cdb4 <__hexnan+0xe0>
 800cdac:	4547      	cmp	r7, r8
 800cdae:	d126      	bne.n	800cdfe <__hexnan+0x12a>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	2005      	movs	r0, #5
 800cdb6:	e025      	b.n	800ce04 <__hexnan+0x130>
 800cdb8:	3501      	adds	r5, #1
 800cdba:	2d08      	cmp	r5, #8
 800cdbc:	f10b 0b01 	add.w	fp, fp, #1
 800cdc0:	dd06      	ble.n	800cdd0 <__hexnan+0xfc>
 800cdc2:	4544      	cmp	r4, r8
 800cdc4:	d9c3      	bls.n	800cd4e <__hexnan+0x7a>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdcc:	2501      	movs	r5, #1
 800cdce:	3c04      	subs	r4, #4
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	f000 000f 	and.w	r0, r0, #15
 800cdd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cdda:	6020      	str	r0, [r4, #0]
 800cddc:	e7b7      	b.n	800cd4e <__hexnan+0x7a>
 800cdde:	2508      	movs	r5, #8
 800cde0:	e7b5      	b.n	800cd4e <__hexnan+0x7a>
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d0df      	beq.n	800cda8 <__hexnan+0xd4>
 800cde8:	f1c3 0320 	rsb	r3, r3, #32
 800cdec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdf0:	40da      	lsrs	r2, r3
 800cdf2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cdf6:	4013      	ands	r3, r2
 800cdf8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cdfc:	e7d4      	b.n	800cda8 <__hexnan+0xd4>
 800cdfe:	3f04      	subs	r7, #4
 800ce00:	e7d2      	b.n	800cda8 <__hexnan+0xd4>
 800ce02:	2004      	movs	r0, #4
 800ce04:	b007      	add	sp, #28
 800ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce0a <__ssputs_r>:
 800ce0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0e:	688e      	ldr	r6, [r1, #8]
 800ce10:	461f      	mov	r7, r3
 800ce12:	42be      	cmp	r6, r7
 800ce14:	680b      	ldr	r3, [r1, #0]
 800ce16:	4682      	mov	sl, r0
 800ce18:	460c      	mov	r4, r1
 800ce1a:	4690      	mov	r8, r2
 800ce1c:	d82c      	bhi.n	800ce78 <__ssputs_r+0x6e>
 800ce1e:	898a      	ldrh	r2, [r1, #12]
 800ce20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce24:	d026      	beq.n	800ce74 <__ssputs_r+0x6a>
 800ce26:	6965      	ldr	r5, [r4, #20]
 800ce28:	6909      	ldr	r1, [r1, #16]
 800ce2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce2e:	eba3 0901 	sub.w	r9, r3, r1
 800ce32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce36:	1c7b      	adds	r3, r7, #1
 800ce38:	444b      	add	r3, r9
 800ce3a:	106d      	asrs	r5, r5, #1
 800ce3c:	429d      	cmp	r5, r3
 800ce3e:	bf38      	it	cc
 800ce40:	461d      	movcc	r5, r3
 800ce42:	0553      	lsls	r3, r2, #21
 800ce44:	d527      	bpl.n	800ce96 <__ssputs_r+0x8c>
 800ce46:	4629      	mov	r1, r5
 800ce48:	f7fd fb30 	bl	800a4ac <_malloc_r>
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	b360      	cbz	r0, 800ceaa <__ssputs_r+0xa0>
 800ce50:	6921      	ldr	r1, [r4, #16]
 800ce52:	464a      	mov	r2, r9
 800ce54:	f7fe fd85 	bl	800b962 <memcpy>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	6126      	str	r6, [r4, #16]
 800ce66:	6165      	str	r5, [r4, #20]
 800ce68:	444e      	add	r6, r9
 800ce6a:	eba5 0509 	sub.w	r5, r5, r9
 800ce6e:	6026      	str	r6, [r4, #0]
 800ce70:	60a5      	str	r5, [r4, #8]
 800ce72:	463e      	mov	r6, r7
 800ce74:	42be      	cmp	r6, r7
 800ce76:	d900      	bls.n	800ce7a <__ssputs_r+0x70>
 800ce78:	463e      	mov	r6, r7
 800ce7a:	6820      	ldr	r0, [r4, #0]
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	4641      	mov	r1, r8
 800ce80:	f000 ff1a 	bl	800dcb8 <memmove>
 800ce84:	68a3      	ldr	r3, [r4, #8]
 800ce86:	1b9b      	subs	r3, r3, r6
 800ce88:	60a3      	str	r3, [r4, #8]
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	4433      	add	r3, r6
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	2000      	movs	r0, #0
 800ce92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce96:	462a      	mov	r2, r5
 800ce98:	f000 fed2 	bl	800dc40 <_realloc_r>
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	2800      	cmp	r0, #0
 800cea0:	d1e0      	bne.n	800ce64 <__ssputs_r+0x5a>
 800cea2:	6921      	ldr	r1, [r4, #16]
 800cea4:	4650      	mov	r0, sl
 800cea6:	f7ff fc0d 	bl	800c6c4 <_free_r>
 800ceaa:	230c      	movs	r3, #12
 800ceac:	f8ca 3000 	str.w	r3, [sl]
 800ceb0:	89a3      	ldrh	r3, [r4, #12]
 800ceb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb6:	81a3      	strh	r3, [r4, #12]
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cebc:	e7e9      	b.n	800ce92 <__ssputs_r+0x88>
	...

0800cec0 <_svfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	898b      	ldrh	r3, [r1, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	b09d      	sub	sp, #116	; 0x74
 800cecc:	4607      	mov	r7, r0
 800cece:	460d      	mov	r5, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	d50e      	bpl.n	800cef2 <_svfiprintf_r+0x32>
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	b963      	cbnz	r3, 800cef2 <_svfiprintf_r+0x32>
 800ced8:	2140      	movs	r1, #64	; 0x40
 800ceda:	f7fd fae7 	bl	800a4ac <_malloc_r>
 800cede:	6028      	str	r0, [r5, #0]
 800cee0:	6128      	str	r0, [r5, #16]
 800cee2:	b920      	cbnz	r0, 800ceee <_svfiprintf_r+0x2e>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceec:	e0d0      	b.n	800d090 <_svfiprintf_r+0x1d0>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	616b      	str	r3, [r5, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	9309      	str	r3, [sp, #36]	; 0x24
 800cef6:	2320      	movs	r3, #32
 800cef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf00:	2330      	movs	r3, #48	; 0x30
 800cf02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0a8 <_svfiprintf_r+0x1e8>
 800cf06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf0a:	f04f 0901 	mov.w	r9, #1
 800cf0e:	4623      	mov	r3, r4
 800cf10:	469a      	mov	sl, r3
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	b10a      	cbz	r2, 800cf1c <_svfiprintf_r+0x5c>
 800cf18:	2a25      	cmp	r2, #37	; 0x25
 800cf1a:	d1f9      	bne.n	800cf10 <_svfiprintf_r+0x50>
 800cf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf20:	d00b      	beq.n	800cf3a <_svfiprintf_r+0x7a>
 800cf22:	465b      	mov	r3, fp
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff6e 	bl	800ce0a <__ssputs_r>
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f000 80a9 	beq.w	800d086 <_svfiprintf_r+0x1c6>
 800cf34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf36:	445a      	add	r2, fp
 800cf38:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 80a1 	beq.w	800d086 <_svfiprintf_r+0x1c6>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4e:	f10a 0a01 	add.w	sl, sl, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	4850      	ldr	r0, [pc, #320]	; (800d0a8 <_svfiprintf_r+0x1e8>)
 800cf66:	f7f3 f933 	bl	80001d0 <memchr>
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xe6>
 800cf6e:	06d0      	lsls	r0, r2, #27
 800cf70:	bf44      	itt	mi
 800cf72:	2320      	movmi	r3, #32
 800cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf78:	0711      	lsls	r1, r2, #28
 800cf7a:	bf44      	itt	mi
 800cf7c:	232b      	movmi	r3, #43	; 0x2b
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b2a      	cmp	r3, #42	; 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xf6>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4654      	mov	r4, sl
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4621      	mov	r1, r4
 800cf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9a:	3b30      	subs	r3, #48	; 0x30
 800cf9c:	2b09      	cmp	r3, #9
 800cf9e:	d94d      	bls.n	800d03c <_svfiprintf_r+0x17c>
 800cfa0:	b1b0      	cbz	r0, 800cfd0 <_svfiprintf_r+0x110>
 800cfa2:	9207      	str	r2, [sp, #28]
 800cfa4:	e014      	b.n	800cfd0 <_svfiprintf_r+0x110>
 800cfa6:	eba0 0308 	sub.w	r3, r0, r8
 800cfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	46a2      	mov	sl, r4
 800cfb4:	e7d2      	b.n	800cf5c <_svfiprintf_r+0x9c>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d19      	adds	r1, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	425b      	neglt	r3, r3
 800cfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc8:	9307      	strge	r3, [sp, #28]
 800cfca:	9307      	strlt	r3, [sp, #28]
 800cfcc:	bfb8      	it	lt
 800cfce:	9204      	strlt	r2, [sp, #16]
 800cfd0:	7823      	ldrb	r3, [r4, #0]
 800cfd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd4:	d10c      	bne.n	800cff0 <_svfiprintf_r+0x130>
 800cfd6:	7863      	ldrb	r3, [r4, #1]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d134      	bne.n	800d046 <_svfiprintf_r+0x186>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfec:	3402      	adds	r4, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d0b8 <_svfiprintf_r+0x1f8>
 800cff4:	7821      	ldrb	r1, [r4, #0]
 800cff6:	2203      	movs	r2, #3
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7f3 f8e9 	bl	80001d0 <memchr>
 800cffe:	b138      	cbz	r0, 800d010 <_svfiprintf_r+0x150>
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	2240      	movs	r2, #64	; 0x40
 800d008:	4082      	lsls	r2, r0
 800d00a:	4313      	orrs	r3, r2
 800d00c:	3401      	adds	r4, #1
 800d00e:	9304      	str	r3, [sp, #16]
 800d010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d014:	4825      	ldr	r0, [pc, #148]	; (800d0ac <_svfiprintf_r+0x1ec>)
 800d016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d01a:	2206      	movs	r2, #6
 800d01c:	f7f3 f8d8 	bl	80001d0 <memchr>
 800d020:	2800      	cmp	r0, #0
 800d022:	d038      	beq.n	800d096 <_svfiprintf_r+0x1d6>
 800d024:	4b22      	ldr	r3, [pc, #136]	; (800d0b0 <_svfiprintf_r+0x1f0>)
 800d026:	bb1b      	cbnz	r3, 800d070 <_svfiprintf_r+0x1b0>
 800d028:	9b03      	ldr	r3, [sp, #12]
 800d02a:	3307      	adds	r3, #7
 800d02c:	f023 0307 	bic.w	r3, r3, #7
 800d030:	3308      	adds	r3, #8
 800d032:	9303      	str	r3, [sp, #12]
 800d034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d036:	4433      	add	r3, r6
 800d038:	9309      	str	r3, [sp, #36]	; 0x24
 800d03a:	e768      	b.n	800cf0e <_svfiprintf_r+0x4e>
 800d03c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d040:	460c      	mov	r4, r1
 800d042:	2001      	movs	r0, #1
 800d044:	e7a6      	b.n	800cf94 <_svfiprintf_r+0xd4>
 800d046:	2300      	movs	r3, #0
 800d048:	3401      	adds	r4, #1
 800d04a:	9305      	str	r3, [sp, #20]
 800d04c:	4619      	mov	r1, r3
 800d04e:	f04f 0c0a 	mov.w	ip, #10
 800d052:	4620      	mov	r0, r4
 800d054:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d058:	3a30      	subs	r2, #48	; 0x30
 800d05a:	2a09      	cmp	r2, #9
 800d05c:	d903      	bls.n	800d066 <_svfiprintf_r+0x1a6>
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0c6      	beq.n	800cff0 <_svfiprintf_r+0x130>
 800d062:	9105      	str	r1, [sp, #20]
 800d064:	e7c4      	b.n	800cff0 <_svfiprintf_r+0x130>
 800d066:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06a:	4604      	mov	r4, r0
 800d06c:	2301      	movs	r3, #1
 800d06e:	e7f0      	b.n	800d052 <_svfiprintf_r+0x192>
 800d070:	ab03      	add	r3, sp, #12
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	462a      	mov	r2, r5
 800d076:	4b0f      	ldr	r3, [pc, #60]	; (800d0b4 <_svfiprintf_r+0x1f4>)
 800d078:	a904      	add	r1, sp, #16
 800d07a:	4638      	mov	r0, r7
 800d07c:	f7fc ffb0 	bl	8009fe0 <_printf_float>
 800d080:	1c42      	adds	r2, r0, #1
 800d082:	4606      	mov	r6, r0
 800d084:	d1d6      	bne.n	800d034 <_svfiprintf_r+0x174>
 800d086:	89ab      	ldrh	r3, [r5, #12]
 800d088:	065b      	lsls	r3, r3, #25
 800d08a:	f53f af2d 	bmi.w	800cee8 <_svfiprintf_r+0x28>
 800d08e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d090:	b01d      	add	sp, #116	; 0x74
 800d092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d096:	ab03      	add	r3, sp, #12
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	462a      	mov	r2, r5
 800d09c:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <_svfiprintf_r+0x1f4>)
 800d09e:	a904      	add	r1, sp, #16
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f7fd faf1 	bl	800a688 <_printf_i>
 800d0a6:	e7eb      	b.n	800d080 <_svfiprintf_r+0x1c0>
 800d0a8:	0800f9e4 	.word	0x0800f9e4
 800d0ac:	0800f9ee 	.word	0x0800f9ee
 800d0b0:	08009fe1 	.word	0x08009fe1
 800d0b4:	0800ce0b 	.word	0x0800ce0b
 800d0b8:	0800f9ea 	.word	0x0800f9ea

0800d0bc <__ascii_mbtowc>:
 800d0bc:	b082      	sub	sp, #8
 800d0be:	b901      	cbnz	r1, 800d0c2 <__ascii_mbtowc+0x6>
 800d0c0:	a901      	add	r1, sp, #4
 800d0c2:	b142      	cbz	r2, 800d0d6 <__ascii_mbtowc+0x1a>
 800d0c4:	b14b      	cbz	r3, 800d0da <__ascii_mbtowc+0x1e>
 800d0c6:	7813      	ldrb	r3, [r2, #0]
 800d0c8:	600b      	str	r3, [r1, #0]
 800d0ca:	7812      	ldrb	r2, [r2, #0]
 800d0cc:	1e10      	subs	r0, r2, #0
 800d0ce:	bf18      	it	ne
 800d0d0:	2001      	movne	r0, #1
 800d0d2:	b002      	add	sp, #8
 800d0d4:	4770      	bx	lr
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	e7fb      	b.n	800d0d2 <__ascii_mbtowc+0x16>
 800d0da:	f06f 0001 	mvn.w	r0, #1
 800d0de:	e7f8      	b.n	800d0d2 <__ascii_mbtowc+0x16>

0800d0e0 <__sflush_r>:
 800d0e0:	898a      	ldrh	r2, [r1, #12]
 800d0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	0710      	lsls	r0, r2, #28
 800d0ea:	460c      	mov	r4, r1
 800d0ec:	d458      	bmi.n	800d1a0 <__sflush_r+0xc0>
 800d0ee:	684b      	ldr	r3, [r1, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	dc05      	bgt.n	800d100 <__sflush_r+0x20>
 800d0f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	dc02      	bgt.n	800d100 <__sflush_r+0x20>
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d102:	2e00      	cmp	r6, #0
 800d104:	d0f9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d106:	2300      	movs	r3, #0
 800d108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d10c:	682f      	ldr	r7, [r5, #0]
 800d10e:	6a21      	ldr	r1, [r4, #32]
 800d110:	602b      	str	r3, [r5, #0]
 800d112:	d032      	beq.n	800d17a <__sflush_r+0x9a>
 800d114:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	075a      	lsls	r2, r3, #29
 800d11a:	d505      	bpl.n	800d128 <__sflush_r+0x48>
 800d11c:	6863      	ldr	r3, [r4, #4]
 800d11e:	1ac0      	subs	r0, r0, r3
 800d120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d122:	b10b      	cbz	r3, 800d128 <__sflush_r+0x48>
 800d124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d126:	1ac0      	subs	r0, r0, r3
 800d128:	2300      	movs	r3, #0
 800d12a:	4602      	mov	r2, r0
 800d12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d12e:	6a21      	ldr	r1, [r4, #32]
 800d130:	4628      	mov	r0, r5
 800d132:	47b0      	blx	r6
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	89a3      	ldrh	r3, [r4, #12]
 800d138:	d106      	bne.n	800d148 <__sflush_r+0x68>
 800d13a:	6829      	ldr	r1, [r5, #0]
 800d13c:	291d      	cmp	r1, #29
 800d13e:	d82b      	bhi.n	800d198 <__sflush_r+0xb8>
 800d140:	4a29      	ldr	r2, [pc, #164]	; (800d1e8 <__sflush_r+0x108>)
 800d142:	410a      	asrs	r2, r1
 800d144:	07d6      	lsls	r6, r2, #31
 800d146:	d427      	bmi.n	800d198 <__sflush_r+0xb8>
 800d148:	2200      	movs	r2, #0
 800d14a:	6062      	str	r2, [r4, #4]
 800d14c:	04d9      	lsls	r1, r3, #19
 800d14e:	6922      	ldr	r2, [r4, #16]
 800d150:	6022      	str	r2, [r4, #0]
 800d152:	d504      	bpl.n	800d15e <__sflush_r+0x7e>
 800d154:	1c42      	adds	r2, r0, #1
 800d156:	d101      	bne.n	800d15c <__sflush_r+0x7c>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b903      	cbnz	r3, 800d15e <__sflush_r+0x7e>
 800d15c:	6560      	str	r0, [r4, #84]	; 0x54
 800d15e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d160:	602f      	str	r7, [r5, #0]
 800d162:	2900      	cmp	r1, #0
 800d164:	d0c9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d16a:	4299      	cmp	r1, r3
 800d16c:	d002      	beq.n	800d174 <__sflush_r+0x94>
 800d16e:	4628      	mov	r0, r5
 800d170:	f7ff faa8 	bl	800c6c4 <_free_r>
 800d174:	2000      	movs	r0, #0
 800d176:	6360      	str	r0, [r4, #52]	; 0x34
 800d178:	e7c0      	b.n	800d0fc <__sflush_r+0x1c>
 800d17a:	2301      	movs	r3, #1
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b0      	blx	r6
 800d180:	1c41      	adds	r1, r0, #1
 800d182:	d1c8      	bne.n	800d116 <__sflush_r+0x36>
 800d184:	682b      	ldr	r3, [r5, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d0c5      	beq.n	800d116 <__sflush_r+0x36>
 800d18a:	2b1d      	cmp	r3, #29
 800d18c:	d001      	beq.n	800d192 <__sflush_r+0xb2>
 800d18e:	2b16      	cmp	r3, #22
 800d190:	d101      	bne.n	800d196 <__sflush_r+0xb6>
 800d192:	602f      	str	r7, [r5, #0]
 800d194:	e7b1      	b.n	800d0fa <__sflush_r+0x1a>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	e7ad      	b.n	800d0fc <__sflush_r+0x1c>
 800d1a0:	690f      	ldr	r7, [r1, #16]
 800d1a2:	2f00      	cmp	r7, #0
 800d1a4:	d0a9      	beq.n	800d0fa <__sflush_r+0x1a>
 800d1a6:	0793      	lsls	r3, r2, #30
 800d1a8:	680e      	ldr	r6, [r1, #0]
 800d1aa:	bf08      	it	eq
 800d1ac:	694b      	ldreq	r3, [r1, #20]
 800d1ae:	600f      	str	r7, [r1, #0]
 800d1b0:	bf18      	it	ne
 800d1b2:	2300      	movne	r3, #0
 800d1b4:	eba6 0807 	sub.w	r8, r6, r7
 800d1b8:	608b      	str	r3, [r1, #8]
 800d1ba:	f1b8 0f00 	cmp.w	r8, #0
 800d1be:	dd9c      	ble.n	800d0fa <__sflush_r+0x1a>
 800d1c0:	6a21      	ldr	r1, [r4, #32]
 800d1c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d1c4:	4643      	mov	r3, r8
 800d1c6:	463a      	mov	r2, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b0      	blx	r6
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	dc06      	bgt.n	800d1de <__sflush_r+0xfe>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1d6:	81a3      	strh	r3, [r4, #12]
 800d1d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1dc:	e78e      	b.n	800d0fc <__sflush_r+0x1c>
 800d1de:	4407      	add	r7, r0
 800d1e0:	eba8 0800 	sub.w	r8, r8, r0
 800d1e4:	e7e9      	b.n	800d1ba <__sflush_r+0xda>
 800d1e6:	bf00      	nop
 800d1e8:	dfbffffe 	.word	0xdfbffffe

0800d1ec <_fflush_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	690b      	ldr	r3, [r1, #16]
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	b913      	cbnz	r3, 800d1fc <_fflush_r+0x10>
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	b118      	cbz	r0, 800d206 <_fflush_r+0x1a>
 800d1fe:	6a03      	ldr	r3, [r0, #32]
 800d200:	b90b      	cbnz	r3, 800d206 <_fflush_r+0x1a>
 800d202:	f7fd fc1b 	bl	800aa3c <__sinit>
 800d206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d0f3      	beq.n	800d1f6 <_fflush_r+0xa>
 800d20e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d210:	07d0      	lsls	r0, r2, #31
 800d212:	d404      	bmi.n	800d21e <_fflush_r+0x32>
 800d214:	0599      	lsls	r1, r3, #22
 800d216:	d402      	bmi.n	800d21e <_fflush_r+0x32>
 800d218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d21a:	f7fe fba0 	bl	800b95e <__retarget_lock_acquire_recursive>
 800d21e:	4628      	mov	r0, r5
 800d220:	4621      	mov	r1, r4
 800d222:	f7ff ff5d 	bl	800d0e0 <__sflush_r>
 800d226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d228:	07da      	lsls	r2, r3, #31
 800d22a:	4605      	mov	r5, r0
 800d22c:	d4e4      	bmi.n	800d1f8 <_fflush_r+0xc>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	059b      	lsls	r3, r3, #22
 800d232:	d4e1      	bmi.n	800d1f8 <_fflush_r+0xc>
 800d234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d236:	f7fe fb93 	bl	800b960 <__retarget_lock_release_recursive>
 800d23a:	e7dd      	b.n	800d1f8 <_fflush_r+0xc>

0800d23c <_Balloc>:
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	69c6      	ldr	r6, [r0, #28]
 800d240:	4604      	mov	r4, r0
 800d242:	460d      	mov	r5, r1
 800d244:	b976      	cbnz	r6, 800d264 <_Balloc+0x28>
 800d246:	2010      	movs	r0, #16
 800d248:	f7fd f900 	bl	800a44c <malloc>
 800d24c:	4602      	mov	r2, r0
 800d24e:	61e0      	str	r0, [r4, #28]
 800d250:	b920      	cbnz	r0, 800d25c <_Balloc+0x20>
 800d252:	4b18      	ldr	r3, [pc, #96]	; (800d2b4 <_Balloc+0x78>)
 800d254:	4818      	ldr	r0, [pc, #96]	; (800d2b8 <_Balloc+0x7c>)
 800d256:	216b      	movs	r1, #107	; 0x6b
 800d258:	f7fe fb9a 	bl	800b990 <__assert_func>
 800d25c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d260:	6006      	str	r6, [r0, #0]
 800d262:	60c6      	str	r6, [r0, #12]
 800d264:	69e6      	ldr	r6, [r4, #28]
 800d266:	68f3      	ldr	r3, [r6, #12]
 800d268:	b183      	cbz	r3, 800d28c <_Balloc+0x50>
 800d26a:	69e3      	ldr	r3, [r4, #28]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d272:	b9b8      	cbnz	r0, 800d2a4 <_Balloc+0x68>
 800d274:	2101      	movs	r1, #1
 800d276:	fa01 f605 	lsl.w	r6, r1, r5
 800d27a:	1d72      	adds	r2, r6, #5
 800d27c:	0092      	lsls	r2, r2, #2
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fd81 	bl	800dd86 <_calloc_r>
 800d284:	b160      	cbz	r0, 800d2a0 <_Balloc+0x64>
 800d286:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d28a:	e00e      	b.n	800d2aa <_Balloc+0x6e>
 800d28c:	2221      	movs	r2, #33	; 0x21
 800d28e:	2104      	movs	r1, #4
 800d290:	4620      	mov	r0, r4
 800d292:	f000 fd78 	bl	800dd86 <_calloc_r>
 800d296:	69e3      	ldr	r3, [r4, #28]
 800d298:	60f0      	str	r0, [r6, #12]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e4      	bne.n	800d26a <_Balloc+0x2e>
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}
 800d2a4:	6802      	ldr	r2, [r0, #0]
 800d2a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2b0:	e7f7      	b.n	800d2a2 <_Balloc+0x66>
 800d2b2:	bf00      	nop
 800d2b4:	0800f758 	.word	0x0800f758
 800d2b8:	0800f9f5 	.word	0x0800f9f5

0800d2bc <_Bfree>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	69c6      	ldr	r6, [r0, #28]
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	b976      	cbnz	r6, 800d2e4 <_Bfree+0x28>
 800d2c6:	2010      	movs	r0, #16
 800d2c8:	f7fd f8c0 	bl	800a44c <malloc>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	61e8      	str	r0, [r5, #28]
 800d2d0:	b920      	cbnz	r0, 800d2dc <_Bfree+0x20>
 800d2d2:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <_Bfree+0x3c>)
 800d2d4:	4809      	ldr	r0, [pc, #36]	; (800d2fc <_Bfree+0x40>)
 800d2d6:	218f      	movs	r1, #143	; 0x8f
 800d2d8:	f7fe fb5a 	bl	800b990 <__assert_func>
 800d2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2e0:	6006      	str	r6, [r0, #0]
 800d2e2:	60c6      	str	r6, [r0, #12]
 800d2e4:	b13c      	cbz	r4, 800d2f6 <_Bfree+0x3a>
 800d2e6:	69eb      	ldr	r3, [r5, #28]
 800d2e8:	6862      	ldr	r2, [r4, #4]
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d2f0:	6021      	str	r1, [r4, #0]
 800d2f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}
 800d2f8:	0800f758 	.word	0x0800f758
 800d2fc:	0800f9f5 	.word	0x0800f9f5

0800d300 <__multadd>:
 800d300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d304:	690d      	ldr	r5, [r1, #16]
 800d306:	4607      	mov	r7, r0
 800d308:	460c      	mov	r4, r1
 800d30a:	461e      	mov	r6, r3
 800d30c:	f101 0c14 	add.w	ip, r1, #20
 800d310:	2000      	movs	r0, #0
 800d312:	f8dc 3000 	ldr.w	r3, [ip]
 800d316:	b299      	uxth	r1, r3
 800d318:	fb02 6101 	mla	r1, r2, r1, r6
 800d31c:	0c1e      	lsrs	r6, r3, #16
 800d31e:	0c0b      	lsrs	r3, r1, #16
 800d320:	fb02 3306 	mla	r3, r2, r6, r3
 800d324:	b289      	uxth	r1, r1
 800d326:	3001      	adds	r0, #1
 800d328:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d32c:	4285      	cmp	r5, r0
 800d32e:	f84c 1b04 	str.w	r1, [ip], #4
 800d332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d336:	dcec      	bgt.n	800d312 <__multadd+0x12>
 800d338:	b30e      	cbz	r6, 800d37e <__multadd+0x7e>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	dc19      	bgt.n	800d374 <__multadd+0x74>
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	4638      	mov	r0, r7
 800d344:	3101      	adds	r1, #1
 800d346:	f7ff ff79 	bl	800d23c <_Balloc>
 800d34a:	4680      	mov	r8, r0
 800d34c:	b928      	cbnz	r0, 800d35a <__multadd+0x5a>
 800d34e:	4602      	mov	r2, r0
 800d350:	4b0c      	ldr	r3, [pc, #48]	; (800d384 <__multadd+0x84>)
 800d352:	480d      	ldr	r0, [pc, #52]	; (800d388 <__multadd+0x88>)
 800d354:	21ba      	movs	r1, #186	; 0xba
 800d356:	f7fe fb1b 	bl	800b990 <__assert_func>
 800d35a:	6922      	ldr	r2, [r4, #16]
 800d35c:	3202      	adds	r2, #2
 800d35e:	f104 010c 	add.w	r1, r4, #12
 800d362:	0092      	lsls	r2, r2, #2
 800d364:	300c      	adds	r0, #12
 800d366:	f7fe fafc 	bl	800b962 <memcpy>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4638      	mov	r0, r7
 800d36e:	f7ff ffa5 	bl	800d2bc <_Bfree>
 800d372:	4644      	mov	r4, r8
 800d374:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d378:	3501      	adds	r5, #1
 800d37a:	615e      	str	r6, [r3, #20]
 800d37c:	6125      	str	r5, [r4, #16]
 800d37e:	4620      	mov	r0, r4
 800d380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d384:	0800f973 	.word	0x0800f973
 800d388:	0800f9f5 	.word	0x0800f9f5

0800d38c <__s2b>:
 800d38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d390:	460c      	mov	r4, r1
 800d392:	4615      	mov	r5, r2
 800d394:	461f      	mov	r7, r3
 800d396:	2209      	movs	r2, #9
 800d398:	3308      	adds	r3, #8
 800d39a:	4606      	mov	r6, r0
 800d39c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	db09      	blt.n	800d3bc <__s2b+0x30>
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff ff47 	bl	800d23c <_Balloc>
 800d3ae:	b940      	cbnz	r0, 800d3c2 <__s2b+0x36>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	4b19      	ldr	r3, [pc, #100]	; (800d418 <__s2b+0x8c>)
 800d3b4:	4819      	ldr	r0, [pc, #100]	; (800d41c <__s2b+0x90>)
 800d3b6:	21d3      	movs	r1, #211	; 0xd3
 800d3b8:	f7fe faea 	bl	800b990 <__assert_func>
 800d3bc:	0052      	lsls	r2, r2, #1
 800d3be:	3101      	adds	r1, #1
 800d3c0:	e7f0      	b.n	800d3a4 <__s2b+0x18>
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	6143      	str	r3, [r0, #20]
 800d3c6:	2d09      	cmp	r5, #9
 800d3c8:	f04f 0301 	mov.w	r3, #1
 800d3cc:	6103      	str	r3, [r0, #16]
 800d3ce:	dd16      	ble.n	800d3fe <__s2b+0x72>
 800d3d0:	f104 0909 	add.w	r9, r4, #9
 800d3d4:	46c8      	mov	r8, r9
 800d3d6:	442c      	add	r4, r5
 800d3d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d3dc:	4601      	mov	r1, r0
 800d3de:	3b30      	subs	r3, #48	; 0x30
 800d3e0:	220a      	movs	r2, #10
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f7ff ff8c 	bl	800d300 <__multadd>
 800d3e8:	45a0      	cmp	r8, r4
 800d3ea:	d1f5      	bne.n	800d3d8 <__s2b+0x4c>
 800d3ec:	f1a5 0408 	sub.w	r4, r5, #8
 800d3f0:	444c      	add	r4, r9
 800d3f2:	1b2d      	subs	r5, r5, r4
 800d3f4:	1963      	adds	r3, r4, r5
 800d3f6:	42bb      	cmp	r3, r7
 800d3f8:	db04      	blt.n	800d404 <__s2b+0x78>
 800d3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3fe:	340a      	adds	r4, #10
 800d400:	2509      	movs	r5, #9
 800d402:	e7f6      	b.n	800d3f2 <__s2b+0x66>
 800d404:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d408:	4601      	mov	r1, r0
 800d40a:	3b30      	subs	r3, #48	; 0x30
 800d40c:	220a      	movs	r2, #10
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff ff76 	bl	800d300 <__multadd>
 800d414:	e7ee      	b.n	800d3f4 <__s2b+0x68>
 800d416:	bf00      	nop
 800d418:	0800f973 	.word	0x0800f973
 800d41c:	0800f9f5 	.word	0x0800f9f5

0800d420 <__hi0bits>:
 800d420:	0c03      	lsrs	r3, r0, #16
 800d422:	041b      	lsls	r3, r3, #16
 800d424:	b9d3      	cbnz	r3, 800d45c <__hi0bits+0x3c>
 800d426:	0400      	lsls	r0, r0, #16
 800d428:	2310      	movs	r3, #16
 800d42a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d42e:	bf04      	itt	eq
 800d430:	0200      	lsleq	r0, r0, #8
 800d432:	3308      	addeq	r3, #8
 800d434:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d438:	bf04      	itt	eq
 800d43a:	0100      	lsleq	r0, r0, #4
 800d43c:	3304      	addeq	r3, #4
 800d43e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d442:	bf04      	itt	eq
 800d444:	0080      	lsleq	r0, r0, #2
 800d446:	3302      	addeq	r3, #2
 800d448:	2800      	cmp	r0, #0
 800d44a:	db05      	blt.n	800d458 <__hi0bits+0x38>
 800d44c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d450:	f103 0301 	add.w	r3, r3, #1
 800d454:	bf08      	it	eq
 800d456:	2320      	moveq	r3, #32
 800d458:	4618      	mov	r0, r3
 800d45a:	4770      	bx	lr
 800d45c:	2300      	movs	r3, #0
 800d45e:	e7e4      	b.n	800d42a <__hi0bits+0xa>

0800d460 <__lo0bits>:
 800d460:	6803      	ldr	r3, [r0, #0]
 800d462:	f013 0207 	ands.w	r2, r3, #7
 800d466:	d00c      	beq.n	800d482 <__lo0bits+0x22>
 800d468:	07d9      	lsls	r1, r3, #31
 800d46a:	d422      	bmi.n	800d4b2 <__lo0bits+0x52>
 800d46c:	079a      	lsls	r2, r3, #30
 800d46e:	bf49      	itett	mi
 800d470:	085b      	lsrmi	r3, r3, #1
 800d472:	089b      	lsrpl	r3, r3, #2
 800d474:	6003      	strmi	r3, [r0, #0]
 800d476:	2201      	movmi	r2, #1
 800d478:	bf5c      	itt	pl
 800d47a:	6003      	strpl	r3, [r0, #0]
 800d47c:	2202      	movpl	r2, #2
 800d47e:	4610      	mov	r0, r2
 800d480:	4770      	bx	lr
 800d482:	b299      	uxth	r1, r3
 800d484:	b909      	cbnz	r1, 800d48a <__lo0bits+0x2a>
 800d486:	0c1b      	lsrs	r3, r3, #16
 800d488:	2210      	movs	r2, #16
 800d48a:	b2d9      	uxtb	r1, r3
 800d48c:	b909      	cbnz	r1, 800d492 <__lo0bits+0x32>
 800d48e:	3208      	adds	r2, #8
 800d490:	0a1b      	lsrs	r3, r3, #8
 800d492:	0719      	lsls	r1, r3, #28
 800d494:	bf04      	itt	eq
 800d496:	091b      	lsreq	r3, r3, #4
 800d498:	3204      	addeq	r2, #4
 800d49a:	0799      	lsls	r1, r3, #30
 800d49c:	bf04      	itt	eq
 800d49e:	089b      	lsreq	r3, r3, #2
 800d4a0:	3202      	addeq	r2, #2
 800d4a2:	07d9      	lsls	r1, r3, #31
 800d4a4:	d403      	bmi.n	800d4ae <__lo0bits+0x4e>
 800d4a6:	085b      	lsrs	r3, r3, #1
 800d4a8:	f102 0201 	add.w	r2, r2, #1
 800d4ac:	d003      	beq.n	800d4b6 <__lo0bits+0x56>
 800d4ae:	6003      	str	r3, [r0, #0]
 800d4b0:	e7e5      	b.n	800d47e <__lo0bits+0x1e>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	e7e3      	b.n	800d47e <__lo0bits+0x1e>
 800d4b6:	2220      	movs	r2, #32
 800d4b8:	e7e1      	b.n	800d47e <__lo0bits+0x1e>
	...

0800d4bc <__i2b>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	460c      	mov	r4, r1
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	f7ff febb 	bl	800d23c <_Balloc>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	b928      	cbnz	r0, 800d4d6 <__i2b+0x1a>
 800d4ca:	4b05      	ldr	r3, [pc, #20]	; (800d4e0 <__i2b+0x24>)
 800d4cc:	4805      	ldr	r0, [pc, #20]	; (800d4e4 <__i2b+0x28>)
 800d4ce:	f240 1145 	movw	r1, #325	; 0x145
 800d4d2:	f7fe fa5d 	bl	800b990 <__assert_func>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	6144      	str	r4, [r0, #20]
 800d4da:	6103      	str	r3, [r0, #16]
 800d4dc:	bd10      	pop	{r4, pc}
 800d4de:	bf00      	nop
 800d4e0:	0800f973 	.word	0x0800f973
 800d4e4:	0800f9f5 	.word	0x0800f9f5

0800d4e8 <__multiply>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	4691      	mov	r9, r2
 800d4ee:	690a      	ldr	r2, [r1, #16]
 800d4f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	bfb8      	it	lt
 800d4f8:	460b      	movlt	r3, r1
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	bfbc      	itt	lt
 800d4fe:	464c      	movlt	r4, r9
 800d500:	4699      	movlt	r9, r3
 800d502:	6927      	ldr	r7, [r4, #16]
 800d504:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	6861      	ldr	r1, [r4, #4]
 800d50c:	eb07 060a 	add.w	r6, r7, sl
 800d510:	42b3      	cmp	r3, r6
 800d512:	b085      	sub	sp, #20
 800d514:	bfb8      	it	lt
 800d516:	3101      	addlt	r1, #1
 800d518:	f7ff fe90 	bl	800d23c <_Balloc>
 800d51c:	b930      	cbnz	r0, 800d52c <__multiply+0x44>
 800d51e:	4602      	mov	r2, r0
 800d520:	4b44      	ldr	r3, [pc, #272]	; (800d634 <__multiply+0x14c>)
 800d522:	4845      	ldr	r0, [pc, #276]	; (800d638 <__multiply+0x150>)
 800d524:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d528:	f7fe fa32 	bl	800b990 <__assert_func>
 800d52c:	f100 0514 	add.w	r5, r0, #20
 800d530:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d534:	462b      	mov	r3, r5
 800d536:	2200      	movs	r2, #0
 800d538:	4543      	cmp	r3, r8
 800d53a:	d321      	bcc.n	800d580 <__multiply+0x98>
 800d53c:	f104 0314 	add.w	r3, r4, #20
 800d540:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d544:	f109 0314 	add.w	r3, r9, #20
 800d548:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d54c:	9202      	str	r2, [sp, #8]
 800d54e:	1b3a      	subs	r2, r7, r4
 800d550:	3a15      	subs	r2, #21
 800d552:	f022 0203 	bic.w	r2, r2, #3
 800d556:	3204      	adds	r2, #4
 800d558:	f104 0115 	add.w	r1, r4, #21
 800d55c:	428f      	cmp	r7, r1
 800d55e:	bf38      	it	cc
 800d560:	2204      	movcc	r2, #4
 800d562:	9201      	str	r2, [sp, #4]
 800d564:	9a02      	ldr	r2, [sp, #8]
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d80c      	bhi.n	800d586 <__multiply+0x9e>
 800d56c:	2e00      	cmp	r6, #0
 800d56e:	dd03      	ble.n	800d578 <__multiply+0x90>
 800d570:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d574:	2b00      	cmp	r3, #0
 800d576:	d05b      	beq.n	800d630 <__multiply+0x148>
 800d578:	6106      	str	r6, [r0, #16]
 800d57a:	b005      	add	sp, #20
 800d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d580:	f843 2b04 	str.w	r2, [r3], #4
 800d584:	e7d8      	b.n	800d538 <__multiply+0x50>
 800d586:	f8b3 a000 	ldrh.w	sl, [r3]
 800d58a:	f1ba 0f00 	cmp.w	sl, #0
 800d58e:	d024      	beq.n	800d5da <__multiply+0xf2>
 800d590:	f104 0e14 	add.w	lr, r4, #20
 800d594:	46a9      	mov	r9, r5
 800d596:	f04f 0c00 	mov.w	ip, #0
 800d59a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d59e:	f8d9 1000 	ldr.w	r1, [r9]
 800d5a2:	fa1f fb82 	uxth.w	fp, r2
 800d5a6:	b289      	uxth	r1, r1
 800d5a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5b0:	f8d9 2000 	ldr.w	r2, [r9]
 800d5b4:	4461      	add	r1, ip
 800d5b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5c2:	b289      	uxth	r1, r1
 800d5c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5c8:	4577      	cmp	r7, lr
 800d5ca:	f849 1b04 	str.w	r1, [r9], #4
 800d5ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5d2:	d8e2      	bhi.n	800d59a <__multiply+0xb2>
 800d5d4:	9a01      	ldr	r2, [sp, #4]
 800d5d6:	f845 c002 	str.w	ip, [r5, r2]
 800d5da:	9a03      	ldr	r2, [sp, #12]
 800d5dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	f1b9 0f00 	cmp.w	r9, #0
 800d5e6:	d021      	beq.n	800d62c <__multiply+0x144>
 800d5e8:	6829      	ldr	r1, [r5, #0]
 800d5ea:	f104 0c14 	add.w	ip, r4, #20
 800d5ee:	46ae      	mov	lr, r5
 800d5f0:	f04f 0a00 	mov.w	sl, #0
 800d5f4:	f8bc b000 	ldrh.w	fp, [ip]
 800d5f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d5fc:	fb09 220b 	mla	r2, r9, fp, r2
 800d600:	4452      	add	r2, sl
 800d602:	b289      	uxth	r1, r1
 800d604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d608:	f84e 1b04 	str.w	r1, [lr], #4
 800d60c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d610:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d614:	f8be 1000 	ldrh.w	r1, [lr]
 800d618:	fb09 110a 	mla	r1, r9, sl, r1
 800d61c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d620:	4567      	cmp	r7, ip
 800d622:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d626:	d8e5      	bhi.n	800d5f4 <__multiply+0x10c>
 800d628:	9a01      	ldr	r2, [sp, #4]
 800d62a:	50a9      	str	r1, [r5, r2]
 800d62c:	3504      	adds	r5, #4
 800d62e:	e799      	b.n	800d564 <__multiply+0x7c>
 800d630:	3e01      	subs	r6, #1
 800d632:	e79b      	b.n	800d56c <__multiply+0x84>
 800d634:	0800f973 	.word	0x0800f973
 800d638:	0800f9f5 	.word	0x0800f9f5

0800d63c <__pow5mult>:
 800d63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d640:	4615      	mov	r5, r2
 800d642:	f012 0203 	ands.w	r2, r2, #3
 800d646:	4606      	mov	r6, r0
 800d648:	460f      	mov	r7, r1
 800d64a:	d007      	beq.n	800d65c <__pow5mult+0x20>
 800d64c:	4c25      	ldr	r4, [pc, #148]	; (800d6e4 <__pow5mult+0xa8>)
 800d64e:	3a01      	subs	r2, #1
 800d650:	2300      	movs	r3, #0
 800d652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d656:	f7ff fe53 	bl	800d300 <__multadd>
 800d65a:	4607      	mov	r7, r0
 800d65c:	10ad      	asrs	r5, r5, #2
 800d65e:	d03d      	beq.n	800d6dc <__pow5mult+0xa0>
 800d660:	69f4      	ldr	r4, [r6, #28]
 800d662:	b97c      	cbnz	r4, 800d684 <__pow5mult+0x48>
 800d664:	2010      	movs	r0, #16
 800d666:	f7fc fef1 	bl	800a44c <malloc>
 800d66a:	4602      	mov	r2, r0
 800d66c:	61f0      	str	r0, [r6, #28]
 800d66e:	b928      	cbnz	r0, 800d67c <__pow5mult+0x40>
 800d670:	4b1d      	ldr	r3, [pc, #116]	; (800d6e8 <__pow5mult+0xac>)
 800d672:	481e      	ldr	r0, [pc, #120]	; (800d6ec <__pow5mult+0xb0>)
 800d674:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d678:	f7fe f98a 	bl	800b990 <__assert_func>
 800d67c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d680:	6004      	str	r4, [r0, #0]
 800d682:	60c4      	str	r4, [r0, #12]
 800d684:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d688:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d68c:	b94c      	cbnz	r4, 800d6a2 <__pow5mult+0x66>
 800d68e:	f240 2171 	movw	r1, #625	; 0x271
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff ff12 	bl	800d4bc <__i2b>
 800d698:	2300      	movs	r3, #0
 800d69a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d69e:	4604      	mov	r4, r0
 800d6a0:	6003      	str	r3, [r0, #0]
 800d6a2:	f04f 0900 	mov.w	r9, #0
 800d6a6:	07eb      	lsls	r3, r5, #31
 800d6a8:	d50a      	bpl.n	800d6c0 <__pow5mult+0x84>
 800d6aa:	4639      	mov	r1, r7
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f7ff ff1a 	bl	800d4e8 <__multiply>
 800d6b4:	4639      	mov	r1, r7
 800d6b6:	4680      	mov	r8, r0
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f7ff fdff 	bl	800d2bc <_Bfree>
 800d6be:	4647      	mov	r7, r8
 800d6c0:	106d      	asrs	r5, r5, #1
 800d6c2:	d00b      	beq.n	800d6dc <__pow5mult+0xa0>
 800d6c4:	6820      	ldr	r0, [r4, #0]
 800d6c6:	b938      	cbnz	r0, 800d6d8 <__pow5mult+0x9c>
 800d6c8:	4622      	mov	r2, r4
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7ff ff0b 	bl	800d4e8 <__multiply>
 800d6d2:	6020      	str	r0, [r4, #0]
 800d6d4:	f8c0 9000 	str.w	r9, [r0]
 800d6d8:	4604      	mov	r4, r0
 800d6da:	e7e4      	b.n	800d6a6 <__pow5mult+0x6a>
 800d6dc:	4638      	mov	r0, r7
 800d6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6e2:	bf00      	nop
 800d6e4:	0800fb40 	.word	0x0800fb40
 800d6e8:	0800f758 	.word	0x0800f758
 800d6ec:	0800f9f5 	.word	0x0800f9f5

0800d6f0 <__lshift>:
 800d6f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	6849      	ldr	r1, [r1, #4]
 800d6f8:	6923      	ldr	r3, [r4, #16]
 800d6fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d6fe:	68a3      	ldr	r3, [r4, #8]
 800d700:	4607      	mov	r7, r0
 800d702:	4691      	mov	r9, r2
 800d704:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d708:	f108 0601 	add.w	r6, r8, #1
 800d70c:	42b3      	cmp	r3, r6
 800d70e:	db0b      	blt.n	800d728 <__lshift+0x38>
 800d710:	4638      	mov	r0, r7
 800d712:	f7ff fd93 	bl	800d23c <_Balloc>
 800d716:	4605      	mov	r5, r0
 800d718:	b948      	cbnz	r0, 800d72e <__lshift+0x3e>
 800d71a:	4602      	mov	r2, r0
 800d71c:	4b28      	ldr	r3, [pc, #160]	; (800d7c0 <__lshift+0xd0>)
 800d71e:	4829      	ldr	r0, [pc, #164]	; (800d7c4 <__lshift+0xd4>)
 800d720:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d724:	f7fe f934 	bl	800b990 <__assert_func>
 800d728:	3101      	adds	r1, #1
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	e7ee      	b.n	800d70c <__lshift+0x1c>
 800d72e:	2300      	movs	r3, #0
 800d730:	f100 0114 	add.w	r1, r0, #20
 800d734:	f100 0210 	add.w	r2, r0, #16
 800d738:	4618      	mov	r0, r3
 800d73a:	4553      	cmp	r3, sl
 800d73c:	db33      	blt.n	800d7a6 <__lshift+0xb6>
 800d73e:	6920      	ldr	r0, [r4, #16]
 800d740:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d744:	f104 0314 	add.w	r3, r4, #20
 800d748:	f019 091f 	ands.w	r9, r9, #31
 800d74c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d750:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d754:	d02b      	beq.n	800d7ae <__lshift+0xbe>
 800d756:	f1c9 0e20 	rsb	lr, r9, #32
 800d75a:	468a      	mov	sl, r1
 800d75c:	2200      	movs	r2, #0
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	fa00 f009 	lsl.w	r0, r0, r9
 800d764:	4310      	orrs	r0, r2
 800d766:	f84a 0b04 	str.w	r0, [sl], #4
 800d76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d76e:	459c      	cmp	ip, r3
 800d770:	fa22 f20e 	lsr.w	r2, r2, lr
 800d774:	d8f3      	bhi.n	800d75e <__lshift+0x6e>
 800d776:	ebac 0304 	sub.w	r3, ip, r4
 800d77a:	3b15      	subs	r3, #21
 800d77c:	f023 0303 	bic.w	r3, r3, #3
 800d780:	3304      	adds	r3, #4
 800d782:	f104 0015 	add.w	r0, r4, #21
 800d786:	4584      	cmp	ip, r0
 800d788:	bf38      	it	cc
 800d78a:	2304      	movcc	r3, #4
 800d78c:	50ca      	str	r2, [r1, r3]
 800d78e:	b10a      	cbz	r2, 800d794 <__lshift+0xa4>
 800d790:	f108 0602 	add.w	r6, r8, #2
 800d794:	3e01      	subs	r6, #1
 800d796:	4638      	mov	r0, r7
 800d798:	612e      	str	r6, [r5, #16]
 800d79a:	4621      	mov	r1, r4
 800d79c:	f7ff fd8e 	bl	800d2bc <_Bfree>
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	e7c5      	b.n	800d73a <__lshift+0x4a>
 800d7ae:	3904      	subs	r1, #4
 800d7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7b8:	459c      	cmp	ip, r3
 800d7ba:	d8f9      	bhi.n	800d7b0 <__lshift+0xc0>
 800d7bc:	e7ea      	b.n	800d794 <__lshift+0xa4>
 800d7be:	bf00      	nop
 800d7c0:	0800f973 	.word	0x0800f973
 800d7c4:	0800f9f5 	.word	0x0800f9f5

0800d7c8 <__mcmp>:
 800d7c8:	b530      	push	{r4, r5, lr}
 800d7ca:	6902      	ldr	r2, [r0, #16]
 800d7cc:	690c      	ldr	r4, [r1, #16]
 800d7ce:	1b12      	subs	r2, r2, r4
 800d7d0:	d10e      	bne.n	800d7f0 <__mcmp+0x28>
 800d7d2:	f100 0314 	add.w	r3, r0, #20
 800d7d6:	3114      	adds	r1, #20
 800d7d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d7dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d7e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d7e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d7e8:	42a5      	cmp	r5, r4
 800d7ea:	d003      	beq.n	800d7f4 <__mcmp+0x2c>
 800d7ec:	d305      	bcc.n	800d7fa <__mcmp+0x32>
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	bd30      	pop	{r4, r5, pc}
 800d7f4:	4283      	cmp	r3, r0
 800d7f6:	d3f3      	bcc.n	800d7e0 <__mcmp+0x18>
 800d7f8:	e7fa      	b.n	800d7f0 <__mcmp+0x28>
 800d7fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7fe:	e7f7      	b.n	800d7f0 <__mcmp+0x28>

0800d800 <__mdiff>:
 800d800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	4606      	mov	r6, r0
 800d808:	4611      	mov	r1, r2
 800d80a:	4620      	mov	r0, r4
 800d80c:	4690      	mov	r8, r2
 800d80e:	f7ff ffdb 	bl	800d7c8 <__mcmp>
 800d812:	1e05      	subs	r5, r0, #0
 800d814:	d110      	bne.n	800d838 <__mdiff+0x38>
 800d816:	4629      	mov	r1, r5
 800d818:	4630      	mov	r0, r6
 800d81a:	f7ff fd0f 	bl	800d23c <_Balloc>
 800d81e:	b930      	cbnz	r0, 800d82e <__mdiff+0x2e>
 800d820:	4b3a      	ldr	r3, [pc, #232]	; (800d90c <__mdiff+0x10c>)
 800d822:	4602      	mov	r2, r0
 800d824:	f240 2137 	movw	r1, #567	; 0x237
 800d828:	4839      	ldr	r0, [pc, #228]	; (800d910 <__mdiff+0x110>)
 800d82a:	f7fe f8b1 	bl	800b990 <__assert_func>
 800d82e:	2301      	movs	r3, #1
 800d830:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	bfa4      	itt	ge
 800d83a:	4643      	movge	r3, r8
 800d83c:	46a0      	movge	r8, r4
 800d83e:	4630      	mov	r0, r6
 800d840:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d844:	bfa6      	itte	ge
 800d846:	461c      	movge	r4, r3
 800d848:	2500      	movge	r5, #0
 800d84a:	2501      	movlt	r5, #1
 800d84c:	f7ff fcf6 	bl	800d23c <_Balloc>
 800d850:	b920      	cbnz	r0, 800d85c <__mdiff+0x5c>
 800d852:	4b2e      	ldr	r3, [pc, #184]	; (800d90c <__mdiff+0x10c>)
 800d854:	4602      	mov	r2, r0
 800d856:	f240 2145 	movw	r1, #581	; 0x245
 800d85a:	e7e5      	b.n	800d828 <__mdiff+0x28>
 800d85c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d860:	6926      	ldr	r6, [r4, #16]
 800d862:	60c5      	str	r5, [r0, #12]
 800d864:	f104 0914 	add.w	r9, r4, #20
 800d868:	f108 0514 	add.w	r5, r8, #20
 800d86c:	f100 0e14 	add.w	lr, r0, #20
 800d870:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d878:	f108 0210 	add.w	r2, r8, #16
 800d87c:	46f2      	mov	sl, lr
 800d87e:	2100      	movs	r1, #0
 800d880:	f859 3b04 	ldr.w	r3, [r9], #4
 800d884:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d888:	fa11 f88b 	uxtah	r8, r1, fp
 800d88c:	b299      	uxth	r1, r3
 800d88e:	0c1b      	lsrs	r3, r3, #16
 800d890:	eba8 0801 	sub.w	r8, r8, r1
 800d894:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d898:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d89c:	fa1f f888 	uxth.w	r8, r8
 800d8a0:	1419      	asrs	r1, r3, #16
 800d8a2:	454e      	cmp	r6, r9
 800d8a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8a8:	f84a 3b04 	str.w	r3, [sl], #4
 800d8ac:	d8e8      	bhi.n	800d880 <__mdiff+0x80>
 800d8ae:	1b33      	subs	r3, r6, r4
 800d8b0:	3b15      	subs	r3, #21
 800d8b2:	f023 0303 	bic.w	r3, r3, #3
 800d8b6:	3304      	adds	r3, #4
 800d8b8:	3415      	adds	r4, #21
 800d8ba:	42a6      	cmp	r6, r4
 800d8bc:	bf38      	it	cc
 800d8be:	2304      	movcc	r3, #4
 800d8c0:	441d      	add	r5, r3
 800d8c2:	4473      	add	r3, lr
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	462e      	mov	r6, r5
 800d8c8:	4566      	cmp	r6, ip
 800d8ca:	d30e      	bcc.n	800d8ea <__mdiff+0xea>
 800d8cc:	f10c 0203 	add.w	r2, ip, #3
 800d8d0:	1b52      	subs	r2, r2, r5
 800d8d2:	f022 0203 	bic.w	r2, r2, #3
 800d8d6:	3d03      	subs	r5, #3
 800d8d8:	45ac      	cmp	ip, r5
 800d8da:	bf38      	it	cc
 800d8dc:	2200      	movcc	r2, #0
 800d8de:	4413      	add	r3, r2
 800d8e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d8e4:	b17a      	cbz	r2, 800d906 <__mdiff+0x106>
 800d8e6:	6107      	str	r7, [r0, #16]
 800d8e8:	e7a4      	b.n	800d834 <__mdiff+0x34>
 800d8ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800d8ee:	fa11 f288 	uxtah	r2, r1, r8
 800d8f2:	1414      	asrs	r4, r2, #16
 800d8f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d8fe:	f84e 2b04 	str.w	r2, [lr], #4
 800d902:	1421      	asrs	r1, r4, #16
 800d904:	e7e0      	b.n	800d8c8 <__mdiff+0xc8>
 800d906:	3f01      	subs	r7, #1
 800d908:	e7ea      	b.n	800d8e0 <__mdiff+0xe0>
 800d90a:	bf00      	nop
 800d90c:	0800f973 	.word	0x0800f973
 800d910:	0800f9f5 	.word	0x0800f9f5

0800d914 <__ulp>:
 800d914:	b082      	sub	sp, #8
 800d916:	ed8d 0b00 	vstr	d0, [sp]
 800d91a:	9a01      	ldr	r2, [sp, #4]
 800d91c:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <__ulp+0x48>)
 800d91e:	4013      	ands	r3, r2
 800d920:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d924:	2b00      	cmp	r3, #0
 800d926:	dc08      	bgt.n	800d93a <__ulp+0x26>
 800d928:	425b      	negs	r3, r3
 800d92a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d92e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d932:	da04      	bge.n	800d93e <__ulp+0x2a>
 800d934:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d938:	4113      	asrs	r3, r2
 800d93a:	2200      	movs	r2, #0
 800d93c:	e008      	b.n	800d950 <__ulp+0x3c>
 800d93e:	f1a2 0314 	sub.w	r3, r2, #20
 800d942:	2b1e      	cmp	r3, #30
 800d944:	bfda      	itte	le
 800d946:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d94a:	40da      	lsrle	r2, r3
 800d94c:	2201      	movgt	r2, #1
 800d94e:	2300      	movs	r3, #0
 800d950:	4619      	mov	r1, r3
 800d952:	4610      	mov	r0, r2
 800d954:	ec41 0b10 	vmov	d0, r0, r1
 800d958:	b002      	add	sp, #8
 800d95a:	4770      	bx	lr
 800d95c:	7ff00000 	.word	0x7ff00000

0800d960 <__b2d>:
 800d960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d964:	6906      	ldr	r6, [r0, #16]
 800d966:	f100 0814 	add.w	r8, r0, #20
 800d96a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d96e:	1f37      	subs	r7, r6, #4
 800d970:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d974:	4610      	mov	r0, r2
 800d976:	f7ff fd53 	bl	800d420 <__hi0bits>
 800d97a:	f1c0 0320 	rsb	r3, r0, #32
 800d97e:	280a      	cmp	r0, #10
 800d980:	600b      	str	r3, [r1, #0]
 800d982:	491b      	ldr	r1, [pc, #108]	; (800d9f0 <__b2d+0x90>)
 800d984:	dc15      	bgt.n	800d9b2 <__b2d+0x52>
 800d986:	f1c0 0c0b 	rsb	ip, r0, #11
 800d98a:	fa22 f30c 	lsr.w	r3, r2, ip
 800d98e:	45b8      	cmp	r8, r7
 800d990:	ea43 0501 	orr.w	r5, r3, r1
 800d994:	bf34      	ite	cc
 800d996:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d99a:	2300      	movcs	r3, #0
 800d99c:	3015      	adds	r0, #21
 800d99e:	fa02 f000 	lsl.w	r0, r2, r0
 800d9a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d9a6:	4303      	orrs	r3, r0
 800d9a8:	461c      	mov	r4, r3
 800d9aa:	ec45 4b10 	vmov	d0, r4, r5
 800d9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b2:	45b8      	cmp	r8, r7
 800d9b4:	bf3a      	itte	cc
 800d9b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d9ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800d9be:	2300      	movcs	r3, #0
 800d9c0:	380b      	subs	r0, #11
 800d9c2:	d012      	beq.n	800d9ea <__b2d+0x8a>
 800d9c4:	f1c0 0120 	rsb	r1, r0, #32
 800d9c8:	fa23 f401 	lsr.w	r4, r3, r1
 800d9cc:	4082      	lsls	r2, r0
 800d9ce:	4322      	orrs	r2, r4
 800d9d0:	4547      	cmp	r7, r8
 800d9d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d9d6:	bf8c      	ite	hi
 800d9d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d9dc:	2200      	movls	r2, #0
 800d9de:	4083      	lsls	r3, r0
 800d9e0:	40ca      	lsrs	r2, r1
 800d9e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	e7de      	b.n	800d9a8 <__b2d+0x48>
 800d9ea:	ea42 0501 	orr.w	r5, r2, r1
 800d9ee:	e7db      	b.n	800d9a8 <__b2d+0x48>
 800d9f0:	3ff00000 	.word	0x3ff00000

0800d9f4 <__d2b>:
 800d9f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	460f      	mov	r7, r1
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	ec59 8b10 	vmov	r8, r9, d0
 800da00:	4616      	mov	r6, r2
 800da02:	f7ff fc1b 	bl	800d23c <_Balloc>
 800da06:	4604      	mov	r4, r0
 800da08:	b930      	cbnz	r0, 800da18 <__d2b+0x24>
 800da0a:	4602      	mov	r2, r0
 800da0c:	4b24      	ldr	r3, [pc, #144]	; (800daa0 <__d2b+0xac>)
 800da0e:	4825      	ldr	r0, [pc, #148]	; (800daa4 <__d2b+0xb0>)
 800da10:	f240 310f 	movw	r1, #783	; 0x30f
 800da14:	f7fd ffbc 	bl	800b990 <__assert_func>
 800da18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da20:	bb2d      	cbnz	r5, 800da6e <__d2b+0x7a>
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	f1b8 0300 	subs.w	r3, r8, #0
 800da28:	d026      	beq.n	800da78 <__d2b+0x84>
 800da2a:	4668      	mov	r0, sp
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	f7ff fd17 	bl	800d460 <__lo0bits>
 800da32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da36:	b1e8      	cbz	r0, 800da74 <__d2b+0x80>
 800da38:	f1c0 0320 	rsb	r3, r0, #32
 800da3c:	fa02 f303 	lsl.w	r3, r2, r3
 800da40:	430b      	orrs	r3, r1
 800da42:	40c2      	lsrs	r2, r0
 800da44:	6163      	str	r3, [r4, #20]
 800da46:	9201      	str	r2, [sp, #4]
 800da48:	9b01      	ldr	r3, [sp, #4]
 800da4a:	61a3      	str	r3, [r4, #24]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	bf14      	ite	ne
 800da50:	2202      	movne	r2, #2
 800da52:	2201      	moveq	r2, #1
 800da54:	6122      	str	r2, [r4, #16]
 800da56:	b1bd      	cbz	r5, 800da88 <__d2b+0x94>
 800da58:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da5c:	4405      	add	r5, r0
 800da5e:	603d      	str	r5, [r7, #0]
 800da60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da64:	6030      	str	r0, [r6, #0]
 800da66:	4620      	mov	r0, r4
 800da68:	b003      	add	sp, #12
 800da6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da72:	e7d6      	b.n	800da22 <__d2b+0x2e>
 800da74:	6161      	str	r1, [r4, #20]
 800da76:	e7e7      	b.n	800da48 <__d2b+0x54>
 800da78:	a801      	add	r0, sp, #4
 800da7a:	f7ff fcf1 	bl	800d460 <__lo0bits>
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	6163      	str	r3, [r4, #20]
 800da82:	3020      	adds	r0, #32
 800da84:	2201      	movs	r2, #1
 800da86:	e7e5      	b.n	800da54 <__d2b+0x60>
 800da88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da90:	6038      	str	r0, [r7, #0]
 800da92:	6918      	ldr	r0, [r3, #16]
 800da94:	f7ff fcc4 	bl	800d420 <__hi0bits>
 800da98:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da9c:	e7e2      	b.n	800da64 <__d2b+0x70>
 800da9e:	bf00      	nop
 800daa0:	0800f973 	.word	0x0800f973
 800daa4:	0800f9f5 	.word	0x0800f9f5

0800daa8 <__ratio>:
 800daa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daac:	4688      	mov	r8, r1
 800daae:	4669      	mov	r1, sp
 800dab0:	4681      	mov	r9, r0
 800dab2:	f7ff ff55 	bl	800d960 <__b2d>
 800dab6:	a901      	add	r1, sp, #4
 800dab8:	4640      	mov	r0, r8
 800daba:	ec55 4b10 	vmov	r4, r5, d0
 800dabe:	f7ff ff4f 	bl	800d960 <__b2d>
 800dac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dac6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800daca:	eba3 0c02 	sub.w	ip, r3, r2
 800dace:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dad2:	1a9b      	subs	r3, r3, r2
 800dad4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dad8:	ec51 0b10 	vmov	r0, r1, d0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	bfd6      	itet	le
 800dae0:	460a      	movle	r2, r1
 800dae2:	462a      	movgt	r2, r5
 800dae4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dae8:	468b      	mov	fp, r1
 800daea:	462f      	mov	r7, r5
 800daec:	bfd4      	ite	le
 800daee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800daf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800daf6:	4620      	mov	r0, r4
 800daf8:	ee10 2a10 	vmov	r2, s0
 800dafc:	465b      	mov	r3, fp
 800dafe:	4639      	mov	r1, r7
 800db00:	f7f2 fea4 	bl	800084c <__aeabi_ddiv>
 800db04:	ec41 0b10 	vmov	d0, r0, r1
 800db08:	b003      	add	sp, #12
 800db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db0e <__copybits>:
 800db0e:	3901      	subs	r1, #1
 800db10:	b570      	push	{r4, r5, r6, lr}
 800db12:	1149      	asrs	r1, r1, #5
 800db14:	6914      	ldr	r4, [r2, #16]
 800db16:	3101      	adds	r1, #1
 800db18:	f102 0314 	add.w	r3, r2, #20
 800db1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800db20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db24:	1f05      	subs	r5, r0, #4
 800db26:	42a3      	cmp	r3, r4
 800db28:	d30c      	bcc.n	800db44 <__copybits+0x36>
 800db2a:	1aa3      	subs	r3, r4, r2
 800db2c:	3b11      	subs	r3, #17
 800db2e:	f023 0303 	bic.w	r3, r3, #3
 800db32:	3211      	adds	r2, #17
 800db34:	42a2      	cmp	r2, r4
 800db36:	bf88      	it	hi
 800db38:	2300      	movhi	r3, #0
 800db3a:	4418      	add	r0, r3
 800db3c:	2300      	movs	r3, #0
 800db3e:	4288      	cmp	r0, r1
 800db40:	d305      	bcc.n	800db4e <__copybits+0x40>
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	f853 6b04 	ldr.w	r6, [r3], #4
 800db48:	f845 6f04 	str.w	r6, [r5, #4]!
 800db4c:	e7eb      	b.n	800db26 <__copybits+0x18>
 800db4e:	f840 3b04 	str.w	r3, [r0], #4
 800db52:	e7f4      	b.n	800db3e <__copybits+0x30>

0800db54 <__any_on>:
 800db54:	f100 0214 	add.w	r2, r0, #20
 800db58:	6900      	ldr	r0, [r0, #16]
 800db5a:	114b      	asrs	r3, r1, #5
 800db5c:	4298      	cmp	r0, r3
 800db5e:	b510      	push	{r4, lr}
 800db60:	db11      	blt.n	800db86 <__any_on+0x32>
 800db62:	dd0a      	ble.n	800db7a <__any_on+0x26>
 800db64:	f011 011f 	ands.w	r1, r1, #31
 800db68:	d007      	beq.n	800db7a <__any_on+0x26>
 800db6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800db6e:	fa24 f001 	lsr.w	r0, r4, r1
 800db72:	fa00 f101 	lsl.w	r1, r0, r1
 800db76:	428c      	cmp	r4, r1
 800db78:	d10b      	bne.n	800db92 <__any_on+0x3e>
 800db7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db7e:	4293      	cmp	r3, r2
 800db80:	d803      	bhi.n	800db8a <__any_on+0x36>
 800db82:	2000      	movs	r0, #0
 800db84:	bd10      	pop	{r4, pc}
 800db86:	4603      	mov	r3, r0
 800db88:	e7f7      	b.n	800db7a <__any_on+0x26>
 800db8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db8e:	2900      	cmp	r1, #0
 800db90:	d0f5      	beq.n	800db7e <__any_on+0x2a>
 800db92:	2001      	movs	r0, #1
 800db94:	e7f6      	b.n	800db84 <__any_on+0x30>

0800db96 <__sread>:
 800db96:	b510      	push	{r4, lr}
 800db98:	460c      	mov	r4, r1
 800db9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9e:	f000 f8c7 	bl	800dd30 <_read_r>
 800dba2:	2800      	cmp	r0, #0
 800dba4:	bfab      	itete	ge
 800dba6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dba8:	89a3      	ldrhlt	r3, [r4, #12]
 800dbaa:	181b      	addge	r3, r3, r0
 800dbac:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbb0:	bfac      	ite	ge
 800dbb2:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbb4:	81a3      	strhlt	r3, [r4, #12]
 800dbb6:	bd10      	pop	{r4, pc}

0800dbb8 <__swrite>:
 800dbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbc:	461f      	mov	r7, r3
 800dbbe:	898b      	ldrh	r3, [r1, #12]
 800dbc0:	05db      	lsls	r3, r3, #23
 800dbc2:	4605      	mov	r5, r0
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	4616      	mov	r6, r2
 800dbc8:	d505      	bpl.n	800dbd6 <__swrite+0x1e>
 800dbca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbce:	2302      	movs	r3, #2
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f000 f89b 	bl	800dd0c <_lseek_r>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbe0:	81a3      	strh	r3, [r4, #12]
 800dbe2:	4632      	mov	r2, r6
 800dbe4:	463b      	mov	r3, r7
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbec:	f000 b8b2 	b.w	800dd54 <_write_r>

0800dbf0 <__sseek>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf8:	f000 f888 	bl	800dd0c <_lseek_r>
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	bf15      	itete	ne
 800dc02:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc04:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc08:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc0c:	81a3      	strheq	r3, [r4, #12]
 800dc0e:	bf18      	it	ne
 800dc10:	81a3      	strhne	r3, [r4, #12]
 800dc12:	bd10      	pop	{r4, pc}

0800dc14 <__sclose>:
 800dc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc18:	f000 b868 	b.w	800dcec <_close_r>

0800dc1c <fiprintf>:
 800dc1c:	b40e      	push	{r1, r2, r3}
 800dc1e:	b503      	push	{r0, r1, lr}
 800dc20:	4601      	mov	r1, r0
 800dc22:	ab03      	add	r3, sp, #12
 800dc24:	4805      	ldr	r0, [pc, #20]	; (800dc3c <fiprintf+0x20>)
 800dc26:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2a:	6800      	ldr	r0, [r0, #0]
 800dc2c:	9301      	str	r3, [sp, #4]
 800dc2e:	f000 f8e9 	bl	800de04 <_vfiprintf_r>
 800dc32:	b002      	add	sp, #8
 800dc34:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc38:	b003      	add	sp, #12
 800dc3a:	4770      	bx	lr
 800dc3c:	200005d8 	.word	0x200005d8

0800dc40 <_realloc_r>:
 800dc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	4680      	mov	r8, r0
 800dc46:	4614      	mov	r4, r2
 800dc48:	460e      	mov	r6, r1
 800dc4a:	b921      	cbnz	r1, 800dc56 <_realloc_r+0x16>
 800dc4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc50:	4611      	mov	r1, r2
 800dc52:	f7fc bc2b 	b.w	800a4ac <_malloc_r>
 800dc56:	b92a      	cbnz	r2, 800dc64 <_realloc_r+0x24>
 800dc58:	f7fe fd34 	bl	800c6c4 <_free_r>
 800dc5c:	4625      	mov	r5, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc64:	f000 f9e8 	bl	800e038 <_malloc_usable_size_r>
 800dc68:	4284      	cmp	r4, r0
 800dc6a:	4607      	mov	r7, r0
 800dc6c:	d802      	bhi.n	800dc74 <_realloc_r+0x34>
 800dc6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc72:	d812      	bhi.n	800dc9a <_realloc_r+0x5a>
 800dc74:	4621      	mov	r1, r4
 800dc76:	4640      	mov	r0, r8
 800dc78:	f7fc fc18 	bl	800a4ac <_malloc_r>
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d0ed      	beq.n	800dc5e <_realloc_r+0x1e>
 800dc82:	42bc      	cmp	r4, r7
 800dc84:	4622      	mov	r2, r4
 800dc86:	4631      	mov	r1, r6
 800dc88:	bf28      	it	cs
 800dc8a:	463a      	movcs	r2, r7
 800dc8c:	f7fd fe69 	bl	800b962 <memcpy>
 800dc90:	4631      	mov	r1, r6
 800dc92:	4640      	mov	r0, r8
 800dc94:	f7fe fd16 	bl	800c6c4 <_free_r>
 800dc98:	e7e1      	b.n	800dc5e <_realloc_r+0x1e>
 800dc9a:	4635      	mov	r5, r6
 800dc9c:	e7df      	b.n	800dc5e <_realloc_r+0x1e>

0800dc9e <__ascii_wctomb>:
 800dc9e:	b149      	cbz	r1, 800dcb4 <__ascii_wctomb+0x16>
 800dca0:	2aff      	cmp	r2, #255	; 0xff
 800dca2:	bf85      	ittet	hi
 800dca4:	238a      	movhi	r3, #138	; 0x8a
 800dca6:	6003      	strhi	r3, [r0, #0]
 800dca8:	700a      	strbls	r2, [r1, #0]
 800dcaa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dcae:	bf98      	it	ls
 800dcb0:	2001      	movls	r0, #1
 800dcb2:	4770      	bx	lr
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	4770      	bx	lr

0800dcb8 <memmove>:
 800dcb8:	4288      	cmp	r0, r1
 800dcba:	b510      	push	{r4, lr}
 800dcbc:	eb01 0402 	add.w	r4, r1, r2
 800dcc0:	d902      	bls.n	800dcc8 <memmove+0x10>
 800dcc2:	4284      	cmp	r4, r0
 800dcc4:	4623      	mov	r3, r4
 800dcc6:	d807      	bhi.n	800dcd8 <memmove+0x20>
 800dcc8:	1e43      	subs	r3, r0, #1
 800dcca:	42a1      	cmp	r1, r4
 800dccc:	d008      	beq.n	800dce0 <memmove+0x28>
 800dcce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dcd6:	e7f8      	b.n	800dcca <memmove+0x12>
 800dcd8:	4402      	add	r2, r0
 800dcda:	4601      	mov	r1, r0
 800dcdc:	428a      	cmp	r2, r1
 800dcde:	d100      	bne.n	800dce2 <memmove+0x2a>
 800dce0:	bd10      	pop	{r4, pc}
 800dce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcea:	e7f7      	b.n	800dcdc <memmove+0x24>

0800dcec <_close_r>:
 800dcec:	b538      	push	{r3, r4, r5, lr}
 800dcee:	4d06      	ldr	r5, [pc, #24]	; (800dd08 <_close_r+0x1c>)
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	4608      	mov	r0, r1
 800dcf6:	602b      	str	r3, [r5, #0]
 800dcf8:	f7f4 fdd3 	bl	80028a2 <_close>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_close_r+0x1a>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_close_r+0x1a>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	20002a34 	.word	0x20002a34

0800dd0c <_lseek_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	; (800dd2c <_lseek_r+0x20>)
 800dd10:	4604      	mov	r4, r0
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	2200      	movs	r2, #0
 800dd18:	602a      	str	r2, [r5, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f7f4 fde8 	bl	80028f0 <_lseek>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_lseek_r+0x1e>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_lseek_r+0x1e>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	20002a34 	.word	0x20002a34

0800dd30 <_read_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d07      	ldr	r5, [pc, #28]	; (800dd50 <_read_r+0x20>)
 800dd34:	4604      	mov	r4, r0
 800dd36:	4608      	mov	r0, r1
 800dd38:	4611      	mov	r1, r2
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	602a      	str	r2, [r5, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f7f4 fd76 	bl	8002830 <_read>
 800dd44:	1c43      	adds	r3, r0, #1
 800dd46:	d102      	bne.n	800dd4e <_read_r+0x1e>
 800dd48:	682b      	ldr	r3, [r5, #0]
 800dd4a:	b103      	cbz	r3, 800dd4e <_read_r+0x1e>
 800dd4c:	6023      	str	r3, [r4, #0]
 800dd4e:	bd38      	pop	{r3, r4, r5, pc}
 800dd50:	20002a34 	.word	0x20002a34

0800dd54 <_write_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4d07      	ldr	r5, [pc, #28]	; (800dd74 <_write_r+0x20>)
 800dd58:	4604      	mov	r4, r0
 800dd5a:	4608      	mov	r0, r1
 800dd5c:	4611      	mov	r1, r2
 800dd5e:	2200      	movs	r2, #0
 800dd60:	602a      	str	r2, [r5, #0]
 800dd62:	461a      	mov	r2, r3
 800dd64:	f7f4 fd81 	bl	800286a <_write>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_write_r+0x1e>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_write_r+0x1e>
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	20002a34 	.word	0x20002a34

0800dd78 <abort>:
 800dd78:	b508      	push	{r3, lr}
 800dd7a:	2006      	movs	r0, #6
 800dd7c:	f000 faa6 	bl	800e2cc <raise>
 800dd80:	2001      	movs	r0, #1
 800dd82:	f7f4 fd4b 	bl	800281c <_exit>

0800dd86 <_calloc_r>:
 800dd86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd88:	fba1 2402 	umull	r2, r4, r1, r2
 800dd8c:	b94c      	cbnz	r4, 800dda2 <_calloc_r+0x1c>
 800dd8e:	4611      	mov	r1, r2
 800dd90:	9201      	str	r2, [sp, #4]
 800dd92:	f7fc fb8b 	bl	800a4ac <_malloc_r>
 800dd96:	9a01      	ldr	r2, [sp, #4]
 800dd98:	4605      	mov	r5, r0
 800dd9a:	b930      	cbnz	r0, 800ddaa <_calloc_r+0x24>
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	b003      	add	sp, #12
 800dda0:	bd30      	pop	{r4, r5, pc}
 800dda2:	220c      	movs	r2, #12
 800dda4:	6002      	str	r2, [r0, #0]
 800dda6:	2500      	movs	r5, #0
 800dda8:	e7f8      	b.n	800dd9c <_calloc_r+0x16>
 800ddaa:	4621      	mov	r1, r4
 800ddac:	f7fd fd90 	bl	800b8d0 <memset>
 800ddb0:	e7f4      	b.n	800dd9c <_calloc_r+0x16>

0800ddb2 <__sfputc_r>:
 800ddb2:	6893      	ldr	r3, [r2, #8]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	b410      	push	{r4}
 800ddba:	6093      	str	r3, [r2, #8]
 800ddbc:	da08      	bge.n	800ddd0 <__sfputc_r+0x1e>
 800ddbe:	6994      	ldr	r4, [r2, #24]
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	db01      	blt.n	800ddc8 <__sfputc_r+0x16>
 800ddc4:	290a      	cmp	r1, #10
 800ddc6:	d103      	bne.n	800ddd0 <__sfputc_r+0x1e>
 800ddc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddcc:	f000 b93c 	b.w	800e048 <__swbuf_r>
 800ddd0:	6813      	ldr	r3, [r2, #0]
 800ddd2:	1c58      	adds	r0, r3, #1
 800ddd4:	6010      	str	r0, [r2, #0]
 800ddd6:	7019      	strb	r1, [r3, #0]
 800ddd8:	4608      	mov	r0, r1
 800ddda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <__sfputs_r>:
 800dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	4614      	mov	r4, r2
 800dde8:	18d5      	adds	r5, r2, r3
 800ddea:	42ac      	cmp	r4, r5
 800ddec:	d101      	bne.n	800ddf2 <__sfputs_r+0x12>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e007      	b.n	800de02 <__sfputs_r+0x22>
 800ddf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddf6:	463a      	mov	r2, r7
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f7ff ffda 	bl	800ddb2 <__sfputc_r>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d1f3      	bne.n	800ddea <__sfputs_r+0xa>
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de04 <_vfiprintf_r>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	460d      	mov	r5, r1
 800de0a:	b09d      	sub	sp, #116	; 0x74
 800de0c:	4614      	mov	r4, r2
 800de0e:	4698      	mov	r8, r3
 800de10:	4606      	mov	r6, r0
 800de12:	b118      	cbz	r0, 800de1c <_vfiprintf_r+0x18>
 800de14:	6a03      	ldr	r3, [r0, #32]
 800de16:	b90b      	cbnz	r3, 800de1c <_vfiprintf_r+0x18>
 800de18:	f7fc fe10 	bl	800aa3c <__sinit>
 800de1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de1e:	07d9      	lsls	r1, r3, #31
 800de20:	d405      	bmi.n	800de2e <_vfiprintf_r+0x2a>
 800de22:	89ab      	ldrh	r3, [r5, #12]
 800de24:	059a      	lsls	r2, r3, #22
 800de26:	d402      	bmi.n	800de2e <_vfiprintf_r+0x2a>
 800de28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de2a:	f7fd fd98 	bl	800b95e <__retarget_lock_acquire_recursive>
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	071b      	lsls	r3, r3, #28
 800de32:	d501      	bpl.n	800de38 <_vfiprintf_r+0x34>
 800de34:	692b      	ldr	r3, [r5, #16]
 800de36:	b99b      	cbnz	r3, 800de60 <_vfiprintf_r+0x5c>
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f000 f942 	bl	800e0c4 <__swsetup_r>
 800de40:	b170      	cbz	r0, 800de60 <_vfiprintf_r+0x5c>
 800de42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de44:	07dc      	lsls	r4, r3, #31
 800de46:	d504      	bpl.n	800de52 <_vfiprintf_r+0x4e>
 800de48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de4c:	b01d      	add	sp, #116	; 0x74
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	89ab      	ldrh	r3, [r5, #12]
 800de54:	0598      	lsls	r0, r3, #22
 800de56:	d4f7      	bmi.n	800de48 <_vfiprintf_r+0x44>
 800de58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de5a:	f7fd fd81 	bl	800b960 <__retarget_lock_release_recursive>
 800de5e:	e7f3      	b.n	800de48 <_vfiprintf_r+0x44>
 800de60:	2300      	movs	r3, #0
 800de62:	9309      	str	r3, [sp, #36]	; 0x24
 800de64:	2320      	movs	r3, #32
 800de66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de6e:	2330      	movs	r3, #48	; 0x30
 800de70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e024 <_vfiprintf_r+0x220>
 800de74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de78:	f04f 0901 	mov.w	r9, #1
 800de7c:	4623      	mov	r3, r4
 800de7e:	469a      	mov	sl, r3
 800de80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de84:	b10a      	cbz	r2, 800de8a <_vfiprintf_r+0x86>
 800de86:	2a25      	cmp	r2, #37	; 0x25
 800de88:	d1f9      	bne.n	800de7e <_vfiprintf_r+0x7a>
 800de8a:	ebba 0b04 	subs.w	fp, sl, r4
 800de8e:	d00b      	beq.n	800dea8 <_vfiprintf_r+0xa4>
 800de90:	465b      	mov	r3, fp
 800de92:	4622      	mov	r2, r4
 800de94:	4629      	mov	r1, r5
 800de96:	4630      	mov	r0, r6
 800de98:	f7ff ffa2 	bl	800dde0 <__sfputs_r>
 800de9c:	3001      	adds	r0, #1
 800de9e:	f000 80a9 	beq.w	800dff4 <_vfiprintf_r+0x1f0>
 800dea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea4:	445a      	add	r2, fp
 800dea6:	9209      	str	r2, [sp, #36]	; 0x24
 800dea8:	f89a 3000 	ldrb.w	r3, [sl]
 800deac:	2b00      	cmp	r3, #0
 800deae:	f000 80a1 	beq.w	800dff4 <_vfiprintf_r+0x1f0>
 800deb2:	2300      	movs	r3, #0
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800debc:	f10a 0a01 	add.w	sl, sl, #1
 800dec0:	9304      	str	r3, [sp, #16]
 800dec2:	9307      	str	r3, [sp, #28]
 800dec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dec8:	931a      	str	r3, [sp, #104]	; 0x68
 800deca:	4654      	mov	r4, sl
 800decc:	2205      	movs	r2, #5
 800dece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded2:	4854      	ldr	r0, [pc, #336]	; (800e024 <_vfiprintf_r+0x220>)
 800ded4:	f7f2 f97c 	bl	80001d0 <memchr>
 800ded8:	9a04      	ldr	r2, [sp, #16]
 800deda:	b9d8      	cbnz	r0, 800df14 <_vfiprintf_r+0x110>
 800dedc:	06d1      	lsls	r1, r2, #27
 800dede:	bf44      	itt	mi
 800dee0:	2320      	movmi	r3, #32
 800dee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dee6:	0713      	lsls	r3, r2, #28
 800dee8:	bf44      	itt	mi
 800deea:	232b      	movmi	r3, #43	; 0x2b
 800deec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def0:	f89a 3000 	ldrb.w	r3, [sl]
 800def4:	2b2a      	cmp	r3, #42	; 0x2a
 800def6:	d015      	beq.n	800df24 <_vfiprintf_r+0x120>
 800def8:	9a07      	ldr	r2, [sp, #28]
 800defa:	4654      	mov	r4, sl
 800defc:	2000      	movs	r0, #0
 800defe:	f04f 0c0a 	mov.w	ip, #10
 800df02:	4621      	mov	r1, r4
 800df04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df08:	3b30      	subs	r3, #48	; 0x30
 800df0a:	2b09      	cmp	r3, #9
 800df0c:	d94d      	bls.n	800dfaa <_vfiprintf_r+0x1a6>
 800df0e:	b1b0      	cbz	r0, 800df3e <_vfiprintf_r+0x13a>
 800df10:	9207      	str	r2, [sp, #28]
 800df12:	e014      	b.n	800df3e <_vfiprintf_r+0x13a>
 800df14:	eba0 0308 	sub.w	r3, r0, r8
 800df18:	fa09 f303 	lsl.w	r3, r9, r3
 800df1c:	4313      	orrs	r3, r2
 800df1e:	9304      	str	r3, [sp, #16]
 800df20:	46a2      	mov	sl, r4
 800df22:	e7d2      	b.n	800deca <_vfiprintf_r+0xc6>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	1d19      	adds	r1, r3, #4
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	9103      	str	r1, [sp, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	bfbb      	ittet	lt
 800df30:	425b      	neglt	r3, r3
 800df32:	f042 0202 	orrlt.w	r2, r2, #2
 800df36:	9307      	strge	r3, [sp, #28]
 800df38:	9307      	strlt	r3, [sp, #28]
 800df3a:	bfb8      	it	lt
 800df3c:	9204      	strlt	r2, [sp, #16]
 800df3e:	7823      	ldrb	r3, [r4, #0]
 800df40:	2b2e      	cmp	r3, #46	; 0x2e
 800df42:	d10c      	bne.n	800df5e <_vfiprintf_r+0x15a>
 800df44:	7863      	ldrb	r3, [r4, #1]
 800df46:	2b2a      	cmp	r3, #42	; 0x2a
 800df48:	d134      	bne.n	800dfb4 <_vfiprintf_r+0x1b0>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	1d1a      	adds	r2, r3, #4
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	9203      	str	r2, [sp, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	bfb8      	it	lt
 800df56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800df5a:	3402      	adds	r4, #2
 800df5c:	9305      	str	r3, [sp, #20]
 800df5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e034 <_vfiprintf_r+0x230>
 800df62:	7821      	ldrb	r1, [r4, #0]
 800df64:	2203      	movs	r2, #3
 800df66:	4650      	mov	r0, sl
 800df68:	f7f2 f932 	bl	80001d0 <memchr>
 800df6c:	b138      	cbz	r0, 800df7e <_vfiprintf_r+0x17a>
 800df6e:	9b04      	ldr	r3, [sp, #16]
 800df70:	eba0 000a 	sub.w	r0, r0, sl
 800df74:	2240      	movs	r2, #64	; 0x40
 800df76:	4082      	lsls	r2, r0
 800df78:	4313      	orrs	r3, r2
 800df7a:	3401      	adds	r4, #1
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df82:	4829      	ldr	r0, [pc, #164]	; (800e028 <_vfiprintf_r+0x224>)
 800df84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df88:	2206      	movs	r2, #6
 800df8a:	f7f2 f921 	bl	80001d0 <memchr>
 800df8e:	2800      	cmp	r0, #0
 800df90:	d03f      	beq.n	800e012 <_vfiprintf_r+0x20e>
 800df92:	4b26      	ldr	r3, [pc, #152]	; (800e02c <_vfiprintf_r+0x228>)
 800df94:	bb1b      	cbnz	r3, 800dfde <_vfiprintf_r+0x1da>
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	3307      	adds	r3, #7
 800df9a:	f023 0307 	bic.w	r3, r3, #7
 800df9e:	3308      	adds	r3, #8
 800dfa0:	9303      	str	r3, [sp, #12]
 800dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa4:	443b      	add	r3, r7
 800dfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfa8:	e768      	b.n	800de7c <_vfiprintf_r+0x78>
 800dfaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfae:	460c      	mov	r4, r1
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	e7a6      	b.n	800df02 <_vfiprintf_r+0xfe>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	3401      	adds	r4, #1
 800dfb8:	9305      	str	r3, [sp, #20]
 800dfba:	4619      	mov	r1, r3
 800dfbc:	f04f 0c0a 	mov.w	ip, #10
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfc6:	3a30      	subs	r2, #48	; 0x30
 800dfc8:	2a09      	cmp	r2, #9
 800dfca:	d903      	bls.n	800dfd4 <_vfiprintf_r+0x1d0>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d0c6      	beq.n	800df5e <_vfiprintf_r+0x15a>
 800dfd0:	9105      	str	r1, [sp, #20]
 800dfd2:	e7c4      	b.n	800df5e <_vfiprintf_r+0x15a>
 800dfd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd8:	4604      	mov	r4, r0
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e7f0      	b.n	800dfc0 <_vfiprintf_r+0x1bc>
 800dfde:	ab03      	add	r3, sp, #12
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	4b12      	ldr	r3, [pc, #72]	; (800e030 <_vfiprintf_r+0x22c>)
 800dfe6:	a904      	add	r1, sp, #16
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f7fb fff9 	bl	8009fe0 <_printf_float>
 800dfee:	4607      	mov	r7, r0
 800dff0:	1c78      	adds	r0, r7, #1
 800dff2:	d1d6      	bne.n	800dfa2 <_vfiprintf_r+0x19e>
 800dff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff6:	07d9      	lsls	r1, r3, #31
 800dff8:	d405      	bmi.n	800e006 <_vfiprintf_r+0x202>
 800dffa:	89ab      	ldrh	r3, [r5, #12]
 800dffc:	059a      	lsls	r2, r3, #22
 800dffe:	d402      	bmi.n	800e006 <_vfiprintf_r+0x202>
 800e000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e002:	f7fd fcad 	bl	800b960 <__retarget_lock_release_recursive>
 800e006:	89ab      	ldrh	r3, [r5, #12]
 800e008:	065b      	lsls	r3, r3, #25
 800e00a:	f53f af1d 	bmi.w	800de48 <_vfiprintf_r+0x44>
 800e00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e010:	e71c      	b.n	800de4c <_vfiprintf_r+0x48>
 800e012:	ab03      	add	r3, sp, #12
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	462a      	mov	r2, r5
 800e018:	4b05      	ldr	r3, [pc, #20]	; (800e030 <_vfiprintf_r+0x22c>)
 800e01a:	a904      	add	r1, sp, #16
 800e01c:	4630      	mov	r0, r6
 800e01e:	f7fc fb33 	bl	800a688 <_printf_i>
 800e022:	e7e4      	b.n	800dfee <_vfiprintf_r+0x1ea>
 800e024:	0800f9e4 	.word	0x0800f9e4
 800e028:	0800f9ee 	.word	0x0800f9ee
 800e02c:	08009fe1 	.word	0x08009fe1
 800e030:	0800dde1 	.word	0x0800dde1
 800e034:	0800f9ea 	.word	0x0800f9ea

0800e038 <_malloc_usable_size_r>:
 800e038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e03c:	1f18      	subs	r0, r3, #4
 800e03e:	2b00      	cmp	r3, #0
 800e040:	bfbc      	itt	lt
 800e042:	580b      	ldrlt	r3, [r1, r0]
 800e044:	18c0      	addlt	r0, r0, r3
 800e046:	4770      	bx	lr

0800e048 <__swbuf_r>:
 800e048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e04a:	460e      	mov	r6, r1
 800e04c:	4614      	mov	r4, r2
 800e04e:	4605      	mov	r5, r0
 800e050:	b118      	cbz	r0, 800e05a <__swbuf_r+0x12>
 800e052:	6a03      	ldr	r3, [r0, #32]
 800e054:	b90b      	cbnz	r3, 800e05a <__swbuf_r+0x12>
 800e056:	f7fc fcf1 	bl	800aa3c <__sinit>
 800e05a:	69a3      	ldr	r3, [r4, #24]
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	89a3      	ldrh	r3, [r4, #12]
 800e060:	071a      	lsls	r2, r3, #28
 800e062:	d525      	bpl.n	800e0b0 <__swbuf_r+0x68>
 800e064:	6923      	ldr	r3, [r4, #16]
 800e066:	b31b      	cbz	r3, 800e0b0 <__swbuf_r+0x68>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	6922      	ldr	r2, [r4, #16]
 800e06c:	1a98      	subs	r0, r3, r2
 800e06e:	6963      	ldr	r3, [r4, #20]
 800e070:	b2f6      	uxtb	r6, r6
 800e072:	4283      	cmp	r3, r0
 800e074:	4637      	mov	r7, r6
 800e076:	dc04      	bgt.n	800e082 <__swbuf_r+0x3a>
 800e078:	4621      	mov	r1, r4
 800e07a:	4628      	mov	r0, r5
 800e07c:	f7ff f8b6 	bl	800d1ec <_fflush_r>
 800e080:	b9e0      	cbnz	r0, 800e0bc <__swbuf_r+0x74>
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	3b01      	subs	r3, #1
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	6022      	str	r2, [r4, #0]
 800e08e:	701e      	strb	r6, [r3, #0]
 800e090:	6962      	ldr	r2, [r4, #20]
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	429a      	cmp	r2, r3
 800e096:	d004      	beq.n	800e0a2 <__swbuf_r+0x5a>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	07db      	lsls	r3, r3, #31
 800e09c:	d506      	bpl.n	800e0ac <__swbuf_r+0x64>
 800e09e:	2e0a      	cmp	r6, #10
 800e0a0:	d104      	bne.n	800e0ac <__swbuf_r+0x64>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7ff f8a1 	bl	800d1ec <_fflush_r>
 800e0aa:	b938      	cbnz	r0, 800e0bc <__swbuf_r+0x74>
 800e0ac:	4638      	mov	r0, r7
 800e0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f000 f806 	bl	800e0c4 <__swsetup_r>
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d0d5      	beq.n	800e068 <__swbuf_r+0x20>
 800e0bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e0c0:	e7f4      	b.n	800e0ac <__swbuf_r+0x64>
	...

0800e0c4 <__swsetup_r>:
 800e0c4:	b538      	push	{r3, r4, r5, lr}
 800e0c6:	4b2a      	ldr	r3, [pc, #168]	; (800e170 <__swsetup_r+0xac>)
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	6818      	ldr	r0, [r3, #0]
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	b118      	cbz	r0, 800e0d8 <__swsetup_r+0x14>
 800e0d0:	6a03      	ldr	r3, [r0, #32]
 800e0d2:	b90b      	cbnz	r3, 800e0d8 <__swsetup_r+0x14>
 800e0d4:	f7fc fcb2 	bl	800aa3c <__sinit>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0de:	0718      	lsls	r0, r3, #28
 800e0e0:	d422      	bmi.n	800e128 <__swsetup_r+0x64>
 800e0e2:	06d9      	lsls	r1, r3, #27
 800e0e4:	d407      	bmi.n	800e0f6 <__swsetup_r+0x32>
 800e0e6:	2309      	movs	r3, #9
 800e0e8:	602b      	str	r3, [r5, #0]
 800e0ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0f4:	e034      	b.n	800e160 <__swsetup_r+0x9c>
 800e0f6:	0758      	lsls	r0, r3, #29
 800e0f8:	d512      	bpl.n	800e120 <__swsetup_r+0x5c>
 800e0fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0fc:	b141      	cbz	r1, 800e110 <__swsetup_r+0x4c>
 800e0fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e102:	4299      	cmp	r1, r3
 800e104:	d002      	beq.n	800e10c <__swsetup_r+0x48>
 800e106:	4628      	mov	r0, r5
 800e108:	f7fe fadc 	bl	800c6c4 <_free_r>
 800e10c:	2300      	movs	r3, #0
 800e10e:	6363      	str	r3, [r4, #52]	; 0x34
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	2300      	movs	r3, #0
 800e11a:	6063      	str	r3, [r4, #4]
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	6023      	str	r3, [r4, #0]
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f043 0308 	orr.w	r3, r3, #8
 800e126:	81a3      	strh	r3, [r4, #12]
 800e128:	6923      	ldr	r3, [r4, #16]
 800e12a:	b94b      	cbnz	r3, 800e140 <__swsetup_r+0x7c>
 800e12c:	89a3      	ldrh	r3, [r4, #12]
 800e12e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e136:	d003      	beq.n	800e140 <__swsetup_r+0x7c>
 800e138:	4621      	mov	r1, r4
 800e13a:	4628      	mov	r0, r5
 800e13c:	f000 f840 	bl	800e1c0 <__smakebuf_r>
 800e140:	89a0      	ldrh	r0, [r4, #12]
 800e142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e146:	f010 0301 	ands.w	r3, r0, #1
 800e14a:	d00a      	beq.n	800e162 <__swsetup_r+0x9e>
 800e14c:	2300      	movs	r3, #0
 800e14e:	60a3      	str	r3, [r4, #8]
 800e150:	6963      	ldr	r3, [r4, #20]
 800e152:	425b      	negs	r3, r3
 800e154:	61a3      	str	r3, [r4, #24]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	b943      	cbnz	r3, 800e16c <__swsetup_r+0xa8>
 800e15a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e15e:	d1c4      	bne.n	800e0ea <__swsetup_r+0x26>
 800e160:	bd38      	pop	{r3, r4, r5, pc}
 800e162:	0781      	lsls	r1, r0, #30
 800e164:	bf58      	it	pl
 800e166:	6963      	ldrpl	r3, [r4, #20]
 800e168:	60a3      	str	r3, [r4, #8]
 800e16a:	e7f4      	b.n	800e156 <__swsetup_r+0x92>
 800e16c:	2000      	movs	r0, #0
 800e16e:	e7f7      	b.n	800e160 <__swsetup_r+0x9c>
 800e170:	200005d8 	.word	0x200005d8

0800e174 <__swhatbuf_r>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17c:	2900      	cmp	r1, #0
 800e17e:	b096      	sub	sp, #88	; 0x58
 800e180:	4615      	mov	r5, r2
 800e182:	461e      	mov	r6, r3
 800e184:	da0d      	bge.n	800e1a2 <__swhatbuf_r+0x2e>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e18c:	f04f 0100 	mov.w	r1, #0
 800e190:	bf0c      	ite	eq
 800e192:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e196:	2340      	movne	r3, #64	; 0x40
 800e198:	2000      	movs	r0, #0
 800e19a:	6031      	str	r1, [r6, #0]
 800e19c:	602b      	str	r3, [r5, #0]
 800e19e:	b016      	add	sp, #88	; 0x58
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
 800e1a2:	466a      	mov	r2, sp
 800e1a4:	f000 f848 	bl	800e238 <_fstat_r>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	dbec      	blt.n	800e186 <__swhatbuf_r+0x12>
 800e1ac:	9901      	ldr	r1, [sp, #4]
 800e1ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e1b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e1b6:	4259      	negs	r1, r3
 800e1b8:	4159      	adcs	r1, r3
 800e1ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1be:	e7eb      	b.n	800e198 <__swhatbuf_r+0x24>

0800e1c0 <__smakebuf_r>:
 800e1c0:	898b      	ldrh	r3, [r1, #12]
 800e1c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1c4:	079d      	lsls	r5, r3, #30
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460c      	mov	r4, r1
 800e1ca:	d507      	bpl.n	800e1dc <__smakebuf_r+0x1c>
 800e1cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1d0:	6023      	str	r3, [r4, #0]
 800e1d2:	6123      	str	r3, [r4, #16]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	6163      	str	r3, [r4, #20]
 800e1d8:	b002      	add	sp, #8
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	ab01      	add	r3, sp, #4
 800e1de:	466a      	mov	r2, sp
 800e1e0:	f7ff ffc8 	bl	800e174 <__swhatbuf_r>
 800e1e4:	9900      	ldr	r1, [sp, #0]
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f7fc f95f 	bl	800a4ac <_malloc_r>
 800e1ee:	b948      	cbnz	r0, 800e204 <__smakebuf_r+0x44>
 800e1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1f4:	059a      	lsls	r2, r3, #22
 800e1f6:	d4ef      	bmi.n	800e1d8 <__smakebuf_r+0x18>
 800e1f8:	f023 0303 	bic.w	r3, r3, #3
 800e1fc:	f043 0302 	orr.w	r3, r3, #2
 800e200:	81a3      	strh	r3, [r4, #12]
 800e202:	e7e3      	b.n	800e1cc <__smakebuf_r+0xc>
 800e204:	89a3      	ldrh	r3, [r4, #12]
 800e206:	6020      	str	r0, [r4, #0]
 800e208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e20c:	81a3      	strh	r3, [r4, #12]
 800e20e:	9b00      	ldr	r3, [sp, #0]
 800e210:	6163      	str	r3, [r4, #20]
 800e212:	9b01      	ldr	r3, [sp, #4]
 800e214:	6120      	str	r0, [r4, #16]
 800e216:	b15b      	cbz	r3, 800e230 <__smakebuf_r+0x70>
 800e218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e21c:	4630      	mov	r0, r6
 800e21e:	f000 f81d 	bl	800e25c <_isatty_r>
 800e222:	b128      	cbz	r0, 800e230 <__smakebuf_r+0x70>
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	f023 0303 	bic.w	r3, r3, #3
 800e22a:	f043 0301 	orr.w	r3, r3, #1
 800e22e:	81a3      	strh	r3, [r4, #12]
 800e230:	89a3      	ldrh	r3, [r4, #12]
 800e232:	431d      	orrs	r5, r3
 800e234:	81a5      	strh	r5, [r4, #12]
 800e236:	e7cf      	b.n	800e1d8 <__smakebuf_r+0x18>

0800e238 <_fstat_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	; (800e258 <_fstat_r+0x20>)
 800e23c:	2300      	movs	r3, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	4608      	mov	r0, r1
 800e242:	4611      	mov	r1, r2
 800e244:	602b      	str	r3, [r5, #0]
 800e246:	f7f4 fb38 	bl	80028ba <_fstat>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	d102      	bne.n	800e254 <_fstat_r+0x1c>
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	b103      	cbz	r3, 800e254 <_fstat_r+0x1c>
 800e252:	6023      	str	r3, [r4, #0]
 800e254:	bd38      	pop	{r3, r4, r5, pc}
 800e256:	bf00      	nop
 800e258:	20002a34 	.word	0x20002a34

0800e25c <_isatty_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	; (800e278 <_isatty_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f4 fb37 	bl	80028da <_isatty>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_isatty_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_isatty_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	20002a34 	.word	0x20002a34

0800e27c <_raise_r>:
 800e27c:	291f      	cmp	r1, #31
 800e27e:	b538      	push	{r3, r4, r5, lr}
 800e280:	4604      	mov	r4, r0
 800e282:	460d      	mov	r5, r1
 800e284:	d904      	bls.n	800e290 <_raise_r+0x14>
 800e286:	2316      	movs	r3, #22
 800e288:	6003      	str	r3, [r0, #0]
 800e28a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e28e:	bd38      	pop	{r3, r4, r5, pc}
 800e290:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e292:	b112      	cbz	r2, 800e29a <_raise_r+0x1e>
 800e294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e298:	b94b      	cbnz	r3, 800e2ae <_raise_r+0x32>
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 f830 	bl	800e300 <_getpid_r>
 800e2a0:	462a      	mov	r2, r5
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2aa:	f000 b817 	b.w	800e2dc <_kill_r>
 800e2ae:	2b01      	cmp	r3, #1
 800e2b0:	d00a      	beq.n	800e2c8 <_raise_r+0x4c>
 800e2b2:	1c59      	adds	r1, r3, #1
 800e2b4:	d103      	bne.n	800e2be <_raise_r+0x42>
 800e2b6:	2316      	movs	r3, #22
 800e2b8:	6003      	str	r3, [r0, #0]
 800e2ba:	2001      	movs	r0, #1
 800e2bc:	e7e7      	b.n	800e28e <_raise_r+0x12>
 800e2be:	2400      	movs	r4, #0
 800e2c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	4798      	blx	r3
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	e7e0      	b.n	800e28e <_raise_r+0x12>

0800e2cc <raise>:
 800e2cc:	4b02      	ldr	r3, [pc, #8]	; (800e2d8 <raise+0xc>)
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	6818      	ldr	r0, [r3, #0]
 800e2d2:	f7ff bfd3 	b.w	800e27c <_raise_r>
 800e2d6:	bf00      	nop
 800e2d8:	200005d8 	.word	0x200005d8

0800e2dc <_kill_r>:
 800e2dc:	b538      	push	{r3, r4, r5, lr}
 800e2de:	4d07      	ldr	r5, [pc, #28]	; (800e2fc <_kill_r+0x20>)
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	4608      	mov	r0, r1
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	602b      	str	r3, [r5, #0]
 800e2ea:	f7f4 fa87 	bl	80027fc <_kill>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	d102      	bne.n	800e2f8 <_kill_r+0x1c>
 800e2f2:	682b      	ldr	r3, [r5, #0]
 800e2f4:	b103      	cbz	r3, 800e2f8 <_kill_r+0x1c>
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	bd38      	pop	{r3, r4, r5, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20002a34 	.word	0x20002a34

0800e300 <_getpid_r>:
 800e300:	f7f4 ba74 	b.w	80027ec <_getpid>
 800e304:	0000      	movs	r0, r0
	...

0800e308 <sin>:
 800e308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e30a:	ec53 2b10 	vmov	r2, r3, d0
 800e30e:	4828      	ldr	r0, [pc, #160]	; (800e3b0 <sin+0xa8>)
 800e310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e314:	4281      	cmp	r1, r0
 800e316:	dc07      	bgt.n	800e328 <sin+0x20>
 800e318:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e3a8 <sin+0xa0>
 800e31c:	2000      	movs	r0, #0
 800e31e:	b005      	add	sp, #20
 800e320:	f85d eb04 	ldr.w	lr, [sp], #4
 800e324:	f000 beb0 	b.w	800f088 <__kernel_sin>
 800e328:	4822      	ldr	r0, [pc, #136]	; (800e3b4 <sin+0xac>)
 800e32a:	4281      	cmp	r1, r0
 800e32c:	dd09      	ble.n	800e342 <sin+0x3a>
 800e32e:	ee10 0a10 	vmov	r0, s0
 800e332:	4619      	mov	r1, r3
 800e334:	f7f1 ffa8 	bl	8000288 <__aeabi_dsub>
 800e338:	ec41 0b10 	vmov	d0, r0, r1
 800e33c:	b005      	add	sp, #20
 800e33e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e342:	4668      	mov	r0, sp
 800e344:	f000 f880 	bl	800e448 <__ieee754_rem_pio2>
 800e348:	f000 0003 	and.w	r0, r0, #3
 800e34c:	2801      	cmp	r0, #1
 800e34e:	d00c      	beq.n	800e36a <sin+0x62>
 800e350:	2802      	cmp	r0, #2
 800e352:	d011      	beq.n	800e378 <sin+0x70>
 800e354:	b9f0      	cbnz	r0, 800e394 <sin+0x8c>
 800e356:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e35a:	ed9d 0b00 	vldr	d0, [sp]
 800e35e:	2001      	movs	r0, #1
 800e360:	f000 fe92 	bl	800f088 <__kernel_sin>
 800e364:	ec51 0b10 	vmov	r0, r1, d0
 800e368:	e7e6      	b.n	800e338 <sin+0x30>
 800e36a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e36e:	ed9d 0b00 	vldr	d0, [sp]
 800e372:	f000 fdc1 	bl	800eef8 <__kernel_cos>
 800e376:	e7f5      	b.n	800e364 <sin+0x5c>
 800e378:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e37c:	ed9d 0b00 	vldr	d0, [sp]
 800e380:	2001      	movs	r0, #1
 800e382:	f000 fe81 	bl	800f088 <__kernel_sin>
 800e386:	ec53 2b10 	vmov	r2, r3, d0
 800e38a:	ee10 0a10 	vmov	r0, s0
 800e38e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e392:	e7d1      	b.n	800e338 <sin+0x30>
 800e394:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e398:	ed9d 0b00 	vldr	d0, [sp]
 800e39c:	f000 fdac 	bl	800eef8 <__kernel_cos>
 800e3a0:	e7f1      	b.n	800e386 <sin+0x7e>
 800e3a2:	bf00      	nop
 800e3a4:	f3af 8000 	nop.w
	...
 800e3b0:	3fe921fb 	.word	0x3fe921fb
 800e3b4:	7fefffff 	.word	0x7fefffff

0800e3b8 <round>:
 800e3b8:	ec53 2b10 	vmov	r2, r3, d0
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e3c2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e3c6:	2813      	cmp	r0, #19
 800e3c8:	ee10 5a10 	vmov	r5, s0
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	dc18      	bgt.n	800e402 <round+0x4a>
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	da09      	bge.n	800e3e8 <round+0x30>
 800e3d4:	3001      	adds	r0, #1
 800e3d6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800e3da:	d103      	bne.n	800e3e4 <round+0x2c>
 800e3dc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e3e0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	e02a      	b.n	800e43e <round+0x86>
 800e3e8:	4c16      	ldr	r4, [pc, #88]	; (800e444 <round+0x8c>)
 800e3ea:	4104      	asrs	r4, r0
 800e3ec:	ea03 0604 	and.w	r6, r3, r4
 800e3f0:	4316      	orrs	r6, r2
 800e3f2:	d011      	beq.n	800e418 <round+0x60>
 800e3f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e3f8:	4103      	asrs	r3, r0
 800e3fa:	440b      	add	r3, r1
 800e3fc:	ea23 0104 	bic.w	r1, r3, r4
 800e400:	e7f0      	b.n	800e3e4 <round+0x2c>
 800e402:	2833      	cmp	r0, #51	; 0x33
 800e404:	dd0b      	ble.n	800e41e <round+0x66>
 800e406:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e40a:	d105      	bne.n	800e418 <round+0x60>
 800e40c:	ee10 0a10 	vmov	r0, s0
 800e410:	f7f1 ff3c 	bl	800028c <__adddf3>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	ec43 2b10 	vmov	d0, r2, r3
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
 800e41e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800e422:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e426:	40f4      	lsrs	r4, r6
 800e428:	4214      	tst	r4, r2
 800e42a:	d0f5      	beq.n	800e418 <round+0x60>
 800e42c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800e430:	2301      	movs	r3, #1
 800e432:	4083      	lsls	r3, r0
 800e434:	195b      	adds	r3, r3, r5
 800e436:	bf28      	it	cs
 800e438:	3101      	addcs	r1, #1
 800e43a:	ea23 0304 	bic.w	r3, r3, r4
 800e43e:	461a      	mov	r2, r3
 800e440:	460b      	mov	r3, r1
 800e442:	e7e9      	b.n	800e418 <round+0x60>
 800e444:	000fffff 	.word	0x000fffff

0800e448 <__ieee754_rem_pio2>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	ed2d 8b02 	vpush	{d8}
 800e450:	ec55 4b10 	vmov	r4, r5, d0
 800e454:	4bca      	ldr	r3, [pc, #808]	; (800e780 <__ieee754_rem_pio2+0x338>)
 800e456:	b08b      	sub	sp, #44	; 0x2c
 800e458:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e45c:	4598      	cmp	r8, r3
 800e45e:	4682      	mov	sl, r0
 800e460:	9502      	str	r5, [sp, #8]
 800e462:	dc08      	bgt.n	800e476 <__ieee754_rem_pio2+0x2e>
 800e464:	2200      	movs	r2, #0
 800e466:	2300      	movs	r3, #0
 800e468:	ed80 0b00 	vstr	d0, [r0]
 800e46c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e470:	f04f 0b00 	mov.w	fp, #0
 800e474:	e028      	b.n	800e4c8 <__ieee754_rem_pio2+0x80>
 800e476:	4bc3      	ldr	r3, [pc, #780]	; (800e784 <__ieee754_rem_pio2+0x33c>)
 800e478:	4598      	cmp	r8, r3
 800e47a:	dc78      	bgt.n	800e56e <__ieee754_rem_pio2+0x126>
 800e47c:	9b02      	ldr	r3, [sp, #8]
 800e47e:	4ec2      	ldr	r6, [pc, #776]	; (800e788 <__ieee754_rem_pio2+0x340>)
 800e480:	2b00      	cmp	r3, #0
 800e482:	ee10 0a10 	vmov	r0, s0
 800e486:	a3b0      	add	r3, pc, #704	; (adr r3, 800e748 <__ieee754_rem_pio2+0x300>)
 800e488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48c:	4629      	mov	r1, r5
 800e48e:	dd39      	ble.n	800e504 <__ieee754_rem_pio2+0xbc>
 800e490:	f7f1 fefa 	bl	8000288 <__aeabi_dsub>
 800e494:	45b0      	cmp	r8, r6
 800e496:	4604      	mov	r4, r0
 800e498:	460d      	mov	r5, r1
 800e49a:	d01b      	beq.n	800e4d4 <__ieee754_rem_pio2+0x8c>
 800e49c:	a3ac      	add	r3, pc, #688	; (adr r3, 800e750 <__ieee754_rem_pio2+0x308>)
 800e49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a2:	f7f1 fef1 	bl	8000288 <__aeabi_dsub>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	e9ca 2300 	strd	r2, r3, [sl]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f7f1 fee9 	bl	8000288 <__aeabi_dsub>
 800e4b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800e750 <__ieee754_rem_pio2+0x308>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	f7f1 fee4 	bl	8000288 <__aeabi_dsub>
 800e4c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4c4:	f04f 0b01 	mov.w	fp, #1
 800e4c8:	4658      	mov	r0, fp
 800e4ca:	b00b      	add	sp, #44	; 0x2c
 800e4cc:	ecbd 8b02 	vpop	{d8}
 800e4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800e758 <__ieee754_rem_pio2+0x310>)
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	f7f1 fed5 	bl	8000288 <__aeabi_dsub>
 800e4de:	a3a0      	add	r3, pc, #640	; (adr r3, 800e760 <__ieee754_rem_pio2+0x318>)
 800e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	460d      	mov	r5, r1
 800e4e8:	f7f1 fece 	bl	8000288 <__aeabi_dsub>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e9ca 2300 	strd	r2, r3, [sl]
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f1 fec6 	bl	8000288 <__aeabi_dsub>
 800e4fc:	a398      	add	r3, pc, #608	; (adr r3, 800e760 <__ieee754_rem_pio2+0x318>)
 800e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e502:	e7db      	b.n	800e4bc <__ieee754_rem_pio2+0x74>
 800e504:	f7f1 fec2 	bl	800028c <__adddf3>
 800e508:	45b0      	cmp	r8, r6
 800e50a:	4604      	mov	r4, r0
 800e50c:	460d      	mov	r5, r1
 800e50e:	d016      	beq.n	800e53e <__ieee754_rem_pio2+0xf6>
 800e510:	a38f      	add	r3, pc, #572	; (adr r3, 800e750 <__ieee754_rem_pio2+0x308>)
 800e512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e516:	f7f1 feb9 	bl	800028c <__adddf3>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	e9ca 2300 	strd	r2, r3, [sl]
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f1 feaf 	bl	8000288 <__aeabi_dsub>
 800e52a:	a389      	add	r3, pc, #548	; (adr r3, 800e750 <__ieee754_rem_pio2+0x308>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f1 feac 	bl	800028c <__adddf3>
 800e534:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e538:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e53c:	e7c4      	b.n	800e4c8 <__ieee754_rem_pio2+0x80>
 800e53e:	a386      	add	r3, pc, #536	; (adr r3, 800e758 <__ieee754_rem_pio2+0x310>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f1 fea2 	bl	800028c <__adddf3>
 800e548:	a385      	add	r3, pc, #532	; (adr r3, 800e760 <__ieee754_rem_pio2+0x318>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	4604      	mov	r4, r0
 800e550:	460d      	mov	r5, r1
 800e552:	f7f1 fe9b 	bl	800028c <__adddf3>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9ca 2300 	strd	r2, r3, [sl]
 800e55e:	4620      	mov	r0, r4
 800e560:	4629      	mov	r1, r5
 800e562:	f7f1 fe91 	bl	8000288 <__aeabi_dsub>
 800e566:	a37e      	add	r3, pc, #504	; (adr r3, 800e760 <__ieee754_rem_pio2+0x318>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	e7e0      	b.n	800e530 <__ieee754_rem_pio2+0xe8>
 800e56e:	4b87      	ldr	r3, [pc, #540]	; (800e78c <__ieee754_rem_pio2+0x344>)
 800e570:	4598      	cmp	r8, r3
 800e572:	f300 80d8 	bgt.w	800e726 <__ieee754_rem_pio2+0x2de>
 800e576:	f000 fe45 	bl	800f204 <fabs>
 800e57a:	ec55 4b10 	vmov	r4, r5, d0
 800e57e:	ee10 0a10 	vmov	r0, s0
 800e582:	a379      	add	r3, pc, #484	; (adr r3, 800e768 <__ieee754_rem_pio2+0x320>)
 800e584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e588:	4629      	mov	r1, r5
 800e58a:	f7f2 f835 	bl	80005f8 <__aeabi_dmul>
 800e58e:	4b80      	ldr	r3, [pc, #512]	; (800e790 <__ieee754_rem_pio2+0x348>)
 800e590:	2200      	movs	r2, #0
 800e592:	f7f1 fe7b 	bl	800028c <__adddf3>
 800e596:	f7f2 fadf 	bl	8000b58 <__aeabi_d2iz>
 800e59a:	4683      	mov	fp, r0
 800e59c:	f7f1 ffc2 	bl	8000524 <__aeabi_i2d>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	ec43 2b18 	vmov	d8, r2, r3
 800e5a8:	a367      	add	r3, pc, #412	; (adr r3, 800e748 <__ieee754_rem_pio2+0x300>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f2 f823 	bl	80005f8 <__aeabi_dmul>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	460b      	mov	r3, r1
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	f7f1 fe65 	bl	8000288 <__aeabi_dsub>
 800e5be:	a364      	add	r3, pc, #400	; (adr r3, 800e750 <__ieee754_rem_pio2+0x308>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	ec51 0b18 	vmov	r0, r1, d8
 800e5cc:	f7f2 f814 	bl	80005f8 <__aeabi_dmul>
 800e5d0:	f1bb 0f1f 	cmp.w	fp, #31
 800e5d4:	4604      	mov	r4, r0
 800e5d6:	460d      	mov	r5, r1
 800e5d8:	dc0d      	bgt.n	800e5f6 <__ieee754_rem_pio2+0x1ae>
 800e5da:	4b6e      	ldr	r3, [pc, #440]	; (800e794 <__ieee754_rem_pio2+0x34c>)
 800e5dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e4:	4543      	cmp	r3, r8
 800e5e6:	d006      	beq.n	800e5f6 <__ieee754_rem_pio2+0x1ae>
 800e5e8:	4622      	mov	r2, r4
 800e5ea:	462b      	mov	r3, r5
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f1 fe4a 	bl	8000288 <__aeabi_dsub>
 800e5f4:	e00e      	b.n	800e614 <__ieee754_rem_pio2+0x1cc>
 800e5f6:	462b      	mov	r3, r5
 800e5f8:	4622      	mov	r2, r4
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	4639      	mov	r1, r7
 800e5fe:	f7f1 fe43 	bl	8000288 <__aeabi_dsub>
 800e602:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e60c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e610:	2b10      	cmp	r3, #16
 800e612:	dc02      	bgt.n	800e61a <__ieee754_rem_pio2+0x1d2>
 800e614:	e9ca 0100 	strd	r0, r1, [sl]
 800e618:	e039      	b.n	800e68e <__ieee754_rem_pio2+0x246>
 800e61a:	a34f      	add	r3, pc, #316	; (adr r3, 800e758 <__ieee754_rem_pio2+0x310>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	ec51 0b18 	vmov	r0, r1, d8
 800e624:	f7f1 ffe8 	bl	80005f8 <__aeabi_dmul>
 800e628:	4604      	mov	r4, r0
 800e62a:	460d      	mov	r5, r1
 800e62c:	4602      	mov	r2, r0
 800e62e:	460b      	mov	r3, r1
 800e630:	4630      	mov	r0, r6
 800e632:	4639      	mov	r1, r7
 800e634:	f7f1 fe28 	bl	8000288 <__aeabi_dsub>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	4680      	mov	r8, r0
 800e63e:	4689      	mov	r9, r1
 800e640:	4630      	mov	r0, r6
 800e642:	4639      	mov	r1, r7
 800e644:	f7f1 fe20 	bl	8000288 <__aeabi_dsub>
 800e648:	4622      	mov	r2, r4
 800e64a:	462b      	mov	r3, r5
 800e64c:	f7f1 fe1c 	bl	8000288 <__aeabi_dsub>
 800e650:	a343      	add	r3, pc, #268	; (adr r3, 800e760 <__ieee754_rem_pio2+0x318>)
 800e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e656:	4604      	mov	r4, r0
 800e658:	460d      	mov	r5, r1
 800e65a:	ec51 0b18 	vmov	r0, r1, d8
 800e65e:	f7f1 ffcb 	bl	80005f8 <__aeabi_dmul>
 800e662:	4622      	mov	r2, r4
 800e664:	462b      	mov	r3, r5
 800e666:	f7f1 fe0f 	bl	8000288 <__aeabi_dsub>
 800e66a:	4602      	mov	r2, r0
 800e66c:	460b      	mov	r3, r1
 800e66e:	4604      	mov	r4, r0
 800e670:	460d      	mov	r5, r1
 800e672:	4640      	mov	r0, r8
 800e674:	4649      	mov	r1, r9
 800e676:	f7f1 fe07 	bl	8000288 <__aeabi_dsub>
 800e67a:	9a03      	ldr	r2, [sp, #12]
 800e67c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	2b31      	cmp	r3, #49	; 0x31
 800e684:	dc24      	bgt.n	800e6d0 <__ieee754_rem_pio2+0x288>
 800e686:	e9ca 0100 	strd	r0, r1, [sl]
 800e68a:	4646      	mov	r6, r8
 800e68c:	464f      	mov	r7, r9
 800e68e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e692:	4630      	mov	r0, r6
 800e694:	4642      	mov	r2, r8
 800e696:	464b      	mov	r3, r9
 800e698:	4639      	mov	r1, r7
 800e69a:	f7f1 fdf5 	bl	8000288 <__aeabi_dsub>
 800e69e:	462b      	mov	r3, r5
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	f7f1 fdf1 	bl	8000288 <__aeabi_dsub>
 800e6a6:	9b02      	ldr	r3, [sp, #8]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6ae:	f6bf af0b 	bge.w	800e4c8 <__ieee754_rem_pio2+0x80>
 800e6b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e6b6:	f8ca 3004 	str.w	r3, [sl, #4]
 800e6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6be:	f8ca 8000 	str.w	r8, [sl]
 800e6c2:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6c6:	f8ca 300c 	str.w	r3, [sl, #12]
 800e6ca:	f1cb 0b00 	rsb	fp, fp, #0
 800e6ce:	e6fb      	b.n	800e4c8 <__ieee754_rem_pio2+0x80>
 800e6d0:	a327      	add	r3, pc, #156	; (adr r3, 800e770 <__ieee754_rem_pio2+0x328>)
 800e6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d6:	ec51 0b18 	vmov	r0, r1, d8
 800e6da:	f7f1 ff8d 	bl	80005f8 <__aeabi_dmul>
 800e6de:	4604      	mov	r4, r0
 800e6e0:	460d      	mov	r5, r1
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f1 fdcd 	bl	8000288 <__aeabi_dsub>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4606      	mov	r6, r0
 800e6f4:	460f      	mov	r7, r1
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	f7f1 fdc5 	bl	8000288 <__aeabi_dsub>
 800e6fe:	4622      	mov	r2, r4
 800e700:	462b      	mov	r3, r5
 800e702:	f7f1 fdc1 	bl	8000288 <__aeabi_dsub>
 800e706:	a31c      	add	r3, pc, #112	; (adr r3, 800e778 <__ieee754_rem_pio2+0x330>)
 800e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	ec51 0b18 	vmov	r0, r1, d8
 800e714:	f7f1 ff70 	bl	80005f8 <__aeabi_dmul>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	f7f1 fdb4 	bl	8000288 <__aeabi_dsub>
 800e720:	4604      	mov	r4, r0
 800e722:	460d      	mov	r5, r1
 800e724:	e760      	b.n	800e5e8 <__ieee754_rem_pio2+0x1a0>
 800e726:	4b1c      	ldr	r3, [pc, #112]	; (800e798 <__ieee754_rem_pio2+0x350>)
 800e728:	4598      	cmp	r8, r3
 800e72a:	dd37      	ble.n	800e79c <__ieee754_rem_pio2+0x354>
 800e72c:	ee10 2a10 	vmov	r2, s0
 800e730:	462b      	mov	r3, r5
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f1 fda7 	bl	8000288 <__aeabi_dsub>
 800e73a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e73e:	e9ca 0100 	strd	r0, r1, [sl]
 800e742:	e695      	b.n	800e470 <__ieee754_rem_pio2+0x28>
 800e744:	f3af 8000 	nop.w
 800e748:	54400000 	.word	0x54400000
 800e74c:	3ff921fb 	.word	0x3ff921fb
 800e750:	1a626331 	.word	0x1a626331
 800e754:	3dd0b461 	.word	0x3dd0b461
 800e758:	1a600000 	.word	0x1a600000
 800e75c:	3dd0b461 	.word	0x3dd0b461
 800e760:	2e037073 	.word	0x2e037073
 800e764:	3ba3198a 	.word	0x3ba3198a
 800e768:	6dc9c883 	.word	0x6dc9c883
 800e76c:	3fe45f30 	.word	0x3fe45f30
 800e770:	2e000000 	.word	0x2e000000
 800e774:	3ba3198a 	.word	0x3ba3198a
 800e778:	252049c1 	.word	0x252049c1
 800e77c:	397b839a 	.word	0x397b839a
 800e780:	3fe921fb 	.word	0x3fe921fb
 800e784:	4002d97b 	.word	0x4002d97b
 800e788:	3ff921fb 	.word	0x3ff921fb
 800e78c:	413921fb 	.word	0x413921fb
 800e790:	3fe00000 	.word	0x3fe00000
 800e794:	0800fb4c 	.word	0x0800fb4c
 800e798:	7fefffff 	.word	0x7fefffff
 800e79c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e7a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e7a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	460d      	mov	r5, r1
 800e7ac:	f7f2 f9d4 	bl	8000b58 <__aeabi_d2iz>
 800e7b0:	f7f1 feb8 	bl	8000524 <__aeabi_i2d>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e7c0:	f7f1 fd62 	bl	8000288 <__aeabi_dsub>
 800e7c4:	4b21      	ldr	r3, [pc, #132]	; (800e84c <__ieee754_rem_pio2+0x404>)
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	460d      	mov	r5, r1
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	f7f2 f9c2 	bl	8000b58 <__aeabi_d2iz>
 800e7d4:	f7f1 fea6 	bl	8000524 <__aeabi_i2d>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7e4:	f7f1 fd50 	bl	8000288 <__aeabi_dsub>
 800e7e8:	4b18      	ldr	r3, [pc, #96]	; (800e84c <__ieee754_rem_pio2+0x404>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f7f1 ff04 	bl	80005f8 <__aeabi_dmul>
 800e7f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e7f8:	2703      	movs	r7, #3
 800e7fa:	2400      	movs	r4, #0
 800e7fc:	2500      	movs	r5, #0
 800e7fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e802:	4622      	mov	r2, r4
 800e804:	462b      	mov	r3, r5
 800e806:	46b9      	mov	r9, r7
 800e808:	3f01      	subs	r7, #1
 800e80a:	f7f2 f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d1f5      	bne.n	800e7fe <__ieee754_rem_pio2+0x3b6>
 800e812:	4b0f      	ldr	r3, [pc, #60]	; (800e850 <__ieee754_rem_pio2+0x408>)
 800e814:	9301      	str	r3, [sp, #4]
 800e816:	2302      	movs	r3, #2
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	4632      	mov	r2, r6
 800e81c:	464b      	mov	r3, r9
 800e81e:	4651      	mov	r1, sl
 800e820:	a804      	add	r0, sp, #16
 800e822:	f000 f819 	bl	800e858 <__kernel_rem_pio2>
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	4683      	mov	fp, r0
 800e82c:	f6bf ae4c 	bge.w	800e4c8 <__ieee754_rem_pio2+0x80>
 800e830:	e9da 2100 	ldrd	r2, r1, [sl]
 800e834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e838:	e9ca 2300 	strd	r2, r3, [sl]
 800e83c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e844:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e848:	e73f      	b.n	800e6ca <__ieee754_rem_pio2+0x282>
 800e84a:	bf00      	nop
 800e84c:	41700000 	.word	0x41700000
 800e850:	0800fbcc 	.word	0x0800fbcc
 800e854:	00000000 	.word	0x00000000

0800e858 <__kernel_rem_pio2>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	ed2d 8b02 	vpush	{d8}
 800e860:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e864:	f112 0f14 	cmn.w	r2, #20
 800e868:	9306      	str	r3, [sp, #24]
 800e86a:	9104      	str	r1, [sp, #16]
 800e86c:	4bc2      	ldr	r3, [pc, #776]	; (800eb78 <__kernel_rem_pio2+0x320>)
 800e86e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e870:	9009      	str	r0, [sp, #36]	; 0x24
 800e872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	9b06      	ldr	r3, [sp, #24]
 800e87a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e87e:	bfa8      	it	ge
 800e880:	1ed4      	subge	r4, r2, #3
 800e882:	9305      	str	r3, [sp, #20]
 800e884:	bfb2      	itee	lt
 800e886:	2400      	movlt	r4, #0
 800e888:	2318      	movge	r3, #24
 800e88a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e88e:	f06f 0317 	mvn.w	r3, #23
 800e892:	fb04 3303 	mla	r3, r4, r3, r3
 800e896:	eb03 0a02 	add.w	sl, r3, r2
 800e89a:	9b00      	ldr	r3, [sp, #0]
 800e89c:	9a05      	ldr	r2, [sp, #20]
 800e89e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eb68 <__kernel_rem_pio2+0x310>
 800e8a2:	eb03 0802 	add.w	r8, r3, r2
 800e8a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e8a8:	1aa7      	subs	r7, r4, r2
 800e8aa:	ae20      	add	r6, sp, #128	; 0x80
 800e8ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e8b0:	2500      	movs	r5, #0
 800e8b2:	4545      	cmp	r5, r8
 800e8b4:	dd13      	ble.n	800e8de <__kernel_rem_pio2+0x86>
 800e8b6:	9b06      	ldr	r3, [sp, #24]
 800e8b8:	aa20      	add	r2, sp, #128	; 0x80
 800e8ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e8be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e8c2:	f04f 0800 	mov.w	r8, #0
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	4598      	cmp	r8, r3
 800e8ca:	dc31      	bgt.n	800e930 <__kernel_rem_pio2+0xd8>
 800e8cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eb68 <__kernel_rem_pio2+0x310>
 800e8d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e8d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e8d8:	462f      	mov	r7, r5
 800e8da:	2600      	movs	r6, #0
 800e8dc:	e01b      	b.n	800e916 <__kernel_rem_pio2+0xbe>
 800e8de:	42ef      	cmn	r7, r5
 800e8e0:	d407      	bmi.n	800e8f2 <__kernel_rem_pio2+0x9a>
 800e8e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e8e6:	f7f1 fe1d 	bl	8000524 <__aeabi_i2d>
 800e8ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e8ee:	3501      	adds	r5, #1
 800e8f0:	e7df      	b.n	800e8b2 <__kernel_rem_pio2+0x5a>
 800e8f2:	ec51 0b18 	vmov	r0, r1, d8
 800e8f6:	e7f8      	b.n	800e8ea <__kernel_rem_pio2+0x92>
 800e8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e900:	f7f1 fe7a 	bl	80005f8 <__aeabi_dmul>
 800e904:	4602      	mov	r2, r0
 800e906:	460b      	mov	r3, r1
 800e908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e90c:	f7f1 fcbe 	bl	800028c <__adddf3>
 800e910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e914:	3601      	adds	r6, #1
 800e916:	9b05      	ldr	r3, [sp, #20]
 800e918:	429e      	cmp	r6, r3
 800e91a:	f1a7 0708 	sub.w	r7, r7, #8
 800e91e:	ddeb      	ble.n	800e8f8 <__kernel_rem_pio2+0xa0>
 800e920:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e924:	f108 0801 	add.w	r8, r8, #1
 800e928:	ecab 7b02 	vstmia	fp!, {d7}
 800e92c:	3508      	adds	r5, #8
 800e92e:	e7ca      	b.n	800e8c6 <__kernel_rem_pio2+0x6e>
 800e930:	9b00      	ldr	r3, [sp, #0]
 800e932:	aa0c      	add	r2, sp, #48	; 0x30
 800e934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e938:	930b      	str	r3, [sp, #44]	; 0x2c
 800e93a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e93c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e940:	9c00      	ldr	r4, [sp, #0]
 800e942:	930a      	str	r3, [sp, #40]	; 0x28
 800e944:	00e3      	lsls	r3, r4, #3
 800e946:	9308      	str	r3, [sp, #32]
 800e948:	ab98      	add	r3, sp, #608	; 0x260
 800e94a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e94e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e952:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e956:	ab70      	add	r3, sp, #448	; 0x1c0
 800e958:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e95c:	46c3      	mov	fp, r8
 800e95e:	46a1      	mov	r9, r4
 800e960:	f1b9 0f00 	cmp.w	r9, #0
 800e964:	f1a5 0508 	sub.w	r5, r5, #8
 800e968:	dc77      	bgt.n	800ea5a <__kernel_rem_pio2+0x202>
 800e96a:	ec47 6b10 	vmov	d0, r6, r7
 800e96e:	4650      	mov	r0, sl
 800e970:	f000 fc52 	bl	800f218 <scalbn>
 800e974:	ec57 6b10 	vmov	r6, r7, d0
 800e978:	2200      	movs	r2, #0
 800e97a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e97e:	ee10 0a10 	vmov	r0, s0
 800e982:	4639      	mov	r1, r7
 800e984:	f7f1 fe38 	bl	80005f8 <__aeabi_dmul>
 800e988:	ec41 0b10 	vmov	d0, r0, r1
 800e98c:	f000 fcc4 	bl	800f318 <floor>
 800e990:	4b7a      	ldr	r3, [pc, #488]	; (800eb7c <__kernel_rem_pio2+0x324>)
 800e992:	ec51 0b10 	vmov	r0, r1, d0
 800e996:	2200      	movs	r2, #0
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	f7f1 fc70 	bl	8000288 <__aeabi_dsub>
 800e9a8:	460f      	mov	r7, r1
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	f7f2 f8d4 	bl	8000b58 <__aeabi_d2iz>
 800e9b0:	9002      	str	r0, [sp, #8]
 800e9b2:	f7f1 fdb7 	bl	8000524 <__aeabi_i2d>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fc63 	bl	8000288 <__aeabi_dsub>
 800e9c2:	f1ba 0f00 	cmp.w	sl, #0
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	460f      	mov	r7, r1
 800e9ca:	dd6d      	ble.n	800eaa8 <__kernel_rem_pio2+0x250>
 800e9cc:	1e61      	subs	r1, r4, #1
 800e9ce:	ab0c      	add	r3, sp, #48	; 0x30
 800e9d0:	9d02      	ldr	r5, [sp, #8]
 800e9d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d6:	f1ca 0018 	rsb	r0, sl, #24
 800e9da:	fa43 f200 	asr.w	r2, r3, r0
 800e9de:	4415      	add	r5, r2
 800e9e0:	4082      	lsls	r2, r0
 800e9e2:	1a9b      	subs	r3, r3, r2
 800e9e4:	aa0c      	add	r2, sp, #48	; 0x30
 800e9e6:	9502      	str	r5, [sp, #8]
 800e9e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e9ec:	f1ca 0217 	rsb	r2, sl, #23
 800e9f0:	fa43 fb02 	asr.w	fp, r3, r2
 800e9f4:	f1bb 0f00 	cmp.w	fp, #0
 800e9f8:	dd65      	ble.n	800eac6 <__kernel_rem_pio2+0x26e>
 800e9fa:	9b02      	ldr	r3, [sp, #8]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	3301      	adds	r3, #1
 800ea00:	9302      	str	r3, [sp, #8]
 800ea02:	4615      	mov	r5, r2
 800ea04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ea08:	4294      	cmp	r4, r2
 800ea0a:	f300 809f 	bgt.w	800eb4c <__kernel_rem_pio2+0x2f4>
 800ea0e:	f1ba 0f00 	cmp.w	sl, #0
 800ea12:	dd07      	ble.n	800ea24 <__kernel_rem_pio2+0x1cc>
 800ea14:	f1ba 0f01 	cmp.w	sl, #1
 800ea18:	f000 80c1 	beq.w	800eb9e <__kernel_rem_pio2+0x346>
 800ea1c:	f1ba 0f02 	cmp.w	sl, #2
 800ea20:	f000 80c7 	beq.w	800ebb2 <__kernel_rem_pio2+0x35a>
 800ea24:	f1bb 0f02 	cmp.w	fp, #2
 800ea28:	d14d      	bne.n	800eac6 <__kernel_rem_pio2+0x26e>
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	4954      	ldr	r1, [pc, #336]	; (800eb80 <__kernel_rem_pio2+0x328>)
 800ea30:	2000      	movs	r0, #0
 800ea32:	f7f1 fc29 	bl	8000288 <__aeabi_dsub>
 800ea36:	4606      	mov	r6, r0
 800ea38:	460f      	mov	r7, r1
 800ea3a:	2d00      	cmp	r5, #0
 800ea3c:	d043      	beq.n	800eac6 <__kernel_rem_pio2+0x26e>
 800ea3e:	4650      	mov	r0, sl
 800ea40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eb70 <__kernel_rem_pio2+0x318>
 800ea44:	f000 fbe8 	bl	800f218 <scalbn>
 800ea48:	4630      	mov	r0, r6
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	ec53 2b10 	vmov	r2, r3, d0
 800ea50:	f7f1 fc1a 	bl	8000288 <__aeabi_dsub>
 800ea54:	4606      	mov	r6, r0
 800ea56:	460f      	mov	r7, r1
 800ea58:	e035      	b.n	800eac6 <__kernel_rem_pio2+0x26e>
 800ea5a:	4b4a      	ldr	r3, [pc, #296]	; (800eb84 <__kernel_rem_pio2+0x32c>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	4630      	mov	r0, r6
 800ea60:	4639      	mov	r1, r7
 800ea62:	f7f1 fdc9 	bl	80005f8 <__aeabi_dmul>
 800ea66:	f7f2 f877 	bl	8000b58 <__aeabi_d2iz>
 800ea6a:	f7f1 fd5b 	bl	8000524 <__aeabi_i2d>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	460b      	mov	r3, r1
 800ea72:	ec43 2b18 	vmov	d8, r2, r3
 800ea76:	4b44      	ldr	r3, [pc, #272]	; (800eb88 <__kernel_rem_pio2+0x330>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f7f1 fdbd 	bl	80005f8 <__aeabi_dmul>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f1 fbff 	bl	8000288 <__aeabi_dsub>
 800ea8a:	f7f2 f865 	bl	8000b58 <__aeabi_d2iz>
 800ea8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea92:	f84b 0b04 	str.w	r0, [fp], #4
 800ea96:	ec51 0b18 	vmov	r0, r1, d8
 800ea9a:	f7f1 fbf7 	bl	800028c <__adddf3>
 800ea9e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	460f      	mov	r7, r1
 800eaa6:	e75b      	b.n	800e960 <__kernel_rem_pio2+0x108>
 800eaa8:	d106      	bne.n	800eab8 <__kernel_rem_pio2+0x260>
 800eaaa:	1e63      	subs	r3, r4, #1
 800eaac:	aa0c      	add	r2, sp, #48	; 0x30
 800eaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eab2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800eab6:	e79d      	b.n	800e9f4 <__kernel_rem_pio2+0x19c>
 800eab8:	4b34      	ldr	r3, [pc, #208]	; (800eb8c <__kernel_rem_pio2+0x334>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	f7f2 f822 	bl	8000b04 <__aeabi_dcmpge>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d140      	bne.n	800eb46 <__kernel_rem_pio2+0x2ee>
 800eac4:	4683      	mov	fp, r0
 800eac6:	2200      	movs	r2, #0
 800eac8:	2300      	movs	r3, #0
 800eaca:	4630      	mov	r0, r6
 800eacc:	4639      	mov	r1, r7
 800eace:	f7f1 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 800ead2:	2800      	cmp	r0, #0
 800ead4:	f000 80c1 	beq.w	800ec5a <__kernel_rem_pio2+0x402>
 800ead8:	1e65      	subs	r5, r4, #1
 800eada:	462b      	mov	r3, r5
 800eadc:	2200      	movs	r2, #0
 800eade:	9900      	ldr	r1, [sp, #0]
 800eae0:	428b      	cmp	r3, r1
 800eae2:	da6d      	bge.n	800ebc0 <__kernel_rem_pio2+0x368>
 800eae4:	2a00      	cmp	r2, #0
 800eae6:	f000 808a 	beq.w	800ebfe <__kernel_rem_pio2+0x3a6>
 800eaea:	ab0c      	add	r3, sp, #48	; 0x30
 800eaec:	f1aa 0a18 	sub.w	sl, sl, #24
 800eaf0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 80ae 	beq.w	800ec56 <__kernel_rem_pio2+0x3fe>
 800eafa:	4650      	mov	r0, sl
 800eafc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eb70 <__kernel_rem_pio2+0x318>
 800eb00:	f000 fb8a 	bl	800f218 <scalbn>
 800eb04:	1c6b      	adds	r3, r5, #1
 800eb06:	00da      	lsls	r2, r3, #3
 800eb08:	9205      	str	r2, [sp, #20]
 800eb0a:	ec57 6b10 	vmov	r6, r7, d0
 800eb0e:	aa70      	add	r2, sp, #448	; 0x1c0
 800eb10:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800eb84 <__kernel_rem_pio2+0x32c>
 800eb14:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eb18:	462c      	mov	r4, r5
 800eb1a:	f04f 0800 	mov.w	r8, #0
 800eb1e:	2c00      	cmp	r4, #0
 800eb20:	f280 80d4 	bge.w	800eccc <__kernel_rem_pio2+0x474>
 800eb24:	462c      	mov	r4, r5
 800eb26:	2c00      	cmp	r4, #0
 800eb28:	f2c0 8102 	blt.w	800ed30 <__kernel_rem_pio2+0x4d8>
 800eb2c:	4b18      	ldr	r3, [pc, #96]	; (800eb90 <__kernel_rem_pio2+0x338>)
 800eb2e:	461e      	mov	r6, r3
 800eb30:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb32:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eb36:	1b2b      	subs	r3, r5, r4
 800eb38:	f04f 0900 	mov.w	r9, #0
 800eb3c:	f04f 0a00 	mov.w	sl, #0
 800eb40:	2700      	movs	r7, #0
 800eb42:	9306      	str	r3, [sp, #24]
 800eb44:	e0e6      	b.n	800ed14 <__kernel_rem_pio2+0x4bc>
 800eb46:	f04f 0b02 	mov.w	fp, #2
 800eb4a:	e756      	b.n	800e9fa <__kernel_rem_pio2+0x1a2>
 800eb4c:	f8d8 3000 	ldr.w	r3, [r8]
 800eb50:	bb05      	cbnz	r5, 800eb94 <__kernel_rem_pio2+0x33c>
 800eb52:	b123      	cbz	r3, 800eb5e <__kernel_rem_pio2+0x306>
 800eb54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb58:	f8c8 3000 	str.w	r3, [r8]
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	3201      	adds	r2, #1
 800eb60:	f108 0804 	add.w	r8, r8, #4
 800eb64:	461d      	mov	r5, r3
 800eb66:	e74f      	b.n	800ea08 <__kernel_rem_pio2+0x1b0>
	...
 800eb74:	3ff00000 	.word	0x3ff00000
 800eb78:	0800fd18 	.word	0x0800fd18
 800eb7c:	40200000 	.word	0x40200000
 800eb80:	3ff00000 	.word	0x3ff00000
 800eb84:	3e700000 	.word	0x3e700000
 800eb88:	41700000 	.word	0x41700000
 800eb8c:	3fe00000 	.word	0x3fe00000
 800eb90:	0800fcd8 	.word	0x0800fcd8
 800eb94:	1acb      	subs	r3, r1, r3
 800eb96:	f8c8 3000 	str.w	r3, [r8]
 800eb9a:	462b      	mov	r3, r5
 800eb9c:	e7df      	b.n	800eb5e <__kernel_rem_pio2+0x306>
 800eb9e:	1e62      	subs	r2, r4, #1
 800eba0:	ab0c      	add	r3, sp, #48	; 0x30
 800eba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ebaa:	a90c      	add	r1, sp, #48	; 0x30
 800ebac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ebb0:	e738      	b.n	800ea24 <__kernel_rem_pio2+0x1cc>
 800ebb2:	1e62      	subs	r2, r4, #1
 800ebb4:	ab0c      	add	r3, sp, #48	; 0x30
 800ebb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ebbe:	e7f4      	b.n	800ebaa <__kernel_rem_pio2+0x352>
 800ebc0:	a90c      	add	r1, sp, #48	; 0x30
 800ebc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	430a      	orrs	r2, r1
 800ebca:	e788      	b.n	800eade <__kernel_rem_pio2+0x286>
 800ebcc:	3301      	adds	r3, #1
 800ebce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ebd2:	2900      	cmp	r1, #0
 800ebd4:	d0fa      	beq.n	800ebcc <__kernel_rem_pio2+0x374>
 800ebd6:	9a08      	ldr	r2, [sp, #32]
 800ebd8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ebdc:	446a      	add	r2, sp
 800ebde:	3a98      	subs	r2, #152	; 0x98
 800ebe0:	9208      	str	r2, [sp, #32]
 800ebe2:	9a06      	ldr	r2, [sp, #24]
 800ebe4:	a920      	add	r1, sp, #128	; 0x80
 800ebe6:	18a2      	adds	r2, r4, r2
 800ebe8:	18e3      	adds	r3, r4, r3
 800ebea:	f104 0801 	add.w	r8, r4, #1
 800ebee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ebf2:	9302      	str	r3, [sp, #8]
 800ebf4:	9b02      	ldr	r3, [sp, #8]
 800ebf6:	4543      	cmp	r3, r8
 800ebf8:	da04      	bge.n	800ec04 <__kernel_rem_pio2+0x3ac>
 800ebfa:	461c      	mov	r4, r3
 800ebfc:	e6a2      	b.n	800e944 <__kernel_rem_pio2+0xec>
 800ebfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec00:	2301      	movs	r3, #1
 800ec02:	e7e4      	b.n	800ebce <__kernel_rem_pio2+0x376>
 800ec04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ec0a:	f7f1 fc8b 	bl	8000524 <__aeabi_i2d>
 800ec0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ec12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec14:	46ab      	mov	fp, r5
 800ec16:	461c      	mov	r4, r3
 800ec18:	f04f 0900 	mov.w	r9, #0
 800ec1c:	2600      	movs	r6, #0
 800ec1e:	2700      	movs	r7, #0
 800ec20:	9b05      	ldr	r3, [sp, #20]
 800ec22:	4599      	cmp	r9, r3
 800ec24:	dd06      	ble.n	800ec34 <__kernel_rem_pio2+0x3dc>
 800ec26:	9b08      	ldr	r3, [sp, #32]
 800ec28:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ec2c:	f108 0801 	add.w	r8, r8, #1
 800ec30:	9308      	str	r3, [sp, #32]
 800ec32:	e7df      	b.n	800ebf4 <__kernel_rem_pio2+0x39c>
 800ec34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ec38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ec3c:	f7f1 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4630      	mov	r0, r6
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 fb20 	bl	800028c <__adddf3>
 800ec4c:	f109 0901 	add.w	r9, r9, #1
 800ec50:	4606      	mov	r6, r0
 800ec52:	460f      	mov	r7, r1
 800ec54:	e7e4      	b.n	800ec20 <__kernel_rem_pio2+0x3c8>
 800ec56:	3d01      	subs	r5, #1
 800ec58:	e747      	b.n	800eaea <__kernel_rem_pio2+0x292>
 800ec5a:	ec47 6b10 	vmov	d0, r6, r7
 800ec5e:	f1ca 0000 	rsb	r0, sl, #0
 800ec62:	f000 fad9 	bl	800f218 <scalbn>
 800ec66:	ec57 6b10 	vmov	r6, r7, d0
 800ec6a:	4ba0      	ldr	r3, [pc, #640]	; (800eeec <__kernel_rem_pio2+0x694>)
 800ec6c:	ee10 0a10 	vmov	r0, s0
 800ec70:	2200      	movs	r2, #0
 800ec72:	4639      	mov	r1, r7
 800ec74:	f7f1 ff46 	bl	8000b04 <__aeabi_dcmpge>
 800ec78:	b1f8      	cbz	r0, 800ecba <__kernel_rem_pio2+0x462>
 800ec7a:	4b9d      	ldr	r3, [pc, #628]	; (800eef0 <__kernel_rem_pio2+0x698>)
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	4630      	mov	r0, r6
 800ec80:	4639      	mov	r1, r7
 800ec82:	f7f1 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ec86:	f7f1 ff67 	bl	8000b58 <__aeabi_d2iz>
 800ec8a:	4680      	mov	r8, r0
 800ec8c:	f7f1 fc4a 	bl	8000524 <__aeabi_i2d>
 800ec90:	4b96      	ldr	r3, [pc, #600]	; (800eeec <__kernel_rem_pio2+0x694>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	f7f1 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ec98:	460b      	mov	r3, r1
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4639      	mov	r1, r7
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7f1 faf2 	bl	8000288 <__aeabi_dsub>
 800eca4:	f7f1 ff58 	bl	8000b58 <__aeabi_d2iz>
 800eca8:	1c65      	adds	r5, r4, #1
 800ecaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ecac:	f10a 0a18 	add.w	sl, sl, #24
 800ecb0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecb4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ecb8:	e71f      	b.n	800eafa <__kernel_rem_pio2+0x2a2>
 800ecba:	4630      	mov	r0, r6
 800ecbc:	4639      	mov	r1, r7
 800ecbe:	f7f1 ff4b 	bl	8000b58 <__aeabi_d2iz>
 800ecc2:	ab0c      	add	r3, sp, #48	; 0x30
 800ecc4:	4625      	mov	r5, r4
 800ecc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ecca:	e716      	b.n	800eafa <__kernel_rem_pio2+0x2a2>
 800eccc:	ab0c      	add	r3, sp, #48	; 0x30
 800ecce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ecd2:	f7f1 fc27 	bl	8000524 <__aeabi_i2d>
 800ecd6:	4632      	mov	r2, r6
 800ecd8:	463b      	mov	r3, r7
 800ecda:	f7f1 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ecde:	4642      	mov	r2, r8
 800ece0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ece4:	464b      	mov	r3, r9
 800ece6:	4630      	mov	r0, r6
 800ece8:	4639      	mov	r1, r7
 800ecea:	f7f1 fc85 	bl	80005f8 <__aeabi_dmul>
 800ecee:	3c01      	subs	r4, #1
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	e713      	b.n	800eb1e <__kernel_rem_pio2+0x2c6>
 800ecf6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ecfa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ecfe:	f7f1 fc7b 	bl	80005f8 <__aeabi_dmul>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	4648      	mov	r0, r9
 800ed08:	4651      	mov	r1, sl
 800ed0a:	f7f1 fabf 	bl	800028c <__adddf3>
 800ed0e:	3701      	adds	r7, #1
 800ed10:	4681      	mov	r9, r0
 800ed12:	468a      	mov	sl, r1
 800ed14:	9b00      	ldr	r3, [sp, #0]
 800ed16:	429f      	cmp	r7, r3
 800ed18:	dc02      	bgt.n	800ed20 <__kernel_rem_pio2+0x4c8>
 800ed1a:	9b06      	ldr	r3, [sp, #24]
 800ed1c:	429f      	cmp	r7, r3
 800ed1e:	ddea      	ble.n	800ecf6 <__kernel_rem_pio2+0x49e>
 800ed20:	9a06      	ldr	r2, [sp, #24]
 800ed22:	ab48      	add	r3, sp, #288	; 0x120
 800ed24:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ed28:	e9c6 9a00 	strd	r9, sl, [r6]
 800ed2c:	3c01      	subs	r4, #1
 800ed2e:	e6fa      	b.n	800eb26 <__kernel_rem_pio2+0x2ce>
 800ed30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	dc0b      	bgt.n	800ed4e <__kernel_rem_pio2+0x4f6>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	dc39      	bgt.n	800edae <__kernel_rem_pio2+0x556>
 800ed3a:	d05d      	beq.n	800edf8 <__kernel_rem_pio2+0x5a0>
 800ed3c:	9b02      	ldr	r3, [sp, #8]
 800ed3e:	f003 0007 	and.w	r0, r3, #7
 800ed42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ed46:	ecbd 8b02 	vpop	{d8}
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed50:	2b03      	cmp	r3, #3
 800ed52:	d1f3      	bne.n	800ed3c <__kernel_rem_pio2+0x4e4>
 800ed54:	9b05      	ldr	r3, [sp, #20]
 800ed56:	9500      	str	r5, [sp, #0]
 800ed58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ed5c:	eb0d 0403 	add.w	r4, sp, r3
 800ed60:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ed64:	46a2      	mov	sl, r4
 800ed66:	9b00      	ldr	r3, [sp, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ed6e:	dc69      	bgt.n	800ee44 <__kernel_rem_pio2+0x5ec>
 800ed70:	46aa      	mov	sl, r5
 800ed72:	f1ba 0f01 	cmp.w	sl, #1
 800ed76:	f1a4 0408 	sub.w	r4, r4, #8
 800ed7a:	f300 8083 	bgt.w	800ee84 <__kernel_rem_pio2+0x62c>
 800ed7e:	9c05      	ldr	r4, [sp, #20]
 800ed80:	ab48      	add	r3, sp, #288	; 0x120
 800ed82:	441c      	add	r4, r3
 800ed84:	2000      	movs	r0, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	2d01      	cmp	r5, #1
 800ed8a:	f300 809a 	bgt.w	800eec2 <__kernel_rem_pio2+0x66a>
 800ed8e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ed92:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed96:	f1bb 0f00 	cmp.w	fp, #0
 800ed9a:	f040 8098 	bne.w	800eece <__kernel_rem_pio2+0x676>
 800ed9e:	9b04      	ldr	r3, [sp, #16]
 800eda0:	e9c3 7800 	strd	r7, r8, [r3]
 800eda4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800eda8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800edac:	e7c6      	b.n	800ed3c <__kernel_rem_pio2+0x4e4>
 800edae:	9e05      	ldr	r6, [sp, #20]
 800edb0:	ab48      	add	r3, sp, #288	; 0x120
 800edb2:	441e      	add	r6, r3
 800edb4:	462c      	mov	r4, r5
 800edb6:	2000      	movs	r0, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	2c00      	cmp	r4, #0
 800edbc:	da33      	bge.n	800ee26 <__kernel_rem_pio2+0x5ce>
 800edbe:	f1bb 0f00 	cmp.w	fp, #0
 800edc2:	d036      	beq.n	800ee32 <__kernel_rem_pio2+0x5da>
 800edc4:	4602      	mov	r2, r0
 800edc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edca:	9c04      	ldr	r4, [sp, #16]
 800edcc:	e9c4 2300 	strd	r2, r3, [r4]
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800edd8:	f7f1 fa56 	bl	8000288 <__aeabi_dsub>
 800eddc:	ae4a      	add	r6, sp, #296	; 0x128
 800edde:	2401      	movs	r4, #1
 800ede0:	42a5      	cmp	r5, r4
 800ede2:	da29      	bge.n	800ee38 <__kernel_rem_pio2+0x5e0>
 800ede4:	f1bb 0f00 	cmp.w	fp, #0
 800ede8:	d002      	beq.n	800edf0 <__kernel_rem_pio2+0x598>
 800edea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edee:	4619      	mov	r1, r3
 800edf0:	9b04      	ldr	r3, [sp, #16]
 800edf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800edf6:	e7a1      	b.n	800ed3c <__kernel_rem_pio2+0x4e4>
 800edf8:	9c05      	ldr	r4, [sp, #20]
 800edfa:	ab48      	add	r3, sp, #288	; 0x120
 800edfc:	441c      	add	r4, r3
 800edfe:	2000      	movs	r0, #0
 800ee00:	2100      	movs	r1, #0
 800ee02:	2d00      	cmp	r5, #0
 800ee04:	da09      	bge.n	800ee1a <__kernel_rem_pio2+0x5c2>
 800ee06:	f1bb 0f00 	cmp.w	fp, #0
 800ee0a:	d002      	beq.n	800ee12 <__kernel_rem_pio2+0x5ba>
 800ee0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee10:	4619      	mov	r1, r3
 800ee12:	9b04      	ldr	r3, [sp, #16]
 800ee14:	e9c3 0100 	strd	r0, r1, [r3]
 800ee18:	e790      	b.n	800ed3c <__kernel_rem_pio2+0x4e4>
 800ee1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee1e:	f7f1 fa35 	bl	800028c <__adddf3>
 800ee22:	3d01      	subs	r5, #1
 800ee24:	e7ed      	b.n	800ee02 <__kernel_rem_pio2+0x5aa>
 800ee26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ee2a:	f7f1 fa2f 	bl	800028c <__adddf3>
 800ee2e:	3c01      	subs	r4, #1
 800ee30:	e7c3      	b.n	800edba <__kernel_rem_pio2+0x562>
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	e7c8      	b.n	800edca <__kernel_rem_pio2+0x572>
 800ee38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ee3c:	f7f1 fa26 	bl	800028c <__adddf3>
 800ee40:	3401      	adds	r4, #1
 800ee42:	e7cd      	b.n	800ede0 <__kernel_rem_pio2+0x588>
 800ee44:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee4c:	9b00      	ldr	r3, [sp, #0]
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4632      	mov	r2, r6
 800ee54:	463b      	mov	r3, r7
 800ee56:	4640      	mov	r0, r8
 800ee58:	4649      	mov	r1, r9
 800ee5a:	f7f1 fa17 	bl	800028c <__adddf3>
 800ee5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee62:	4602      	mov	r2, r0
 800ee64:	460b      	mov	r3, r1
 800ee66:	4640      	mov	r0, r8
 800ee68:	4649      	mov	r1, r9
 800ee6a:	f7f1 fa0d 	bl	8000288 <__aeabi_dsub>
 800ee6e:	4632      	mov	r2, r6
 800ee70:	463b      	mov	r3, r7
 800ee72:	f7f1 fa0b 	bl	800028c <__adddf3>
 800ee76:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ee7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee7e:	ed8a 7b00 	vstr	d7, [sl]
 800ee82:	e770      	b.n	800ed66 <__kernel_rem_pio2+0x50e>
 800ee84:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee8c:	4640      	mov	r0, r8
 800ee8e:	4632      	mov	r2, r6
 800ee90:	463b      	mov	r3, r7
 800ee92:	4649      	mov	r1, r9
 800ee94:	f7f1 f9fa 	bl	800028c <__adddf3>
 800ee98:	e9cd 0100 	strd	r0, r1, [sp]
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4640      	mov	r0, r8
 800eea2:	4649      	mov	r1, r9
 800eea4:	f7f1 f9f0 	bl	8000288 <__aeabi_dsub>
 800eea8:	4632      	mov	r2, r6
 800eeaa:	463b      	mov	r3, r7
 800eeac:	f7f1 f9ee 	bl	800028c <__adddf3>
 800eeb0:	ed9d 7b00 	vldr	d7, [sp]
 800eeb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eeb8:	ed84 7b00 	vstr	d7, [r4]
 800eebc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eec0:	e757      	b.n	800ed72 <__kernel_rem_pio2+0x51a>
 800eec2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eec6:	f7f1 f9e1 	bl	800028c <__adddf3>
 800eeca:	3d01      	subs	r5, #1
 800eecc:	e75c      	b.n	800ed88 <__kernel_rem_pio2+0x530>
 800eece:	9b04      	ldr	r3, [sp, #16]
 800eed0:	9a04      	ldr	r2, [sp, #16]
 800eed2:	601f      	str	r7, [r3, #0]
 800eed4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800eed8:	605c      	str	r4, [r3, #4]
 800eeda:	609d      	str	r5, [r3, #8]
 800eedc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eee0:	60d3      	str	r3, [r2, #12]
 800eee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eee6:	6110      	str	r0, [r2, #16]
 800eee8:	6153      	str	r3, [r2, #20]
 800eeea:	e727      	b.n	800ed3c <__kernel_rem_pio2+0x4e4>
 800eeec:	41700000 	.word	0x41700000
 800eef0:	3e700000 	.word	0x3e700000
 800eef4:	00000000 	.word	0x00000000

0800eef8 <__kernel_cos>:
 800eef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	ec57 6b10 	vmov	r6, r7, d0
 800ef00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ef04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ef08:	ed8d 1b00 	vstr	d1, [sp]
 800ef0c:	da07      	bge.n	800ef1e <__kernel_cos+0x26>
 800ef0e:	ee10 0a10 	vmov	r0, s0
 800ef12:	4639      	mov	r1, r7
 800ef14:	f7f1 fe20 	bl	8000b58 <__aeabi_d2iz>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	f000 8088 	beq.w	800f02e <__kernel_cos+0x136>
 800ef1e:	4632      	mov	r2, r6
 800ef20:	463b      	mov	r3, r7
 800ef22:	4630      	mov	r0, r6
 800ef24:	4639      	mov	r1, r7
 800ef26:	f7f1 fb67 	bl	80005f8 <__aeabi_dmul>
 800ef2a:	4b51      	ldr	r3, [pc, #324]	; (800f070 <__kernel_cos+0x178>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	4604      	mov	r4, r0
 800ef30:	460d      	mov	r5, r1
 800ef32:	f7f1 fb61 	bl	80005f8 <__aeabi_dmul>
 800ef36:	a340      	add	r3, pc, #256	; (adr r3, 800f038 <__kernel_cos+0x140>)
 800ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3c:	4682      	mov	sl, r0
 800ef3e:	468b      	mov	fp, r1
 800ef40:	4620      	mov	r0, r4
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7f1 fb58 	bl	80005f8 <__aeabi_dmul>
 800ef48:	a33d      	add	r3, pc, #244	; (adr r3, 800f040 <__kernel_cos+0x148>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f99d 	bl	800028c <__adddf3>
 800ef52:	4622      	mov	r2, r4
 800ef54:	462b      	mov	r3, r5
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	a33b      	add	r3, pc, #236	; (adr r3, 800f048 <__kernel_cos+0x150>)
 800ef5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef60:	f7f1 f992 	bl	8000288 <__aeabi_dsub>
 800ef64:	4622      	mov	r2, r4
 800ef66:	462b      	mov	r3, r5
 800ef68:	f7f1 fb46 	bl	80005f8 <__aeabi_dmul>
 800ef6c:	a338      	add	r3, pc, #224	; (adr r3, 800f050 <__kernel_cos+0x158>)
 800ef6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef72:	f7f1 f98b 	bl	800028c <__adddf3>
 800ef76:	4622      	mov	r2, r4
 800ef78:	462b      	mov	r3, r5
 800ef7a:	f7f1 fb3d 	bl	80005f8 <__aeabi_dmul>
 800ef7e:	a336      	add	r3, pc, #216	; (adr r3, 800f058 <__kernel_cos+0x160>)
 800ef80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef84:	f7f1 f980 	bl	8000288 <__aeabi_dsub>
 800ef88:	4622      	mov	r2, r4
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	f7f1 fb34 	bl	80005f8 <__aeabi_dmul>
 800ef90:	a333      	add	r3, pc, #204	; (adr r3, 800f060 <__kernel_cos+0x168>)
 800ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef96:	f7f1 f979 	bl	800028c <__adddf3>
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	462b      	mov	r3, r5
 800ef9e:	f7f1 fb2b 	bl	80005f8 <__aeabi_dmul>
 800efa2:	4622      	mov	r2, r4
 800efa4:	462b      	mov	r3, r5
 800efa6:	f7f1 fb27 	bl	80005f8 <__aeabi_dmul>
 800efaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efae:	4604      	mov	r4, r0
 800efb0:	460d      	mov	r5, r1
 800efb2:	4630      	mov	r0, r6
 800efb4:	4639      	mov	r1, r7
 800efb6:	f7f1 fb1f 	bl	80005f8 <__aeabi_dmul>
 800efba:	460b      	mov	r3, r1
 800efbc:	4602      	mov	r2, r0
 800efbe:	4629      	mov	r1, r5
 800efc0:	4620      	mov	r0, r4
 800efc2:	f7f1 f961 	bl	8000288 <__aeabi_dsub>
 800efc6:	4b2b      	ldr	r3, [pc, #172]	; (800f074 <__kernel_cos+0x17c>)
 800efc8:	4598      	cmp	r8, r3
 800efca:	4606      	mov	r6, r0
 800efcc:	460f      	mov	r7, r1
 800efce:	dc10      	bgt.n	800eff2 <__kernel_cos+0xfa>
 800efd0:	4602      	mov	r2, r0
 800efd2:	460b      	mov	r3, r1
 800efd4:	4650      	mov	r0, sl
 800efd6:	4659      	mov	r1, fp
 800efd8:	f7f1 f956 	bl	8000288 <__aeabi_dsub>
 800efdc:	460b      	mov	r3, r1
 800efde:	4926      	ldr	r1, [pc, #152]	; (800f078 <__kernel_cos+0x180>)
 800efe0:	4602      	mov	r2, r0
 800efe2:	2000      	movs	r0, #0
 800efe4:	f7f1 f950 	bl	8000288 <__aeabi_dsub>
 800efe8:	ec41 0b10 	vmov	d0, r0, r1
 800efec:	b003      	add	sp, #12
 800efee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff2:	4b22      	ldr	r3, [pc, #136]	; (800f07c <__kernel_cos+0x184>)
 800eff4:	4920      	ldr	r1, [pc, #128]	; (800f078 <__kernel_cos+0x180>)
 800eff6:	4598      	cmp	r8, r3
 800eff8:	bfcc      	ite	gt
 800effa:	4d21      	ldrgt	r5, [pc, #132]	; (800f080 <__kernel_cos+0x188>)
 800effc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f000:	2400      	movs	r4, #0
 800f002:	4622      	mov	r2, r4
 800f004:	462b      	mov	r3, r5
 800f006:	2000      	movs	r0, #0
 800f008:	f7f1 f93e 	bl	8000288 <__aeabi_dsub>
 800f00c:	4622      	mov	r2, r4
 800f00e:	4680      	mov	r8, r0
 800f010:	4689      	mov	r9, r1
 800f012:	462b      	mov	r3, r5
 800f014:	4650      	mov	r0, sl
 800f016:	4659      	mov	r1, fp
 800f018:	f7f1 f936 	bl	8000288 <__aeabi_dsub>
 800f01c:	4632      	mov	r2, r6
 800f01e:	463b      	mov	r3, r7
 800f020:	f7f1 f932 	bl	8000288 <__aeabi_dsub>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4640      	mov	r0, r8
 800f02a:	4649      	mov	r1, r9
 800f02c:	e7da      	b.n	800efe4 <__kernel_cos+0xec>
 800f02e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f068 <__kernel_cos+0x170>
 800f032:	e7db      	b.n	800efec <__kernel_cos+0xf4>
 800f034:	f3af 8000 	nop.w
 800f038:	be8838d4 	.word	0xbe8838d4
 800f03c:	bda8fae9 	.word	0xbda8fae9
 800f040:	bdb4b1c4 	.word	0xbdb4b1c4
 800f044:	3e21ee9e 	.word	0x3e21ee9e
 800f048:	809c52ad 	.word	0x809c52ad
 800f04c:	3e927e4f 	.word	0x3e927e4f
 800f050:	19cb1590 	.word	0x19cb1590
 800f054:	3efa01a0 	.word	0x3efa01a0
 800f058:	16c15177 	.word	0x16c15177
 800f05c:	3f56c16c 	.word	0x3f56c16c
 800f060:	5555554c 	.word	0x5555554c
 800f064:	3fa55555 	.word	0x3fa55555
 800f068:	00000000 	.word	0x00000000
 800f06c:	3ff00000 	.word	0x3ff00000
 800f070:	3fe00000 	.word	0x3fe00000
 800f074:	3fd33332 	.word	0x3fd33332
 800f078:	3ff00000 	.word	0x3ff00000
 800f07c:	3fe90000 	.word	0x3fe90000
 800f080:	3fd20000 	.word	0x3fd20000
 800f084:	00000000 	.word	0x00000000

0800f088 <__kernel_sin>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	ed2d 8b04 	vpush	{d8-d9}
 800f090:	eeb0 8a41 	vmov.f32	s16, s2
 800f094:	eef0 8a61 	vmov.f32	s17, s3
 800f098:	ec55 4b10 	vmov	r4, r5, d0
 800f09c:	b083      	sub	sp, #12
 800f09e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f0a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f0a6:	9001      	str	r0, [sp, #4]
 800f0a8:	da06      	bge.n	800f0b8 <__kernel_sin+0x30>
 800f0aa:	ee10 0a10 	vmov	r0, s0
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f7f1 fd52 	bl	8000b58 <__aeabi_d2iz>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	d051      	beq.n	800f15c <__kernel_sin+0xd4>
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	462b      	mov	r3, r5
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4629      	mov	r1, r5
 800f0c0:	f7f1 fa9a 	bl	80005f8 <__aeabi_dmul>
 800f0c4:	4682      	mov	sl, r0
 800f0c6:	468b      	mov	fp, r1
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	a341      	add	r3, pc, #260	; (adr r3, 800f1dc <__kernel_sin+0x154>)
 800f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0da:	4680      	mov	r8, r0
 800f0dc:	4689      	mov	r9, r1
 800f0de:	4650      	mov	r0, sl
 800f0e0:	4659      	mov	r1, fp
 800f0e2:	f7f1 fa89 	bl	80005f8 <__aeabi_dmul>
 800f0e6:	a33f      	add	r3, pc, #252	; (adr r3, 800f1e4 <__kernel_sin+0x15c>)
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 f8cc 	bl	8000288 <__aeabi_dsub>
 800f0f0:	4652      	mov	r2, sl
 800f0f2:	465b      	mov	r3, fp
 800f0f4:	f7f1 fa80 	bl	80005f8 <__aeabi_dmul>
 800f0f8:	a33c      	add	r3, pc, #240	; (adr r3, 800f1ec <__kernel_sin+0x164>)
 800f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fe:	f7f1 f8c5 	bl	800028c <__adddf3>
 800f102:	4652      	mov	r2, sl
 800f104:	465b      	mov	r3, fp
 800f106:	f7f1 fa77 	bl	80005f8 <__aeabi_dmul>
 800f10a:	a33a      	add	r3, pc, #232	; (adr r3, 800f1f4 <__kernel_sin+0x16c>)
 800f10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f110:	f7f1 f8ba 	bl	8000288 <__aeabi_dsub>
 800f114:	4652      	mov	r2, sl
 800f116:	465b      	mov	r3, fp
 800f118:	f7f1 fa6e 	bl	80005f8 <__aeabi_dmul>
 800f11c:	a337      	add	r3, pc, #220	; (adr r3, 800f1fc <__kernel_sin+0x174>)
 800f11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f122:	f7f1 f8b3 	bl	800028c <__adddf3>
 800f126:	9b01      	ldr	r3, [sp, #4]
 800f128:	4606      	mov	r6, r0
 800f12a:	460f      	mov	r7, r1
 800f12c:	b9eb      	cbnz	r3, 800f16a <__kernel_sin+0xe2>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4650      	mov	r0, sl
 800f134:	4659      	mov	r1, fp
 800f136:	f7f1 fa5f 	bl	80005f8 <__aeabi_dmul>
 800f13a:	a325      	add	r3, pc, #148	; (adr r3, 800f1d0 <__kernel_sin+0x148>)
 800f13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f140:	f7f1 f8a2 	bl	8000288 <__aeabi_dsub>
 800f144:	4642      	mov	r2, r8
 800f146:	464b      	mov	r3, r9
 800f148:	f7f1 fa56 	bl	80005f8 <__aeabi_dmul>
 800f14c:	4602      	mov	r2, r0
 800f14e:	460b      	mov	r3, r1
 800f150:	4620      	mov	r0, r4
 800f152:	4629      	mov	r1, r5
 800f154:	f7f1 f89a 	bl	800028c <__adddf3>
 800f158:	4604      	mov	r4, r0
 800f15a:	460d      	mov	r5, r1
 800f15c:	ec45 4b10 	vmov	d0, r4, r5
 800f160:	b003      	add	sp, #12
 800f162:	ecbd 8b04 	vpop	{d8-d9}
 800f166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16a:	4b1b      	ldr	r3, [pc, #108]	; (800f1d8 <__kernel_sin+0x150>)
 800f16c:	ec51 0b18 	vmov	r0, r1, d8
 800f170:	2200      	movs	r2, #0
 800f172:	f7f1 fa41 	bl	80005f8 <__aeabi_dmul>
 800f176:	4632      	mov	r2, r6
 800f178:	ec41 0b19 	vmov	d9, r0, r1
 800f17c:	463b      	mov	r3, r7
 800f17e:	4640      	mov	r0, r8
 800f180:	4649      	mov	r1, r9
 800f182:	f7f1 fa39 	bl	80005f8 <__aeabi_dmul>
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	ec51 0b19 	vmov	r0, r1, d9
 800f18e:	f7f1 f87b 	bl	8000288 <__aeabi_dsub>
 800f192:	4652      	mov	r2, sl
 800f194:	465b      	mov	r3, fp
 800f196:	f7f1 fa2f 	bl	80005f8 <__aeabi_dmul>
 800f19a:	ec53 2b18 	vmov	r2, r3, d8
 800f19e:	f7f1 f873 	bl	8000288 <__aeabi_dsub>
 800f1a2:	a30b      	add	r3, pc, #44	; (adr r3, 800f1d0 <__kernel_sin+0x148>)
 800f1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	460f      	mov	r7, r1
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	f7f1 fa22 	bl	80005f8 <__aeabi_dmul>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	4639      	mov	r1, r7
 800f1bc:	f7f1 f866 	bl	800028c <__adddf3>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	f7f1 f85e 	bl	8000288 <__aeabi_dsub>
 800f1cc:	e7c4      	b.n	800f158 <__kernel_sin+0xd0>
 800f1ce:	bf00      	nop
 800f1d0:	55555549 	.word	0x55555549
 800f1d4:	3fc55555 	.word	0x3fc55555
 800f1d8:	3fe00000 	.word	0x3fe00000
 800f1dc:	5acfd57c 	.word	0x5acfd57c
 800f1e0:	3de5d93a 	.word	0x3de5d93a
 800f1e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f1e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f1ec:	57b1fe7d 	.word	0x57b1fe7d
 800f1f0:	3ec71de3 	.word	0x3ec71de3
 800f1f4:	19c161d5 	.word	0x19c161d5
 800f1f8:	3f2a01a0 	.word	0x3f2a01a0
 800f1fc:	1110f8a6 	.word	0x1110f8a6
 800f200:	3f811111 	.word	0x3f811111

0800f204 <fabs>:
 800f204:	ec51 0b10 	vmov	r0, r1, d0
 800f208:	ee10 2a10 	vmov	r2, s0
 800f20c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f210:	ec43 2b10 	vmov	d0, r2, r3
 800f214:	4770      	bx	lr
	...

0800f218 <scalbn>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	ec55 4b10 	vmov	r4, r5, d0
 800f21e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f222:	4606      	mov	r6, r0
 800f224:	462b      	mov	r3, r5
 800f226:	b999      	cbnz	r1, 800f250 <scalbn+0x38>
 800f228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f22c:	4323      	orrs	r3, r4
 800f22e:	d03f      	beq.n	800f2b0 <scalbn+0x98>
 800f230:	4b35      	ldr	r3, [pc, #212]	; (800f308 <scalbn+0xf0>)
 800f232:	4629      	mov	r1, r5
 800f234:	ee10 0a10 	vmov	r0, s0
 800f238:	2200      	movs	r2, #0
 800f23a:	f7f1 f9dd 	bl	80005f8 <__aeabi_dmul>
 800f23e:	4b33      	ldr	r3, [pc, #204]	; (800f30c <scalbn+0xf4>)
 800f240:	429e      	cmp	r6, r3
 800f242:	4604      	mov	r4, r0
 800f244:	460d      	mov	r5, r1
 800f246:	da10      	bge.n	800f26a <scalbn+0x52>
 800f248:	a327      	add	r3, pc, #156	; (adr r3, 800f2e8 <scalbn+0xd0>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	e01f      	b.n	800f290 <scalbn+0x78>
 800f250:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f254:	4291      	cmp	r1, r2
 800f256:	d10c      	bne.n	800f272 <scalbn+0x5a>
 800f258:	ee10 2a10 	vmov	r2, s0
 800f25c:	4620      	mov	r0, r4
 800f25e:	4629      	mov	r1, r5
 800f260:	f7f1 f814 	bl	800028c <__adddf3>
 800f264:	4604      	mov	r4, r0
 800f266:	460d      	mov	r5, r1
 800f268:	e022      	b.n	800f2b0 <scalbn+0x98>
 800f26a:	460b      	mov	r3, r1
 800f26c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f270:	3936      	subs	r1, #54	; 0x36
 800f272:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f276:	4296      	cmp	r6, r2
 800f278:	dd0d      	ble.n	800f296 <scalbn+0x7e>
 800f27a:	2d00      	cmp	r5, #0
 800f27c:	a11c      	add	r1, pc, #112	; (adr r1, 800f2f0 <scalbn+0xd8>)
 800f27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f282:	da02      	bge.n	800f28a <scalbn+0x72>
 800f284:	a11c      	add	r1, pc, #112	; (adr r1, 800f2f8 <scalbn+0xe0>)
 800f286:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f28a:	a319      	add	r3, pc, #100	; (adr r3, 800f2f0 <scalbn+0xd8>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f7f1 f9b2 	bl	80005f8 <__aeabi_dmul>
 800f294:	e7e6      	b.n	800f264 <scalbn+0x4c>
 800f296:	1872      	adds	r2, r6, r1
 800f298:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f29c:	428a      	cmp	r2, r1
 800f29e:	dcec      	bgt.n	800f27a <scalbn+0x62>
 800f2a0:	2a00      	cmp	r2, #0
 800f2a2:	dd08      	ble.n	800f2b6 <scalbn+0x9e>
 800f2a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f2b0:	ec45 4b10 	vmov	d0, r4, r5
 800f2b4:	bd70      	pop	{r4, r5, r6, pc}
 800f2b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f2ba:	da08      	bge.n	800f2ce <scalbn+0xb6>
 800f2bc:	2d00      	cmp	r5, #0
 800f2be:	a10a      	add	r1, pc, #40	; (adr r1, 800f2e8 <scalbn+0xd0>)
 800f2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c4:	dac0      	bge.n	800f248 <scalbn+0x30>
 800f2c6:	a10e      	add	r1, pc, #56	; (adr r1, 800f300 <scalbn+0xe8>)
 800f2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2cc:	e7bc      	b.n	800f248 <scalbn+0x30>
 800f2ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2d2:	3236      	adds	r2, #54	; 0x36
 800f2d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f2dc:	4620      	mov	r0, r4
 800f2de:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <scalbn+0xf8>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	e7d5      	b.n	800f290 <scalbn+0x78>
 800f2e4:	f3af 8000 	nop.w
 800f2e8:	c2f8f359 	.word	0xc2f8f359
 800f2ec:	01a56e1f 	.word	0x01a56e1f
 800f2f0:	8800759c 	.word	0x8800759c
 800f2f4:	7e37e43c 	.word	0x7e37e43c
 800f2f8:	8800759c 	.word	0x8800759c
 800f2fc:	fe37e43c 	.word	0xfe37e43c
 800f300:	c2f8f359 	.word	0xc2f8f359
 800f304:	81a56e1f 	.word	0x81a56e1f
 800f308:	43500000 	.word	0x43500000
 800f30c:	ffff3cb0 	.word	0xffff3cb0
 800f310:	3c900000 	.word	0x3c900000
 800f314:	00000000 	.word	0x00000000

0800f318 <floor>:
 800f318:	ec51 0b10 	vmov	r0, r1, d0
 800f31c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f324:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f328:	2e13      	cmp	r6, #19
 800f32a:	ee10 5a10 	vmov	r5, s0
 800f32e:	ee10 8a10 	vmov	r8, s0
 800f332:	460c      	mov	r4, r1
 800f334:	dc31      	bgt.n	800f39a <floor+0x82>
 800f336:	2e00      	cmp	r6, #0
 800f338:	da14      	bge.n	800f364 <floor+0x4c>
 800f33a:	a333      	add	r3, pc, #204	; (adr r3, 800f408 <floor+0xf0>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	f7f0 ffa4 	bl	800028c <__adddf3>
 800f344:	2200      	movs	r2, #0
 800f346:	2300      	movs	r3, #0
 800f348:	f7f1 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800f34c:	b138      	cbz	r0, 800f35e <floor+0x46>
 800f34e:	2c00      	cmp	r4, #0
 800f350:	da53      	bge.n	800f3fa <floor+0xe2>
 800f352:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f356:	4325      	orrs	r5, r4
 800f358:	d052      	beq.n	800f400 <floor+0xe8>
 800f35a:	4c2d      	ldr	r4, [pc, #180]	; (800f410 <floor+0xf8>)
 800f35c:	2500      	movs	r5, #0
 800f35e:	4621      	mov	r1, r4
 800f360:	4628      	mov	r0, r5
 800f362:	e024      	b.n	800f3ae <floor+0x96>
 800f364:	4f2b      	ldr	r7, [pc, #172]	; (800f414 <floor+0xfc>)
 800f366:	4137      	asrs	r7, r6
 800f368:	ea01 0307 	and.w	r3, r1, r7
 800f36c:	4303      	orrs	r3, r0
 800f36e:	d01e      	beq.n	800f3ae <floor+0x96>
 800f370:	a325      	add	r3, pc, #148	; (adr r3, 800f408 <floor+0xf0>)
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f0 ff89 	bl	800028c <__adddf3>
 800f37a:	2200      	movs	r2, #0
 800f37c:	2300      	movs	r3, #0
 800f37e:	f7f1 fbcb 	bl	8000b18 <__aeabi_dcmpgt>
 800f382:	2800      	cmp	r0, #0
 800f384:	d0eb      	beq.n	800f35e <floor+0x46>
 800f386:	2c00      	cmp	r4, #0
 800f388:	bfbe      	ittt	lt
 800f38a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f38e:	4133      	asrlt	r3, r6
 800f390:	18e4      	addlt	r4, r4, r3
 800f392:	ea24 0407 	bic.w	r4, r4, r7
 800f396:	2500      	movs	r5, #0
 800f398:	e7e1      	b.n	800f35e <floor+0x46>
 800f39a:	2e33      	cmp	r6, #51	; 0x33
 800f39c:	dd0b      	ble.n	800f3b6 <floor+0x9e>
 800f39e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f3a2:	d104      	bne.n	800f3ae <floor+0x96>
 800f3a4:	ee10 2a10 	vmov	r2, s0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	f7f0 ff6f 	bl	800028c <__adddf3>
 800f3ae:	ec41 0b10 	vmov	d0, r0, r1
 800f3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f3ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f3be:	40df      	lsrs	r7, r3
 800f3c0:	4238      	tst	r0, r7
 800f3c2:	d0f4      	beq.n	800f3ae <floor+0x96>
 800f3c4:	a310      	add	r3, pc, #64	; (adr r3, 800f408 <floor+0xf0>)
 800f3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ca:	f7f0 ff5f 	bl	800028c <__adddf3>
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f7f1 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d0c1      	beq.n	800f35e <floor+0x46>
 800f3da:	2c00      	cmp	r4, #0
 800f3dc:	da0a      	bge.n	800f3f4 <floor+0xdc>
 800f3de:	2e14      	cmp	r6, #20
 800f3e0:	d101      	bne.n	800f3e6 <floor+0xce>
 800f3e2:	3401      	adds	r4, #1
 800f3e4:	e006      	b.n	800f3f4 <floor+0xdc>
 800f3e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	40b3      	lsls	r3, r6
 800f3ee:	441d      	add	r5, r3
 800f3f0:	45a8      	cmp	r8, r5
 800f3f2:	d8f6      	bhi.n	800f3e2 <floor+0xca>
 800f3f4:	ea25 0507 	bic.w	r5, r5, r7
 800f3f8:	e7b1      	b.n	800f35e <floor+0x46>
 800f3fa:	2500      	movs	r5, #0
 800f3fc:	462c      	mov	r4, r5
 800f3fe:	e7ae      	b.n	800f35e <floor+0x46>
 800f400:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f404:	e7ab      	b.n	800f35e <floor+0x46>
 800f406:	bf00      	nop
 800f408:	8800759c 	.word	0x8800759c
 800f40c:	7e37e43c 	.word	0x7e37e43c
 800f410:	bff00000 	.word	0xbff00000
 800f414:	000fffff 	.word	0x000fffff

0800f418 <_init>:
 800f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41a:	bf00      	nop
 800f41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f41e:	bc08      	pop	{r3}
 800f420:	469e      	mov	lr, r3
 800f422:	4770      	bx	lr

0800f424 <_fini>:
 800f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f426:	bf00      	nop
 800f428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f42a:	bc08      	pop	{r3}
 800f42c:	469e      	mov	lr, r3
 800f42e:	4770      	bx	lr
