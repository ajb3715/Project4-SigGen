
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  0800f978  0800f978  0001f978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010270  08010270  000305dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010270  08010270  00020270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010278  08010278  000305dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010278  08010278  00020278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801027c  0801027c  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  08010280  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  200005dc  0801085c  000305dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  0801085c  00034844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e016  00000000  00000000  0003064f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f9  00000000  00000000  0004e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00052760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001403  00000000  00000000  00054138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3fd  00000000  00000000  0005553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e163  00000000  00000000  0007f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001019be  00000000  00000000  0009da9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008520  00000000  00000000  0019f45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001a797c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005dc 	.word	0x200005dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f960 	.word	0x0800f960

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e0 	.word	0x200005e0
 80001cc:	0800f960 	.word	0x0800f960

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_noise>:
    1701, 1690, 1690, 1701, 1690, 1690, 1701, 1701, 1701, 1701, 1722, 1722, 1712, 1722, 1722, 1733,
    1733, 1733, 1733, 1712, 1712, 1712, 1733, 1733, 1733, 1733, 1733, 1733, 1744, 1744, 1744, 1744,
    1744, 1744, 1733, 1733, 1722, 1722, 1722, 1722, 1722, 1722, 1733, 1722, 1722, 1722, 1722, 1722,
    1701, 1669, 1669, 1680, 1690, 1690, 1690, 1701, 1701, 1712, 1712, 1712, 1690, 1669, 1669, 1680
};
uint16_t get_noise(int noise){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	switch(noise){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d83a      	bhi.n	8001074 <get_noise+0x84>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <get_noise+0x14>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	0800103d 	.word	0x0800103d
 800100c:	08001041 	.word	0x08001041
 8001010:	08001045 	.word	0x08001045
 8001014:	08001049 	.word	0x08001049
 8001018:	0800104d 	.word	0x0800104d
 800101c:	08001051 	.word	0x08001051
 8001020:	08001055 	.word	0x08001055
 8001024:	08001059 	.word	0x08001059
 8001028:	0800105d 	.word	0x0800105d
 800102c:	08001063 	.word	0x08001063
 8001030:	08001069 	.word	0x08001069
 8001034:	0800106f 	.word	0x0800106f
		case(0):
			return (uint16_t)0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	e01c      	b.n	8001076 <get_noise+0x86>
			break;
		case(1):
			return (uint16_t)0x01;
 800103c:	2301      	movs	r3, #1
 800103e:	e01a      	b.n	8001076 <get_noise+0x86>
			break;
		case(2):
			return (uint16_t)0x03;
 8001040:	2303      	movs	r3, #3
 8001042:	e018      	b.n	8001076 <get_noise+0x86>
			break;
		case(3):
			return (uint16_t)0x07;
 8001044:	2307      	movs	r3, #7
 8001046:	e016      	b.n	8001076 <get_noise+0x86>
			break;
		case(4):
			return (uint16_t)0x0F;
 8001048:	230f      	movs	r3, #15
 800104a:	e014      	b.n	8001076 <get_noise+0x86>
			break;
		case(5):
			return (uint16_t)0x1F;
 800104c:	231f      	movs	r3, #31
 800104e:	e012      	b.n	8001076 <get_noise+0x86>
			break;
		case(6):
			return (uint16_t)0x3F;
 8001050:	233f      	movs	r3, #63	; 0x3f
 8001052:	e010      	b.n	8001076 <get_noise+0x86>
			break;
		case(7):
			return (uint16_t)0x7F;
 8001054:	237f      	movs	r3, #127	; 0x7f
 8001056:	e00e      	b.n	8001076 <get_noise+0x86>
			break;
		case(8):
			return (uint16_t)0xFF;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	e00c      	b.n	8001076 <get_noise+0x86>
			break;
		case(9):
			return (uint16_t)0x1FF;
 800105c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001060:	e009      	b.n	8001076 <get_noise+0x86>
			break;
		case(10):
			return (uint16_t)0x3FF;
 8001062:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001066:	e006      	b.n	8001076 <get_noise+0x86>
			break;
		case(11):
			return (uint16_t)0x7FF;
 8001068:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800106c:	e003      	b.n	8001076 <get_noise+0x86>
			break;
		case(12):
			return (uint16_t)0xFFF;
 800106e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001072:	e000      	b.n	8001076 <get_noise+0x86>
			break;
		default:
			return (uint16_t) 0;
 8001074:	2300      	movs	r3, #0

	}

}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	0000      	movs	r0, r0
	...

08001088 <init_DC>:
void init_DC(float maxv, float minv, int noise, RNG_HandleTypeDef *hrng,int channel){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001092:	edc7 0a04 	vstr	s1, [r7, #16]
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ffa7 	bl	8000ff0 <get_noise>
 80010a2:	4603      	mov	r3, r0
 80010a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d13c      	bne.n	8001126 <init_DC+0x9e>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b0:	e033      	b.n	800111a <init_DC+0x92>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f004 f908 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010c4:	4013      	ands	r3, r2
 80010c6:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (minv*4096/3.3);
 80010c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b0 <init_DC+0x128>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	a332      	add	r3, pc, #200	; (adr r3, 80011a8 <init_DC+0x120>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <init_DC+0x12c>)
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		waveform[i] |= new_noise;
 8001100:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <init_DC+0x12c>)
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800110a:	431a      	orrs	r2, r3
 800110c:	4929      	ldr	r1, [pc, #164]	; (80011b4 <init_DC+0x12c>)
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	3301      	adds	r3, #1
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <init_DC+0x130>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	429a      	cmp	r2, r3
 8001122:	dbc6      	blt.n	80010b2 <init_DC+0x2a>
			waveform2[i] = (uint16_t) (minv*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}

}
 8001124:	e03b      	b.n	800119e <init_DC+0x116>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	e033      	b.n	8001194 <init_DC+0x10c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f004 f8cb 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	b29a      	uxth	r2, r3
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	4013      	ands	r3, r2
 8001140:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (minv*4096/3.3);
 8001142:	edd7 7a04 	vldr	s15, [r7, #16]
 8001146:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011b0 <init_DC+0x128>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	a314      	add	r3, pc, #80	; (adr r3, 80011a8 <init_DC+0x120>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fb76 	bl	800084c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <init_DC+0x134>)
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <init_DC+0x134>)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001184:	431a      	orrs	r2, r3
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <init_DC+0x134>)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <init_DC+0x130>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	429a      	cmp	r2, r3
 800119c:	dbc6      	blt.n	800112c <init_DC+0xa4>
}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	66666666 	.word	0x66666666
 80011ac:	400a6666 	.word	0x400a6666
 80011b0:	45800000 	.word	0x45800000
 80011b4:	200005f8 	.word	0x200005f8
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200009f8 	.word	0x200009f8

080011c0 <init_generator>:

void init_generator(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel) {
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff0b 	bl	8000ff0 <get_noise>
 80011da:	4603      	mov	r3, r0
 80011dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 8091 	bne.w	8001308 <init_generator+0x148>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ea:	e086      	b.n	80012fa <init_generator+0x13a>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f004 f86b 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fe:	4013      	ands	r3, r2
 8001200:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	a38b      	add	r3, pc, #556	; (adr r3, 8001438 <init_generator+0x278>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9f3 	bl	80005f8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <init_generator+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b17 	vmov	d7, r2, r3
 800123a:	eeb0 0a47 	vmov.f32	s0, s14
 800123e:	eef0 0a67 	vmov.f32	s1, s15
 8001242:	f00d fb05 	bl	800e850 <sin>
 8001246:	ec55 4b10 	vmov	r4, r5, d0
 800124a:	ed97 7a05 	vldr	s14, [r7, #20]
 800124e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800125a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125e:	ee16 0a90 	vmov	r0, s13
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4614      	mov	r4, r2
 8001278:	461d      	mov	r5, r3
 800127a:	ed97 7a05 	vldr	s14, [r7, #20]
 800127e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800128a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800128e:	ee16 0a90 	vmov	r0, s13
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff5 	bl	800028c <__adddf3>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <init_generator+0x284>)
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	a35c      	add	r3, pc, #368	; (adr r3, 8001430 <init_generator+0x270>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fac3 	bl	800084c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <init_generator+0x288>)
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//waveform[i] = round(((sin(i*2*M_PI / 256) + 1)*((4096 / 3.3*(maxv - minv)) / 2)) + 4096 / 3.3 * minv);
		waveform[i] |= new_noise;
 80012e0:	4a59      	ldr	r2, [pc, #356]	; (8001448 <init_generator+0x288>)
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ea:	431a      	orrs	r2, r3
 80012ec:	4956      	ldr	r1, [pc, #344]	; (8001448 <init_generator+0x288>)
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	3301      	adds	r3, #1
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <init_generator+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	f6ff af73 	blt.w	80011ec <init_generator+0x2c>
			uint16_t new_noise = (uint16_t)(random & bits);
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}
}
 8001306:	e08f      	b.n	8001428 <init_generator+0x268>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
 800130c:	e086      	b.n	800141c <init_generator+0x25c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f003 ffda 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	b29a      	uxth	r2, r3
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	4013      	ands	r3, r2
 8001322:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	a343      	add	r3, pc, #268	; (adr r3, 8001438 <init_generator+0x278>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <init_generator+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8ee 	bl	8000524 <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f00d fa74 	bl	800e850 <sin>
 8001368:	ec55 4b10 	vmov	r4, r5, d0
 800136c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001370:	edd7 7a04 	vldr	s15, [r7, #16]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800137c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001380:	ee16 0a90 	vmov	r0, s13
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f932 	bl	80005f8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	ed97 7a05 	vldr	s14, [r7, #20]
 80013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b0:	ee16 0a90 	vmov	r0, s13
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7fe ff64 	bl	800028c <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <init_generator+0x284>)
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a314      	add	r3, pc, #80	; (adr r3, 8001430 <init_generator+0x270>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <init_generator+0x28c>)
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <init_generator+0x28c>)
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	431a      	orrs	r2, r3
 800140e:	490f      	ldr	r1, [pc, #60]	; (800144c <init_generator+0x28c>)
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	3301      	adds	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <init_generator+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001422:	429a      	cmp	r2, r3
 8001424:	f6ff af73 	blt.w	800130e <init_generator+0x14e>
}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	66666666 	.word	0x66666666
 8001434:	400a6666 	.word	0x400a6666
 8001438:	54442d18 	.word	0x54442d18
 800143c:	401921fb 	.word	0x401921fb
 8001440:	20000000 	.word	0x20000000
 8001444:	40b00000 	.word	0x40b00000
 8001448:	200005f8 	.word	0x200005f8
 800144c:	200009f8 	.word	0x200009f8

08001450 <init_triangle>:

void init_triangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel){
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a05 	vstr	s0, [r7, #20]
 800145a:	edc7 0a04 	vstr	s1, [r7, #16]
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fdc3 	bl	8000ff0 <get_noise>
 800146a:	4603      	mov	r3, r0
 800146c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 809a 	bne.w	80015aa <init_triangle+0x15a>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147a:	e08f      	b.n	800159c <init_triangle+0x14c>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f003 ff23 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	b29a      	uxth	r2, r3
 800148c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148e:	4013      	ands	r3, r2
 8001490:	847b      	strh	r3, [r7, #34]	; 0x22
        if(i < NUM_SAMPLES/2){
 8001492:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <init_triangle+0x2a0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	461a      	mov	r2, r3
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	4293      	cmp	r3, r2
 80014a2:	da35      	bge.n	8001510 <init_triangle+0xc0>
        	waveform[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b0:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <init_triangle+0x2a0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80016f4 <init_triangle+0x2a4>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	ee17 0a90 	vmov	r0, s15
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	a37f      	add	r3, pc, #508	; (adr r3, 80016e8 <init_triangle+0x298>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb54 	bl	8000ba8 <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	b29b      	uxth	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <init_triangle+0x2a8>)
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800150e:	e038      	b.n	8001582 <init_triangle+0x132>
        }else{
        	waveform[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <init_triangle+0x2a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001524:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <init_triangle+0x2a0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001536:	edd7 6a05 	vldr	s13, [r7, #20]
 800153a:	edd7 7a04 	vldr	s15, [r7, #16]
 800153e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80016f4 <init_triangle+0x2a4>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	a362      	add	r3, pc, #392	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f972 	bl	800084c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001574:	4603      	mov	r3, r0
 8001576:	b29b      	uxth	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <init_triangle+0x2a8>)
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    	waveform[i] |= noise;
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <init_triangle+0x2a8>)
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800158a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800158c:	431a      	orrs	r2, r3
 800158e:	495a      	ldr	r1, [pc, #360]	; (80016f8 <init_triangle+0x2a8>)
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <init_triangle+0x2a0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f6ff af6a 	blt.w	800147c <init_triangle+0x2c>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
	        }
	    	waveform2[i] |= noise;
	    }
	}
}
 80015a8:	e098      	b.n	80016dc <init_triangle+0x28c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	e08f      	b.n	80016d0 <init_triangle+0x280>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f003 fe89 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c2:	4013      	ands	r3, r2
 80015c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	        if(i < NUM_SAMPLES/2){
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <init_triangle+0x2a0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0fda      	lsrs	r2, r3, #31
 80015cc:	4413      	add	r3, r2
 80015ce:	105b      	asrs	r3, r3, #1
 80015d0:	461a      	mov	r2, r3
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	4293      	cmp	r3, r2
 80015d6:	da35      	bge.n	8001644 <init_triangle+0x1f4>
	        	waveform2[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <init_triangle+0x2a0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80015fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	edd7 7a04 	vldr	s15, [r7, #16]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80016f4 <init_triangle+0x2a4>
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	a332      	add	r3, pc, #200	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f912 	bl	800084c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff faba 	bl	8000ba8 <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29b      	uxth	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	4a30      	ldr	r2, [pc, #192]	; (80016fc <init_triangle+0x2ac>)
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001642:	e038      	b.n	80016b6 <init_triangle+0x266>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <init_triangle+0x2a0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <init_triangle+0x2a0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800166a:	edd7 6a05 	vldr	s13, [r7, #20]
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016f4 <init_triangle+0x2a4>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	a315      	add	r3, pc, #84	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8d8 	bl	800084c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa80 	bl	8000ba8 <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <init_triangle+0x2ac>)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <init_triangle+0x2ac>)
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c0:	431a      	orrs	r2, r3
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <init_triangle+0x2ac>)
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	3301      	adds	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <init_triangle+0x2a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f6ff af6a 	blt.w	80015b0 <init_triangle+0x160>
}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	66666666 	.word	0x66666666
 80016ec:	400a6666 	.word	0x400a6666
 80016f0:	20000000 	.word	0x20000000
 80016f4:	45800000 	.word	0x45800000
 80016f8:	200005f8 	.word	0x200005f8
 80016fc:	200009f8 	.word	0x200009f8

08001700 <init_rectangle>:


void init_rectangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng,int channel){
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	ed87 0a05 	vstr	s0, [r7, #20]
 800170a:	edc7 0a04 	vstr	s1, [r7, #16]
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fc6b 	bl	8000ff0 <get_noise>
 800171a:	4603      	mov	r3, r0
 800171c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d148      	bne.n	80017b6 <init_rectangle+0xb6>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e03f      	b.n	80017aa <init_rectangle+0xaa>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f003 fdcc 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b29a      	uxth	r2, r3
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	4013      	ands	r3, r2
 800173e:	847b      	strh	r3, [r7, #34]	; 0x22
    	waveform[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <init_rectangle+0x158>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0fda      	lsrs	r2, r3, #31
 8001746:	4413      	add	r3, r2
 8001748:	105b      	asrs	r3, r3, #1
 800174a:	461a      	mov	r2, r3
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	4293      	cmp	r3, r2
 8001750:	da02      	bge.n	8001758 <init_rectangle+0x58>
 8001752:	edd7 7a04 	vldr	s15, [r7, #16]
 8001756:	e001      	b.n	800175c <init_rectangle+0x5c>
 8001758:	edd7 7a05 	vldr	s15, [r7, #20]
 800175c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800185c <init_rectangle+0x15c>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	a338      	add	r3, pc, #224	; (adr r3, 8001850 <init_rectangle+0x150>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f86b 	bl	800084c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	4a35      	ldr	r2, [pc, #212]	; (8001860 <init_rectangle+0x160>)
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	waveform[i] |= noise;
 8001790:	4a33      	ldr	r2, [pc, #204]	; (8001860 <init_rectangle+0x160>)
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179a:	431a      	orrs	r2, r3
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <init_rectangle+0x160>)
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	3301      	adds	r3, #1
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <init_rectangle+0x158>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbba      	blt.n	800172a <init_rectangle+0x2a>
			uint16_t noise = (uint16_t)(random & bits);
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
	    	waveform2[i] |= noise;
	    }
	}
}
 80017b4:	e047      	b.n	8001846 <init_rectangle+0x146>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ba:	e03f      	b.n	800183c <init_rectangle+0x13c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f003 fd83 	bl	80052ce <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ce:	4013      	ands	r3, r2
 80017d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <init_rectangle+0x158>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	4413      	add	r3, r2
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	461a      	mov	r2, r3
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	4293      	cmp	r3, r2
 80017e2:	da02      	bge.n	80017ea <init_rectangle+0xea>
 80017e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e8:	e001      	b.n	80017ee <init_rectangle+0xee>
 80017ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800185c <init_rectangle+0x15c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	a314      	add	r3, pc, #80	; (adr r3, 8001850 <init_rectangle+0x150>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f822 	bl	800084c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9ca 	bl	8000ba8 <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <init_rectangle+0x164>)
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <init_rectangle+0x164>)
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800182c:	431a      	orrs	r2, r3
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <init_rectangle+0x164>)
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	3301      	adds	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <init_rectangle+0x158>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	429a      	cmp	r2, r3
 8001844:	dbba      	blt.n	80017bc <init_rectangle+0xbc>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	66666666 	.word	0x66666666
 8001854:	400a6666 	.word	0x400a6666
 8001858:	20000000 	.word	0x20000000
 800185c:	45800000 	.word	0x45800000
 8001860:	200005f8 	.word	0x200005f8
 8001864:	200009f8 	.word	0x200009f8

08001868 <init_ekg>:

void init_ekg(int channel){
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(channel == 1){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d113      	bne.n	800189e <init_ekg+0x36>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e00a      	b.n	8001892 <init_ekg+0x2a>
			waveform[i] = ekg[i];
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <init_ekg+0x68>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <init_ekg+0x6c>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <init_ekg+0x70>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbef      	blt.n	800187c <init_ekg+0x14>
	else{
	    for(int i = 0; i < NUM_SAMPLES; i++){
	        waveform2[i] = ekg[i];
	    }
	}
}
 800189c:	e012      	b.n	80018c4 <init_ekg+0x5c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	e00a      	b.n	80018ba <init_ekg+0x52>
	        waveform2[i] = ekg[i];
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <init_ekg+0x68>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <init_ekg+0x74>)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <init_ekg+0x70>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbef      	blt.n	80018a4 <init_ekg+0x3c>
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200005f8 	.word	0x200005f8
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200009f8 	.word	0x200009f8

080018e0 <sig_gen>:

void sig_gen(struct user_command *cmd, RNG_HandleTypeDef *hrng,DAC_HandleTypeDef *dac ){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	//Process user input
	if(cmd->channel == 1){
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <sig_gen+0x1e>
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fb7e 	bl	8002ff8 <HAL_DAC_Stop_DMA>
 80018fc:	e003      	b.n	8001906 <sig_gen+0x26>
	}
	else{
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_2);
 80018fe:	2110      	movs	r1, #16
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 fb79 	bl	8002ff8 <HAL_DAC_Stop_DMA>
	}
	switch(cmd->wave){
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	3b41      	subs	r3, #65	; 0x41
 800190c:	2b13      	cmp	r3, #19
 800190e:	f200 8085 	bhi.w	8001a1c <sig_gen+0x13c>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <sig_gen+0x38>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001a11 	.word	0x08001a11
 800191c:	08001a1d 	.word	0x08001a1d
 8001920:	08001a1d 	.word	0x08001a1d
 8001924:	08001a1d 	.word	0x08001a1d
 8001928:	08001a1d 	.word	0x08001a1d
 800192c:	08001a1d 	.word	0x08001a1d
 8001930:	08001a1d 	.word	0x08001a1d
 8001934:	08001a1d 	.word	0x08001a1d
 8001938:	08001a1d 	.word	0x08001a1d
 800193c:	08001a1d 	.word	0x08001a1d
 8001940:	08001a1d 	.word	0x08001a1d
 8001944:	08001a1d 	.word	0x08001a1d
 8001948:	08001a1d 	.word	0x08001a1d
 800194c:	08001a1d 	.word	0x08001a1d
 8001950:	08001a1d 	.word	0x08001a1d
 8001954:	08001a1d 	.word	0x08001a1d
 8001958:	08001a1d 	.word	0x08001a1d
 800195c:	08001969 	.word	0x08001969
 8001960:	0800198f 	.word	0x0800198f
 8001964:	080019eb 	.word	0x080019eb
	case('R'):
		//Change to Rectangle wave
		init_rectangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a03 	vldr	s15, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a02 	vldr	s14, [r3, #8]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6918      	ldr	r0, [r3, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	eef0 0a47 	vmov.f32	s1, s14
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	f7ff feba 	bl	8001700 <init_rectangle>
		break;
 800198c:	e047      	b.n	8001a1e <sig_gen+0x13e>
	case('S'):
		// Change to Sine wave

		if(cmd->frequency != 0.0){
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	edd3 7a01 	vldr	s15, [r3, #4]
 8001994:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d012      	beq.n	80019c4 <sig_gen+0xe4>
			init_generator(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	eef0 0a47 	vmov.f32	s1, s14
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff fbff 	bl	80011c0 <init_generator>
		}
		else{
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
		}
		break;
 80019c2:	e02c      	b.n	8001a1e <sig_gen+0x13e>
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6918      	ldr	r0, [r3, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	eef0 0a47 	vmov.f32	s1, s14
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	f7ff fb50 	bl	8001088 <init_DC>
		break;
 80019e8:	e019      	b.n	8001a1e <sig_gen+0x13e>
	case('T'):
		//Change to Triangle
		init_triangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6918      	ldr	r0, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	eef0 0a47 	vmov.f32	s1, s14
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	f7ff fd21 	bl	8001450 <init_triangle>
		break;
 8001a0e:	e006      	b.n	8001a1e <sig_gen+0x13e>
	case('A'):
		//Change to ekg
		init_ekg(cmd->channel);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff27 	bl	8001868 <init_ekg>
		break;
 8001a1a:	e000      	b.n	8001a1e <sig_gen+0x13e>
	default:
		break;
 8001a1c:	bf00      	nop
	}

	if(cmd->channel == 1){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d137      	bne.n	8001a96 <sig_gen+0x1b6>
		TIM2->ARR = round(80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <sig_gen+0x220>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	a12b      	add	r1, pc, #172	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a4e:	f7fe fefd 	bl	800084c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f00c ff4d 	bl	800e900 <round>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f899 	bl	8000ba8 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->EGR = TIM_EGR_UG;
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_1, (uint32_t*)waveform, SAMPLES, DAC_ALIGN_12B_R);
 8001a82:	2300      	movs	r3, #0
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <sig_gen+0x224>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 f9e6 	bl	8002e60 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
	}



}
 8001a94:	e02a      	b.n	8001aec <sig_gen+0x20c>
		TIM5->ARR = (80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <sig_gen+0x220>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	a10f      	add	r1, pc, #60	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001abe:	f7fe fec5 	bl	800084c <__aeabi_ddiv>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4c10      	ldr	r4, [pc, #64]	; (8001b08 <sig_gen+0x228>)
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f86c 	bl	8000ba8 <__aeabi_d2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM5->EGR = TIM_EGR_UG;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <sig_gen+0x228>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <sig_gen+0x22c>)
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f001 f9ba 	bl	8002e60 <HAL_DAC_Start_DMA>
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	419312d0 	.word	0x419312d0
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200005f8 	.word	0x200005f8
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	200009f8 	.word	0x200009f8

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	command = (struct user_command *)malloc(sizeof(struct user_command));
 8001b14:	2018      	movs	r0, #24
 8001b16:	f008 f9f3 	bl	8009f00 <malloc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <main+0xcc>)
 8001b20:	601a      	str	r2, [r3, #0]
		if(command == NULL){
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <main+0xcc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <main+0x20>
			exit(99);
 8001b2a:	2063      	movs	r0, #99	; 0x63
 8001b2c:	f008 f9d6 	bl	8009edc <exit>
		}
		command->channel = 0;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <main+0xcc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		command->frequency = 0.0;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <main+0xcc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
		command->maxv = 0.0;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <main+0xcc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
		command->minv = 0.0;
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <main+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
		command->noise = 0;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <main+0xcc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
		command->wave = 'n';
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <main+0xcc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	226e      	movs	r2, #110	; 0x6e
 8001b64:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f000 ffae 	bl	8002ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f851 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 f9e5 	bl	8001f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f000 f9bd 	bl	8001ef0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001b76:	f000 f89d 	bl	8001cb4 <MX_DAC1_Init>
  MX_RNG_Init();
 8001b7a:	f000 f8d9 	bl	8001d30 <MX_RNG_Init>
  MX_TIM2_Init();
 8001b7e:	f000 f8eb 	bl	8001d58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b82:	f000 f985 	bl	8001e90 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001b86:	f000 f935 	bl	8001df4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <main+0xd0>)
 8001b8c:	f003 fc4c 	bl	8005428 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <main+0xd4>)
 8001b92:	f003 fc49 	bl	8005428 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b96:	f004 fdd9 	bl	800674c <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001b9a:	4813      	ldr	r0, [pc, #76]	; (8001be8 <main+0xd8>)
 8001b9c:	f004 fed4 	bl	8006948 <osMutexNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <main+0xdc>)
 8001ba4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (32, sizeof(uint64_t), &CommandQueue_attributes);
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <main+0xe0>)
 8001ba8:	2108      	movs	r1, #8
 8001baa:	2020      	movs	r0, #32
 8001bac:	f004 ffda 	bl	8006b64 <osMessageQueueNew>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <main+0xe4>)
 8001bb4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Recieve */
  RecieveHandle = osThreadNew(StartRecieve, NULL, &Recieve_attributes);
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <main+0xe8>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <main+0xec>)
 8001bbc:	f004 fe10 	bl	80067e0 <osThreadNew>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <main+0xf0>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* creation of Process */
  ProcessHandle = osThreadNew(StartProcess, NULL, &Process_attributes);
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <main+0xf4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <main+0xf8>)
 8001bcc:	f004 fe08 	bl	80067e0 <osThreadNew>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <main+0xfc>)
 8001bd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bd6:	f004 fddd 	bl	8006794 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <main+0xca>
 8001bdc:	20000fdc 	.word	0x20000fdc
 8001be0:	20000eac 	.word	0x20000eac
 8001be4:	20000ef8 	.word	0x20000ef8
 8001be8:	0800fbbc 	.word	0x0800fbbc
 8001bec:	20000fd8 	.word	0x20000fd8
 8001bf0:	0800fba4 	.word	0x0800fba4
 8001bf4:	20000fd4 	.word	0x20000fd4
 8001bf8:	0800fb5c 	.word	0x0800fb5c
 8001bfc:	08001f71 	.word	0x08001f71
 8001c00:	20000fcc 	.word	0x20000fcc
 8001c04:	0800fb80 	.word	0x0800fb80
 8001c08:	0800245d 	.word	0x0800245d
 8001c0c:	20000fd0 	.word	0x20000fd0

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b096      	sub	sp, #88	; 0x58
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00a f871 	bl	800bd06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c36:	f001 ffe1 	bl	8003bfc <HAL_PWREx_ControlVoltageScaling>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c40:	f000 fc6c 	bl	800251c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c44:	2310      	movs	r3, #16
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c54:	2302      	movs	r3, #2
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c60:	2328      	movs	r3, #40	; 0x28
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c64:	2307      	movs	r3, #7
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f817 	bl	8003ca8 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c80:	f000 fc4c 	bl	800251c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fbdf 	bl	8004460 <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ca8:	f000 fc38 	bl	800251c <Error_Handler>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3758      	adds	r7, #88	; 0x58
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2224      	movs	r2, #36	; 0x24
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00a f820 	bl	800bd06 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <MX_DAC1_Init+0x78>)
 8001cca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cce:	f001 f8a4 	bl	8002e1a <HAL_DAC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cd8:	f000 fc20 	bl	800251c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ce0:	2324      	movs	r3, #36	; 0x24
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cf8:	f001 f9e1 	bl	80030be <HAL_DAC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fc0b 	bl	800251c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001d06:	231c      	movs	r3, #28
 8001d08:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001d12:	f001 f9d4 	bl	80030be <HAL_DAC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001d1c:	f000 fbfe 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000df8 	.word	0x20000df8
 8001d2c:	40007400 	.word	0x40007400

08001d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MX_RNG_Init+0x24>)
 8001d38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d3c:	f003 fa70 	bl	8005220 <HAL_RNG_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d46:	f000 fbe9 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000e9c 	.word	0x20000e9c
 8001d54:	50060800 	.word	0x50060800

08001d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001da0:	f003 faeb 	bl	800537a <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001daa:	f000 fbb7 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dbc:	f003 fb9c 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f000 fba9 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 fd8c 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f000 fb9b 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000eac 	.word	0x20000eac

08001df4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_TIM5_Init+0x98>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e3a:	f003 fa9e 	bl	800537a <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001e44:	f000 fb6a 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e56:	f003 fb4f 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e60:	f000 fb5c 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e64:	2320      	movs	r3, #32
 8001e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e72:	f003 fd3f 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 fb4e 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000ef8 	.word	0x20000ef8
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_USART2_UART_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ed4:	f003 fd96 	bl	8005a04 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ede:	f000 fb1d 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000f44 	.word	0x20000f44
 8001eec:	40004400 	.word	0x40004400

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_DMA_Init+0x48>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <MX_DMA_Init+0x48>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6493      	str	r3, [r2, #72]	; 0x48
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_DMA_Init+0x48>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	200d      	movs	r0, #13
 8001f14:	f000 ff4b 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f18:	200d      	movs	r0, #13
 8001f1a:	f000 ff64 	bl	8002de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2105      	movs	r1, #5
 8001f22:	200e      	movs	r0, #14
 8001f24:	f000 ff43 	bl	8002dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f28:	200e      	movs	r0, #14
 8001f2a:	f000 ff5c 	bl	8002de6 <HAL_NVIC_EnableIRQ>

}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <StartRecieve>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRecieve */
void StartRecieve(void *argument)
{
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b0e5      	sub	sp, #404	; 0x194
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f7e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f92:	4bbf      	ldr	r3, [pc, #764]	; (8002290 <StartRecieve+0x320>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fd5a 	bl	8006a54 <osMutexAcquire>
	  	uint8_t c = 0;
 8001fa0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fa4:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 8001fac:	f107 010b 	add.w	r1, r7, #11
 8001fb0:	2364      	movs	r3, #100	; 0x64
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	48b7      	ldr	r0, [pc, #732]	; (8002294 <StartRecieve+0x324>)
 8001fb6:	f003 fdfd 	bl	8005bb4 <HAL_UART_Receive>

	  	if ((char)c == '\r'){
 8001fba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fbe:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b0d      	cmp	r3, #13
 8001fc6:	f040 81e0 	bne.w	800238a <StartRecieve+0x41a>
//	  		if enter is pressed, process command to see if valid
	  		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8001fca:	2364      	movs	r3, #100	; 0x64
 8001fcc:	2202      	movs	r2, #2
 8001fce:	49b2      	ldr	r1, [pc, #712]	; (8002298 <StartRecieve+0x328>)
 8001fd0:	48b0      	ldr	r0, [pc, #704]	; (8002294 <StartRecieve+0x324>)
 8001fd2:	f003 fd65 	bl	8005aa0 <HAL_UART_Transmit>
	  		command_buffer[i] = '\r';
 8001fd6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001fda:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fde:	4413      	add	r3, r2
 8001fe0:	220d      	movs	r2, #13
 8001fe2:	701a      	strb	r2, [r3, #0]
	  		command_buffer[i+1] = '\n';
 8001fe4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001fee:	443b      	add	r3, r7
 8001ff0:	220a      	movs	r2, #10
 8001ff2:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		command_buffer[i+2] = '\0';
 8001ff6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002000:	443b      	add	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		print_size = sprintf(print_buffer, command_buffer);
 8002008:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800200c:	f107 030c 	add.w	r3, r7, #12
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f009 fe14 	bl	800bc40 <siprintf>
 8002018:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
 800201c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002020:	b29a      	uxth	r2, r3
 8002022:	f107 010c 	add.w	r1, r7, #12
 8002026:	2364      	movs	r3, #100	; 0x64
 8002028:	489a      	ldr	r0, [pc, #616]	; (8002294 <StartRecieve+0x324>)
 800202a:	f003 fd39 	bl	8005aa0 <HAL_UART_Transmit>
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 800202e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002032:	499a      	ldr	r1, [pc, #616]	; (800229c <StartRecieve+0x32c>)
 8002034:	4618      	mov	r0, r3
 8002036:	f009 fe81 	bl	800bd3c <strtok>
 800203a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 8002044:	2301      	movs	r3, #1
 8002046:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 800204a:	4994      	ldr	r1, [pc, #592]	; (800229c <StartRecieve+0x32c>)
 800204c:	2000      	movs	r0, #0
 800204e:	f009 fe75 	bl	800bd3c <strtok>
 8002052:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 8002056:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800205a:	f007 ff3a 	bl	8009ed2 <atoi>
 800205e:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 8002062:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002066:	2b02      	cmp	r3, #2
 8002068:	dc03      	bgt.n	8002072 <StartRecieve+0x102>
 800206a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800206e:	2b00      	cmp	r3, #0
 8002070:	dc13      	bgt.n	800209a <StartRecieve+0x12a>
	  			valid_entry = 0;														// if not make command invalid
 8002072:	2300      	movs	r3, #0
 8002074:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4988      	ldr	r1, [pc, #544]	; (80022a0 <StartRecieve+0x330>)
 800207e:	4618      	mov	r0, r3
 8002080:	f009 fdde 	bl	800bc40 <siprintf>
 8002084:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002088:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800208c:	b29a      	uxth	r2, r3
 800208e:	f107 010c 	add.w	r1, r7, #12
 8002092:	2364      	movs	r3, #100	; 0x64
 8002094:	487f      	ldr	r0, [pc, #508]	; (8002294 <StartRecieve+0x324>)
 8002096:	f003 fd03 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 800209a:	4b82      	ldr	r3, [pc, #520]	; (80022a4 <StartRecieve+0x334>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020a2:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 80020a4:	497d      	ldr	r1, [pc, #500]	; (800229c <StartRecieve+0x32c>)
 80020a6:	2000      	movs	r0, #0
 80020a8:	f009 fe48 	bl	800bd3c <strtok>
 80020ac:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 80020b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b41      	cmp	r3, #65	; 0x41
 80020b8:	d022      	beq.n	8002100 <StartRecieve+0x190>
 80020ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b52      	cmp	r3, #82	; 0x52
 80020c2:	d01d      	beq.n	8002100 <StartRecieve+0x190>
 80020c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b53      	cmp	r3, #83	; 0x53
 80020cc:	d018      	beq.n	8002100 <StartRecieve+0x190>
 80020ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b54      	cmp	r3, #84	; 0x54
 80020d6:	d013      	beq.n	8002100 <StartRecieve+0x190>
	  			valid_entry = 0;														// if not make command invalid
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	4971      	ldr	r1, [pc, #452]	; (80022a8 <StartRecieve+0x338>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f009 fdab 	bl	800bc40 <siprintf>
 80020ea:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80020ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f107 010c 	add.w	r1, r7, #12
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	4866      	ldr	r0, [pc, #408]	; (8002294 <StartRecieve+0x324>)
 80020fc:	f003 fcd0 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 8002100:	4b68      	ldr	r3, [pc, #416]	; (80022a4 <StartRecieve+0x334>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002108:	7812      	ldrb	r2, [r2, #0]
 800210a:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 800210c:	4963      	ldr	r1, [pc, #396]	; (800229c <StartRecieve+0x32c>)
 800210e:	2000      	movs	r0, #0
 8002110:	f009 fe14 	bl	800bd3c <strtok>
 8002114:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		double fvalue = atof(word);
 8002118:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800211c:	f007 fed6 	bl	8009ecc <atof>
 8002120:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if ((fvalue > 10000 || fvalue < 0.5) && fvalue != 0){							// check if frequncy value is valid
 8002124:	a356      	add	r3, pc, #344	; (adr r3, 8002280 <StartRecieve+0x310>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800212e:	f7fe fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <StartRecieve+0x1dc>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <StartRecieve+0x33c>)
 800213e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002142:	f7fe fccb 	bl	8000adc <__aeabi_dcmplt>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01e      	beq.n	800218a <StartRecieve+0x21a>
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002158:	f7fe fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <StartRecieve+0x21a>
	  			valid_entry = 0;														// if not make command invalid
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4950      	ldr	r1, [pc, #320]	; (80022b0 <StartRecieve+0x340>)
 800216e:	4618      	mov	r0, r3
 8002170:	f009 fd66 	bl	800bc40 <siprintf>
 8002174:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002178:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800217c:	b29a      	uxth	r2, r3
 800217e:	f107 010c 	add.w	r1, r7, #12
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	4843      	ldr	r0, [pc, #268]	; (8002294 <StartRecieve+0x324>)
 8002186:	f003 fc8b 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <StartRecieve+0x334>)
 800218c:	681c      	ldr	r4, [r3, #0]
 800218e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002192:	f7fe fd29 	bl	8000be8 <__aeabi_d2f>
 8002196:	4603      	mov	r3, r0
 8002198:	6063      	str	r3, [r4, #4]

	  		word = strtok(NULL, " ");
 800219a:	4940      	ldr	r1, [pc, #256]	; (800229c <StartRecieve+0x32c>)
 800219c:	2000      	movs	r0, #0
 800219e:	f009 fdcd 	bl	800bd3c <strtok>
 80021a2:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 80021a6:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80021aa:	f007 fe8f 	bl	8009ecc <atof>
 80021ae:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 80021b2:	a335      	add	r3, pc, #212	; (adr r3, 8002288 <StartRecieve+0x318>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021bc:	f7fe fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <StartRecieve+0x26c>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021d2:	f7fe fc83 	bl	8000adc <__aeabi_dcmplt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <StartRecieve+0x294>
	  			valid_entry = 0;														// if not make command invalid
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	4933      	ldr	r1, [pc, #204]	; (80022b4 <StartRecieve+0x344>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f009 fd29 	bl	800bc40 <siprintf>
 80021ee:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80021f2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	f107 010c 	add.w	r1, r7, #12
 80021fc:	2364      	movs	r3, #100	; 0x64
 80021fe:	4825      	ldr	r0, [pc, #148]	; (8002294 <StartRecieve+0x324>)
 8002200:	f003 fc4e 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <StartRecieve+0x334>)
 8002206:	681c      	ldr	r4, [r3, #0]
 8002208:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800220c:	f7fe fcec 	bl	8000be8 <__aeabi_d2f>
 8002210:	4603      	mov	r3, r0
 8002212:	60a3      	str	r3, [r4, #8]

	  		word = strtok(NULL, " ");
 8002214:	4921      	ldr	r1, [pc, #132]	; (800229c <StartRecieve+0x32c>)
 8002216:	2000      	movs	r0, #0
 8002218:	f009 fd90 	bl	800bd3c <strtok>
 800221c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8002220:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002224:	f007 fe52 	bl	8009ecc <atof>
 8002228:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 800222c:	a316      	add	r3, pc, #88	; (adr r3, 8002288 <StartRecieve+0x318>)
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002236:	f7fe fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <StartRecieve+0x2e6>
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800224c:	f7fe fc46 	bl	8000adc <__aeabi_dcmplt>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d032      	beq.n	80022bc <StartRecieve+0x34c>
	  			valid_entry = 0;														// if not make command invalid
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	4915      	ldr	r1, [pc, #84]	; (80022b8 <StartRecieve+0x348>)
 8002262:	4618      	mov	r0, r3
 8002264:	f009 fcec 	bl	800bc40 <siprintf>
 8002268:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800226c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002270:	b29a      	uxth	r2, r3
 8002272:	f107 010c 	add.w	r1, r7, #12
 8002276:	2364      	movs	r3, #100	; 0x64
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <StartRecieve+0x324>)
 800227a:	f003 fc11 	bl	8005aa0 <HAL_UART_Transmit>
 800227e:	e040      	b.n	8002302 <StartRecieve+0x392>
 8002280:	00000000 	.word	0x00000000
 8002284:	40c38800 	.word	0x40c38800
 8002288:	66666666 	.word	0x66666666
 800228c:	400a6666 	.word	0x400a6666
 8002290:	20000fd8 	.word	0x20000fd8
 8002294:	20000f44 	.word	0x20000f44
 8002298:	0800f9a0 	.word	0x0800f9a0
 800229c:	0800f9a4 	.word	0x0800f9a4
 80022a0:	0800f9a8 	.word	0x0800f9a8
 80022a4:	20000fdc 	.word	0x20000fdc
 80022a8:	0800f9c8 	.word	0x0800f9c8
 80022ac:	3fe00000 	.word	0x3fe00000
 80022b0:	0800fa18 	.word	0x0800fa18
 80022b4:	0800fa54 	.word	0x0800fa54
 80022b8:	0800fa80 	.word	0x0800fa80
	  		} else if (ivalue <= command->minv){										// check if max voltage value is less than min voltage
 80022bc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c8:	4b5c      	ldr	r3, [pc, #368]	; (800243c <StartRecieve+0x4cc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80022d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	d813      	bhi.n	8002302 <StartRecieve+0x392>
	  			valid_entry = 0;														// if not make command invalid
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4956      	ldr	r1, [pc, #344]	; (8002440 <StartRecieve+0x4d0>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f009 fcaa 	bl	800bc40 <siprintf>
 80022ec:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80022f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f107 010c 	add.w	r1, r7, #12
 80022fa:	2364      	movs	r3, #100	; 0x64
 80022fc:	4851      	ldr	r0, [pc, #324]	; (8002444 <StartRecieve+0x4d4>)
 80022fe:	f003 fbcf 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <StartRecieve+0x4cc>)
 8002304:	681c      	ldr	r4, [r3, #0]
 8002306:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800230a:	f7fe fc6d 	bl	8000be8 <__aeabi_d2f>
 800230e:	4603      	mov	r3, r0
 8002310:	60e3      	str	r3, [r4, #12]

	  		word = strtok(NULL, " ");
 8002312:	494d      	ldr	r1, [pc, #308]	; (8002448 <StartRecieve+0x4d8>)
 8002314:	2000      	movs	r0, #0
 8002316:	f009 fd11 	bl	800bd3c <strtok>
 800231a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 800231e:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002322:	f007 fdd6 	bl	8009ed2 <atoi>
 8002326:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 800232a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800232e:	2b0c      	cmp	r3, #12
 8002330:	dc03      	bgt.n	800233a <StartRecieve+0x3ca>
 8002332:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002336:	2b00      	cmp	r3, #0
 8002338:	da13      	bge.n	8002362 <StartRecieve+0x3f2>
	  			valid_entry = 0;														// if not make command invalid
 800233a:	2300      	movs	r3, #0
 800233c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4941      	ldr	r1, [pc, #260]	; (800244c <StartRecieve+0x4dc>)
 8002346:	4618      	mov	r0, r3
 8002348:	f009 fc7a 	bl	800bc40 <siprintf>
 800234c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002350:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002354:	b29a      	uxth	r2, r3
 8002356:	f107 010c 	add.w	r1, r7, #12
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	4839      	ldr	r0, [pc, #228]	; (8002444 <StartRecieve+0x4d4>)
 800235e:	f003 fb9f 	bl	8005aa0 <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <StartRecieve+0x4cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800236a:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 800236c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05a      	beq.n	800242a <StartRecieve+0x4ba>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <StartRecieve+0x4e0>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	2200      	movs	r2, #0
 800237c:	492f      	ldr	r1, [pc, #188]	; (800243c <StartRecieve+0x4cc>)
 800237e:	f004 fc65 	bl	8006c4c <osMessageQueuePut>
				valid_entry = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002388:	e04f      	b.n	800242a <StartRecieve+0x4ba>
  			}

	  	} else if ((c == 8 || c == 127) && (i >= 1)){
 800238a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800238e:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d006      	beq.n	80023a6 <StartRecieve+0x436>
 8002398:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800239c:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b7f      	cmp	r3, #127	; 0x7f
 80023a4:	d122      	bne.n	80023ec <StartRecieve+0x47c>
 80023a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	dd1e      	ble.n	80023ec <StartRecieve+0x47c>
	  		command_buffer[--i] = '\0';
 80023ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80023b8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80023bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023c0:	4413      	add	r3, r2
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
	  		print_size = sprintf(print_buffer, "%c %c", 8, 8);
 80023c6:	f107 000c 	add.w	r0, r7, #12
 80023ca:	2308      	movs	r3, #8
 80023cc:	2208      	movs	r2, #8
 80023ce:	4921      	ldr	r1, [pc, #132]	; (8002454 <StartRecieve+0x4e4>)
 80023d0:	f009 fc36 	bl	800bc40 <siprintf>
 80023d4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80023d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023dc:	b29a      	uxth	r2, r3
 80023de:	f107 010c 	add.w	r1, r7, #12
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	4817      	ldr	r0, [pc, #92]	; (8002444 <StartRecieve+0x4d4>)
 80023e6:	f003 fb5b 	bl	8005aa0 <HAL_UART_Transmit>
 80023ea:	e01e      	b.n	800242a <StartRecieve+0x4ba>
	  	} else if (c != 0){						// if character is valid and not enter key
 80023ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80023f0:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <StartRecieve+0x4ba>
	  		HAL_UART_Transmit(&huart2, &c, 1, 100);
 80023fa:	f107 010b 	add.w	r1, r7, #11
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	2201      	movs	r2, #1
 8002402:	4810      	ldr	r0, [pc, #64]	; (8002444 <StartRecieve+0x4d4>)
 8002404:	f003 fb4c 	bl	8005aa0 <HAL_UART_Transmit>
	  		command_buffer[i] = c;				// add to buffer to save
 8002408:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800240c:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002410:	7819      	ldrb	r1, [r3, #0]
 8002412:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002416:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800241a:	4413      	add	r3, r2
 800241c:	460a      	mov	r2, r1
 800241e:	701a      	strb	r2, [r3, #0]
	  		i++;
 8002420:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002424:	3301      	adds	r3, #1
 8002426:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  	}
	  	osMutexRelease(MUTEXHandle);
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <StartRecieve+0x4e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fb5b 	bl	8006aea <osMutexRelease>
	  	osThreadYield();
 8002434:	f004 fa68 	bl	8006908 <osThreadYield>
  {
 8002438:	e5ab      	b.n	8001f92 <StartRecieve+0x22>
 800243a:	bf00      	nop
 800243c:	20000fdc 	.word	0x20000fdc
 8002440:	0800faac 	.word	0x0800faac
 8002444:	20000f44 	.word	0x20000f44
 8002448:	0800f9a4 	.word	0x0800f9a4
 800244c:	0800fae0 	.word	0x0800fae0
 8002450:	20000fd4 	.word	0x20000fd4
 8002454:	0800fb14 	.word	0x0800fb14
 8002458:	20000fd8 	.word	0x20000fd8

0800245c <StartProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcess */
void StartProcess(void *argument)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b0c4      	sub	sp, #272	; 0x110
 8002460:	af00      	add	r7, sp, #0
 8002462:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800246a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartProcess */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <StartProcess+0xa8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	4618      	mov	r0, r3
 8002476:	f004 faed 	bl	8006a54 <osMutexAcquire>
	 			  if(osMessageQueueGetCount(CommandQueueHandle) != 0){
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <StartProcess+0xac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f004 fca2 	bl	8006dc8 <osMessageQueueGetCount>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d033      	beq.n	80024f2 <StartProcess+0x96>
	 				  char buf[256];
	 				  struct user_command *cmd = (struct user_command *)malloc(sizeof(struct user_command));
 800248a:	2018      	movs	r0, #24
 800248c:	f007 fd38 	bl	8009f00 <malloc>
 8002490:	4603      	mov	r3, r0
 8002492:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	 				  if(cmd == NULL){
 8002496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <StartProcess+0x48>
	 					  exit(98);
 800249e:	2062      	movs	r0, #98	; 0x62
 80024a0:	f007 fd1c 	bl	8009edc <exit>
	 				  }
	 				  osMessageQueueGet(CommandQueueHandle, &cmd, 0, 0);
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <StartProcess+0xac>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80024ac:	2300      	movs	r3, #0
 80024ae:	2200      	movs	r2, #0
 80024b0:	f004 fc2c 	bl	8006d0c <osMessageQueueGet>
	 				  sig_gen(cmd, &hrng, &hdac1);
 80024b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <StartProcess+0xb0>)
 80024ba:	4915      	ldr	r1, [pc, #84]	; (8002510 <StartProcess+0xb4>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fa0f 	bl	80018e0 <sig_gen>
	 				  sprintf(buf,"\r\n Enter another wave generation! \r\n");
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4913      	ldr	r1, [pc, #76]	; (8002514 <StartProcess+0xb8>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f009 fbb9 	bl	800bc40 <siprintf>
	 				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fd fecc 	bl	8000270 <strlen>
 80024d8:	4603      	mov	r3, r0
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f107 010c 	add.w	r1, r7, #12
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <StartProcess+0xbc>)
 80024e4:	f003 fadc 	bl	8005aa0 <HAL_UART_Transmit>
	 				  free(cmd);
 80024e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024ec:	4618      	mov	r0, r3
 80024ee:	f007 fd0f 	bl	8009f10 <free>

	 		  }

	 			  osMutexRelease(MUTEXHandle);
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <StartProcess+0xa8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 faf7 	bl	8006aea <osMutexRelease>
	 		   vTaskDelay(100);
 80024fc:	2064      	movs	r0, #100	; 0x64
 80024fe:	f005 fedf 	bl	80082c0 <vTaskDelay>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8002502:	e7b3      	b.n	800246c <StartProcess+0x10>
 8002504:	20000fd8 	.word	0x20000fd8
 8002508:	20000fd4 	.word	0x20000fd4
 800250c:	20000df8 	.word	0x20000df8
 8002510:	20000e9c 	.word	0x20000e9c
 8002514:	0800fb1c 	.word	0x0800fb1c
 8002518:	20000f44 	.word	0x20000f44

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_MspInit+0x4c>)
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_MspInit+0x4c>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6613      	str	r3, [r2, #96]	; 0x60
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_MspInit+0x4c>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_MspInit+0x4c>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <HAL_MspInit+0x4c>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6593      	str	r3, [r2, #88]	; 0x58
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_MspInit+0x4c>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	210f      	movs	r1, #15
 8002562:	f06f 0001 	mvn.w	r0, #1
 8002566:	f000 fc22 	bl	8002dae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a40      	ldr	r2, [pc, #256]	; (8002698 <HAL_DAC_MspInit+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d17a      	bne.n	8002690 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <HAL_DAC_MspInit+0x124>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_DAC_MspInit+0x124>)
 80025a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025a4:	6593      	str	r3, [r2, #88]	; 0x58
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_DAC_MspInit+0x124>)
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_DAC_MspInit+0x124>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a39      	ldr	r2, [pc, #228]	; (800269c <HAL_DAC_MspInit+0x124>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_DAC_MspInit+0x124>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025ca:	2330      	movs	r3, #48	; 0x30
 80025cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ce:	2303      	movs	r3, #3
 80025d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f001 f954 	bl	800388c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 80025e6:	4a2f      	ldr	r2, [pc, #188]	; (80026a4 <HAL_DAC_MspInit+0x12c>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80025ea:	4b2d      	ldr	r3, [pc, #180]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 80025ec:	2206      	movs	r2, #6
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 80025f2:	2210      	movs	r2, #16
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 8002604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002608:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 800260c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002610:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002612:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 8002614:	2220      	movs	r2, #32
 8002616:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 800261a:	2200      	movs	r2, #0
 800261c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800261e:	4820      	ldr	r0, [pc, #128]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 8002620:	f000 fefe 	bl	8003420 <HAL_DMA_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800262a:	f7ff ff77 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1b      	ldr	r2, [pc, #108]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_DAC_MspInit+0x128>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_DAC_MspInit+0x134>)
 800263e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002642:	2205      	movs	r2, #5
 8002644:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002646:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002648:	2210      	movs	r2, #16
 800264a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002666:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 800266a:	2220      	movs	r2, #32
 800266c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002670:	2200      	movs	r2, #0
 8002672:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002676:	f000 fed3 	bl	8003420 <HAL_DMA_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002680:	f7ff ff4c 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_DAC_MspInit+0x130>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40007400 	.word	0x40007400
 800269c:	40021000 	.word	0x40021000
 80026a0:	20000e0c 	.word	0x20000e0c
 80026a4:	40020030 	.word	0x40020030
 80026a8:	20000e54 	.word	0x20000e54
 80026ac:	40020044 	.word	0x40020044

080026b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0a6      	sub	sp, #152	; 0x98
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	2288      	movs	r2, #136	; 0x88
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 fb20 	bl	800bd06 <memset>
  if(hrng->Instance==RNG)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RNG_MspInit+0x80>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d12b      	bne.n	8002728 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80026d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80026d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80026de:	2301      	movs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80026e6:	2310      	movs	r3, #16
 80026e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80026ea:	2307      	movs	r3, #7
 80026ec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80026ee:	2302      	movs	r3, #2
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026f2:	2302      	movs	r3, #2
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80026f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	4618      	mov	r0, r3
 8002702:	f002 f8d1 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 800270c:	f7ff ff06 	bl	800251c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RNG_MspInit+0x84>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RNG_MspInit+0x84>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RNG_MspInit+0x84>)
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3798      	adds	r7, #152	; 0x98
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	50060800 	.word	0x50060800
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d10c      	bne.n	8002764 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4a11      	ldr	r2, [pc, #68]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6593      	str	r3, [r2, #88]	; 0x58
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002762:	e010      	b.n	8002786 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_TIM_Base_MspInit+0x60>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10b      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 8002770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 8002774:	f043 0308 	orr.w	r3, r3, #8
 8002778:	6593      	str	r3, [r2, #88]	; 0x58
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_TIM_Base_MspInit+0x5c>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	40000c00 	.word	0x40000c00

0800279c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b0ac      	sub	sp, #176	; 0xb0
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2288      	movs	r2, #136	; 0x88
 80027ba:	2100      	movs	r1, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	f009 faa2 	bl	800bd06 <memset>
  if(huart->Instance==USART2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_UART_MspInit+0xb0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d13b      	bne.n	8002844 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027cc:	2302      	movs	r3, #2
 80027ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027d0:	2300      	movs	r3, #0
 80027d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 f865 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027e4:	f7ff fe9a 	bl	800251c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e8:	4b19      	ldr	r3, [pc, #100]	; (8002850 <HAL_UART_MspInit+0xb4>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	4a18      	ldr	r2, [pc, #96]	; (8002850 <HAL_UART_MspInit+0xb4>)
 80027ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f2:	6593      	str	r3, [r2, #88]	; 0x58
 80027f4:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_UART_MspInit+0xb4>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_UART_MspInit+0xb4>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	4a12      	ldr	r2, [pc, #72]	; (8002850 <HAL_UART_MspInit+0xb4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_UART_MspInit+0xb4>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002818:	230c      	movs	r3, #12
 800281a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002830:	2307      	movs	r3, #7
 8002832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002840:	f001 f824 	bl	800388c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	37b0      	adds	r7, #176	; 0xb0
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40004400 	.word	0x40004400
 8002850:	40021000 	.word	0x40021000

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <NMI_Handler+0x4>

0800285a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800285e:	e7fe      	b.n	800285e <HardFault_Handler+0x4>

08002860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002864:	e7fe      	b.n	8002864 <MemManage_Handler+0x4>

08002866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800286a:	e7fe      	b.n	800286a <BusFault_Handler+0x4>

0800286c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <UsageFault_Handler+0x4>

08002872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f000 f974 	bl	8002b70 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002888:	f006 f9ba 	bl	8008c00 <xTaskGetSchedulerState>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002892:	f007 f8a1 	bl	80099d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80028a0:	4802      	ldr	r0, [pc, #8]	; (80028ac <DMA1_Channel3_IRQHandler+0x10>)
 80028a2:	f000 ff13 	bl	80036cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000e0c 	.word	0x20000e0c

080028b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <DMA1_Channel4_IRQHandler+0x10>)
 80028b6:	f000 ff09 	bl	80036cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000e54 	.word	0x20000e54

080028c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return 1;
 80028c8:	2301      	movs	r3, #1
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028de:	f009 fb39 	bl	800bf54 <__errno>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
  return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ffe7 	bl	80028d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002906:	e7fe      	b.n	8002906 <_exit+0x12>

08002908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	e00a      	b.n	8002930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800291a:	f3af 8000 	nop.w
 800291e:	4601      	mov	r1, r0
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	60ba      	str	r2, [r7, #8]
 8002926:	b2ca      	uxtb	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3301      	adds	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbf0      	blt.n	800291a <_read+0x12>
  }

  return len;
 8002938:	687b      	ldr	r3, [r7, #4]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e009      	b.n	8002968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	60ba      	str	r2, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	dbf1      	blt.n	8002954 <_write+0x12>
  }
  return len;
 8002970:	687b      	ldr	r3, [r7, #4]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_close>:

int _close(int file)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a2:	605a      	str	r2, [r3, #4]
  return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <_isatty>:

int _isatty(int file)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ba:	2301      	movs	r3, #1
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f009 fa9e 	bl	800bf54 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	; (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20018000 	.word	0x20018000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	20000fe0 	.word	0x20000fe0
 8002a4c:	20004848 	.word	0x20004848

08002a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff ffea 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LoopForever+0xe>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	; (8002ac0 <LoopForever+0x16>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f009 fa5d 	bl	800bf60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aa6:	f7ff f833 	bl	8001b10 <main>

08002aaa <LoopForever>:

LoopForever:
    b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8002ab8:	08010280 	.word	0x08010280
  ldr r2, =_sbss
 8002abc:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8002ac0:	20004844 	.word	0x20004844

08002ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC1_2_IRQHandler>

08002ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f000 f961 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ad6:	200f      	movs	r0, #15
 8002ad8:	f000 f80e 	bl	8002af8 <HAL_InitTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e001      	b.n	8002aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ae8:	f7ff fd1e 	bl	8002528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_InitTick+0x6c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_InitTick+0x70>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_InitTick+0x6c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f96d 	bl	8002e02 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10f      	bne.n	8002b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b0f      	cmp	r3, #15
 8002b32:	d809      	bhi.n	8002b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b34:	2200      	movs	r2, #0
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f000 f937 	bl	8002dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b40:	4a0a      	ldr	r2, [pc, #40]	; (8002b6c <HAL_InitTick+0x74>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e007      	b.n	8002b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e004      	b.n	8002b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e001      	b.n	8002b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000040c 	.word	0x2000040c
 8002b68:	20000404 	.word	0x20000404
 8002b6c:	20000408 	.word	0x20000408

08002b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_IncTick+0x20>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_IncTick+0x24>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <HAL_IncTick+0x24>)
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000040c 	.word	0x2000040c
 8002b94:	20000fe4 	.word	0x20000fe4

08002b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_GetTick+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000fe4 	.word	0x20000fe4

08002bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb8:	f7ff ffee 	bl	8002b98 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d005      	beq.n	8002bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_Delay+0x44>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd6:	bf00      	nop
 8002bd8:	f7ff ffde 	bl	8002b98 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d8f7      	bhi.n	8002bd8 <HAL_Delay+0x28>
  {
  }
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000040c 	.word	0x2000040c

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2a:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	60d3      	str	r3, [r2, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff8e 	bl	8002c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff29 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff3e 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff8e 	bl	8002cec <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff31 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e014      	b.n	8002e56 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	791b      	ldrb	r3, [r3, #4]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fb9b 	bl	8002578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	795b      	ldrb	r3, [r3, #5]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_DAC_Start_DMA+0x1e>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0ab      	b.n	8002fd6 <HAL_DAC_Start_DMA+0x176>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d12f      	bne.n	8002ef0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_DAC_Start_DMA+0x180>)
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	4a51      	ldr	r2, [pc, #324]	; (8002fe4 <HAL_DAC_Start_DMA+0x184>)
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a50      	ldr	r2, [pc, #320]	; (8002fe8 <HAL_DAC_Start_DMA+0x188>)
 8002ea6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d013      	beq.n	8002ee6 <HAL_DAC_Start_DMA+0x86>
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d845      	bhi.n	8002f50 <HAL_DAC_Start_DMA+0xf0>
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_DAC_Start_DMA+0x72>
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d005      	beq.n	8002edc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002ed0:	e03e      	b.n	8002f50 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	613b      	str	r3, [r7, #16]
        break;
 8002eda:	e03c      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	613b      	str	r3, [r7, #16]
        break;
 8002ee4:	e037      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3310      	adds	r3, #16
 8002eec:	613b      	str	r3, [r7, #16]
        break;
 8002eee:	e032      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a3d      	ldr	r2, [pc, #244]	; (8002fec <HAL_DAC_Start_DMA+0x18c>)
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <HAL_DAC_Start_DMA+0x190>)
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <HAL_DAC_Start_DMA+0x194>)
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f16:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d013      	beq.n	8002f46 <HAL_DAC_Start_DMA+0xe6>
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d817      	bhi.n	8002f54 <HAL_DAC_Start_DMA+0xf4>
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_DAC_Start_DMA+0xd2>
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d005      	beq.n	8002f3c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002f30:	e010      	b.n	8002f54 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	613b      	str	r3, [r7, #16]
        break;
 8002f3a:	e00c      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3318      	adds	r3, #24
 8002f42:	613b      	str	r3, [r7, #16]
        break;
 8002f44:	e007      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	331c      	adds	r3, #28
 8002f4c:	613b      	str	r3, [r7, #16]
        break;
 8002f4e:	e002      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002f54:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d111      	bne.n	8002f80 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6898      	ldr	r0, [r3, #8]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	f000 fb0b 	bl	8003590 <HAL_DMA_Start_IT>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	75fb      	strb	r3, [r7, #23]
 8002f7e:	e010      	b.n	8002fa2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002f8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68d8      	ldr	r0, [r3, #12]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	f000 faf9 	bl	8003590 <HAL_DMA_Start_IT>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10c      	bne.n	8002fc8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2201      	movs	r2, #1
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e005      	b.n	8002fd4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	0800330d 	.word	0x0800330d
 8002fe4:	0800332f 	.word	0x0800332f
 8002fe8:	0800334b 	.word	0x0800334b
 8002fec:	080033b5 	.word	0x080033b5
 8002ff0:	080033d7 	.word	0x080033d7
 8002ff4:	080033f3 	.word	0x080033f3

08002ff8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6819      	ldr	r1, [r3, #0]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2201      	movs	r2, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fb02 	bl	8003650 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	e00c      	b.n	8003078 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 faf4 	bl	8003650 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003076:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b088      	sub	sp, #32
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	795b      	ldrb	r3, [r3, #5]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_DAC_ConfigChannel+0x1c>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e114      	b.n	8003304 <HAL_DAC_ConfigChannel+0x246>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	f040 8081 	bne.w	80031f2 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80030f0:	f7ff fd52 	bl	8002b98 <HAL_GetTick>
 80030f4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d140      	bne.n	800317e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80030fc:	e018      	b.n	8003130 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030fe:	f7ff fd4b 	bl	8002b98 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	d911      	bls.n	8003130 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f043 0208 	orr.w	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2203      	movs	r2, #3
 800312a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e0e9      	b.n	8003304 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1df      	bne.n	80030fe <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f7ff fd36 	bl	8002bb0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	6992      	ldr	r2, [r2, #24]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
 800314e:	e023      	b.n	8003198 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003150:	f7ff fd22 	bl	8002b98 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d90f      	bls.n	800317e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	da0a      	bge.n	800317e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f043 0208 	orr.w	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2203      	movs	r2, #3
 8003178:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0c2      	b.n	8003304 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	2b00      	cmp	r3, #0
 8003186:	dbe3      	blt.n	8003150 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff fd11 	bl	8002bb0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	6992      	ldr	r2, [r2, #24]
 8003196:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	ea02 0103 	and.w	r1, r2, r3
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	21ff      	movs	r1, #255	; 0xff
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	ea02 0103 	and.w	r1, r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d11d      	bne.n	8003236 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	221f      	movs	r2, #31
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2207      	movs	r2, #7
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	431a      	orrs	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	22c0      	movs	r2, #192	; 0xc0
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff feb1 	bl	8003082 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	711a      	strb	r2, [r3, #4]
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff feaa 	bl	8003096 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f043 0204 	orr.w	r2, r3, #4
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f7ff fea0 	bl	80030aa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	711a      	strb	r2, [r3, #4]
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff ffd8 	bl	8003378 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	711a      	strb	r2, [r3, #4]
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f7ff ffd1 	bl	800338c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ffc7 	bl	80033a0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	711a      	strb	r2, [r3, #4]
}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e098      	b.n	8003564 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_DMA_Init+0x150>)
 800343a:	429a      	cmp	r2, r3
 800343c:	d80f      	bhi.n	800345e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_DMA_Init+0x154>)
 8003446:	4413      	add	r3, r2
 8003448:	4a4b      	ldr	r2, [pc, #300]	; (8003578 <HAL_DMA_Init+0x158>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	009a      	lsls	r2, r3, #2
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a48      	ldr	r2, [pc, #288]	; (800357c <HAL_DMA_Init+0x15c>)
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
 800345c:	e00e      	b.n	800347c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <HAL_DMA_Init+0x160>)
 8003466:	4413      	add	r3, r2
 8003468:	4a43      	ldr	r2, [pc, #268]	; (8003578 <HAL_DMA_Init+0x158>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_DMA_Init+0x164>)
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d6:	d039      	beq.n	800354c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <HAL_DMA_Init+0x15c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d11a      	bne.n	8003518 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <HAL_DMA_Init+0x168>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f003 031c 	and.w	r3, r3, #28
 80034ee:	210f      	movs	r1, #15
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4924      	ldr	r1, [pc, #144]	; (8003588 <HAL_DMA_Init+0x168>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80034fc:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_DMA_Init+0x168>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f003 031c 	and.w	r3, r3, #28
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	491d      	ldr	r1, [pc, #116]	; (8003588 <HAL_DMA_Init+0x168>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
 8003516:	e019      	b.n	800354c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_DMA_Init+0x16c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 031c 	and.w	r3, r3, #28
 8003524:	210f      	movs	r1, #15
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	4917      	ldr	r1, [pc, #92]	; (800358c <HAL_DMA_Init+0x16c>)
 800352e:	4013      	ands	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_DMA_Init+0x16c>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f003 031c 	and.w	r3, r3, #28
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	4911      	ldr	r1, [pc, #68]	; (800358c <HAL_DMA_Init+0x16c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40020407 	.word	0x40020407
 8003574:	bffdfff8 	.word	0xbffdfff8
 8003578:	cccccccd 	.word	0xcccccccd
 800357c:	40020000 	.word	0x40020000
 8003580:	bffdfbf8 	.word	0xbffdfbf8
 8003584:	40020400 	.word	0x40020400
 8003588:	400200a8 	.word	0x400200a8
 800358c:	400204a8 	.word	0x400204a8

08003590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Start_IT+0x20>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e04b      	b.n	8003648 <HAL_DMA_Start_IT+0xb8>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d13a      	bne.n	800363a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f91e 	bl	800382a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 020e 	orr.w	r2, r2, #14
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e00f      	b.n	8003628 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 020a 	orr.w	r2, r2, #10
 8003626:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e005      	b.n	8003646 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d008      	beq.n	800367a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2204      	movs	r2, #4
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e022      	b.n	80036c0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 020e 	bic.w	r2, r2, #14
 8003688:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f003 021c 	and.w	r2, r3, #28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ac:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e8:	f003 031c 	and.w	r3, r3, #28
 80036ec:	2204      	movs	r2, #4
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d026      	beq.n	8003746 <HAL_DMA_IRQHandler+0x7a>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d021      	beq.n	8003746 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0204 	bic.w	r2, r2, #4
 800371e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f003 021c 	and.w	r2, r3, #28
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	2104      	movs	r1, #4
 800372e:	fa01 f202 	lsl.w	r2, r1, r2
 8003732:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b00      	cmp	r3, #0
 800373a:	d071      	beq.n	8003820 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003744:	e06c      	b.n	8003820 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f003 031c 	and.w	r3, r3, #28
 800374e:	2202      	movs	r2, #2
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d02e      	beq.n	80037b8 <HAL_DMA_IRQHandler+0xec>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d029      	beq.n	80037b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 020a 	bic.w	r2, r2, #10
 8003780:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	f003 021c 	and.w	r2, r3, #28
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2102      	movs	r1, #2
 8003798:	fa01 f202 	lsl.w	r2, r1, r2
 800379c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d038      	beq.n	8003820 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80037b6:	e033      	b.n	8003820 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f003 031c 	and.w	r3, r3, #28
 80037c0:	2208      	movs	r2, #8
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02a      	beq.n	8003822 <HAL_DMA_IRQHandler+0x156>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d025      	beq.n	8003822 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 020e 	bic.w	r2, r2, #14
 80037e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	f003 021c 	and.w	r2, r3, #28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2101      	movs	r1, #1
 80037f4:	fa01 f202 	lsl.w	r2, r1, r2
 80037f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003820:	bf00      	nop
 8003822:	bf00      	nop
}
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f003 021c 	and.w	r2, r3, #28
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	2b10      	cmp	r3, #16
 800385a:	d108      	bne.n	800386e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800386c:	e007      	b.n	800387e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	60da      	str	r2, [r3, #12]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389a:	e17f      	b.n	8003b9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2101      	movs	r1, #1
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	fa01 f303 	lsl.w	r3, r1, r3
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8171 	beq.w	8003b96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d005      	beq.n	80038cc <HAL_GPIO_Init+0x40>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d130      	bne.n	800392e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	2203      	movs	r2, #3
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003902:	2201      	movs	r2, #1
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0201 	and.w	r2, r3, #1
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b03      	cmp	r3, #3
 8003938:	d118      	bne.n	800396c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003940:	2201      	movs	r2, #1
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	08db      	lsrs	r3, r3, #3
 8003956:	f003 0201 	and.w	r2, r3, #1
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d017      	beq.n	80039a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	6939      	ldr	r1, [r7, #16]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80ac 	beq.w	8003b96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	4b5f      	ldr	r3, [pc, #380]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	4a5e      	ldr	r2, [pc, #376]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6613      	str	r3, [r2, #96]	; 0x60
 8003a4a:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <HAL_GPIO_Init+0x330>)
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a56:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a80:	d025      	beq.n	8003ace <HAL_GPIO_Init+0x242>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4f      	ldr	r2, [pc, #316]	; (8003bc4 <HAL_GPIO_Init+0x338>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01f      	beq.n	8003aca <HAL_GPIO_Init+0x23e>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4e      	ldr	r2, [pc, #312]	; (8003bc8 <HAL_GPIO_Init+0x33c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d019      	beq.n	8003ac6 <HAL_GPIO_Init+0x23a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a4d      	ldr	r2, [pc, #308]	; (8003bcc <HAL_GPIO_Init+0x340>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_GPIO_Init+0x236>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4c      	ldr	r2, [pc, #304]	; (8003bd0 <HAL_GPIO_Init+0x344>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00d      	beq.n	8003abe <HAL_GPIO_Init+0x232>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	; (8003bd4 <HAL_GPIO_Init+0x348>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <HAL_GPIO_Init+0x22e>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a4a      	ldr	r2, [pc, #296]	; (8003bd8 <HAL_GPIO_Init+0x34c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_GPIO_Init+0x22a>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e00c      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003ab6:	2307      	movs	r3, #7
 8003ab8:	e00a      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003aba:	2305      	movs	r3, #5
 8003abc:	e008      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	e006      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e004      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e002      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_GPIO_Init+0x244>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	f002 0203 	and.w	r2, r2, #3
 8003ad6:	0092      	lsls	r2, r2, #2
 8003ad8:	4093      	lsls	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ae0:	4937      	ldr	r1, [pc, #220]	; (8003bc0 <HAL_GPIO_Init+0x334>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b12:	4a32      	ldr	r2, [pc, #200]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b18:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b3c:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b66:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <HAL_GPIO_Init+0x350>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f47f ae78 	bne.w	800389c <HAL_GPIO_Init+0x10>
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40010000 	.word	0x40010000
 8003bc4:	48000400 	.word	0x48000400
 8003bc8:	48000800 	.word	0x48000800
 8003bcc:	48000c00 	.word	0x48000c00
 8003bd0:	48001000 	.word	0x48001000
 8003bd4:	48001400 	.word	0x48001400
 8003bd8:	48001800 	.word	0x48001800
 8003bdc:	40010400 	.word	0x40010400

08003be0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40007000 	.word	0x40007000

08003bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0a:	d130      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0c:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c18:	d038      	beq.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2232      	movs	r2, #50	; 0x32
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9b      	lsrs	r3, r3, #18
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c40:	e002      	b.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c54:	d102      	bne.n	8003c5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f2      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c68:	d110      	bne.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e00f      	b.n	8003c8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	d007      	beq.n	8003c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c84:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	20000404 	.word	0x20000404
 8003ca4:	431bde83 	.word	0x431bde83

08003ca8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e3ca      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cba:	4b97      	ldr	r3, [pc, #604]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc4:	4b94      	ldr	r3, [pc, #592]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80e4 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4a>
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	f040 808b 	bne.w	8003e00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 8087 	bne.w	8003e00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf2:	4b89      	ldr	r3, [pc, #548]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x62>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e3a2      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	4b82      	ldr	r3, [pc, #520]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_RCC_OscConfig+0x7c>
 8003d1a:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d22:	e005      	b.n	8003d30 <HAL_RCC_OscConfig+0x88>
 8003d24:	4b7c      	ldr	r3, [pc, #496]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d223      	bcs.n	8003d7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fd55 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e383      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d48:	4b73      	ldr	r3, [pc, #460]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a72      	ldr	r2, [pc, #456]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	f043 0308 	orr.w	r3, r3, #8
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b70      	ldr	r3, [pc, #448]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	496d      	ldr	r1, [pc, #436]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d66:	4b6c      	ldr	r3, [pc, #432]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	4968      	ldr	r1, [pc, #416]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
 8003d7a:	e025      	b.n	8003dc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7c:	4b66      	ldr	r3, [pc, #408]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a65      	ldr	r2, [pc, #404]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d82:	f043 0308 	orr.w	r3, r3, #8
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b63      	ldr	r3, [pc, #396]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4960      	ldr	r1, [pc, #384]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	495b      	ldr	r1, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fd15 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e343      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc8:	f000 fc4a 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b52      	ldr	r3, [pc, #328]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	4950      	ldr	r1, [pc, #320]	; (8003f1c <HAL_RCC_OscConfig+0x274>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	4a4e      	ldr	r2, [pc, #312]	; (8003f20 <HAL_RCC_OscConfig+0x278>)
 8003de6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003de8:	4b4e      	ldr	r3, [pc, #312]	; (8003f24 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe fe83 	bl	8002af8 <HAL_InitTick>
 8003df2:	4603      	mov	r3, r0
 8003df4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d052      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	e327      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d032      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e08:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a42      	ldr	r2, [pc, #264]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e14:	f7fe fec0 	bl	8002b98 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e1c:	f7fe febc 	bl	8002b98 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e310      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a36      	ldr	r2, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e40:	f043 0308 	orr.w	r3, r3, #8
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4931      	ldr	r1, [pc, #196]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e58:	4b2f      	ldr	r3, [pc, #188]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	021b      	lsls	r3, r3, #8
 8003e66:	492c      	ldr	r1, [pc, #176]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e01a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e6e:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fe8d 	bl	8002b98 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e82:	f7fe fe89 	bl	8002b98 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e2dd      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x1da>
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d074      	beq.n	8003f9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x21a>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	d10e      	bne.n	8003eda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d10b      	bne.n	8003eda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d064      	beq.n	8003f98 <HAL_RCC_OscConfig+0x2f0>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d160      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e2ba      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x24a>
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e026      	b.n	8003f40 <HAL_RCC_OscConfig+0x298>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003efa:	d115      	bne.n	8003f28 <HAL_RCC_OscConfig+0x280>
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003f02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a02      	ldr	r2, [pc, #8]	; (8003f18 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e014      	b.n	8003f40 <HAL_RCC_OscConfig+0x298>
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	0800fbcc 	.word	0x0800fbcc
 8003f20:	20000404 	.word	0x20000404
 8003f24:	20000408 	.word	0x20000408
 8003f28:	4ba0      	ldr	r3, [pc, #640]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a9f      	ldr	r2, [pc, #636]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4b9d      	ldr	r3, [pc, #628]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a9c      	ldr	r2, [pc, #624]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d013      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe fe26 	bl	8002b98 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fe fe22 	bl	8002b98 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e276      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f62:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f0      	beq.n	8003f50 <HAL_RCC_OscConfig+0x2a8>
 8003f6e:	e014      	b.n	8003f9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fe fe12 	bl	8002b98 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fe fe0e 	bl	8002b98 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e262      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x2d0>
 8003f96:	e000      	b.n	8003f9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d060      	beq.n	8004068 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x310>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d119      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d116      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fb8:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x328>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e23f      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd0:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	4973      	ldr	r1, [pc, #460]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe4:	e040      	b.n	8004068 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d023      	beq.n	8004036 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fee:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fdcd 	bl	8002b98 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe fdc9 	bl	8002b98 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e21d      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004014:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b62      	ldr	r3, [pc, #392]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	495f      	ldr	r1, [pc, #380]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	e018      	b.n	8004068 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b5d      	ldr	r3, [pc, #372]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a5c      	ldr	r2, [pc, #368]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800403c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe fda9 	bl	8002b98 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404a:	f7fe fda5 	bl	8002b98 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e1f9      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d03c      	beq.n	80040ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01c      	beq.n	80040b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407c:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800407e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004082:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fe fd84 	bl	8002b98 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004094:	f7fe fd80 	bl	8002b98 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1d4      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ef      	beq.n	8004094 <HAL_RCC_OscConfig+0x3ec>
 80040b4:	e01b      	b.n	80040ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 80040b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c6:	f7fe fd67 	bl	8002b98 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ce:	f7fe fd63 	bl	8002b98 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e1b7      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040e0:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ef      	bne.n	80040ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0304 	and.w	r3, r3, #4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a6 	beq.w	8004248 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fc:	2300      	movs	r3, #0
 80040fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004100:	4b2a      	ldr	r3, [pc, #168]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004116:	6593      	str	r3, [r2, #88]	; 0x58
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004128:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_RCC_OscConfig+0x508>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d118      	bne.n	8004166 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004134:	4b1e      	ldr	r3, [pc, #120]	; (80041b0 <HAL_RCC_OscConfig+0x508>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1d      	ldr	r2, [pc, #116]	; (80041b0 <HAL_RCC_OscConfig+0x508>)
 800413a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004140:	f7fe fd2a 	bl	8002b98 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004148:	f7fe fd26 	bl	8002b98 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e17a      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_RCC_OscConfig+0x508>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <HAL_RCC_OscConfig+0x4d8>
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	4a0d      	ldr	r2, [pc, #52]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800417e:	e029      	b.n	80041d4 <HAL_RCC_OscConfig+0x52c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b05      	cmp	r3, #5
 8004186:	d115      	bne.n	80041b4 <HAL_RCC_OscConfig+0x50c>
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	4a07      	ldr	r2, [pc, #28]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	4a03      	ldr	r2, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x504>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a8:	e014      	b.n	80041d4 <HAL_RCC_OscConfig+0x52c>
 80041aa:	bf00      	nop
 80041ac:	40021000 	.word	0x40021000
 80041b0:	40007000 	.word	0x40007000
 80041b4:	4b9c      	ldr	r3, [pc, #624]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	4a9b      	ldr	r2, [pc, #620]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c4:	4b98      	ldr	r3, [pc, #608]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	4a97      	ldr	r2, [pc, #604]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fe fcdc 	bl	8002b98 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fe fcd8 	bl	8002b98 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e12a      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fa:	4b8b      	ldr	r3, [pc, #556]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ed      	beq.n	80041e4 <HAL_RCC_OscConfig+0x53c>
 8004208:	e015      	b.n	8004236 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420a:	f7fe fcc5 	bl	8002b98 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fe fcc1 	bl	8002b98 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e113      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004228:	4b7f      	ldr	r3, [pc, #508]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1ed      	bne.n	8004212 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004236:	7ffb      	ldrb	r3, [r7, #31]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d105      	bne.n	8004248 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423c:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	4a79      	ldr	r2, [pc, #484]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004246:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80fe 	beq.w	800444e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	2b02      	cmp	r3, #2
 8004258:	f040 80d0 	bne.w	80043fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800425c:	4b72      	ldr	r3, [pc, #456]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	429a      	cmp	r2, r3
 800426e:	d130      	bne.n	80042d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	3b01      	subs	r3, #1
 800427c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d127      	bne.n	80042d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d11f      	bne.n	80042d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800429c:	2a07      	cmp	r2, #7
 800429e:	bf14      	ite	ne
 80042a0:	2201      	movne	r2, #1
 80042a2:	2200      	moveq	r2, #0
 80042a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d113      	bne.n	80042d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	3b01      	subs	r3, #1
 80042cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d06e      	beq.n	80043b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b0c      	cmp	r3, #12
 80042d6:	d069      	beq.n	80043ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0ad      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042f4:	4b4c      	ldr	r3, [pc, #304]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a4b      	ldr	r2, [pc, #300]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80042fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004300:	f7fe fc4a 	bl	8002b98 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fc46 	bl	8002b98 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e09a      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431a:	4b43      	ldr	r3, [pc, #268]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004326:	4b40      	ldr	r3, [pc, #256]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	4b40      	ldr	r3, [pc, #256]	; (800442c <HAL_RCC_OscConfig+0x784>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004336:	3a01      	subs	r2, #1
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004340:	0212      	lsls	r2, r2, #8
 8004342:	4311      	orrs	r1, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004348:	0852      	lsrs	r2, r2, #1
 800434a:	3a01      	subs	r2, #1
 800434c:	0552      	lsls	r2, r2, #21
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004354:	0852      	lsrs	r2, r2, #1
 8004356:	3a01      	subs	r2, #1
 8004358:	0652      	lsls	r2, r2, #25
 800435a:	4311      	orrs	r1, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004360:	0912      	lsrs	r2, r2, #4
 8004362:	0452      	lsls	r2, r2, #17
 8004364:	430a      	orrs	r2, r1
 8004366:	4930      	ldr	r1, [pc, #192]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800436c:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004376:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 800437e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004382:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004384:	f7fe fc08 	bl	8002b98 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fe fc04 	bl	8002b98 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e058      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043aa:	e050      	b.n	800444e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04f      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d148      	bne.n	800444e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043bc:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043c8:	4b17      	ldr	r3, [pc, #92]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a16      	ldr	r2, [pc, #88]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043d4:	f7fe fbe0 	bl	8002b98 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fe fbdc 	bl	8002b98 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e030      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x734>
 80043fa:	e028      	b.n	800444e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d023      	beq.n	800444a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a08      	ldr	r2, [pc, #32]	; (8004428 <HAL_RCC_OscConfig+0x780>)
 8004408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800440c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe fbc3 	bl	8002b98 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	e00c      	b.n	8004430 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe fbbf 	bl	8002b98 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d905      	bls.n	8004430 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e013      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
 8004428:	40021000 	.word	0x40021000
 800442c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_OscConfig+0x7b0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ec      	bne.n	8004416 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCC_OscConfig+0x7b0>)
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4905      	ldr	r1, [pc, #20]	; (8004458 <HAL_RCC_OscConfig+0x7b0>)
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_OscConfig+0x7b4>)
 8004444:	4013      	ands	r3, r2
 8004446:	60cb      	str	r3, [r1, #12]
 8004448:	e001      	b.n	800444e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	feeefffc 	.word	0xfeeefffc

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0e7      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b75      	ldr	r3, [pc, #468]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d910      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b72      	ldr	r3, [pc, #456]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 0207 	bic.w	r2, r3, #7
 800448a:	4970      	ldr	r1, [pc, #448]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b6e      	ldr	r3, [pc, #440]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0cf      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	4b66      	ldr	r3, [pc, #408]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044bc:	429a      	cmp	r2, r3
 80044be:	d908      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c0:	4b63      	ldr	r3, [pc, #396]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4960      	ldr	r1, [pc, #384]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d04c      	beq.n	8004578 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e6:	4b5a      	ldr	r3, [pc, #360]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d121      	bne.n	8004536 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0a6      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fe:	4b54      	ldr	r3, [pc, #336]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d115      	bne.n	8004536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e09a      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004516:	4b4e      	ldr	r3, [pc, #312]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e08e      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e086      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004536:	4b46      	ldr	r3, [pc, #280]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 0203 	bic.w	r2, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	4943      	ldr	r1, [pc, #268]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fe fb26 	bl	8002b98 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	e00a      	b.n	8004566 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004550:	f7fe fb22 	bl	8002b98 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e06e      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	4b3a      	ldr	r3, [pc, #232]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 020c 	and.w	r2, r3, #12
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	429a      	cmp	r2, r3
 8004576:	d1eb      	bne.n	8004550 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004590:	429a      	cmp	r2, r3
 8004592:	d208      	bcs.n	80045a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004594:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	492b      	ldr	r1, [pc, #172]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d210      	bcs.n	80045d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4923      	ldr	r1, [pc, #140]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_ClockConfig+0x1ec>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e036      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4918      	ldr	r1, [pc, #96]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d009      	beq.n	8004614 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4910      	ldr	r1, [pc, #64]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 8004610:	4313      	orrs	r3, r2
 8004612:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004614:	f000 f824 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	091b      	lsrs	r3, r3, #4
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	490b      	ldr	r1, [pc, #44]	; (8004654 <HAL_RCC_ClockConfig+0x1f4>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <HAL_RCC_ClockConfig+0x1f8>)
 8004632:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004634:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1fc>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fa5d 	bl	8002af8 <HAL_InitTick>
 800463e:	4603      	mov	r3, r0
 8004640:	72fb      	strb	r3, [r7, #11]

  return status;
 8004642:	7afb      	ldrb	r3, [r7, #11]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40022000 	.word	0x40022000
 8004650:	40021000 	.word	0x40021000
 8004654:	0800fbcc 	.word	0x0800fbcc
 8004658:	20000404 	.word	0x20000404
 800465c:	20000408 	.word	0x20000408

08004660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466e:	4b3e      	ldr	r3, [pc, #248]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004678:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x34>
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b0c      	cmp	r3, #12
 800468c:	d121      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d11e      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004694:	4b34      	ldr	r3, [pc, #208]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046a0:	4b31      	ldr	r3, [pc, #196]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e005      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046b0:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046bc:	4a2b      	ldr	r2, [pc, #172]	; (800476c <HAL_RCC_GetSysClockFreq+0x10c>)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d102      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <HAL_RCC_GetSysClockFreq+0x110>)
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e004      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <HAL_RCC_GetSysClockFreq+0x114>)
 80046e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b0c      	cmp	r3, #12
 80046ec:	d134      	bne.n	8004758 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0xa6>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d003      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0xac>
 8004704:	e005      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_GetSysClockFreq+0x110>)
 8004708:	617b      	str	r3, [r7, #20]
      break;
 800470a:	e005      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_RCC_GetSysClockFreq+0x114>)
 800470e:	617b      	str	r3, [r7, #20]
      break;
 8004710:	e002      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	617b      	str	r3, [r7, #20]
      break;
 8004716:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	3301      	adds	r3, #1
 8004724:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	fb03 f202 	mul.w	r2, r3, r2
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_RCC_GetSysClockFreq+0x108>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	0e5b      	lsrs	r3, r3, #25
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	3301      	adds	r3, #1
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004758:	69bb      	ldr	r3, [r7, #24]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	0800fbe4 	.word	0x0800fbe4
 8004770:	00f42400 	.word	0x00f42400
 8004774:	007a1200 	.word	0x007a1200

08004778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCC_GetHCLKFreq+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20000404 	.word	0x20000404

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004794:	f7ff fff0 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0a1b      	lsrs	r3, r3, #8
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40021000 	.word	0x40021000
 80047b8:	0800fbdc 	.word	0x0800fbdc

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047c0:	f7ff ffda 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0adb      	lsrs	r3, r3, #11
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4904      	ldr	r1, [pc, #16]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000
 80047e4:	0800fbdc 	.word	0x0800fbdc

080047e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047f4:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004800:	f7ff f9ee 	bl	8003be0 <HAL_PWREx_GetVoltageRange>
 8004804:	6178      	str	r0, [r7, #20]
 8004806:	e014      	b.n	8004832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800480e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004812:	6593      	str	r3, [r2, #88]	; 0x58
 8004814:	4b22      	ldr	r3, [pc, #136]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004820:	f7ff f9de 	bl	8003be0 <HAL_PWREx_GetVoltageRange>
 8004824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800482c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004830:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004838:	d10b      	bne.n	8004852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	d919      	bls.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2ba0      	cmp	r3, #160	; 0xa0
 8004844:	d902      	bls.n	800484c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004846:	2302      	movs	r3, #2
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e013      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800484c:	2301      	movs	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e010      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d902      	bls.n	800485e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004858:	2303      	movs	r3, #3
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	e00a      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d102      	bne.n	800486a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004864:	2302      	movs	r3, #2
 8004866:	613b      	str	r3, [r7, #16]
 8004868:	e004      	b.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b70      	cmp	r3, #112	; 0x70
 800486e:	d101      	bne.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004870:	2301      	movs	r3, #1
 8004872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 0207 	bic.w	r2, r3, #7
 800487c:	4909      	ldr	r1, [pc, #36]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004884:	4b07      	ldr	r3, [pc, #28]	; (80048a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40022000 	.word	0x40022000

080048a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048b0:	2300      	movs	r3, #0
 80048b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b4:	2300      	movs	r3, #0
 80048b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d041      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048cc:	d02a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d2:	d824      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048de:	d81e      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e8:	d010      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048ea:	e018      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048ec:	4b86      	ldr	r3, [pc, #536]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a85      	ldr	r2, [pc, #532]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048f8:	e015      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fabb 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004906:	4603      	mov	r3, r0
 8004908:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800490a:	e00c      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3320      	adds	r3, #32
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fba6 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800491c:	e003      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	74fb      	strb	r3, [r7, #19]
      break;
 8004922:	e000      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800492c:	4b76      	ldr	r3, [pc, #472]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493a:	4973      	ldr	r1, [pc, #460]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004942:	e001      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800495e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800496a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b62      	ldr	r3, [pc, #392]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fa73 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fb5e 	bl	8005064 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049bc:	4b52      	ldr	r3, [pc, #328]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ca:	494f      	ldr	r1, [pc, #316]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80a0 	beq.w	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e6:	2300      	movs	r3, #0
 80049e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a00:	4b41      	ldr	r3, [pc, #260]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a04:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0c:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f8b6 	bl	8002b98 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a2e:	e009      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fe f8b2 	bl	8002b98 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d902      	bls.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	74fb      	strb	r3, [r7, #19]
        break;
 8004a42:	e005      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0ef      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d15c      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a56:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d019      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a74:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a80:	4b21      	ldr	r3, [pc, #132]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fe f871 	bl	8002b98 <HAL_GetTick>
 8004ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fe f86d 	bl	8002b98 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad2:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ec      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	4904      	ldr	r1, [pc, #16]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004afe:	e009      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
 8004b04:	e006      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b14:	7c7b      	ldrb	r3, [r7, #17]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d105      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1a:	4b9e      	ldr	r3, [pc, #632]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1e:	4a9d      	ldr	r2, [pc, #628]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b32:	4b98      	ldr	r3, [pc, #608]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b38:	f023 0203 	bic.w	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	4994      	ldr	r1, [pc, #592]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b54:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	f023 020c 	bic.w	r2, r3, #12
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	498c      	ldr	r1, [pc, #560]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b76:	4b87      	ldr	r3, [pc, #540]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	4983      	ldr	r1, [pc, #524]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b98:	4b7e      	ldr	r3, [pc, #504]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	497b      	ldr	r1, [pc, #492]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bba:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	4972      	ldr	r1, [pc, #456]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bdc:	4b6d      	ldr	r3, [pc, #436]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	496a      	ldr	r1, [pc, #424]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	4961      	ldr	r1, [pc, #388]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c20:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2e:	4959      	ldr	r1, [pc, #356]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	4950      	ldr	r1, [pc, #320]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	4948      	ldr	r1, [pc, #288]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	493f      	ldr	r1, [pc, #252]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d028      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca8:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb6:	4937      	ldr	r1, [pc, #220]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a31      	ldr	r2, [pc, #196]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd2:	60d3      	str	r3, [r2, #12]
 8004cd4:	e011      	b.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cde:	d10c      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f8c8 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004cf6:	7cfb      	ldrb	r3, [r7, #19]
 8004cf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d028      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d06:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	491f      	ldr	r1, [pc, #124]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d24:	d106      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d26:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a1a      	ldr	r2, [pc, #104]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d30:	60d3      	str	r3, [r2, #12]
 8004d32:	e011      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2101      	movs	r1, #1
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f899 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d02b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	4908      	ldr	r1, [pc, #32]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d82:	d109      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a02      	ldr	r2, [pc, #8]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
 8004d90:	e014      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3304      	adds	r3, #4
 8004da6:	2101      	movs	r1, #1
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f867 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02f      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dd6:	4928      	ldr	r1, [pc, #160]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f844 	bl	8004e7c <RCCEx_PLLSAI1_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d014      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	74bb      	strb	r3, [r7, #18]
 8004e02:	e011      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3320      	adds	r3, #32
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f925 	bl	8005064 <RCCEx_PLLSAI2_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e24:	7cfb      	ldrb	r3, [r7, #19]
 8004e26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e34:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	490d      	ldr	r1, [pc, #52]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e66:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000

08004e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e8a:	4b75      	ldr	r3, [pc, #468]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e96:	4b72      	ldr	r3, [pc, #456]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0203 	and.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10d      	bne.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eae:	4b6c      	ldr	r3, [pc, #432]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d047      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e044      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d018      	beq.n	8004f02 <RCCEx_PLLSAI1_Config+0x86>
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d825      	bhi.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d002      	beq.n	8004ede <RCCEx_PLLSAI1_Config+0x62>
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d009      	beq.n	8004ef0 <RCCEx_PLLSAI1_Config+0x74>
 8004edc:	e020      	b.n	8004f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ede:	4b60      	ldr	r3, [pc, #384]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d11d      	bne.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eee:	e01a      	b.n	8004f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f00:	e013      	b.n	8004f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f02:	4b57      	ldr	r3, [pc, #348]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10f      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e004      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f26:	bf00      	nop
 8004f28:	e002      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e000      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	4944      	ldr	r1, [pc, #272]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d17d      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f58:	4b41      	ldr	r3, [pc, #260]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a40      	ldr	r2, [pc, #256]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f64:	f7fd fe18 	bl	8002b98 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6a:	e009      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6c:	f7fd fe14 	bl	8002b98 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d902      	bls.n	8004f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7e:	e005      	b.n	8004f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f80:	4b37      	ldr	r3, [pc, #220]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d160      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6892      	ldr	r2, [r2, #8]
 8004fa8:	0211      	lsls	r1, r2, #8
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	68d2      	ldr	r2, [r2, #12]
 8004fae:	0912      	lsrs	r2, r2, #4
 8004fb0:	0452      	lsls	r2, r2, #17
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	492a      	ldr	r1, [pc, #168]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	610b      	str	r3, [r1, #16]
 8004fba:	e027      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d112      	bne.n	8004fe8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc2:	4b27      	ldr	r3, [pc, #156]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	0211      	lsls	r1, r2, #8
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6912      	ldr	r2, [r2, #16]
 8004fd8:	0852      	lsrs	r2, r2, #1
 8004fda:	3a01      	subs	r2, #1
 8004fdc:	0552      	lsls	r2, r2, #21
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	491f      	ldr	r1, [pc, #124]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
 8004fe6:	e011      	b.n	800500c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ff0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
 8004ff8:	0211      	lsls	r1, r2, #8
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6952      	ldr	r2, [r2, #20]
 8004ffe:	0852      	lsrs	r2, r2, #1
 8005000:	3a01      	subs	r2, #1
 8005002:	0652      	lsls	r2, r2, #25
 8005004:	430a      	orrs	r2, r1
 8005006:	4916      	ldr	r1, [pc, #88]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fd fdbe 	bl	8002b98 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fd fdba 	bl	8002b98 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
          break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4904      	ldr	r1, [pc, #16]	; (8005060 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000

08005064 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005072:	4b6a      	ldr	r3, [pc, #424]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800507e:	4b67      	ldr	r3, [pc, #412]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f003 0203 	and.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d10d      	bne.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
       ||
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005096:	4b61      	ldr	r3, [pc, #388]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
       ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d047      	beq.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
 80050ae:	e044      	b.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d018      	beq.n	80050ea <RCCEx_PLLSAI2_Config+0x86>
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d825      	bhi.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d002      	beq.n	80050c6 <RCCEx_PLLSAI2_Config+0x62>
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d009      	beq.n	80050d8 <RCCEx_PLLSAI2_Config+0x74>
 80050c4:	e020      	b.n	8005108 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050c6:	4b55      	ldr	r3, [pc, #340]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d11d      	bne.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d6:	e01a      	b.n	800510e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d116      	bne.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050e8:	e013      	b.n	8005112 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005106:	e006      	b.n	8005116 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e004      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005116:	bf00      	nop
    }

    if(status == HAL_OK)
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	3b01      	subs	r3, #1
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	430b      	orrs	r3, r1
 8005134:	4939      	ldr	r1, [pc, #228]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d167      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005140:	4b36      	ldr	r3, [pc, #216]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a35      	ldr	r2, [pc, #212]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514c:	f7fd fd24 	bl	8002b98 <HAL_GetTick>
 8005150:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005152:	e009      	b.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005154:	f7fd fd20 	bl	8002b98 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d902      	bls.n	8005168 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	73fb      	strb	r3, [r7, #15]
        break;
 8005166:	e005      	b.n	8005174 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005168:	4b2c      	ldr	r3, [pc, #176]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ef      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d14a      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d111      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005180:	4b26      	ldr	r3, [pc, #152]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	0211      	lsls	r1, r2, #8
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	68d2      	ldr	r2, [r2, #12]
 8005196:	0912      	lsrs	r2, r2, #4
 8005198:	0452      	lsls	r2, r2, #17
 800519a:	430a      	orrs	r2, r1
 800519c:	491f      	ldr	r1, [pc, #124]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	614b      	str	r3, [r1, #20]
 80051a2:	e011      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	0211      	lsls	r1, r2, #8
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6912      	ldr	r2, [r2, #16]
 80051ba:	0852      	lsrs	r2, r2, #1
 80051bc:	3a01      	subs	r2, #1
 80051be:	0652      	lsls	r2, r2, #25
 80051c0:	430a      	orrs	r2, r1
 80051c2:	4916      	ldr	r1, [pc, #88]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fd fce0 	bl	8002b98 <HAL_GetTick>
 80051d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051da:	e009      	b.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051dc:	f7fd fcdc 	bl	8002b98 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	73fb      	strb	r3, [r7, #15]
          break;
 80051ee:	e005      	b.n	80051fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ef      	beq.n	80051dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <RCCEx_PLLSAI2_Config+0x1b8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e049      	b.n	80052c6 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	795b      	ldrb	r3, [r3, #5]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fd fa34 	bl	80026b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0204 	orr.w	r2, r2, #4
 800525c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d104      	bne.n	8005276 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e027      	b.n	80052c6 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005276:	f7fd fc8f 	bl	8002b98 <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800527c:	e015      	b.n	80052aa <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800527e:	f7fd fc8b 	bl	8002b98 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d90e      	bls.n	80052aa <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2204      	movs	r2, #4
 800529e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e00d      	b.n	80052c6 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d0e2      	beq.n	800527e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	791b      	ldrb	r3, [r3, #4]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_RNG_GenerateRandomNumber+0x1a>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e044      	b.n	8005372 <HAL_RNG_GenerateRandomNumber+0xa4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	795b      	ldrb	r3, [r3, #5]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d133      	bne.n	8005360 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fd fc4b 	bl	8002b98 <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005304:	e018      	b.n	8005338 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005306:	f7fd fc47 	bl	8002b98 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d911      	bls.n	8005338 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b01      	cmp	r3, #1
 8005320:	d00a      	beq.n	8005338 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e01c      	b.n	8005372 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d1df      	bne.n	8005306 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	715a      	strb	r2, [r3, #5]
 800535e:	e004      	b.n	800536a <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2204      	movs	r2, #4
 8005364:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	711a      	strb	r2, [r3, #4]

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e049      	b.n	8005420 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7fd f9c9 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4610      	mov	r0, r2
 80053ba:	f000 f967 	bl	800568c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e047      	b.n	80054d0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a23      	ldr	r2, [pc, #140]	; (80054dc <HAL_TIM_Base_Start+0xb4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01d      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d018      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <HAL_TIM_Base_Start+0xb8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <HAL_TIM_Base_Start+0xbc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <HAL_TIM_Base_Start+0xc0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_TIM_Base_Start+0xc4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIM_Base_Start+0x66>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <HAL_TIM_Base_Start+0xc8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d115      	bne.n	80054ba <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b17      	ldr	r3, [pc, #92]	; (80054f4 <HAL_TIM_Base_Start+0xcc>)
 8005496:	4013      	ands	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b06      	cmp	r3, #6
 800549e:	d015      	beq.n	80054cc <HAL_TIM_Base_Start+0xa4>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a6:	d011      	beq.n	80054cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b8:	e008      	b.n	80054cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e000      	b.n	80054ce <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	00010007 	.word	0x00010007

080054f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIM_ConfigClockSource+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e0b6      	b.n	8005682 <HAL_TIM_ConfigClockSource+0x18a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005550:	d03e      	beq.n	80055d0 <HAL_TIM_ConfigClockSource+0xd8>
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005556:	f200 8087 	bhi.w	8005668 <HAL_TIM_ConfigClockSource+0x170>
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	f000 8086 	beq.w	800566e <HAL_TIM_ConfigClockSource+0x176>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	d87f      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d01a      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xaa>
 800556c:	2b70      	cmp	r3, #112	; 0x70
 800556e:	d87b      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d050      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x11e>
 8005574:	2b60      	cmp	r3, #96	; 0x60
 8005576:	d877      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d03c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0xfe>
 800557c:	2b50      	cmp	r3, #80	; 0x50
 800557e:	d873      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d058      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x13e>
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d86f      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d064      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15e>
 800558c:	2b30      	cmp	r3, #48	; 0x30
 800558e:	d86b      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d060      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15e>
 8005594:	2b20      	cmp	r3, #32
 8005596:	d867      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d05c      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15e>
 800559c:	2b10      	cmp	r3, #16
 800559e:	d05a      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15e>
 80055a0:	e062      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b2:	f000 f97f 	bl	80058b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	609a      	str	r2, [r3, #8]
      break;
 80055ce:	e04f      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e0:	f000 f968 	bl	80058b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f2:	609a      	str	r2, [r3, #8]
      break;
 80055f4:	e03c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005602:	461a      	mov	r2, r3
 8005604:	f000 f8dc 	bl	80057c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2150      	movs	r1, #80	; 0x50
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f935 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005614:	e02c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005622:	461a      	mov	r2, r3
 8005624:	f000 f8fb 	bl	800581e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2160      	movs	r1, #96	; 0x60
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f925 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005634:	e01c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	461a      	mov	r2, r3
 8005644:	f000 f8bc 	bl	80057c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f915 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005654:	e00c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f000 f90c 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005666:	e003      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      break;
 800566c:	e000      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800566e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d013      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056aa:	d00f      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3d      	ldr	r2, [pc, #244]	; (80057a4 <TIM_Base_SetConfig+0x118>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00b      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <TIM_Base_SetConfig+0x11c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d007      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <TIM_Base_SetConfig+0x120>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a3a      	ldr	r2, [pc, #232]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2f      	ldr	r2, [pc, #188]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <TIM_Base_SetConfig+0x118>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a2b      	ldr	r2, [pc, #172]	; (80057a8 <TIM_Base_SetConfig+0x11c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <TIM_Base_SetConfig+0x120>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a29      	ldr	r2, [pc, #164]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a28      	ldr	r2, [pc, #160]	; (80057b4 <TIM_Base_SetConfig+0x128>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <TIM_Base_SetConfig+0x12c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a26      	ldr	r2, [pc, #152]	; (80057bc <TIM_Base_SetConfig+0x130>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00f      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00b      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <TIM_Base_SetConfig+0x128>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d007      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <TIM_Base_SetConfig+0x12c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_Base_SetConfig+0xf8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <TIM_Base_SetConfig+0x130>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	615a      	str	r2, [r3, #20]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f023 0210 	bic.w	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	f043 0307 	orr.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e068      	b.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2e      	ldr	r2, [pc, #184]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2d      	ldr	r2, [pc, #180]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d108      	bne.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005946:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4313      	orrs	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d018      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000

08005a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e040      	b.n	8005a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc feb8 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	; 0x24
 8005a30:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fc34 	bl	80062b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f979 	bl	8005d48 <UART_SetConfig>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e01b      	b.n	8005a98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fcb3 	bl	80063fc <UART_CheckIdleState>
 8005a96:	4603      	mov	r3, r0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d178      	bne.n	8005baa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_UART_Transmit+0x24>
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e071      	b.n	8005bac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2221      	movs	r2, #33	; 0x21
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad6:	f7fd f85f 	bl	8002b98 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d108      	bne.n	8005b08 <HAL_UART_Transmit+0x68>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e003      	b.n	8005b10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b10:	e030      	b.n	8005b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2180      	movs	r1, #128	; 0x80
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fd15 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e03c      	b.n	8005bac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b44:	b292      	uxth	r2, r2
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	3302      	adds	r3, #2
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	e008      	b.n	8005b62 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1c8      	bne.n	8005b12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2200      	movs	r2, #0
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fcde 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e005      	b.n	8005bac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	f040 80b6 	bne.w	8005d3c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_UART_Receive+0x28>
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0ae      	b.n	8005d3e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2222      	movs	r2, #34	; 0x22
 8005bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bf6:	f7fc ffcf 	bl	8002b98 <HAL_GetTick>
 8005bfa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	88fa      	ldrh	r2, [r7, #6]
 8005c00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c14:	d10e      	bne.n	8005c34 <HAL_UART_Receive+0x80>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d105      	bne.n	8005c2a <HAL_UART_Receive+0x76>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c28:	e02d      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c32:	e028      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_UART_Receive+0xa4>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_UART_Receive+0x9a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c4c:	e01b      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	227f      	movs	r2, #127	; 0x7f
 8005c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c56:	e016      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c60:	d10d      	bne.n	8005c7e <HAL_UART_Receive+0xca>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <HAL_UART_Receive+0xc0>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	227f      	movs	r2, #127	; 0x7f
 8005c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c72:	e008      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	223f      	movs	r2, #63	; 0x3f
 8005c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c7c:	e003      	b.n	8005c86 <HAL_UART_Receive+0xd2>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c96:	d108      	bne.n	8005caa <HAL_UART_Receive+0xf6>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d104      	bne.n	8005caa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	e003      	b.n	8005cb2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cb2:	e037      	b.n	8005d24 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2120      	movs	r1, #32
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 fc44 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e033      	b.n	8005d3e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	8a7b      	ldrh	r3, [r7, #18]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	e00d      	b.n	8005d12 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	8a7b      	ldrh	r3, [r7, #18]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4013      	ands	r3, r2
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1c1      	bne.n	8005cb4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b08a      	sub	sp, #40	; 0x28
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	431a      	orrs	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4ba4      	ldr	r3, [pc, #656]	; (8006008 <UART_SetConfig+0x2c0>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a99      	ldr	r2, [pc, #612]	; (800600c <UART_SetConfig+0x2c4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d004      	beq.n	8005db4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	4313      	orrs	r3, r2
 8005db2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a90      	ldr	r2, [pc, #576]	; (8006010 <UART_SetConfig+0x2c8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d126      	bne.n	8005e20 <UART_SetConfig+0xd8>
 8005dd2:	4b90      	ldr	r3, [pc, #576]	; (8006014 <UART_SetConfig+0x2cc>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f003 0303 	and.w	r3, r3, #3
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d81b      	bhi.n	8005e18 <UART_SetConfig+0xd0>
 8005de0:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0xa0>)
 8005de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de6:	bf00      	nop
 8005de8:	08005df9 	.word	0x08005df9
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	08005e01 	.word	0x08005e01
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfe:	e116      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e06:	e112      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0e:	e10e      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e16:	e10a      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1e:	e106      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a7c      	ldr	r2, [pc, #496]	; (8006018 <UART_SetConfig+0x2d0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d138      	bne.n	8005e9c <UART_SetConfig+0x154>
 8005e2a:	4b7a      	ldr	r3, [pc, #488]	; (8006014 <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d82d      	bhi.n	8005e94 <UART_SetConfig+0x14c>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0xf8>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e75 	.word	0x08005e75
 8005e44:	08005e95 	.word	0x08005e95
 8005e48:	08005e95 	.word	0x08005e95
 8005e4c:	08005e95 	.word	0x08005e95
 8005e50:	08005e85 	.word	0x08005e85
 8005e54:	08005e95 	.word	0x08005e95
 8005e58:	08005e95 	.word	0x08005e95
 8005e5c:	08005e95 	.word	0x08005e95
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e0d8      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e0d4      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e0d0      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e0cc      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e0c8      	b.n	800602e <UART_SetConfig+0x2e6>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5e      	ldr	r2, [pc, #376]	; (800601c <UART_SetConfig+0x2d4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d125      	bne.n	8005ef2 <UART_SetConfig+0x1aa>
 8005ea6:	4b5b      	ldr	r3, [pc, #364]	; (8006014 <UART_SetConfig+0x2cc>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d016      	beq.n	8005ee2 <UART_SetConfig+0x19a>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d818      	bhi.n	8005eea <UART_SetConfig+0x1a2>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d00a      	beq.n	8005ed2 <UART_SetConfig+0x18a>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d814      	bhi.n	8005eea <UART_SetConfig+0x1a2>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <UART_SetConfig+0x182>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d008      	beq.n	8005eda <UART_SetConfig+0x192>
 8005ec8:	e00f      	b.n	8005eea <UART_SetConfig+0x1a2>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed0:	e0ad      	b.n	800602e <UART_SetConfig+0x2e6>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed8:	e0a9      	b.n	800602e <UART_SetConfig+0x2e6>
 8005eda:	2304      	movs	r3, #4
 8005edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee0:	e0a5      	b.n	800602e <UART_SetConfig+0x2e6>
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee8:	e0a1      	b.n	800602e <UART_SetConfig+0x2e6>
 8005eea:	2310      	movs	r3, #16
 8005eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef0:	e09d      	b.n	800602e <UART_SetConfig+0x2e6>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a4a      	ldr	r2, [pc, #296]	; (8006020 <UART_SetConfig+0x2d8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d125      	bne.n	8005f48 <UART_SetConfig+0x200>
 8005efc:	4b45      	ldr	r3, [pc, #276]	; (8006014 <UART_SetConfig+0x2cc>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f06:	2bc0      	cmp	r3, #192	; 0xc0
 8005f08:	d016      	beq.n	8005f38 <UART_SetConfig+0x1f0>
 8005f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f0c:	d818      	bhi.n	8005f40 <UART_SetConfig+0x1f8>
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d00a      	beq.n	8005f28 <UART_SetConfig+0x1e0>
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d814      	bhi.n	8005f40 <UART_SetConfig+0x1f8>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <UART_SetConfig+0x1d8>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d008      	beq.n	8005f30 <UART_SetConfig+0x1e8>
 8005f1e:	e00f      	b.n	8005f40 <UART_SetConfig+0x1f8>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e082      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e07e      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f36:	e07a      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3e:	e076      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f46:	e072      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a35      	ldr	r2, [pc, #212]	; (8006024 <UART_SetConfig+0x2dc>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d12a      	bne.n	8005fa8 <UART_SetConfig+0x260>
 8005f52:	4b30      	ldr	r3, [pc, #192]	; (8006014 <UART_SetConfig+0x2cc>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f60:	d01a      	beq.n	8005f98 <UART_SetConfig+0x250>
 8005f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f66:	d81b      	bhi.n	8005fa0 <UART_SetConfig+0x258>
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d00c      	beq.n	8005f88 <UART_SetConfig+0x240>
 8005f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f72:	d815      	bhi.n	8005fa0 <UART_SetConfig+0x258>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <UART_SetConfig+0x238>
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7c:	d008      	beq.n	8005f90 <UART_SetConfig+0x248>
 8005f7e:	e00f      	b.n	8005fa0 <UART_SetConfig+0x258>
 8005f80:	2300      	movs	r3, #0
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e052      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e04e      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e04a      	b.n	800602e <UART_SetConfig+0x2e6>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e046      	b.n	800602e <UART_SetConfig+0x2e6>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa6:	e042      	b.n	800602e <UART_SetConfig+0x2e6>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a17      	ldr	r2, [pc, #92]	; (800600c <UART_SetConfig+0x2c4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d13a      	bne.n	8006028 <UART_SetConfig+0x2e0>
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <UART_SetConfig+0x2cc>)
 8005fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc0:	d01a      	beq.n	8005ff8 <UART_SetConfig+0x2b0>
 8005fc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fc6:	d81b      	bhi.n	8006000 <UART_SetConfig+0x2b8>
 8005fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fcc:	d00c      	beq.n	8005fe8 <UART_SetConfig+0x2a0>
 8005fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd2:	d815      	bhi.n	8006000 <UART_SetConfig+0x2b8>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <UART_SetConfig+0x298>
 8005fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fdc:	d008      	beq.n	8005ff0 <UART_SetConfig+0x2a8>
 8005fde:	e00f      	b.n	8006000 <UART_SetConfig+0x2b8>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e022      	b.n	800602e <UART_SetConfig+0x2e6>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e01e      	b.n	800602e <UART_SetConfig+0x2e6>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e01a      	b.n	800602e <UART_SetConfig+0x2e6>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e016      	b.n	800602e <UART_SetConfig+0x2e6>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e012      	b.n	800602e <UART_SetConfig+0x2e6>
 8006008:	efff69f3 	.word	0xefff69f3
 800600c:	40008000 	.word	0x40008000
 8006010:	40013800 	.word	0x40013800
 8006014:	40021000 	.word	0x40021000
 8006018:	40004400 	.word	0x40004400
 800601c:	40004800 	.word	0x40004800
 8006020:	40004c00 	.word	0x40004c00
 8006024:	40005000 	.word	0x40005000
 8006028:	2310      	movs	r3, #16
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a9f      	ldr	r2, [pc, #636]	; (80062b0 <UART_SetConfig+0x568>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d17a      	bne.n	800612e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800603c:	2b08      	cmp	r3, #8
 800603e:	d824      	bhi.n	800608a <UART_SetConfig+0x342>
 8006040:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <UART_SetConfig+0x300>)
 8006042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006046:	bf00      	nop
 8006048:	0800606d 	.word	0x0800606d
 800604c:	0800608b 	.word	0x0800608b
 8006050:	08006075 	.word	0x08006075
 8006054:	0800608b 	.word	0x0800608b
 8006058:	0800607b 	.word	0x0800607b
 800605c:	0800608b 	.word	0x0800608b
 8006060:	0800608b 	.word	0x0800608b
 8006064:	0800608b 	.word	0x0800608b
 8006068:	08006083 	.word	0x08006083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fe fb90 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8006070:	61f8      	str	r0, [r7, #28]
        break;
 8006072:	e010      	b.n	8006096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006074:	4b8f      	ldr	r3, [pc, #572]	; (80062b4 <UART_SetConfig+0x56c>)
 8006076:	61fb      	str	r3, [r7, #28]
        break;
 8006078:	e00d      	b.n	8006096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800607a:	f7fe faf1 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800607e:	61f8      	str	r0, [r7, #28]
        break;
 8006080:	e009      	b.n	8006096 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006086:	61fb      	str	r3, [r7, #28]
        break;
 8006088:	e005      	b.n	8006096 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80fb 	beq.w	8006294 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	4613      	mov	r3, r2
 80060a4:	005b      	lsls	r3, r3, #1
 80060a6:	4413      	add	r3, r2
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d305      	bcc.n	80060ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d903      	bls.n	80060c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060c0:	e0e8      	b.n	8006294 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	2200      	movs	r2, #0
 80060c6:	461c      	mov	r4, r3
 80060c8:	4615      	mov	r5, r2
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	022b      	lsls	r3, r5, #8
 80060d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060d8:	0222      	lsls	r2, r4, #8
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	6849      	ldr	r1, [r1, #4]
 80060de:	0849      	lsrs	r1, r1, #1
 80060e0:	2000      	movs	r0, #0
 80060e2:	4688      	mov	r8, r1
 80060e4:	4681      	mov	r9, r0
 80060e6:	eb12 0a08 	adds.w	sl, r2, r8
 80060ea:	eb43 0b09 	adc.w	fp, r3, r9
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060fc:	4650      	mov	r0, sl
 80060fe:	4659      	mov	r1, fp
 8006100:	f7fa fdc2 	bl	8000c88 <__aeabi_uldivmod>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4613      	mov	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006112:	d308      	bcc.n	8006126 <UART_SetConfig+0x3de>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611a:	d204      	bcs.n	8006126 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	60da      	str	r2, [r3, #12]
 8006124:	e0b6      	b.n	8006294 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800612c:	e0b2      	b.n	8006294 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006136:	d15e      	bne.n	80061f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800613c:	2b08      	cmp	r3, #8
 800613e:	d828      	bhi.n	8006192 <UART_SetConfig+0x44a>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0x400>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	0800616d 	.word	0x0800616d
 800614c:	08006175 	.word	0x08006175
 8006150:	0800617d 	.word	0x0800617d
 8006154:	08006193 	.word	0x08006193
 8006158:	08006183 	.word	0x08006183
 800615c:	08006193 	.word	0x08006193
 8006160:	08006193 	.word	0x08006193
 8006164:	08006193 	.word	0x08006193
 8006168:	0800618b 	.word	0x0800618b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800616c:	f7fe fb10 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8006170:	61f8      	str	r0, [r7, #28]
        break;
 8006172:	e014      	b.n	800619e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006174:	f7fe fb22 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8006178:	61f8      	str	r0, [r7, #28]
        break;
 800617a:	e010      	b.n	800619e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800617c:	4b4d      	ldr	r3, [pc, #308]	; (80062b4 <UART_SetConfig+0x56c>)
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e00d      	b.n	800619e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006182:	f7fe fa6d 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006186:	61f8      	str	r0, [r7, #28]
        break;
 8006188:	e009      	b.n	800619e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800618a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800618e:	61fb      	str	r3, [r7, #28]
        break;
 8006190:	e005      	b.n	800619e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800619c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d077      	beq.n	8006294 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	005a      	lsls	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	2b0f      	cmp	r3, #15
 80061be:	d916      	bls.n	80061ee <UART_SetConfig+0x4a6>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c6:	d212      	bcs.n	80061ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f023 030f 	bic.w	r3, r3, #15
 80061d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	b29a      	uxth	r2, r3
 80061de:	8afb      	ldrh	r3, [r7, #22]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	8afa      	ldrh	r2, [r7, #22]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e052      	b.n	8006294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061f4:	e04e      	b.n	8006294 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d827      	bhi.n	800624e <UART_SetConfig+0x506>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0x4bc>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	08006229 	.word	0x08006229
 8006208:	08006231 	.word	0x08006231
 800620c:	08006239 	.word	0x08006239
 8006210:	0800624f 	.word	0x0800624f
 8006214:	0800623f 	.word	0x0800623f
 8006218:	0800624f 	.word	0x0800624f
 800621c:	0800624f 	.word	0x0800624f
 8006220:	0800624f 	.word	0x0800624f
 8006224:	08006247 	.word	0x08006247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fe fab2 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800622c:	61f8      	str	r0, [r7, #28]
        break;
 800622e:	e014      	b.n	800625a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fac4 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8006234:	61f8      	str	r0, [r7, #28]
        break;
 8006236:	e010      	b.n	800625a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <UART_SetConfig+0x56c>)
 800623a:	61fb      	str	r3, [r7, #28]
        break;
 800623c:	e00d      	b.n	800625a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800623e:	f7fe fa0f 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006242:	61f8      	str	r0, [r7, #28]
        break;
 8006244:	e009      	b.n	800625a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	61fb      	str	r3, [r7, #28]
        break;
 800624c:	e005      	b.n	800625a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006258:	bf00      	nop
    }

    if (pclk != 0U)
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d019      	beq.n	8006294 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	085a      	lsrs	r2, r3, #1
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	441a      	add	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006272:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b0f      	cmp	r3, #15
 8006278:	d909      	bls.n	800628e <UART_SetConfig+0x546>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006280:	d205      	bcs.n	800628e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	b29a      	uxth	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60da      	str	r2, [r3, #12]
 800628c:	e002      	b.n	8006294 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	; 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ae:	bf00      	nop
 80062b0:	40008000 	.word	0x40008000
 80062b4:	00f42400 	.word	0x00f42400

080062b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b6:	d10a      	bne.n	80063ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b098      	sub	sp, #96	; 0x60
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800640c:	f7fc fbc4 	bl	8002b98 <HAL_GetTick>
 8006410:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d12e      	bne.n	800647e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f88c 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d021      	beq.n	800647e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644e:	653b      	str	r3, [r7, #80]	; 0x50
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006458:	647b      	str	r3, [r7, #68]	; 0x44
 800645a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e062      	b.n	8006544 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d149      	bne.n	8006520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f856 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03c      	beq.n	8006520 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	623b      	str	r3, [r7, #32]
   return(result);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c4:	633b      	str	r3, [r7, #48]	; 0x30
 80064c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064f8:	61fa      	str	r2, [r7, #28]
 80064fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	617b      	str	r3, [r7, #20]
   return(result);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e011      	b.n	8006544 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3758      	adds	r7, #88	; 0x58
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655c:	e049      	b.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006564:	d045      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fc fb17 	bl	8002b98 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <UART_WaitOnFlagUntilTimeout+0x30>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e048      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d031      	beq.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b08      	cmp	r3, #8
 800659a:	d110      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2208      	movs	r2, #8
 80065a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f838 	bl	800661a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2208      	movs	r2, #8
 80065ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e029      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065cc:	d111      	bne.n	80065f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f81e 	bl	800661a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e00f      	b.n	8006612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4013      	ands	r3, r2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	bf0c      	ite	eq
 8006602:	2301      	moveq	r3, #1
 8006604:	2300      	movne	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	429a      	cmp	r2, r3
 800660e:	d0a6      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800661a:	b480      	push	{r7}
 800661c:	b095      	sub	sp, #84	; 0x54
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006640:	643b      	str	r3, [r7, #64]	; 0x40
 8006642:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800664e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	61fb      	str	r3, [r7, #28]
   return(result);
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f023 0301 	bic.w	r3, r3, #1
 800666a:	64bb      	str	r3, [r7, #72]	; 0x48
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006674:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e5      	bne.n	8006654 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	2b01      	cmp	r3, #1
 800668e:	d118      	bne.n	80066c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	60bb      	str	r3, [r7, #8]
   return(result);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f023 0310 	bic.w	r3, r3, #16
 80066a4:	647b      	str	r3, [r7, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b2:	6979      	ldr	r1, [r7, #20]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	613b      	str	r3, [r7, #16]
   return(result);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e6      	bne.n	8006690 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066d6:	bf00      	nop
 80066d8:	3754      	adds	r7, #84	; 0x54
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <__NVIC_SetPriority>:
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db0a      	blt.n	800670e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	490c      	ldr	r1, [pc, #48]	; (8006730 <__NVIC_SetPriority+0x4c>)
 80066fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006702:	0112      	lsls	r2, r2, #4
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	440b      	add	r3, r1
 8006708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800670c:	e00a      	b.n	8006724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4908      	ldr	r1, [pc, #32]	; (8006734 <__NVIC_SetPriority+0x50>)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	3b04      	subs	r3, #4
 800671c:	0112      	lsls	r2, r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	440b      	add	r3, r1
 8006722:	761a      	strb	r2, [r3, #24]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	e000e100 	.word	0xe000e100
 8006734:	e000ed00 	.word	0xe000ed00

08006738 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800673c:	2100      	movs	r1, #0
 800673e:	f06f 0004 	mvn.w	r0, #4
 8006742:	f7ff ffcf 	bl	80066e4 <__NVIC_SetPriority>
#endif
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006752:	f3ef 8305 	mrs	r3, IPSR
 8006756:	603b      	str	r3, [r7, #0]
  return(result);
 8006758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800675e:	f06f 0305 	mvn.w	r3, #5
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e00c      	b.n	8006780 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <osKernelInitialize+0x44>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <osKernelInitialize+0x44>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006774:	2300      	movs	r3, #0
 8006776:	607b      	str	r3, [r7, #4]
 8006778:	e002      	b.n	8006780 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006780:	687b      	ldr	r3, [r7, #4]
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000fe8 	.word	0x20000fe8

08006794 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800679a:	f3ef 8305 	mrs	r3, IPSR
 800679e:	603b      	str	r3, [r7, #0]
  return(result);
 80067a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80067a6:	f06f 0305 	mvn.w	r3, #5
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	e010      	b.n	80067d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <osKernelStart+0x48>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d109      	bne.n	80067ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067b6:	f7ff ffbf 	bl	8006738 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <osKernelStart+0x48>)
 80067bc:	2202      	movs	r2, #2
 80067be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067c0:	f001 fdb2 	bl	8008328 <vTaskStartScheduler>
      stat = osOK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	e002      	b.n	80067d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067d0:	687b      	ldr	r3, [r7, #4]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20000fe8 	.word	0x20000fe8

080067e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08e      	sub	sp, #56	; 0x38
 80067e4:	af04      	add	r7, sp, #16
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067f0:	f3ef 8305 	mrs	r3, IPSR
 80067f4:	617b      	str	r3, [r7, #20]
  return(result);
 80067f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d17f      	bne.n	80068fc <osThreadNew+0x11c>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d07c      	beq.n	80068fc <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006806:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006808:	2318      	movs	r3, #24
 800680a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800680c:	2300      	movs	r3, #0
 800680e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006810:	f04f 33ff 	mov.w	r3, #4294967295
 8006814:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d045      	beq.n	80068a8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <osThreadNew+0x4a>
        name = attr->name;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <osThreadNew+0x70>
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b38      	cmp	r3, #56	; 0x38
 8006842:	d805      	bhi.n	8006850 <osThreadNew+0x70>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <osThreadNew+0x74>
        return (NULL);
 8006850:	2300      	movs	r3, #0
 8006852:	e054      	b.n	80068fe <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	089b      	lsrs	r3, r3, #2
 8006862:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00e      	beq.n	800688a <osThreadNew+0xaa>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	2ba7      	cmp	r3, #167	; 0xa7
 8006872:	d90a      	bls.n	800688a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <osThreadNew+0xaa>
        mem = 1;
 8006884:	2301      	movs	r3, #1
 8006886:	61bb      	str	r3, [r7, #24]
 8006888:	e010      	b.n	80068ac <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10c      	bne.n	80068ac <osThreadNew+0xcc>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <osThreadNew+0xcc>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <osThreadNew+0xcc>
          mem = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e001      	b.n	80068ac <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d110      	bne.n	80068d4 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068ba:	9202      	str	r2, [sp, #8]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6a3a      	ldr	r2, [r7, #32]
 80068c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f001 fb41 	bl	8007f50 <xTaskCreateStatic>
 80068ce:	4603      	mov	r3, r0
 80068d0:	613b      	str	r3, [r7, #16]
 80068d2:	e013      	b.n	80068fc <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d110      	bne.n	80068fc <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 fb8c 	bl	800800a <xTaskCreate>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d001      	beq.n	80068fc <osThreadNew+0x11c>
            hTask = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068fc:	693b      	ldr	r3, [r7, #16]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800690e:	f3ef 8305 	mrs	r3, IPSR
 8006912:	603b      	str	r3, [r7, #0]
  return(result);
 8006914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <osThreadYield+0x1a>
    stat = osErrorISR;
 800691a:	f06f 0305 	mvn.w	r3, #5
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	e009      	b.n	8006936 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8006926:	4b07      	ldr	r3, [pc, #28]	; (8006944 <osThreadYield+0x3c>)
 8006928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8006936:	687b      	ldr	r3, [r7, #4]
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006954:	f3ef 8305 	mrs	r3, IPSR
 8006958:	60bb      	str	r3, [r7, #8]
  return(result);
 800695a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d174      	bne.n	8006a4a <osMutexNew+0x102>
    if (attr != NULL) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <osMutexNew+0x26>
      type = attr->attr_bits;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	e001      	b.n	8006972 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <osMutexNew+0x3a>
      rmtx = 1U;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e001      	b.n	8006986 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d15c      	bne.n	8006a4a <osMutexNew+0x102>
      mem = -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295
 8006994:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d015      	beq.n	80069c8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d006      	beq.n	80069b2 <osMutexNew+0x6a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b4f      	cmp	r3, #79	; 0x4f
 80069aa:	d902      	bls.n	80069b2 <osMutexNew+0x6a>
          mem = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e00c      	b.n	80069cc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d108      	bne.n	80069cc <osMutexNew+0x84>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d104      	bne.n	80069cc <osMutexNew+0x84>
            mem = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e001      	b.n	80069cc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d112      	bne.n	80069f8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4619      	mov	r1, r3
 80069de:	2004      	movs	r0, #4
 80069e0:	f000 fc69 	bl	80072b6 <xQueueCreateMutexStatic>
 80069e4:	61f8      	str	r0, [r7, #28]
 80069e6:	e016      	b.n	8006a16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	4619      	mov	r1, r3
 80069ee:	2001      	movs	r0, #1
 80069f0:	f000 fc61 	bl	80072b6 <xQueueCreateMutexStatic>
 80069f4:	61f8      	str	r0, [r7, #28]
 80069f6:	e00e      	b.n	8006a16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006a04:	2004      	movs	r0, #4
 8006a06:	f000 fc3e 	bl	8007286 <xQueueCreateMutex>
 8006a0a:	61f8      	str	r0, [r7, #28]
 8006a0c:	e003      	b.n	8006a16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006a0e:	2001      	movs	r0, #1
 8006a10:	f000 fc39 	bl	8007286 <xQueueCreateMutex>
 8006a14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <osMutexNew+0xee>
        if (attr != NULL) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <osMutexNew+0xe2>
          name = attr->name;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e001      	b.n	8006a2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	69f8      	ldr	r0, [r7, #28]
 8006a32:	f001 fa2f 	bl	8007e94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d006      	beq.n	8006a4a <osMutexNew+0x102>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006a7e:	f06f 0305 	mvn.w	r3, #5
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e02c      	b.n	8006ae0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006a8c:	f06f 0303 	mvn.w	r3, #3
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	e025      	b.n	8006ae0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d011      	beq.n	8006abe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6938      	ldr	r0, [r7, #16]
 8006a9e:	f000 fc59 	bl	8007354 <xQueueTakeMutexRecursive>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d01b      	beq.n	8006ae0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006aae:	f06f 0301 	mvn.w	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	e014      	b.n	8006ae0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ab6:	f06f 0302 	mvn.w	r3, #2
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e010      	b.n	8006ae0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6938      	ldr	r0, [r7, #16]
 8006ac2:	f000 fef7 	bl	80078b4 <xQueueSemaphoreTake>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d009      	beq.n	8006ae0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006ad2:	f06f 0301 	mvn.w	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e002      	b.n	8006ae0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ada:	f06f 0302 	mvn.w	r3, #2
 8006ade:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006ae0:	697b      	ldr	r3, [r7, #20]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b086      	sub	sp, #24
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b06:	f3ef 8305 	mrs	r3, IPSR
 8006b0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osMutexRelease+0x30>
    stat = osErrorISR;
 8006b12:	f06f 0305 	mvn.w	r3, #5
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e01f      	b.n	8006b5a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d103      	bne.n	8006b28 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006b20:	f06f 0303 	mvn.w	r3, #3
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	e018      	b.n	8006b5a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f000 fbdc 	bl	80072ec <xQueueGiveMutexRecursive>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d00f      	beq.n	8006b5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b3a:	f06f 0302 	mvn.w	r3, #2
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e00b      	b.n	8006b5a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006b42:	2300      	movs	r3, #0
 8006b44:	2200      	movs	r2, #0
 8006b46:	2100      	movs	r1, #0
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f000 fc39 	bl	80073c0 <xQueueGenericSend>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d002      	beq.n	8006b5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b54:	f06f 0302 	mvn.w	r3, #2
 8006b58:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b5a:	697b      	ldr	r3, [r7, #20]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3718      	adds	r7, #24
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b74:	f3ef 8305 	mrs	r3, IPSR
 8006b78:	613b      	str	r3, [r7, #16]
  return(result);
 8006b7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d15f      	bne.n	8006c40 <osMessageQueueNew+0xdc>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d05c      	beq.n	8006c40 <osMessageQueueNew+0xdc>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d059      	beq.n	8006c40 <osMessageQueueNew+0xdc>
    mem = -1;
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d029      	beq.n	8006bec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d012      	beq.n	8006bc6 <osMessageQueueNew+0x62>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b4f      	cmp	r3, #79	; 0x4f
 8006ba6:	d90e      	bls.n	8006bc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695a      	ldr	r2, [r3, #20]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <osMessageQueueNew+0x62>
        mem = 1;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e014      	b.n	8006bf0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d110      	bne.n	8006bf0 <osMessageQueueNew+0x8c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <osMessageQueueNew+0x8c>
          mem = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	e001      	b.n	8006bf0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d10b      	bne.n	8006c0e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2100      	movs	r1, #0
 8006c00:	9100      	str	r1, [sp, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fa4f 	bl	80070a8 <xQueueGenericCreateStatic>
 8006c0a:	61f8      	str	r0, [r7, #28]
 8006c0c:	e008      	b.n	8006c20 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006c14:	2200      	movs	r2, #0
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fabd 	bl	8007198 <xQueueGenericCreate>
 8006c1e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00c      	beq.n	8006c40 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e001      	b.n	8006c38 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	69f8      	ldr	r0, [r7, #28]
 8006c3c:	f001 f92a 	bl	8007e94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c40:	69fb      	ldr	r3, [r7, #28]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
	...

08006c4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c64:	f3ef 8305 	mrs	r3, IPSR
 8006c68:	617b      	str	r3, [r7, #20]
  return(result);
 8006c6a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d028      	beq.n	8006cc2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <osMessageQueuePut+0x36>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <osMessageQueuePut+0x36>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c82:	f06f 0303 	mvn.w	r3, #3
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e038      	b.n	8006cfc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006c8e:	f107 0210 	add.w	r2, r7, #16
 8006c92:	2300      	movs	r3, #0
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	69b8      	ldr	r0, [r7, #24]
 8006c98:	f000 fc90 	bl	80075bc <xQueueGenericSendFromISR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d003      	beq.n	8006caa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006ca2:	f06f 0302 	mvn.w	r3, #2
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e028      	b.n	8006cfc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d025      	beq.n	8006cfc <osMessageQueuePut+0xb0>
 8006cb0:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <osMessageQueuePut+0xbc>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	e01c      	b.n	8006cfc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <osMessageQueuePut+0x82>
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006cce:	f06f 0303 	mvn.w	r3, #3
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	e012      	b.n	8006cfc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	68b9      	ldr	r1, [r7, #8]
 8006cdc:	69b8      	ldr	r0, [r7, #24]
 8006cde:	f000 fb6f 	bl	80073c0 <xQueueGenericSend>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d009      	beq.n	8006cfc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006cee:	f06f 0301 	mvn.w	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e002      	b.n	8006cfc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006cf6:	f06f 0302 	mvn.w	r3, #2
 8006cfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d22:	f3ef 8305 	mrs	r3, IPSR
 8006d26:	617b      	str	r3, [r7, #20]
  return(result);
 8006d28:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d028      	beq.n	8006d80 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <osMessageQueueGet+0x34>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <osMessageQueueGet+0x34>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006d40:	f06f 0303 	mvn.w	r3, #3
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	e037      	b.n	8006db8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	461a      	mov	r2, r3
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	69b8      	ldr	r0, [r7, #24]
 8006d56:	f000 feb9 	bl	8007acc <xQueueReceiveFromISR>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d003      	beq.n	8006d68 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006d60:	f06f 0302 	mvn.w	r3, #2
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	e027      	b.n	8006db8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d024      	beq.n	8006db8 <osMessageQueueGet+0xac>
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <osMessageQueueGet+0xb8>)
 8006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	e01b      	b.n	8006db8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <osMessageQueueGet+0x80>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006d8c:	f06f 0303 	mvn.w	r3, #3
 8006d90:	61fb      	str	r3, [r7, #28]
 8006d92:	e011      	b.n	8006db8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	69b8      	ldr	r0, [r7, #24]
 8006d9a:	f000 fcab 	bl	80076f4 <xQueueReceive>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d009      	beq.n	8006db8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006daa:	f06f 0301 	mvn.w	r3, #1
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	e002      	b.n	8006db8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006db2:	f06f 0302 	mvn.w	r3, #2
 8006db6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006db8:	69fb      	ldr	r3, [r7, #28]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3720      	adds	r7, #32
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e00e      	b.n	8006dfe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de0:	f3ef 8305 	mrs	r3, IPSR
 8006de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8006de6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d004      	beq.n	8006df6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006dec:	6938      	ldr	r0, [r7, #16]
 8006dee:	f000 ff0b 	bl	8007c08 <uxQueueMessagesWaitingFromISR>
 8006df2:	6178      	str	r0, [r7, #20]
 8006df4:	e003      	b.n	8006dfe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006df6:	6938      	ldr	r0, [r7, #16]
 8006df8:	f000 fee8 	bl	8007bcc <uxQueueMessagesWaiting>
 8006dfc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006dfe:	697b      	ldr	r3, [r7, #20]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <vApplicationGetIdleTaskMemory+0x30>)
 8006e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e26:	601a      	str	r2, [r3, #0]
}
 8006e28:	bf00      	nop
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	20000fec 	.word	0x20000fec
 8006e38:	20001094 	.word	0x20001094

08006e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a07      	ldr	r2, [pc, #28]	; (8006e68 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4a06      	ldr	r2, [pc, #24]	; (8006e6c <vApplicationGetTimerTaskMemory+0x30>)
 8006e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5a:	601a      	str	r2, [r3, #0]
}
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20001494 	.word	0x20001494
 8006e6c:	2000153c 	.word	0x2000153c

08006e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f103 0208 	add.w	r2, r3, #8
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f04f 32ff 	mov.w	r2, #4294967295
 8006e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f103 0208 	add.w	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f103 0208 	add.w	r2, r3, #8
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f12:	b480      	push	{r7}
 8006f14:	b085      	sub	sp, #20
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d103      	bne.n	8006f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	e00c      	b.n	8006f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3308      	adds	r3, #8
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <vListInsert+0x2e>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d2f6      	bcs.n	8006f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6892      	ldr	r2, [r2, #8]
 8006f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	6852      	ldr	r2, [r2, #4]
 8006fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d103      	bne.n	8006fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	1e5a      	subs	r2, r3, #1
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007002:	f002 fc57 	bl	80098b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	441a      	add	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	3b01      	subs	r3, #1
 8007034:	68f9      	ldr	r1, [r7, #12]
 8007036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22ff      	movs	r2, #255	; 0xff
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d114      	bne.n	8007082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01a      	beq.n	8007096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f001 fbf9 	bl	800885c <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d012      	beq.n	8007096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <xQueueGenericReset+0xcc>)
 8007072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	e009      	b.n	8007096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3310      	adds	r3, #16
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fef2 	bl	8006e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3324      	adds	r3, #36	; 0x24
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff feed 	bl	8006e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f002 fc3d 	bl	8009914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800709a:	2301      	movs	r3, #1
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08e      	sub	sp, #56	; 0x38
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <xQueueGenericCreateStatic+0x52>
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <xQueueGenericCreateStatic+0x56>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <xQueueGenericCreateStatic+0x58>
 80070fe:	2300      	movs	r3, #0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <xQueueGenericCreateStatic+0x7e>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <xQueueGenericCreateStatic+0x82>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericCreateStatic+0x84>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10a      	bne.n	8007146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	61fb      	str	r3, [r7, #28]
}
 8007142:	bf00      	nop
 8007144:	e7fe      	b.n	8007144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007146:	2350      	movs	r3, #80	; 0x50
 8007148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b50      	cmp	r3, #80	; 0x50
 800714e:	d00a      	beq.n	8007166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	61bb      	str	r3, [r7, #24]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800717a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4613      	mov	r3, r2
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f83f 	bl	800720c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007190:	4618      	mov	r0, r3
 8007192:	3730      	adds	r7, #48	; 0x30
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	613b      	str	r3, [r7, #16]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	fb02 f303 	mul.w	r3, r2, r3
 80071ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	3350      	adds	r3, #80	; 0x50
 80071d0:	4618      	mov	r0, r3
 80071d2:	f002 fc91 	bl	8009af8 <pvPortMalloc>
 80071d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d011      	beq.n	8007202 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3350      	adds	r3, #80	; 0x50
 80071e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071f0:	79fa      	ldrb	r2, [r7, #7]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	4613      	mov	r3, r2
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	68b9      	ldr	r1, [r7, #8]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f805 	bl	800720c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007202:	69bb      	ldr	r3, [r7, #24]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e002      	b.n	800722e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800723a:	2101      	movs	r1, #1
 800723c:	69b8      	ldr	r0, [r7, #24]
 800723e:	f7ff fecb 	bl	8006fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800724a:	bf00      	nop
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00e      	beq.n	800727e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007272:	2300      	movs	r3, #0
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8a1 	bl	80073c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	4603      	mov	r3, r0
 800728e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	461a      	mov	r2, r3
 800729c:	6939      	ldr	r1, [r7, #16]
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	f7ff ff7a 	bl	8007198 <xQueueGenericCreate>
 80072a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff ffd3 	bl	8007252 <prvInitialiseMutex>

		return xNewQueue;
 80072ac:	68fb      	ldr	r3, [r7, #12]
	}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af02      	add	r7, sp, #8
 80072bc:	4603      	mov	r3, r0
 80072be:	6039      	str	r1, [r7, #0]
 80072c0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072c2:	2301      	movs	r3, #1
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2200      	movs	r2, #0
 80072d2:	6939      	ldr	r1, [r7, #16]
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f7ff fee7 	bl	80070a8 <xQueueGenericCreateStatic>
 80072da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ffb8 	bl	8007252 <prvInitialiseMutex>

		return xNewQueue;
 80072e2:	68fb      	ldr	r3, [r7, #12]
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	689c      	ldr	r4, [r3, #8]
 8007318:	f001 fc62 	bl	8008be0 <xTaskGetCurrentTaskHandle>
 800731c:	4603      	mov	r3, r0
 800731e:	429c      	cmp	r4, r3
 8007320:	d111      	bne.n	8007346 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	1e5a      	subs	r2, r3, #1
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007334:	2300      	movs	r3, #0
 8007336:	2200      	movs	r2, #0
 8007338:	2100      	movs	r1, #0
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f000 f840 	bl	80073c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e001      	b.n	800734a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800734a:	697b      	ldr	r3, [r7, #20]
	}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd90      	pop	{r4, r7, pc}

08007354 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60fb      	str	r3, [r7, #12]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	689c      	ldr	r4, [r3, #8]
 8007382:	f001 fc2d 	bl	8008be0 <xTaskGetCurrentTaskHandle>
 8007386:	4603      	mov	r3, r0
 8007388:	429c      	cmp	r4, r3
 800738a:	d107      	bne.n	800739c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e00c      	b.n	80073b6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6938      	ldr	r0, [r7, #16]
 80073a0:	f000 fa88 	bl	80078b4 <xQueueSemaphoreTake>
 80073a4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d004      	beq.n	80073b6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80073b6:	697b      	ldr	r3, [r7, #20]
	}
 80073b8:	4618      	mov	r0, r3
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd90      	pop	{r4, r7, pc}

080073c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08e      	sub	sp, #56	; 0x38
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueGenericSend+0x32>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <xQueueGenericSend+0x40>
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <xQueueGenericSend+0x44>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <xQueueGenericSend+0x46>
 8007404:	2300      	movs	r3, #0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xQueueGenericSend+0x60>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d103      	bne.n	800742e <xQueueGenericSend+0x6e>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <xQueueGenericSend+0x72>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <xQueueGenericSend+0x74>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueGenericSend+0x8e>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800744e:	f001 fbd7 	bl	8008c00 <xTaskGetSchedulerState>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <xQueueGenericSend+0x9e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <xQueueGenericSend+0xa2>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <xQueueGenericSend+0xa4>
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericSend+0xbe>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	61fb      	str	r3, [r7, #28]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800747e:	f002 fa19 	bl	80098b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800748a:	429a      	cmp	r2, r3
 800748c:	d302      	bcc.n	8007494 <xQueueGenericSend+0xd4>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d129      	bne.n	80074e8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800749a:	f000 fbeb 	bl	8007c74 <prvCopyDataToQueue>
 800749e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d010      	beq.n	80074ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	3324      	adds	r3, #36	; 0x24
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 f9d5 	bl	800885c <xTaskRemoveFromEventList>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d013      	beq.n	80074e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074b8:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <xQueueGenericSend+0x1f8>)
 80074ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	e00a      	b.n	80074e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074d0:	4b39      	ldr	r3, [pc, #228]	; (80075b8 <xQueueGenericSend+0x1f8>)
 80074d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074e0:	f002 fa18 	bl	8009914 <vPortExitCritical>
				return pdPASS;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e063      	b.n	80075b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ee:	f002 fa11 	bl	8009914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	e05c      	b.n	80075b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074fc:	f107 0314 	add.w	r3, r7, #20
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fa0f 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007506:	2301      	movs	r3, #1
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800750a:	f002 fa03 	bl	8009914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800750e:	f000 ff7b 	bl	8008408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007512:	f002 f9cf 	bl	80098b4 <vPortEnterCritical>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800751c:	b25b      	sxtb	r3, r3
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d103      	bne.n	800752c <xQueueGenericSend+0x16c>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007532:	b25b      	sxtb	r3, r3
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d103      	bne.n	8007542 <xQueueGenericSend+0x182>
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007542:	f002 f9e7 	bl	8009914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007546:	1d3a      	adds	r2, r7, #4
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f9fe 	bl	8008950 <xTaskCheckForTimeOut>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d124      	bne.n	80075a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800755a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800755c:	f000 fc82 	bl	8007e64 <prvIsQueueFull>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d018      	beq.n	8007598 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	3310      	adds	r3, #16
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f001 f924 	bl	80087bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007576:	f000 fc0d 	bl	8007d94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800757a:	f000 ff53 	bl	8008424 <xTaskResumeAll>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	f47f af7c 	bne.w	800747e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <xQueueGenericSend+0x1f8>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	e772      	b.n	800747e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800759a:	f000 fbfb 	bl	8007d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800759e:	f000 ff41 	bl	8008424 <xTaskResumeAll>
 80075a2:	e76c      	b.n	800747e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075a6:	f000 fbf5 	bl	8007d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075aa:	f000 ff3b 	bl	8008424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3738      	adds	r7, #56	; 0x38
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b090      	sub	sp, #64	; 0x40
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueGenericSendFromISR+0x3c>
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <xQueueGenericSendFromISR+0x40>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <xQueueGenericSendFromISR+0x42>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d103      	bne.n	8007626 <xQueueGenericSendFromISR+0x6a>
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <xQueueGenericSendFromISR+0x6e>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueGenericSendFromISR+0x70>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007646:	f002 fa17 	bl	8009a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800764a:	f3ef 8211 	mrs	r2, BASEPRI
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	61fa      	str	r2, [r7, #28]
 8007660:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007662:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <xQueueGenericSendFromISR+0xbc>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d12f      	bne.n	80076d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800768e:	f000 faf1 	bl	8007c74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007692:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769a:	d112      	bne.n	80076c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d016      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	3324      	adds	r3, #36	; 0x24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 f8d7 	bl	800885c <xTaskRemoveFromEventList>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e007      	b.n	80076d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	b25a      	sxtb	r2, r3
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80076d2:	2301      	movs	r3, #1
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80076d6:	e001      	b.n	80076dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3740      	adds	r7, #64	; 0x40
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08c      	sub	sp, #48	; 0x30
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007700:	2300      	movs	r3, #0
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10a      	bne.n	8007724 <xQueueReceive+0x30>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	623b      	str	r3, [r7, #32]
}
 8007720:	bf00      	nop
 8007722:	e7fe      	b.n	8007722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d103      	bne.n	8007732 <xQueueReceive+0x3e>
 800772a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <xQueueReceive+0x42>
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <xQueueReceive+0x44>
 8007736:	2300      	movs	r3, #0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <xQueueReceive+0x5e>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	61fb      	str	r3, [r7, #28]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007752:	f001 fa55 	bl	8008c00 <xTaskGetSchedulerState>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <xQueueReceive+0x6e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueReceive+0x72>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueReceive+0x74>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xQueueReceive+0x8e>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61bb      	str	r3, [r7, #24]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007782:	f002 f897 	bl	80098b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01f      	beq.n	80077d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007796:	f000 fad7 	bl	8007d48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ac:	3310      	adds	r3, #16
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f854 	bl	800885c <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ba:	4b3d      	ldr	r3, [pc, #244]	; (80078b0 <xQueueReceive+0x1bc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ca:	f002 f8a3 	bl	8009914 <vPortExitCritical>
				return pdPASS;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e069      	b.n	80078a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d103      	bne.n	80077e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077d8:	f002 f89c 	bl	8009914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077dc:	2300      	movs	r3, #0
 80077de:	e062      	b.n	80078a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077e6:	f107 0310 	add.w	r3, r7, #16
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 f89a 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077f4:	f002 f88e 	bl	8009914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077f8:	f000 fe06 	bl	8008408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077fc:	f002 f85a 	bl	80098b4 <vPortEnterCritical>
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007806:	b25b      	sxtb	r3, r3
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d103      	bne.n	8007816 <xQueueReceive+0x122>
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800781c:	b25b      	sxtb	r3, r3
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d103      	bne.n	800782c <xQueueReceive+0x138>
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800782c:	f002 f872 	bl	8009914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007830:	1d3a      	adds	r2, r7, #4
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f001 f889 	bl	8008950 <xTaskCheckForTimeOut>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d123      	bne.n	800788c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 faf7 	bl	8007e38 <prvIsQueueEmpty>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d017      	beq.n	8007880 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	3324      	adds	r3, #36	; 0x24
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f000 ffaf 	bl	80087bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800785e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007860:	f000 fa98 	bl	8007d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007864:	f000 fdde 	bl	8008424 <xTaskResumeAll>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d189      	bne.n	8007782 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <xQueueReceive+0x1bc>)
 8007870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	e780      	b.n	8007782 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007882:	f000 fa87 	bl	8007d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007886:	f000 fdcd 	bl	8008424 <xTaskResumeAll>
 800788a:	e77a      	b.n	8007782 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800788c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788e:	f000 fa81 	bl	8007d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007892:	f000 fdc7 	bl	8008424 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007898:	f000 face 	bl	8007e38 <prvIsQueueEmpty>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f43f af6f 	beq.w	8007782 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3730      	adds	r7, #48	; 0x30
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	e000ed04 	.word	0xe000ed04

080078b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08e      	sub	sp, #56	; 0x38
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	623b      	str	r3, [r7, #32]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	61fb      	str	r3, [r7, #28]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007904:	f001 f97c 	bl	8008c00 <xTaskGetSchedulerState>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <xQueueSemaphoreTake+0x60>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <xQueueSemaphoreTake+0x64>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <xQueueSemaphoreTake+0x66>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61bb      	str	r3, [r7, #24]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007934:	f001 ffbe 	bl	80098b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	2b00      	cmp	r3, #0
 8007942:	d024      	beq.n	800798e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	1e5a      	subs	r2, r3, #1
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d104      	bne.n	800795e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007954:	f001 faca 	bl	8008eec <pvTaskIncrementMutexHeldCount>
 8007958:	4602      	mov	r2, r0
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00f      	beq.n	8007986 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	3310      	adds	r3, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f000 ff76 	bl	800885c <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007976:	4b54      	ldr	r3, [pc, #336]	; (8007ac8 <xQueueSemaphoreTake+0x214>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007986:	f001 ffc5 	bl	8009914 <vPortExitCritical>
				return pdPASS;
 800798a:	2301      	movs	r3, #1
 800798c:	e097      	b.n	8007abe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d111      	bne.n	80079b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	617b      	str	r3, [r7, #20]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079b0:	f001 ffb0 	bl	8009914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e082      	b.n	8007abe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 ffae 	bl	8008924 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079cc:	f001 ffa2 	bl	8009914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079d0:	f000 fd1a 	bl	8008408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079d4:	f001 ff6e 	bl	80098b4 <vPortEnterCritical>
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d103      	bne.n	80079ee <xQueueSemaphoreTake+0x13a>
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079f4:	b25b      	sxtb	r3, r3
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d103      	bne.n	8007a04 <xQueueSemaphoreTake+0x150>
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a04:	f001 ff86 	bl	8009914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a08:	463a      	mov	r2, r7
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 ff9d 	bl	8008950 <xTaskCheckForTimeOut>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d132      	bne.n	8007a82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a1e:	f000 fa0b 	bl	8007e38 <prvIsQueueEmpty>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d026      	beq.n	8007a76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d109      	bne.n	8007a44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007a30:	f001 ff40 	bl	80098b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f001 f8ff 	bl	8008c3c <xTaskPriorityInherit>
 8007a3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a40:	f001 ff68 	bl	8009914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	3324      	adds	r3, #36	; 0x24
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 feb5 	bl	80087bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a54:	f000 f99e 	bl	8007d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a58:	f000 fce4 	bl	8008424 <xTaskResumeAll>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f47f af68 	bne.w	8007934 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007a64:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <xQueueSemaphoreTake+0x214>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	e75e      	b.n	8007934 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a78:	f000 f98c 	bl	8007d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a7c:	f000 fcd2 	bl	8008424 <xTaskResumeAll>
 8007a80:	e758      	b.n	8007934 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a84:	f000 f986 	bl	8007d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a88:	f000 fccc 	bl	8008424 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a8e:	f000 f9d3 	bl	8007e38 <prvIsQueueEmpty>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f43f af4d 	beq.w	8007934 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00d      	beq.n	8007abc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007aa0:	f001 ff08 	bl	80098b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007aa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aa6:	f000 f8cd 	bl	8007c44 <prvGetDisinheritPriorityAfterTimeout>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 f998 	bl	8008de8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ab8:	f001 ff2c 	bl	8009914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007abc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3738      	adds	r7, #56	; 0x38
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	; 0x38
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	623b      	str	r3, [r7, #32]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <xQueueReceiveFromISR+0x3a>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <xQueueReceiveFromISR+0x3e>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <xQueueReceiveFromISR+0x40>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10a      	bne.n	8007b26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	61fb      	str	r3, [r7, #28]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b26:	f001 ffa7 	bl	8009a78 <vPortValidateInterruptPriority>
	__asm volatile
 8007b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	61ba      	str	r2, [r7, #24]
 8007b40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d02f      	beq.n	8007bb2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b60:	f000 f8f2 	bl	8007d48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b74:	d112      	bne.n	8007b9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d016      	beq.n	8007bac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	3310      	adds	r3, #16
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fe6a 	bl	800885c <xTaskRemoveFromEventList>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	e007      	b.n	8007bac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	b25a      	sxtb	r2, r3
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007bac:	2301      	movs	r3, #1
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb0:	e001      	b.n	8007bb6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f383 8811 	msr	BASEPRI, r3
}
 8007bc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3738      	adds	r7, #56	; 0x38
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	60bb      	str	r3, [r7, #8]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007bf0:	f001 fe60 	bl	80098b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007bfa:	f001 fe8b 	bl	8009914 <vPortExitCritical>

	return uxReturn;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10a      	bne.n	8007c30 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	60fb      	str	r3, [r7, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	e7fe      	b.n	8007c2e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007c36:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007c38:	4618      	mov	r0, r3
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	e001      	b.n	8007c66 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c66:	68fb      	ldr	r3, [r7, #12]
	}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10d      	bne.n	8007cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d14d      	bne.n	8007d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f001 f834 	bl	8008d0c <xTaskPriorityDisinherit>
 8007ca4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	609a      	str	r2, [r3, #8]
 8007cac:	e043      	b.n	8007d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d119      	bne.n	8007ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6858      	ldr	r0, [r3, #4]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	f004 f975 	bl	800bfae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ccc:	441a      	add	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d32b      	bcc.n	8007d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	e026      	b.n	8007d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	68d8      	ldr	r0, [r3, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	f004 f95b 	bl	800bfae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	425b      	negs	r3, r3
 8007d02:	441a      	add	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d207      	bcs.n	8007d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	425b      	negs	r3, r3
 8007d1e:	441a      	add	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d105      	bne.n	8007d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d002      	beq.n	8007d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d018      	beq.n	8007d8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	441a      	add	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d303      	bcc.n	8007d7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68d9      	ldr	r1, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	461a      	mov	r2, r3
 8007d86:	6838      	ldr	r0, [r7, #0]
 8007d88:	f004 f911 	bl	800bfae <memcpy>
	}
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d9c:	f001 fd8a 	bl	80098b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007da8:	e011      	b.n	8007dce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d012      	beq.n	8007dd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3324      	adds	r3, #36	; 0x24
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fd50 	bl	800885c <xTaskRemoveFromEventList>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dc2:	f000 fe27 	bl	8008a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dce9      	bgt.n	8007daa <prvUnlockQueue+0x16>
 8007dd6:	e000      	b.n	8007dda <prvUnlockQueue+0x46>
					break;
 8007dd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007de2:	f001 fd97 	bl	8009914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007de6:	f001 fd65 	bl	80098b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007df2:	e011      	b.n	8007e18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d012      	beq.n	8007e22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3310      	adds	r3, #16
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 fd2b 	bl	800885c <xTaskRemoveFromEventList>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e0c:	f000 fe02 	bl	8008a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e10:	7bbb      	ldrb	r3, [r7, #14]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dce9      	bgt.n	8007df4 <prvUnlockQueue+0x60>
 8007e20:	e000      	b.n	8007e24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	22ff      	movs	r2, #255	; 0xff
 8007e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e2c:	f001 fd72 	bl	8009914 <vPortExitCritical>
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e40:	f001 fd38 	bl	80098b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e001      	b.n	8007e56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e56:	f001 fd5d 	bl	8009914 <vPortExitCritical>

	return xReturn;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e6c:	f001 fd22 	bl	80098b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d102      	bne.n	8007e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	e001      	b.n	8007e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e82:	2300      	movs	r3, #0
 8007e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e86:	f001 fd45 	bl	8009914 <vPortExitCritical>

	return xReturn;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e014      	b.n	8007ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ea4:	4a0f      	ldr	r2, [pc, #60]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007eb0:	490c      	ldr	r1, [pc, #48]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eba:	4a0a      	ldr	r2, [pc, #40]	; (8007ee4 <vQueueAddToRegistry+0x50>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	4413      	add	r3, r2
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ec6:	e006      	b.n	8007ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b07      	cmp	r3, #7
 8007ed2:	d9e7      	bls.n	8007ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20001d3c 	.word	0x20001d3c

08007ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ef8:	f001 fcdc 	bl	80098b4 <vPortEnterCritical>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f02:	b25b      	sxtb	r3, r3
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d103      	bne.n	8007f12 <vQueueWaitForMessageRestricted+0x2a>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d103      	bne.n	8007f28 <vQueueWaitForMessageRestricted+0x40>
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f28:	f001 fcf4 	bl	8009914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d106      	bne.n	8007f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 fc61 	bl	8008804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f42:	6978      	ldr	r0, [r7, #20]
 8007f44:	f7ff ff26 	bl	8007d94 <prvUnlockQueue>
	}
 8007f48:	bf00      	nop
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08e      	sub	sp, #56	; 0x38
 8007f54:	af04      	add	r7, sp, #16
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	623b      	str	r3, [r7, #32]
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xTaskCreateStatic+0x46>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61fb      	str	r3, [r7, #28]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f96:	23a8      	movs	r3, #168	; 0xa8
 8007f98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2ba8      	cmp	r3, #168	; 0xa8
 8007f9e:	d00a      	beq.n	8007fb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	61bb      	str	r3, [r7, #24]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01e      	beq.n	8007ffc <xTaskCreateStatic+0xac>
 8007fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	9302      	str	r3, [sp, #8]
 8007fde:	f107 0314 	add.w	r3, r7, #20
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f850 	bl	8008094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ff6:	f000 f8f3 	bl	80081e0 <prvAddNewTaskToReadyList>
 8007ffa:	e001      	b.n	8008000 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008000:	697b      	ldr	r3, [r7, #20]
	}
 8008002:	4618      	mov	r0, r3
 8008004:	3728      	adds	r7, #40	; 0x28
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800800a:	b580      	push	{r7, lr}
 800800c:	b08c      	sub	sp, #48	; 0x30
 800800e:	af04      	add	r7, sp, #16
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4618      	mov	r0, r3
 8008020:	f001 fd6a 	bl	8009af8 <pvPortMalloc>
 8008024:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00e      	beq.n	800804a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800802c:	20a8      	movs	r0, #168	; 0xa8
 800802e:	f001 fd63 	bl	8009af8 <pvPortMalloc>
 8008032:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	631a      	str	r2, [r3, #48]	; 0x30
 8008040:	e005      	b.n	800804e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008042:	6978      	ldr	r0, [r7, #20]
 8008044:	f001 fe24 	bl	8009c90 <vPortFree>
 8008048:	e001      	b.n	800804e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d017      	beq.n	8008084 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800805c:	88fa      	ldrh	r2, [r7, #6]
 800805e:	2300      	movs	r3, #0
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 f80e 	bl	8008094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008078:	69f8      	ldr	r0, [r7, #28]
 800807a:	f000 f8b1 	bl	80081e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800807e:	2301      	movs	r3, #1
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	e002      	b.n	800808a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800808a:	69bb      	ldr	r3, [r7, #24]
	}
 800808c:	4618      	mov	r0, r3
 800808e:	3720      	adds	r7, #32
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	461a      	mov	r2, r3
 80080ac:	21a5      	movs	r1, #165	; 0xa5
 80080ae:	f003 fe2a 	bl	800bd06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080bc:	3b01      	subs	r3, #1
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f023 0307 	bic.w	r3, r3, #7
 80080ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	617b      	str	r3, [r7, #20]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01f      	beq.n	8008132 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080f2:	2300      	movs	r3, #0
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	e012      	b.n	800811e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	4413      	add	r3, r2
 80080fe:	7819      	ldrb	r1, [r3, #0]
 8008100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	3334      	adds	r3, #52	; 0x34
 8008108:	460a      	mov	r2, r1
 800810a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d006      	beq.n	8008126 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	2b0f      	cmp	r3, #15
 8008122:	d9e9      	bls.n	80080f8 <prvInitialiseNewTask+0x64>
 8008124:	e000      	b.n	8008128 <prvInitialiseNewTask+0x94>
			{
				break;
 8008126:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008130:	e003      	b.n	800813a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	2b37      	cmp	r3, #55	; 0x37
 800813e:	d901      	bls.n	8008144 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008140:	2337      	movs	r3, #55	; 0x37
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008148:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800814e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	2200      	movs	r2, #0
 8008154:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	3304      	adds	r3, #4
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fea8 	bl	8006eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008162:	3318      	adds	r3, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f7fe fea3 	bl	8006eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	2200      	movs	r2, #0
 8008184:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	2200      	movs	r2, #0
 800818c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	3354      	adds	r3, #84	; 0x54
 8008194:	224c      	movs	r2, #76	; 0x4c
 8008196:	2100      	movs	r1, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f003 fdb4 	bl	800bd06 <memset>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <prvInitialiseNewTask+0x140>)
 80081a2:	659a      	str	r2, [r3, #88]	; 0x58
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	4a0c      	ldr	r2, [pc, #48]	; (80081d8 <prvInitialiseNewTask+0x144>)
 80081a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80081aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ac:	4a0b      	ldr	r2, [pc, #44]	; (80081dc <prvInitialiseNewTask+0x148>)
 80081ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	69b8      	ldr	r0, [r7, #24]
 80081b6:	f001 fa4f 	bl	8009658 <pxPortInitialiseStack>
 80081ba:	4602      	mov	r2, r0
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081cc:	bf00      	nop
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20004700 	.word	0x20004700
 80081d8:	20004768 	.word	0x20004768
 80081dc:	200047d0 	.word	0x200047d0

080081e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081e8:	f001 fb64 	bl	80098b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081ec:	4b2d      	ldr	r3, [pc, #180]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a2c      	ldr	r2, [pc, #176]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 80081f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081f6:	4b2c      	ldr	r3, [pc, #176]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081fe:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <prvAddNewTaskToReadyList+0xc4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d110      	bne.n	800822e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800820c:	f000 fc26 	bl	8008a5c <prvInitialiseTaskLists>
 8008210:	e00d      	b.n	800822e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008212:	4b26      	ldr	r3, [pc, #152]	; (80082ac <prvAddNewTaskToReadyList+0xcc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800821a:	4b23      	ldr	r3, [pc, #140]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	429a      	cmp	r2, r3
 8008226:	d802      	bhi.n	800822e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008228:	4a1f      	ldr	r2, [pc, #124]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800822e:	4b20      	ldr	r3, [pc, #128]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 8008236:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <prvAddNewTaskToReadyList+0xd0>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008244:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <prvAddNewTaskToReadyList+0xd4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d903      	bls.n	8008254 <prvAddNewTaskToReadyList+0x74>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	4a18      	ldr	r2, [pc, #96]	; (80082b4 <prvAddNewTaskToReadyList+0xd4>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <prvAddNewTaskToReadyList+0xd8>)
 8008262:	441a      	add	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	4619      	mov	r1, r3
 800826a:	4610      	mov	r0, r2
 800826c:	f7fe fe2d 	bl	8006eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008270:	f001 fb50 	bl	8009914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008274:	4b0d      	ldr	r3, [pc, #52]	; (80082ac <prvAddNewTaskToReadyList+0xcc>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00e      	beq.n	800829a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <prvAddNewTaskToReadyList+0xc8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	429a      	cmp	r2, r3
 8008288:	d207      	bcs.n	800829a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800828a:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <prvAddNewTaskToReadyList+0xdc>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20002250 	.word	0x20002250
 80082a8:	20001d7c 	.word	0x20001d7c
 80082ac:	2000225c 	.word	0x2000225c
 80082b0:	2000226c 	.word	0x2000226c
 80082b4:	20002258 	.word	0x20002258
 80082b8:	20001d80 	.word	0x20001d80
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d017      	beq.n	8008302 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082d2:	4b13      	ldr	r3, [pc, #76]	; (8008320 <vTaskDelay+0x60>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <vTaskDelay+0x30>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	60bb      	str	r3, [r7, #8]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082f0:	f000 f88a 	bl	8008408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 fe0c 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082fc:	f000 f892 	bl	8008424 <xTaskResumeAll>
 8008300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d107      	bne.n	8008318 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008308:	4b06      	ldr	r3, [pc, #24]	; (8008324 <vTaskDelay+0x64>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20002278 	.word	0x20002278
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008336:	463a      	mov	r2, r7
 8008338:	1d39      	adds	r1, r7, #4
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fd62 	bl	8006e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	9202      	str	r2, [sp, #8]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	2300      	movs	r3, #0
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	2300      	movs	r3, #0
 8008354:	460a      	mov	r2, r1
 8008356:	4924      	ldr	r1, [pc, #144]	; (80083e8 <vTaskStartScheduler+0xc0>)
 8008358:	4824      	ldr	r0, [pc, #144]	; (80083ec <vTaskStartScheduler+0xc4>)
 800835a:	f7ff fdf9 	bl	8007f50 <xTaskCreateStatic>
 800835e:	4603      	mov	r3, r0
 8008360:	4a23      	ldr	r2, [pc, #140]	; (80083f0 <vTaskStartScheduler+0xc8>)
 8008362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008364:	4b22      	ldr	r3, [pc, #136]	; (80083f0 <vTaskStartScheduler+0xc8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	e001      	b.n	8008376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d102      	bne.n	8008382 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800837c:	f000 fe1e 	bl	8008fbc <xTimerCreateTimerTask>
 8008380:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d11b      	bne.n	80083c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	613b      	str	r3, [r7, #16]
}
 800839a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800839c:	4b15      	ldr	r3, [pc, #84]	; (80083f4 <vTaskStartScheduler+0xcc>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3354      	adds	r3, #84	; 0x54
 80083a2:	4a15      	ldr	r2, [pc, #84]	; (80083f8 <vTaskStartScheduler+0xd0>)
 80083a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083a6:	4b15      	ldr	r3, [pc, #84]	; (80083fc <vTaskStartScheduler+0xd4>)
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083ae:	4b14      	ldr	r3, [pc, #80]	; (8008400 <vTaskStartScheduler+0xd8>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083b4:	4b13      	ldr	r3, [pc, #76]	; (8008404 <vTaskStartScheduler+0xdc>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083ba:	f001 f9d9 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083be:	e00e      	b.n	80083de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d10a      	bne.n	80083de <vTaskStartScheduler+0xb6>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	60fb      	str	r3, [r7, #12]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <vTaskStartScheduler+0xb4>
}
 80083de:	bf00      	nop
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	0800fb44 	.word	0x0800fb44
 80083ec:	08008a2d 	.word	0x08008a2d
 80083f0:	20002274 	.word	0x20002274
 80083f4:	20001d7c 	.word	0x20001d7c
 80083f8:	200005d8 	.word	0x200005d8
 80083fc:	20002270 	.word	0x20002270
 8008400:	2000225c 	.word	0x2000225c
 8008404:	20002254 	.word	0x20002254

08008408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <vTaskSuspendAll+0x18>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	4a03      	ldr	r2, [pc, #12]	; (8008420 <vTaskSuspendAll+0x18>)
 8008414:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008416:	bf00      	nop
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	20002278 	.word	0x20002278

08008424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008432:	4b42      	ldr	r3, [pc, #264]	; (800853c <xTaskResumeAll+0x118>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <xTaskResumeAll+0x2c>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	603b      	str	r3, [r7, #0]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008450:	f001 fa30 	bl	80098b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008454:	4b39      	ldr	r3, [pc, #228]	; (800853c <xTaskResumeAll+0x118>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3b01      	subs	r3, #1
 800845a:	4a38      	ldr	r2, [pc, #224]	; (800853c <xTaskResumeAll+0x118>)
 800845c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800845e:	4b37      	ldr	r3, [pc, #220]	; (800853c <xTaskResumeAll+0x118>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d162      	bne.n	800852c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008466:	4b36      	ldr	r3, [pc, #216]	; (8008540 <xTaskResumeAll+0x11c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d05e      	beq.n	800852c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800846e:	e02f      	b.n	80084d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008470:	4b34      	ldr	r3, [pc, #208]	; (8008544 <xTaskResumeAll+0x120>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3318      	adds	r3, #24
 800847c:	4618      	mov	r0, r3
 800847e:	f7fe fd81 	bl	8006f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3304      	adds	r3, #4
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fd7c 	bl	8006f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	4b2d      	ldr	r3, [pc, #180]	; (8008548 <xTaskResumeAll+0x124>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d903      	bls.n	80084a0 <xTaskResumeAll+0x7c>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849c:	4a2a      	ldr	r2, [pc, #168]	; (8008548 <xTaskResumeAll+0x124>)
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4a27      	ldr	r2, [pc, #156]	; (800854c <xTaskResumeAll+0x128>)
 80084ae:	441a      	add	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7fe fd07 	bl	8006eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	4b23      	ldr	r3, [pc, #140]	; (8008550 <xTaskResumeAll+0x12c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d302      	bcc.n	80084d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084ca:	4b22      	ldr	r3, [pc, #136]	; (8008554 <xTaskResumeAll+0x130>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084d0:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <xTaskResumeAll+0x120>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1cb      	bne.n	8008470 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084de:	f000 fb5f 	bl	8008ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084e2:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <xTaskResumeAll+0x134>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d010      	beq.n	8008510 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084ee:	f000 f847 	bl	8008580 <xTaskIncrementTick>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80084f8:	4b16      	ldr	r3, [pc, #88]	; (8008554 <xTaskResumeAll+0x130>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3b01      	subs	r3, #1
 8008502:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1f1      	bne.n	80084ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800850a:	4b13      	ldr	r3, [pc, #76]	; (8008558 <xTaskResumeAll+0x134>)
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008510:	4b10      	ldr	r3, [pc, #64]	; (8008554 <xTaskResumeAll+0x130>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800851c:	4b0f      	ldr	r3, [pc, #60]	; (800855c <xTaskResumeAll+0x138>)
 800851e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800852c:	f001 f9f2 	bl	8009914 <vPortExitCritical>

	return xAlreadyYielded;
 8008530:	68bb      	ldr	r3, [r7, #8]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20002278 	.word	0x20002278
 8008540:	20002250 	.word	0x20002250
 8008544:	20002210 	.word	0x20002210
 8008548:	20002258 	.word	0x20002258
 800854c:	20001d80 	.word	0x20001d80
 8008550:	20001d7c 	.word	0x20001d7c
 8008554:	20002264 	.word	0x20002264
 8008558:	20002260 	.word	0x20002260
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <xTaskGetTickCount+0x1c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800856c:	687b      	ldr	r3, [r7, #4]
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20002254 	.word	0x20002254

08008580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800858a:	4b4f      	ldr	r3, [pc, #316]	; (80086c8 <xTaskIncrementTick+0x148>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 808f 	bne.w	80086b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008594:	4b4d      	ldr	r3, [pc, #308]	; (80086cc <xTaskIncrementTick+0x14c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800859c:	4a4b      	ldr	r2, [pc, #300]	; (80086cc <xTaskIncrementTick+0x14c>)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d120      	bne.n	80085ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085a8:	4b49      	ldr	r3, [pc, #292]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	603b      	str	r3, [r7, #0]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xTaskIncrementTick+0x46>
 80085c8:	4b41      	ldr	r3, [pc, #260]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	4b41      	ldr	r3, [pc, #260]	; (80086d4 <xTaskIncrementTick+0x154>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a3f      	ldr	r2, [pc, #252]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4a3f      	ldr	r2, [pc, #252]	; (80086d4 <xTaskIncrementTick+0x154>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	4b3e      	ldr	r3, [pc, #248]	; (80086d8 <xTaskIncrementTick+0x158>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	4a3d      	ldr	r2, [pc, #244]	; (80086d8 <xTaskIncrementTick+0x158>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	f000 fadb 	bl	8008ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085ea:	4b3c      	ldr	r3, [pc, #240]	; (80086dc <xTaskIncrementTick+0x15c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d349      	bcc.n	8008688 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f4:	4b36      	ldr	r3, [pc, #216]	; (80086d0 <xTaskIncrementTick+0x150>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d104      	bne.n	8008608 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fe:	4b37      	ldr	r3, [pc, #220]	; (80086dc <xTaskIncrementTick+0x15c>)
 8008600:	f04f 32ff 	mov.w	r2, #4294967295
 8008604:	601a      	str	r2, [r3, #0]
					break;
 8008606:	e03f      	b.n	8008688 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008608:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <xTaskIncrementTick+0x150>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d203      	bcs.n	8008628 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008620:	4a2e      	ldr	r2, [pc, #184]	; (80086dc <xTaskIncrementTick+0x15c>)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008626:	e02f      	b.n	8008688 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3304      	adds	r3, #4
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe fca9 	bl	8006f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	2b00      	cmp	r3, #0
 8008638:	d004      	beq.n	8008644 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	3318      	adds	r3, #24
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fca0 	bl	8006f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4b25      	ldr	r3, [pc, #148]	; (80086e0 <xTaskIncrementTick+0x160>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d903      	bls.n	8008658 <xTaskIncrementTick+0xd8>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008654:	4a22      	ldr	r2, [pc, #136]	; (80086e0 <xTaskIncrementTick+0x160>)
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865c:	4613      	mov	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4a1f      	ldr	r2, [pc, #124]	; (80086e4 <xTaskIncrementTick+0x164>)
 8008666:	441a      	add	r2, r3
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3304      	adds	r3, #4
 800866c:	4619      	mov	r1, r3
 800866e:	4610      	mov	r0, r2
 8008670:	f7fe fc2b 	bl	8006eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <xTaskIncrementTick+0x168>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	429a      	cmp	r2, r3
 8008680:	d3b8      	bcc.n	80085f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008682:	2301      	movs	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008686:	e7b5      	b.n	80085f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008688:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <xTaskIncrementTick+0x168>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868e:	4915      	ldr	r1, [pc, #84]	; (80086e4 <xTaskIncrementTick+0x164>)
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d901      	bls.n	80086a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086a4:	4b11      	ldr	r3, [pc, #68]	; (80086ec <xTaskIncrementTick+0x16c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d007      	beq.n	80086bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086ac:	2301      	movs	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e004      	b.n	80086bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <xTaskIncrementTick+0x170>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <xTaskIncrementTick+0x170>)
 80086ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086bc:	697b      	ldr	r3, [r7, #20]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20002278 	.word	0x20002278
 80086cc:	20002254 	.word	0x20002254
 80086d0:	20002208 	.word	0x20002208
 80086d4:	2000220c 	.word	0x2000220c
 80086d8:	20002268 	.word	0x20002268
 80086dc:	20002270 	.word	0x20002270
 80086e0:	20002258 	.word	0x20002258
 80086e4:	20001d80 	.word	0x20001d80
 80086e8:	20001d7c 	.word	0x20001d7c
 80086ec:	20002264 	.word	0x20002264
 80086f0:	20002260 	.word	0x20002260

080086f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086fa:	4b2a      	ldr	r3, [pc, #168]	; (80087a4 <vTaskSwitchContext+0xb0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008702:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <vTaskSwitchContext+0xb4>)
 8008704:	2201      	movs	r2, #1
 8008706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008708:	e046      	b.n	8008798 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800870a:	4b27      	ldr	r3, [pc, #156]	; (80087a8 <vTaskSwitchContext+0xb4>)
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008710:	4b26      	ldr	r3, [pc, #152]	; (80087ac <vTaskSwitchContext+0xb8>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e010      	b.n	800873a <vTaskSwitchContext+0x46>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10a      	bne.n	8008734 <vTaskSwitchContext+0x40>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
 8008732:	e7fe      	b.n	8008732 <vTaskSwitchContext+0x3e>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3b01      	subs	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	491d      	ldr	r1, [pc, #116]	; (80087b0 <vTaskSwitchContext+0xbc>)
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	440b      	add	r3, r1
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0e4      	beq.n	8008718 <vTaskSwitchContext+0x24>
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <vTaskSwitchContext+0xbc>)
 800875a:	4413      	add	r3, r2
 800875c:	60bb      	str	r3, [r7, #8]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	3308      	adds	r3, #8
 8008770:	429a      	cmp	r2, r3
 8008772:	d104      	bne.n	800877e <vTaskSwitchContext+0x8a>
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	4a0b      	ldr	r2, [pc, #44]	; (80087b4 <vTaskSwitchContext+0xc0>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	4a08      	ldr	r2, [pc, #32]	; (80087ac <vTaskSwitchContext+0xb8>)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <vTaskSwitchContext+0xc0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3354      	adds	r3, #84	; 0x54
 8008794:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <vTaskSwitchContext+0xc4>)
 8008796:	6013      	str	r3, [r2, #0]
}
 8008798:	bf00      	nop
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	20002278 	.word	0x20002278
 80087a8:	20002264 	.word	0x20002264
 80087ac:	20002258 	.word	0x20002258
 80087b0:	20001d80 	.word	0x20001d80
 80087b4:	20001d7c 	.word	0x20001d7c
 80087b8:	200005d8 	.word	0x200005d8

080087bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10a      	bne.n	80087e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60fb      	str	r3, [r7, #12]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <vTaskPlaceOnEventList+0x44>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3318      	adds	r3, #24
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fe fb91 	bl	8006f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087f0:	2101      	movs	r1, #1
 80087f2:	6838      	ldr	r0, [r7, #0]
 80087f4:	f000 fb8e 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20001d7c 	.word	0x20001d7c

08008804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vTaskPlaceOnEventListRestricted+0x54>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3318      	adds	r3, #24
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7fe fb48 	bl	8006eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008840:	f04f 33ff 	mov.w	r3, #4294967295
 8008844:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f000 fb63 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
	}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20001d7c 	.word	0x20001d7c

0800885c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	3318      	adds	r3, #24
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fb79 	bl	8006f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <xTaskRemoveFromEventList+0xb0>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d11d      	bne.n	80088d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3304      	adds	r3, #4
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fb70 	bl	8006f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <xTaskRemoveFromEventList+0xb4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d903      	bls.n	80088b8 <xTaskRemoveFromEventList+0x5c>
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <xTaskRemoveFromEventList+0xb4>)
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4a13      	ldr	r2, [pc, #76]	; (8008914 <xTaskRemoveFromEventList+0xb8>)
 80088c6:	441a      	add	r2, r3
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3304      	adds	r3, #4
 80088cc:	4619      	mov	r1, r3
 80088ce:	4610      	mov	r0, r2
 80088d0:	f7fe fafb 	bl	8006eca <vListInsertEnd>
 80088d4:	e005      	b.n	80088e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3318      	adds	r3, #24
 80088da:	4619      	mov	r1, r3
 80088dc:	480e      	ldr	r0, [pc, #56]	; (8008918 <xTaskRemoveFromEventList+0xbc>)
 80088de:	f7fe faf4 	bl	8006eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <xTaskRemoveFromEventList+0xc0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d905      	bls.n	80088fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088f4:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <xTaskRemoveFromEventList+0xc4>)
 80088f6:	2201      	movs	r2, #1
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	e001      	b.n	8008900 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008900:	697b      	ldr	r3, [r7, #20]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	20002278 	.word	0x20002278
 8008910:	20002258 	.word	0x20002258
 8008914:	20001d80 	.word	0x20001d80
 8008918:	20002210 	.word	0x20002210
 800891c:	20001d7c 	.word	0x20001d7c
 8008920:	20002264 	.word	0x20002264

08008924 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <vTaskInternalSetTimeOutState+0x24>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <vTaskInternalSetTimeOutState+0x28>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	605a      	str	r2, [r3, #4]
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20002268 	.word	0x20002268
 800894c:	20002254 	.word	0x20002254

08008950 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10a      	bne.n	8008992 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60fb      	str	r3, [r7, #12]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008992:	f000 ff8f 	bl	80098b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <xTaskCheckForTimeOut+0xbc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ae:	d102      	bne.n	80089b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e023      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <xTaskCheckForTimeOut+0xc0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d007      	beq.n	80089d2 <xTaskCheckForTimeOut+0x82>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	69ba      	ldr	r2, [r7, #24]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d302      	bcc.n	80089d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089cc:	2301      	movs	r3, #1
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	e015      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d20b      	bcs.n	80089f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff ff9b 	bl	8008924 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	61fb      	str	r3, [r7, #28]
 80089f2:	e004      	b.n	80089fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089fe:	f000 ff89 	bl	8009914 <vPortExitCritical>

	return xReturn;
 8008a02:	69fb      	ldr	r3, [r7, #28]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3720      	adds	r7, #32
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	20002254 	.word	0x20002254
 8008a10:	20002268 	.word	0x20002268

08008a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <vTaskMissedYield+0x14>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
}
 8008a1e:	bf00      	nop
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20002264 	.word	0x20002264

08008a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a34:	f000 f852 	bl	8008adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <prvIdleTask+0x28>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d9f9      	bls.n	8008a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a40:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <prvIdleTask+0x2c>)
 8008a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a46:	601a      	str	r2, [r3, #0]
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a50:	e7f0      	b.n	8008a34 <prvIdleTask+0x8>
 8008a52:	bf00      	nop
 8008a54:	20001d80 	.word	0x20001d80
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a62:	2300      	movs	r3, #0
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	e00c      	b.n	8008a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4a12      	ldr	r2, [pc, #72]	; (8008abc <prvInitialiseTaskLists+0x60>)
 8008a74:	4413      	add	r3, r2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe f9fa 	bl	8006e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	607b      	str	r3, [r7, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b37      	cmp	r3, #55	; 0x37
 8008a86:	d9ef      	bls.n	8008a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a88:	480d      	ldr	r0, [pc, #52]	; (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008a8a:	f7fe f9f1 	bl	8006e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a8e:	480d      	ldr	r0, [pc, #52]	; (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008a90:	f7fe f9ee 	bl	8006e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a94:	480c      	ldr	r0, [pc, #48]	; (8008ac8 <prvInitialiseTaskLists+0x6c>)
 8008a96:	f7fe f9eb 	bl	8006e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a9a:	480c      	ldr	r0, [pc, #48]	; (8008acc <prvInitialiseTaskLists+0x70>)
 8008a9c:	f7fe f9e8 	bl	8006e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008aa0:	480b      	ldr	r0, [pc, #44]	; (8008ad0 <prvInitialiseTaskLists+0x74>)
 8008aa2:	f7fe f9e5 	bl	8006e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <prvInitialiseTaskLists+0x78>)
 8008aa8:	4a05      	ldr	r2, [pc, #20]	; (8008ac0 <prvInitialiseTaskLists+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <prvInitialiseTaskLists+0x7c>)
 8008aae:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <prvInitialiseTaskLists+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	20001d80 	.word	0x20001d80
 8008ac0:	200021e0 	.word	0x200021e0
 8008ac4:	200021f4 	.word	0x200021f4
 8008ac8:	20002210 	.word	0x20002210
 8008acc:	20002224 	.word	0x20002224
 8008ad0:	2000223c 	.word	0x2000223c
 8008ad4:	20002208 	.word	0x20002208
 8008ad8:	2000220c 	.word	0x2000220c

08008adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ae2:	e019      	b.n	8008b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ae4:	f000 fee6 	bl	80098b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae8:	4b10      	ldr	r3, [pc, #64]	; (8008b2c <prvCheckTasksWaitingTermination+0x50>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3304      	adds	r3, #4
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fa45 	bl	8006f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <prvCheckTasksWaitingTermination+0x54>)
 8008b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b0e:	f000 ff01 	bl	8009914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f810 	bl	8008b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <prvCheckTasksWaitingTermination+0x58>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e1      	bne.n	8008ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20002224 	.word	0x20002224
 8008b30:	20002250 	.word	0x20002250
 8008b34:	20002238 	.word	0x20002238

08008b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3354      	adds	r3, #84	; 0x54
 8008b44:	4618      	mov	r0, r3
 8008b46:	f003 f969 	bl	800be1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d108      	bne.n	8008b66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 f899 	bl	8009c90 <vPortFree>
				vPortFree( pxTCB );
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 f896 	bl	8009c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b64:	e018      	b.n	8008b98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d103      	bne.n	8008b78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 f88d 	bl	8009c90 <vPortFree>
	}
 8008b76:	e00f      	b.n	8008b98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d00a      	beq.n	8008b98 <prvDeleteTCB+0x60>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60fb      	str	r3, [r7, #12]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <prvDeleteTCB+0x5e>
	}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb8:	e008      	b.n	8008bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a04      	ldr	r2, [pc, #16]	; (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	20002208 	.word	0x20002208
 8008bdc:	20002270 	.word	0x20002270

08008be0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <xTaskGetCurrentTaskHandle+0x1c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008bec:	687b      	ldr	r3, [r7, #4]
	}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	370c      	adds	r7, #12
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20001d7c 	.word	0x20001d7c

08008c00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <xTaskGetSchedulerState+0x34>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d102      	bne.n	8008c14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	e008      	b.n	8008c26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c14:	4b08      	ldr	r3, [pc, #32]	; (8008c38 <xTaskGetSchedulerState+0x38>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d102      	bne.n	8008c22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e001      	b.n	8008c26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c26:	687b      	ldr	r3, [r7, #4]
	}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	2000225c 	.word	0x2000225c
 8008c38:	20002278 	.word	0x20002278

08008c3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d051      	beq.n	8008cf6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4b2a      	ldr	r3, [pc, #168]	; (8008d00 <xTaskPriorityInherit+0xc4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d241      	bcs.n	8008ce4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	db06      	blt.n	8008c76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c68:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <xTaskPriorityInherit+0xc4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	6959      	ldr	r1, [r3, #20]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <xTaskPriorityInherit+0xc8>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	4299      	cmp	r1, r3
 8008c8c:	d122      	bne.n	8008cd4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe f976 	bl	8006f84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c98:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <xTaskPriorityInherit+0xc4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <xTaskPriorityInherit+0xcc>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d903      	bls.n	8008cb6 <xTaskPriorityInherit+0x7a>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <xTaskPriorityInherit+0xcc>)
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4a10      	ldr	r2, [pc, #64]	; (8008d04 <xTaskPriorityInherit+0xc8>)
 8008cc4:	441a      	add	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4610      	mov	r0, r2
 8008cce:	f7fe f8fc 	bl	8006eca <vListInsertEnd>
 8008cd2:	e004      	b.n	8008cde <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <xTaskPriorityInherit+0xc4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	e008      	b.n	8008cf6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <xTaskPriorityInherit+0xc4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d201      	bcs.n	8008cf6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20001d7c 	.word	0x20001d7c
 8008d04:	20001d80 	.word	0x20001d80
 8008d08:	20002258 	.word	0x20002258

08008d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d056      	beq.n	8008dd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d22:	4b2e      	ldr	r3, [pc, #184]	; (8008ddc <xTaskPriorityDisinherit+0xd0>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d00a      	beq.n	8008d42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	60fb      	str	r3, [r7, #12]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	60bb      	str	r3, [r7, #8]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d02c      	beq.n	8008dd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d128      	bne.n	8008dd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe f8fe 	bl	8006f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <xTaskPriorityDisinherit+0xd4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <xTaskPriorityDisinherit+0xa4>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4a0c      	ldr	r2, [pc, #48]	; (8008de0 <xTaskPriorityDisinherit+0xd4>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <xTaskPriorityDisinherit+0xd8>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe f87f 	bl	8006eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dd0:	697b      	ldr	r3, [r7, #20]
	}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20001d7c 	.word	0x20001d7c
 8008de0:	20002258 	.word	0x20002258
 8008de4:	20001d80 	.word	0x20001d80

08008de8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008df6:	2301      	movs	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d06a      	beq.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d902      	bls.n	8008e2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	61fb      	str	r3, [r7, #28]
 8008e2c:	e002      	b.n	8008e34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d04b      	beq.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d146      	bne.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d10a      	bne.n	8008e68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60bb      	str	r3, [r7, #8]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	db04      	blt.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	6959      	ldr	r1, [r3, #20]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e96:	4413      	add	r3, r2
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d11c      	bne.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe f86f 	bl	8006f84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d903      	bls.n	8008eba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a07      	ldr	r2, [pc, #28]	; (8008ee4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008ec8:	441a      	add	r2, r3
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f7fd fffa 	bl	8006eca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ed6:	bf00      	nop
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20001d7c 	.word	0x20001d7c
 8008ee4:	20001d80 	.word	0x20001d80
 8008ee8:	20002258 	.word	0x20002258

08008eec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008efe:	3201      	adds	r2, #1
 8008f00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008f02:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f04:	681b      	ldr	r3, [r3, #0]
	}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	20001d7c 	.word	0x20001d7c

08008f14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f1e:	4b21      	ldr	r3, [pc, #132]	; (8008fa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f24:	4b20      	ldr	r3, [pc, #128]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe f82a 	bl	8006f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d10a      	bne.n	8008f4e <prvAddCurrentTaskToDelayedList+0x3a>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4819      	ldr	r0, [pc, #100]	; (8008fac <prvAddCurrentTaskToDelayedList+0x98>)
 8008f48:	f7fd ffbf 	bl	8006eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f4c:	e026      	b.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f56:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d209      	bcs.n	8008f7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fd ffcd 	bl	8006f12 <vListInsert>
}
 8008f78:	e010      	b.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f7fd ffc3 	bl	8006f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d202      	bcs.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f96:	4a08      	ldr	r2, [pc, #32]	; (8008fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6013      	str	r3, [r2, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20002254 	.word	0x20002254
 8008fa8:	20001d7c 	.word	0x20001d7c
 8008fac:	2000223c 	.word	0x2000223c
 8008fb0:	2000220c 	.word	0x2000220c
 8008fb4:	20002208 	.word	0x20002208
 8008fb8:	20002270 	.word	0x20002270

08008fbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	; 0x28
 8008fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fc6:	f000 fb07 	bl	80095d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fca:	4b1c      	ldr	r3, [pc, #112]	; (800903c <xTimerCreateTimerTask+0x80>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d021      	beq.n	8009016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fda:	1d3a      	adds	r2, r7, #4
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fd ff29 	bl	8006e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	9202      	str	r2, [sp, #8]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	4910      	ldr	r1, [pc, #64]	; (8009040 <xTimerCreateTimerTask+0x84>)
 8008ffe:	4811      	ldr	r0, [pc, #68]	; (8009044 <xTimerCreateTimerTask+0x88>)
 8009000:	f7fe ffa6 	bl	8007f50 <xTaskCreateStatic>
 8009004:	4603      	mov	r3, r0
 8009006:	4a10      	ldr	r2, [pc, #64]	; (8009048 <xTimerCreateTimerTask+0x8c>)
 8009008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800900a:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <xTimerCreateTimerTask+0x8c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009012:	2301      	movs	r3, #1
 8009014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	613b      	str	r3, [r7, #16]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009032:	697b      	ldr	r3, [r7, #20]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	200022ac 	.word	0x200022ac
 8009040:	0800fb4c 	.word	0x0800fb4c
 8009044:	08009181 	.word	0x08009181
 8009048:	200022b0 	.word	0x200022b0

0800904c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	; 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800905a:	2300      	movs	r3, #0
 800905c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10a      	bne.n	800907a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	623b      	str	r3, [r7, #32]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800907a:	4b1a      	ldr	r3, [pc, #104]	; (80090e4 <xTimerGenericCommand+0x98>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d02a      	beq.n	80090d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b05      	cmp	r3, #5
 8009092:	dc18      	bgt.n	80090c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009094:	f7ff fdb4 	bl	8008c00 <xTaskGetSchedulerState>
 8009098:	4603      	mov	r3, r0
 800909a:	2b02      	cmp	r3, #2
 800909c:	d109      	bne.n	80090b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800909e:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <xTimerGenericCommand+0x98>)
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f107 0110 	add.w	r1, r7, #16
 80090a6:	2300      	movs	r3, #0
 80090a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090aa:	f7fe f989 	bl	80073c0 <xQueueGenericSend>
 80090ae:	6278      	str	r0, [r7, #36]	; 0x24
 80090b0:	e012      	b.n	80090d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <xTimerGenericCommand+0x98>)
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	f107 0110 	add.w	r1, r7, #16
 80090ba:	2300      	movs	r3, #0
 80090bc:	2200      	movs	r2, #0
 80090be:	f7fe f97f 	bl	80073c0 <xQueueGenericSend>
 80090c2:	6278      	str	r0, [r7, #36]	; 0x24
 80090c4:	e008      	b.n	80090d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090c6:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <xTimerGenericCommand+0x98>)
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	f107 0110 	add.w	r1, r7, #16
 80090ce:	2300      	movs	r3, #0
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	f7fe fa73 	bl	80075bc <xQueueGenericSendFromISR>
 80090d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3728      	adds	r7, #40	; 0x28
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200022ac 	.word	0x200022ac

080090e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f2:	4b22      	ldr	r3, [pc, #136]	; (800917c <prvProcessExpiredTimer+0x94>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	3304      	adds	r3, #4
 8009100:	4618      	mov	r0, r3
 8009102:	f7fd ff3f 	bl	8006f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d022      	beq.n	800915a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	699a      	ldr	r2, [r3, #24]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	18d1      	adds	r1, r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	6978      	ldr	r0, [r7, #20]
 8009122:	f000 f8d1 	bl	80092c8 <prvInsertTimerInActiveList>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01f      	beq.n	800916c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800912c:	2300      	movs	r3, #0
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2300      	movs	r3, #0
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	2100      	movs	r1, #0
 8009136:	6978      	ldr	r0, [r7, #20]
 8009138:	f7ff ff88 	bl	800904c <xTimerGenericCommand>
 800913c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d113      	bne.n	800916c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	60fb      	str	r3, [r7, #12]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009160:	f023 0301 	bic.w	r3, r3, #1
 8009164:	b2da      	uxtb	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	6978      	ldr	r0, [r7, #20]
 8009172:	4798      	blx	r3
}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200022a4 	.word	0x200022a4

08009180 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009188:	f107 0308 	add.w	r3, r7, #8
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f857 	bl	8009240 <prvGetNextExpireTime>
 8009192:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f803 	bl	80091a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800919e:	f000 f8d5 	bl	800934c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091a2:	e7f1      	b.n	8009188 <prvTimerTask+0x8>

080091a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091ae:	f7ff f92b 	bl	8008408 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 f866 	bl	8009288 <prvSampleTimeNow>
 80091bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d130      	bne.n	8009226 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <prvProcessTimerOrBlockTask+0x3c>
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d806      	bhi.n	80091e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091d2:	f7ff f927 	bl	8008424 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7ff ff85 	bl	80090e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091de:	e024      	b.n	800922a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d008      	beq.n	80091f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091e6:	4b13      	ldr	r3, [pc, #76]	; (8009234 <prvProcessTimerOrBlockTask+0x90>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <prvProcessTimerOrBlockTask+0x50>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <prvProcessTimerOrBlockTask+0x52>
 80091f4:	2300      	movs	r3, #0
 80091f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <prvProcessTimerOrBlockTask+0x94>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	f7fe fe6f 	bl	8007ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800920a:	f7ff f90b 	bl	8008424 <xTaskResumeAll>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009214:	4b09      	ldr	r3, [pc, #36]	; (800923c <prvProcessTimerOrBlockTask+0x98>)
 8009216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	f3bf 8f6f 	isb	sy
}
 8009224:	e001      	b.n	800922a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009226:	f7ff f8fd 	bl	8008424 <xTaskResumeAll>
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	200022a8 	.word	0x200022a8
 8009238:	200022ac 	.word	0x200022ac
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009248:	4b0e      	ldr	r3, [pc, #56]	; (8009284 <prvGetNextExpireTime+0x44>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <prvGetNextExpireTime+0x16>
 8009252:	2201      	movs	r2, #1
 8009254:	e000      	b.n	8009258 <prvGetNextExpireTime+0x18>
 8009256:	2200      	movs	r2, #0
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <prvGetNextExpireTime+0x44>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e001      	b.n	8009274 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009274:	68fb      	ldr	r3, [r7, #12]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	200022a4 	.word	0x200022a4

08009288 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009290:	f7ff f966 	bl	8008560 <xTaskGetTickCount>
 8009294:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009296:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <prvSampleTimeNow+0x3c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	429a      	cmp	r2, r3
 800929e:	d205      	bcs.n	80092ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092a0:	f000 f936 	bl	8009510 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e002      	b.n	80092b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092b2:	4a04      	ldr	r2, [pc, #16]	; (80092c4 <prvSampleTimeNow+0x3c>)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092b8:	68fb      	ldr	r3, [r7, #12]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	200022b4 	.word	0x200022b4

080092c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d812      	bhi.n	8009314 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d302      	bcc.n	8009302 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092fc:	2301      	movs	r3, #1
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	e01b      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <prvInsertTimerInActiveList+0x7c>)
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3304      	adds	r3, #4
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f7fd fe00 	bl	8006f12 <vListInsert>
 8009312:	e012      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d206      	bcs.n	800932a <prvInsertTimerInActiveList+0x62>
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	617b      	str	r3, [r7, #20]
 8009328:	e007      	b.n	800933a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <prvInsertTimerInActiveList+0x80>)
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3304      	adds	r3, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4610      	mov	r0, r2
 8009336:	f7fd fdec 	bl	8006f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200022a8 	.word	0x200022a8
 8009348:	200022a4 	.word	0x200022a4

0800934c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08e      	sub	sp, #56	; 0x38
 8009350:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009352:	e0ca      	b.n	80094ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	da18      	bge.n	800938c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	3304      	adds	r3, #4
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10a      	bne.n	800937c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	61fb      	str	r3, [r7, #28]
}
 8009378:	bf00      	nop
 800937a:	e7fe      	b.n	800937a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009382:	6850      	ldr	r0, [r2, #4]
 8009384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009386:	6892      	ldr	r2, [r2, #8]
 8009388:	4611      	mov	r1, r2
 800938a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f2c0 80ab 	blt.w	80094ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d004      	beq.n	80093aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	3304      	adds	r3, #4
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fd fded 	bl	8006f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093aa:	463b      	mov	r3, r7
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7ff ff6b 	bl	8009288 <prvSampleTimeNow>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	f200 8096 	bhi.w	80094e8 <prvProcessReceivedCommands+0x19c>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <prvProcessReceivedCommands+0x78>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093ed 	.word	0x080093ed
 80093d0:	08009461 	.word	0x08009461
 80093d4:	08009475 	.word	0x08009475
 80093d8:	080094bf 	.word	0x080094bf
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	080093ed 	.word	0x080093ed
 80093e4:	08009461 	.word	0x08009461
 80093e8:	08009475 	.word	0x08009475
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	18d1      	adds	r1, r2, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800940c:	f7ff ff5c 	bl	80092c8 <prvInsertTimerInActiveList>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d069      	beq.n	80094ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b00      	cmp	r3, #0
 800942a:	d05e      	beq.n	80094ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	441a      	add	r2, r3
 8009434:	2300      	movs	r3, #0
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	2300      	movs	r3, #0
 800943a:	2100      	movs	r1, #0
 800943c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943e:	f7ff fe05 	bl	800904c <xTimerGenericCommand>
 8009442:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d14f      	bne.n	80094ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	61bb      	str	r3, [r7, #24]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009472:	e03a      	b.n	80094ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d10a      	bne.n	80094aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	617b      	str	r3, [r7, #20]
}
 80094a6:	bf00      	nop
 80094a8:	e7fe      	b.n	80094a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	699a      	ldr	r2, [r3, #24]
 80094ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b0:	18d1      	adds	r1, r2, r3
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b8:	f7ff ff06 	bl	80092c8 <prvInsertTimerInActiveList>
					break;
 80094bc:	e015      	b.n	80094ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d103      	bne.n	80094d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80094cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ce:	f000 fbdf 	bl	8009c90 <vPortFree>
 80094d2:	e00a      	b.n	80094ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094da:	f023 0301 	bic.w	r3, r3, #1
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094e6:	e000      	b.n	80094ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80094e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <prvProcessReceivedCommands+0x1c0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	1d39      	adds	r1, r7, #4
 80094f0:	2200      	movs	r2, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe f8fe 	bl	80076f4 <xQueueReceive>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f47f af2a 	bne.w	8009354 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	3730      	adds	r7, #48	; 0x30
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	200022ac 	.word	0x200022ac

08009510 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009516:	e048      	b.n	80095aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009518:	4b2d      	ldr	r3, [pc, #180]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009522:	4b2b      	ldr	r3, [pc, #172]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3304      	adds	r3, #4
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd fd27 	bl	8006f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02e      	beq.n	80095aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	429a      	cmp	r2, r3
 800955c:	d90e      	bls.n	800957c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800956a:	4b19      	ldr	r3, [pc, #100]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f7fd fccc 	bl	8006f12 <vListInsert>
 800957a:	e016      	b.n	80095aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800957c:	2300      	movs	r3, #0
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	2100      	movs	r1, #0
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff fd60 	bl	800904c <xTimerGenericCommand>
 800958c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	603b      	str	r3, [r7, #0]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095aa:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1b1      	bne.n	8009518 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095b4:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095ba:	4b06      	ldr	r3, [pc, #24]	; (80095d4 <prvSwitchTimerLists+0xc4>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a04      	ldr	r2, [pc, #16]	; (80095d0 <prvSwitchTimerLists+0xc0>)
 80095c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095c2:	4a04      	ldr	r2, [pc, #16]	; (80095d4 <prvSwitchTimerLists+0xc4>)
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	bf00      	nop
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	200022a4 	.word	0x200022a4
 80095d4:	200022a8 	.word	0x200022a8

080095d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095de:	f000 f969 	bl	80098b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <prvCheckForValidListAndQueue+0x60>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d120      	bne.n	800962c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095ea:	4814      	ldr	r0, [pc, #80]	; (800963c <prvCheckForValidListAndQueue+0x64>)
 80095ec:	f7fd fc40 	bl	8006e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095f0:	4813      	ldr	r0, [pc, #76]	; (8009640 <prvCheckForValidListAndQueue+0x68>)
 80095f2:	f7fd fc3d 	bl	8006e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095f6:	4b13      	ldr	r3, [pc, #76]	; (8009644 <prvCheckForValidListAndQueue+0x6c>)
 80095f8:	4a10      	ldr	r2, [pc, #64]	; (800963c <prvCheckForValidListAndQueue+0x64>)
 80095fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095fc:	4b12      	ldr	r3, [pc, #72]	; (8009648 <prvCheckForValidListAndQueue+0x70>)
 80095fe:	4a10      	ldr	r2, [pc, #64]	; (8009640 <prvCheckForValidListAndQueue+0x68>)
 8009600:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009602:	2300      	movs	r3, #0
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4b11      	ldr	r3, [pc, #68]	; (800964c <prvCheckForValidListAndQueue+0x74>)
 8009608:	4a11      	ldr	r2, [pc, #68]	; (8009650 <prvCheckForValidListAndQueue+0x78>)
 800960a:	2110      	movs	r1, #16
 800960c:	200a      	movs	r0, #10
 800960e:	f7fd fd4b 	bl	80070a8 <xQueueGenericCreateStatic>
 8009612:	4603      	mov	r3, r0
 8009614:	4a08      	ldr	r2, [pc, #32]	; (8009638 <prvCheckForValidListAndQueue+0x60>)
 8009616:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <prvCheckForValidListAndQueue+0x60>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <prvCheckForValidListAndQueue+0x60>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	490b      	ldr	r1, [pc, #44]	; (8009654 <prvCheckForValidListAndQueue+0x7c>)
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fc34 	bl	8007e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800962c:	f000 f972 	bl	8009914 <vPortExitCritical>
}
 8009630:	bf00      	nop
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	200022ac 	.word	0x200022ac
 800963c:	2000227c 	.word	0x2000227c
 8009640:	20002290 	.word	0x20002290
 8009644:	200022a4 	.word	0x200022a4
 8009648:	200022a8 	.word	0x200022a8
 800964c:	20002358 	.word	0x20002358
 8009650:	200022b8 	.word	0x200022b8
 8009654:	0800fb54 	.word	0x0800fb54

08009658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3b04      	subs	r3, #4
 8009668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3b04      	subs	r3, #4
 8009676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 0201 	bic.w	r2, r3, #1
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b04      	subs	r3, #4
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009688:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <pxPortInitialiseStack+0x64>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b14      	subs	r3, #20
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	3b04      	subs	r3, #4
 800969e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f06f 0202 	mvn.w	r2, #2
 80096a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3b20      	subs	r3, #32
 80096ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ae:	68fb      	ldr	r3, [r7, #12]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	080096c1 	.word	0x080096c1

080096c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <prvTaskExitError+0x54>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d2:	d00a      	beq.n	80096ea <prvTaskExitError+0x2a>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <prvTaskExitError+0x28>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	60bb      	str	r3, [r7, #8]
}
 80096fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096fe:	bf00      	nop
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0fc      	beq.n	8009700 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009706:	bf00      	nop
 8009708:	bf00      	nop
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	20000410 	.word	0x20000410
	...

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	20001d7c 	.word	0x20001d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009776:	4b46      	ldr	r3, [pc, #280]	; (8009890 <xPortStartScheduler+0x120>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4a46      	ldr	r2, [pc, #280]	; (8009894 <xPortStartScheduler+0x124>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10a      	bne.n	8009796 <xPortStartScheduler+0x26>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009796:	4b3e      	ldr	r3, [pc, #248]	; (8009890 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <xPortStartScheduler+0x128>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x46>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	60fb      	str	r3, [r7, #12]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <xPortStartScheduler+0x12c>)
 80097b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	22ff      	movs	r2, #255	; 0xff
 80097c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b31      	ldr	r3, [pc, #196]	; (80098a0 <xPortStartScheduler+0x130>)
 80097dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097de:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e4:	e009      	b.n	80097fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097e6:	4b2f      	ldr	r3, [pc, #188]	; (80098a4 <xPortStartScheduler+0x134>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <xPortStartScheduler+0x134>)
 80097ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009802:	2b80      	cmp	r3, #128	; 0x80
 8009804:	d0ef      	beq.n	80097e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1c3 0307 	rsb	r3, r3, #7
 800980e:	2b04      	cmp	r3, #4
 8009810:	d00a      	beq.n	8009828 <xPortStartScheduler+0xb8>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	60bb      	str	r3, [r7, #8]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <xPortStartScheduler+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	4a1d      	ldr	r2, [pc, #116]	; (80098a4 <xPortStartScheduler+0x134>)
 8009830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <xPortStartScheduler+0x134>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800983a:	4a1a      	ldr	r2, [pc, #104]	; (80098a4 <xPortStartScheduler+0x134>)
 800983c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <xPortStartScheduler+0x138>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <xPortStartScheduler+0x138>)
 800984c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009852:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <xPortStartScheduler+0x138>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <xPortStartScheduler+0x138>)
 8009858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800985c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800985e:	f000 f8dd 	bl	8009a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <xPortStartScheduler+0x13c>)
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009868:	f000 f8fc 	bl	8009a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800986c:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <xPortStartScheduler+0x140>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <xPortStartScheduler+0x140>)
 8009872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009878:	f7ff ff66 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800987c:	f7fe ff3a 	bl	80086f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009880:	f7ff ff1e 	bl	80096c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	e000ed00 	.word	0xe000ed00
 8009894:	410fc271 	.word	0x410fc271
 8009898:	410fc270 	.word	0x410fc270
 800989c:	e000e400 	.word	0xe000e400
 80098a0:	200023a8 	.word	0x200023a8
 80098a4:	200023ac 	.word	0x200023ac
 80098a8:	e000ed20 	.word	0xe000ed20
 80098ac:	20000410 	.word	0x20000410
 80098b0:	e000ef34 	.word	0xe000ef34

080098b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	607b      	str	r3, [r7, #4]
}
 80098cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ce:	4b0f      	ldr	r3, [pc, #60]	; (800990c <vPortEnterCritical+0x58>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a0d      	ldr	r2, [pc, #52]	; (800990c <vPortEnterCritical+0x58>)
 80098d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d8:	4b0c      	ldr	r3, [pc, #48]	; (800990c <vPortEnterCritical+0x58>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d10f      	bne.n	8009900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098e0:	4b0b      	ldr	r3, [pc, #44]	; (8009910 <vPortEnterCritical+0x5c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <vPortEnterCritical+0x4c>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	e7fe      	b.n	80098fe <vPortEnterCritical+0x4a>
	}
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20000410 	.word	0x20000410
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800991a:	4b12      	ldr	r3, [pc, #72]	; (8009964 <vPortExitCritical+0x50>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10a      	bne.n	8009938 <vPortExitCritical+0x24>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	607b      	str	r3, [r7, #4]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009938:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <vPortExitCritical+0x50>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3b01      	subs	r3, #1
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <vPortExitCritical+0x50>)
 8009940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009942:	4b08      	ldr	r3, [pc, #32]	; (8009964 <vPortExitCritical+0x50>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d105      	bne.n	8009956 <vPortExitCritical+0x42>
 800994a:	2300      	movs	r3, #0
 800994c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	f383 8811 	msr	BASEPRI, r3
}
 8009954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000410 	.word	0x20000410
	...

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f01e 0f10 	tst.w	lr, #16
 8009980:	bf08      	it	eq
 8009982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009994:	f380 8811 	msr	BASEPRI, r0
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f7fe fea8 	bl	80086f4 <vTaskSwitchContext>
 80099a4:	f04f 0000 	mov.w	r0, #0
 80099a8:	f380 8811 	msr	BASEPRI, r0
 80099ac:	bc09      	pop	{r0, r3}
 80099ae:	6819      	ldr	r1, [r3, #0]
 80099b0:	6808      	ldr	r0, [r1, #0]
 80099b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b6:	f01e 0f10 	tst.w	lr, #16
 80099ba:	bf08      	it	eq
 80099bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099c0:	f380 8809 	msr	PSP, r0
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst>:
 80099d0:	20001d7c 	.word	0x20001d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	607b      	str	r3, [r7, #4]
}
 80099f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099f2:	f7fe fdc5 	bl	8008580 <xTaskIncrementTick>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d003      	beq.n	8009a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <xPortSysTickHandler+0x40>)
 80099fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a02:	601a      	str	r2, [r3, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	f383 8811 	msr	BASEPRI, r3
}
 8009a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	e000ed04 	.word	0xe000ed04

08009a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a26:	4b0b      	ldr	r3, [pc, #44]	; (8009a54 <vPortSetupTimerInterrupt+0x38>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <vPortSetupTimerInterrupt+0x3c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <vPortSetupTimerInterrupt+0x40>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	099b      	lsrs	r3, r3, #6
 8009a38:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <vPortSetupTimerInterrupt+0x44>)
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a3e:	4b04      	ldr	r3, [pc, #16]	; (8009a50 <vPortSetupTimerInterrupt+0x34>)
 8009a40:	2207      	movs	r2, #7
 8009a42:	601a      	str	r2, [r3, #0]
}
 8009a44:	bf00      	nop
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	e000e010 	.word	0xe000e010
 8009a54:	e000e018 	.word	0xe000e018
 8009a58:	20000404 	.word	0x20000404
 8009a5c:	10624dd3 	.word	0x10624dd3
 8009a60:	e000e014 	.word	0xe000e014

08009a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a74 <vPortEnableVFP+0x10>
 8009a68:	6801      	ldr	r1, [r0, #0]
 8009a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a6e:	6001      	str	r1, [r0, #0]
 8009a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a72:	bf00      	nop
 8009a74:	e000ed88 	.word	0xe000ed88

08009a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a7e:	f3ef 8305 	mrs	r3, IPSR
 8009a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b0f      	cmp	r3, #15
 8009a88:	d914      	bls.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <vPortValidateInterruptPriority+0x70>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a94:	4b15      	ldr	r3, [pc, #84]	; (8009aec <vPortValidateInterruptPriority+0x74>)
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	7afa      	ldrb	r2, [r7, #11]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d20a      	bcs.n	8009ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	607b      	str	r3, [r7, #4]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <vPortValidateInterruptPriority+0x78>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <vPortValidateInterruptPriority+0x7c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d90a      	bls.n	8009ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	603b      	str	r3, [r7, #0]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <vPortValidateInterruptPriority+0x60>
	}
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	e000e3f0 	.word	0xe000e3f0
 8009aec:	200023a8 	.word	0x200023a8
 8009af0:	e000ed0c 	.word	0xe000ed0c
 8009af4:	200023ac 	.word	0x200023ac

08009af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b04:	f7fe fc80 	bl	8008408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b08:	4b5b      	ldr	r3, [pc, #364]	; (8009c78 <pvPortMalloc+0x180>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d101      	bne.n	8009b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b10:	f000 f920 	bl	8009d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b14:	4b59      	ldr	r3, [pc, #356]	; (8009c7c <pvPortMalloc+0x184>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f040 8093 	bne.w	8009c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01d      	beq.n	8009b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b28:	2208      	movs	r2, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d014      	beq.n	8009b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f023 0307 	bic.w	r3, r3, #7
 8009b40:	3308      	adds	r3, #8
 8009b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <pvPortMalloc+0x6c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	617b      	str	r3, [r7, #20]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06e      	beq.n	8009c48 <pvPortMalloc+0x150>
 8009b6a:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <pvPortMalloc+0x188>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d869      	bhi.n	8009c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b74:	4b43      	ldr	r3, [pc, #268]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b78:	4b42      	ldr	r3, [pc, #264]	; (8009c84 <pvPortMalloc+0x18c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b7e:	e004      	b.n	8009b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d903      	bls.n	8009b9c <pvPortMalloc+0xa4>
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f1      	bne.n	8009b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b9c:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <pvPortMalloc+0x180>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d050      	beq.n	8009c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ba6:	6a3b      	ldr	r3, [r7, #32]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2208      	movs	r2, #8
 8009bac:	4413      	add	r3, r2
 8009bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	2308      	movs	r3, #8
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d91f      	bls.n	8009c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	613b      	str	r3, [r7, #16]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	1ad2      	subs	r2, r2, r3
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c02:	69b8      	ldr	r0, [r7, #24]
 8009c04:	f000 f908 	bl	8009e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c08:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <pvPortMalloc+0x188>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	4a1b      	ldr	r2, [pc, #108]	; (8009c80 <pvPortMalloc+0x188>)
 8009c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <pvPortMalloc+0x188>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <pvPortMalloc+0x190>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d203      	bcs.n	8009c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c22:	4b17      	ldr	r3, [pc, #92]	; (8009c80 <pvPortMalloc+0x188>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <pvPortMalloc+0x190>)
 8009c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <pvPortMalloc+0x184>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	431a      	orrs	r2, r3
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <pvPortMalloc+0x194>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	4a11      	ldr	r2, [pc, #68]	; (8009c8c <pvPortMalloc+0x194>)
 8009c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c48:	f7fe fbec 	bl	8008424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	f003 0307 	and.w	r3, r3, #7
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <pvPortMalloc+0x174>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60fb      	str	r3, [r7, #12]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <pvPortMalloc+0x172>
	return pvReturn;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3728      	adds	r7, #40	; 0x28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200046e0 	.word	0x200046e0
 8009c7c:	200046f4 	.word	0x200046f4
 8009c80:	200046e4 	.word	0x200046e4
 8009c84:	200046d8 	.word	0x200046d8
 8009c88:	200046e8 	.word	0x200046e8
 8009c8c:	200046ec 	.word	0x200046ec

08009c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d04d      	beq.n	8009d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ca2:	2308      	movs	r3, #8
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4413      	add	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	4b24      	ldr	r3, [pc, #144]	; (8009d48 <vPortFree+0xb8>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <vPortFree+0x44>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60fb      	str	r3, [r7, #12]
}
 8009cd0:	bf00      	nop
 8009cd2:	e7fe      	b.n	8009cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00a      	beq.n	8009cf2 <vPortFree+0x62>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60bb      	str	r3, [r7, #8]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <vPortFree+0xb8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01e      	beq.n	8009d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11a      	bne.n	8009d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <vPortFree+0xb8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	43db      	mvns	r3, r3
 8009d12:	401a      	ands	r2, r3
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d18:	f7fe fb76 	bl	8008408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	4b0a      	ldr	r3, [pc, #40]	; (8009d4c <vPortFree+0xbc>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <vPortFree+0xbc>)
 8009d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f000 f874 	bl	8009e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <vPortFree+0xc0>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	4a06      	ldr	r2, [pc, #24]	; (8009d50 <vPortFree+0xc0>)
 8009d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d3a:	f7fe fb73 	bl	8008424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d3e:	bf00      	nop
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200046f4 	.word	0x200046f4
 8009d4c:	200046e4 	.word	0x200046e4
 8009d50:	200046f0 	.word	0x200046f0

08009d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d5a:	f242 3328 	movw	r3, #9000	; 0x2328
 8009d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d60:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <prvHeapInit+0xac>)
 8009d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0307 	and.w	r3, r3, #7
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00c      	beq.n	8009d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3307      	adds	r3, #7
 8009d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <prvHeapInit+0xac>)
 8009d84:	4413      	add	r3, r2
 8009d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d8c:	4a1d      	ldr	r2, [pc, #116]	; (8009e04 <prvHeapInit+0xb0>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d92:	4b1c      	ldr	r3, [pc, #112]	; (8009e04 <prvHeapInit+0xb0>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68ba      	ldr	r2, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1a9b      	subs	r3, r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a15      	ldr	r2, [pc, #84]	; (8009e08 <prvHeapInit+0xb4>)
 8009db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <prvHeapInit+0xb4>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dbe:	4b12      	ldr	r3, [pc, #72]	; (8009e08 <prvHeapInit+0xb4>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	1ad2      	subs	r2, r2, r3
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <prvHeapInit+0xb4>)
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <prvHeapInit+0xb8>)
 8009de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <prvHeapInit+0xbc>)
 8009dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dec:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <prvHeapInit+0xc0>)
 8009dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009df2:	601a      	str	r2, [r3, #0]
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	200023b0 	.word	0x200023b0
 8009e04:	200046d8 	.word	0x200046d8
 8009e08:	200046e0 	.word	0x200046e0
 8009e0c:	200046e8 	.word	0x200046e8
 8009e10:	200046e4 	.word	0x200046e4
 8009e14:	200046f4 	.word	0x200046f4

08009e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e20:	4b28      	ldr	r3, [pc, #160]	; (8009ec4 <prvInsertBlockIntoFreeList+0xac>)
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e002      	b.n	8009e2c <prvInsertBlockIntoFreeList+0x14>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d8f7      	bhi.n	8009e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d108      	bne.n	8009e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	441a      	add	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d118      	bne.n	8009ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d00d      	beq.n	8009e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	441a      	add	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e008      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e003      	b.n	8009ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d002      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	200046d8 	.word	0x200046d8
 8009ec8:	200046e0 	.word	0x200046e0

08009ecc <atof>:
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f000 bee5 	b.w	800ac9c <strtod>

08009ed2 <atoi>:
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	f000 bf71 	b.w	800adbc <strtol>
	...

08009edc <exit>:
 8009edc:	b508      	push	{r3, lr}
 8009ede:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <exit+0x1c>)
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	b113      	cbz	r3, 8009eea <exit+0xe>
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	f3af 8000 	nop.w
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <exit+0x20>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <exit+0x16>
 8009ef0:	4798      	blx	r3
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f7f8 fcfe 	bl	80028f4 <_exit>
 8009ef8:	00000000 	.word	0x00000000
 8009efc:	20004838 	.word	0x20004838

08009f00 <malloc>:
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <malloc+0xc>)
 8009f02:	4601      	mov	r1, r0
 8009f04:	6818      	ldr	r0, [r3, #0]
 8009f06:	f000 b82b 	b.w	8009f60 <_malloc_r>
 8009f0a:	bf00      	nop
 8009f0c:	200005d8 	.word	0x200005d8

08009f10 <free>:
 8009f10:	4b02      	ldr	r3, [pc, #8]	; (8009f1c <free+0xc>)
 8009f12:	4601      	mov	r1, r0
 8009f14:	6818      	ldr	r0, [r3, #0]
 8009f16:	f002 bf01 	b.w	800cd1c <_free_r>
 8009f1a:	bf00      	nop
 8009f1c:	200005d8 	.word	0x200005d8

08009f20 <sbrk_aligned>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	4e0e      	ldr	r6, [pc, #56]	; (8009f5c <sbrk_aligned+0x3c>)
 8009f24:	460c      	mov	r4, r1
 8009f26:	6831      	ldr	r1, [r6, #0]
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b911      	cbnz	r1, 8009f32 <sbrk_aligned+0x12>
 8009f2c:	f001 fff0 	bl	800bf10 <_sbrk_r>
 8009f30:	6030      	str	r0, [r6, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f001 ffeb 	bl	800bf10 <_sbrk_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d00a      	beq.n	8009f54 <sbrk_aligned+0x34>
 8009f3e:	1cc4      	adds	r4, r0, #3
 8009f40:	f024 0403 	bic.w	r4, r4, #3
 8009f44:	42a0      	cmp	r0, r4
 8009f46:	d007      	beq.n	8009f58 <sbrk_aligned+0x38>
 8009f48:	1a21      	subs	r1, r4, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f001 ffe0 	bl	800bf10 <_sbrk_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d101      	bne.n	8009f58 <sbrk_aligned+0x38>
 8009f54:	f04f 34ff 	mov.w	r4, #4294967295
 8009f58:	4620      	mov	r0, r4
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	200046fc 	.word	0x200046fc

08009f60 <_malloc_r>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4607      	mov	r7, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d905      	bls.n	8009f88 <_malloc_r+0x28>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	2600      	movs	r6, #0
 8009f82:	4630      	mov	r0, r6
 8009f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a05c <_malloc_r+0xfc>
 8009f8c:	f000 f868 	bl	800a060 <__malloc_lock>
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	461c      	mov	r4, r3
 8009f96:	bb5c      	cbnz	r4, 8009ff0 <_malloc_r+0x90>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	f7ff ffc0 	bl	8009f20 <sbrk_aligned>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	d155      	bne.n	800a052 <_malloc_r+0xf2>
 8009fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8009faa:	4626      	mov	r6, r4
 8009fac:	2e00      	cmp	r6, #0
 8009fae:	d145      	bne.n	800a03c <_malloc_r+0xdc>
 8009fb0:	2c00      	cmp	r4, #0
 8009fb2:	d048      	beq.n	800a046 <_malloc_r+0xe6>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4638      	mov	r0, r7
 8009fba:	eb04 0903 	add.w	r9, r4, r3
 8009fbe:	f001 ffa7 	bl	800bf10 <_sbrk_r>
 8009fc2:	4581      	cmp	r9, r0
 8009fc4:	d13f      	bne.n	800a046 <_malloc_r+0xe6>
 8009fc6:	6821      	ldr	r1, [r4, #0]
 8009fc8:	1a6d      	subs	r5, r5, r1
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ffa7 	bl	8009f20 <sbrk_aligned>
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d037      	beq.n	800a046 <_malloc_r+0xe6>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	442b      	add	r3, r5
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d038      	beq.n	800a056 <_malloc_r+0xf6>
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	42a2      	cmp	r2, r4
 8009fe8:	d12b      	bne.n	800a042 <_malloc_r+0xe2>
 8009fea:	2200      	movs	r2, #0
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	e00f      	b.n	800a010 <_malloc_r+0xb0>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	1b52      	subs	r2, r2, r5
 8009ff4:	d41f      	bmi.n	800a036 <_malloc_r+0xd6>
 8009ff6:	2a0b      	cmp	r2, #11
 8009ff8:	d917      	bls.n	800a02a <_malloc_r+0xca>
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	6025      	str	r5, [r4, #0]
 800a000:	bf18      	it	ne
 800a002:	6059      	strne	r1, [r3, #4]
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	bf08      	it	eq
 800a008:	f8c8 1000 	streq.w	r1, [r8]
 800a00c:	5162      	str	r2, [r4, r5]
 800a00e:	604b      	str	r3, [r1, #4]
 800a010:	4638      	mov	r0, r7
 800a012:	f104 060b 	add.w	r6, r4, #11
 800a016:	f000 f829 	bl	800a06c <__malloc_unlock>
 800a01a:	f026 0607 	bic.w	r6, r6, #7
 800a01e:	1d23      	adds	r3, r4, #4
 800a020:	1af2      	subs	r2, r6, r3
 800a022:	d0ae      	beq.n	8009f82 <_malloc_r+0x22>
 800a024:	1b9b      	subs	r3, r3, r6
 800a026:	50a3      	str	r3, [r4, r2]
 800a028:	e7ab      	b.n	8009f82 <_malloc_r+0x22>
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	6862      	ldr	r2, [r4, #4]
 800a02e:	d1dd      	bne.n	8009fec <_malloc_r+0x8c>
 800a030:	f8c8 2000 	str.w	r2, [r8]
 800a034:	e7ec      	b.n	800a010 <_malloc_r+0xb0>
 800a036:	4623      	mov	r3, r4
 800a038:	6864      	ldr	r4, [r4, #4]
 800a03a:	e7ac      	b.n	8009f96 <_malloc_r+0x36>
 800a03c:	4634      	mov	r4, r6
 800a03e:	6876      	ldr	r6, [r6, #4]
 800a040:	e7b4      	b.n	8009fac <_malloc_r+0x4c>
 800a042:	4613      	mov	r3, r2
 800a044:	e7cc      	b.n	8009fe0 <_malloc_r+0x80>
 800a046:	230c      	movs	r3, #12
 800a048:	603b      	str	r3, [r7, #0]
 800a04a:	4638      	mov	r0, r7
 800a04c:	f000 f80e 	bl	800a06c <__malloc_unlock>
 800a050:	e797      	b.n	8009f82 <_malloc_r+0x22>
 800a052:	6025      	str	r5, [r4, #0]
 800a054:	e7dc      	b.n	800a010 <_malloc_r+0xb0>
 800a056:	605b      	str	r3, [r3, #4]
 800a058:	deff      	udf	#255	; 0xff
 800a05a:	bf00      	nop
 800a05c:	200046f8 	.word	0x200046f8

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_lock+0x8>)
 800a062:	f001 bfa2 	b.w	800bfaa <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20004840 	.word	0x20004840

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__malloc_unlock+0x8>)
 800a06e:	f001 bf9d 	b.w	800bfac <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20004840 	.word	0x20004840

0800a078 <sulp>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	ec45 4b10 	vmov	d0, r4, r5
 800a082:	4616      	mov	r6, r2
 800a084:	f003 fd6c 	bl	800db60 <__ulp>
 800a088:	ec51 0b10 	vmov	r0, r1, d0
 800a08c:	b17e      	cbz	r6, 800a0ae <sulp+0x36>
 800a08e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a092:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a096:	2b00      	cmp	r3, #0
 800a098:	dd09      	ble.n	800a0ae <sulp+0x36>
 800a09a:	051b      	lsls	r3, r3, #20
 800a09c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a0a0:	2400      	movs	r4, #0
 800a0a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a0a6:	4622      	mov	r2, r4
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	f7f6 faa5 	bl	80005f8 <__aeabi_dmul>
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}

0800a0b0 <_strtod_l>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	ed2d 8b02 	vpush	{d8}
 800a0b8:	b09b      	sub	sp, #108	; 0x6c
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	9213      	str	r2, [sp, #76]	; 0x4c
 800a0be:	2200      	movs	r2, #0
 800a0c0:	9216      	str	r2, [sp, #88]	; 0x58
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	f04f 0800 	mov.w	r8, #0
 800a0c8:	f04f 0900 	mov.w	r9, #0
 800a0cc:	460a      	mov	r2, r1
 800a0ce:	9215      	str	r2, [sp, #84]	; 0x54
 800a0d0:	7811      	ldrb	r1, [r2, #0]
 800a0d2:	292b      	cmp	r1, #43	; 0x2b
 800a0d4:	d04c      	beq.n	800a170 <_strtod_l+0xc0>
 800a0d6:	d83a      	bhi.n	800a14e <_strtod_l+0x9e>
 800a0d8:	290d      	cmp	r1, #13
 800a0da:	d834      	bhi.n	800a146 <_strtod_l+0x96>
 800a0dc:	2908      	cmp	r1, #8
 800a0de:	d834      	bhi.n	800a14a <_strtod_l+0x9a>
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	d03d      	beq.n	800a160 <_strtod_l+0xb0>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	920a      	str	r2, [sp, #40]	; 0x28
 800a0e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a0ea:	7832      	ldrb	r2, [r6, #0]
 800a0ec:	2a30      	cmp	r2, #48	; 0x30
 800a0ee:	f040 80b4 	bne.w	800a25a <_strtod_l+0x1aa>
 800a0f2:	7872      	ldrb	r2, [r6, #1]
 800a0f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a0f8:	2a58      	cmp	r2, #88	; 0x58
 800a0fa:	d170      	bne.n	800a1de <_strtod_l+0x12e>
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	ab16      	add	r3, sp, #88	; 0x58
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	4a8e      	ldr	r2, [pc, #568]	; (800a340 <_strtod_l+0x290>)
 800a108:	ab17      	add	r3, sp, #92	; 0x5c
 800a10a:	a915      	add	r1, sp, #84	; 0x54
 800a10c:	4620      	mov	r0, r4
 800a10e:	f002 feb9 	bl	800ce84 <__gethex>
 800a112:	f010 070f 	ands.w	r7, r0, #15
 800a116:	4605      	mov	r5, r0
 800a118:	d005      	beq.n	800a126 <_strtod_l+0x76>
 800a11a:	2f06      	cmp	r7, #6
 800a11c:	d12a      	bne.n	800a174 <_strtod_l+0xc4>
 800a11e:	3601      	adds	r6, #1
 800a120:	2300      	movs	r3, #0
 800a122:	9615      	str	r6, [sp, #84]	; 0x54
 800a124:	930a      	str	r3, [sp, #40]	; 0x28
 800a126:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f040 857f 	bne.w	800ac2c <_strtod_l+0xb7c>
 800a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a130:	b1db      	cbz	r3, 800a16a <_strtod_l+0xba>
 800a132:	4642      	mov	r2, r8
 800a134:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a138:	ec43 2b10 	vmov	d0, r2, r3
 800a13c:	b01b      	add	sp, #108	; 0x6c
 800a13e:	ecbd 8b02 	vpop	{d8}
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	2920      	cmp	r1, #32
 800a148:	d1cc      	bne.n	800a0e4 <_strtod_l+0x34>
 800a14a:	3201      	adds	r2, #1
 800a14c:	e7bf      	b.n	800a0ce <_strtod_l+0x1e>
 800a14e:	292d      	cmp	r1, #45	; 0x2d
 800a150:	d1c8      	bne.n	800a0e4 <_strtod_l+0x34>
 800a152:	2101      	movs	r1, #1
 800a154:	910a      	str	r1, [sp, #40]	; 0x28
 800a156:	1c51      	adds	r1, r2, #1
 800a158:	9115      	str	r1, [sp, #84]	; 0x54
 800a15a:	7852      	ldrb	r2, [r2, #1]
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	d1c3      	bne.n	800a0e8 <_strtod_l+0x38>
 800a160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a162:	9515      	str	r5, [sp, #84]	; 0x54
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 855f 	bne.w	800ac28 <_strtod_l+0xb78>
 800a16a:	4642      	mov	r2, r8
 800a16c:	464b      	mov	r3, r9
 800a16e:	e7e3      	b.n	800a138 <_strtod_l+0x88>
 800a170:	2100      	movs	r1, #0
 800a172:	e7ef      	b.n	800a154 <_strtod_l+0xa4>
 800a174:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a176:	b13a      	cbz	r2, 800a188 <_strtod_l+0xd8>
 800a178:	2135      	movs	r1, #53	; 0x35
 800a17a:	a818      	add	r0, sp, #96	; 0x60
 800a17c:	f003 fded 	bl	800dd5a <__copybits>
 800a180:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a182:	4620      	mov	r0, r4
 800a184:	f003 f9c0 	bl	800d508 <_Bfree>
 800a188:	3f01      	subs	r7, #1
 800a18a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a18c:	2f04      	cmp	r7, #4
 800a18e:	d806      	bhi.n	800a19e <_strtod_l+0xee>
 800a190:	e8df f007 	tbb	[pc, r7]
 800a194:	201d0314 	.word	0x201d0314
 800a198:	14          	.byte	0x14
 800a199:	00          	.byte	0x00
 800a19a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a19e:	05e9      	lsls	r1, r5, #23
 800a1a0:	bf48      	it	mi
 800a1a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a1a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1aa:	0d1b      	lsrs	r3, r3, #20
 800a1ac:	051b      	lsls	r3, r3, #20
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1b9      	bne.n	800a126 <_strtod_l+0x76>
 800a1b2:	f001 fecf 	bl	800bf54 <__errno>
 800a1b6:	2322      	movs	r3, #34	; 0x22
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	e7b4      	b.n	800a126 <_strtod_l+0x76>
 800a1bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a1c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a1c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a1cc:	e7e7      	b.n	800a19e <_strtod_l+0xee>
 800a1ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a348 <_strtod_l+0x298>
 800a1d2:	e7e4      	b.n	800a19e <_strtod_l+0xee>
 800a1d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a1d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a1dc:	e7df      	b.n	800a19e <_strtod_l+0xee>
 800a1de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	2b30      	cmp	r3, #48	; 0x30
 800a1e8:	d0f9      	beq.n	800a1de <_strtod_l+0x12e>
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d09b      	beq.n	800a126 <_strtod_l+0x76>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f04f 0a00 	mov.w	sl, #0
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a1fe:	46d3      	mov	fp, sl
 800a200:	220a      	movs	r2, #10
 800a202:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a204:	7806      	ldrb	r6, [r0, #0]
 800a206:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a20a:	b2d9      	uxtb	r1, r3
 800a20c:	2909      	cmp	r1, #9
 800a20e:	d926      	bls.n	800a25e <_strtod_l+0x1ae>
 800a210:	494c      	ldr	r1, [pc, #304]	; (800a344 <_strtod_l+0x294>)
 800a212:	2201      	movs	r2, #1
 800a214:	f001 fd7f 	bl	800bd16 <strncmp>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d030      	beq.n	800a27e <_strtod_l+0x1ce>
 800a21c:	2000      	movs	r0, #0
 800a21e:	4632      	mov	r2, r6
 800a220:	9005      	str	r0, [sp, #20]
 800a222:	465e      	mov	r6, fp
 800a224:	4603      	mov	r3, r0
 800a226:	2a65      	cmp	r2, #101	; 0x65
 800a228:	d001      	beq.n	800a22e <_strtod_l+0x17e>
 800a22a:	2a45      	cmp	r2, #69	; 0x45
 800a22c:	d113      	bne.n	800a256 <_strtod_l+0x1a6>
 800a22e:	b91e      	cbnz	r6, 800a238 <_strtod_l+0x188>
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	4302      	orrs	r2, r0
 800a234:	d094      	beq.n	800a160 <_strtod_l+0xb0>
 800a236:	2600      	movs	r6, #0
 800a238:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a23a:	1c6a      	adds	r2, r5, #1
 800a23c:	9215      	str	r2, [sp, #84]	; 0x54
 800a23e:	786a      	ldrb	r2, [r5, #1]
 800a240:	2a2b      	cmp	r2, #43	; 0x2b
 800a242:	d074      	beq.n	800a32e <_strtod_l+0x27e>
 800a244:	2a2d      	cmp	r2, #45	; 0x2d
 800a246:	d078      	beq.n	800a33a <_strtod_l+0x28a>
 800a248:	f04f 0c00 	mov.w	ip, #0
 800a24c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a250:	2909      	cmp	r1, #9
 800a252:	d97f      	bls.n	800a354 <_strtod_l+0x2a4>
 800a254:	9515      	str	r5, [sp, #84]	; 0x54
 800a256:	2700      	movs	r7, #0
 800a258:	e09e      	b.n	800a398 <_strtod_l+0x2e8>
 800a25a:	2300      	movs	r3, #0
 800a25c:	e7c8      	b.n	800a1f0 <_strtod_l+0x140>
 800a25e:	f1bb 0f08 	cmp.w	fp, #8
 800a262:	bfd8      	it	le
 800a264:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a266:	f100 0001 	add.w	r0, r0, #1
 800a26a:	bfda      	itte	le
 800a26c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a270:	9309      	strle	r3, [sp, #36]	; 0x24
 800a272:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a276:	f10b 0b01 	add.w	fp, fp, #1
 800a27a:	9015      	str	r0, [sp, #84]	; 0x54
 800a27c:	e7c1      	b.n	800a202 <_strtod_l+0x152>
 800a27e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	9215      	str	r2, [sp, #84]	; 0x54
 800a284:	785a      	ldrb	r2, [r3, #1]
 800a286:	f1bb 0f00 	cmp.w	fp, #0
 800a28a:	d037      	beq.n	800a2fc <_strtod_l+0x24c>
 800a28c:	9005      	str	r0, [sp, #20]
 800a28e:	465e      	mov	r6, fp
 800a290:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a294:	2b09      	cmp	r3, #9
 800a296:	d912      	bls.n	800a2be <_strtod_l+0x20e>
 800a298:	2301      	movs	r3, #1
 800a29a:	e7c4      	b.n	800a226 <_strtod_l+0x176>
 800a29c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	9215      	str	r2, [sp, #84]	; 0x54
 800a2a2:	785a      	ldrb	r2, [r3, #1]
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	2a30      	cmp	r2, #48	; 0x30
 800a2a8:	d0f8      	beq.n	800a29c <_strtod_l+0x1ec>
 800a2aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	f200 84c1 	bhi.w	800ac36 <_strtod_l+0xb86>
 800a2b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b6:	9005      	str	r0, [sp, #20]
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2bc:	4606      	mov	r6, r0
 800a2be:	3a30      	subs	r2, #48	; 0x30
 800a2c0:	f100 0301 	add.w	r3, r0, #1
 800a2c4:	d014      	beq.n	800a2f0 <_strtod_l+0x240>
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	4419      	add	r1, r3
 800a2ca:	9105      	str	r1, [sp, #20]
 800a2cc:	4633      	mov	r3, r6
 800a2ce:	eb00 0c06 	add.w	ip, r0, r6
 800a2d2:	210a      	movs	r1, #10
 800a2d4:	4563      	cmp	r3, ip
 800a2d6:	d113      	bne.n	800a300 <_strtod_l+0x250>
 800a2d8:	1833      	adds	r3, r6, r0
 800a2da:	2b08      	cmp	r3, #8
 800a2dc:	f106 0601 	add.w	r6, r6, #1
 800a2e0:	4406      	add	r6, r0
 800a2e2:	dc1a      	bgt.n	800a31a <_strtod_l+0x26a>
 800a2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	fb03 2301 	mla	r3, r3, r1, r2
 800a2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a2f2:	1c51      	adds	r1, r2, #1
 800a2f4:	9115      	str	r1, [sp, #84]	; 0x54
 800a2f6:	7852      	ldrb	r2, [r2, #1]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	e7c9      	b.n	800a290 <_strtod_l+0x1e0>
 800a2fc:	4658      	mov	r0, fp
 800a2fe:	e7d2      	b.n	800a2a6 <_strtod_l+0x1f6>
 800a300:	2b08      	cmp	r3, #8
 800a302:	f103 0301 	add.w	r3, r3, #1
 800a306:	dc03      	bgt.n	800a310 <_strtod_l+0x260>
 800a308:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a30a:	434f      	muls	r7, r1
 800a30c:	9709      	str	r7, [sp, #36]	; 0x24
 800a30e:	e7e1      	b.n	800a2d4 <_strtod_l+0x224>
 800a310:	2b10      	cmp	r3, #16
 800a312:	bfd8      	it	le
 800a314:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a318:	e7dc      	b.n	800a2d4 <_strtod_l+0x224>
 800a31a:	2e10      	cmp	r6, #16
 800a31c:	bfdc      	itt	le
 800a31e:	230a      	movle	r3, #10
 800a320:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a324:	e7e3      	b.n	800a2ee <_strtod_l+0x23e>
 800a326:	2300      	movs	r3, #0
 800a328:	9305      	str	r3, [sp, #20]
 800a32a:	2301      	movs	r3, #1
 800a32c:	e780      	b.n	800a230 <_strtod_l+0x180>
 800a32e:	f04f 0c00 	mov.w	ip, #0
 800a332:	1caa      	adds	r2, r5, #2
 800a334:	9215      	str	r2, [sp, #84]	; 0x54
 800a336:	78aa      	ldrb	r2, [r5, #2]
 800a338:	e788      	b.n	800a24c <_strtod_l+0x19c>
 800a33a:	f04f 0c01 	mov.w	ip, #1
 800a33e:	e7f8      	b.n	800a332 <_strtod_l+0x282>
 800a340:	0800fc18 	.word	0x0800fc18
 800a344:	0800fc14 	.word	0x0800fc14
 800a348:	7ff00000 	.word	0x7ff00000
 800a34c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a34e:	1c51      	adds	r1, r2, #1
 800a350:	9115      	str	r1, [sp, #84]	; 0x54
 800a352:	7852      	ldrb	r2, [r2, #1]
 800a354:	2a30      	cmp	r2, #48	; 0x30
 800a356:	d0f9      	beq.n	800a34c <_strtod_l+0x29c>
 800a358:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a35c:	2908      	cmp	r1, #8
 800a35e:	f63f af7a 	bhi.w	800a256 <_strtod_l+0x1a6>
 800a362:	3a30      	subs	r2, #48	; 0x30
 800a364:	9208      	str	r2, [sp, #32]
 800a366:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a368:	920c      	str	r2, [sp, #48]	; 0x30
 800a36a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a36c:	1c57      	adds	r7, r2, #1
 800a36e:	9715      	str	r7, [sp, #84]	; 0x54
 800a370:	7852      	ldrb	r2, [r2, #1]
 800a372:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a376:	f1be 0f09 	cmp.w	lr, #9
 800a37a:	d938      	bls.n	800a3ee <_strtod_l+0x33e>
 800a37c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a37e:	1a7f      	subs	r7, r7, r1
 800a380:	2f08      	cmp	r7, #8
 800a382:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a386:	dc03      	bgt.n	800a390 <_strtod_l+0x2e0>
 800a388:	9908      	ldr	r1, [sp, #32]
 800a38a:	428f      	cmp	r7, r1
 800a38c:	bfa8      	it	ge
 800a38e:	460f      	movge	r7, r1
 800a390:	f1bc 0f00 	cmp.w	ip, #0
 800a394:	d000      	beq.n	800a398 <_strtod_l+0x2e8>
 800a396:	427f      	negs	r7, r7
 800a398:	2e00      	cmp	r6, #0
 800a39a:	d14f      	bne.n	800a43c <_strtod_l+0x38c>
 800a39c:	9904      	ldr	r1, [sp, #16]
 800a39e:	4301      	orrs	r1, r0
 800a3a0:	f47f aec1 	bne.w	800a126 <_strtod_l+0x76>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f47f aedb 	bne.w	800a160 <_strtod_l+0xb0>
 800a3aa:	2a69      	cmp	r2, #105	; 0x69
 800a3ac:	d029      	beq.n	800a402 <_strtod_l+0x352>
 800a3ae:	dc26      	bgt.n	800a3fe <_strtod_l+0x34e>
 800a3b0:	2a49      	cmp	r2, #73	; 0x49
 800a3b2:	d026      	beq.n	800a402 <_strtod_l+0x352>
 800a3b4:	2a4e      	cmp	r2, #78	; 0x4e
 800a3b6:	f47f aed3 	bne.w	800a160 <_strtod_l+0xb0>
 800a3ba:	499b      	ldr	r1, [pc, #620]	; (800a628 <_strtod_l+0x578>)
 800a3bc:	a815      	add	r0, sp, #84	; 0x54
 800a3be:	f002 ffa1 	bl	800d304 <__match>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f43f aecc 	beq.w	800a160 <_strtod_l+0xb0>
 800a3c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b28      	cmp	r3, #40	; 0x28
 800a3ce:	d12f      	bne.n	800a430 <_strtod_l+0x380>
 800a3d0:	4996      	ldr	r1, [pc, #600]	; (800a62c <_strtod_l+0x57c>)
 800a3d2:	aa18      	add	r2, sp, #96	; 0x60
 800a3d4:	a815      	add	r0, sp, #84	; 0x54
 800a3d6:	f002 ffa9 	bl	800d32c <__hexnan>
 800a3da:	2805      	cmp	r0, #5
 800a3dc:	d128      	bne.n	800a430 <_strtod_l+0x380>
 800a3de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a3e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a3ec:	e69b      	b.n	800a126 <_strtod_l+0x76>
 800a3ee:	9f08      	ldr	r7, [sp, #32]
 800a3f0:	210a      	movs	r1, #10
 800a3f2:	fb01 2107 	mla	r1, r1, r7, r2
 800a3f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a3fa:	9208      	str	r2, [sp, #32]
 800a3fc:	e7b5      	b.n	800a36a <_strtod_l+0x2ba>
 800a3fe:	2a6e      	cmp	r2, #110	; 0x6e
 800a400:	e7d9      	b.n	800a3b6 <_strtod_l+0x306>
 800a402:	498b      	ldr	r1, [pc, #556]	; (800a630 <_strtod_l+0x580>)
 800a404:	a815      	add	r0, sp, #84	; 0x54
 800a406:	f002 ff7d 	bl	800d304 <__match>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	f43f aea8 	beq.w	800a160 <_strtod_l+0xb0>
 800a410:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a412:	4988      	ldr	r1, [pc, #544]	; (800a634 <_strtod_l+0x584>)
 800a414:	3b01      	subs	r3, #1
 800a416:	a815      	add	r0, sp, #84	; 0x54
 800a418:	9315      	str	r3, [sp, #84]	; 0x54
 800a41a:	f002 ff73 	bl	800d304 <__match>
 800a41e:	b910      	cbnz	r0, 800a426 <_strtod_l+0x376>
 800a420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a422:	3301      	adds	r3, #1
 800a424:	9315      	str	r3, [sp, #84]	; 0x54
 800a426:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a644 <_strtod_l+0x594>
 800a42a:	f04f 0800 	mov.w	r8, #0
 800a42e:	e67a      	b.n	800a126 <_strtod_l+0x76>
 800a430:	4881      	ldr	r0, [pc, #516]	; (800a638 <_strtod_l+0x588>)
 800a432:	f001 fdcd 	bl	800bfd0 <nan>
 800a436:	ec59 8b10 	vmov	r8, r9, d0
 800a43a:	e674      	b.n	800a126 <_strtod_l+0x76>
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a440:	1afb      	subs	r3, r7, r3
 800a442:	f1bb 0f00 	cmp.w	fp, #0
 800a446:	bf08      	it	eq
 800a448:	46b3      	moveq	fp, r6
 800a44a:	2e10      	cmp	r6, #16
 800a44c:	9308      	str	r3, [sp, #32]
 800a44e:	4635      	mov	r5, r6
 800a450:	bfa8      	it	ge
 800a452:	2510      	movge	r5, #16
 800a454:	f7f6 f856 	bl	8000504 <__aeabi_ui2d>
 800a458:	2e09      	cmp	r6, #9
 800a45a:	4680      	mov	r8, r0
 800a45c:	4689      	mov	r9, r1
 800a45e:	dd13      	ble.n	800a488 <_strtod_l+0x3d8>
 800a460:	4b76      	ldr	r3, [pc, #472]	; (800a63c <_strtod_l+0x58c>)
 800a462:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a466:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a46a:	f7f6 f8c5 	bl	80005f8 <__aeabi_dmul>
 800a46e:	4680      	mov	r8, r0
 800a470:	4650      	mov	r0, sl
 800a472:	4689      	mov	r9, r1
 800a474:	f7f6 f846 	bl	8000504 <__aeabi_ui2d>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f5 ff04 	bl	800028c <__adddf3>
 800a484:	4680      	mov	r8, r0
 800a486:	4689      	mov	r9, r1
 800a488:	2e0f      	cmp	r6, #15
 800a48a:	dc38      	bgt.n	800a4fe <_strtod_l+0x44e>
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f43f ae49 	beq.w	800a126 <_strtod_l+0x76>
 800a494:	dd24      	ble.n	800a4e0 <_strtod_l+0x430>
 800a496:	2b16      	cmp	r3, #22
 800a498:	dc0b      	bgt.n	800a4b2 <_strtod_l+0x402>
 800a49a:	4968      	ldr	r1, [pc, #416]	; (800a63c <_strtod_l+0x58c>)
 800a49c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4a4:	4642      	mov	r2, r8
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	f7f6 f8a6 	bl	80005f8 <__aeabi_dmul>
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	4689      	mov	r9, r1
 800a4b0:	e639      	b.n	800a126 <_strtod_l+0x76>
 800a4b2:	9a08      	ldr	r2, [sp, #32]
 800a4b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	db20      	blt.n	800a4fe <_strtod_l+0x44e>
 800a4bc:	4c5f      	ldr	r4, [pc, #380]	; (800a63c <_strtod_l+0x58c>)
 800a4be:	f1c6 060f 	rsb	r6, r6, #15
 800a4c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a4c6:	4642      	mov	r2, r8
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ce:	f7f6 f893 	bl	80005f8 <__aeabi_dmul>
 800a4d2:	9b08      	ldr	r3, [sp, #32]
 800a4d4:	1b9e      	subs	r6, r3, r6
 800a4d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a4da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a4de:	e7e3      	b.n	800a4a8 <_strtod_l+0x3f8>
 800a4e0:	9b08      	ldr	r3, [sp, #32]
 800a4e2:	3316      	adds	r3, #22
 800a4e4:	db0b      	blt.n	800a4fe <_strtod_l+0x44e>
 800a4e6:	9b05      	ldr	r3, [sp, #20]
 800a4e8:	1bdf      	subs	r7, r3, r7
 800a4ea:	4b54      	ldr	r3, [pc, #336]	; (800a63c <_strtod_l+0x58c>)
 800a4ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	f7f6 f9a8 	bl	800084c <__aeabi_ddiv>
 800a4fc:	e7d6      	b.n	800a4ac <_strtod_l+0x3fc>
 800a4fe:	9b08      	ldr	r3, [sp, #32]
 800a500:	1b75      	subs	r5, r6, r5
 800a502:	441d      	add	r5, r3
 800a504:	2d00      	cmp	r5, #0
 800a506:	dd70      	ble.n	800a5ea <_strtod_l+0x53a>
 800a508:	f015 030f 	ands.w	r3, r5, #15
 800a50c:	d00a      	beq.n	800a524 <_strtod_l+0x474>
 800a50e:	494b      	ldr	r1, [pc, #300]	; (800a63c <_strtod_l+0x58c>)
 800a510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a514:	4642      	mov	r2, r8
 800a516:	464b      	mov	r3, r9
 800a518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a51c:	f7f6 f86c 	bl	80005f8 <__aeabi_dmul>
 800a520:	4680      	mov	r8, r0
 800a522:	4689      	mov	r9, r1
 800a524:	f035 050f 	bics.w	r5, r5, #15
 800a528:	d04d      	beq.n	800a5c6 <_strtod_l+0x516>
 800a52a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a52e:	dd22      	ble.n	800a576 <_strtod_l+0x4c6>
 800a530:	2500      	movs	r5, #0
 800a532:	46ab      	mov	fp, r5
 800a534:	9509      	str	r5, [sp, #36]	; 0x24
 800a536:	9505      	str	r5, [sp, #20]
 800a538:	2322      	movs	r3, #34	; 0x22
 800a53a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a644 <_strtod_l+0x594>
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	f04f 0800 	mov.w	r8, #0
 800a544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a546:	2b00      	cmp	r3, #0
 800a548:	f43f aded 	beq.w	800a126 <_strtod_l+0x76>
 800a54c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a54e:	4620      	mov	r0, r4
 800a550:	f002 ffda 	bl	800d508 <_Bfree>
 800a554:	9905      	ldr	r1, [sp, #20]
 800a556:	4620      	mov	r0, r4
 800a558:	f002 ffd6 	bl	800d508 <_Bfree>
 800a55c:	4659      	mov	r1, fp
 800a55e:	4620      	mov	r0, r4
 800a560:	f002 ffd2 	bl	800d508 <_Bfree>
 800a564:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a566:	4620      	mov	r0, r4
 800a568:	f002 ffce 	bl	800d508 <_Bfree>
 800a56c:	4629      	mov	r1, r5
 800a56e:	4620      	mov	r0, r4
 800a570:	f002 ffca 	bl	800d508 <_Bfree>
 800a574:	e5d7      	b.n	800a126 <_strtod_l+0x76>
 800a576:	4b32      	ldr	r3, [pc, #200]	; (800a640 <_strtod_l+0x590>)
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	2300      	movs	r3, #0
 800a57c:	112d      	asrs	r5, r5, #4
 800a57e:	4640      	mov	r0, r8
 800a580:	4649      	mov	r1, r9
 800a582:	469a      	mov	sl, r3
 800a584:	2d01      	cmp	r5, #1
 800a586:	dc21      	bgt.n	800a5cc <_strtod_l+0x51c>
 800a588:	b10b      	cbz	r3, 800a58e <_strtod_l+0x4de>
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	492c      	ldr	r1, [pc, #176]	; (800a640 <_strtod_l+0x590>)
 800a590:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a594:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a0:	f7f6 f82a 	bl	80005f8 <__aeabi_dmul>
 800a5a4:	4b27      	ldr	r3, [pc, #156]	; (800a644 <_strtod_l+0x594>)
 800a5a6:	460a      	mov	r2, r1
 800a5a8:	400b      	ands	r3, r1
 800a5aa:	4927      	ldr	r1, [pc, #156]	; (800a648 <_strtod_l+0x598>)
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	d8be      	bhi.n	800a530 <_strtod_l+0x480>
 800a5b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a5b6:	428b      	cmp	r3, r1
 800a5b8:	bf86      	itte	hi
 800a5ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a64c <_strtod_l+0x59c>
 800a5be:	f04f 38ff 	movhi.w	r8, #4294967295
 800a5c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9304      	str	r3, [sp, #16]
 800a5ca:	e07b      	b.n	800a6c4 <_strtod_l+0x614>
 800a5cc:	07ea      	lsls	r2, r5, #31
 800a5ce:	d505      	bpl.n	800a5dc <_strtod_l+0x52c>
 800a5d0:	9b04      	ldr	r3, [sp, #16]
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	9a04      	ldr	r2, [sp, #16]
 800a5de:	3208      	adds	r2, #8
 800a5e0:	f10a 0a01 	add.w	sl, sl, #1
 800a5e4:	106d      	asrs	r5, r5, #1
 800a5e6:	9204      	str	r2, [sp, #16]
 800a5e8:	e7cc      	b.n	800a584 <_strtod_l+0x4d4>
 800a5ea:	d0ec      	beq.n	800a5c6 <_strtod_l+0x516>
 800a5ec:	426d      	negs	r5, r5
 800a5ee:	f015 020f 	ands.w	r2, r5, #15
 800a5f2:	d00a      	beq.n	800a60a <_strtod_l+0x55a>
 800a5f4:	4b11      	ldr	r3, [pc, #68]	; (800a63c <_strtod_l+0x58c>)
 800a5f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	4649      	mov	r1, r9
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f6 f923 	bl	800084c <__aeabi_ddiv>
 800a606:	4680      	mov	r8, r0
 800a608:	4689      	mov	r9, r1
 800a60a:	112d      	asrs	r5, r5, #4
 800a60c:	d0db      	beq.n	800a5c6 <_strtod_l+0x516>
 800a60e:	2d1f      	cmp	r5, #31
 800a610:	dd1e      	ble.n	800a650 <_strtod_l+0x5a0>
 800a612:	2500      	movs	r5, #0
 800a614:	46ab      	mov	fp, r5
 800a616:	9509      	str	r5, [sp, #36]	; 0x24
 800a618:	9505      	str	r5, [sp, #20]
 800a61a:	2322      	movs	r3, #34	; 0x22
 800a61c:	f04f 0800 	mov.w	r8, #0
 800a620:	f04f 0900 	mov.w	r9, #0
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	e78d      	b.n	800a544 <_strtod_l+0x494>
 800a628:	0800fd76 	.word	0x0800fd76
 800a62c:	0800fc2c 	.word	0x0800fc2c
 800a630:	0800fd6e 	.word	0x0800fd6e
 800a634:	0800fe5a 	.word	0x0800fe5a
 800a638:	0800fe56 	.word	0x0800fe56
 800a63c:	0800ffb0 	.word	0x0800ffb0
 800a640:	0800ff88 	.word	0x0800ff88
 800a644:	7ff00000 	.word	0x7ff00000
 800a648:	7ca00000 	.word	0x7ca00000
 800a64c:	7fefffff 	.word	0x7fefffff
 800a650:	f015 0310 	ands.w	r3, r5, #16
 800a654:	bf18      	it	ne
 800a656:	236a      	movne	r3, #106	; 0x6a
 800a658:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a9fc <_strtod_l+0x94c>
 800a65c:	9304      	str	r3, [sp, #16]
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	2300      	movs	r3, #0
 800a664:	07ea      	lsls	r2, r5, #31
 800a666:	d504      	bpl.n	800a672 <_strtod_l+0x5c2>
 800a668:	e9da 2300 	ldrd	r2, r3, [sl]
 800a66c:	f7f5 ffc4 	bl	80005f8 <__aeabi_dmul>
 800a670:	2301      	movs	r3, #1
 800a672:	106d      	asrs	r5, r5, #1
 800a674:	f10a 0a08 	add.w	sl, sl, #8
 800a678:	d1f4      	bne.n	800a664 <_strtod_l+0x5b4>
 800a67a:	b10b      	cbz	r3, 800a680 <_strtod_l+0x5d0>
 800a67c:	4680      	mov	r8, r0
 800a67e:	4689      	mov	r9, r1
 800a680:	9b04      	ldr	r3, [sp, #16]
 800a682:	b1bb      	cbz	r3, 800a6b4 <_strtod_l+0x604>
 800a684:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a688:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	4649      	mov	r1, r9
 800a690:	dd10      	ble.n	800a6b4 <_strtod_l+0x604>
 800a692:	2b1f      	cmp	r3, #31
 800a694:	f340 811e 	ble.w	800a8d4 <_strtod_l+0x824>
 800a698:	2b34      	cmp	r3, #52	; 0x34
 800a69a:	bfde      	ittt	le
 800a69c:	f04f 33ff 	movle.w	r3, #4294967295
 800a6a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a6a4:	4093      	lslle	r3, r2
 800a6a6:	f04f 0800 	mov.w	r8, #0
 800a6aa:	bfcc      	ite	gt
 800a6ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a6b0:	ea03 0901 	andle.w	r9, r3, r1
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f6 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1a6      	bne.n	800a612 <_strtod_l+0x562>
 800a6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6ca:	4633      	mov	r3, r6
 800a6cc:	465a      	mov	r2, fp
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f002 ff82 	bl	800d5d8 <__s2b>
 800a6d4:	9009      	str	r0, [sp, #36]	; 0x24
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f43f af2a 	beq.w	800a530 <_strtod_l+0x480>
 800a6dc:	9a08      	ldr	r2, [sp, #32]
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	eba3 0307 	sub.w	r3, r3, r7
 800a6e6:	bfa8      	it	ge
 800a6e8:	2300      	movge	r3, #0
 800a6ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ec:	2500      	movs	r5, #0
 800a6ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a6f4:	46ab      	mov	fp, r5
 800a6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	6859      	ldr	r1, [r3, #4]
 800a6fc:	f002 fec4 	bl	800d488 <_Balloc>
 800a700:	9005      	str	r0, [sp, #20]
 800a702:	2800      	cmp	r0, #0
 800a704:	f43f af18 	beq.w	800a538 <_strtod_l+0x488>
 800a708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	3202      	adds	r2, #2
 800a70e:	f103 010c 	add.w	r1, r3, #12
 800a712:	0092      	lsls	r2, r2, #2
 800a714:	300c      	adds	r0, #12
 800a716:	f001 fc4a 	bl	800bfae <memcpy>
 800a71a:	ec49 8b10 	vmov	d0, r8, r9
 800a71e:	aa18      	add	r2, sp, #96	; 0x60
 800a720:	a917      	add	r1, sp, #92	; 0x5c
 800a722:	4620      	mov	r0, r4
 800a724:	f003 fa8c 	bl	800dc40 <__d2b>
 800a728:	ec49 8b18 	vmov	d8, r8, r9
 800a72c:	9016      	str	r0, [sp, #88]	; 0x58
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f af02 	beq.w	800a538 <_strtod_l+0x488>
 800a734:	2101      	movs	r1, #1
 800a736:	4620      	mov	r0, r4
 800a738:	f002 ffe6 	bl	800d708 <__i2b>
 800a73c:	4683      	mov	fp, r0
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f aefa 	beq.w	800a538 <_strtod_l+0x488>
 800a744:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a746:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a748:	2e00      	cmp	r6, #0
 800a74a:	bfab      	itete	ge
 800a74c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a74e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a750:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a752:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a756:	bfac      	ite	ge
 800a758:	eb06 0a03 	addge.w	sl, r6, r3
 800a75c:	1b9f      	sublt	r7, r3, r6
 800a75e:	9b04      	ldr	r3, [sp, #16]
 800a760:	1af6      	subs	r6, r6, r3
 800a762:	4416      	add	r6, r2
 800a764:	4ba0      	ldr	r3, [pc, #640]	; (800a9e8 <_strtod_l+0x938>)
 800a766:	3e01      	subs	r6, #1
 800a768:	429e      	cmp	r6, r3
 800a76a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a76e:	f280 80c4 	bge.w	800a8fa <_strtod_l+0x84a>
 800a772:	1b9b      	subs	r3, r3, r6
 800a774:	2b1f      	cmp	r3, #31
 800a776:	eba2 0203 	sub.w	r2, r2, r3
 800a77a:	f04f 0101 	mov.w	r1, #1
 800a77e:	f300 80b0 	bgt.w	800a8e2 <_strtod_l+0x832>
 800a782:	fa01 f303 	lsl.w	r3, r1, r3
 800a786:	930e      	str	r3, [sp, #56]	; 0x38
 800a788:	2300      	movs	r3, #0
 800a78a:	930d      	str	r3, [sp, #52]	; 0x34
 800a78c:	eb0a 0602 	add.w	r6, sl, r2
 800a790:	9b04      	ldr	r3, [sp, #16]
 800a792:	45b2      	cmp	sl, r6
 800a794:	4417      	add	r7, r2
 800a796:	441f      	add	r7, r3
 800a798:	4653      	mov	r3, sl
 800a79a:	bfa8      	it	ge
 800a79c:	4633      	movge	r3, r6
 800a79e:	42bb      	cmp	r3, r7
 800a7a0:	bfa8      	it	ge
 800a7a2:	463b      	movge	r3, r7
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfc2      	ittt	gt
 800a7a8:	1af6      	subgt	r6, r6, r3
 800a7aa:	1aff      	subgt	r7, r7, r3
 800a7ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd17      	ble.n	800a7e6 <_strtod_l+0x736>
 800a7b6:	4659      	mov	r1, fp
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f003 f864 	bl	800d888 <__pow5mult>
 800a7c0:	4683      	mov	fp, r0
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f43f aeb8 	beq.w	800a538 <_strtod_l+0x488>
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f002 ffb1 	bl	800d734 <__multiply>
 800a7d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	f43f aeaf 	beq.w	800a538 <_strtod_l+0x488>
 800a7da:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f002 fe93 	bl	800d508 <_Bfree>
 800a7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e4:	9316      	str	r3, [sp, #88]	; 0x58
 800a7e6:	2e00      	cmp	r6, #0
 800a7e8:	f300 808c 	bgt.w	800a904 <_strtod_l+0x854>
 800a7ec:	9b08      	ldr	r3, [sp, #32]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dd08      	ble.n	800a804 <_strtod_l+0x754>
 800a7f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7f4:	9905      	ldr	r1, [sp, #20]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f003 f846 	bl	800d888 <__pow5mult>
 800a7fc:	9005      	str	r0, [sp, #20]
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f43f ae9a 	beq.w	800a538 <_strtod_l+0x488>
 800a804:	2f00      	cmp	r7, #0
 800a806:	dd08      	ble.n	800a81a <_strtod_l+0x76a>
 800a808:	9905      	ldr	r1, [sp, #20]
 800a80a:	463a      	mov	r2, r7
 800a80c:	4620      	mov	r0, r4
 800a80e:	f003 f895 	bl	800d93c <__lshift>
 800a812:	9005      	str	r0, [sp, #20]
 800a814:	2800      	cmp	r0, #0
 800a816:	f43f ae8f 	beq.w	800a538 <_strtod_l+0x488>
 800a81a:	f1ba 0f00 	cmp.w	sl, #0
 800a81e:	dd08      	ble.n	800a832 <_strtod_l+0x782>
 800a820:	4659      	mov	r1, fp
 800a822:	4652      	mov	r2, sl
 800a824:	4620      	mov	r0, r4
 800a826:	f003 f889 	bl	800d93c <__lshift>
 800a82a:	4683      	mov	fp, r0
 800a82c:	2800      	cmp	r0, #0
 800a82e:	f43f ae83 	beq.w	800a538 <_strtod_l+0x488>
 800a832:	9a05      	ldr	r2, [sp, #20]
 800a834:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a836:	4620      	mov	r0, r4
 800a838:	f003 f908 	bl	800da4c <__mdiff>
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f ae7a 	beq.w	800a538 <_strtod_l+0x488>
 800a844:	68c3      	ldr	r3, [r0, #12]
 800a846:	930b      	str	r3, [sp, #44]	; 0x2c
 800a848:	2300      	movs	r3, #0
 800a84a:	60c3      	str	r3, [r0, #12]
 800a84c:	4659      	mov	r1, fp
 800a84e:	f003 f8e1 	bl	800da14 <__mcmp>
 800a852:	2800      	cmp	r0, #0
 800a854:	da60      	bge.n	800a918 <_strtod_l+0x868>
 800a856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a858:	ea53 0308 	orrs.w	r3, r3, r8
 800a85c:	f040 8084 	bne.w	800a968 <_strtod_l+0x8b8>
 800a860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a864:	2b00      	cmp	r3, #0
 800a866:	d17f      	bne.n	800a968 <_strtod_l+0x8b8>
 800a868:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a86c:	0d1b      	lsrs	r3, r3, #20
 800a86e:	051b      	lsls	r3, r3, #20
 800a870:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a874:	d978      	bls.n	800a968 <_strtod_l+0x8b8>
 800a876:	696b      	ldr	r3, [r5, #20]
 800a878:	b913      	cbnz	r3, 800a880 <_strtod_l+0x7d0>
 800a87a:	692b      	ldr	r3, [r5, #16]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	dd73      	ble.n	800a968 <_strtod_l+0x8b8>
 800a880:	4629      	mov	r1, r5
 800a882:	2201      	movs	r2, #1
 800a884:	4620      	mov	r0, r4
 800a886:	f003 f859 	bl	800d93c <__lshift>
 800a88a:	4659      	mov	r1, fp
 800a88c:	4605      	mov	r5, r0
 800a88e:	f003 f8c1 	bl	800da14 <__mcmp>
 800a892:	2800      	cmp	r0, #0
 800a894:	dd68      	ble.n	800a968 <_strtod_l+0x8b8>
 800a896:	9904      	ldr	r1, [sp, #16]
 800a898:	4a54      	ldr	r2, [pc, #336]	; (800a9ec <_strtod_l+0x93c>)
 800a89a:	464b      	mov	r3, r9
 800a89c:	2900      	cmp	r1, #0
 800a89e:	f000 8084 	beq.w	800a9aa <_strtod_l+0x8fa>
 800a8a2:	ea02 0109 	and.w	r1, r2, r9
 800a8a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8aa:	dc7e      	bgt.n	800a9aa <_strtod_l+0x8fa>
 800a8ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a8b0:	f77f aeb3 	ble.w	800a61a <_strtod_l+0x56a>
 800a8b4:	4b4e      	ldr	r3, [pc, #312]	; (800a9f0 <_strtod_l+0x940>)
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f7f5 fe9c 	bl	80005f8 <__aeabi_dmul>
 800a8c0:	4b4a      	ldr	r3, [pc, #296]	; (800a9ec <_strtod_l+0x93c>)
 800a8c2:	400b      	ands	r3, r1
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4689      	mov	r9, r1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f47f ae3f 	bne.w	800a54c <_strtod_l+0x49c>
 800a8ce:	2322      	movs	r3, #34	; 0x22
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	e63b      	b.n	800a54c <_strtod_l+0x49c>
 800a8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8dc:	ea03 0808 	and.w	r8, r3, r8
 800a8e0:	e6e8      	b.n	800a6b4 <_strtod_l+0x604>
 800a8e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a8e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a8ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a8ee:	36e2      	adds	r6, #226	; 0xe2
 800a8f0:	fa01 f306 	lsl.w	r3, r1, r6
 800a8f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a8f8:	e748      	b.n	800a78c <_strtod_l+0x6dc>
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a902:	e743      	b.n	800a78c <_strtod_l+0x6dc>
 800a904:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a906:	4632      	mov	r2, r6
 800a908:	4620      	mov	r0, r4
 800a90a:	f003 f817 	bl	800d93c <__lshift>
 800a90e:	9016      	str	r0, [sp, #88]	; 0x58
 800a910:	2800      	cmp	r0, #0
 800a912:	f47f af6b 	bne.w	800a7ec <_strtod_l+0x73c>
 800a916:	e60f      	b.n	800a538 <_strtod_l+0x488>
 800a918:	46ca      	mov	sl, r9
 800a91a:	d171      	bne.n	800aa00 <_strtod_l+0x950>
 800a91c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a91e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a922:	b352      	cbz	r2, 800a97a <_strtod_l+0x8ca>
 800a924:	4a33      	ldr	r2, [pc, #204]	; (800a9f4 <_strtod_l+0x944>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d12a      	bne.n	800a980 <_strtod_l+0x8d0>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	4641      	mov	r1, r8
 800a92e:	b1fb      	cbz	r3, 800a970 <_strtod_l+0x8c0>
 800a930:	4b2e      	ldr	r3, [pc, #184]	; (800a9ec <_strtod_l+0x93c>)
 800a932:	ea09 0303 	and.w	r3, r9, r3
 800a936:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a93a:	f04f 32ff 	mov.w	r2, #4294967295
 800a93e:	d81a      	bhi.n	800a976 <_strtod_l+0x8c6>
 800a940:	0d1b      	lsrs	r3, r3, #20
 800a942:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a946:	fa02 f303 	lsl.w	r3, r2, r3
 800a94a:	4299      	cmp	r1, r3
 800a94c:	d118      	bne.n	800a980 <_strtod_l+0x8d0>
 800a94e:	4b2a      	ldr	r3, [pc, #168]	; (800a9f8 <_strtod_l+0x948>)
 800a950:	459a      	cmp	sl, r3
 800a952:	d102      	bne.n	800a95a <_strtod_l+0x8aa>
 800a954:	3101      	adds	r1, #1
 800a956:	f43f adef 	beq.w	800a538 <_strtod_l+0x488>
 800a95a:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <_strtod_l+0x93c>)
 800a95c:	ea0a 0303 	and.w	r3, sl, r3
 800a960:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a964:	f04f 0800 	mov.w	r8, #0
 800a968:	9b04      	ldr	r3, [sp, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1a2      	bne.n	800a8b4 <_strtod_l+0x804>
 800a96e:	e5ed      	b.n	800a54c <_strtod_l+0x49c>
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	e7e9      	b.n	800a94a <_strtod_l+0x89a>
 800a976:	4613      	mov	r3, r2
 800a978:	e7e7      	b.n	800a94a <_strtod_l+0x89a>
 800a97a:	ea53 0308 	orrs.w	r3, r3, r8
 800a97e:	d08a      	beq.n	800a896 <_strtod_l+0x7e6>
 800a980:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a982:	b1e3      	cbz	r3, 800a9be <_strtod_l+0x90e>
 800a984:	ea13 0f0a 	tst.w	r3, sl
 800a988:	d0ee      	beq.n	800a968 <_strtod_l+0x8b8>
 800a98a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	4640      	mov	r0, r8
 800a990:	4649      	mov	r1, r9
 800a992:	b1c3      	cbz	r3, 800a9c6 <_strtod_l+0x916>
 800a994:	f7ff fb70 	bl	800a078 <sulp>
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	ec51 0b18 	vmov	r0, r1, d8
 800a9a0:	f7f5 fc74 	bl	800028c <__adddf3>
 800a9a4:	4680      	mov	r8, r0
 800a9a6:	4689      	mov	r9, r1
 800a9a8:	e7de      	b.n	800a968 <_strtod_l+0x8b8>
 800a9aa:	4013      	ands	r3, r2
 800a9ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a9b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a9b8:	f04f 38ff 	mov.w	r8, #4294967295
 800a9bc:	e7d4      	b.n	800a968 <_strtod_l+0x8b8>
 800a9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9c0:	ea13 0f08 	tst.w	r3, r8
 800a9c4:	e7e0      	b.n	800a988 <_strtod_l+0x8d8>
 800a9c6:	f7ff fb57 	bl	800a078 <sulp>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	ec51 0b18 	vmov	r0, r1, d8
 800a9d2:	f7f5 fc59 	bl	8000288 <__aeabi_dsub>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4689      	mov	r9, r1
 800a9de:	f7f6 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d0c0      	beq.n	800a968 <_strtod_l+0x8b8>
 800a9e6:	e618      	b.n	800a61a <_strtod_l+0x56a>
 800a9e8:	fffffc02 	.word	0xfffffc02
 800a9ec:	7ff00000 	.word	0x7ff00000
 800a9f0:	39500000 	.word	0x39500000
 800a9f4:	000fffff 	.word	0x000fffff
 800a9f8:	7fefffff 	.word	0x7fefffff
 800a9fc:	0800fc40 	.word	0x0800fc40
 800aa00:	4659      	mov	r1, fp
 800aa02:	4628      	mov	r0, r5
 800aa04:	f003 f976 	bl	800dcf4 <__ratio>
 800aa08:	ec57 6b10 	vmov	r6, r7, d0
 800aa0c:	ee10 0a10 	vmov	r0, s0
 800aa10:	2200      	movs	r2, #0
 800aa12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa16:	4639      	mov	r1, r7
 800aa18:	f7f6 f86a 	bl	8000af0 <__aeabi_dcmple>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d071      	beq.n	800ab04 <_strtod_l+0xa54>
 800aa20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d17c      	bne.n	800ab20 <_strtod_l+0xa70>
 800aa26:	f1b8 0f00 	cmp.w	r8, #0
 800aa2a:	d15a      	bne.n	800aae2 <_strtod_l+0xa32>
 800aa2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d15d      	bne.n	800aaf0 <_strtod_l+0xa40>
 800aa34:	4b90      	ldr	r3, [pc, #576]	; (800ac78 <_strtod_l+0xbc8>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f6 f84e 	bl	8000adc <__aeabi_dcmplt>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d15c      	bne.n	800aafe <_strtod_l+0xa4e>
 800aa44:	4630      	mov	r0, r6
 800aa46:	4639      	mov	r1, r7
 800aa48:	4b8c      	ldr	r3, [pc, #560]	; (800ac7c <_strtod_l+0xbcc>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f7f5 fdd4 	bl	80005f8 <__aeabi_dmul>
 800aa50:	4606      	mov	r6, r0
 800aa52:	460f      	mov	r7, r1
 800aa54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aa58:	9606      	str	r6, [sp, #24]
 800aa5a:	9307      	str	r3, [sp, #28]
 800aa5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aa64:	4b86      	ldr	r3, [pc, #536]	; (800ac80 <_strtod_l+0xbd0>)
 800aa66:	ea0a 0303 	and.w	r3, sl, r3
 800aa6a:	930d      	str	r3, [sp, #52]	; 0x34
 800aa6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa6e:	4b85      	ldr	r3, [pc, #532]	; (800ac84 <_strtod_l+0xbd4>)
 800aa70:	429a      	cmp	r2, r3
 800aa72:	f040 8090 	bne.w	800ab96 <_strtod_l+0xae6>
 800aa76:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aa7a:	ec49 8b10 	vmov	d0, r8, r9
 800aa7e:	f003 f86f 	bl	800db60 <__ulp>
 800aa82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa86:	ec51 0b10 	vmov	r0, r1, d0
 800aa8a:	f7f5 fdb5 	bl	80005f8 <__aeabi_dmul>
 800aa8e:	4642      	mov	r2, r8
 800aa90:	464b      	mov	r3, r9
 800aa92:	f7f5 fbfb 	bl	800028c <__adddf3>
 800aa96:	460b      	mov	r3, r1
 800aa98:	4979      	ldr	r1, [pc, #484]	; (800ac80 <_strtod_l+0xbd0>)
 800aa9a:	4a7b      	ldr	r2, [pc, #492]	; (800ac88 <_strtod_l+0xbd8>)
 800aa9c:	4019      	ands	r1, r3
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	d944      	bls.n	800ab2e <_strtod_l+0xa7e>
 800aaa4:	ee18 2a90 	vmov	r2, s17
 800aaa8:	4b78      	ldr	r3, [pc, #480]	; (800ac8c <_strtod_l+0xbdc>)
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d104      	bne.n	800aab8 <_strtod_l+0xa08>
 800aaae:	ee18 3a10 	vmov	r3, s16
 800aab2:	3301      	adds	r3, #1
 800aab4:	f43f ad40 	beq.w	800a538 <_strtod_l+0x488>
 800aab8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ac8c <_strtod_l+0xbdc>
 800aabc:	f04f 38ff 	mov.w	r8, #4294967295
 800aac0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aac2:	4620      	mov	r0, r4
 800aac4:	f002 fd20 	bl	800d508 <_Bfree>
 800aac8:	9905      	ldr	r1, [sp, #20]
 800aaca:	4620      	mov	r0, r4
 800aacc:	f002 fd1c 	bl	800d508 <_Bfree>
 800aad0:	4659      	mov	r1, fp
 800aad2:	4620      	mov	r0, r4
 800aad4:	f002 fd18 	bl	800d508 <_Bfree>
 800aad8:	4629      	mov	r1, r5
 800aada:	4620      	mov	r0, r4
 800aadc:	f002 fd14 	bl	800d508 <_Bfree>
 800aae0:	e609      	b.n	800a6f6 <_strtod_l+0x646>
 800aae2:	f1b8 0f01 	cmp.w	r8, #1
 800aae6:	d103      	bne.n	800aaf0 <_strtod_l+0xa40>
 800aae8:	f1b9 0f00 	cmp.w	r9, #0
 800aaec:	f43f ad95 	beq.w	800a61a <_strtod_l+0x56a>
 800aaf0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ac48 <_strtod_l+0xb98>
 800aaf4:	4f60      	ldr	r7, [pc, #384]	; (800ac78 <_strtod_l+0xbc8>)
 800aaf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aafa:	2600      	movs	r6, #0
 800aafc:	e7ae      	b.n	800aa5c <_strtod_l+0x9ac>
 800aafe:	4f5f      	ldr	r7, [pc, #380]	; (800ac7c <_strtod_l+0xbcc>)
 800ab00:	2600      	movs	r6, #0
 800ab02:	e7a7      	b.n	800aa54 <_strtod_l+0x9a4>
 800ab04:	4b5d      	ldr	r3, [pc, #372]	; (800ac7c <_strtod_l+0xbcc>)
 800ab06:	4630      	mov	r0, r6
 800ab08:	4639      	mov	r1, r7
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f7f5 fd74 	bl	80005f8 <__aeabi_dmul>
 800ab10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab12:	4606      	mov	r6, r0
 800ab14:	460f      	mov	r7, r1
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d09c      	beq.n	800aa54 <_strtod_l+0x9a4>
 800ab1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab1e:	e79d      	b.n	800aa5c <_strtod_l+0x9ac>
 800ab20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ac50 <_strtod_l+0xba0>
 800ab24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab28:	ec57 6b17 	vmov	r6, r7, d7
 800ab2c:	e796      	b.n	800aa5c <_strtod_l+0x9ac>
 800ab2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	46ca      	mov	sl, r9
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1c2      	bne.n	800aac0 <_strtod_l+0xa10>
 800ab3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab40:	0d1b      	lsrs	r3, r3, #20
 800ab42:	051b      	lsls	r3, r3, #20
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d1bb      	bne.n	800aac0 <_strtod_l+0xa10>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f7f6 f8b4 	bl	8000cb8 <__aeabi_d2lz>
 800ab50:	f7f5 fd24 	bl	800059c <__aeabi_l2d>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4630      	mov	r0, r6
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	f7f5 fb94 	bl	8000288 <__aeabi_dsub>
 800ab60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab66:	ea43 0308 	orr.w	r3, r3, r8
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	4606      	mov	r6, r0
 800ab6e:	460f      	mov	r7, r1
 800ab70:	d054      	beq.n	800ac1c <_strtod_l+0xb6c>
 800ab72:	a339      	add	r3, pc, #228	; (adr r3, 800ac58 <_strtod_l+0xba8>)
 800ab74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab78:	f7f5 ffb0 	bl	8000adc <__aeabi_dcmplt>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f47f ace5 	bne.w	800a54c <_strtod_l+0x49c>
 800ab82:	a337      	add	r3, pc, #220	; (adr r3, 800ac60 <_strtod_l+0xbb0>)
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	4630      	mov	r0, r6
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	f7f5 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d095      	beq.n	800aac0 <_strtod_l+0xa10>
 800ab94:	e4da      	b.n	800a54c <_strtod_l+0x49c>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	b333      	cbz	r3, 800abe8 <_strtod_l+0xb38>
 800ab9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aba0:	d822      	bhi.n	800abe8 <_strtod_l+0xb38>
 800aba2:	a331      	add	r3, pc, #196	; (adr r3, 800ac68 <_strtod_l+0xbb8>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	4630      	mov	r0, r6
 800abaa:	4639      	mov	r1, r7
 800abac:	f7f5 ffa0 	bl	8000af0 <__aeabi_dcmple>
 800abb0:	b1a0      	cbz	r0, 800abdc <_strtod_l+0xb2c>
 800abb2:	4639      	mov	r1, r7
 800abb4:	4630      	mov	r0, r6
 800abb6:	f7f5 fff7 	bl	8000ba8 <__aeabi_d2uiz>
 800abba:	2801      	cmp	r0, #1
 800abbc:	bf38      	it	cc
 800abbe:	2001      	movcc	r0, #1
 800abc0:	f7f5 fca0 	bl	8000504 <__aeabi_ui2d>
 800abc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abc6:	4606      	mov	r6, r0
 800abc8:	460f      	mov	r7, r1
 800abca:	bb23      	cbnz	r3, 800ac16 <_strtod_l+0xb66>
 800abcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd0:	9010      	str	r0, [sp, #64]	; 0x40
 800abd2:	9311      	str	r3, [sp, #68]	; 0x44
 800abd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800abdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abe0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abe8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abec:	eeb0 0a48 	vmov.f32	s0, s16
 800abf0:	eef0 0a68 	vmov.f32	s1, s17
 800abf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800abf8:	f002 ffb2 	bl	800db60 <__ulp>
 800abfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ac00:	ec53 2b10 	vmov	r2, r3, d0
 800ac04:	f7f5 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ac08:	ec53 2b18 	vmov	r2, r3, d8
 800ac0c:	f7f5 fb3e 	bl	800028c <__adddf3>
 800ac10:	4680      	mov	r8, r0
 800ac12:	4689      	mov	r9, r1
 800ac14:	e78d      	b.n	800ab32 <_strtod_l+0xa82>
 800ac16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ac1a:	e7db      	b.n	800abd4 <_strtod_l+0xb24>
 800ac1c:	a314      	add	r3, pc, #80	; (adr r3, 800ac70 <_strtod_l+0xbc0>)
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	f7f5 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800ac26:	e7b3      	b.n	800ab90 <_strtod_l+0xae0>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	f7ff ba7c 	b.w	800a12e <_strtod_l+0x7e>
 800ac36:	2a65      	cmp	r2, #101	; 0x65
 800ac38:	f43f ab75 	beq.w	800a326 <_strtod_l+0x276>
 800ac3c:	2a45      	cmp	r2, #69	; 0x45
 800ac3e:	f43f ab72 	beq.w	800a326 <_strtod_l+0x276>
 800ac42:	2301      	movs	r3, #1
 800ac44:	f7ff bbaa 	b.w	800a39c <_strtod_l+0x2ec>
 800ac48:	00000000 	.word	0x00000000
 800ac4c:	bff00000 	.word	0xbff00000
 800ac50:	00000000 	.word	0x00000000
 800ac54:	3ff00000 	.word	0x3ff00000
 800ac58:	94a03595 	.word	0x94a03595
 800ac5c:	3fdfffff 	.word	0x3fdfffff
 800ac60:	35afe535 	.word	0x35afe535
 800ac64:	3fe00000 	.word	0x3fe00000
 800ac68:	ffc00000 	.word	0xffc00000
 800ac6c:	41dfffff 	.word	0x41dfffff
 800ac70:	94a03595 	.word	0x94a03595
 800ac74:	3fcfffff 	.word	0x3fcfffff
 800ac78:	3ff00000 	.word	0x3ff00000
 800ac7c:	3fe00000 	.word	0x3fe00000
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	7fe00000 	.word	0x7fe00000
 800ac88:	7c9fffff 	.word	0x7c9fffff
 800ac8c:	7fefffff 	.word	0x7fefffff

0800ac90 <_strtod_r>:
 800ac90:	4b01      	ldr	r3, [pc, #4]	; (800ac98 <_strtod_r+0x8>)
 800ac92:	f7ff ba0d 	b.w	800a0b0 <_strtod_l>
 800ac96:	bf00      	nop
 800ac98:	20000420 	.word	0x20000420

0800ac9c <strtod>:
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	4601      	mov	r1, r0
 800aca0:	4802      	ldr	r0, [pc, #8]	; (800acac <strtod+0x10>)
 800aca2:	4b03      	ldr	r3, [pc, #12]	; (800acb0 <strtod+0x14>)
 800aca4:	6800      	ldr	r0, [r0, #0]
 800aca6:	f7ff ba03 	b.w	800a0b0 <_strtod_l>
 800acaa:	bf00      	nop
 800acac:	200005d8 	.word	0x200005d8
 800acb0:	20000420 	.word	0x20000420

0800acb4 <_strtol_l.constprop.0>:
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acba:	d001      	beq.n	800acc0 <_strtol_l.constprop.0+0xc>
 800acbc:	2b24      	cmp	r3, #36	; 0x24
 800acbe:	d906      	bls.n	800acce <_strtol_l.constprop.0+0x1a>
 800acc0:	f001 f948 	bl	800bf54 <__errno>
 800acc4:	2316      	movs	r3, #22
 800acc6:	6003      	str	r3, [r0, #0]
 800acc8:	2000      	movs	r0, #0
 800acca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800adb4 <_strtol_l.constprop.0+0x100>
 800acd2:	460d      	mov	r5, r1
 800acd4:	462e      	mov	r6, r5
 800acd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acda:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800acde:	f017 0708 	ands.w	r7, r7, #8
 800ace2:	d1f7      	bne.n	800acd4 <_strtol_l.constprop.0+0x20>
 800ace4:	2c2d      	cmp	r4, #45	; 0x2d
 800ace6:	d132      	bne.n	800ad4e <_strtol_l.constprop.0+0x9a>
 800ace8:	782c      	ldrb	r4, [r5, #0]
 800acea:	2701      	movs	r7, #1
 800acec:	1cb5      	adds	r5, r6, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d05b      	beq.n	800adaa <_strtol_l.constprop.0+0xf6>
 800acf2:	2b10      	cmp	r3, #16
 800acf4:	d109      	bne.n	800ad0a <_strtol_l.constprop.0+0x56>
 800acf6:	2c30      	cmp	r4, #48	; 0x30
 800acf8:	d107      	bne.n	800ad0a <_strtol_l.constprop.0+0x56>
 800acfa:	782c      	ldrb	r4, [r5, #0]
 800acfc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad00:	2c58      	cmp	r4, #88	; 0x58
 800ad02:	d14d      	bne.n	800ada0 <_strtol_l.constprop.0+0xec>
 800ad04:	786c      	ldrb	r4, [r5, #1]
 800ad06:	2310      	movs	r3, #16
 800ad08:	3502      	adds	r5, #2
 800ad0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad0e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad12:	f04f 0e00 	mov.w	lr, #0
 800ad16:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad1a:	4676      	mov	r6, lr
 800ad1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad20:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad24:	f1bc 0f09 	cmp.w	ip, #9
 800ad28:	d816      	bhi.n	800ad58 <_strtol_l.constprop.0+0xa4>
 800ad2a:	4664      	mov	r4, ip
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	dd24      	ble.n	800ad7a <_strtol_l.constprop.0+0xc6>
 800ad30:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad34:	d008      	beq.n	800ad48 <_strtol_l.constprop.0+0x94>
 800ad36:	45b1      	cmp	r9, r6
 800ad38:	d31c      	bcc.n	800ad74 <_strtol_l.constprop.0+0xc0>
 800ad3a:	d101      	bne.n	800ad40 <_strtol_l.constprop.0+0x8c>
 800ad3c:	45a2      	cmp	sl, r4
 800ad3e:	db19      	blt.n	800ad74 <_strtol_l.constprop.0+0xc0>
 800ad40:	fb06 4603 	mla	r6, r6, r3, r4
 800ad44:	f04f 0e01 	mov.w	lr, #1
 800ad48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4c:	e7e8      	b.n	800ad20 <_strtol_l.constprop.0+0x6c>
 800ad4e:	2c2b      	cmp	r4, #43	; 0x2b
 800ad50:	bf04      	itt	eq
 800ad52:	782c      	ldrbeq	r4, [r5, #0]
 800ad54:	1cb5      	addeq	r5, r6, #2
 800ad56:	e7ca      	b.n	800acee <_strtol_l.constprop.0+0x3a>
 800ad58:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad5c:	f1bc 0f19 	cmp.w	ip, #25
 800ad60:	d801      	bhi.n	800ad66 <_strtol_l.constprop.0+0xb2>
 800ad62:	3c37      	subs	r4, #55	; 0x37
 800ad64:	e7e2      	b.n	800ad2c <_strtol_l.constprop.0+0x78>
 800ad66:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ad6a:	f1bc 0f19 	cmp.w	ip, #25
 800ad6e:	d804      	bhi.n	800ad7a <_strtol_l.constprop.0+0xc6>
 800ad70:	3c57      	subs	r4, #87	; 0x57
 800ad72:	e7db      	b.n	800ad2c <_strtol_l.constprop.0+0x78>
 800ad74:	f04f 3eff 	mov.w	lr, #4294967295
 800ad78:	e7e6      	b.n	800ad48 <_strtol_l.constprop.0+0x94>
 800ad7a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ad7e:	d105      	bne.n	800ad8c <_strtol_l.constprop.0+0xd8>
 800ad80:	2322      	movs	r3, #34	; 0x22
 800ad82:	6003      	str	r3, [r0, #0]
 800ad84:	4646      	mov	r6, r8
 800ad86:	b942      	cbnz	r2, 800ad9a <_strtol_l.constprop.0+0xe6>
 800ad88:	4630      	mov	r0, r6
 800ad8a:	e79e      	b.n	800acca <_strtol_l.constprop.0+0x16>
 800ad8c:	b107      	cbz	r7, 800ad90 <_strtol_l.constprop.0+0xdc>
 800ad8e:	4276      	negs	r6, r6
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	d0f9      	beq.n	800ad88 <_strtol_l.constprop.0+0xd4>
 800ad94:	f1be 0f00 	cmp.w	lr, #0
 800ad98:	d000      	beq.n	800ad9c <_strtol_l.constprop.0+0xe8>
 800ad9a:	1e69      	subs	r1, r5, #1
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	e7f3      	b.n	800ad88 <_strtol_l.constprop.0+0xd4>
 800ada0:	2430      	movs	r4, #48	; 0x30
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1b1      	bne.n	800ad0a <_strtol_l.constprop.0+0x56>
 800ada6:	2308      	movs	r3, #8
 800ada8:	e7af      	b.n	800ad0a <_strtol_l.constprop.0+0x56>
 800adaa:	2c30      	cmp	r4, #48	; 0x30
 800adac:	d0a5      	beq.n	800acfa <_strtol_l.constprop.0+0x46>
 800adae:	230a      	movs	r3, #10
 800adb0:	e7ab      	b.n	800ad0a <_strtol_l.constprop.0+0x56>
 800adb2:	bf00      	nop
 800adb4:	0800fc69 	.word	0x0800fc69

0800adb8 <_strtol_r>:
 800adb8:	f7ff bf7c 	b.w	800acb4 <_strtol_l.constprop.0>

0800adbc <strtol>:
 800adbc:	4613      	mov	r3, r2
 800adbe:	460a      	mov	r2, r1
 800adc0:	4601      	mov	r1, r0
 800adc2:	4802      	ldr	r0, [pc, #8]	; (800adcc <strtol+0x10>)
 800adc4:	6800      	ldr	r0, [r0, #0]
 800adc6:	f7ff bf75 	b.w	800acb4 <_strtol_l.constprop.0>
 800adca:	bf00      	nop
 800adcc:	200005d8 	.word	0x200005d8

0800add0 <__cvt>:
 800add0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	ec55 4b10 	vmov	r4, r5, d0
 800add8:	2d00      	cmp	r5, #0
 800adda:	460e      	mov	r6, r1
 800addc:	4619      	mov	r1, r3
 800adde:	462b      	mov	r3, r5
 800ade0:	bfbb      	ittet	lt
 800ade2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ade6:	461d      	movlt	r5, r3
 800ade8:	2300      	movge	r3, #0
 800adea:	232d      	movlt	r3, #45	; 0x2d
 800adec:	700b      	strb	r3, [r1, #0]
 800adee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adf4:	4691      	mov	r9, r2
 800adf6:	f023 0820 	bic.w	r8, r3, #32
 800adfa:	bfbc      	itt	lt
 800adfc:	4622      	movlt	r2, r4
 800adfe:	4614      	movlt	r4, r2
 800ae00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae04:	d005      	beq.n	800ae12 <__cvt+0x42>
 800ae06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae0a:	d100      	bne.n	800ae0e <__cvt+0x3e>
 800ae0c:	3601      	adds	r6, #1
 800ae0e:	2102      	movs	r1, #2
 800ae10:	e000      	b.n	800ae14 <__cvt+0x44>
 800ae12:	2103      	movs	r1, #3
 800ae14:	ab03      	add	r3, sp, #12
 800ae16:	9301      	str	r3, [sp, #4]
 800ae18:	ab02      	add	r3, sp, #8
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	ec45 4b10 	vmov	d0, r4, r5
 800ae20:	4653      	mov	r3, sl
 800ae22:	4632      	mov	r2, r6
 800ae24:	f001 f988 	bl	800c138 <_dtoa_r>
 800ae28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	d102      	bne.n	800ae36 <__cvt+0x66>
 800ae30:	f019 0f01 	tst.w	r9, #1
 800ae34:	d022      	beq.n	800ae7c <__cvt+0xac>
 800ae36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae3a:	eb07 0906 	add.w	r9, r7, r6
 800ae3e:	d110      	bne.n	800ae62 <__cvt+0x92>
 800ae40:	783b      	ldrb	r3, [r7, #0]
 800ae42:	2b30      	cmp	r3, #48	; 0x30
 800ae44:	d10a      	bne.n	800ae5c <__cvt+0x8c>
 800ae46:	2200      	movs	r2, #0
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae52:	b918      	cbnz	r0, 800ae5c <__cvt+0x8c>
 800ae54:	f1c6 0601 	rsb	r6, r6, #1
 800ae58:	f8ca 6000 	str.w	r6, [sl]
 800ae5c:	f8da 3000 	ldr.w	r3, [sl]
 800ae60:	4499      	add	r9, r3
 800ae62:	2200      	movs	r2, #0
 800ae64:	2300      	movs	r3, #0
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae6e:	b108      	cbz	r0, 800ae74 <__cvt+0xa4>
 800ae70:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae74:	2230      	movs	r2, #48	; 0x30
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	454b      	cmp	r3, r9
 800ae7a:	d307      	bcc.n	800ae8c <__cvt+0xbc>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae80:	1bdb      	subs	r3, r3, r7
 800ae82:	4638      	mov	r0, r7
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	b004      	add	sp, #16
 800ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8c:	1c59      	adds	r1, r3, #1
 800ae8e:	9103      	str	r1, [sp, #12]
 800ae90:	701a      	strb	r2, [r3, #0]
 800ae92:	e7f0      	b.n	800ae76 <__cvt+0xa6>

0800ae94 <__exponent>:
 800ae94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae96:	4603      	mov	r3, r0
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	bfb8      	it	lt
 800ae9c:	4249      	neglt	r1, r1
 800ae9e:	f803 2b02 	strb.w	r2, [r3], #2
 800aea2:	bfb4      	ite	lt
 800aea4:	222d      	movlt	r2, #45	; 0x2d
 800aea6:	222b      	movge	r2, #43	; 0x2b
 800aea8:	2909      	cmp	r1, #9
 800aeaa:	7042      	strb	r2, [r0, #1]
 800aeac:	dd2a      	ble.n	800af04 <__exponent+0x70>
 800aeae:	f10d 0207 	add.w	r2, sp, #7
 800aeb2:	4617      	mov	r7, r2
 800aeb4:	260a      	movs	r6, #10
 800aeb6:	4694      	mov	ip, r2
 800aeb8:	fb91 f5f6 	sdiv	r5, r1, r6
 800aebc:	fb06 1415 	mls	r4, r6, r5, r1
 800aec0:	3430      	adds	r4, #48	; 0x30
 800aec2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aec6:	460c      	mov	r4, r1
 800aec8:	2c63      	cmp	r4, #99	; 0x63
 800aeca:	f102 32ff 	add.w	r2, r2, #4294967295
 800aece:	4629      	mov	r1, r5
 800aed0:	dcf1      	bgt.n	800aeb6 <__exponent+0x22>
 800aed2:	3130      	adds	r1, #48	; 0x30
 800aed4:	f1ac 0402 	sub.w	r4, ip, #2
 800aed8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aedc:	1c41      	adds	r1, r0, #1
 800aede:	4622      	mov	r2, r4
 800aee0:	42ba      	cmp	r2, r7
 800aee2:	d30a      	bcc.n	800aefa <__exponent+0x66>
 800aee4:	f10d 0209 	add.w	r2, sp, #9
 800aee8:	eba2 020c 	sub.w	r2, r2, ip
 800aeec:	42bc      	cmp	r4, r7
 800aeee:	bf88      	it	hi
 800aef0:	2200      	movhi	r2, #0
 800aef2:	4413      	add	r3, r2
 800aef4:	1a18      	subs	r0, r3, r0
 800aef6:	b003      	add	sp, #12
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aefa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aefe:	f801 5f01 	strb.w	r5, [r1, #1]!
 800af02:	e7ed      	b.n	800aee0 <__exponent+0x4c>
 800af04:	2330      	movs	r3, #48	; 0x30
 800af06:	3130      	adds	r1, #48	; 0x30
 800af08:	7083      	strb	r3, [r0, #2]
 800af0a:	70c1      	strb	r1, [r0, #3]
 800af0c:	1d03      	adds	r3, r0, #4
 800af0e:	e7f1      	b.n	800aef4 <__exponent+0x60>

0800af10 <_printf_float>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	ed2d 8b02 	vpush	{d8}
 800af18:	b08d      	sub	sp, #52	; 0x34
 800af1a:	460c      	mov	r4, r1
 800af1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af20:	4616      	mov	r6, r2
 800af22:	461f      	mov	r7, r3
 800af24:	4605      	mov	r5, r0
 800af26:	f000 ff65 	bl	800bdf4 <_localeconv_r>
 800af2a:	f8d0 a000 	ldr.w	sl, [r0]
 800af2e:	4650      	mov	r0, sl
 800af30:	f7f5 f99e 	bl	8000270 <strlen>
 800af34:	2300      	movs	r3, #0
 800af36:	930a      	str	r3, [sp, #40]	; 0x28
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	9305      	str	r3, [sp, #20]
 800af3c:	f8d8 3000 	ldr.w	r3, [r8]
 800af40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af44:	3307      	adds	r3, #7
 800af46:	f023 0307 	bic.w	r3, r3, #7
 800af4a:	f103 0208 	add.w	r2, r3, #8
 800af4e:	f8c8 2000 	str.w	r2, [r8]
 800af52:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af5a:	9307      	str	r3, [sp, #28]
 800af5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800af60:	ee08 0a10 	vmov	s16, r0
 800af64:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800af68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af6c:	4b9e      	ldr	r3, [pc, #632]	; (800b1e8 <_printf_float+0x2d8>)
 800af6e:	f04f 32ff 	mov.w	r2, #4294967295
 800af72:	f7f5 fddb 	bl	8000b2c <__aeabi_dcmpun>
 800af76:	bb88      	cbnz	r0, 800afdc <_printf_float+0xcc>
 800af78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af7c:	4b9a      	ldr	r3, [pc, #616]	; (800b1e8 <_printf_float+0x2d8>)
 800af7e:	f04f 32ff 	mov.w	r2, #4294967295
 800af82:	f7f5 fdb5 	bl	8000af0 <__aeabi_dcmple>
 800af86:	bb48      	cbnz	r0, 800afdc <_printf_float+0xcc>
 800af88:	2200      	movs	r2, #0
 800af8a:	2300      	movs	r3, #0
 800af8c:	4640      	mov	r0, r8
 800af8e:	4649      	mov	r1, r9
 800af90:	f7f5 fda4 	bl	8000adc <__aeabi_dcmplt>
 800af94:	b110      	cbz	r0, 800af9c <_printf_float+0x8c>
 800af96:	232d      	movs	r3, #45	; 0x2d
 800af98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af9c:	4a93      	ldr	r2, [pc, #588]	; (800b1ec <_printf_float+0x2dc>)
 800af9e:	4b94      	ldr	r3, [pc, #592]	; (800b1f0 <_printf_float+0x2e0>)
 800afa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afa4:	bf94      	ite	ls
 800afa6:	4690      	movls	r8, r2
 800afa8:	4698      	movhi	r8, r3
 800afaa:	2303      	movs	r3, #3
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	9b05      	ldr	r3, [sp, #20]
 800afb0:	f023 0304 	bic.w	r3, r3, #4
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	f04f 0900 	mov.w	r9, #0
 800afba:	9700      	str	r7, [sp, #0]
 800afbc:	4633      	mov	r3, r6
 800afbe:	aa0b      	add	r2, sp, #44	; 0x2c
 800afc0:	4621      	mov	r1, r4
 800afc2:	4628      	mov	r0, r5
 800afc4:	f000 f9da 	bl	800b37c <_printf_common>
 800afc8:	3001      	adds	r0, #1
 800afca:	f040 8090 	bne.w	800b0ee <_printf_float+0x1de>
 800afce:	f04f 30ff 	mov.w	r0, #4294967295
 800afd2:	b00d      	add	sp, #52	; 0x34
 800afd4:	ecbd 8b02 	vpop	{d8}
 800afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afdc:	4642      	mov	r2, r8
 800afde:	464b      	mov	r3, r9
 800afe0:	4640      	mov	r0, r8
 800afe2:	4649      	mov	r1, r9
 800afe4:	f7f5 fda2 	bl	8000b2c <__aeabi_dcmpun>
 800afe8:	b140      	cbz	r0, 800affc <_printf_float+0xec>
 800afea:	464b      	mov	r3, r9
 800afec:	2b00      	cmp	r3, #0
 800afee:	bfbc      	itt	lt
 800aff0:	232d      	movlt	r3, #45	; 0x2d
 800aff2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aff6:	4a7f      	ldr	r2, [pc, #508]	; (800b1f4 <_printf_float+0x2e4>)
 800aff8:	4b7f      	ldr	r3, [pc, #508]	; (800b1f8 <_printf_float+0x2e8>)
 800affa:	e7d1      	b.n	800afa0 <_printf_float+0x90>
 800affc:	6863      	ldr	r3, [r4, #4]
 800affe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b002:	9206      	str	r2, [sp, #24]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	d13f      	bne.n	800b088 <_printf_float+0x178>
 800b008:	2306      	movs	r3, #6
 800b00a:	6063      	str	r3, [r4, #4]
 800b00c:	9b05      	ldr	r3, [sp, #20]
 800b00e:	6861      	ldr	r1, [r4, #4]
 800b010:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b014:	2300      	movs	r3, #0
 800b016:	9303      	str	r3, [sp, #12]
 800b018:	ab0a      	add	r3, sp, #40	; 0x28
 800b01a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b01e:	ab09      	add	r3, sp, #36	; 0x24
 800b020:	ec49 8b10 	vmov	d0, r8, r9
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	6022      	str	r2, [r4, #0]
 800b028:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b02c:	4628      	mov	r0, r5
 800b02e:	f7ff fecf 	bl	800add0 <__cvt>
 800b032:	9b06      	ldr	r3, [sp, #24]
 800b034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b036:	2b47      	cmp	r3, #71	; 0x47
 800b038:	4680      	mov	r8, r0
 800b03a:	d108      	bne.n	800b04e <_printf_float+0x13e>
 800b03c:	1cc8      	adds	r0, r1, #3
 800b03e:	db02      	blt.n	800b046 <_printf_float+0x136>
 800b040:	6863      	ldr	r3, [r4, #4]
 800b042:	4299      	cmp	r1, r3
 800b044:	dd41      	ble.n	800b0ca <_printf_float+0x1ba>
 800b046:	f1ab 0302 	sub.w	r3, fp, #2
 800b04a:	fa5f fb83 	uxtb.w	fp, r3
 800b04e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b052:	d820      	bhi.n	800b096 <_printf_float+0x186>
 800b054:	3901      	subs	r1, #1
 800b056:	465a      	mov	r2, fp
 800b058:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b05c:	9109      	str	r1, [sp, #36]	; 0x24
 800b05e:	f7ff ff19 	bl	800ae94 <__exponent>
 800b062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b064:	1813      	adds	r3, r2, r0
 800b066:	2a01      	cmp	r2, #1
 800b068:	4681      	mov	r9, r0
 800b06a:	6123      	str	r3, [r4, #16]
 800b06c:	dc02      	bgt.n	800b074 <_printf_float+0x164>
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	07d2      	lsls	r2, r2, #31
 800b072:	d501      	bpl.n	800b078 <_printf_float+0x168>
 800b074:	3301      	adds	r3, #1
 800b076:	6123      	str	r3, [r4, #16]
 800b078:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d09c      	beq.n	800afba <_printf_float+0xaa>
 800b080:	232d      	movs	r3, #45	; 0x2d
 800b082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b086:	e798      	b.n	800afba <_printf_float+0xaa>
 800b088:	9a06      	ldr	r2, [sp, #24]
 800b08a:	2a47      	cmp	r2, #71	; 0x47
 800b08c:	d1be      	bne.n	800b00c <_printf_float+0xfc>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d1bc      	bne.n	800b00c <_printf_float+0xfc>
 800b092:	2301      	movs	r3, #1
 800b094:	e7b9      	b.n	800b00a <_printf_float+0xfa>
 800b096:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b09a:	d118      	bne.n	800b0ce <_printf_float+0x1be>
 800b09c:	2900      	cmp	r1, #0
 800b09e:	6863      	ldr	r3, [r4, #4]
 800b0a0:	dd0b      	ble.n	800b0ba <_printf_float+0x1aa>
 800b0a2:	6121      	str	r1, [r4, #16]
 800b0a4:	b913      	cbnz	r3, 800b0ac <_printf_float+0x19c>
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	07d0      	lsls	r0, r2, #31
 800b0aa:	d502      	bpl.n	800b0b2 <_printf_float+0x1a2>
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	440b      	add	r3, r1
 800b0b0:	6123      	str	r3, [r4, #16]
 800b0b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0b4:	f04f 0900 	mov.w	r9, #0
 800b0b8:	e7de      	b.n	800b078 <_printf_float+0x168>
 800b0ba:	b913      	cbnz	r3, 800b0c2 <_printf_float+0x1b2>
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	07d2      	lsls	r2, r2, #31
 800b0c0:	d501      	bpl.n	800b0c6 <_printf_float+0x1b6>
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	e7f4      	b.n	800b0b0 <_printf_float+0x1a0>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e7f2      	b.n	800b0b0 <_printf_float+0x1a0>
 800b0ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d0:	4299      	cmp	r1, r3
 800b0d2:	db05      	blt.n	800b0e0 <_printf_float+0x1d0>
 800b0d4:	6823      	ldr	r3, [r4, #0]
 800b0d6:	6121      	str	r1, [r4, #16]
 800b0d8:	07d8      	lsls	r0, r3, #31
 800b0da:	d5ea      	bpl.n	800b0b2 <_printf_float+0x1a2>
 800b0dc:	1c4b      	adds	r3, r1, #1
 800b0de:	e7e7      	b.n	800b0b0 <_printf_float+0x1a0>
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	bfd4      	ite	le
 800b0e4:	f1c1 0202 	rsble	r2, r1, #2
 800b0e8:	2201      	movgt	r2, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	e7e0      	b.n	800b0b0 <_printf_float+0x1a0>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	055a      	lsls	r2, r3, #21
 800b0f2:	d407      	bmi.n	800b104 <_printf_float+0x1f4>
 800b0f4:	6923      	ldr	r3, [r4, #16]
 800b0f6:	4642      	mov	r2, r8
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b8      	blx	r7
 800b0fe:	3001      	adds	r0, #1
 800b100:	d12c      	bne.n	800b15c <_printf_float+0x24c>
 800b102:	e764      	b.n	800afce <_printf_float+0xbe>
 800b104:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b108:	f240 80e0 	bls.w	800b2cc <_printf_float+0x3bc>
 800b10c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b110:	2200      	movs	r2, #0
 800b112:	2300      	movs	r3, #0
 800b114:	f7f5 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d034      	beq.n	800b186 <_printf_float+0x276>
 800b11c:	4a37      	ldr	r2, [pc, #220]	; (800b1fc <_printf_float+0x2ec>)
 800b11e:	2301      	movs	r3, #1
 800b120:	4631      	mov	r1, r6
 800b122:	4628      	mov	r0, r5
 800b124:	47b8      	blx	r7
 800b126:	3001      	adds	r0, #1
 800b128:	f43f af51 	beq.w	800afce <_printf_float+0xbe>
 800b12c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b130:	429a      	cmp	r2, r3
 800b132:	db02      	blt.n	800b13a <_printf_float+0x22a>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	07d8      	lsls	r0, r3, #31
 800b138:	d510      	bpl.n	800b15c <_printf_float+0x24c>
 800b13a:	ee18 3a10 	vmov	r3, s16
 800b13e:	4652      	mov	r2, sl
 800b140:	4631      	mov	r1, r6
 800b142:	4628      	mov	r0, r5
 800b144:	47b8      	blx	r7
 800b146:	3001      	adds	r0, #1
 800b148:	f43f af41 	beq.w	800afce <_printf_float+0xbe>
 800b14c:	f04f 0800 	mov.w	r8, #0
 800b150:	f104 091a 	add.w	r9, r4, #26
 800b154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b156:	3b01      	subs	r3, #1
 800b158:	4543      	cmp	r3, r8
 800b15a:	dc09      	bgt.n	800b170 <_printf_float+0x260>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	079b      	lsls	r3, r3, #30
 800b160:	f100 8107 	bmi.w	800b372 <_printf_float+0x462>
 800b164:	68e0      	ldr	r0, [r4, #12]
 800b166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b168:	4298      	cmp	r0, r3
 800b16a:	bfb8      	it	lt
 800b16c:	4618      	movlt	r0, r3
 800b16e:	e730      	b.n	800afd2 <_printf_float+0xc2>
 800b170:	2301      	movs	r3, #1
 800b172:	464a      	mov	r2, r9
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	f43f af27 	beq.w	800afce <_printf_float+0xbe>
 800b180:	f108 0801 	add.w	r8, r8, #1
 800b184:	e7e6      	b.n	800b154 <_printf_float+0x244>
 800b186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc39      	bgt.n	800b200 <_printf_float+0x2f0>
 800b18c:	4a1b      	ldr	r2, [pc, #108]	; (800b1fc <_printf_float+0x2ec>)
 800b18e:	2301      	movs	r3, #1
 800b190:	4631      	mov	r1, r6
 800b192:	4628      	mov	r0, r5
 800b194:	47b8      	blx	r7
 800b196:	3001      	adds	r0, #1
 800b198:	f43f af19 	beq.w	800afce <_printf_float+0xbe>
 800b19c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	d102      	bne.n	800b1aa <_printf_float+0x29a>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	07d9      	lsls	r1, r3, #31
 800b1a8:	d5d8      	bpl.n	800b15c <_printf_float+0x24c>
 800b1aa:	ee18 3a10 	vmov	r3, s16
 800b1ae:	4652      	mov	r2, sl
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	f43f af09 	beq.w	800afce <_printf_float+0xbe>
 800b1bc:	f04f 0900 	mov.w	r9, #0
 800b1c0:	f104 0a1a 	add.w	sl, r4, #26
 800b1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c6:	425b      	negs	r3, r3
 800b1c8:	454b      	cmp	r3, r9
 800b1ca:	dc01      	bgt.n	800b1d0 <_printf_float+0x2c0>
 800b1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ce:	e792      	b.n	800b0f6 <_printf_float+0x1e6>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b8      	blx	r7
 800b1da:	3001      	adds	r0, #1
 800b1dc:	f43f aef7 	beq.w	800afce <_printf_float+0xbe>
 800b1e0:	f109 0901 	add.w	r9, r9, #1
 800b1e4:	e7ee      	b.n	800b1c4 <_printf_float+0x2b4>
 800b1e6:	bf00      	nop
 800b1e8:	7fefffff 	.word	0x7fefffff
 800b1ec:	0800fd69 	.word	0x0800fd69
 800b1f0:	0800fd6d 	.word	0x0800fd6d
 800b1f4:	0800fd71 	.word	0x0800fd71
 800b1f8:	0800fd75 	.word	0x0800fd75
 800b1fc:	0800fd79 	.word	0x0800fd79
 800b200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b202:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b204:	429a      	cmp	r2, r3
 800b206:	bfa8      	it	ge
 800b208:	461a      	movge	r2, r3
 800b20a:	2a00      	cmp	r2, #0
 800b20c:	4691      	mov	r9, r2
 800b20e:	dc37      	bgt.n	800b280 <_printf_float+0x370>
 800b210:	f04f 0b00 	mov.w	fp, #0
 800b214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b218:	f104 021a 	add.w	r2, r4, #26
 800b21c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b21e:	9305      	str	r3, [sp, #20]
 800b220:	eba3 0309 	sub.w	r3, r3, r9
 800b224:	455b      	cmp	r3, fp
 800b226:	dc33      	bgt.n	800b290 <_printf_float+0x380>
 800b228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b22c:	429a      	cmp	r2, r3
 800b22e:	db3b      	blt.n	800b2a8 <_printf_float+0x398>
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	07da      	lsls	r2, r3, #31
 800b234:	d438      	bmi.n	800b2a8 <_printf_float+0x398>
 800b236:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b23a:	eba2 0903 	sub.w	r9, r2, r3
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	1ad2      	subs	r2, r2, r3
 800b242:	4591      	cmp	r9, r2
 800b244:	bfa8      	it	ge
 800b246:	4691      	movge	r9, r2
 800b248:	f1b9 0f00 	cmp.w	r9, #0
 800b24c:	dc35      	bgt.n	800b2ba <_printf_float+0x3aa>
 800b24e:	f04f 0800 	mov.w	r8, #0
 800b252:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b256:	f104 0a1a 	add.w	sl, r4, #26
 800b25a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b25e:	1a9b      	subs	r3, r3, r2
 800b260:	eba3 0309 	sub.w	r3, r3, r9
 800b264:	4543      	cmp	r3, r8
 800b266:	f77f af79 	ble.w	800b15c <_printf_float+0x24c>
 800b26a:	2301      	movs	r3, #1
 800b26c:	4652      	mov	r2, sl
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f aeaa 	beq.w	800afce <_printf_float+0xbe>
 800b27a:	f108 0801 	add.w	r8, r8, #1
 800b27e:	e7ec      	b.n	800b25a <_printf_float+0x34a>
 800b280:	4613      	mov	r3, r2
 800b282:	4631      	mov	r1, r6
 800b284:	4642      	mov	r2, r8
 800b286:	4628      	mov	r0, r5
 800b288:	47b8      	blx	r7
 800b28a:	3001      	adds	r0, #1
 800b28c:	d1c0      	bne.n	800b210 <_printf_float+0x300>
 800b28e:	e69e      	b.n	800afce <_printf_float+0xbe>
 800b290:	2301      	movs	r3, #1
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	9205      	str	r2, [sp, #20]
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	f43f ae97 	beq.w	800afce <_printf_float+0xbe>
 800b2a0:	9a05      	ldr	r2, [sp, #20]
 800b2a2:	f10b 0b01 	add.w	fp, fp, #1
 800b2a6:	e7b9      	b.n	800b21c <_printf_float+0x30c>
 800b2a8:	ee18 3a10 	vmov	r3, s16
 800b2ac:	4652      	mov	r2, sl
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d1be      	bne.n	800b236 <_printf_float+0x326>
 800b2b8:	e689      	b.n	800afce <_printf_float+0xbe>
 800b2ba:	9a05      	ldr	r2, [sp, #20]
 800b2bc:	464b      	mov	r3, r9
 800b2be:	4442      	add	r2, r8
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d1c1      	bne.n	800b24e <_printf_float+0x33e>
 800b2ca:	e680      	b.n	800afce <_printf_float+0xbe>
 800b2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ce:	2a01      	cmp	r2, #1
 800b2d0:	dc01      	bgt.n	800b2d6 <_printf_float+0x3c6>
 800b2d2:	07db      	lsls	r3, r3, #31
 800b2d4:	d53a      	bpl.n	800b34c <_printf_float+0x43c>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4642      	mov	r2, r8
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b8      	blx	r7
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	f43f ae74 	beq.w	800afce <_printf_float+0xbe>
 800b2e6:	ee18 3a10 	vmov	r3, s16
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f ae6b 	beq.w	800afce <_printf_float+0xbe>
 800b2f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b304:	f7f5 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b308:	b9d8      	cbnz	r0, 800b342 <_printf_float+0x432>
 800b30a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b30e:	f108 0201 	add.w	r2, r8, #1
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	d10e      	bne.n	800b33a <_printf_float+0x42a>
 800b31c:	e657      	b.n	800afce <_printf_float+0xbe>
 800b31e:	2301      	movs	r3, #1
 800b320:	4652      	mov	r2, sl
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f ae50 	beq.w	800afce <_printf_float+0xbe>
 800b32e:	f108 0801 	add.w	r8, r8, #1
 800b332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b334:	3b01      	subs	r3, #1
 800b336:	4543      	cmp	r3, r8
 800b338:	dcf1      	bgt.n	800b31e <_printf_float+0x40e>
 800b33a:	464b      	mov	r3, r9
 800b33c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b340:	e6da      	b.n	800b0f8 <_printf_float+0x1e8>
 800b342:	f04f 0800 	mov.w	r8, #0
 800b346:	f104 0a1a 	add.w	sl, r4, #26
 800b34a:	e7f2      	b.n	800b332 <_printf_float+0x422>
 800b34c:	2301      	movs	r3, #1
 800b34e:	4642      	mov	r2, r8
 800b350:	e7df      	b.n	800b312 <_printf_float+0x402>
 800b352:	2301      	movs	r3, #1
 800b354:	464a      	mov	r2, r9
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	f43f ae36 	beq.w	800afce <_printf_float+0xbe>
 800b362:	f108 0801 	add.w	r8, r8, #1
 800b366:	68e3      	ldr	r3, [r4, #12]
 800b368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b36a:	1a5b      	subs	r3, r3, r1
 800b36c:	4543      	cmp	r3, r8
 800b36e:	dcf0      	bgt.n	800b352 <_printf_float+0x442>
 800b370:	e6f8      	b.n	800b164 <_printf_float+0x254>
 800b372:	f04f 0800 	mov.w	r8, #0
 800b376:	f104 0919 	add.w	r9, r4, #25
 800b37a:	e7f4      	b.n	800b366 <_printf_float+0x456>

0800b37c <_printf_common>:
 800b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	4616      	mov	r6, r2
 800b382:	4699      	mov	r9, r3
 800b384:	688a      	ldr	r2, [r1, #8]
 800b386:	690b      	ldr	r3, [r1, #16]
 800b388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b38c:	4293      	cmp	r3, r2
 800b38e:	bfb8      	it	lt
 800b390:	4613      	movlt	r3, r2
 800b392:	6033      	str	r3, [r6, #0]
 800b394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b398:	4607      	mov	r7, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	b10a      	cbz	r2, 800b3a2 <_printf_common+0x26>
 800b39e:	3301      	adds	r3, #1
 800b3a0:	6033      	str	r3, [r6, #0]
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	0699      	lsls	r1, r3, #26
 800b3a6:	bf42      	ittt	mi
 800b3a8:	6833      	ldrmi	r3, [r6, #0]
 800b3aa:	3302      	addmi	r3, #2
 800b3ac:	6033      	strmi	r3, [r6, #0]
 800b3ae:	6825      	ldr	r5, [r4, #0]
 800b3b0:	f015 0506 	ands.w	r5, r5, #6
 800b3b4:	d106      	bne.n	800b3c4 <_printf_common+0x48>
 800b3b6:	f104 0a19 	add.w	sl, r4, #25
 800b3ba:	68e3      	ldr	r3, [r4, #12]
 800b3bc:	6832      	ldr	r2, [r6, #0]
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	42ab      	cmp	r3, r5
 800b3c2:	dc26      	bgt.n	800b412 <_printf_common+0x96>
 800b3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3c8:	1e13      	subs	r3, r2, #0
 800b3ca:	6822      	ldr	r2, [r4, #0]
 800b3cc:	bf18      	it	ne
 800b3ce:	2301      	movne	r3, #1
 800b3d0:	0692      	lsls	r2, r2, #26
 800b3d2:	d42b      	bmi.n	800b42c <_printf_common+0xb0>
 800b3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3d8:	4649      	mov	r1, r9
 800b3da:	4638      	mov	r0, r7
 800b3dc:	47c0      	blx	r8
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d01e      	beq.n	800b420 <_printf_common+0xa4>
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	6922      	ldr	r2, [r4, #16]
 800b3e6:	f003 0306 	and.w	r3, r3, #6
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	bf02      	ittt	eq
 800b3ee:	68e5      	ldreq	r5, [r4, #12]
 800b3f0:	6833      	ldreq	r3, [r6, #0]
 800b3f2:	1aed      	subeq	r5, r5, r3
 800b3f4:	68a3      	ldr	r3, [r4, #8]
 800b3f6:	bf0c      	ite	eq
 800b3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3fc:	2500      	movne	r5, #0
 800b3fe:	4293      	cmp	r3, r2
 800b400:	bfc4      	itt	gt
 800b402:	1a9b      	subgt	r3, r3, r2
 800b404:	18ed      	addgt	r5, r5, r3
 800b406:	2600      	movs	r6, #0
 800b408:	341a      	adds	r4, #26
 800b40a:	42b5      	cmp	r5, r6
 800b40c:	d11a      	bne.n	800b444 <_printf_common+0xc8>
 800b40e:	2000      	movs	r0, #0
 800b410:	e008      	b.n	800b424 <_printf_common+0xa8>
 800b412:	2301      	movs	r3, #1
 800b414:	4652      	mov	r2, sl
 800b416:	4649      	mov	r1, r9
 800b418:	4638      	mov	r0, r7
 800b41a:	47c0      	blx	r8
 800b41c:	3001      	adds	r0, #1
 800b41e:	d103      	bne.n	800b428 <_printf_common+0xac>
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b428:	3501      	adds	r5, #1
 800b42a:	e7c6      	b.n	800b3ba <_printf_common+0x3e>
 800b42c:	18e1      	adds	r1, r4, r3
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	2030      	movs	r0, #48	; 0x30
 800b432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b436:	4422      	add	r2, r4
 800b438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b440:	3302      	adds	r3, #2
 800b442:	e7c7      	b.n	800b3d4 <_printf_common+0x58>
 800b444:	2301      	movs	r3, #1
 800b446:	4622      	mov	r2, r4
 800b448:	4649      	mov	r1, r9
 800b44a:	4638      	mov	r0, r7
 800b44c:	47c0      	blx	r8
 800b44e:	3001      	adds	r0, #1
 800b450:	d0e6      	beq.n	800b420 <_printf_common+0xa4>
 800b452:	3601      	adds	r6, #1
 800b454:	e7d9      	b.n	800b40a <_printf_common+0x8e>
	...

0800b458 <_printf_i>:
 800b458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	7e0f      	ldrb	r7, [r1, #24]
 800b45e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b460:	2f78      	cmp	r7, #120	; 0x78
 800b462:	4691      	mov	r9, r2
 800b464:	4680      	mov	r8, r0
 800b466:	460c      	mov	r4, r1
 800b468:	469a      	mov	sl, r3
 800b46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b46e:	d807      	bhi.n	800b480 <_printf_i+0x28>
 800b470:	2f62      	cmp	r7, #98	; 0x62
 800b472:	d80a      	bhi.n	800b48a <_printf_i+0x32>
 800b474:	2f00      	cmp	r7, #0
 800b476:	f000 80d4 	beq.w	800b622 <_printf_i+0x1ca>
 800b47a:	2f58      	cmp	r7, #88	; 0x58
 800b47c:	f000 80c0 	beq.w	800b600 <_printf_i+0x1a8>
 800b480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b488:	e03a      	b.n	800b500 <_printf_i+0xa8>
 800b48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b48e:	2b15      	cmp	r3, #21
 800b490:	d8f6      	bhi.n	800b480 <_printf_i+0x28>
 800b492:	a101      	add	r1, pc, #4	; (adr r1, 800b498 <_printf_i+0x40>)
 800b494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b481 	.word	0x0800b481
 800b4a4:	0800b481 	.word	0x0800b481
 800b4a8:	0800b481 	.word	0x0800b481
 800b4ac:	0800b481 	.word	0x0800b481
 800b4b0:	0800b505 	.word	0x0800b505
 800b4b4:	0800b481 	.word	0x0800b481
 800b4b8:	0800b481 	.word	0x0800b481
 800b4bc:	0800b481 	.word	0x0800b481
 800b4c0:	0800b481 	.word	0x0800b481
 800b4c4:	0800b609 	.word	0x0800b609
 800b4c8:	0800b531 	.word	0x0800b531
 800b4cc:	0800b5c3 	.word	0x0800b5c3
 800b4d0:	0800b481 	.word	0x0800b481
 800b4d4:	0800b481 	.word	0x0800b481
 800b4d8:	0800b62b 	.word	0x0800b62b
 800b4dc:	0800b481 	.word	0x0800b481
 800b4e0:	0800b531 	.word	0x0800b531
 800b4e4:	0800b481 	.word	0x0800b481
 800b4e8:	0800b481 	.word	0x0800b481
 800b4ec:	0800b5cb 	.word	0x0800b5cb
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	602a      	str	r2, [r5, #0]
 800b4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b500:	2301      	movs	r3, #1
 800b502:	e09f      	b.n	800b644 <_printf_i+0x1ec>
 800b504:	6820      	ldr	r0, [r4, #0]
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	0607      	lsls	r7, r0, #24
 800b50a:	f103 0104 	add.w	r1, r3, #4
 800b50e:	6029      	str	r1, [r5, #0]
 800b510:	d501      	bpl.n	800b516 <_printf_i+0xbe>
 800b512:	681e      	ldr	r6, [r3, #0]
 800b514:	e003      	b.n	800b51e <_printf_i+0xc6>
 800b516:	0646      	lsls	r6, r0, #25
 800b518:	d5fb      	bpl.n	800b512 <_printf_i+0xba>
 800b51a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b51e:	2e00      	cmp	r6, #0
 800b520:	da03      	bge.n	800b52a <_printf_i+0xd2>
 800b522:	232d      	movs	r3, #45	; 0x2d
 800b524:	4276      	negs	r6, r6
 800b526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52a:	485a      	ldr	r0, [pc, #360]	; (800b694 <_printf_i+0x23c>)
 800b52c:	230a      	movs	r3, #10
 800b52e:	e012      	b.n	800b556 <_printf_i+0xfe>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	6820      	ldr	r0, [r4, #0]
 800b534:	1d19      	adds	r1, r3, #4
 800b536:	6029      	str	r1, [r5, #0]
 800b538:	0605      	lsls	r5, r0, #24
 800b53a:	d501      	bpl.n	800b540 <_printf_i+0xe8>
 800b53c:	681e      	ldr	r6, [r3, #0]
 800b53e:	e002      	b.n	800b546 <_printf_i+0xee>
 800b540:	0641      	lsls	r1, r0, #25
 800b542:	d5fb      	bpl.n	800b53c <_printf_i+0xe4>
 800b544:	881e      	ldrh	r6, [r3, #0]
 800b546:	4853      	ldr	r0, [pc, #332]	; (800b694 <_printf_i+0x23c>)
 800b548:	2f6f      	cmp	r7, #111	; 0x6f
 800b54a:	bf0c      	ite	eq
 800b54c:	2308      	moveq	r3, #8
 800b54e:	230a      	movne	r3, #10
 800b550:	2100      	movs	r1, #0
 800b552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b556:	6865      	ldr	r5, [r4, #4]
 800b558:	60a5      	str	r5, [r4, #8]
 800b55a:	2d00      	cmp	r5, #0
 800b55c:	bfa2      	ittt	ge
 800b55e:	6821      	ldrge	r1, [r4, #0]
 800b560:	f021 0104 	bicge.w	r1, r1, #4
 800b564:	6021      	strge	r1, [r4, #0]
 800b566:	b90e      	cbnz	r6, 800b56c <_printf_i+0x114>
 800b568:	2d00      	cmp	r5, #0
 800b56a:	d04b      	beq.n	800b604 <_printf_i+0x1ac>
 800b56c:	4615      	mov	r5, r2
 800b56e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b572:	fb03 6711 	mls	r7, r3, r1, r6
 800b576:	5dc7      	ldrb	r7, [r0, r7]
 800b578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b57c:	4637      	mov	r7, r6
 800b57e:	42bb      	cmp	r3, r7
 800b580:	460e      	mov	r6, r1
 800b582:	d9f4      	bls.n	800b56e <_printf_i+0x116>
 800b584:	2b08      	cmp	r3, #8
 800b586:	d10b      	bne.n	800b5a0 <_printf_i+0x148>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	07de      	lsls	r6, r3, #31
 800b58c:	d508      	bpl.n	800b5a0 <_printf_i+0x148>
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	6861      	ldr	r1, [r4, #4]
 800b592:	4299      	cmp	r1, r3
 800b594:	bfde      	ittt	le
 800b596:	2330      	movle	r3, #48	; 0x30
 800b598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b59c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5a0:	1b52      	subs	r2, r2, r5
 800b5a2:	6122      	str	r2, [r4, #16]
 800b5a4:	f8cd a000 	str.w	sl, [sp]
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	aa03      	add	r2, sp, #12
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4640      	mov	r0, r8
 800b5b0:	f7ff fee4 	bl	800b37c <_printf_common>
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d14a      	bne.n	800b64e <_printf_i+0x1f6>
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	b004      	add	sp, #16
 800b5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	f043 0320 	orr.w	r3, r3, #32
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	4833      	ldr	r0, [pc, #204]	; (800b698 <_printf_i+0x240>)
 800b5cc:	2778      	movs	r7, #120	; 0x78
 800b5ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	6829      	ldr	r1, [r5, #0]
 800b5d6:	061f      	lsls	r7, r3, #24
 800b5d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5dc:	d402      	bmi.n	800b5e4 <_printf_i+0x18c>
 800b5de:	065f      	lsls	r7, r3, #25
 800b5e0:	bf48      	it	mi
 800b5e2:	b2b6      	uxthmi	r6, r6
 800b5e4:	07df      	lsls	r7, r3, #31
 800b5e6:	bf48      	it	mi
 800b5e8:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ec:	6029      	str	r1, [r5, #0]
 800b5ee:	bf48      	it	mi
 800b5f0:	6023      	strmi	r3, [r4, #0]
 800b5f2:	b91e      	cbnz	r6, 800b5fc <_printf_i+0x1a4>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	f023 0320 	bic.w	r3, r3, #32
 800b5fa:	6023      	str	r3, [r4, #0]
 800b5fc:	2310      	movs	r3, #16
 800b5fe:	e7a7      	b.n	800b550 <_printf_i+0xf8>
 800b600:	4824      	ldr	r0, [pc, #144]	; (800b694 <_printf_i+0x23c>)
 800b602:	e7e4      	b.n	800b5ce <_printf_i+0x176>
 800b604:	4615      	mov	r5, r2
 800b606:	e7bd      	b.n	800b584 <_printf_i+0x12c>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	6826      	ldr	r6, [r4, #0]
 800b60c:	6961      	ldr	r1, [r4, #20]
 800b60e:	1d18      	adds	r0, r3, #4
 800b610:	6028      	str	r0, [r5, #0]
 800b612:	0635      	lsls	r5, r6, #24
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	d501      	bpl.n	800b61c <_printf_i+0x1c4>
 800b618:	6019      	str	r1, [r3, #0]
 800b61a:	e002      	b.n	800b622 <_printf_i+0x1ca>
 800b61c:	0670      	lsls	r0, r6, #25
 800b61e:	d5fb      	bpl.n	800b618 <_printf_i+0x1c0>
 800b620:	8019      	strh	r1, [r3, #0]
 800b622:	2300      	movs	r3, #0
 800b624:	6123      	str	r3, [r4, #16]
 800b626:	4615      	mov	r5, r2
 800b628:	e7bc      	b.n	800b5a4 <_printf_i+0x14c>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	1d1a      	adds	r2, r3, #4
 800b62e:	602a      	str	r2, [r5, #0]
 800b630:	681d      	ldr	r5, [r3, #0]
 800b632:	6862      	ldr	r2, [r4, #4]
 800b634:	2100      	movs	r1, #0
 800b636:	4628      	mov	r0, r5
 800b638:	f7f4 fdca 	bl	80001d0 <memchr>
 800b63c:	b108      	cbz	r0, 800b642 <_printf_i+0x1ea>
 800b63e:	1b40      	subs	r0, r0, r5
 800b640:	6060      	str	r0, [r4, #4]
 800b642:	6863      	ldr	r3, [r4, #4]
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	2300      	movs	r3, #0
 800b648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b64c:	e7aa      	b.n	800b5a4 <_printf_i+0x14c>
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	462a      	mov	r2, r5
 800b652:	4649      	mov	r1, r9
 800b654:	4640      	mov	r0, r8
 800b656:	47d0      	blx	sl
 800b658:	3001      	adds	r0, #1
 800b65a:	d0ad      	beq.n	800b5b8 <_printf_i+0x160>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	079b      	lsls	r3, r3, #30
 800b660:	d413      	bmi.n	800b68a <_printf_i+0x232>
 800b662:	68e0      	ldr	r0, [r4, #12]
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	4298      	cmp	r0, r3
 800b668:	bfb8      	it	lt
 800b66a:	4618      	movlt	r0, r3
 800b66c:	e7a6      	b.n	800b5bc <_printf_i+0x164>
 800b66e:	2301      	movs	r3, #1
 800b670:	4632      	mov	r2, r6
 800b672:	4649      	mov	r1, r9
 800b674:	4640      	mov	r0, r8
 800b676:	47d0      	blx	sl
 800b678:	3001      	adds	r0, #1
 800b67a:	d09d      	beq.n	800b5b8 <_printf_i+0x160>
 800b67c:	3501      	adds	r5, #1
 800b67e:	68e3      	ldr	r3, [r4, #12]
 800b680:	9903      	ldr	r1, [sp, #12]
 800b682:	1a5b      	subs	r3, r3, r1
 800b684:	42ab      	cmp	r3, r5
 800b686:	dcf2      	bgt.n	800b66e <_printf_i+0x216>
 800b688:	e7eb      	b.n	800b662 <_printf_i+0x20a>
 800b68a:	2500      	movs	r5, #0
 800b68c:	f104 0619 	add.w	r6, r4, #25
 800b690:	e7f5      	b.n	800b67e <_printf_i+0x226>
 800b692:	bf00      	nop
 800b694:	0800fd7b 	.word	0x0800fd7b
 800b698:	0800fd8c 	.word	0x0800fd8c

0800b69c <_scanf_float>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	4617      	mov	r7, r2
 800b6a4:	9303      	str	r3, [sp, #12]
 800b6a6:	688b      	ldr	r3, [r1, #8]
 800b6a8:	1e5a      	subs	r2, r3, #1
 800b6aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b6ae:	bf83      	ittte	hi
 800b6b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b6b4:	195b      	addhi	r3, r3, r5
 800b6b6:	9302      	strhi	r3, [sp, #8]
 800b6b8:	2300      	movls	r3, #0
 800b6ba:	bf86      	itte	hi
 800b6bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b6c0:	608b      	strhi	r3, [r1, #8]
 800b6c2:	9302      	strls	r3, [sp, #8]
 800b6c4:	680b      	ldr	r3, [r1, #0]
 800b6c6:	468b      	mov	fp, r1
 800b6c8:	2500      	movs	r5, #0
 800b6ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b6ce:	f84b 3b1c 	str.w	r3, [fp], #28
 800b6d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	460c      	mov	r4, r1
 800b6da:	465e      	mov	r6, fp
 800b6dc:	46aa      	mov	sl, r5
 800b6de:	46a9      	mov	r9, r5
 800b6e0:	9501      	str	r5, [sp, #4]
 800b6e2:	68a2      	ldr	r2, [r4, #8]
 800b6e4:	b152      	cbz	r2, 800b6fc <_scanf_float+0x60>
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b4e      	cmp	r3, #78	; 0x4e
 800b6ec:	d864      	bhi.n	800b7b8 <_scanf_float+0x11c>
 800b6ee:	2b40      	cmp	r3, #64	; 0x40
 800b6f0:	d83c      	bhi.n	800b76c <_scanf_float+0xd0>
 800b6f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b6f6:	b2c8      	uxtb	r0, r1
 800b6f8:	280e      	cmp	r0, #14
 800b6fa:	d93a      	bls.n	800b772 <_scanf_float+0xd6>
 800b6fc:	f1b9 0f00 	cmp.w	r9, #0
 800b700:	d003      	beq.n	800b70a <_scanf_float+0x6e>
 800b702:	6823      	ldr	r3, [r4, #0]
 800b704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b70e:	f1ba 0f01 	cmp.w	sl, #1
 800b712:	f200 8113 	bhi.w	800b93c <_scanf_float+0x2a0>
 800b716:	455e      	cmp	r6, fp
 800b718:	f200 8105 	bhi.w	800b926 <_scanf_float+0x28a>
 800b71c:	2501      	movs	r5, #1
 800b71e:	4628      	mov	r0, r5
 800b720:	b007      	add	sp, #28
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b726:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b72a:	2a0d      	cmp	r2, #13
 800b72c:	d8e6      	bhi.n	800b6fc <_scanf_float+0x60>
 800b72e:	a101      	add	r1, pc, #4	; (adr r1, 800b734 <_scanf_float+0x98>)
 800b730:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b734:	0800b873 	.word	0x0800b873
 800b738:	0800b6fd 	.word	0x0800b6fd
 800b73c:	0800b6fd 	.word	0x0800b6fd
 800b740:	0800b6fd 	.word	0x0800b6fd
 800b744:	0800b8d3 	.word	0x0800b8d3
 800b748:	0800b8ab 	.word	0x0800b8ab
 800b74c:	0800b6fd 	.word	0x0800b6fd
 800b750:	0800b6fd 	.word	0x0800b6fd
 800b754:	0800b881 	.word	0x0800b881
 800b758:	0800b6fd 	.word	0x0800b6fd
 800b75c:	0800b6fd 	.word	0x0800b6fd
 800b760:	0800b6fd 	.word	0x0800b6fd
 800b764:	0800b6fd 	.word	0x0800b6fd
 800b768:	0800b839 	.word	0x0800b839
 800b76c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b770:	e7db      	b.n	800b72a <_scanf_float+0x8e>
 800b772:	290e      	cmp	r1, #14
 800b774:	d8c2      	bhi.n	800b6fc <_scanf_float+0x60>
 800b776:	a001      	add	r0, pc, #4	; (adr r0, 800b77c <_scanf_float+0xe0>)
 800b778:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b77c:	0800b82b 	.word	0x0800b82b
 800b780:	0800b6fd 	.word	0x0800b6fd
 800b784:	0800b82b 	.word	0x0800b82b
 800b788:	0800b8bf 	.word	0x0800b8bf
 800b78c:	0800b6fd 	.word	0x0800b6fd
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b815 	.word	0x0800b815
 800b798:	0800b815 	.word	0x0800b815
 800b79c:	0800b815 	.word	0x0800b815
 800b7a0:	0800b815 	.word	0x0800b815
 800b7a4:	0800b815 	.word	0x0800b815
 800b7a8:	0800b815 	.word	0x0800b815
 800b7ac:	0800b815 	.word	0x0800b815
 800b7b0:	0800b815 	.word	0x0800b815
 800b7b4:	0800b815 	.word	0x0800b815
 800b7b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b7ba:	d809      	bhi.n	800b7d0 <_scanf_float+0x134>
 800b7bc:	2b60      	cmp	r3, #96	; 0x60
 800b7be:	d8b2      	bhi.n	800b726 <_scanf_float+0x8a>
 800b7c0:	2b54      	cmp	r3, #84	; 0x54
 800b7c2:	d077      	beq.n	800b8b4 <_scanf_float+0x218>
 800b7c4:	2b59      	cmp	r3, #89	; 0x59
 800b7c6:	d199      	bne.n	800b6fc <_scanf_float+0x60>
 800b7c8:	2d07      	cmp	r5, #7
 800b7ca:	d197      	bne.n	800b6fc <_scanf_float+0x60>
 800b7cc:	2508      	movs	r5, #8
 800b7ce:	e029      	b.n	800b824 <_scanf_float+0x188>
 800b7d0:	2b74      	cmp	r3, #116	; 0x74
 800b7d2:	d06f      	beq.n	800b8b4 <_scanf_float+0x218>
 800b7d4:	2b79      	cmp	r3, #121	; 0x79
 800b7d6:	e7f6      	b.n	800b7c6 <_scanf_float+0x12a>
 800b7d8:	6821      	ldr	r1, [r4, #0]
 800b7da:	05c8      	lsls	r0, r1, #23
 800b7dc:	d51a      	bpl.n	800b814 <_scanf_float+0x178>
 800b7de:	9b02      	ldr	r3, [sp, #8]
 800b7e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b7e4:	6021      	str	r1, [r4, #0]
 800b7e6:	f109 0901 	add.w	r9, r9, #1
 800b7ea:	b11b      	cbz	r3, 800b7f4 <_scanf_float+0x158>
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	3201      	adds	r2, #1
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	60a2      	str	r2, [r4, #8]
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	60a3      	str	r3, [r4, #8]
 800b7fa:	6923      	ldr	r3, [r4, #16]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	6123      	str	r3, [r4, #16]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	3b01      	subs	r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	607b      	str	r3, [r7, #4]
 800b808:	f340 8084 	ble.w	800b914 <_scanf_float+0x278>
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	603b      	str	r3, [r7, #0]
 800b812:	e766      	b.n	800b6e2 <_scanf_float+0x46>
 800b814:	eb1a 0f05 	cmn.w	sl, r5
 800b818:	f47f af70 	bne.w	800b6fc <_scanf_float+0x60>
 800b81c:	6822      	ldr	r2, [r4, #0]
 800b81e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b822:	6022      	str	r2, [r4, #0]
 800b824:	f806 3b01 	strb.w	r3, [r6], #1
 800b828:	e7e4      	b.n	800b7f4 <_scanf_float+0x158>
 800b82a:	6822      	ldr	r2, [r4, #0]
 800b82c:	0610      	lsls	r0, r2, #24
 800b82e:	f57f af65 	bpl.w	800b6fc <_scanf_float+0x60>
 800b832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b836:	e7f4      	b.n	800b822 <_scanf_float+0x186>
 800b838:	f1ba 0f00 	cmp.w	sl, #0
 800b83c:	d10e      	bne.n	800b85c <_scanf_float+0x1c0>
 800b83e:	f1b9 0f00 	cmp.w	r9, #0
 800b842:	d10e      	bne.n	800b862 <_scanf_float+0x1c6>
 800b844:	6822      	ldr	r2, [r4, #0]
 800b846:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b84a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b84e:	d108      	bne.n	800b862 <_scanf_float+0x1c6>
 800b850:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b854:	6022      	str	r2, [r4, #0]
 800b856:	f04f 0a01 	mov.w	sl, #1
 800b85a:	e7e3      	b.n	800b824 <_scanf_float+0x188>
 800b85c:	f1ba 0f02 	cmp.w	sl, #2
 800b860:	d055      	beq.n	800b90e <_scanf_float+0x272>
 800b862:	2d01      	cmp	r5, #1
 800b864:	d002      	beq.n	800b86c <_scanf_float+0x1d0>
 800b866:	2d04      	cmp	r5, #4
 800b868:	f47f af48 	bne.w	800b6fc <_scanf_float+0x60>
 800b86c:	3501      	adds	r5, #1
 800b86e:	b2ed      	uxtb	r5, r5
 800b870:	e7d8      	b.n	800b824 <_scanf_float+0x188>
 800b872:	f1ba 0f01 	cmp.w	sl, #1
 800b876:	f47f af41 	bne.w	800b6fc <_scanf_float+0x60>
 800b87a:	f04f 0a02 	mov.w	sl, #2
 800b87e:	e7d1      	b.n	800b824 <_scanf_float+0x188>
 800b880:	b97d      	cbnz	r5, 800b8a2 <_scanf_float+0x206>
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	f47f af3c 	bne.w	800b702 <_scanf_float+0x66>
 800b88a:	6822      	ldr	r2, [r4, #0]
 800b88c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b890:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b894:	f47f af39 	bne.w	800b70a <_scanf_float+0x6e>
 800b898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b89c:	6022      	str	r2, [r4, #0]
 800b89e:	2501      	movs	r5, #1
 800b8a0:	e7c0      	b.n	800b824 <_scanf_float+0x188>
 800b8a2:	2d03      	cmp	r5, #3
 800b8a4:	d0e2      	beq.n	800b86c <_scanf_float+0x1d0>
 800b8a6:	2d05      	cmp	r5, #5
 800b8a8:	e7de      	b.n	800b868 <_scanf_float+0x1cc>
 800b8aa:	2d02      	cmp	r5, #2
 800b8ac:	f47f af26 	bne.w	800b6fc <_scanf_float+0x60>
 800b8b0:	2503      	movs	r5, #3
 800b8b2:	e7b7      	b.n	800b824 <_scanf_float+0x188>
 800b8b4:	2d06      	cmp	r5, #6
 800b8b6:	f47f af21 	bne.w	800b6fc <_scanf_float+0x60>
 800b8ba:	2507      	movs	r5, #7
 800b8bc:	e7b2      	b.n	800b824 <_scanf_float+0x188>
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	0591      	lsls	r1, r2, #22
 800b8c2:	f57f af1b 	bpl.w	800b6fc <_scanf_float+0x60>
 800b8c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b8ca:	6022      	str	r2, [r4, #0]
 800b8cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b8d0:	e7a8      	b.n	800b824 <_scanf_float+0x188>
 800b8d2:	6822      	ldr	r2, [r4, #0]
 800b8d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b8d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b8dc:	d006      	beq.n	800b8ec <_scanf_float+0x250>
 800b8de:	0550      	lsls	r0, r2, #21
 800b8e0:	f57f af0c 	bpl.w	800b6fc <_scanf_float+0x60>
 800b8e4:	f1b9 0f00 	cmp.w	r9, #0
 800b8e8:	f43f af0f 	beq.w	800b70a <_scanf_float+0x6e>
 800b8ec:	0591      	lsls	r1, r2, #22
 800b8ee:	bf58      	it	pl
 800b8f0:	9901      	ldrpl	r1, [sp, #4]
 800b8f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8f6:	bf58      	it	pl
 800b8f8:	eba9 0101 	subpl.w	r1, r9, r1
 800b8fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b900:	bf58      	it	pl
 800b902:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b906:	6022      	str	r2, [r4, #0]
 800b908:	f04f 0900 	mov.w	r9, #0
 800b90c:	e78a      	b.n	800b824 <_scanf_float+0x188>
 800b90e:	f04f 0a03 	mov.w	sl, #3
 800b912:	e787      	b.n	800b824 <_scanf_float+0x188>
 800b914:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b918:	4639      	mov	r1, r7
 800b91a:	4640      	mov	r0, r8
 800b91c:	4798      	blx	r3
 800b91e:	2800      	cmp	r0, #0
 800b920:	f43f aedf 	beq.w	800b6e2 <_scanf_float+0x46>
 800b924:	e6ea      	b.n	800b6fc <_scanf_float+0x60>
 800b926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b92e:	463a      	mov	r2, r7
 800b930:	4640      	mov	r0, r8
 800b932:	4798      	blx	r3
 800b934:	6923      	ldr	r3, [r4, #16]
 800b936:	3b01      	subs	r3, #1
 800b938:	6123      	str	r3, [r4, #16]
 800b93a:	e6ec      	b.n	800b716 <_scanf_float+0x7a>
 800b93c:	1e6b      	subs	r3, r5, #1
 800b93e:	2b06      	cmp	r3, #6
 800b940:	d825      	bhi.n	800b98e <_scanf_float+0x2f2>
 800b942:	2d02      	cmp	r5, #2
 800b944:	d836      	bhi.n	800b9b4 <_scanf_float+0x318>
 800b946:	455e      	cmp	r6, fp
 800b948:	f67f aee8 	bls.w	800b71c <_scanf_float+0x80>
 800b94c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b950:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b954:	463a      	mov	r2, r7
 800b956:	4640      	mov	r0, r8
 800b958:	4798      	blx	r3
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	3b01      	subs	r3, #1
 800b95e:	6123      	str	r3, [r4, #16]
 800b960:	e7f1      	b.n	800b946 <_scanf_float+0x2aa>
 800b962:	9802      	ldr	r0, [sp, #8]
 800b964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b968:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b96c:	9002      	str	r0, [sp, #8]
 800b96e:	463a      	mov	r2, r7
 800b970:	4640      	mov	r0, r8
 800b972:	4798      	blx	r3
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b97e:	fa5f fa8a 	uxtb.w	sl, sl
 800b982:	f1ba 0f02 	cmp.w	sl, #2
 800b986:	d1ec      	bne.n	800b962 <_scanf_float+0x2c6>
 800b988:	3d03      	subs	r5, #3
 800b98a:	b2ed      	uxtb	r5, r5
 800b98c:	1b76      	subs	r6, r6, r5
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	05da      	lsls	r2, r3, #23
 800b992:	d52f      	bpl.n	800b9f4 <_scanf_float+0x358>
 800b994:	055b      	lsls	r3, r3, #21
 800b996:	d510      	bpl.n	800b9ba <_scanf_float+0x31e>
 800b998:	455e      	cmp	r6, fp
 800b99a:	f67f aebf 	bls.w	800b71c <_scanf_float+0x80>
 800b99e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	4798      	blx	r3
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	6123      	str	r3, [r4, #16]
 800b9b2:	e7f1      	b.n	800b998 <_scanf_float+0x2fc>
 800b9b4:	46aa      	mov	sl, r5
 800b9b6:	9602      	str	r6, [sp, #8]
 800b9b8:	e7df      	b.n	800b97a <_scanf_float+0x2de>
 800b9ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b9be:	6923      	ldr	r3, [r4, #16]
 800b9c0:	2965      	cmp	r1, #101	; 0x65
 800b9c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b9ca:	6123      	str	r3, [r4, #16]
 800b9cc:	d00c      	beq.n	800b9e8 <_scanf_float+0x34c>
 800b9ce:	2945      	cmp	r1, #69	; 0x45
 800b9d0:	d00a      	beq.n	800b9e8 <_scanf_float+0x34c>
 800b9d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4798      	blx	r3
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	1eb5      	subs	r5, r6, #2
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9ec:	463a      	mov	r2, r7
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	4798      	blx	r3
 800b9f2:	462e      	mov	r6, r5
 800b9f4:	6825      	ldr	r5, [r4, #0]
 800b9f6:	f015 0510 	ands.w	r5, r5, #16
 800b9fa:	d158      	bne.n	800baae <_scanf_float+0x412>
 800b9fc:	7035      	strb	r5, [r6, #0]
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba08:	d11c      	bne.n	800ba44 <_scanf_float+0x3a8>
 800ba0a:	9b01      	ldr	r3, [sp, #4]
 800ba0c:	454b      	cmp	r3, r9
 800ba0e:	eba3 0209 	sub.w	r2, r3, r9
 800ba12:	d124      	bne.n	800ba5e <_scanf_float+0x3c2>
 800ba14:	2200      	movs	r2, #0
 800ba16:	4659      	mov	r1, fp
 800ba18:	4640      	mov	r0, r8
 800ba1a:	f7ff f939 	bl	800ac90 <_strtod_r>
 800ba1e:	9b03      	ldr	r3, [sp, #12]
 800ba20:	6821      	ldr	r1, [r4, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f011 0f02 	tst.w	r1, #2
 800ba28:	ec57 6b10 	vmov	r6, r7, d0
 800ba2c:	f103 0204 	add.w	r2, r3, #4
 800ba30:	d020      	beq.n	800ba74 <_scanf_float+0x3d8>
 800ba32:	9903      	ldr	r1, [sp, #12]
 800ba34:	600a      	str	r2, [r1, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	e9c3 6700 	strd	r6, r7, [r3]
 800ba3c:	68e3      	ldr	r3, [r4, #12]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	60e3      	str	r3, [r4, #12]
 800ba42:	e66c      	b.n	800b71e <_scanf_float+0x82>
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0e4      	beq.n	800ba14 <_scanf_float+0x378>
 800ba4a:	9905      	ldr	r1, [sp, #20]
 800ba4c:	230a      	movs	r3, #10
 800ba4e:	462a      	mov	r2, r5
 800ba50:	3101      	adds	r1, #1
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff f9b0 	bl	800adb8 <_strtol_r>
 800ba58:	9b04      	ldr	r3, [sp, #16]
 800ba5a:	9e05      	ldr	r6, [sp, #20]
 800ba5c:	1ac2      	subs	r2, r0, r3
 800ba5e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ba62:	429e      	cmp	r6, r3
 800ba64:	bf28      	it	cs
 800ba66:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ba6a:	4912      	ldr	r1, [pc, #72]	; (800bab4 <_scanf_float+0x418>)
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f000 f8e7 	bl	800bc40 <siprintf>
 800ba72:	e7cf      	b.n	800ba14 <_scanf_float+0x378>
 800ba74:	f011 0f04 	tst.w	r1, #4
 800ba78:	9903      	ldr	r1, [sp, #12]
 800ba7a:	600a      	str	r2, [r1, #0]
 800ba7c:	d1db      	bne.n	800ba36 <_scanf_float+0x39a>
 800ba7e:	f8d3 8000 	ldr.w	r8, [r3]
 800ba82:	ee10 2a10 	vmov	r2, s0
 800ba86:	ee10 0a10 	vmov	r0, s0
 800ba8a:	463b      	mov	r3, r7
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f5 f84d 	bl	8000b2c <__aeabi_dcmpun>
 800ba92:	b128      	cbz	r0, 800baa0 <_scanf_float+0x404>
 800ba94:	4808      	ldr	r0, [pc, #32]	; (800bab8 <_scanf_float+0x41c>)
 800ba96:	f000 faa3 	bl	800bfe0 <nanf>
 800ba9a:	ed88 0a00 	vstr	s0, [r8]
 800ba9e:	e7cd      	b.n	800ba3c <_scanf_float+0x3a0>
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f5 f8a0 	bl	8000be8 <__aeabi_d2f>
 800baa8:	f8c8 0000 	str.w	r0, [r8]
 800baac:	e7c6      	b.n	800ba3c <_scanf_float+0x3a0>
 800baae:	2500      	movs	r5, #0
 800bab0:	e635      	b.n	800b71e <_scanf_float+0x82>
 800bab2:	bf00      	nop
 800bab4:	0800fd9d 	.word	0x0800fd9d
 800bab8:	0800fe56 	.word	0x0800fe56

0800babc <std>:
 800babc:	2300      	movs	r3, #0
 800babe:	b510      	push	{r4, lr}
 800bac0:	4604      	mov	r4, r0
 800bac2:	e9c0 3300 	strd	r3, r3, [r0]
 800bac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baca:	6083      	str	r3, [r0, #8]
 800bacc:	8181      	strh	r1, [r0, #12]
 800bace:	6643      	str	r3, [r0, #100]	; 0x64
 800bad0:	81c2      	strh	r2, [r0, #14]
 800bad2:	6183      	str	r3, [r0, #24]
 800bad4:	4619      	mov	r1, r3
 800bad6:	2208      	movs	r2, #8
 800bad8:	305c      	adds	r0, #92	; 0x5c
 800bada:	f000 f914 	bl	800bd06 <memset>
 800bade:	4b0d      	ldr	r3, [pc, #52]	; (800bb14 <std+0x58>)
 800bae0:	6263      	str	r3, [r4, #36]	; 0x24
 800bae2:	4b0d      	ldr	r3, [pc, #52]	; (800bb18 <std+0x5c>)
 800bae4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bae6:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <std+0x60>)
 800bae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baea:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <std+0x64>)
 800baec:	6323      	str	r3, [r4, #48]	; 0x30
 800baee:	4b0d      	ldr	r3, [pc, #52]	; (800bb24 <std+0x68>)
 800baf0:	6224      	str	r4, [r4, #32]
 800baf2:	429c      	cmp	r4, r3
 800baf4:	d006      	beq.n	800bb04 <std+0x48>
 800baf6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bafa:	4294      	cmp	r4, r2
 800bafc:	d002      	beq.n	800bb04 <std+0x48>
 800bafe:	33d0      	adds	r3, #208	; 0xd0
 800bb00:	429c      	cmp	r4, r3
 800bb02:	d105      	bne.n	800bb10 <std+0x54>
 800bb04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb0c:	f000 ba4c 	b.w	800bfa8 <__retarget_lock_init_recursive>
 800bb10:	bd10      	pop	{r4, pc}
 800bb12:	bf00      	nop
 800bb14:	0800bc81 	.word	0x0800bc81
 800bb18:	0800bca3 	.word	0x0800bca3
 800bb1c:	0800bcdb 	.word	0x0800bcdb
 800bb20:	0800bcff 	.word	0x0800bcff
 800bb24:	20004700 	.word	0x20004700

0800bb28 <stdio_exit_handler>:
 800bb28:	4a02      	ldr	r2, [pc, #8]	; (800bb34 <stdio_exit_handler+0xc>)
 800bb2a:	4903      	ldr	r1, [pc, #12]	; (800bb38 <stdio_exit_handler+0x10>)
 800bb2c:	4803      	ldr	r0, [pc, #12]	; (800bb3c <stdio_exit_handler+0x14>)
 800bb2e:	f000 b869 	b.w	800bc04 <_fwalk_sglue>
 800bb32:	bf00      	nop
 800bb34:	20000414 	.word	0x20000414
 800bb38:	0800e1b9 	.word	0x0800e1b9
 800bb3c:	2000058c 	.word	0x2000058c

0800bb40 <cleanup_stdio>:
 800bb40:	6841      	ldr	r1, [r0, #4]
 800bb42:	4b0c      	ldr	r3, [pc, #48]	; (800bb74 <cleanup_stdio+0x34>)
 800bb44:	4299      	cmp	r1, r3
 800bb46:	b510      	push	{r4, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	d001      	beq.n	800bb50 <cleanup_stdio+0x10>
 800bb4c:	f002 fb34 	bl	800e1b8 <_fflush_r>
 800bb50:	68a1      	ldr	r1, [r4, #8]
 800bb52:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <cleanup_stdio+0x38>)
 800bb54:	4299      	cmp	r1, r3
 800bb56:	d002      	beq.n	800bb5e <cleanup_stdio+0x1e>
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f002 fb2d 	bl	800e1b8 <_fflush_r>
 800bb5e:	68e1      	ldr	r1, [r4, #12]
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <cleanup_stdio+0x3c>)
 800bb62:	4299      	cmp	r1, r3
 800bb64:	d004      	beq.n	800bb70 <cleanup_stdio+0x30>
 800bb66:	4620      	mov	r0, r4
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f002 bb24 	b.w	800e1b8 <_fflush_r>
 800bb70:	bd10      	pop	{r4, pc}
 800bb72:	bf00      	nop
 800bb74:	20004700 	.word	0x20004700
 800bb78:	20004768 	.word	0x20004768
 800bb7c:	200047d0 	.word	0x200047d0

0800bb80 <global_stdio_init.part.0>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <global_stdio_init.part.0+0x30>)
 800bb84:	4c0b      	ldr	r4, [pc, #44]	; (800bbb4 <global_stdio_init.part.0+0x34>)
 800bb86:	4a0c      	ldr	r2, [pc, #48]	; (800bbb8 <global_stdio_init.part.0+0x38>)
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2104      	movs	r1, #4
 800bb90:	f7ff ff94 	bl	800babc <std>
 800bb94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bb98:	2201      	movs	r2, #1
 800bb9a:	2109      	movs	r1, #9
 800bb9c:	f7ff ff8e 	bl	800babc <std>
 800bba0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bba4:	2202      	movs	r2, #2
 800bba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbaa:	2112      	movs	r1, #18
 800bbac:	f7ff bf86 	b.w	800babc <std>
 800bbb0:	20004838 	.word	0x20004838
 800bbb4:	20004700 	.word	0x20004700
 800bbb8:	0800bb29 	.word	0x0800bb29

0800bbbc <__sfp_lock_acquire>:
 800bbbc:	4801      	ldr	r0, [pc, #4]	; (800bbc4 <__sfp_lock_acquire+0x8>)
 800bbbe:	f000 b9f4 	b.w	800bfaa <__retarget_lock_acquire_recursive>
 800bbc2:	bf00      	nop
 800bbc4:	20004841 	.word	0x20004841

0800bbc8 <__sfp_lock_release>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	; (800bbd0 <__sfp_lock_release+0x8>)
 800bbca:	f000 b9ef 	b.w	800bfac <__retarget_lock_release_recursive>
 800bbce:	bf00      	nop
 800bbd0:	20004841 	.word	0x20004841

0800bbd4 <__sinit>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	f7ff fff0 	bl	800bbbc <__sfp_lock_acquire>
 800bbdc:	6a23      	ldr	r3, [r4, #32]
 800bbde:	b11b      	cbz	r3, 800bbe8 <__sinit+0x14>
 800bbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbe4:	f7ff bff0 	b.w	800bbc8 <__sfp_lock_release>
 800bbe8:	4b04      	ldr	r3, [pc, #16]	; (800bbfc <__sinit+0x28>)
 800bbea:	6223      	str	r3, [r4, #32]
 800bbec:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <__sinit+0x2c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d1f5      	bne.n	800bbe0 <__sinit+0xc>
 800bbf4:	f7ff ffc4 	bl	800bb80 <global_stdio_init.part.0>
 800bbf8:	e7f2      	b.n	800bbe0 <__sinit+0xc>
 800bbfa:	bf00      	nop
 800bbfc:	0800bb41 	.word	0x0800bb41
 800bc00:	20004838 	.word	0x20004838

0800bc04 <_fwalk_sglue>:
 800bc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc08:	4607      	mov	r7, r0
 800bc0a:	4688      	mov	r8, r1
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	2600      	movs	r6, #0
 800bc10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc14:	f1b9 0901 	subs.w	r9, r9, #1
 800bc18:	d505      	bpl.n	800bc26 <_fwalk_sglue+0x22>
 800bc1a:	6824      	ldr	r4, [r4, #0]
 800bc1c:	2c00      	cmp	r4, #0
 800bc1e:	d1f7      	bne.n	800bc10 <_fwalk_sglue+0xc>
 800bc20:	4630      	mov	r0, r6
 800bc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc26:	89ab      	ldrh	r3, [r5, #12]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d907      	bls.n	800bc3c <_fwalk_sglue+0x38>
 800bc2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc30:	3301      	adds	r3, #1
 800bc32:	d003      	beq.n	800bc3c <_fwalk_sglue+0x38>
 800bc34:	4629      	mov	r1, r5
 800bc36:	4638      	mov	r0, r7
 800bc38:	47c0      	blx	r8
 800bc3a:	4306      	orrs	r6, r0
 800bc3c:	3568      	adds	r5, #104	; 0x68
 800bc3e:	e7e9      	b.n	800bc14 <_fwalk_sglue+0x10>

0800bc40 <siprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b500      	push	{lr}
 800bc44:	b09c      	sub	sp, #112	; 0x70
 800bc46:	ab1d      	add	r3, sp, #116	; 0x74
 800bc48:	9002      	str	r0, [sp, #8]
 800bc4a:	9006      	str	r0, [sp, #24]
 800bc4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc50:	4809      	ldr	r0, [pc, #36]	; (800bc78 <siprintf+0x38>)
 800bc52:	9107      	str	r1, [sp, #28]
 800bc54:	9104      	str	r1, [sp, #16]
 800bc56:	4909      	ldr	r1, [pc, #36]	; (800bc7c <siprintf+0x3c>)
 800bc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5c:	9105      	str	r1, [sp, #20]
 800bc5e:	6800      	ldr	r0, [r0, #0]
 800bc60:	9301      	str	r3, [sp, #4]
 800bc62:	a902      	add	r1, sp, #8
 800bc64:	f002 f924 	bl	800deb0 <_svfiprintf_r>
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	701a      	strb	r2, [r3, #0]
 800bc6e:	b01c      	add	sp, #112	; 0x70
 800bc70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc74:	b003      	add	sp, #12
 800bc76:	4770      	bx	lr
 800bc78:	200005d8 	.word	0x200005d8
 800bc7c:	ffff0208 	.word	0xffff0208

0800bc80 <__sread>:
 800bc80:	b510      	push	{r4, lr}
 800bc82:	460c      	mov	r4, r1
 800bc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc88:	f000 f930 	bl	800beec <_read_r>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	bfab      	itete	ge
 800bc90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc92:	89a3      	ldrhlt	r3, [r4, #12]
 800bc94:	181b      	addge	r3, r3, r0
 800bc96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc9a:	bfac      	ite	ge
 800bc9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc9e:	81a3      	strhlt	r3, [r4, #12]
 800bca0:	bd10      	pop	{r4, pc}

0800bca2 <__swrite>:
 800bca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	461f      	mov	r7, r3
 800bca8:	898b      	ldrh	r3, [r1, #12]
 800bcaa:	05db      	lsls	r3, r3, #23
 800bcac:	4605      	mov	r5, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	4616      	mov	r6, r2
 800bcb2:	d505      	bpl.n	800bcc0 <__swrite+0x1e>
 800bcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb8:	2302      	movs	r3, #2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f000 f904 	bl	800bec8 <_lseek_r>
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcca:	81a3      	strh	r3, [r4, #12]
 800bccc:	4632      	mov	r2, r6
 800bcce:	463b      	mov	r3, r7
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd6:	f000 b92b 	b.w	800bf30 <_write_r>

0800bcda <__sseek>:
 800bcda:	b510      	push	{r4, lr}
 800bcdc:	460c      	mov	r4, r1
 800bcde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce2:	f000 f8f1 	bl	800bec8 <_lseek_r>
 800bce6:	1c43      	adds	r3, r0, #1
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	bf15      	itete	ne
 800bcec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bcf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bcf6:	81a3      	strheq	r3, [r4, #12]
 800bcf8:	bf18      	it	ne
 800bcfa:	81a3      	strhne	r3, [r4, #12]
 800bcfc:	bd10      	pop	{r4, pc}

0800bcfe <__sclose>:
 800bcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd02:	f000 b87b 	b.w	800bdfc <_close_r>

0800bd06 <memset>:
 800bd06:	4402      	add	r2, r0
 800bd08:	4603      	mov	r3, r0
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d100      	bne.n	800bd10 <memset+0xa>
 800bd0e:	4770      	bx	lr
 800bd10:	f803 1b01 	strb.w	r1, [r3], #1
 800bd14:	e7f9      	b.n	800bd0a <memset+0x4>

0800bd16 <strncmp>:
 800bd16:	b510      	push	{r4, lr}
 800bd18:	b16a      	cbz	r2, 800bd36 <strncmp+0x20>
 800bd1a:	3901      	subs	r1, #1
 800bd1c:	1884      	adds	r4, r0, r2
 800bd1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd22:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d103      	bne.n	800bd32 <strncmp+0x1c>
 800bd2a:	42a0      	cmp	r0, r4
 800bd2c:	d001      	beq.n	800bd32 <strncmp+0x1c>
 800bd2e:	2a00      	cmp	r2, #0
 800bd30:	d1f5      	bne.n	800bd1e <strncmp+0x8>
 800bd32:	1ad0      	subs	r0, r2, r3
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	4610      	mov	r0, r2
 800bd38:	e7fc      	b.n	800bd34 <strncmp+0x1e>
	...

0800bd3c <strtok>:
 800bd3c:	4b16      	ldr	r3, [pc, #88]	; (800bd98 <strtok+0x5c>)
 800bd3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd40:	681e      	ldr	r6, [r3, #0]
 800bd42:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800bd44:	4605      	mov	r5, r0
 800bd46:	b9fc      	cbnz	r4, 800bd88 <strtok+0x4c>
 800bd48:	2050      	movs	r0, #80	; 0x50
 800bd4a:	9101      	str	r1, [sp, #4]
 800bd4c:	f7fe f8d8 	bl	8009f00 <malloc>
 800bd50:	9901      	ldr	r1, [sp, #4]
 800bd52:	6470      	str	r0, [r6, #68]	; 0x44
 800bd54:	4602      	mov	r2, r0
 800bd56:	b920      	cbnz	r0, 800bd62 <strtok+0x26>
 800bd58:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <strtok+0x60>)
 800bd5a:	4811      	ldr	r0, [pc, #68]	; (800bda0 <strtok+0x64>)
 800bd5c:	215b      	movs	r1, #91	; 0x5b
 800bd5e:	f000 f945 	bl	800bfec <__assert_func>
 800bd62:	e9c0 4400 	strd	r4, r4, [r0]
 800bd66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bd6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bd6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bd72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bd76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bd7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bd7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bd82:	6184      	str	r4, [r0, #24]
 800bd84:	7704      	strb	r4, [r0, #28]
 800bd86:	6244      	str	r4, [r0, #36]	; 0x24
 800bd88:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	b002      	add	sp, #8
 800bd90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd94:	f000 b806 	b.w	800bda4 <__strtok_r>
 800bd98:	200005d8 	.word	0x200005d8
 800bd9c:	0800fda2 	.word	0x0800fda2
 800bda0:	0800fdb9 	.word	0x0800fdb9

0800bda4 <__strtok_r>:
 800bda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bda6:	b908      	cbnz	r0, 800bdac <__strtok_r+0x8>
 800bda8:	6810      	ldr	r0, [r2, #0]
 800bdaa:	b188      	cbz	r0, 800bdd0 <__strtok_r+0x2c>
 800bdac:	4604      	mov	r4, r0
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bdba:	b91e      	cbnz	r6, 800bdc4 <__strtok_r+0x20>
 800bdbc:	b965      	cbnz	r5, 800bdd8 <__strtok_r+0x34>
 800bdbe:	6015      	str	r5, [r2, #0]
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	e005      	b.n	800bdd0 <__strtok_r+0x2c>
 800bdc4:	42b5      	cmp	r5, r6
 800bdc6:	d1f6      	bne.n	800bdb6 <__strtok_r+0x12>
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f0      	bne.n	800bdae <__strtok_r+0xa>
 800bdcc:	6014      	str	r4, [r2, #0]
 800bdce:	7003      	strb	r3, [r0, #0]
 800bdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdd2:	461c      	mov	r4, r3
 800bdd4:	e00c      	b.n	800bdf0 <__strtok_r+0x4c>
 800bdd6:	b915      	cbnz	r5, 800bdde <__strtok_r+0x3a>
 800bdd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bddc:	460e      	mov	r6, r1
 800bdde:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bde2:	42ab      	cmp	r3, r5
 800bde4:	d1f7      	bne.n	800bdd6 <__strtok_r+0x32>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0f3      	beq.n	800bdd2 <__strtok_r+0x2e>
 800bdea:	2300      	movs	r3, #0
 800bdec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bdf0:	6014      	str	r4, [r2, #0]
 800bdf2:	e7ed      	b.n	800bdd0 <__strtok_r+0x2c>

0800bdf4 <_localeconv_r>:
 800bdf4:	4800      	ldr	r0, [pc, #0]	; (800bdf8 <_localeconv_r+0x4>)
 800bdf6:	4770      	bx	lr
 800bdf8:	20000510 	.word	0x20000510

0800bdfc <_close_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d06      	ldr	r5, [pc, #24]	; (800be18 <_close_r+0x1c>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	602b      	str	r3, [r5, #0]
 800be08:	f7f6 fdb7 	bl	800297a <_close>
 800be0c:	1c43      	adds	r3, r0, #1
 800be0e:	d102      	bne.n	800be16 <_close_r+0x1a>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	b103      	cbz	r3, 800be16 <_close_r+0x1a>
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	bd38      	pop	{r3, r4, r5, pc}
 800be18:	2000483c 	.word	0x2000483c

0800be1c <_reclaim_reent>:
 800be1c:	4b29      	ldr	r3, [pc, #164]	; (800bec4 <_reclaim_reent+0xa8>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4283      	cmp	r3, r0
 800be22:	b570      	push	{r4, r5, r6, lr}
 800be24:	4604      	mov	r4, r0
 800be26:	d04b      	beq.n	800bec0 <_reclaim_reent+0xa4>
 800be28:	69c3      	ldr	r3, [r0, #28]
 800be2a:	b143      	cbz	r3, 800be3e <_reclaim_reent+0x22>
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d144      	bne.n	800bebc <_reclaim_reent+0xa0>
 800be32:	69e3      	ldr	r3, [r4, #28]
 800be34:	6819      	ldr	r1, [r3, #0]
 800be36:	b111      	cbz	r1, 800be3e <_reclaim_reent+0x22>
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 ff6f 	bl	800cd1c <_free_r>
 800be3e:	6961      	ldr	r1, [r4, #20]
 800be40:	b111      	cbz	r1, 800be48 <_reclaim_reent+0x2c>
 800be42:	4620      	mov	r0, r4
 800be44:	f000 ff6a 	bl	800cd1c <_free_r>
 800be48:	69e1      	ldr	r1, [r4, #28]
 800be4a:	b111      	cbz	r1, 800be52 <_reclaim_reent+0x36>
 800be4c:	4620      	mov	r0, r4
 800be4e:	f000 ff65 	bl	800cd1c <_free_r>
 800be52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be54:	b111      	cbz	r1, 800be5c <_reclaim_reent+0x40>
 800be56:	4620      	mov	r0, r4
 800be58:	f000 ff60 	bl	800cd1c <_free_r>
 800be5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be5e:	b111      	cbz	r1, 800be66 <_reclaim_reent+0x4a>
 800be60:	4620      	mov	r0, r4
 800be62:	f000 ff5b 	bl	800cd1c <_free_r>
 800be66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be68:	b111      	cbz	r1, 800be70 <_reclaim_reent+0x54>
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 ff56 	bl	800cd1c <_free_r>
 800be70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be72:	b111      	cbz	r1, 800be7a <_reclaim_reent+0x5e>
 800be74:	4620      	mov	r0, r4
 800be76:	f000 ff51 	bl	800cd1c <_free_r>
 800be7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be7c:	b111      	cbz	r1, 800be84 <_reclaim_reent+0x68>
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 ff4c 	bl	800cd1c <_free_r>
 800be84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be86:	b111      	cbz	r1, 800be8e <_reclaim_reent+0x72>
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 ff47 	bl	800cd1c <_free_r>
 800be8e:	6a23      	ldr	r3, [r4, #32]
 800be90:	b1b3      	cbz	r3, 800bec0 <_reclaim_reent+0xa4>
 800be92:	4620      	mov	r0, r4
 800be94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be98:	4718      	bx	r3
 800be9a:	5949      	ldr	r1, [r1, r5]
 800be9c:	b941      	cbnz	r1, 800beb0 <_reclaim_reent+0x94>
 800be9e:	3504      	adds	r5, #4
 800bea0:	69e3      	ldr	r3, [r4, #28]
 800bea2:	2d80      	cmp	r5, #128	; 0x80
 800bea4:	68d9      	ldr	r1, [r3, #12]
 800bea6:	d1f8      	bne.n	800be9a <_reclaim_reent+0x7e>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 ff37 	bl	800cd1c <_free_r>
 800beae:	e7c0      	b.n	800be32 <_reclaim_reent+0x16>
 800beb0:	680e      	ldr	r6, [r1, #0]
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 ff32 	bl	800cd1c <_free_r>
 800beb8:	4631      	mov	r1, r6
 800beba:	e7ef      	b.n	800be9c <_reclaim_reent+0x80>
 800bebc:	2500      	movs	r5, #0
 800bebe:	e7ef      	b.n	800bea0 <_reclaim_reent+0x84>
 800bec0:	bd70      	pop	{r4, r5, r6, pc}
 800bec2:	bf00      	nop
 800bec4:	200005d8 	.word	0x200005d8

0800bec8 <_lseek_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	; (800bee8 <_lseek_r+0x20>)
 800becc:	4604      	mov	r4, r0
 800bece:	4608      	mov	r0, r1
 800bed0:	4611      	mov	r1, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	f7f6 fd76 	bl	80029c8 <_lseek>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_lseek_r+0x1e>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_lseek_r+0x1e>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	2000483c 	.word	0x2000483c

0800beec <_read_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	; (800bf0c <_read_r+0x20>)
 800bef0:	4604      	mov	r4, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7f6 fd04 	bl	8002908 <_read>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_read_r+0x1e>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_read_r+0x1e>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	2000483c 	.word	0x2000483c

0800bf10 <_sbrk_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4d06      	ldr	r5, [pc, #24]	; (800bf2c <_sbrk_r+0x1c>)
 800bf14:	2300      	movs	r3, #0
 800bf16:	4604      	mov	r4, r0
 800bf18:	4608      	mov	r0, r1
 800bf1a:	602b      	str	r3, [r5, #0]
 800bf1c:	f7f6 fd62 	bl	80029e4 <_sbrk>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_sbrk_r+0x1a>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_sbrk_r+0x1a>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	2000483c 	.word	0x2000483c

0800bf30 <_write_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d07      	ldr	r5, [pc, #28]	; (800bf50 <_write_r+0x20>)
 800bf34:	4604      	mov	r4, r0
 800bf36:	4608      	mov	r0, r1
 800bf38:	4611      	mov	r1, r2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	602a      	str	r2, [r5, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f7f6 fcff 	bl	8002942 <_write>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_write_r+0x1e>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_write_r+0x1e>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	2000483c 	.word	0x2000483c

0800bf54 <__errno>:
 800bf54:	4b01      	ldr	r3, [pc, #4]	; (800bf5c <__errno+0x8>)
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	200005d8 	.word	0x200005d8

0800bf60 <__libc_init_array>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4d0d      	ldr	r5, [pc, #52]	; (800bf98 <__libc_init_array+0x38>)
 800bf64:	4c0d      	ldr	r4, [pc, #52]	; (800bf9c <__libc_init_array+0x3c>)
 800bf66:	1b64      	subs	r4, r4, r5
 800bf68:	10a4      	asrs	r4, r4, #2
 800bf6a:	2600      	movs	r6, #0
 800bf6c:	42a6      	cmp	r6, r4
 800bf6e:	d109      	bne.n	800bf84 <__libc_init_array+0x24>
 800bf70:	4d0b      	ldr	r5, [pc, #44]	; (800bfa0 <__libc_init_array+0x40>)
 800bf72:	4c0c      	ldr	r4, [pc, #48]	; (800bfa4 <__libc_init_array+0x44>)
 800bf74:	f003 fcf4 	bl	800f960 <_init>
 800bf78:	1b64      	subs	r4, r4, r5
 800bf7a:	10a4      	asrs	r4, r4, #2
 800bf7c:	2600      	movs	r6, #0
 800bf7e:	42a6      	cmp	r6, r4
 800bf80:	d105      	bne.n	800bf8e <__libc_init_array+0x2e>
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf88:	4798      	blx	r3
 800bf8a:	3601      	adds	r6, #1
 800bf8c:	e7ee      	b.n	800bf6c <__libc_init_array+0xc>
 800bf8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf92:	4798      	blx	r3
 800bf94:	3601      	adds	r6, #1
 800bf96:	e7f2      	b.n	800bf7e <__libc_init_array+0x1e>
 800bf98:	08010278 	.word	0x08010278
 800bf9c:	08010278 	.word	0x08010278
 800bfa0:	08010278 	.word	0x08010278
 800bfa4:	0801027c 	.word	0x0801027c

0800bfa8 <__retarget_lock_init_recursive>:
 800bfa8:	4770      	bx	lr

0800bfaa <__retarget_lock_acquire_recursive>:
 800bfaa:	4770      	bx	lr

0800bfac <__retarget_lock_release_recursive>:
 800bfac:	4770      	bx	lr

0800bfae <memcpy>:
 800bfae:	440a      	add	r2, r1
 800bfb0:	4291      	cmp	r1, r2
 800bfb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfb6:	d100      	bne.n	800bfba <memcpy+0xc>
 800bfb8:	4770      	bx	lr
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfc4:	4291      	cmp	r1, r2
 800bfc6:	d1f9      	bne.n	800bfbc <memcpy+0xe>
 800bfc8:	bd10      	pop	{r4, pc}
 800bfca:	0000      	movs	r0, r0
 800bfcc:	0000      	movs	r0, r0
	...

0800bfd0 <nan>:
 800bfd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bfd8 <nan+0x8>
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	00000000 	.word	0x00000000
 800bfdc:	7ff80000 	.word	0x7ff80000

0800bfe0 <nanf>:
 800bfe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfe8 <nanf+0x8>
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	7fc00000 	.word	0x7fc00000

0800bfec <__assert_func>:
 800bfec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfee:	4614      	mov	r4, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4b09      	ldr	r3, [pc, #36]	; (800c018 <__assert_func+0x2c>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4605      	mov	r5, r0
 800bff8:	68d8      	ldr	r0, [r3, #12]
 800bffa:	b14c      	cbz	r4, 800c010 <__assert_func+0x24>
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <__assert_func+0x30>)
 800bffe:	9100      	str	r1, [sp, #0]
 800c000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c004:	4906      	ldr	r1, [pc, #24]	; (800c020 <__assert_func+0x34>)
 800c006:	462b      	mov	r3, r5
 800c008:	f002 f8fe 	bl	800e208 <fiprintf>
 800c00c:	f002 f928 	bl	800e260 <abort>
 800c010:	4b04      	ldr	r3, [pc, #16]	; (800c024 <__assert_func+0x38>)
 800c012:	461c      	mov	r4, r3
 800c014:	e7f3      	b.n	800bffe <__assert_func+0x12>
 800c016:	bf00      	nop
 800c018:	200005d8 	.word	0x200005d8
 800c01c:	0800fe1b 	.word	0x0800fe1b
 800c020:	0800fe28 	.word	0x0800fe28
 800c024:	0800fe56 	.word	0x0800fe56

0800c028 <quorem>:
 800c028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	6903      	ldr	r3, [r0, #16]
 800c02e:	690c      	ldr	r4, [r1, #16]
 800c030:	42a3      	cmp	r3, r4
 800c032:	4607      	mov	r7, r0
 800c034:	db7e      	blt.n	800c134 <quorem+0x10c>
 800c036:	3c01      	subs	r4, #1
 800c038:	f101 0814 	add.w	r8, r1, #20
 800c03c:	f100 0514 	add.w	r5, r0, #20
 800c040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c044:	9301      	str	r3, [sp, #4]
 800c046:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c04a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c04e:	3301      	adds	r3, #1
 800c050:	429a      	cmp	r2, r3
 800c052:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c056:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c05a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c05e:	d331      	bcc.n	800c0c4 <quorem+0x9c>
 800c060:	f04f 0e00 	mov.w	lr, #0
 800c064:	4640      	mov	r0, r8
 800c066:	46ac      	mov	ip, r5
 800c068:	46f2      	mov	sl, lr
 800c06a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c06e:	b293      	uxth	r3, r2
 800c070:	fb06 e303 	mla	r3, r6, r3, lr
 800c074:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c078:	0c1a      	lsrs	r2, r3, #16
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	ebaa 0303 	sub.w	r3, sl, r3
 800c080:	f8dc a000 	ldr.w	sl, [ip]
 800c084:	fa13 f38a 	uxtah	r3, r3, sl
 800c088:	fb06 220e 	mla	r2, r6, lr, r2
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c094:	b292      	uxth	r2, r2
 800c096:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c09a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c09e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c0a2:	4581      	cmp	r9, r0
 800c0a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0a8:	f84c 3b04 	str.w	r3, [ip], #4
 800c0ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c0b0:	d2db      	bcs.n	800c06a <quorem+0x42>
 800c0b2:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0b6:	b92b      	cbnz	r3, 800c0c4 <quorem+0x9c>
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	3b04      	subs	r3, #4
 800c0bc:	429d      	cmp	r5, r3
 800c0be:	461a      	mov	r2, r3
 800c0c0:	d32c      	bcc.n	800c11c <quorem+0xf4>
 800c0c2:	613c      	str	r4, [r7, #16]
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f001 fca5 	bl	800da14 <__mcmp>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	db22      	blt.n	800c114 <quorem+0xec>
 800c0ce:	3601      	adds	r6, #1
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0d8:	f8d1 c000 	ldr.w	ip, [r1]
 800c0dc:	b293      	uxth	r3, r2
 800c0de:	1ac3      	subs	r3, r0, r3
 800c0e0:	0c12      	lsrs	r2, r2, #16
 800c0e2:	fa13 f38c 	uxtah	r3, r3, ip
 800c0e6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0f4:	45c1      	cmp	r9, r8
 800c0f6:	f841 3b04 	str.w	r3, [r1], #4
 800c0fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0fe:	d2e9      	bcs.n	800c0d4 <quorem+0xac>
 800c100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c104:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c108:	b922      	cbnz	r2, 800c114 <quorem+0xec>
 800c10a:	3b04      	subs	r3, #4
 800c10c:	429d      	cmp	r5, r3
 800c10e:	461a      	mov	r2, r3
 800c110:	d30a      	bcc.n	800c128 <quorem+0x100>
 800c112:	613c      	str	r4, [r7, #16]
 800c114:	4630      	mov	r0, r6
 800c116:	b003      	add	sp, #12
 800c118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	6812      	ldr	r2, [r2, #0]
 800c11e:	3b04      	subs	r3, #4
 800c120:	2a00      	cmp	r2, #0
 800c122:	d1ce      	bne.n	800c0c2 <quorem+0x9a>
 800c124:	3c01      	subs	r4, #1
 800c126:	e7c9      	b.n	800c0bc <quorem+0x94>
 800c128:	6812      	ldr	r2, [r2, #0]
 800c12a:	3b04      	subs	r3, #4
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d1f0      	bne.n	800c112 <quorem+0xea>
 800c130:	3c01      	subs	r4, #1
 800c132:	e7eb      	b.n	800c10c <quorem+0xe4>
 800c134:	2000      	movs	r0, #0
 800c136:	e7ee      	b.n	800c116 <quorem+0xee>

0800c138 <_dtoa_r>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	ed2d 8b04 	vpush	{d8-d9}
 800c140:	69c5      	ldr	r5, [r0, #28]
 800c142:	b093      	sub	sp, #76	; 0x4c
 800c144:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c148:	ec57 6b10 	vmov	r6, r7, d0
 800c14c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c150:	9107      	str	r1, [sp, #28]
 800c152:	4604      	mov	r4, r0
 800c154:	920a      	str	r2, [sp, #40]	; 0x28
 800c156:	930d      	str	r3, [sp, #52]	; 0x34
 800c158:	b975      	cbnz	r5, 800c178 <_dtoa_r+0x40>
 800c15a:	2010      	movs	r0, #16
 800c15c:	f7fd fed0 	bl	8009f00 <malloc>
 800c160:	4602      	mov	r2, r0
 800c162:	61e0      	str	r0, [r4, #28]
 800c164:	b920      	cbnz	r0, 800c170 <_dtoa_r+0x38>
 800c166:	4bae      	ldr	r3, [pc, #696]	; (800c420 <_dtoa_r+0x2e8>)
 800c168:	21ef      	movs	r1, #239	; 0xef
 800c16a:	48ae      	ldr	r0, [pc, #696]	; (800c424 <_dtoa_r+0x2ec>)
 800c16c:	f7ff ff3e 	bl	800bfec <__assert_func>
 800c170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c174:	6005      	str	r5, [r0, #0]
 800c176:	60c5      	str	r5, [r0, #12]
 800c178:	69e3      	ldr	r3, [r4, #28]
 800c17a:	6819      	ldr	r1, [r3, #0]
 800c17c:	b151      	cbz	r1, 800c194 <_dtoa_r+0x5c>
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	604a      	str	r2, [r1, #4]
 800c182:	2301      	movs	r3, #1
 800c184:	4093      	lsls	r3, r2
 800c186:	608b      	str	r3, [r1, #8]
 800c188:	4620      	mov	r0, r4
 800c18a:	f001 f9bd 	bl	800d508 <_Bfree>
 800c18e:	69e3      	ldr	r3, [r4, #28]
 800c190:	2200      	movs	r2, #0
 800c192:	601a      	str	r2, [r3, #0]
 800c194:	1e3b      	subs	r3, r7, #0
 800c196:	bfbb      	ittet	lt
 800c198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c19c:	9303      	strlt	r3, [sp, #12]
 800c19e:	2300      	movge	r3, #0
 800c1a0:	2201      	movlt	r2, #1
 800c1a2:	bfac      	ite	ge
 800c1a4:	f8c8 3000 	strge.w	r3, [r8]
 800c1a8:	f8c8 2000 	strlt.w	r2, [r8]
 800c1ac:	4b9e      	ldr	r3, [pc, #632]	; (800c428 <_dtoa_r+0x2f0>)
 800c1ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c1b2:	ea33 0308 	bics.w	r3, r3, r8
 800c1b6:	d11b      	bne.n	800c1f0 <_dtoa_r+0xb8>
 800c1b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c1c4:	4333      	orrs	r3, r6
 800c1c6:	f000 8593 	beq.w	800ccf0 <_dtoa_r+0xbb8>
 800c1ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1cc:	b963      	cbnz	r3, 800c1e8 <_dtoa_r+0xb0>
 800c1ce:	4b97      	ldr	r3, [pc, #604]	; (800c42c <_dtoa_r+0x2f4>)
 800c1d0:	e027      	b.n	800c222 <_dtoa_r+0xea>
 800c1d2:	4b97      	ldr	r3, [pc, #604]	; (800c430 <_dtoa_r+0x2f8>)
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1da:	6013      	str	r3, [r2, #0]
 800c1dc:	9800      	ldr	r0, [sp, #0]
 800c1de:	b013      	add	sp, #76	; 0x4c
 800c1e0:	ecbd 8b04 	vpop	{d8-d9}
 800c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e8:	4b90      	ldr	r3, [pc, #576]	; (800c42c <_dtoa_r+0x2f4>)
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	3303      	adds	r3, #3
 800c1ee:	e7f3      	b.n	800c1d8 <_dtoa_r+0xa0>
 800c1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	ec51 0b17 	vmov	r0, r1, d7
 800c1fa:	eeb0 8a47 	vmov.f32	s16, s14
 800c1fe:	eef0 8a67 	vmov.f32	s17, s15
 800c202:	2300      	movs	r3, #0
 800c204:	f7f4 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 800c208:	4681      	mov	r9, r0
 800c20a:	b160      	cbz	r0, 800c226 <_dtoa_r+0xee>
 800c20c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c20e:	2301      	movs	r3, #1
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 8568 	beq.w	800ccea <_dtoa_r+0xbb2>
 800c21a:	4b86      	ldr	r3, [pc, #536]	; (800c434 <_dtoa_r+0x2fc>)
 800c21c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	3b01      	subs	r3, #1
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	e7da      	b.n	800c1dc <_dtoa_r+0xa4>
 800c226:	aa10      	add	r2, sp, #64	; 0x40
 800c228:	a911      	add	r1, sp, #68	; 0x44
 800c22a:	4620      	mov	r0, r4
 800c22c:	eeb0 0a48 	vmov.f32	s0, s16
 800c230:	eef0 0a68 	vmov.f32	s1, s17
 800c234:	f001 fd04 	bl	800dc40 <__d2b>
 800c238:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c23c:	4682      	mov	sl, r0
 800c23e:	2d00      	cmp	r5, #0
 800c240:	d07f      	beq.n	800c342 <_dtoa_r+0x20a>
 800c242:	ee18 3a90 	vmov	r3, s17
 800c246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c24a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c24e:	ec51 0b18 	vmov	r0, r1, d8
 800c252:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c25a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c25e:	4619      	mov	r1, r3
 800c260:	2200      	movs	r2, #0
 800c262:	4b75      	ldr	r3, [pc, #468]	; (800c438 <_dtoa_r+0x300>)
 800c264:	f7f4 f810 	bl	8000288 <__aeabi_dsub>
 800c268:	a367      	add	r3, pc, #412	; (adr r3, 800c408 <_dtoa_r+0x2d0>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 f9c3 	bl	80005f8 <__aeabi_dmul>
 800c272:	a367      	add	r3, pc, #412	; (adr r3, 800c410 <_dtoa_r+0x2d8>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 f808 	bl	800028c <__adddf3>
 800c27c:	4606      	mov	r6, r0
 800c27e:	4628      	mov	r0, r5
 800c280:	460f      	mov	r7, r1
 800c282:	f7f4 f94f 	bl	8000524 <__aeabi_i2d>
 800c286:	a364      	add	r3, pc, #400	; (adr r3, 800c418 <_dtoa_r+0x2e0>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f4 f9b4 	bl	80005f8 <__aeabi_dmul>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f3 fff8 	bl	800028c <__adddf3>
 800c29c:	4606      	mov	r6, r0
 800c29e:	460f      	mov	r7, r1
 800c2a0:	f7f4 fc5a 	bl	8000b58 <__aeabi_d2iz>
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4683      	mov	fp, r0
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	f7f4 fc15 	bl	8000adc <__aeabi_dcmplt>
 800c2b2:	b148      	cbz	r0, 800c2c8 <_dtoa_r+0x190>
 800c2b4:	4658      	mov	r0, fp
 800c2b6:	f7f4 f935 	bl	8000524 <__aeabi_i2d>
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	463b      	mov	r3, r7
 800c2be:	f7f4 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2c2:	b908      	cbnz	r0, 800c2c8 <_dtoa_r+0x190>
 800c2c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2c8:	f1bb 0f16 	cmp.w	fp, #22
 800c2cc:	d857      	bhi.n	800c37e <_dtoa_r+0x246>
 800c2ce:	4b5b      	ldr	r3, [pc, #364]	; (800c43c <_dtoa_r+0x304>)
 800c2d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	ec51 0b18 	vmov	r0, r1, d8
 800c2dc:	f7f4 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d04e      	beq.n	800c382 <_dtoa_r+0x24a>
 800c2e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ee:	1b5b      	subs	r3, r3, r5
 800c2f0:	1e5a      	subs	r2, r3, #1
 800c2f2:	bf45      	ittet	mi
 800c2f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2f8:	9305      	strmi	r3, [sp, #20]
 800c2fa:	2300      	movpl	r3, #0
 800c2fc:	2300      	movmi	r3, #0
 800c2fe:	9206      	str	r2, [sp, #24]
 800c300:	bf54      	ite	pl
 800c302:	9305      	strpl	r3, [sp, #20]
 800c304:	9306      	strmi	r3, [sp, #24]
 800c306:	f1bb 0f00 	cmp.w	fp, #0
 800c30a:	db3c      	blt.n	800c386 <_dtoa_r+0x24e>
 800c30c:	9b06      	ldr	r3, [sp, #24]
 800c30e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c312:	445b      	add	r3, fp
 800c314:	9306      	str	r3, [sp, #24]
 800c316:	2300      	movs	r3, #0
 800c318:	9308      	str	r3, [sp, #32]
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	2b09      	cmp	r3, #9
 800c31e:	d868      	bhi.n	800c3f2 <_dtoa_r+0x2ba>
 800c320:	2b05      	cmp	r3, #5
 800c322:	bfc4      	itt	gt
 800c324:	3b04      	subgt	r3, #4
 800c326:	9307      	strgt	r3, [sp, #28]
 800c328:	9b07      	ldr	r3, [sp, #28]
 800c32a:	f1a3 0302 	sub.w	r3, r3, #2
 800c32e:	bfcc      	ite	gt
 800c330:	2500      	movgt	r5, #0
 800c332:	2501      	movle	r5, #1
 800c334:	2b03      	cmp	r3, #3
 800c336:	f200 8085 	bhi.w	800c444 <_dtoa_r+0x30c>
 800c33a:	e8df f003 	tbb	[pc, r3]
 800c33e:	3b2e      	.short	0x3b2e
 800c340:	5839      	.short	0x5839
 800c342:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c346:	441d      	add	r5, r3
 800c348:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	bfc1      	itttt	gt
 800c350:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c354:	fa08 f803 	lslgt.w	r8, r8, r3
 800c358:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c35c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c360:	bfd6      	itet	le
 800c362:	f1c3 0320 	rsble	r3, r3, #32
 800c366:	ea48 0003 	orrgt.w	r0, r8, r3
 800c36a:	fa06 f003 	lslle.w	r0, r6, r3
 800c36e:	f7f4 f8c9 	bl	8000504 <__aeabi_ui2d>
 800c372:	2201      	movs	r2, #1
 800c374:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c378:	3d01      	subs	r5, #1
 800c37a:	920e      	str	r2, [sp, #56]	; 0x38
 800c37c:	e76f      	b.n	800c25e <_dtoa_r+0x126>
 800c37e:	2301      	movs	r3, #1
 800c380:	e7b3      	b.n	800c2ea <_dtoa_r+0x1b2>
 800c382:	900c      	str	r0, [sp, #48]	; 0x30
 800c384:	e7b2      	b.n	800c2ec <_dtoa_r+0x1b4>
 800c386:	9b05      	ldr	r3, [sp, #20]
 800c388:	eba3 030b 	sub.w	r3, r3, fp
 800c38c:	9305      	str	r3, [sp, #20]
 800c38e:	f1cb 0300 	rsb	r3, fp, #0
 800c392:	9308      	str	r3, [sp, #32]
 800c394:	2300      	movs	r3, #0
 800c396:	930b      	str	r3, [sp, #44]	; 0x2c
 800c398:	e7bf      	b.n	800c31a <_dtoa_r+0x1e2>
 800c39a:	2300      	movs	r3, #0
 800c39c:	9309      	str	r3, [sp, #36]	; 0x24
 800c39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dc52      	bgt.n	800c44a <_dtoa_r+0x312>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	9304      	str	r3, [sp, #16]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c3ae:	e00b      	b.n	800c3c8 <_dtoa_r+0x290>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e7f3      	b.n	800c39c <_dtoa_r+0x264>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ba:	445b      	add	r3, fp
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	9304      	str	r3, [sp, #16]
 800c3c4:	bfb8      	it	lt
 800c3c6:	2301      	movlt	r3, #1
 800c3c8:	69e0      	ldr	r0, [r4, #28]
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	2204      	movs	r2, #4
 800c3ce:	f102 0614 	add.w	r6, r2, #20
 800c3d2:	429e      	cmp	r6, r3
 800c3d4:	d93d      	bls.n	800c452 <_dtoa_r+0x31a>
 800c3d6:	6041      	str	r1, [r0, #4]
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f001 f855 	bl	800d488 <_Balloc>
 800c3de:	9000      	str	r0, [sp, #0]
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d139      	bne.n	800c458 <_dtoa_r+0x320>
 800c3e4:	4b16      	ldr	r3, [pc, #88]	; (800c440 <_dtoa_r+0x308>)
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	f240 11af 	movw	r1, #431	; 0x1af
 800c3ec:	e6bd      	b.n	800c16a <_dtoa_r+0x32>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e7e1      	b.n	800c3b6 <_dtoa_r+0x27e>
 800c3f2:	2501      	movs	r5, #1
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9307      	str	r3, [sp, #28]
 800c3f8:	9509      	str	r5, [sp, #36]	; 0x24
 800c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	2200      	movs	r2, #0
 800c404:	2312      	movs	r3, #18
 800c406:	e7d1      	b.n	800c3ac <_dtoa_r+0x274>
 800c408:	636f4361 	.word	0x636f4361
 800c40c:	3fd287a7 	.word	0x3fd287a7
 800c410:	8b60c8b3 	.word	0x8b60c8b3
 800c414:	3fc68a28 	.word	0x3fc68a28
 800c418:	509f79fb 	.word	0x509f79fb
 800c41c:	3fd34413 	.word	0x3fd34413
 800c420:	0800fda2 	.word	0x0800fda2
 800c424:	0800fe64 	.word	0x0800fe64
 800c428:	7ff00000 	.word	0x7ff00000
 800c42c:	0800fe60 	.word	0x0800fe60
 800c430:	0800fe57 	.word	0x0800fe57
 800c434:	0800fd7a 	.word	0x0800fd7a
 800c438:	3ff80000 	.word	0x3ff80000
 800c43c:	0800ffb0 	.word	0x0800ffb0
 800c440:	0800febc 	.word	0x0800febc
 800c444:	2301      	movs	r3, #1
 800c446:	9309      	str	r3, [sp, #36]	; 0x24
 800c448:	e7d7      	b.n	800c3fa <_dtoa_r+0x2c2>
 800c44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c44c:	9301      	str	r3, [sp, #4]
 800c44e:	9304      	str	r3, [sp, #16]
 800c450:	e7ba      	b.n	800c3c8 <_dtoa_r+0x290>
 800c452:	3101      	adds	r1, #1
 800c454:	0052      	lsls	r2, r2, #1
 800c456:	e7ba      	b.n	800c3ce <_dtoa_r+0x296>
 800c458:	69e3      	ldr	r3, [r4, #28]
 800c45a:	9a00      	ldr	r2, [sp, #0]
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	9b04      	ldr	r3, [sp, #16]
 800c460:	2b0e      	cmp	r3, #14
 800c462:	f200 80a8 	bhi.w	800c5b6 <_dtoa_r+0x47e>
 800c466:	2d00      	cmp	r5, #0
 800c468:	f000 80a5 	beq.w	800c5b6 <_dtoa_r+0x47e>
 800c46c:	f1bb 0f00 	cmp.w	fp, #0
 800c470:	dd38      	ble.n	800c4e4 <_dtoa_r+0x3ac>
 800c472:	4bc0      	ldr	r3, [pc, #768]	; (800c774 <_dtoa_r+0x63c>)
 800c474:	f00b 020f 	and.w	r2, fp, #15
 800c478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c47c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c480:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c484:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c488:	d019      	beq.n	800c4be <_dtoa_r+0x386>
 800c48a:	4bbb      	ldr	r3, [pc, #748]	; (800c778 <_dtoa_r+0x640>)
 800c48c:	ec51 0b18 	vmov	r0, r1, d8
 800c490:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c494:	f7f4 f9da 	bl	800084c <__aeabi_ddiv>
 800c498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c49c:	f008 080f 	and.w	r8, r8, #15
 800c4a0:	2503      	movs	r5, #3
 800c4a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c778 <_dtoa_r+0x640>
 800c4a6:	f1b8 0f00 	cmp.w	r8, #0
 800c4aa:	d10a      	bne.n	800c4c2 <_dtoa_r+0x38a>
 800c4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	463b      	mov	r3, r7
 800c4b4:	f7f4 f9ca 	bl	800084c <__aeabi_ddiv>
 800c4b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4bc:	e02b      	b.n	800c516 <_dtoa_r+0x3de>
 800c4be:	2502      	movs	r5, #2
 800c4c0:	e7ef      	b.n	800c4a2 <_dtoa_r+0x36a>
 800c4c2:	f018 0f01 	tst.w	r8, #1
 800c4c6:	d008      	beq.n	800c4da <_dtoa_r+0x3a2>
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c4d0:	f7f4 f892 	bl	80005f8 <__aeabi_dmul>
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	460f      	mov	r7, r1
 800c4da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4de:	f109 0908 	add.w	r9, r9, #8
 800c4e2:	e7e0      	b.n	800c4a6 <_dtoa_r+0x36e>
 800c4e4:	f000 809f 	beq.w	800c626 <_dtoa_r+0x4ee>
 800c4e8:	f1cb 0600 	rsb	r6, fp, #0
 800c4ec:	4ba1      	ldr	r3, [pc, #644]	; (800c774 <_dtoa_r+0x63c>)
 800c4ee:	4fa2      	ldr	r7, [pc, #648]	; (800c778 <_dtoa_r+0x640>)
 800c4f0:	f006 020f 	and.w	r2, r6, #15
 800c4f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	ec51 0b18 	vmov	r0, r1, d8
 800c500:	f7f4 f87a 	bl	80005f8 <__aeabi_dmul>
 800c504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c508:	1136      	asrs	r6, r6, #4
 800c50a:	2300      	movs	r3, #0
 800c50c:	2502      	movs	r5, #2
 800c50e:	2e00      	cmp	r6, #0
 800c510:	d17e      	bne.n	800c610 <_dtoa_r+0x4d8>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1d0      	bne.n	800c4b8 <_dtoa_r+0x380>
 800c516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c518:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 8084 	beq.w	800c62a <_dtoa_r+0x4f2>
 800c522:	4b96      	ldr	r3, [pc, #600]	; (800c77c <_dtoa_r+0x644>)
 800c524:	2200      	movs	r2, #0
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f4 fad7 	bl	8000adc <__aeabi_dcmplt>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d07b      	beq.n	800c62a <_dtoa_r+0x4f2>
 800c532:	9b04      	ldr	r3, [sp, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d078      	beq.n	800c62a <_dtoa_r+0x4f2>
 800c538:	9b01      	ldr	r3, [sp, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	dd39      	ble.n	800c5b2 <_dtoa_r+0x47a>
 800c53e:	4b90      	ldr	r3, [pc, #576]	; (800c780 <_dtoa_r+0x648>)
 800c540:	2200      	movs	r2, #0
 800c542:	4640      	mov	r0, r8
 800c544:	4649      	mov	r1, r9
 800c546:	f7f4 f857 	bl	80005f8 <__aeabi_dmul>
 800c54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c54e:	9e01      	ldr	r6, [sp, #4]
 800c550:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c554:	3501      	adds	r5, #1
 800c556:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c55a:	4628      	mov	r0, r5
 800c55c:	f7f3 ffe2 	bl	8000524 <__aeabi_i2d>
 800c560:	4642      	mov	r2, r8
 800c562:	464b      	mov	r3, r9
 800c564:	f7f4 f848 	bl	80005f8 <__aeabi_dmul>
 800c568:	4b86      	ldr	r3, [pc, #536]	; (800c784 <_dtoa_r+0x64c>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	f7f3 fe8e 	bl	800028c <__adddf3>
 800c570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c578:	9303      	str	r3, [sp, #12]
 800c57a:	2e00      	cmp	r6, #0
 800c57c:	d158      	bne.n	800c630 <_dtoa_r+0x4f8>
 800c57e:	4b82      	ldr	r3, [pc, #520]	; (800c788 <_dtoa_r+0x650>)
 800c580:	2200      	movs	r2, #0
 800c582:	4640      	mov	r0, r8
 800c584:	4649      	mov	r1, r9
 800c586:	f7f3 fe7f 	bl	8000288 <__aeabi_dsub>
 800c58a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58e:	4680      	mov	r8, r0
 800c590:	4689      	mov	r9, r1
 800c592:	f7f4 fac1 	bl	8000b18 <__aeabi_dcmpgt>
 800c596:	2800      	cmp	r0, #0
 800c598:	f040 8296 	bne.w	800cac8 <_dtoa_r+0x990>
 800c59c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f4 fa98 	bl	8000adc <__aeabi_dcmplt>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	f040 8289 	bne.w	800cac4 <_dtoa_r+0x98c>
 800c5b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c5b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	f2c0 814e 	blt.w	800c85a <_dtoa_r+0x722>
 800c5be:	f1bb 0f0e 	cmp.w	fp, #14
 800c5c2:	f300 814a 	bgt.w	800c85a <_dtoa_r+0x722>
 800c5c6:	4b6b      	ldr	r3, [pc, #428]	; (800c774 <_dtoa_r+0x63c>)
 800c5c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f280 80dc 	bge.w	800c790 <_dtoa_r+0x658>
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f300 80d8 	bgt.w	800c790 <_dtoa_r+0x658>
 800c5e0:	f040 826f 	bne.w	800cac2 <_dtoa_r+0x98a>
 800c5e4:	4b68      	ldr	r3, [pc, #416]	; (800c788 <_dtoa_r+0x650>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4649      	mov	r1, r9
 800c5ec:	f7f4 f804 	bl	80005f8 <__aeabi_dmul>
 800c5f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5f4:	f7f4 fa86 	bl	8000b04 <__aeabi_dcmpge>
 800c5f8:	9e04      	ldr	r6, [sp, #16]
 800c5fa:	4637      	mov	r7, r6
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	f040 8245 	bne.w	800ca8c <_dtoa_r+0x954>
 800c602:	9d00      	ldr	r5, [sp, #0]
 800c604:	2331      	movs	r3, #49	; 0x31
 800c606:	f805 3b01 	strb.w	r3, [r5], #1
 800c60a:	f10b 0b01 	add.w	fp, fp, #1
 800c60e:	e241      	b.n	800ca94 <_dtoa_r+0x95c>
 800c610:	07f2      	lsls	r2, r6, #31
 800c612:	d505      	bpl.n	800c620 <_dtoa_r+0x4e8>
 800c614:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c618:	f7f3 ffee 	bl	80005f8 <__aeabi_dmul>
 800c61c:	3501      	adds	r5, #1
 800c61e:	2301      	movs	r3, #1
 800c620:	1076      	asrs	r6, r6, #1
 800c622:	3708      	adds	r7, #8
 800c624:	e773      	b.n	800c50e <_dtoa_r+0x3d6>
 800c626:	2502      	movs	r5, #2
 800c628:	e775      	b.n	800c516 <_dtoa_r+0x3de>
 800c62a:	9e04      	ldr	r6, [sp, #16]
 800c62c:	465f      	mov	r7, fp
 800c62e:	e792      	b.n	800c556 <_dtoa_r+0x41e>
 800c630:	9900      	ldr	r1, [sp, #0]
 800c632:	4b50      	ldr	r3, [pc, #320]	; (800c774 <_dtoa_r+0x63c>)
 800c634:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c638:	4431      	add	r1, r6
 800c63a:	9102      	str	r1, [sp, #8]
 800c63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c63e:	eeb0 9a47 	vmov.f32	s18, s14
 800c642:	eef0 9a67 	vmov.f32	s19, s15
 800c646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c64a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c64e:	2900      	cmp	r1, #0
 800c650:	d044      	beq.n	800c6dc <_dtoa_r+0x5a4>
 800c652:	494e      	ldr	r1, [pc, #312]	; (800c78c <_dtoa_r+0x654>)
 800c654:	2000      	movs	r0, #0
 800c656:	f7f4 f8f9 	bl	800084c <__aeabi_ddiv>
 800c65a:	ec53 2b19 	vmov	r2, r3, d9
 800c65e:	f7f3 fe13 	bl	8000288 <__aeabi_dsub>
 800c662:	9d00      	ldr	r5, [sp, #0]
 800c664:	ec41 0b19 	vmov	d9, r0, r1
 800c668:	4649      	mov	r1, r9
 800c66a:	4640      	mov	r0, r8
 800c66c:	f7f4 fa74 	bl	8000b58 <__aeabi_d2iz>
 800c670:	4606      	mov	r6, r0
 800c672:	f7f3 ff57 	bl	8000524 <__aeabi_i2d>
 800c676:	4602      	mov	r2, r0
 800c678:	460b      	mov	r3, r1
 800c67a:	4640      	mov	r0, r8
 800c67c:	4649      	mov	r1, r9
 800c67e:	f7f3 fe03 	bl	8000288 <__aeabi_dsub>
 800c682:	3630      	adds	r6, #48	; 0x30
 800c684:	f805 6b01 	strb.w	r6, [r5], #1
 800c688:	ec53 2b19 	vmov	r2, r3, d9
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	f7f4 fa24 	bl	8000adc <__aeabi_dcmplt>
 800c694:	2800      	cmp	r0, #0
 800c696:	d164      	bne.n	800c762 <_dtoa_r+0x62a>
 800c698:	4642      	mov	r2, r8
 800c69a:	464b      	mov	r3, r9
 800c69c:	4937      	ldr	r1, [pc, #220]	; (800c77c <_dtoa_r+0x644>)
 800c69e:	2000      	movs	r0, #0
 800c6a0:	f7f3 fdf2 	bl	8000288 <__aeabi_dsub>
 800c6a4:	ec53 2b19 	vmov	r2, r3, d9
 800c6a8:	f7f4 fa18 	bl	8000adc <__aeabi_dcmplt>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f040 80b6 	bne.w	800c81e <_dtoa_r+0x6e6>
 800c6b2:	9b02      	ldr	r3, [sp, #8]
 800c6b4:	429d      	cmp	r5, r3
 800c6b6:	f43f af7c 	beq.w	800c5b2 <_dtoa_r+0x47a>
 800c6ba:	4b31      	ldr	r3, [pc, #196]	; (800c780 <_dtoa_r+0x648>)
 800c6bc:	ec51 0b19 	vmov	r0, r1, d9
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	4b2e      	ldr	r3, [pc, #184]	; (800c780 <_dtoa_r+0x648>)
 800c6c8:	ec41 0b19 	vmov	d9, r0, r1
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	f7f3 ff91 	bl	80005f8 <__aeabi_dmul>
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4689      	mov	r9, r1
 800c6da:	e7c5      	b.n	800c668 <_dtoa_r+0x530>
 800c6dc:	ec51 0b17 	vmov	r0, r1, d7
 800c6e0:	f7f3 ff8a 	bl	80005f8 <__aeabi_dmul>
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	9d00      	ldr	r5, [sp, #0]
 800c6e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ea:	ec41 0b19 	vmov	d9, r0, r1
 800c6ee:	4649      	mov	r1, r9
 800c6f0:	4640      	mov	r0, r8
 800c6f2:	f7f4 fa31 	bl	8000b58 <__aeabi_d2iz>
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	f7f3 ff14 	bl	8000524 <__aeabi_i2d>
 800c6fc:	3630      	adds	r6, #48	; 0x30
 800c6fe:	4602      	mov	r2, r0
 800c700:	460b      	mov	r3, r1
 800c702:	4640      	mov	r0, r8
 800c704:	4649      	mov	r1, r9
 800c706:	f7f3 fdbf 	bl	8000288 <__aeabi_dsub>
 800c70a:	f805 6b01 	strb.w	r6, [r5], #1
 800c70e:	9b02      	ldr	r3, [sp, #8]
 800c710:	429d      	cmp	r5, r3
 800c712:	4680      	mov	r8, r0
 800c714:	4689      	mov	r9, r1
 800c716:	f04f 0200 	mov.w	r2, #0
 800c71a:	d124      	bne.n	800c766 <_dtoa_r+0x62e>
 800c71c:	4b1b      	ldr	r3, [pc, #108]	; (800c78c <_dtoa_r+0x654>)
 800c71e:	ec51 0b19 	vmov	r0, r1, d9
 800c722:	f7f3 fdb3 	bl	800028c <__adddf3>
 800c726:	4602      	mov	r2, r0
 800c728:	460b      	mov	r3, r1
 800c72a:	4640      	mov	r0, r8
 800c72c:	4649      	mov	r1, r9
 800c72e:	f7f4 f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 800c732:	2800      	cmp	r0, #0
 800c734:	d173      	bne.n	800c81e <_dtoa_r+0x6e6>
 800c736:	ec53 2b19 	vmov	r2, r3, d9
 800c73a:	4914      	ldr	r1, [pc, #80]	; (800c78c <_dtoa_r+0x654>)
 800c73c:	2000      	movs	r0, #0
 800c73e:	f7f3 fda3 	bl	8000288 <__aeabi_dsub>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4640      	mov	r0, r8
 800c748:	4649      	mov	r1, r9
 800c74a:	f7f4 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800c74e:	2800      	cmp	r0, #0
 800c750:	f43f af2f 	beq.w	800c5b2 <_dtoa_r+0x47a>
 800c754:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c756:	1e6b      	subs	r3, r5, #1
 800c758:	930f      	str	r3, [sp, #60]	; 0x3c
 800c75a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c75e:	2b30      	cmp	r3, #48	; 0x30
 800c760:	d0f8      	beq.n	800c754 <_dtoa_r+0x61c>
 800c762:	46bb      	mov	fp, r7
 800c764:	e04a      	b.n	800c7fc <_dtoa_r+0x6c4>
 800c766:	4b06      	ldr	r3, [pc, #24]	; (800c780 <_dtoa_r+0x648>)
 800c768:	f7f3 ff46 	bl	80005f8 <__aeabi_dmul>
 800c76c:	4680      	mov	r8, r0
 800c76e:	4689      	mov	r9, r1
 800c770:	e7bd      	b.n	800c6ee <_dtoa_r+0x5b6>
 800c772:	bf00      	nop
 800c774:	0800ffb0 	.word	0x0800ffb0
 800c778:	0800ff88 	.word	0x0800ff88
 800c77c:	3ff00000 	.word	0x3ff00000
 800c780:	40240000 	.word	0x40240000
 800c784:	401c0000 	.word	0x401c0000
 800c788:	40140000 	.word	0x40140000
 800c78c:	3fe00000 	.word	0x3fe00000
 800c790:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c794:	9d00      	ldr	r5, [sp, #0]
 800c796:	4642      	mov	r2, r8
 800c798:	464b      	mov	r3, r9
 800c79a:	4630      	mov	r0, r6
 800c79c:	4639      	mov	r1, r7
 800c79e:	f7f4 f855 	bl	800084c <__aeabi_ddiv>
 800c7a2:	f7f4 f9d9 	bl	8000b58 <__aeabi_d2iz>
 800c7a6:	9001      	str	r0, [sp, #4]
 800c7a8:	f7f3 febc 	bl	8000524 <__aeabi_i2d>
 800c7ac:	4642      	mov	r2, r8
 800c7ae:	464b      	mov	r3, r9
 800c7b0:	f7f3 ff22 	bl	80005f8 <__aeabi_dmul>
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f3 fd64 	bl	8000288 <__aeabi_dsub>
 800c7c0:	9e01      	ldr	r6, [sp, #4]
 800c7c2:	9f04      	ldr	r7, [sp, #16]
 800c7c4:	3630      	adds	r6, #48	; 0x30
 800c7c6:	f805 6b01 	strb.w	r6, [r5], #1
 800c7ca:	9e00      	ldr	r6, [sp, #0]
 800c7cc:	1bae      	subs	r6, r5, r6
 800c7ce:	42b7      	cmp	r7, r6
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	d134      	bne.n	800c840 <_dtoa_r+0x708>
 800c7d6:	f7f3 fd59 	bl	800028c <__adddf3>
 800c7da:	4642      	mov	r2, r8
 800c7dc:	464b      	mov	r3, r9
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	f7f4 f999 	bl	8000b18 <__aeabi_dcmpgt>
 800c7e6:	b9c8      	cbnz	r0, 800c81c <_dtoa_r+0x6e4>
 800c7e8:	4642      	mov	r2, r8
 800c7ea:	464b      	mov	r3, r9
 800c7ec:	4630      	mov	r0, r6
 800c7ee:	4639      	mov	r1, r7
 800c7f0:	f7f4 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f4:	b110      	cbz	r0, 800c7fc <_dtoa_r+0x6c4>
 800c7f6:	9b01      	ldr	r3, [sp, #4]
 800c7f8:	07db      	lsls	r3, r3, #31
 800c7fa:	d40f      	bmi.n	800c81c <_dtoa_r+0x6e4>
 800c7fc:	4651      	mov	r1, sl
 800c7fe:	4620      	mov	r0, r4
 800c800:	f000 fe82 	bl	800d508 <_Bfree>
 800c804:	2300      	movs	r3, #0
 800c806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c808:	702b      	strb	r3, [r5, #0]
 800c80a:	f10b 0301 	add.w	r3, fp, #1
 800c80e:	6013      	str	r3, [r2, #0]
 800c810:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c812:	2b00      	cmp	r3, #0
 800c814:	f43f ace2 	beq.w	800c1dc <_dtoa_r+0xa4>
 800c818:	601d      	str	r5, [r3, #0]
 800c81a:	e4df      	b.n	800c1dc <_dtoa_r+0xa4>
 800c81c:	465f      	mov	r7, fp
 800c81e:	462b      	mov	r3, r5
 800c820:	461d      	mov	r5, r3
 800c822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c826:	2a39      	cmp	r2, #57	; 0x39
 800c828:	d106      	bne.n	800c838 <_dtoa_r+0x700>
 800c82a:	9a00      	ldr	r2, [sp, #0]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d1f7      	bne.n	800c820 <_dtoa_r+0x6e8>
 800c830:	9900      	ldr	r1, [sp, #0]
 800c832:	2230      	movs	r2, #48	; 0x30
 800c834:	3701      	adds	r7, #1
 800c836:	700a      	strb	r2, [r1, #0]
 800c838:	781a      	ldrb	r2, [r3, #0]
 800c83a:	3201      	adds	r2, #1
 800c83c:	701a      	strb	r2, [r3, #0]
 800c83e:	e790      	b.n	800c762 <_dtoa_r+0x62a>
 800c840:	4ba3      	ldr	r3, [pc, #652]	; (800cad0 <_dtoa_r+0x998>)
 800c842:	2200      	movs	r2, #0
 800c844:	f7f3 fed8 	bl	80005f8 <__aeabi_dmul>
 800c848:	2200      	movs	r2, #0
 800c84a:	2300      	movs	r3, #0
 800c84c:	4606      	mov	r6, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	f7f4 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c854:	2800      	cmp	r0, #0
 800c856:	d09e      	beq.n	800c796 <_dtoa_r+0x65e>
 800c858:	e7d0      	b.n	800c7fc <_dtoa_r+0x6c4>
 800c85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c85c:	2a00      	cmp	r2, #0
 800c85e:	f000 80ca 	beq.w	800c9f6 <_dtoa_r+0x8be>
 800c862:	9a07      	ldr	r2, [sp, #28]
 800c864:	2a01      	cmp	r2, #1
 800c866:	f300 80ad 	bgt.w	800c9c4 <_dtoa_r+0x88c>
 800c86a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	f000 80a5 	beq.w	800c9bc <_dtoa_r+0x884>
 800c872:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c876:	9e08      	ldr	r6, [sp, #32]
 800c878:	9d05      	ldr	r5, [sp, #20]
 800c87a:	9a05      	ldr	r2, [sp, #20]
 800c87c:	441a      	add	r2, r3
 800c87e:	9205      	str	r2, [sp, #20]
 800c880:	9a06      	ldr	r2, [sp, #24]
 800c882:	2101      	movs	r1, #1
 800c884:	441a      	add	r2, r3
 800c886:	4620      	mov	r0, r4
 800c888:	9206      	str	r2, [sp, #24]
 800c88a:	f000 ff3d 	bl	800d708 <__i2b>
 800c88e:	4607      	mov	r7, r0
 800c890:	b165      	cbz	r5, 800c8ac <_dtoa_r+0x774>
 800c892:	9b06      	ldr	r3, [sp, #24]
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd09      	ble.n	800c8ac <_dtoa_r+0x774>
 800c898:	42ab      	cmp	r3, r5
 800c89a:	9a05      	ldr	r2, [sp, #20]
 800c89c:	bfa8      	it	ge
 800c89e:	462b      	movge	r3, r5
 800c8a0:	1ad2      	subs	r2, r2, r3
 800c8a2:	9205      	str	r2, [sp, #20]
 800c8a4:	9a06      	ldr	r2, [sp, #24]
 800c8a6:	1aed      	subs	r5, r5, r3
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	9306      	str	r3, [sp, #24]
 800c8ac:	9b08      	ldr	r3, [sp, #32]
 800c8ae:	b1f3      	cbz	r3, 800c8ee <_dtoa_r+0x7b6>
 800c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80a3 	beq.w	800c9fe <_dtoa_r+0x8c6>
 800c8b8:	2e00      	cmp	r6, #0
 800c8ba:	dd10      	ble.n	800c8de <_dtoa_r+0x7a6>
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4632      	mov	r2, r6
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f000 ffe1 	bl	800d888 <__pow5mult>
 800c8c6:	4652      	mov	r2, sl
 800c8c8:	4601      	mov	r1, r0
 800c8ca:	4607      	mov	r7, r0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 ff31 	bl	800d734 <__multiply>
 800c8d2:	4651      	mov	r1, sl
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fe16 	bl	800d508 <_Bfree>
 800c8dc:	46c2      	mov	sl, r8
 800c8de:	9b08      	ldr	r3, [sp, #32]
 800c8e0:	1b9a      	subs	r2, r3, r6
 800c8e2:	d004      	beq.n	800c8ee <_dtoa_r+0x7b6>
 800c8e4:	4651      	mov	r1, sl
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f000 ffce 	bl	800d888 <__pow5mult>
 800c8ec:	4682      	mov	sl, r0
 800c8ee:	2101      	movs	r1, #1
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f000 ff09 	bl	800d708 <__i2b>
 800c8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	f340 8081 	ble.w	800ca02 <_dtoa_r+0x8ca>
 800c900:	461a      	mov	r2, r3
 800c902:	4601      	mov	r1, r0
 800c904:	4620      	mov	r0, r4
 800c906:	f000 ffbf 	bl	800d888 <__pow5mult>
 800c90a:	9b07      	ldr	r3, [sp, #28]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	4606      	mov	r6, r0
 800c910:	dd7a      	ble.n	800ca08 <_dtoa_r+0x8d0>
 800c912:	f04f 0800 	mov.w	r8, #0
 800c916:	6933      	ldr	r3, [r6, #16]
 800c918:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c91c:	6918      	ldr	r0, [r3, #16]
 800c91e:	f000 fea5 	bl	800d66c <__hi0bits>
 800c922:	f1c0 0020 	rsb	r0, r0, #32
 800c926:	9b06      	ldr	r3, [sp, #24]
 800c928:	4418      	add	r0, r3
 800c92a:	f010 001f 	ands.w	r0, r0, #31
 800c92e:	f000 8094 	beq.w	800ca5a <_dtoa_r+0x922>
 800c932:	f1c0 0320 	rsb	r3, r0, #32
 800c936:	2b04      	cmp	r3, #4
 800c938:	f340 8085 	ble.w	800ca46 <_dtoa_r+0x90e>
 800c93c:	9b05      	ldr	r3, [sp, #20]
 800c93e:	f1c0 001c 	rsb	r0, r0, #28
 800c942:	4403      	add	r3, r0
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	9b06      	ldr	r3, [sp, #24]
 800c948:	4403      	add	r3, r0
 800c94a:	4405      	add	r5, r0
 800c94c:	9306      	str	r3, [sp, #24]
 800c94e:	9b05      	ldr	r3, [sp, #20]
 800c950:	2b00      	cmp	r3, #0
 800c952:	dd05      	ble.n	800c960 <_dtoa_r+0x828>
 800c954:	4651      	mov	r1, sl
 800c956:	461a      	mov	r2, r3
 800c958:	4620      	mov	r0, r4
 800c95a:	f000 ffef 	bl	800d93c <__lshift>
 800c95e:	4682      	mov	sl, r0
 800c960:	9b06      	ldr	r3, [sp, #24]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd05      	ble.n	800c972 <_dtoa_r+0x83a>
 800c966:	4631      	mov	r1, r6
 800c968:	461a      	mov	r2, r3
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 ffe6 	bl	800d93c <__lshift>
 800c970:	4606      	mov	r6, r0
 800c972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c974:	2b00      	cmp	r3, #0
 800c976:	d072      	beq.n	800ca5e <_dtoa_r+0x926>
 800c978:	4631      	mov	r1, r6
 800c97a:	4650      	mov	r0, sl
 800c97c:	f001 f84a 	bl	800da14 <__mcmp>
 800c980:	2800      	cmp	r0, #0
 800c982:	da6c      	bge.n	800ca5e <_dtoa_r+0x926>
 800c984:	2300      	movs	r3, #0
 800c986:	4651      	mov	r1, sl
 800c988:	220a      	movs	r2, #10
 800c98a:	4620      	mov	r0, r4
 800c98c:	f000 fdde 	bl	800d54c <__multadd>
 800c990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c992:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c996:	4682      	mov	sl, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 81b0 	beq.w	800ccfe <_dtoa_r+0xbc6>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	220a      	movs	r2, #10
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 fdd1 	bl	800d54c <__multadd>
 800c9aa:	9b01      	ldr	r3, [sp, #4]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	f300 8096 	bgt.w	800cae0 <_dtoa_r+0x9a8>
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	dc59      	bgt.n	800ca6e <_dtoa_r+0x936>
 800c9ba:	e091      	b.n	800cae0 <_dtoa_r+0x9a8>
 800c9bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9c2:	e758      	b.n	800c876 <_dtoa_r+0x73e>
 800c9c4:	9b04      	ldr	r3, [sp, #16]
 800c9c6:	1e5e      	subs	r6, r3, #1
 800c9c8:	9b08      	ldr	r3, [sp, #32]
 800c9ca:	42b3      	cmp	r3, r6
 800c9cc:	bfbf      	itttt	lt
 800c9ce:	9b08      	ldrlt	r3, [sp, #32]
 800c9d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c9d2:	9608      	strlt	r6, [sp, #32]
 800c9d4:	1af3      	sublt	r3, r6, r3
 800c9d6:	bfb4      	ite	lt
 800c9d8:	18d2      	addlt	r2, r2, r3
 800c9da:	1b9e      	subge	r6, r3, r6
 800c9dc:	9b04      	ldr	r3, [sp, #16]
 800c9de:	bfbc      	itt	lt
 800c9e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c9e2:	2600      	movlt	r6, #0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	bfb7      	itett	lt
 800c9e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c9ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c9f0:	1a9d      	sublt	r5, r3, r2
 800c9f2:	2300      	movlt	r3, #0
 800c9f4:	e741      	b.n	800c87a <_dtoa_r+0x742>
 800c9f6:	9e08      	ldr	r6, [sp, #32]
 800c9f8:	9d05      	ldr	r5, [sp, #20]
 800c9fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9fc:	e748      	b.n	800c890 <_dtoa_r+0x758>
 800c9fe:	9a08      	ldr	r2, [sp, #32]
 800ca00:	e770      	b.n	800c8e4 <_dtoa_r+0x7ac>
 800ca02:	9b07      	ldr	r3, [sp, #28]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	dc19      	bgt.n	800ca3c <_dtoa_r+0x904>
 800ca08:	9b02      	ldr	r3, [sp, #8]
 800ca0a:	b9bb      	cbnz	r3, 800ca3c <_dtoa_r+0x904>
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca12:	b99b      	cbnz	r3, 800ca3c <_dtoa_r+0x904>
 800ca14:	9b03      	ldr	r3, [sp, #12]
 800ca16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca1a:	0d1b      	lsrs	r3, r3, #20
 800ca1c:	051b      	lsls	r3, r3, #20
 800ca1e:	b183      	cbz	r3, 800ca42 <_dtoa_r+0x90a>
 800ca20:	9b05      	ldr	r3, [sp, #20]
 800ca22:	3301      	adds	r3, #1
 800ca24:	9305      	str	r3, [sp, #20]
 800ca26:	9b06      	ldr	r3, [sp, #24]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	9306      	str	r3, [sp, #24]
 800ca2c:	f04f 0801 	mov.w	r8, #1
 800ca30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f47f af6f 	bne.w	800c916 <_dtoa_r+0x7de>
 800ca38:	2001      	movs	r0, #1
 800ca3a:	e774      	b.n	800c926 <_dtoa_r+0x7ee>
 800ca3c:	f04f 0800 	mov.w	r8, #0
 800ca40:	e7f6      	b.n	800ca30 <_dtoa_r+0x8f8>
 800ca42:	4698      	mov	r8, r3
 800ca44:	e7f4      	b.n	800ca30 <_dtoa_r+0x8f8>
 800ca46:	d082      	beq.n	800c94e <_dtoa_r+0x816>
 800ca48:	9a05      	ldr	r2, [sp, #20]
 800ca4a:	331c      	adds	r3, #28
 800ca4c:	441a      	add	r2, r3
 800ca4e:	9205      	str	r2, [sp, #20]
 800ca50:	9a06      	ldr	r2, [sp, #24]
 800ca52:	441a      	add	r2, r3
 800ca54:	441d      	add	r5, r3
 800ca56:	9206      	str	r2, [sp, #24]
 800ca58:	e779      	b.n	800c94e <_dtoa_r+0x816>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	e7f4      	b.n	800ca48 <_dtoa_r+0x910>
 800ca5e:	9b04      	ldr	r3, [sp, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	dc37      	bgt.n	800cad4 <_dtoa_r+0x99c>
 800ca64:	9b07      	ldr	r3, [sp, #28]
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	dd34      	ble.n	800cad4 <_dtoa_r+0x99c>
 800ca6a:	9b04      	ldr	r3, [sp, #16]
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	b963      	cbnz	r3, 800ca8c <_dtoa_r+0x954>
 800ca72:	4631      	mov	r1, r6
 800ca74:	2205      	movs	r2, #5
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fd68 	bl	800d54c <__multadd>
 800ca7c:	4601      	mov	r1, r0
 800ca7e:	4606      	mov	r6, r0
 800ca80:	4650      	mov	r0, sl
 800ca82:	f000 ffc7 	bl	800da14 <__mcmp>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f73f adbb 	bgt.w	800c602 <_dtoa_r+0x4ca>
 800ca8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8e:	9d00      	ldr	r5, [sp, #0]
 800ca90:	ea6f 0b03 	mvn.w	fp, r3
 800ca94:	f04f 0800 	mov.w	r8, #0
 800ca98:	4631      	mov	r1, r6
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fd34 	bl	800d508 <_Bfree>
 800caa0:	2f00      	cmp	r7, #0
 800caa2:	f43f aeab 	beq.w	800c7fc <_dtoa_r+0x6c4>
 800caa6:	f1b8 0f00 	cmp.w	r8, #0
 800caaa:	d005      	beq.n	800cab8 <_dtoa_r+0x980>
 800caac:	45b8      	cmp	r8, r7
 800caae:	d003      	beq.n	800cab8 <_dtoa_r+0x980>
 800cab0:	4641      	mov	r1, r8
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 fd28 	bl	800d508 <_Bfree>
 800cab8:	4639      	mov	r1, r7
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 fd24 	bl	800d508 <_Bfree>
 800cac0:	e69c      	b.n	800c7fc <_dtoa_r+0x6c4>
 800cac2:	2600      	movs	r6, #0
 800cac4:	4637      	mov	r7, r6
 800cac6:	e7e1      	b.n	800ca8c <_dtoa_r+0x954>
 800cac8:	46bb      	mov	fp, r7
 800caca:	4637      	mov	r7, r6
 800cacc:	e599      	b.n	800c602 <_dtoa_r+0x4ca>
 800cace:	bf00      	nop
 800cad0:	40240000 	.word	0x40240000
 800cad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f000 80c8 	beq.w	800cc6c <_dtoa_r+0xb34>
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	2d00      	cmp	r5, #0
 800cae2:	dd05      	ble.n	800caf0 <_dtoa_r+0x9b8>
 800cae4:	4639      	mov	r1, r7
 800cae6:	462a      	mov	r2, r5
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 ff27 	bl	800d93c <__lshift>
 800caee:	4607      	mov	r7, r0
 800caf0:	f1b8 0f00 	cmp.w	r8, #0
 800caf4:	d05b      	beq.n	800cbae <_dtoa_r+0xa76>
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 fcc5 	bl	800d488 <_Balloc>
 800cafe:	4605      	mov	r5, r0
 800cb00:	b928      	cbnz	r0, 800cb0e <_dtoa_r+0x9d6>
 800cb02:	4b83      	ldr	r3, [pc, #524]	; (800cd10 <_dtoa_r+0xbd8>)
 800cb04:	4602      	mov	r2, r0
 800cb06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cb0a:	f7ff bb2e 	b.w	800c16a <_dtoa_r+0x32>
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	3202      	adds	r2, #2
 800cb12:	0092      	lsls	r2, r2, #2
 800cb14:	f107 010c 	add.w	r1, r7, #12
 800cb18:	300c      	adds	r0, #12
 800cb1a:	f7ff fa48 	bl	800bfae <memcpy>
 800cb1e:	2201      	movs	r2, #1
 800cb20:	4629      	mov	r1, r5
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 ff0a 	bl	800d93c <__lshift>
 800cb28:	9b00      	ldr	r3, [sp, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb32:	4413      	add	r3, r2
 800cb34:	9308      	str	r3, [sp, #32]
 800cb36:	9b02      	ldr	r3, [sp, #8]
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	46b8      	mov	r8, r7
 800cb3e:	9306      	str	r3, [sp, #24]
 800cb40:	4607      	mov	r7, r0
 800cb42:	9b04      	ldr	r3, [sp, #16]
 800cb44:	4631      	mov	r1, r6
 800cb46:	3b01      	subs	r3, #1
 800cb48:	4650      	mov	r0, sl
 800cb4a:	9301      	str	r3, [sp, #4]
 800cb4c:	f7ff fa6c 	bl	800c028 <quorem>
 800cb50:	4641      	mov	r1, r8
 800cb52:	9002      	str	r0, [sp, #8]
 800cb54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb58:	4650      	mov	r0, sl
 800cb5a:	f000 ff5b 	bl	800da14 <__mcmp>
 800cb5e:	463a      	mov	r2, r7
 800cb60:	9005      	str	r0, [sp, #20]
 800cb62:	4631      	mov	r1, r6
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 ff71 	bl	800da4c <__mdiff>
 800cb6a:	68c2      	ldr	r2, [r0, #12]
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	bb02      	cbnz	r2, 800cbb2 <_dtoa_r+0xa7a>
 800cb70:	4601      	mov	r1, r0
 800cb72:	4650      	mov	r0, sl
 800cb74:	f000 ff4e 	bl	800da14 <__mcmp>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb80:	f000 fcc2 	bl	800d508 <_Bfree>
 800cb84:	9b07      	ldr	r3, [sp, #28]
 800cb86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb88:	9d04      	ldr	r5, [sp, #16]
 800cb8a:	ea43 0102 	orr.w	r1, r3, r2
 800cb8e:	9b06      	ldr	r3, [sp, #24]
 800cb90:	4319      	orrs	r1, r3
 800cb92:	d110      	bne.n	800cbb6 <_dtoa_r+0xa7e>
 800cb94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb98:	d029      	beq.n	800cbee <_dtoa_r+0xab6>
 800cb9a:	9b05      	ldr	r3, [sp, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd02      	ble.n	800cba6 <_dtoa_r+0xa6e>
 800cba0:	9b02      	ldr	r3, [sp, #8]
 800cba2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	f883 9000 	strb.w	r9, [r3]
 800cbac:	e774      	b.n	800ca98 <_dtoa_r+0x960>
 800cbae:	4638      	mov	r0, r7
 800cbb0:	e7ba      	b.n	800cb28 <_dtoa_r+0x9f0>
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	e7e1      	b.n	800cb7a <_dtoa_r+0xa42>
 800cbb6:	9b05      	ldr	r3, [sp, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	db04      	blt.n	800cbc6 <_dtoa_r+0xa8e>
 800cbbc:	9907      	ldr	r1, [sp, #28]
 800cbbe:	430b      	orrs	r3, r1
 800cbc0:	9906      	ldr	r1, [sp, #24]
 800cbc2:	430b      	orrs	r3, r1
 800cbc4:	d120      	bne.n	800cc08 <_dtoa_r+0xad0>
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	dded      	ble.n	800cba6 <_dtoa_r+0xa6e>
 800cbca:	4651      	mov	r1, sl
 800cbcc:	2201      	movs	r2, #1
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 feb4 	bl	800d93c <__lshift>
 800cbd4:	4631      	mov	r1, r6
 800cbd6:	4682      	mov	sl, r0
 800cbd8:	f000 ff1c 	bl	800da14 <__mcmp>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	dc03      	bgt.n	800cbe8 <_dtoa_r+0xab0>
 800cbe0:	d1e1      	bne.n	800cba6 <_dtoa_r+0xa6e>
 800cbe2:	f019 0f01 	tst.w	r9, #1
 800cbe6:	d0de      	beq.n	800cba6 <_dtoa_r+0xa6e>
 800cbe8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbec:	d1d8      	bne.n	800cba0 <_dtoa_r+0xa68>
 800cbee:	9a01      	ldr	r2, [sp, #4]
 800cbf0:	2339      	movs	r3, #57	; 0x39
 800cbf2:	7013      	strb	r3, [r2, #0]
 800cbf4:	462b      	mov	r3, r5
 800cbf6:	461d      	mov	r5, r3
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbfe:	2a39      	cmp	r2, #57	; 0x39
 800cc00:	d06c      	beq.n	800ccdc <_dtoa_r+0xba4>
 800cc02:	3201      	adds	r2, #1
 800cc04:	701a      	strb	r2, [r3, #0]
 800cc06:	e747      	b.n	800ca98 <_dtoa_r+0x960>
 800cc08:	2a00      	cmp	r2, #0
 800cc0a:	dd07      	ble.n	800cc1c <_dtoa_r+0xae4>
 800cc0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc10:	d0ed      	beq.n	800cbee <_dtoa_r+0xab6>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	f109 0301 	add.w	r3, r9, #1
 800cc18:	7013      	strb	r3, [r2, #0]
 800cc1a:	e73d      	b.n	800ca98 <_dtoa_r+0x960>
 800cc1c:	9b04      	ldr	r3, [sp, #16]
 800cc1e:	9a08      	ldr	r2, [sp, #32]
 800cc20:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d043      	beq.n	800ccb0 <_dtoa_r+0xb78>
 800cc28:	4651      	mov	r1, sl
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	220a      	movs	r2, #10
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f000 fc8c 	bl	800d54c <__multadd>
 800cc34:	45b8      	cmp	r8, r7
 800cc36:	4682      	mov	sl, r0
 800cc38:	f04f 0300 	mov.w	r3, #0
 800cc3c:	f04f 020a 	mov.w	r2, #10
 800cc40:	4641      	mov	r1, r8
 800cc42:	4620      	mov	r0, r4
 800cc44:	d107      	bne.n	800cc56 <_dtoa_r+0xb1e>
 800cc46:	f000 fc81 	bl	800d54c <__multadd>
 800cc4a:	4680      	mov	r8, r0
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	3301      	adds	r3, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	e775      	b.n	800cb42 <_dtoa_r+0xa0a>
 800cc56:	f000 fc79 	bl	800d54c <__multadd>
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	2300      	movs	r3, #0
 800cc60:	220a      	movs	r2, #10
 800cc62:	4620      	mov	r0, r4
 800cc64:	f000 fc72 	bl	800d54c <__multadd>
 800cc68:	4607      	mov	r7, r0
 800cc6a:	e7f0      	b.n	800cc4e <_dtoa_r+0xb16>
 800cc6c:	9b04      	ldr	r3, [sp, #16]
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	9d00      	ldr	r5, [sp, #0]
 800cc72:	4631      	mov	r1, r6
 800cc74:	4650      	mov	r0, sl
 800cc76:	f7ff f9d7 	bl	800c028 <quorem>
 800cc7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc7e:	9b00      	ldr	r3, [sp, #0]
 800cc80:	f805 9b01 	strb.w	r9, [r5], #1
 800cc84:	1aea      	subs	r2, r5, r3
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	dd07      	ble.n	800cc9c <_dtoa_r+0xb64>
 800cc8c:	4651      	mov	r1, sl
 800cc8e:	2300      	movs	r3, #0
 800cc90:	220a      	movs	r2, #10
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 fc5a 	bl	800d54c <__multadd>
 800cc98:	4682      	mov	sl, r0
 800cc9a:	e7ea      	b.n	800cc72 <_dtoa_r+0xb3a>
 800cc9c:	9b01      	ldr	r3, [sp, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	bfc8      	it	gt
 800cca2:	461d      	movgt	r5, r3
 800cca4:	9b00      	ldr	r3, [sp, #0]
 800cca6:	bfd8      	it	le
 800cca8:	2501      	movle	r5, #1
 800ccaa:	441d      	add	r5, r3
 800ccac:	f04f 0800 	mov.w	r8, #0
 800ccb0:	4651      	mov	r1, sl
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fe41 	bl	800d93c <__lshift>
 800ccba:	4631      	mov	r1, r6
 800ccbc:	4682      	mov	sl, r0
 800ccbe:	f000 fea9 	bl	800da14 <__mcmp>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	dc96      	bgt.n	800cbf4 <_dtoa_r+0xabc>
 800ccc6:	d102      	bne.n	800ccce <_dtoa_r+0xb96>
 800ccc8:	f019 0f01 	tst.w	r9, #1
 800cccc:	d192      	bne.n	800cbf4 <_dtoa_r+0xabc>
 800ccce:	462b      	mov	r3, r5
 800ccd0:	461d      	mov	r5, r3
 800ccd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd6:	2a30      	cmp	r2, #48	; 0x30
 800ccd8:	d0fa      	beq.n	800ccd0 <_dtoa_r+0xb98>
 800ccda:	e6dd      	b.n	800ca98 <_dtoa_r+0x960>
 800ccdc:	9a00      	ldr	r2, [sp, #0]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d189      	bne.n	800cbf6 <_dtoa_r+0xabe>
 800cce2:	f10b 0b01 	add.w	fp, fp, #1
 800cce6:	2331      	movs	r3, #49	; 0x31
 800cce8:	e796      	b.n	800cc18 <_dtoa_r+0xae0>
 800ccea:	4b0a      	ldr	r3, [pc, #40]	; (800cd14 <_dtoa_r+0xbdc>)
 800ccec:	f7ff ba99 	b.w	800c222 <_dtoa_r+0xea>
 800ccf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f47f aa6d 	bne.w	800c1d2 <_dtoa_r+0x9a>
 800ccf8:	4b07      	ldr	r3, [pc, #28]	; (800cd18 <_dtoa_r+0xbe0>)
 800ccfa:	f7ff ba92 	b.w	800c222 <_dtoa_r+0xea>
 800ccfe:	9b01      	ldr	r3, [sp, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	dcb5      	bgt.n	800cc70 <_dtoa_r+0xb38>
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	f73f aeb1 	bgt.w	800ca6e <_dtoa_r+0x936>
 800cd0c:	e7b0      	b.n	800cc70 <_dtoa_r+0xb38>
 800cd0e:	bf00      	nop
 800cd10:	0800febc 	.word	0x0800febc
 800cd14:	0800fd79 	.word	0x0800fd79
 800cd18:	0800fe57 	.word	0x0800fe57

0800cd1c <_free_r>:
 800cd1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d044      	beq.n	800cdac <_free_r+0x90>
 800cd22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd26:	9001      	str	r0, [sp, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd2e:	bfb8      	it	lt
 800cd30:	18e4      	addlt	r4, r4, r3
 800cd32:	f7fd f995 	bl	800a060 <__malloc_lock>
 800cd36:	4a1e      	ldr	r2, [pc, #120]	; (800cdb0 <_free_r+0x94>)
 800cd38:	9801      	ldr	r0, [sp, #4]
 800cd3a:	6813      	ldr	r3, [r2, #0]
 800cd3c:	b933      	cbnz	r3, 800cd4c <_free_r+0x30>
 800cd3e:	6063      	str	r3, [r4, #4]
 800cd40:	6014      	str	r4, [r2, #0]
 800cd42:	b003      	add	sp, #12
 800cd44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd48:	f7fd b990 	b.w	800a06c <__malloc_unlock>
 800cd4c:	42a3      	cmp	r3, r4
 800cd4e:	d908      	bls.n	800cd62 <_free_r+0x46>
 800cd50:	6825      	ldr	r5, [r4, #0]
 800cd52:	1961      	adds	r1, r4, r5
 800cd54:	428b      	cmp	r3, r1
 800cd56:	bf01      	itttt	eq
 800cd58:	6819      	ldreq	r1, [r3, #0]
 800cd5a:	685b      	ldreq	r3, [r3, #4]
 800cd5c:	1949      	addeq	r1, r1, r5
 800cd5e:	6021      	streq	r1, [r4, #0]
 800cd60:	e7ed      	b.n	800cd3e <_free_r+0x22>
 800cd62:	461a      	mov	r2, r3
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	b10b      	cbz	r3, 800cd6c <_free_r+0x50>
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d9fa      	bls.n	800cd62 <_free_r+0x46>
 800cd6c:	6811      	ldr	r1, [r2, #0]
 800cd6e:	1855      	adds	r5, r2, r1
 800cd70:	42a5      	cmp	r5, r4
 800cd72:	d10b      	bne.n	800cd8c <_free_r+0x70>
 800cd74:	6824      	ldr	r4, [r4, #0]
 800cd76:	4421      	add	r1, r4
 800cd78:	1854      	adds	r4, r2, r1
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	6011      	str	r1, [r2, #0]
 800cd7e:	d1e0      	bne.n	800cd42 <_free_r+0x26>
 800cd80:	681c      	ldr	r4, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	6053      	str	r3, [r2, #4]
 800cd86:	440c      	add	r4, r1
 800cd88:	6014      	str	r4, [r2, #0]
 800cd8a:	e7da      	b.n	800cd42 <_free_r+0x26>
 800cd8c:	d902      	bls.n	800cd94 <_free_r+0x78>
 800cd8e:	230c      	movs	r3, #12
 800cd90:	6003      	str	r3, [r0, #0]
 800cd92:	e7d6      	b.n	800cd42 <_free_r+0x26>
 800cd94:	6825      	ldr	r5, [r4, #0]
 800cd96:	1961      	adds	r1, r4, r5
 800cd98:	428b      	cmp	r3, r1
 800cd9a:	bf04      	itt	eq
 800cd9c:	6819      	ldreq	r1, [r3, #0]
 800cd9e:	685b      	ldreq	r3, [r3, #4]
 800cda0:	6063      	str	r3, [r4, #4]
 800cda2:	bf04      	itt	eq
 800cda4:	1949      	addeq	r1, r1, r5
 800cda6:	6021      	streq	r1, [r4, #0]
 800cda8:	6054      	str	r4, [r2, #4]
 800cdaa:	e7ca      	b.n	800cd42 <_free_r+0x26>
 800cdac:	b003      	add	sp, #12
 800cdae:	bd30      	pop	{r4, r5, pc}
 800cdb0:	200046f8 	.word	0x200046f8

0800cdb4 <rshift>:
 800cdb4:	6903      	ldr	r3, [r0, #16]
 800cdb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cdba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdc2:	f100 0414 	add.w	r4, r0, #20
 800cdc6:	dd45      	ble.n	800ce54 <rshift+0xa0>
 800cdc8:	f011 011f 	ands.w	r1, r1, #31
 800cdcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cdd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdd4:	d10c      	bne.n	800cdf0 <rshift+0x3c>
 800cdd6:	f100 0710 	add.w	r7, r0, #16
 800cdda:	4629      	mov	r1, r5
 800cddc:	42b1      	cmp	r1, r6
 800cdde:	d334      	bcc.n	800ce4a <rshift+0x96>
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	1eea      	subs	r2, r5, #3
 800cde6:	4296      	cmp	r6, r2
 800cde8:	bf38      	it	cc
 800cdea:	2300      	movcc	r3, #0
 800cdec:	4423      	add	r3, r4
 800cdee:	e015      	b.n	800ce1c <rshift+0x68>
 800cdf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdf4:	f1c1 0820 	rsb	r8, r1, #32
 800cdf8:	40cf      	lsrs	r7, r1
 800cdfa:	f105 0e04 	add.w	lr, r5, #4
 800cdfe:	46a1      	mov	r9, r4
 800ce00:	4576      	cmp	r6, lr
 800ce02:	46f4      	mov	ip, lr
 800ce04:	d815      	bhi.n	800ce32 <rshift+0x7e>
 800ce06:	1a9a      	subs	r2, r3, r2
 800ce08:	0092      	lsls	r2, r2, #2
 800ce0a:	3a04      	subs	r2, #4
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	42ae      	cmp	r6, r5
 800ce10:	bf38      	it	cc
 800ce12:	2200      	movcc	r2, #0
 800ce14:	18a3      	adds	r3, r4, r2
 800ce16:	50a7      	str	r7, [r4, r2]
 800ce18:	b107      	cbz	r7, 800ce1c <rshift+0x68>
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	1b1a      	subs	r2, r3, r4
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce24:	bf08      	it	eq
 800ce26:	2300      	moveq	r3, #0
 800ce28:	6102      	str	r2, [r0, #16]
 800ce2a:	bf08      	it	eq
 800ce2c:	6143      	streq	r3, [r0, #20]
 800ce2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce32:	f8dc c000 	ldr.w	ip, [ip]
 800ce36:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce3a:	ea4c 0707 	orr.w	r7, ip, r7
 800ce3e:	f849 7b04 	str.w	r7, [r9], #4
 800ce42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce46:	40cf      	lsrs	r7, r1
 800ce48:	e7da      	b.n	800ce00 <rshift+0x4c>
 800ce4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce52:	e7c3      	b.n	800cddc <rshift+0x28>
 800ce54:	4623      	mov	r3, r4
 800ce56:	e7e1      	b.n	800ce1c <rshift+0x68>

0800ce58 <__hexdig_fun>:
 800ce58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce5c:	2b09      	cmp	r3, #9
 800ce5e:	d802      	bhi.n	800ce66 <__hexdig_fun+0xe>
 800ce60:	3820      	subs	r0, #32
 800ce62:	b2c0      	uxtb	r0, r0
 800ce64:	4770      	bx	lr
 800ce66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce6a:	2b05      	cmp	r3, #5
 800ce6c:	d801      	bhi.n	800ce72 <__hexdig_fun+0x1a>
 800ce6e:	3847      	subs	r0, #71	; 0x47
 800ce70:	e7f7      	b.n	800ce62 <__hexdig_fun+0xa>
 800ce72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce76:	2b05      	cmp	r3, #5
 800ce78:	d801      	bhi.n	800ce7e <__hexdig_fun+0x26>
 800ce7a:	3827      	subs	r0, #39	; 0x27
 800ce7c:	e7f1      	b.n	800ce62 <__hexdig_fun+0xa>
 800ce7e:	2000      	movs	r0, #0
 800ce80:	4770      	bx	lr
	...

0800ce84 <__gethex>:
 800ce84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce88:	4617      	mov	r7, r2
 800ce8a:	680a      	ldr	r2, [r1, #0]
 800ce8c:	b085      	sub	sp, #20
 800ce8e:	f102 0b02 	add.w	fp, r2, #2
 800ce92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce9a:	4681      	mov	r9, r0
 800ce9c:	468a      	mov	sl, r1
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	32fe      	adds	r2, #254	; 0xfe
 800cea2:	eb02 030b 	add.w	r3, r2, fp
 800cea6:	46d8      	mov	r8, fp
 800cea8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ceac:	9301      	str	r3, [sp, #4]
 800ceae:	2830      	cmp	r0, #48	; 0x30
 800ceb0:	d0f7      	beq.n	800cea2 <__gethex+0x1e>
 800ceb2:	f7ff ffd1 	bl	800ce58 <__hexdig_fun>
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	d138      	bne.n	800cf2e <__gethex+0xaa>
 800cebc:	49a7      	ldr	r1, [pc, #668]	; (800d15c <__gethex+0x2d8>)
 800cebe:	2201      	movs	r2, #1
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7fe ff28 	bl	800bd16 <strncmp>
 800cec6:	4606      	mov	r6, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d169      	bne.n	800cfa0 <__gethex+0x11c>
 800cecc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ced0:	465d      	mov	r5, fp
 800ced2:	f7ff ffc1 	bl	800ce58 <__hexdig_fun>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d064      	beq.n	800cfa4 <__gethex+0x120>
 800ceda:	465a      	mov	r2, fp
 800cedc:	7810      	ldrb	r0, [r2, #0]
 800cede:	2830      	cmp	r0, #48	; 0x30
 800cee0:	4690      	mov	r8, r2
 800cee2:	f102 0201 	add.w	r2, r2, #1
 800cee6:	d0f9      	beq.n	800cedc <__gethex+0x58>
 800cee8:	f7ff ffb6 	bl	800ce58 <__hexdig_fun>
 800ceec:	2301      	movs	r3, #1
 800ceee:	fab0 f480 	clz	r4, r0
 800cef2:	0964      	lsrs	r4, r4, #5
 800cef4:	465e      	mov	r6, fp
 800cef6:	9301      	str	r3, [sp, #4]
 800cef8:	4642      	mov	r2, r8
 800cefa:	4615      	mov	r5, r2
 800cefc:	3201      	adds	r2, #1
 800cefe:	7828      	ldrb	r0, [r5, #0]
 800cf00:	f7ff ffaa 	bl	800ce58 <__hexdig_fun>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1f8      	bne.n	800cefa <__gethex+0x76>
 800cf08:	4994      	ldr	r1, [pc, #592]	; (800d15c <__gethex+0x2d8>)
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f7fe ff02 	bl	800bd16 <strncmp>
 800cf12:	b978      	cbnz	r0, 800cf34 <__gethex+0xb0>
 800cf14:	b946      	cbnz	r6, 800cf28 <__gethex+0xa4>
 800cf16:	1c6e      	adds	r6, r5, #1
 800cf18:	4632      	mov	r2, r6
 800cf1a:	4615      	mov	r5, r2
 800cf1c:	3201      	adds	r2, #1
 800cf1e:	7828      	ldrb	r0, [r5, #0]
 800cf20:	f7ff ff9a 	bl	800ce58 <__hexdig_fun>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d1f8      	bne.n	800cf1a <__gethex+0x96>
 800cf28:	1b73      	subs	r3, r6, r5
 800cf2a:	009e      	lsls	r6, r3, #2
 800cf2c:	e004      	b.n	800cf38 <__gethex+0xb4>
 800cf2e:	2400      	movs	r4, #0
 800cf30:	4626      	mov	r6, r4
 800cf32:	e7e1      	b.n	800cef8 <__gethex+0x74>
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	d1f7      	bne.n	800cf28 <__gethex+0xa4>
 800cf38:	782b      	ldrb	r3, [r5, #0]
 800cf3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf3e:	2b50      	cmp	r3, #80	; 0x50
 800cf40:	d13d      	bne.n	800cfbe <__gethex+0x13a>
 800cf42:	786b      	ldrb	r3, [r5, #1]
 800cf44:	2b2b      	cmp	r3, #43	; 0x2b
 800cf46:	d02f      	beq.n	800cfa8 <__gethex+0x124>
 800cf48:	2b2d      	cmp	r3, #45	; 0x2d
 800cf4a:	d031      	beq.n	800cfb0 <__gethex+0x12c>
 800cf4c:	1c69      	adds	r1, r5, #1
 800cf4e:	f04f 0b00 	mov.w	fp, #0
 800cf52:	7808      	ldrb	r0, [r1, #0]
 800cf54:	f7ff ff80 	bl	800ce58 <__hexdig_fun>
 800cf58:	1e42      	subs	r2, r0, #1
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	2a18      	cmp	r2, #24
 800cf5e:	d82e      	bhi.n	800cfbe <__gethex+0x13a>
 800cf60:	f1a0 0210 	sub.w	r2, r0, #16
 800cf64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf68:	f7ff ff76 	bl	800ce58 <__hexdig_fun>
 800cf6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf70:	fa5f fc8c 	uxtb.w	ip, ip
 800cf74:	f1bc 0f18 	cmp.w	ip, #24
 800cf78:	d91d      	bls.n	800cfb6 <__gethex+0x132>
 800cf7a:	f1bb 0f00 	cmp.w	fp, #0
 800cf7e:	d000      	beq.n	800cf82 <__gethex+0xfe>
 800cf80:	4252      	negs	r2, r2
 800cf82:	4416      	add	r6, r2
 800cf84:	f8ca 1000 	str.w	r1, [sl]
 800cf88:	b1dc      	cbz	r4, 800cfc2 <__gethex+0x13e>
 800cf8a:	9b01      	ldr	r3, [sp, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bf14      	ite	ne
 800cf90:	f04f 0800 	movne.w	r8, #0
 800cf94:	f04f 0806 	moveq.w	r8, #6
 800cf98:	4640      	mov	r0, r8
 800cf9a:	b005      	add	sp, #20
 800cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa0:	4645      	mov	r5, r8
 800cfa2:	4626      	mov	r6, r4
 800cfa4:	2401      	movs	r4, #1
 800cfa6:	e7c7      	b.n	800cf38 <__gethex+0xb4>
 800cfa8:	f04f 0b00 	mov.w	fp, #0
 800cfac:	1ca9      	adds	r1, r5, #2
 800cfae:	e7d0      	b.n	800cf52 <__gethex+0xce>
 800cfb0:	f04f 0b01 	mov.w	fp, #1
 800cfb4:	e7fa      	b.n	800cfac <__gethex+0x128>
 800cfb6:	230a      	movs	r3, #10
 800cfb8:	fb03 0002 	mla	r0, r3, r2, r0
 800cfbc:	e7d0      	b.n	800cf60 <__gethex+0xdc>
 800cfbe:	4629      	mov	r1, r5
 800cfc0:	e7e0      	b.n	800cf84 <__gethex+0x100>
 800cfc2:	eba5 0308 	sub.w	r3, r5, r8
 800cfc6:	3b01      	subs	r3, #1
 800cfc8:	4621      	mov	r1, r4
 800cfca:	2b07      	cmp	r3, #7
 800cfcc:	dc0a      	bgt.n	800cfe4 <__gethex+0x160>
 800cfce:	4648      	mov	r0, r9
 800cfd0:	f000 fa5a 	bl	800d488 <_Balloc>
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	b940      	cbnz	r0, 800cfea <__gethex+0x166>
 800cfd8:	4b61      	ldr	r3, [pc, #388]	; (800d160 <__gethex+0x2dc>)
 800cfda:	4602      	mov	r2, r0
 800cfdc:	21e4      	movs	r1, #228	; 0xe4
 800cfde:	4861      	ldr	r0, [pc, #388]	; (800d164 <__gethex+0x2e0>)
 800cfe0:	f7ff f804 	bl	800bfec <__assert_func>
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	105b      	asrs	r3, r3, #1
 800cfe8:	e7ef      	b.n	800cfca <__gethex+0x146>
 800cfea:	f100 0a14 	add.w	sl, r0, #20
 800cfee:	2300      	movs	r3, #0
 800cff0:	495a      	ldr	r1, [pc, #360]	; (800d15c <__gethex+0x2d8>)
 800cff2:	f8cd a004 	str.w	sl, [sp, #4]
 800cff6:	469b      	mov	fp, r3
 800cff8:	45a8      	cmp	r8, r5
 800cffa:	d342      	bcc.n	800d082 <__gethex+0x1fe>
 800cffc:	9801      	ldr	r0, [sp, #4]
 800cffe:	f840 bb04 	str.w	fp, [r0], #4
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	1080      	asrs	r0, r0, #2
 800d008:	6120      	str	r0, [r4, #16]
 800d00a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d00e:	4658      	mov	r0, fp
 800d010:	f000 fb2c 	bl	800d66c <__hi0bits>
 800d014:	683d      	ldr	r5, [r7, #0]
 800d016:	eba8 0000 	sub.w	r0, r8, r0
 800d01a:	42a8      	cmp	r0, r5
 800d01c:	dd59      	ble.n	800d0d2 <__gethex+0x24e>
 800d01e:	eba0 0805 	sub.w	r8, r0, r5
 800d022:	4641      	mov	r1, r8
 800d024:	4620      	mov	r0, r4
 800d026:	f000 febb 	bl	800dda0 <__any_on>
 800d02a:	4683      	mov	fp, r0
 800d02c:	b1b8      	cbz	r0, 800d05e <__gethex+0x1da>
 800d02e:	f108 33ff 	add.w	r3, r8, #4294967295
 800d032:	1159      	asrs	r1, r3, #5
 800d034:	f003 021f 	and.w	r2, r3, #31
 800d038:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d03c:	f04f 0b01 	mov.w	fp, #1
 800d040:	fa0b f202 	lsl.w	r2, fp, r2
 800d044:	420a      	tst	r2, r1
 800d046:	d00a      	beq.n	800d05e <__gethex+0x1da>
 800d048:	455b      	cmp	r3, fp
 800d04a:	dd06      	ble.n	800d05a <__gethex+0x1d6>
 800d04c:	f1a8 0102 	sub.w	r1, r8, #2
 800d050:	4620      	mov	r0, r4
 800d052:	f000 fea5 	bl	800dda0 <__any_on>
 800d056:	2800      	cmp	r0, #0
 800d058:	d138      	bne.n	800d0cc <__gethex+0x248>
 800d05a:	f04f 0b02 	mov.w	fp, #2
 800d05e:	4641      	mov	r1, r8
 800d060:	4620      	mov	r0, r4
 800d062:	f7ff fea7 	bl	800cdb4 <rshift>
 800d066:	4446      	add	r6, r8
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	42b3      	cmp	r3, r6
 800d06c:	da41      	bge.n	800d0f2 <__gethex+0x26e>
 800d06e:	4621      	mov	r1, r4
 800d070:	4648      	mov	r0, r9
 800d072:	f000 fa49 	bl	800d508 <_Bfree>
 800d076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d078:	2300      	movs	r3, #0
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d080:	e78a      	b.n	800cf98 <__gethex+0x114>
 800d082:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d086:	2a2e      	cmp	r2, #46	; 0x2e
 800d088:	d014      	beq.n	800d0b4 <__gethex+0x230>
 800d08a:	2b20      	cmp	r3, #32
 800d08c:	d106      	bne.n	800d09c <__gethex+0x218>
 800d08e:	9b01      	ldr	r3, [sp, #4]
 800d090:	f843 bb04 	str.w	fp, [r3], #4
 800d094:	f04f 0b00 	mov.w	fp, #0
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	465b      	mov	r3, fp
 800d09c:	7828      	ldrb	r0, [r5, #0]
 800d09e:	9303      	str	r3, [sp, #12]
 800d0a0:	f7ff feda 	bl	800ce58 <__hexdig_fun>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	f000 000f 	and.w	r0, r0, #15
 800d0aa:	4098      	lsls	r0, r3
 800d0ac:	ea4b 0b00 	orr.w	fp, fp, r0
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	e7a1      	b.n	800cff8 <__gethex+0x174>
 800d0b4:	45a8      	cmp	r8, r5
 800d0b6:	d8e8      	bhi.n	800d08a <__gethex+0x206>
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	9303      	str	r3, [sp, #12]
 800d0be:	f7fe fe2a 	bl	800bd16 <strncmp>
 800d0c2:	4926      	ldr	r1, [pc, #152]	; (800d15c <__gethex+0x2d8>)
 800d0c4:	9b03      	ldr	r3, [sp, #12]
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d1df      	bne.n	800d08a <__gethex+0x206>
 800d0ca:	e795      	b.n	800cff8 <__gethex+0x174>
 800d0cc:	f04f 0b03 	mov.w	fp, #3
 800d0d0:	e7c5      	b.n	800d05e <__gethex+0x1da>
 800d0d2:	da0b      	bge.n	800d0ec <__gethex+0x268>
 800d0d4:	eba5 0800 	sub.w	r8, r5, r0
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4642      	mov	r2, r8
 800d0dc:	4648      	mov	r0, r9
 800d0de:	f000 fc2d 	bl	800d93c <__lshift>
 800d0e2:	eba6 0608 	sub.w	r6, r6, r8
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	f100 0a14 	add.w	sl, r0, #20
 800d0ec:	f04f 0b00 	mov.w	fp, #0
 800d0f0:	e7ba      	b.n	800d068 <__gethex+0x1e4>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	42b3      	cmp	r3, r6
 800d0f6:	dd73      	ble.n	800d1e0 <__gethex+0x35c>
 800d0f8:	1b9e      	subs	r6, r3, r6
 800d0fa:	42b5      	cmp	r5, r6
 800d0fc:	dc34      	bgt.n	800d168 <__gethex+0x2e4>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d023      	beq.n	800d14c <__gethex+0x2c8>
 800d104:	2b03      	cmp	r3, #3
 800d106:	d025      	beq.n	800d154 <__gethex+0x2d0>
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d115      	bne.n	800d138 <__gethex+0x2b4>
 800d10c:	42b5      	cmp	r5, r6
 800d10e:	d113      	bne.n	800d138 <__gethex+0x2b4>
 800d110:	2d01      	cmp	r5, #1
 800d112:	d10b      	bne.n	800d12c <__gethex+0x2a8>
 800d114:	9a02      	ldr	r2, [sp, #8]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	2301      	movs	r3, #1
 800d11c:	6123      	str	r3, [r4, #16]
 800d11e:	f8ca 3000 	str.w	r3, [sl]
 800d122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d124:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d128:	601c      	str	r4, [r3, #0]
 800d12a:	e735      	b.n	800cf98 <__gethex+0x114>
 800d12c:	1e69      	subs	r1, r5, #1
 800d12e:	4620      	mov	r0, r4
 800d130:	f000 fe36 	bl	800dda0 <__any_on>
 800d134:	2800      	cmp	r0, #0
 800d136:	d1ed      	bne.n	800d114 <__gethex+0x290>
 800d138:	4621      	mov	r1, r4
 800d13a:	4648      	mov	r0, r9
 800d13c:	f000 f9e4 	bl	800d508 <_Bfree>
 800d140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d142:	2300      	movs	r3, #0
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d14a:	e725      	b.n	800cf98 <__gethex+0x114>
 800d14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1f2      	bne.n	800d138 <__gethex+0x2b4>
 800d152:	e7df      	b.n	800d114 <__gethex+0x290>
 800d154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1dc      	bne.n	800d114 <__gethex+0x290>
 800d15a:	e7ed      	b.n	800d138 <__gethex+0x2b4>
 800d15c:	0800fc14 	.word	0x0800fc14
 800d160:	0800febc 	.word	0x0800febc
 800d164:	0800fecd 	.word	0x0800fecd
 800d168:	f106 38ff 	add.w	r8, r6, #4294967295
 800d16c:	f1bb 0f00 	cmp.w	fp, #0
 800d170:	d133      	bne.n	800d1da <__gethex+0x356>
 800d172:	f1b8 0f00 	cmp.w	r8, #0
 800d176:	d004      	beq.n	800d182 <__gethex+0x2fe>
 800d178:	4641      	mov	r1, r8
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 fe10 	bl	800dda0 <__any_on>
 800d180:	4683      	mov	fp, r0
 800d182:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d186:	2301      	movs	r3, #1
 800d188:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d18c:	f008 081f 	and.w	r8, r8, #31
 800d190:	fa03 f308 	lsl.w	r3, r3, r8
 800d194:	4213      	tst	r3, r2
 800d196:	4631      	mov	r1, r6
 800d198:	4620      	mov	r0, r4
 800d19a:	bf18      	it	ne
 800d19c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d1a0:	1bad      	subs	r5, r5, r6
 800d1a2:	f7ff fe07 	bl	800cdb4 <rshift>
 800d1a6:	687e      	ldr	r6, [r7, #4]
 800d1a8:	f04f 0802 	mov.w	r8, #2
 800d1ac:	f1bb 0f00 	cmp.w	fp, #0
 800d1b0:	d04a      	beq.n	800d248 <__gethex+0x3c4>
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d016      	beq.n	800d1e6 <__gethex+0x362>
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d018      	beq.n	800d1ee <__gethex+0x36a>
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d109      	bne.n	800d1d4 <__gethex+0x350>
 800d1c0:	f01b 0f02 	tst.w	fp, #2
 800d1c4:	d006      	beq.n	800d1d4 <__gethex+0x350>
 800d1c6:	f8da 3000 	ldr.w	r3, [sl]
 800d1ca:	ea4b 0b03 	orr.w	fp, fp, r3
 800d1ce:	f01b 0f01 	tst.w	fp, #1
 800d1d2:	d10f      	bne.n	800d1f4 <__gethex+0x370>
 800d1d4:	f048 0810 	orr.w	r8, r8, #16
 800d1d8:	e036      	b.n	800d248 <__gethex+0x3c4>
 800d1da:	f04f 0b01 	mov.w	fp, #1
 800d1de:	e7d0      	b.n	800d182 <__gethex+0x2fe>
 800d1e0:	f04f 0801 	mov.w	r8, #1
 800d1e4:	e7e2      	b.n	800d1ac <__gethex+0x328>
 800d1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1e8:	f1c3 0301 	rsb	r3, r3, #1
 800d1ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d0ef      	beq.n	800d1d4 <__gethex+0x350>
 800d1f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1f8:	f104 0214 	add.w	r2, r4, #20
 800d1fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d206:	2300      	movs	r3, #0
 800d208:	4694      	mov	ip, r2
 800d20a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d20e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d212:	d01e      	beq.n	800d252 <__gethex+0x3ce>
 800d214:	3101      	adds	r1, #1
 800d216:	f8cc 1000 	str.w	r1, [ip]
 800d21a:	f1b8 0f02 	cmp.w	r8, #2
 800d21e:	f104 0214 	add.w	r2, r4, #20
 800d222:	d13d      	bne.n	800d2a0 <__gethex+0x41c>
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	3b01      	subs	r3, #1
 800d228:	42ab      	cmp	r3, r5
 800d22a:	d10b      	bne.n	800d244 <__gethex+0x3c0>
 800d22c:	1169      	asrs	r1, r5, #5
 800d22e:	2301      	movs	r3, #1
 800d230:	f005 051f 	and.w	r5, r5, #31
 800d234:	fa03 f505 	lsl.w	r5, r3, r5
 800d238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d23c:	421d      	tst	r5, r3
 800d23e:	bf18      	it	ne
 800d240:	f04f 0801 	movne.w	r8, #1
 800d244:	f048 0820 	orr.w	r8, r8, #32
 800d248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d24a:	601c      	str	r4, [r3, #0]
 800d24c:	9b02      	ldr	r3, [sp, #8]
 800d24e:	601e      	str	r6, [r3, #0]
 800d250:	e6a2      	b.n	800cf98 <__gethex+0x114>
 800d252:	4290      	cmp	r0, r2
 800d254:	f842 3c04 	str.w	r3, [r2, #-4]
 800d258:	d8d6      	bhi.n	800d208 <__gethex+0x384>
 800d25a:	68a2      	ldr	r2, [r4, #8]
 800d25c:	4593      	cmp	fp, r2
 800d25e:	db17      	blt.n	800d290 <__gethex+0x40c>
 800d260:	6861      	ldr	r1, [r4, #4]
 800d262:	4648      	mov	r0, r9
 800d264:	3101      	adds	r1, #1
 800d266:	f000 f90f 	bl	800d488 <_Balloc>
 800d26a:	4682      	mov	sl, r0
 800d26c:	b918      	cbnz	r0, 800d276 <__gethex+0x3f2>
 800d26e:	4b1b      	ldr	r3, [pc, #108]	; (800d2dc <__gethex+0x458>)
 800d270:	4602      	mov	r2, r0
 800d272:	2184      	movs	r1, #132	; 0x84
 800d274:	e6b3      	b.n	800cfde <__gethex+0x15a>
 800d276:	6922      	ldr	r2, [r4, #16]
 800d278:	3202      	adds	r2, #2
 800d27a:	f104 010c 	add.w	r1, r4, #12
 800d27e:	0092      	lsls	r2, r2, #2
 800d280:	300c      	adds	r0, #12
 800d282:	f7fe fe94 	bl	800bfae <memcpy>
 800d286:	4621      	mov	r1, r4
 800d288:	4648      	mov	r0, r9
 800d28a:	f000 f93d 	bl	800d508 <_Bfree>
 800d28e:	4654      	mov	r4, sl
 800d290:	6922      	ldr	r2, [r4, #16]
 800d292:	1c51      	adds	r1, r2, #1
 800d294:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d298:	6121      	str	r1, [r4, #16]
 800d29a:	2101      	movs	r1, #1
 800d29c:	6151      	str	r1, [r2, #20]
 800d29e:	e7bc      	b.n	800d21a <__gethex+0x396>
 800d2a0:	6921      	ldr	r1, [r4, #16]
 800d2a2:	4559      	cmp	r1, fp
 800d2a4:	dd0b      	ble.n	800d2be <__gethex+0x43a>
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f7ff fd83 	bl	800cdb4 <rshift>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	3601      	adds	r6, #1
 800d2b2:	42b3      	cmp	r3, r6
 800d2b4:	f6ff aedb 	blt.w	800d06e <__gethex+0x1ea>
 800d2b8:	f04f 0801 	mov.w	r8, #1
 800d2bc:	e7c2      	b.n	800d244 <__gethex+0x3c0>
 800d2be:	f015 051f 	ands.w	r5, r5, #31
 800d2c2:	d0f9      	beq.n	800d2b8 <__gethex+0x434>
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	441a      	add	r2, r3
 800d2c8:	f1c5 0520 	rsb	r5, r5, #32
 800d2cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d2d0:	f000 f9cc 	bl	800d66c <__hi0bits>
 800d2d4:	42a8      	cmp	r0, r5
 800d2d6:	dbe6      	blt.n	800d2a6 <__gethex+0x422>
 800d2d8:	e7ee      	b.n	800d2b8 <__gethex+0x434>
 800d2da:	bf00      	nop
 800d2dc:	0800febc 	.word	0x0800febc

0800d2e0 <L_shift>:
 800d2e0:	f1c2 0208 	rsb	r2, r2, #8
 800d2e4:	0092      	lsls	r2, r2, #2
 800d2e6:	b570      	push	{r4, r5, r6, lr}
 800d2e8:	f1c2 0620 	rsb	r6, r2, #32
 800d2ec:	6843      	ldr	r3, [r0, #4]
 800d2ee:	6804      	ldr	r4, [r0, #0]
 800d2f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d2f4:	432c      	orrs	r4, r5
 800d2f6:	40d3      	lsrs	r3, r2
 800d2f8:	6004      	str	r4, [r0, #0]
 800d2fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2fe:	4288      	cmp	r0, r1
 800d300:	d3f4      	bcc.n	800d2ec <L_shift+0xc>
 800d302:	bd70      	pop	{r4, r5, r6, pc}

0800d304 <__match>:
 800d304:	b530      	push	{r4, r5, lr}
 800d306:	6803      	ldr	r3, [r0, #0]
 800d308:	3301      	adds	r3, #1
 800d30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d30e:	b914      	cbnz	r4, 800d316 <__match+0x12>
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	2001      	movs	r0, #1
 800d314:	bd30      	pop	{r4, r5, pc}
 800d316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d31a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d31e:	2d19      	cmp	r5, #25
 800d320:	bf98      	it	ls
 800d322:	3220      	addls	r2, #32
 800d324:	42a2      	cmp	r2, r4
 800d326:	d0f0      	beq.n	800d30a <__match+0x6>
 800d328:	2000      	movs	r0, #0
 800d32a:	e7f3      	b.n	800d314 <__match+0x10>

0800d32c <__hexnan>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	680b      	ldr	r3, [r1, #0]
 800d332:	6801      	ldr	r1, [r0, #0]
 800d334:	115e      	asrs	r6, r3, #5
 800d336:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d33a:	f013 031f 	ands.w	r3, r3, #31
 800d33e:	b087      	sub	sp, #28
 800d340:	bf18      	it	ne
 800d342:	3604      	addne	r6, #4
 800d344:	2500      	movs	r5, #0
 800d346:	1f37      	subs	r7, r6, #4
 800d348:	4682      	mov	sl, r0
 800d34a:	4690      	mov	r8, r2
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d352:	46b9      	mov	r9, r7
 800d354:	463c      	mov	r4, r7
 800d356:	9502      	str	r5, [sp, #8]
 800d358:	46ab      	mov	fp, r5
 800d35a:	784a      	ldrb	r2, [r1, #1]
 800d35c:	1c4b      	adds	r3, r1, #1
 800d35e:	9303      	str	r3, [sp, #12]
 800d360:	b342      	cbz	r2, 800d3b4 <__hexnan+0x88>
 800d362:	4610      	mov	r0, r2
 800d364:	9105      	str	r1, [sp, #20]
 800d366:	9204      	str	r2, [sp, #16]
 800d368:	f7ff fd76 	bl	800ce58 <__hexdig_fun>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d14f      	bne.n	800d410 <__hexnan+0xe4>
 800d370:	9a04      	ldr	r2, [sp, #16]
 800d372:	9905      	ldr	r1, [sp, #20]
 800d374:	2a20      	cmp	r2, #32
 800d376:	d818      	bhi.n	800d3aa <__hexnan+0x7e>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	459b      	cmp	fp, r3
 800d37c:	dd13      	ble.n	800d3a6 <__hexnan+0x7a>
 800d37e:	454c      	cmp	r4, r9
 800d380:	d206      	bcs.n	800d390 <__hexnan+0x64>
 800d382:	2d07      	cmp	r5, #7
 800d384:	dc04      	bgt.n	800d390 <__hexnan+0x64>
 800d386:	462a      	mov	r2, r5
 800d388:	4649      	mov	r1, r9
 800d38a:	4620      	mov	r0, r4
 800d38c:	f7ff ffa8 	bl	800d2e0 <L_shift>
 800d390:	4544      	cmp	r4, r8
 800d392:	d950      	bls.n	800d436 <__hexnan+0x10a>
 800d394:	2300      	movs	r3, #0
 800d396:	f1a4 0904 	sub.w	r9, r4, #4
 800d39a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d39e:	f8cd b008 	str.w	fp, [sp, #8]
 800d3a2:	464c      	mov	r4, r9
 800d3a4:	461d      	mov	r5, r3
 800d3a6:	9903      	ldr	r1, [sp, #12]
 800d3a8:	e7d7      	b.n	800d35a <__hexnan+0x2e>
 800d3aa:	2a29      	cmp	r2, #41	; 0x29
 800d3ac:	d155      	bne.n	800d45a <__hexnan+0x12e>
 800d3ae:	3102      	adds	r1, #2
 800d3b0:	f8ca 1000 	str.w	r1, [sl]
 800d3b4:	f1bb 0f00 	cmp.w	fp, #0
 800d3b8:	d04f      	beq.n	800d45a <__hexnan+0x12e>
 800d3ba:	454c      	cmp	r4, r9
 800d3bc:	d206      	bcs.n	800d3cc <__hexnan+0xa0>
 800d3be:	2d07      	cmp	r5, #7
 800d3c0:	dc04      	bgt.n	800d3cc <__hexnan+0xa0>
 800d3c2:	462a      	mov	r2, r5
 800d3c4:	4649      	mov	r1, r9
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f7ff ff8a 	bl	800d2e0 <L_shift>
 800d3cc:	4544      	cmp	r4, r8
 800d3ce:	d934      	bls.n	800d43a <__hexnan+0x10e>
 800d3d0:	f1a8 0204 	sub.w	r2, r8, #4
 800d3d4:	4623      	mov	r3, r4
 800d3d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3da:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3de:	429f      	cmp	r7, r3
 800d3e0:	d2f9      	bcs.n	800d3d6 <__hexnan+0xaa>
 800d3e2:	1b3b      	subs	r3, r7, r4
 800d3e4:	f023 0303 	bic.w	r3, r3, #3
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	3e03      	subs	r6, #3
 800d3ec:	3401      	adds	r4, #1
 800d3ee:	42a6      	cmp	r6, r4
 800d3f0:	bf38      	it	cc
 800d3f2:	2304      	movcc	r3, #4
 800d3f4:	4443      	add	r3, r8
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f843 2b04 	str.w	r2, [r3], #4
 800d3fc:	429f      	cmp	r7, r3
 800d3fe:	d2fb      	bcs.n	800d3f8 <__hexnan+0xcc>
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	b91b      	cbnz	r3, 800d40c <__hexnan+0xe0>
 800d404:	4547      	cmp	r7, r8
 800d406:	d126      	bne.n	800d456 <__hexnan+0x12a>
 800d408:	2301      	movs	r3, #1
 800d40a:	603b      	str	r3, [r7, #0]
 800d40c:	2005      	movs	r0, #5
 800d40e:	e025      	b.n	800d45c <__hexnan+0x130>
 800d410:	3501      	adds	r5, #1
 800d412:	2d08      	cmp	r5, #8
 800d414:	f10b 0b01 	add.w	fp, fp, #1
 800d418:	dd06      	ble.n	800d428 <__hexnan+0xfc>
 800d41a:	4544      	cmp	r4, r8
 800d41c:	d9c3      	bls.n	800d3a6 <__hexnan+0x7a>
 800d41e:	2300      	movs	r3, #0
 800d420:	f844 3c04 	str.w	r3, [r4, #-4]
 800d424:	2501      	movs	r5, #1
 800d426:	3c04      	subs	r4, #4
 800d428:	6822      	ldr	r2, [r4, #0]
 800d42a:	f000 000f 	and.w	r0, r0, #15
 800d42e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d432:	6020      	str	r0, [r4, #0]
 800d434:	e7b7      	b.n	800d3a6 <__hexnan+0x7a>
 800d436:	2508      	movs	r5, #8
 800d438:	e7b5      	b.n	800d3a6 <__hexnan+0x7a>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d0df      	beq.n	800d400 <__hexnan+0xd4>
 800d440:	f1c3 0320 	rsb	r3, r3, #32
 800d444:	f04f 32ff 	mov.w	r2, #4294967295
 800d448:	40da      	lsrs	r2, r3
 800d44a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d44e:	4013      	ands	r3, r2
 800d450:	f846 3c04 	str.w	r3, [r6, #-4]
 800d454:	e7d4      	b.n	800d400 <__hexnan+0xd4>
 800d456:	3f04      	subs	r7, #4
 800d458:	e7d2      	b.n	800d400 <__hexnan+0xd4>
 800d45a:	2004      	movs	r0, #4
 800d45c:	b007      	add	sp, #28
 800d45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d462 <__ascii_mbtowc>:
 800d462:	b082      	sub	sp, #8
 800d464:	b901      	cbnz	r1, 800d468 <__ascii_mbtowc+0x6>
 800d466:	a901      	add	r1, sp, #4
 800d468:	b142      	cbz	r2, 800d47c <__ascii_mbtowc+0x1a>
 800d46a:	b14b      	cbz	r3, 800d480 <__ascii_mbtowc+0x1e>
 800d46c:	7813      	ldrb	r3, [r2, #0]
 800d46e:	600b      	str	r3, [r1, #0]
 800d470:	7812      	ldrb	r2, [r2, #0]
 800d472:	1e10      	subs	r0, r2, #0
 800d474:	bf18      	it	ne
 800d476:	2001      	movne	r0, #1
 800d478:	b002      	add	sp, #8
 800d47a:	4770      	bx	lr
 800d47c:	4610      	mov	r0, r2
 800d47e:	e7fb      	b.n	800d478 <__ascii_mbtowc+0x16>
 800d480:	f06f 0001 	mvn.w	r0, #1
 800d484:	e7f8      	b.n	800d478 <__ascii_mbtowc+0x16>
	...

0800d488 <_Balloc>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	69c6      	ldr	r6, [r0, #28]
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	b976      	cbnz	r6, 800d4b0 <_Balloc+0x28>
 800d492:	2010      	movs	r0, #16
 800d494:	f7fc fd34 	bl	8009f00 <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	61e0      	str	r0, [r4, #28]
 800d49c:	b920      	cbnz	r0, 800d4a8 <_Balloc+0x20>
 800d49e:	4b18      	ldr	r3, [pc, #96]	; (800d500 <_Balloc+0x78>)
 800d4a0:	4818      	ldr	r0, [pc, #96]	; (800d504 <_Balloc+0x7c>)
 800d4a2:	216b      	movs	r1, #107	; 0x6b
 800d4a4:	f7fe fda2 	bl	800bfec <__assert_func>
 800d4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ac:	6006      	str	r6, [r0, #0]
 800d4ae:	60c6      	str	r6, [r0, #12]
 800d4b0:	69e6      	ldr	r6, [r4, #28]
 800d4b2:	68f3      	ldr	r3, [r6, #12]
 800d4b4:	b183      	cbz	r3, 800d4d8 <_Balloc+0x50>
 800d4b6:	69e3      	ldr	r3, [r4, #28]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4be:	b9b8      	cbnz	r0, 800d4f0 <_Balloc+0x68>
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4c6:	1d72      	adds	r2, r6, #5
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fecf 	bl	800e26e <_calloc_r>
 800d4d0:	b160      	cbz	r0, 800d4ec <_Balloc+0x64>
 800d4d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4d6:	e00e      	b.n	800d4f6 <_Balloc+0x6e>
 800d4d8:	2221      	movs	r2, #33	; 0x21
 800d4da:	2104      	movs	r1, #4
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fec6 	bl	800e26e <_calloc_r>
 800d4e2:	69e3      	ldr	r3, [r4, #28]
 800d4e4:	60f0      	str	r0, [r6, #12]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e4      	bne.n	800d4b6 <_Balloc+0x2e>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4fc:	e7f7      	b.n	800d4ee <_Balloc+0x66>
 800d4fe:	bf00      	nop
 800d500:	0800fda2 	.word	0x0800fda2
 800d504:	0800ff2d 	.word	0x0800ff2d

0800d508 <_Bfree>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	69c6      	ldr	r6, [r0, #28]
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	b976      	cbnz	r6, 800d530 <_Bfree+0x28>
 800d512:	2010      	movs	r0, #16
 800d514:	f7fc fcf4 	bl	8009f00 <malloc>
 800d518:	4602      	mov	r2, r0
 800d51a:	61e8      	str	r0, [r5, #28]
 800d51c:	b920      	cbnz	r0, 800d528 <_Bfree+0x20>
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <_Bfree+0x3c>)
 800d520:	4809      	ldr	r0, [pc, #36]	; (800d548 <_Bfree+0x40>)
 800d522:	218f      	movs	r1, #143	; 0x8f
 800d524:	f7fe fd62 	bl	800bfec <__assert_func>
 800d528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d52c:	6006      	str	r6, [r0, #0]
 800d52e:	60c6      	str	r6, [r0, #12]
 800d530:	b13c      	cbz	r4, 800d542 <_Bfree+0x3a>
 800d532:	69eb      	ldr	r3, [r5, #28]
 800d534:	6862      	ldr	r2, [r4, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d53c:	6021      	str	r1, [r4, #0]
 800d53e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	0800fda2 	.word	0x0800fda2
 800d548:	0800ff2d 	.word	0x0800ff2d

0800d54c <__multadd>:
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	690d      	ldr	r5, [r1, #16]
 800d552:	4607      	mov	r7, r0
 800d554:	460c      	mov	r4, r1
 800d556:	461e      	mov	r6, r3
 800d558:	f101 0c14 	add.w	ip, r1, #20
 800d55c:	2000      	movs	r0, #0
 800d55e:	f8dc 3000 	ldr.w	r3, [ip]
 800d562:	b299      	uxth	r1, r3
 800d564:	fb02 6101 	mla	r1, r2, r1, r6
 800d568:	0c1e      	lsrs	r6, r3, #16
 800d56a:	0c0b      	lsrs	r3, r1, #16
 800d56c:	fb02 3306 	mla	r3, r2, r6, r3
 800d570:	b289      	uxth	r1, r1
 800d572:	3001      	adds	r0, #1
 800d574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d578:	4285      	cmp	r5, r0
 800d57a:	f84c 1b04 	str.w	r1, [ip], #4
 800d57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d582:	dcec      	bgt.n	800d55e <__multadd+0x12>
 800d584:	b30e      	cbz	r6, 800d5ca <__multadd+0x7e>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dc19      	bgt.n	800d5c0 <__multadd+0x74>
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4638      	mov	r0, r7
 800d590:	3101      	adds	r1, #1
 800d592:	f7ff ff79 	bl	800d488 <_Balloc>
 800d596:	4680      	mov	r8, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <__multadd+0x5a>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <__multadd+0x84>)
 800d59e:	480d      	ldr	r0, [pc, #52]	; (800d5d4 <__multadd+0x88>)
 800d5a0:	21ba      	movs	r1, #186	; 0xba
 800d5a2:	f7fe fd23 	bl	800bfec <__assert_func>
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	f104 010c 	add.w	r1, r4, #12
 800d5ae:	0092      	lsls	r2, r2, #2
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f7fe fcfc 	bl	800bfae <memcpy>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ffa5 	bl	800d508 <_Bfree>
 800d5be:	4644      	mov	r4, r8
 800d5c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	615e      	str	r6, [r3, #20]
 800d5c8:	6125      	str	r5, [r4, #16]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	0800febc 	.word	0x0800febc
 800d5d4:	0800ff2d 	.word	0x0800ff2d

0800d5d8 <__s2b>:
 800d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	4615      	mov	r5, r2
 800d5e0:	461f      	mov	r7, r3
 800d5e2:	2209      	movs	r2, #9
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	db09      	blt.n	800d608 <__s2b+0x30>
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff ff47 	bl	800d488 <_Balloc>
 800d5fa:	b940      	cbnz	r0, 800d60e <__s2b+0x36>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	4b19      	ldr	r3, [pc, #100]	; (800d664 <__s2b+0x8c>)
 800d600:	4819      	ldr	r0, [pc, #100]	; (800d668 <__s2b+0x90>)
 800d602:	21d3      	movs	r1, #211	; 0xd3
 800d604:	f7fe fcf2 	bl	800bfec <__assert_func>
 800d608:	0052      	lsls	r2, r2, #1
 800d60a:	3101      	adds	r1, #1
 800d60c:	e7f0      	b.n	800d5f0 <__s2b+0x18>
 800d60e:	9b08      	ldr	r3, [sp, #32]
 800d610:	6143      	str	r3, [r0, #20]
 800d612:	2d09      	cmp	r5, #9
 800d614:	f04f 0301 	mov.w	r3, #1
 800d618:	6103      	str	r3, [r0, #16]
 800d61a:	dd16      	ble.n	800d64a <__s2b+0x72>
 800d61c:	f104 0909 	add.w	r9, r4, #9
 800d620:	46c8      	mov	r8, r9
 800d622:	442c      	add	r4, r5
 800d624:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d628:	4601      	mov	r1, r0
 800d62a:	3b30      	subs	r3, #48	; 0x30
 800d62c:	220a      	movs	r2, #10
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ff8c 	bl	800d54c <__multadd>
 800d634:	45a0      	cmp	r8, r4
 800d636:	d1f5      	bne.n	800d624 <__s2b+0x4c>
 800d638:	f1a5 0408 	sub.w	r4, r5, #8
 800d63c:	444c      	add	r4, r9
 800d63e:	1b2d      	subs	r5, r5, r4
 800d640:	1963      	adds	r3, r4, r5
 800d642:	42bb      	cmp	r3, r7
 800d644:	db04      	blt.n	800d650 <__s2b+0x78>
 800d646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64a:	340a      	adds	r4, #10
 800d64c:	2509      	movs	r5, #9
 800d64e:	e7f6      	b.n	800d63e <__s2b+0x66>
 800d650:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d654:	4601      	mov	r1, r0
 800d656:	3b30      	subs	r3, #48	; 0x30
 800d658:	220a      	movs	r2, #10
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7ff ff76 	bl	800d54c <__multadd>
 800d660:	e7ee      	b.n	800d640 <__s2b+0x68>
 800d662:	bf00      	nop
 800d664:	0800febc 	.word	0x0800febc
 800d668:	0800ff2d 	.word	0x0800ff2d

0800d66c <__hi0bits>:
 800d66c:	0c03      	lsrs	r3, r0, #16
 800d66e:	041b      	lsls	r3, r3, #16
 800d670:	b9d3      	cbnz	r3, 800d6a8 <__hi0bits+0x3c>
 800d672:	0400      	lsls	r0, r0, #16
 800d674:	2310      	movs	r3, #16
 800d676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d67a:	bf04      	itt	eq
 800d67c:	0200      	lsleq	r0, r0, #8
 800d67e:	3308      	addeq	r3, #8
 800d680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d684:	bf04      	itt	eq
 800d686:	0100      	lsleq	r0, r0, #4
 800d688:	3304      	addeq	r3, #4
 800d68a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d68e:	bf04      	itt	eq
 800d690:	0080      	lsleq	r0, r0, #2
 800d692:	3302      	addeq	r3, #2
 800d694:	2800      	cmp	r0, #0
 800d696:	db05      	blt.n	800d6a4 <__hi0bits+0x38>
 800d698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d69c:	f103 0301 	add.w	r3, r3, #1
 800d6a0:	bf08      	it	eq
 800d6a2:	2320      	moveq	r3, #32
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	4770      	bx	lr
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e7e4      	b.n	800d676 <__hi0bits+0xa>

0800d6ac <__lo0bits>:
 800d6ac:	6803      	ldr	r3, [r0, #0]
 800d6ae:	f013 0207 	ands.w	r2, r3, #7
 800d6b2:	d00c      	beq.n	800d6ce <__lo0bits+0x22>
 800d6b4:	07d9      	lsls	r1, r3, #31
 800d6b6:	d422      	bmi.n	800d6fe <__lo0bits+0x52>
 800d6b8:	079a      	lsls	r2, r3, #30
 800d6ba:	bf49      	itett	mi
 800d6bc:	085b      	lsrmi	r3, r3, #1
 800d6be:	089b      	lsrpl	r3, r3, #2
 800d6c0:	6003      	strmi	r3, [r0, #0]
 800d6c2:	2201      	movmi	r2, #1
 800d6c4:	bf5c      	itt	pl
 800d6c6:	6003      	strpl	r3, [r0, #0]
 800d6c8:	2202      	movpl	r2, #2
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	4770      	bx	lr
 800d6ce:	b299      	uxth	r1, r3
 800d6d0:	b909      	cbnz	r1, 800d6d6 <__lo0bits+0x2a>
 800d6d2:	0c1b      	lsrs	r3, r3, #16
 800d6d4:	2210      	movs	r2, #16
 800d6d6:	b2d9      	uxtb	r1, r3
 800d6d8:	b909      	cbnz	r1, 800d6de <__lo0bits+0x32>
 800d6da:	3208      	adds	r2, #8
 800d6dc:	0a1b      	lsrs	r3, r3, #8
 800d6de:	0719      	lsls	r1, r3, #28
 800d6e0:	bf04      	itt	eq
 800d6e2:	091b      	lsreq	r3, r3, #4
 800d6e4:	3204      	addeq	r2, #4
 800d6e6:	0799      	lsls	r1, r3, #30
 800d6e8:	bf04      	itt	eq
 800d6ea:	089b      	lsreq	r3, r3, #2
 800d6ec:	3202      	addeq	r2, #2
 800d6ee:	07d9      	lsls	r1, r3, #31
 800d6f0:	d403      	bmi.n	800d6fa <__lo0bits+0x4e>
 800d6f2:	085b      	lsrs	r3, r3, #1
 800d6f4:	f102 0201 	add.w	r2, r2, #1
 800d6f8:	d003      	beq.n	800d702 <__lo0bits+0x56>
 800d6fa:	6003      	str	r3, [r0, #0]
 800d6fc:	e7e5      	b.n	800d6ca <__lo0bits+0x1e>
 800d6fe:	2200      	movs	r2, #0
 800d700:	e7e3      	b.n	800d6ca <__lo0bits+0x1e>
 800d702:	2220      	movs	r2, #32
 800d704:	e7e1      	b.n	800d6ca <__lo0bits+0x1e>
	...

0800d708 <__i2b>:
 800d708:	b510      	push	{r4, lr}
 800d70a:	460c      	mov	r4, r1
 800d70c:	2101      	movs	r1, #1
 800d70e:	f7ff febb 	bl	800d488 <_Balloc>
 800d712:	4602      	mov	r2, r0
 800d714:	b928      	cbnz	r0, 800d722 <__i2b+0x1a>
 800d716:	4b05      	ldr	r3, [pc, #20]	; (800d72c <__i2b+0x24>)
 800d718:	4805      	ldr	r0, [pc, #20]	; (800d730 <__i2b+0x28>)
 800d71a:	f240 1145 	movw	r1, #325	; 0x145
 800d71e:	f7fe fc65 	bl	800bfec <__assert_func>
 800d722:	2301      	movs	r3, #1
 800d724:	6144      	str	r4, [r0, #20]
 800d726:	6103      	str	r3, [r0, #16]
 800d728:	bd10      	pop	{r4, pc}
 800d72a:	bf00      	nop
 800d72c:	0800febc 	.word	0x0800febc
 800d730:	0800ff2d 	.word	0x0800ff2d

0800d734 <__multiply>:
 800d734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d738:	4691      	mov	r9, r2
 800d73a:	690a      	ldr	r2, [r1, #16]
 800d73c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d740:	429a      	cmp	r2, r3
 800d742:	bfb8      	it	lt
 800d744:	460b      	movlt	r3, r1
 800d746:	460c      	mov	r4, r1
 800d748:	bfbc      	itt	lt
 800d74a:	464c      	movlt	r4, r9
 800d74c:	4699      	movlt	r9, r3
 800d74e:	6927      	ldr	r7, [r4, #16]
 800d750:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	6861      	ldr	r1, [r4, #4]
 800d758:	eb07 060a 	add.w	r6, r7, sl
 800d75c:	42b3      	cmp	r3, r6
 800d75e:	b085      	sub	sp, #20
 800d760:	bfb8      	it	lt
 800d762:	3101      	addlt	r1, #1
 800d764:	f7ff fe90 	bl	800d488 <_Balloc>
 800d768:	b930      	cbnz	r0, 800d778 <__multiply+0x44>
 800d76a:	4602      	mov	r2, r0
 800d76c:	4b44      	ldr	r3, [pc, #272]	; (800d880 <__multiply+0x14c>)
 800d76e:	4845      	ldr	r0, [pc, #276]	; (800d884 <__multiply+0x150>)
 800d770:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d774:	f7fe fc3a 	bl	800bfec <__assert_func>
 800d778:	f100 0514 	add.w	r5, r0, #20
 800d77c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d780:	462b      	mov	r3, r5
 800d782:	2200      	movs	r2, #0
 800d784:	4543      	cmp	r3, r8
 800d786:	d321      	bcc.n	800d7cc <__multiply+0x98>
 800d788:	f104 0314 	add.w	r3, r4, #20
 800d78c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d790:	f109 0314 	add.w	r3, r9, #20
 800d794:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d798:	9202      	str	r2, [sp, #8]
 800d79a:	1b3a      	subs	r2, r7, r4
 800d79c:	3a15      	subs	r2, #21
 800d79e:	f022 0203 	bic.w	r2, r2, #3
 800d7a2:	3204      	adds	r2, #4
 800d7a4:	f104 0115 	add.w	r1, r4, #21
 800d7a8:	428f      	cmp	r7, r1
 800d7aa:	bf38      	it	cc
 800d7ac:	2204      	movcc	r2, #4
 800d7ae:	9201      	str	r2, [sp, #4]
 800d7b0:	9a02      	ldr	r2, [sp, #8]
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d80c      	bhi.n	800d7d2 <__multiply+0x9e>
 800d7b8:	2e00      	cmp	r6, #0
 800d7ba:	dd03      	ble.n	800d7c4 <__multiply+0x90>
 800d7bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d05b      	beq.n	800d87c <__multiply+0x148>
 800d7c4:	6106      	str	r6, [r0, #16]
 800d7c6:	b005      	add	sp, #20
 800d7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7cc:	f843 2b04 	str.w	r2, [r3], #4
 800d7d0:	e7d8      	b.n	800d784 <__multiply+0x50>
 800d7d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7d6:	f1ba 0f00 	cmp.w	sl, #0
 800d7da:	d024      	beq.n	800d826 <__multiply+0xf2>
 800d7dc:	f104 0e14 	add.w	lr, r4, #20
 800d7e0:	46a9      	mov	r9, r5
 800d7e2:	f04f 0c00 	mov.w	ip, #0
 800d7e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7ea:	f8d9 1000 	ldr.w	r1, [r9]
 800d7ee:	fa1f fb82 	uxth.w	fp, r2
 800d7f2:	b289      	uxth	r1, r1
 800d7f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d7fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d800:	4461      	add	r1, ip
 800d802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d806:	fb0a c20b 	mla	r2, sl, fp, ip
 800d80a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d80e:	b289      	uxth	r1, r1
 800d810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d814:	4577      	cmp	r7, lr
 800d816:	f849 1b04 	str.w	r1, [r9], #4
 800d81a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d81e:	d8e2      	bhi.n	800d7e6 <__multiply+0xb2>
 800d820:	9a01      	ldr	r2, [sp, #4]
 800d822:	f845 c002 	str.w	ip, [r5, r2]
 800d826:	9a03      	ldr	r2, [sp, #12]
 800d828:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d82c:	3304      	adds	r3, #4
 800d82e:	f1b9 0f00 	cmp.w	r9, #0
 800d832:	d021      	beq.n	800d878 <__multiply+0x144>
 800d834:	6829      	ldr	r1, [r5, #0]
 800d836:	f104 0c14 	add.w	ip, r4, #20
 800d83a:	46ae      	mov	lr, r5
 800d83c:	f04f 0a00 	mov.w	sl, #0
 800d840:	f8bc b000 	ldrh.w	fp, [ip]
 800d844:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d848:	fb09 220b 	mla	r2, r9, fp, r2
 800d84c:	4452      	add	r2, sl
 800d84e:	b289      	uxth	r1, r1
 800d850:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d854:	f84e 1b04 	str.w	r1, [lr], #4
 800d858:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d85c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d860:	f8be 1000 	ldrh.w	r1, [lr]
 800d864:	fb09 110a 	mla	r1, r9, sl, r1
 800d868:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d86c:	4567      	cmp	r7, ip
 800d86e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d872:	d8e5      	bhi.n	800d840 <__multiply+0x10c>
 800d874:	9a01      	ldr	r2, [sp, #4]
 800d876:	50a9      	str	r1, [r5, r2]
 800d878:	3504      	adds	r5, #4
 800d87a:	e799      	b.n	800d7b0 <__multiply+0x7c>
 800d87c:	3e01      	subs	r6, #1
 800d87e:	e79b      	b.n	800d7b8 <__multiply+0x84>
 800d880:	0800febc 	.word	0x0800febc
 800d884:	0800ff2d 	.word	0x0800ff2d

0800d888 <__pow5mult>:
 800d888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d88c:	4615      	mov	r5, r2
 800d88e:	f012 0203 	ands.w	r2, r2, #3
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	d007      	beq.n	800d8a8 <__pow5mult+0x20>
 800d898:	4c25      	ldr	r4, [pc, #148]	; (800d930 <__pow5mult+0xa8>)
 800d89a:	3a01      	subs	r2, #1
 800d89c:	2300      	movs	r3, #0
 800d89e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8a2:	f7ff fe53 	bl	800d54c <__multadd>
 800d8a6:	4607      	mov	r7, r0
 800d8a8:	10ad      	asrs	r5, r5, #2
 800d8aa:	d03d      	beq.n	800d928 <__pow5mult+0xa0>
 800d8ac:	69f4      	ldr	r4, [r6, #28]
 800d8ae:	b97c      	cbnz	r4, 800d8d0 <__pow5mult+0x48>
 800d8b0:	2010      	movs	r0, #16
 800d8b2:	f7fc fb25 	bl	8009f00 <malloc>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	61f0      	str	r0, [r6, #28]
 800d8ba:	b928      	cbnz	r0, 800d8c8 <__pow5mult+0x40>
 800d8bc:	4b1d      	ldr	r3, [pc, #116]	; (800d934 <__pow5mult+0xac>)
 800d8be:	481e      	ldr	r0, [pc, #120]	; (800d938 <__pow5mult+0xb0>)
 800d8c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d8c4:	f7fe fb92 	bl	800bfec <__assert_func>
 800d8c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8cc:	6004      	str	r4, [r0, #0]
 800d8ce:	60c4      	str	r4, [r0, #12]
 800d8d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d8d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8d8:	b94c      	cbnz	r4, 800d8ee <__pow5mult+0x66>
 800d8da:	f240 2171 	movw	r1, #625	; 0x271
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f7ff ff12 	bl	800d708 <__i2b>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	6003      	str	r3, [r0, #0]
 800d8ee:	f04f 0900 	mov.w	r9, #0
 800d8f2:	07eb      	lsls	r3, r5, #31
 800d8f4:	d50a      	bpl.n	800d90c <__pow5mult+0x84>
 800d8f6:	4639      	mov	r1, r7
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7ff ff1a 	bl	800d734 <__multiply>
 800d900:	4639      	mov	r1, r7
 800d902:	4680      	mov	r8, r0
 800d904:	4630      	mov	r0, r6
 800d906:	f7ff fdff 	bl	800d508 <_Bfree>
 800d90a:	4647      	mov	r7, r8
 800d90c:	106d      	asrs	r5, r5, #1
 800d90e:	d00b      	beq.n	800d928 <__pow5mult+0xa0>
 800d910:	6820      	ldr	r0, [r4, #0]
 800d912:	b938      	cbnz	r0, 800d924 <__pow5mult+0x9c>
 800d914:	4622      	mov	r2, r4
 800d916:	4621      	mov	r1, r4
 800d918:	4630      	mov	r0, r6
 800d91a:	f7ff ff0b 	bl	800d734 <__multiply>
 800d91e:	6020      	str	r0, [r4, #0]
 800d920:	f8c0 9000 	str.w	r9, [r0]
 800d924:	4604      	mov	r4, r0
 800d926:	e7e4      	b.n	800d8f2 <__pow5mult+0x6a>
 800d928:	4638      	mov	r0, r7
 800d92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d92e:	bf00      	nop
 800d930:	08010078 	.word	0x08010078
 800d934:	0800fda2 	.word	0x0800fda2
 800d938:	0800ff2d 	.word	0x0800ff2d

0800d93c <__lshift>:
 800d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d940:	460c      	mov	r4, r1
 800d942:	6849      	ldr	r1, [r1, #4]
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d94a:	68a3      	ldr	r3, [r4, #8]
 800d94c:	4607      	mov	r7, r0
 800d94e:	4691      	mov	r9, r2
 800d950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d954:	f108 0601 	add.w	r6, r8, #1
 800d958:	42b3      	cmp	r3, r6
 800d95a:	db0b      	blt.n	800d974 <__lshift+0x38>
 800d95c:	4638      	mov	r0, r7
 800d95e:	f7ff fd93 	bl	800d488 <_Balloc>
 800d962:	4605      	mov	r5, r0
 800d964:	b948      	cbnz	r0, 800d97a <__lshift+0x3e>
 800d966:	4602      	mov	r2, r0
 800d968:	4b28      	ldr	r3, [pc, #160]	; (800da0c <__lshift+0xd0>)
 800d96a:	4829      	ldr	r0, [pc, #164]	; (800da10 <__lshift+0xd4>)
 800d96c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d970:	f7fe fb3c 	bl	800bfec <__assert_func>
 800d974:	3101      	adds	r1, #1
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	e7ee      	b.n	800d958 <__lshift+0x1c>
 800d97a:	2300      	movs	r3, #0
 800d97c:	f100 0114 	add.w	r1, r0, #20
 800d980:	f100 0210 	add.w	r2, r0, #16
 800d984:	4618      	mov	r0, r3
 800d986:	4553      	cmp	r3, sl
 800d988:	db33      	blt.n	800d9f2 <__lshift+0xb6>
 800d98a:	6920      	ldr	r0, [r4, #16]
 800d98c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d990:	f104 0314 	add.w	r3, r4, #20
 800d994:	f019 091f 	ands.w	r9, r9, #31
 800d998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d99c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9a0:	d02b      	beq.n	800d9fa <__lshift+0xbe>
 800d9a2:	f1c9 0e20 	rsb	lr, r9, #32
 800d9a6:	468a      	mov	sl, r1
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	fa00 f009 	lsl.w	r0, r0, r9
 800d9b0:	4310      	orrs	r0, r2
 800d9b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ba:	459c      	cmp	ip, r3
 800d9bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9c0:	d8f3      	bhi.n	800d9aa <__lshift+0x6e>
 800d9c2:	ebac 0304 	sub.w	r3, ip, r4
 800d9c6:	3b15      	subs	r3, #21
 800d9c8:	f023 0303 	bic.w	r3, r3, #3
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	f104 0015 	add.w	r0, r4, #21
 800d9d2:	4584      	cmp	ip, r0
 800d9d4:	bf38      	it	cc
 800d9d6:	2304      	movcc	r3, #4
 800d9d8:	50ca      	str	r2, [r1, r3]
 800d9da:	b10a      	cbz	r2, 800d9e0 <__lshift+0xa4>
 800d9dc:	f108 0602 	add.w	r6, r8, #2
 800d9e0:	3e01      	subs	r6, #1
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	612e      	str	r6, [r5, #16]
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	f7ff fd8e 	bl	800d508 <_Bfree>
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	e7c5      	b.n	800d986 <__lshift+0x4a>
 800d9fa:	3904      	subs	r1, #4
 800d9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800da00:	f841 2f04 	str.w	r2, [r1, #4]!
 800da04:	459c      	cmp	ip, r3
 800da06:	d8f9      	bhi.n	800d9fc <__lshift+0xc0>
 800da08:	e7ea      	b.n	800d9e0 <__lshift+0xa4>
 800da0a:	bf00      	nop
 800da0c:	0800febc 	.word	0x0800febc
 800da10:	0800ff2d 	.word	0x0800ff2d

0800da14 <__mcmp>:
 800da14:	b530      	push	{r4, r5, lr}
 800da16:	6902      	ldr	r2, [r0, #16]
 800da18:	690c      	ldr	r4, [r1, #16]
 800da1a:	1b12      	subs	r2, r2, r4
 800da1c:	d10e      	bne.n	800da3c <__mcmp+0x28>
 800da1e:	f100 0314 	add.w	r3, r0, #20
 800da22:	3114      	adds	r1, #20
 800da24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da34:	42a5      	cmp	r5, r4
 800da36:	d003      	beq.n	800da40 <__mcmp+0x2c>
 800da38:	d305      	bcc.n	800da46 <__mcmp+0x32>
 800da3a:	2201      	movs	r2, #1
 800da3c:	4610      	mov	r0, r2
 800da3e:	bd30      	pop	{r4, r5, pc}
 800da40:	4283      	cmp	r3, r0
 800da42:	d3f3      	bcc.n	800da2c <__mcmp+0x18>
 800da44:	e7fa      	b.n	800da3c <__mcmp+0x28>
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	e7f7      	b.n	800da3c <__mcmp+0x28>

0800da4c <__mdiff>:
 800da4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	460c      	mov	r4, r1
 800da52:	4606      	mov	r6, r0
 800da54:	4611      	mov	r1, r2
 800da56:	4620      	mov	r0, r4
 800da58:	4690      	mov	r8, r2
 800da5a:	f7ff ffdb 	bl	800da14 <__mcmp>
 800da5e:	1e05      	subs	r5, r0, #0
 800da60:	d110      	bne.n	800da84 <__mdiff+0x38>
 800da62:	4629      	mov	r1, r5
 800da64:	4630      	mov	r0, r6
 800da66:	f7ff fd0f 	bl	800d488 <_Balloc>
 800da6a:	b930      	cbnz	r0, 800da7a <__mdiff+0x2e>
 800da6c:	4b3a      	ldr	r3, [pc, #232]	; (800db58 <__mdiff+0x10c>)
 800da6e:	4602      	mov	r2, r0
 800da70:	f240 2137 	movw	r1, #567	; 0x237
 800da74:	4839      	ldr	r0, [pc, #228]	; (800db5c <__mdiff+0x110>)
 800da76:	f7fe fab9 	bl	800bfec <__assert_func>
 800da7a:	2301      	movs	r3, #1
 800da7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	bfa4      	itt	ge
 800da86:	4643      	movge	r3, r8
 800da88:	46a0      	movge	r8, r4
 800da8a:	4630      	mov	r0, r6
 800da8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da90:	bfa6      	itte	ge
 800da92:	461c      	movge	r4, r3
 800da94:	2500      	movge	r5, #0
 800da96:	2501      	movlt	r5, #1
 800da98:	f7ff fcf6 	bl	800d488 <_Balloc>
 800da9c:	b920      	cbnz	r0, 800daa8 <__mdiff+0x5c>
 800da9e:	4b2e      	ldr	r3, [pc, #184]	; (800db58 <__mdiff+0x10c>)
 800daa0:	4602      	mov	r2, r0
 800daa2:	f240 2145 	movw	r1, #581	; 0x245
 800daa6:	e7e5      	b.n	800da74 <__mdiff+0x28>
 800daa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800daac:	6926      	ldr	r6, [r4, #16]
 800daae:	60c5      	str	r5, [r0, #12]
 800dab0:	f104 0914 	add.w	r9, r4, #20
 800dab4:	f108 0514 	add.w	r5, r8, #20
 800dab8:	f100 0e14 	add.w	lr, r0, #20
 800dabc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dac4:	f108 0210 	add.w	r2, r8, #16
 800dac8:	46f2      	mov	sl, lr
 800daca:	2100      	movs	r1, #0
 800dacc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dad4:	fa11 f88b 	uxtah	r8, r1, fp
 800dad8:	b299      	uxth	r1, r3
 800dada:	0c1b      	lsrs	r3, r3, #16
 800dadc:	eba8 0801 	sub.w	r8, r8, r1
 800dae0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dae4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dae8:	fa1f f888 	uxth.w	r8, r8
 800daec:	1419      	asrs	r1, r3, #16
 800daee:	454e      	cmp	r6, r9
 800daf0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800daf4:	f84a 3b04 	str.w	r3, [sl], #4
 800daf8:	d8e8      	bhi.n	800dacc <__mdiff+0x80>
 800dafa:	1b33      	subs	r3, r6, r4
 800dafc:	3b15      	subs	r3, #21
 800dafe:	f023 0303 	bic.w	r3, r3, #3
 800db02:	3304      	adds	r3, #4
 800db04:	3415      	adds	r4, #21
 800db06:	42a6      	cmp	r6, r4
 800db08:	bf38      	it	cc
 800db0a:	2304      	movcc	r3, #4
 800db0c:	441d      	add	r5, r3
 800db0e:	4473      	add	r3, lr
 800db10:	469e      	mov	lr, r3
 800db12:	462e      	mov	r6, r5
 800db14:	4566      	cmp	r6, ip
 800db16:	d30e      	bcc.n	800db36 <__mdiff+0xea>
 800db18:	f10c 0203 	add.w	r2, ip, #3
 800db1c:	1b52      	subs	r2, r2, r5
 800db1e:	f022 0203 	bic.w	r2, r2, #3
 800db22:	3d03      	subs	r5, #3
 800db24:	45ac      	cmp	ip, r5
 800db26:	bf38      	it	cc
 800db28:	2200      	movcc	r2, #0
 800db2a:	4413      	add	r3, r2
 800db2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db30:	b17a      	cbz	r2, 800db52 <__mdiff+0x106>
 800db32:	6107      	str	r7, [r0, #16]
 800db34:	e7a4      	b.n	800da80 <__mdiff+0x34>
 800db36:	f856 8b04 	ldr.w	r8, [r6], #4
 800db3a:	fa11 f288 	uxtah	r2, r1, r8
 800db3e:	1414      	asrs	r4, r2, #16
 800db40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db44:	b292      	uxth	r2, r2
 800db46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db4a:	f84e 2b04 	str.w	r2, [lr], #4
 800db4e:	1421      	asrs	r1, r4, #16
 800db50:	e7e0      	b.n	800db14 <__mdiff+0xc8>
 800db52:	3f01      	subs	r7, #1
 800db54:	e7ea      	b.n	800db2c <__mdiff+0xe0>
 800db56:	bf00      	nop
 800db58:	0800febc 	.word	0x0800febc
 800db5c:	0800ff2d 	.word	0x0800ff2d

0800db60 <__ulp>:
 800db60:	b082      	sub	sp, #8
 800db62:	ed8d 0b00 	vstr	d0, [sp]
 800db66:	9a01      	ldr	r2, [sp, #4]
 800db68:	4b0f      	ldr	r3, [pc, #60]	; (800dba8 <__ulp+0x48>)
 800db6a:	4013      	ands	r3, r2
 800db6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800db70:	2b00      	cmp	r3, #0
 800db72:	dc08      	bgt.n	800db86 <__ulp+0x26>
 800db74:	425b      	negs	r3, r3
 800db76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800db7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db7e:	da04      	bge.n	800db8a <__ulp+0x2a>
 800db80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800db84:	4113      	asrs	r3, r2
 800db86:	2200      	movs	r2, #0
 800db88:	e008      	b.n	800db9c <__ulp+0x3c>
 800db8a:	f1a2 0314 	sub.w	r3, r2, #20
 800db8e:	2b1e      	cmp	r3, #30
 800db90:	bfda      	itte	le
 800db92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800db96:	40da      	lsrle	r2, r3
 800db98:	2201      	movgt	r2, #1
 800db9a:	2300      	movs	r3, #0
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	ec41 0b10 	vmov	d0, r0, r1
 800dba4:	b002      	add	sp, #8
 800dba6:	4770      	bx	lr
 800dba8:	7ff00000 	.word	0x7ff00000

0800dbac <__b2d>:
 800dbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb0:	6906      	ldr	r6, [r0, #16]
 800dbb2:	f100 0814 	add.w	r8, r0, #20
 800dbb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dbba:	1f37      	subs	r7, r6, #4
 800dbbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	f7ff fd53 	bl	800d66c <__hi0bits>
 800dbc6:	f1c0 0320 	rsb	r3, r0, #32
 800dbca:	280a      	cmp	r0, #10
 800dbcc:	600b      	str	r3, [r1, #0]
 800dbce:	491b      	ldr	r1, [pc, #108]	; (800dc3c <__b2d+0x90>)
 800dbd0:	dc15      	bgt.n	800dbfe <__b2d+0x52>
 800dbd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800dbd6:	fa22 f30c 	lsr.w	r3, r2, ip
 800dbda:	45b8      	cmp	r8, r7
 800dbdc:	ea43 0501 	orr.w	r5, r3, r1
 800dbe0:	bf34      	ite	cc
 800dbe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dbe6:	2300      	movcs	r3, #0
 800dbe8:	3015      	adds	r0, #21
 800dbea:	fa02 f000 	lsl.w	r0, r2, r0
 800dbee:	fa23 f30c 	lsr.w	r3, r3, ip
 800dbf2:	4303      	orrs	r3, r0
 800dbf4:	461c      	mov	r4, r3
 800dbf6:	ec45 4b10 	vmov	d0, r4, r5
 800dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfe:	45b8      	cmp	r8, r7
 800dc00:	bf3a      	itte	cc
 800dc02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc06:	f1a6 0708 	subcc.w	r7, r6, #8
 800dc0a:	2300      	movcs	r3, #0
 800dc0c:	380b      	subs	r0, #11
 800dc0e:	d012      	beq.n	800dc36 <__b2d+0x8a>
 800dc10:	f1c0 0120 	rsb	r1, r0, #32
 800dc14:	fa23 f401 	lsr.w	r4, r3, r1
 800dc18:	4082      	lsls	r2, r0
 800dc1a:	4322      	orrs	r2, r4
 800dc1c:	4547      	cmp	r7, r8
 800dc1e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dc22:	bf8c      	ite	hi
 800dc24:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dc28:	2200      	movls	r2, #0
 800dc2a:	4083      	lsls	r3, r0
 800dc2c:	40ca      	lsrs	r2, r1
 800dc2e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dc32:	4313      	orrs	r3, r2
 800dc34:	e7de      	b.n	800dbf4 <__b2d+0x48>
 800dc36:	ea42 0501 	orr.w	r5, r2, r1
 800dc3a:	e7db      	b.n	800dbf4 <__b2d+0x48>
 800dc3c:	3ff00000 	.word	0x3ff00000

0800dc40 <__d2b>:
 800dc40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc44:	460f      	mov	r7, r1
 800dc46:	2101      	movs	r1, #1
 800dc48:	ec59 8b10 	vmov	r8, r9, d0
 800dc4c:	4616      	mov	r6, r2
 800dc4e:	f7ff fc1b 	bl	800d488 <_Balloc>
 800dc52:	4604      	mov	r4, r0
 800dc54:	b930      	cbnz	r0, 800dc64 <__d2b+0x24>
 800dc56:	4602      	mov	r2, r0
 800dc58:	4b24      	ldr	r3, [pc, #144]	; (800dcec <__d2b+0xac>)
 800dc5a:	4825      	ldr	r0, [pc, #148]	; (800dcf0 <__d2b+0xb0>)
 800dc5c:	f240 310f 	movw	r1, #783	; 0x30f
 800dc60:	f7fe f9c4 	bl	800bfec <__assert_func>
 800dc64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc6c:	bb2d      	cbnz	r5, 800dcba <__d2b+0x7a>
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	f1b8 0300 	subs.w	r3, r8, #0
 800dc74:	d026      	beq.n	800dcc4 <__d2b+0x84>
 800dc76:	4668      	mov	r0, sp
 800dc78:	9300      	str	r3, [sp, #0]
 800dc7a:	f7ff fd17 	bl	800d6ac <__lo0bits>
 800dc7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc82:	b1e8      	cbz	r0, 800dcc0 <__d2b+0x80>
 800dc84:	f1c0 0320 	rsb	r3, r0, #32
 800dc88:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	40c2      	lsrs	r2, r0
 800dc90:	6163      	str	r3, [r4, #20]
 800dc92:	9201      	str	r2, [sp, #4]
 800dc94:	9b01      	ldr	r3, [sp, #4]
 800dc96:	61a3      	str	r3, [r4, #24]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	bf14      	ite	ne
 800dc9c:	2202      	movne	r2, #2
 800dc9e:	2201      	moveq	r2, #1
 800dca0:	6122      	str	r2, [r4, #16]
 800dca2:	b1bd      	cbz	r5, 800dcd4 <__d2b+0x94>
 800dca4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dca8:	4405      	add	r5, r0
 800dcaa:	603d      	str	r5, [r7, #0]
 800dcac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcb0:	6030      	str	r0, [r6, #0]
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	b003      	add	sp, #12
 800dcb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcbe:	e7d6      	b.n	800dc6e <__d2b+0x2e>
 800dcc0:	6161      	str	r1, [r4, #20]
 800dcc2:	e7e7      	b.n	800dc94 <__d2b+0x54>
 800dcc4:	a801      	add	r0, sp, #4
 800dcc6:	f7ff fcf1 	bl	800d6ac <__lo0bits>
 800dcca:	9b01      	ldr	r3, [sp, #4]
 800dccc:	6163      	str	r3, [r4, #20]
 800dcce:	3020      	adds	r0, #32
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	e7e5      	b.n	800dca0 <__d2b+0x60>
 800dcd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dcdc:	6038      	str	r0, [r7, #0]
 800dcde:	6918      	ldr	r0, [r3, #16]
 800dce0:	f7ff fcc4 	bl	800d66c <__hi0bits>
 800dce4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dce8:	e7e2      	b.n	800dcb0 <__d2b+0x70>
 800dcea:	bf00      	nop
 800dcec:	0800febc 	.word	0x0800febc
 800dcf0:	0800ff2d 	.word	0x0800ff2d

0800dcf4 <__ratio>:
 800dcf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf8:	4688      	mov	r8, r1
 800dcfa:	4669      	mov	r1, sp
 800dcfc:	4681      	mov	r9, r0
 800dcfe:	f7ff ff55 	bl	800dbac <__b2d>
 800dd02:	a901      	add	r1, sp, #4
 800dd04:	4640      	mov	r0, r8
 800dd06:	ec55 4b10 	vmov	r4, r5, d0
 800dd0a:	f7ff ff4f 	bl	800dbac <__b2d>
 800dd0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd16:	eba3 0c02 	sub.w	ip, r3, r2
 800dd1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd1e:	1a9b      	subs	r3, r3, r2
 800dd20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd24:	ec51 0b10 	vmov	r0, r1, d0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bfd6      	itet	le
 800dd2c:	460a      	movle	r2, r1
 800dd2e:	462a      	movgt	r2, r5
 800dd30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd34:	468b      	mov	fp, r1
 800dd36:	462f      	mov	r7, r5
 800dd38:	bfd4      	ite	le
 800dd3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd42:	4620      	mov	r0, r4
 800dd44:	ee10 2a10 	vmov	r2, s0
 800dd48:	465b      	mov	r3, fp
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f7f2 fd7e 	bl	800084c <__aeabi_ddiv>
 800dd50:	ec41 0b10 	vmov	d0, r0, r1
 800dd54:	b003      	add	sp, #12
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd5a <__copybits>:
 800dd5a:	3901      	subs	r1, #1
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	1149      	asrs	r1, r1, #5
 800dd60:	6914      	ldr	r4, [r2, #16]
 800dd62:	3101      	adds	r1, #1
 800dd64:	f102 0314 	add.w	r3, r2, #20
 800dd68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd70:	1f05      	subs	r5, r0, #4
 800dd72:	42a3      	cmp	r3, r4
 800dd74:	d30c      	bcc.n	800dd90 <__copybits+0x36>
 800dd76:	1aa3      	subs	r3, r4, r2
 800dd78:	3b11      	subs	r3, #17
 800dd7a:	f023 0303 	bic.w	r3, r3, #3
 800dd7e:	3211      	adds	r2, #17
 800dd80:	42a2      	cmp	r2, r4
 800dd82:	bf88      	it	hi
 800dd84:	2300      	movhi	r3, #0
 800dd86:	4418      	add	r0, r3
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4288      	cmp	r0, r1
 800dd8c:	d305      	bcc.n	800dd9a <__copybits+0x40>
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd94:	f845 6f04 	str.w	r6, [r5, #4]!
 800dd98:	e7eb      	b.n	800dd72 <__copybits+0x18>
 800dd9a:	f840 3b04 	str.w	r3, [r0], #4
 800dd9e:	e7f4      	b.n	800dd8a <__copybits+0x30>

0800dda0 <__any_on>:
 800dda0:	f100 0214 	add.w	r2, r0, #20
 800dda4:	6900      	ldr	r0, [r0, #16]
 800dda6:	114b      	asrs	r3, r1, #5
 800dda8:	4298      	cmp	r0, r3
 800ddaa:	b510      	push	{r4, lr}
 800ddac:	db11      	blt.n	800ddd2 <__any_on+0x32>
 800ddae:	dd0a      	ble.n	800ddc6 <__any_on+0x26>
 800ddb0:	f011 011f 	ands.w	r1, r1, #31
 800ddb4:	d007      	beq.n	800ddc6 <__any_on+0x26>
 800ddb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ddba:	fa24 f001 	lsr.w	r0, r4, r1
 800ddbe:	fa00 f101 	lsl.w	r1, r0, r1
 800ddc2:	428c      	cmp	r4, r1
 800ddc4:	d10b      	bne.n	800ddde <__any_on+0x3e>
 800ddc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d803      	bhi.n	800ddd6 <__any_on+0x36>
 800ddce:	2000      	movs	r0, #0
 800ddd0:	bd10      	pop	{r4, pc}
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	e7f7      	b.n	800ddc6 <__any_on+0x26>
 800ddd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddda:	2900      	cmp	r1, #0
 800dddc:	d0f5      	beq.n	800ddca <__any_on+0x2a>
 800ddde:	2001      	movs	r0, #1
 800dde0:	e7f6      	b.n	800ddd0 <__any_on+0x30>

0800dde2 <__ascii_wctomb>:
 800dde2:	b149      	cbz	r1, 800ddf8 <__ascii_wctomb+0x16>
 800dde4:	2aff      	cmp	r2, #255	; 0xff
 800dde6:	bf85      	ittet	hi
 800dde8:	238a      	movhi	r3, #138	; 0x8a
 800ddea:	6003      	strhi	r3, [r0, #0]
 800ddec:	700a      	strbls	r2, [r1, #0]
 800ddee:	f04f 30ff 	movhi.w	r0, #4294967295
 800ddf2:	bf98      	it	ls
 800ddf4:	2001      	movls	r0, #1
 800ddf6:	4770      	bx	lr
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4770      	bx	lr

0800ddfc <__ssputs_r>:
 800ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de00:	688e      	ldr	r6, [r1, #8]
 800de02:	461f      	mov	r7, r3
 800de04:	42be      	cmp	r6, r7
 800de06:	680b      	ldr	r3, [r1, #0]
 800de08:	4682      	mov	sl, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	4690      	mov	r8, r2
 800de0e:	d82c      	bhi.n	800de6a <__ssputs_r+0x6e>
 800de10:	898a      	ldrh	r2, [r1, #12]
 800de12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de16:	d026      	beq.n	800de66 <__ssputs_r+0x6a>
 800de18:	6965      	ldr	r5, [r4, #20]
 800de1a:	6909      	ldr	r1, [r1, #16]
 800de1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de20:	eba3 0901 	sub.w	r9, r3, r1
 800de24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de28:	1c7b      	adds	r3, r7, #1
 800de2a:	444b      	add	r3, r9
 800de2c:	106d      	asrs	r5, r5, #1
 800de2e:	429d      	cmp	r5, r3
 800de30:	bf38      	it	cc
 800de32:	461d      	movcc	r5, r3
 800de34:	0553      	lsls	r3, r2, #21
 800de36:	d527      	bpl.n	800de88 <__ssputs_r+0x8c>
 800de38:	4629      	mov	r1, r5
 800de3a:	f7fc f891 	bl	8009f60 <_malloc_r>
 800de3e:	4606      	mov	r6, r0
 800de40:	b360      	cbz	r0, 800de9c <__ssputs_r+0xa0>
 800de42:	6921      	ldr	r1, [r4, #16]
 800de44:	464a      	mov	r2, r9
 800de46:	f7fe f8b2 	bl	800bfae <memcpy>
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	6126      	str	r6, [r4, #16]
 800de58:	6165      	str	r5, [r4, #20]
 800de5a:	444e      	add	r6, r9
 800de5c:	eba5 0509 	sub.w	r5, r5, r9
 800de60:	6026      	str	r6, [r4, #0]
 800de62:	60a5      	str	r5, [r4, #8]
 800de64:	463e      	mov	r6, r7
 800de66:	42be      	cmp	r6, r7
 800de68:	d900      	bls.n	800de6c <__ssputs_r+0x70>
 800de6a:	463e      	mov	r6, r7
 800de6c:	6820      	ldr	r0, [r4, #0]
 800de6e:	4632      	mov	r2, r6
 800de70:	4641      	mov	r1, r8
 800de72:	f000 f9db 	bl	800e22c <memmove>
 800de76:	68a3      	ldr	r3, [r4, #8]
 800de78:	1b9b      	subs	r3, r3, r6
 800de7a:	60a3      	str	r3, [r4, #8]
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	4433      	add	r3, r6
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	2000      	movs	r0, #0
 800de84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de88:	462a      	mov	r2, r5
 800de8a:	f000 fa06 	bl	800e29a <_realloc_r>
 800de8e:	4606      	mov	r6, r0
 800de90:	2800      	cmp	r0, #0
 800de92:	d1e0      	bne.n	800de56 <__ssputs_r+0x5a>
 800de94:	6921      	ldr	r1, [r4, #16]
 800de96:	4650      	mov	r0, sl
 800de98:	f7fe ff40 	bl	800cd1c <_free_r>
 800de9c:	230c      	movs	r3, #12
 800de9e:	f8ca 3000 	str.w	r3, [sl]
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	f04f 30ff 	mov.w	r0, #4294967295
 800deae:	e7e9      	b.n	800de84 <__ssputs_r+0x88>

0800deb0 <_svfiprintf_r>:
 800deb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	4698      	mov	r8, r3
 800deb6:	898b      	ldrh	r3, [r1, #12]
 800deb8:	061b      	lsls	r3, r3, #24
 800deba:	b09d      	sub	sp, #116	; 0x74
 800debc:	4607      	mov	r7, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	4614      	mov	r4, r2
 800dec2:	d50e      	bpl.n	800dee2 <_svfiprintf_r+0x32>
 800dec4:	690b      	ldr	r3, [r1, #16]
 800dec6:	b963      	cbnz	r3, 800dee2 <_svfiprintf_r+0x32>
 800dec8:	2140      	movs	r1, #64	; 0x40
 800deca:	f7fc f849 	bl	8009f60 <_malloc_r>
 800dece:	6028      	str	r0, [r5, #0]
 800ded0:	6128      	str	r0, [r5, #16]
 800ded2:	b920      	cbnz	r0, 800dede <_svfiprintf_r+0x2e>
 800ded4:	230c      	movs	r3, #12
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295
 800dedc:	e0d0      	b.n	800e080 <_svfiprintf_r+0x1d0>
 800dede:	2340      	movs	r3, #64	; 0x40
 800dee0:	616b      	str	r3, [r5, #20]
 800dee2:	2300      	movs	r3, #0
 800dee4:	9309      	str	r3, [sp, #36]	; 0x24
 800dee6:	2320      	movs	r3, #32
 800dee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deec:	f8cd 800c 	str.w	r8, [sp, #12]
 800def0:	2330      	movs	r3, #48	; 0x30
 800def2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e098 <_svfiprintf_r+0x1e8>
 800def6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800defa:	f04f 0901 	mov.w	r9, #1
 800defe:	4623      	mov	r3, r4
 800df00:	469a      	mov	sl, r3
 800df02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df06:	b10a      	cbz	r2, 800df0c <_svfiprintf_r+0x5c>
 800df08:	2a25      	cmp	r2, #37	; 0x25
 800df0a:	d1f9      	bne.n	800df00 <_svfiprintf_r+0x50>
 800df0c:	ebba 0b04 	subs.w	fp, sl, r4
 800df10:	d00b      	beq.n	800df2a <_svfiprintf_r+0x7a>
 800df12:	465b      	mov	r3, fp
 800df14:	4622      	mov	r2, r4
 800df16:	4629      	mov	r1, r5
 800df18:	4638      	mov	r0, r7
 800df1a:	f7ff ff6f 	bl	800ddfc <__ssputs_r>
 800df1e:	3001      	adds	r0, #1
 800df20:	f000 80a9 	beq.w	800e076 <_svfiprintf_r+0x1c6>
 800df24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df26:	445a      	add	r2, fp
 800df28:	9209      	str	r2, [sp, #36]	; 0x24
 800df2a:	f89a 3000 	ldrb.w	r3, [sl]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f000 80a1 	beq.w	800e076 <_svfiprintf_r+0x1c6>
 800df34:	2300      	movs	r3, #0
 800df36:	f04f 32ff 	mov.w	r2, #4294967295
 800df3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df3e:	f10a 0a01 	add.w	sl, sl, #1
 800df42:	9304      	str	r3, [sp, #16]
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df4a:	931a      	str	r3, [sp, #104]	; 0x68
 800df4c:	4654      	mov	r4, sl
 800df4e:	2205      	movs	r2, #5
 800df50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df54:	4850      	ldr	r0, [pc, #320]	; (800e098 <_svfiprintf_r+0x1e8>)
 800df56:	f7f2 f93b 	bl	80001d0 <memchr>
 800df5a:	9a04      	ldr	r2, [sp, #16]
 800df5c:	b9d8      	cbnz	r0, 800df96 <_svfiprintf_r+0xe6>
 800df5e:	06d0      	lsls	r0, r2, #27
 800df60:	bf44      	itt	mi
 800df62:	2320      	movmi	r3, #32
 800df64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df68:	0711      	lsls	r1, r2, #28
 800df6a:	bf44      	itt	mi
 800df6c:	232b      	movmi	r3, #43	; 0x2b
 800df6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df72:	f89a 3000 	ldrb.w	r3, [sl]
 800df76:	2b2a      	cmp	r3, #42	; 0x2a
 800df78:	d015      	beq.n	800dfa6 <_svfiprintf_r+0xf6>
 800df7a:	9a07      	ldr	r2, [sp, #28]
 800df7c:	4654      	mov	r4, sl
 800df7e:	2000      	movs	r0, #0
 800df80:	f04f 0c0a 	mov.w	ip, #10
 800df84:	4621      	mov	r1, r4
 800df86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df8a:	3b30      	subs	r3, #48	; 0x30
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	d94d      	bls.n	800e02c <_svfiprintf_r+0x17c>
 800df90:	b1b0      	cbz	r0, 800dfc0 <_svfiprintf_r+0x110>
 800df92:	9207      	str	r2, [sp, #28]
 800df94:	e014      	b.n	800dfc0 <_svfiprintf_r+0x110>
 800df96:	eba0 0308 	sub.w	r3, r0, r8
 800df9a:	fa09 f303 	lsl.w	r3, r9, r3
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	9304      	str	r3, [sp, #16]
 800dfa2:	46a2      	mov	sl, r4
 800dfa4:	e7d2      	b.n	800df4c <_svfiprintf_r+0x9c>
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	1d19      	adds	r1, r3, #4
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	9103      	str	r1, [sp, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	bfbb      	ittet	lt
 800dfb2:	425b      	neglt	r3, r3
 800dfb4:	f042 0202 	orrlt.w	r2, r2, #2
 800dfb8:	9307      	strge	r3, [sp, #28]
 800dfba:	9307      	strlt	r3, [sp, #28]
 800dfbc:	bfb8      	it	lt
 800dfbe:	9204      	strlt	r2, [sp, #16]
 800dfc0:	7823      	ldrb	r3, [r4, #0]
 800dfc2:	2b2e      	cmp	r3, #46	; 0x2e
 800dfc4:	d10c      	bne.n	800dfe0 <_svfiprintf_r+0x130>
 800dfc6:	7863      	ldrb	r3, [r4, #1]
 800dfc8:	2b2a      	cmp	r3, #42	; 0x2a
 800dfca:	d134      	bne.n	800e036 <_svfiprintf_r+0x186>
 800dfcc:	9b03      	ldr	r3, [sp, #12]
 800dfce:	1d1a      	adds	r2, r3, #4
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	9203      	str	r2, [sp, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	bfb8      	it	lt
 800dfd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfdc:	3402      	adds	r4, #2
 800dfde:	9305      	str	r3, [sp, #20]
 800dfe0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e0a8 <_svfiprintf_r+0x1f8>
 800dfe4:	7821      	ldrb	r1, [r4, #0]
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	4650      	mov	r0, sl
 800dfea:	f7f2 f8f1 	bl	80001d0 <memchr>
 800dfee:	b138      	cbz	r0, 800e000 <_svfiprintf_r+0x150>
 800dff0:	9b04      	ldr	r3, [sp, #16]
 800dff2:	eba0 000a 	sub.w	r0, r0, sl
 800dff6:	2240      	movs	r2, #64	; 0x40
 800dff8:	4082      	lsls	r2, r0
 800dffa:	4313      	orrs	r3, r2
 800dffc:	3401      	adds	r4, #1
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e004:	4825      	ldr	r0, [pc, #148]	; (800e09c <_svfiprintf_r+0x1ec>)
 800e006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e00a:	2206      	movs	r2, #6
 800e00c:	f7f2 f8e0 	bl	80001d0 <memchr>
 800e010:	2800      	cmp	r0, #0
 800e012:	d038      	beq.n	800e086 <_svfiprintf_r+0x1d6>
 800e014:	4b22      	ldr	r3, [pc, #136]	; (800e0a0 <_svfiprintf_r+0x1f0>)
 800e016:	bb1b      	cbnz	r3, 800e060 <_svfiprintf_r+0x1b0>
 800e018:	9b03      	ldr	r3, [sp, #12]
 800e01a:	3307      	adds	r3, #7
 800e01c:	f023 0307 	bic.w	r3, r3, #7
 800e020:	3308      	adds	r3, #8
 800e022:	9303      	str	r3, [sp, #12]
 800e024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e026:	4433      	add	r3, r6
 800e028:	9309      	str	r3, [sp, #36]	; 0x24
 800e02a:	e768      	b.n	800defe <_svfiprintf_r+0x4e>
 800e02c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e030:	460c      	mov	r4, r1
 800e032:	2001      	movs	r0, #1
 800e034:	e7a6      	b.n	800df84 <_svfiprintf_r+0xd4>
 800e036:	2300      	movs	r3, #0
 800e038:	3401      	adds	r4, #1
 800e03a:	9305      	str	r3, [sp, #20]
 800e03c:	4619      	mov	r1, r3
 800e03e:	f04f 0c0a 	mov.w	ip, #10
 800e042:	4620      	mov	r0, r4
 800e044:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e048:	3a30      	subs	r2, #48	; 0x30
 800e04a:	2a09      	cmp	r2, #9
 800e04c:	d903      	bls.n	800e056 <_svfiprintf_r+0x1a6>
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d0c6      	beq.n	800dfe0 <_svfiprintf_r+0x130>
 800e052:	9105      	str	r1, [sp, #20]
 800e054:	e7c4      	b.n	800dfe0 <_svfiprintf_r+0x130>
 800e056:	fb0c 2101 	mla	r1, ip, r1, r2
 800e05a:	4604      	mov	r4, r0
 800e05c:	2301      	movs	r3, #1
 800e05e:	e7f0      	b.n	800e042 <_svfiprintf_r+0x192>
 800e060:	ab03      	add	r3, sp, #12
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	462a      	mov	r2, r5
 800e066:	4b0f      	ldr	r3, [pc, #60]	; (800e0a4 <_svfiprintf_r+0x1f4>)
 800e068:	a904      	add	r1, sp, #16
 800e06a:	4638      	mov	r0, r7
 800e06c:	f7fc ff50 	bl	800af10 <_printf_float>
 800e070:	1c42      	adds	r2, r0, #1
 800e072:	4606      	mov	r6, r0
 800e074:	d1d6      	bne.n	800e024 <_svfiprintf_r+0x174>
 800e076:	89ab      	ldrh	r3, [r5, #12]
 800e078:	065b      	lsls	r3, r3, #25
 800e07a:	f53f af2d 	bmi.w	800ded8 <_svfiprintf_r+0x28>
 800e07e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e080:	b01d      	add	sp, #116	; 0x74
 800e082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e086:	ab03      	add	r3, sp, #12
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	462a      	mov	r2, r5
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <_svfiprintf_r+0x1f4>)
 800e08e:	a904      	add	r1, sp, #16
 800e090:	4638      	mov	r0, r7
 800e092:	f7fd f9e1 	bl	800b458 <_printf_i>
 800e096:	e7eb      	b.n	800e070 <_svfiprintf_r+0x1c0>
 800e098:	08010084 	.word	0x08010084
 800e09c:	0801008e 	.word	0x0801008e
 800e0a0:	0800af11 	.word	0x0800af11
 800e0a4:	0800ddfd 	.word	0x0800ddfd
 800e0a8:	0801008a 	.word	0x0801008a

0800e0ac <__sflush_r>:
 800e0ac:	898a      	ldrh	r2, [r1, #12]
 800e0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	0710      	lsls	r0, r2, #28
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	d458      	bmi.n	800e16c <__sflush_r+0xc0>
 800e0ba:	684b      	ldr	r3, [r1, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dc05      	bgt.n	800e0cc <__sflush_r+0x20>
 800e0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	dc02      	bgt.n	800e0cc <__sflush_r+0x20>
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0ce:	2e00      	cmp	r6, #0
 800e0d0:	d0f9      	beq.n	800e0c6 <__sflush_r+0x1a>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0d8:	682f      	ldr	r7, [r5, #0]
 800e0da:	6a21      	ldr	r1, [r4, #32]
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	d032      	beq.n	800e146 <__sflush_r+0x9a>
 800e0e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0e2:	89a3      	ldrh	r3, [r4, #12]
 800e0e4:	075a      	lsls	r2, r3, #29
 800e0e6:	d505      	bpl.n	800e0f4 <__sflush_r+0x48>
 800e0e8:	6863      	ldr	r3, [r4, #4]
 800e0ea:	1ac0      	subs	r0, r0, r3
 800e0ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0ee:	b10b      	cbz	r3, 800e0f4 <__sflush_r+0x48>
 800e0f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f2:	1ac0      	subs	r0, r0, r3
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0fa:	6a21      	ldr	r1, [r4, #32]
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	47b0      	blx	r6
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	89a3      	ldrh	r3, [r4, #12]
 800e104:	d106      	bne.n	800e114 <__sflush_r+0x68>
 800e106:	6829      	ldr	r1, [r5, #0]
 800e108:	291d      	cmp	r1, #29
 800e10a:	d82b      	bhi.n	800e164 <__sflush_r+0xb8>
 800e10c:	4a29      	ldr	r2, [pc, #164]	; (800e1b4 <__sflush_r+0x108>)
 800e10e:	410a      	asrs	r2, r1
 800e110:	07d6      	lsls	r6, r2, #31
 800e112:	d427      	bmi.n	800e164 <__sflush_r+0xb8>
 800e114:	2200      	movs	r2, #0
 800e116:	6062      	str	r2, [r4, #4]
 800e118:	04d9      	lsls	r1, r3, #19
 800e11a:	6922      	ldr	r2, [r4, #16]
 800e11c:	6022      	str	r2, [r4, #0]
 800e11e:	d504      	bpl.n	800e12a <__sflush_r+0x7e>
 800e120:	1c42      	adds	r2, r0, #1
 800e122:	d101      	bne.n	800e128 <__sflush_r+0x7c>
 800e124:	682b      	ldr	r3, [r5, #0]
 800e126:	b903      	cbnz	r3, 800e12a <__sflush_r+0x7e>
 800e128:	6560      	str	r0, [r4, #84]	; 0x54
 800e12a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12c:	602f      	str	r7, [r5, #0]
 800e12e:	2900      	cmp	r1, #0
 800e130:	d0c9      	beq.n	800e0c6 <__sflush_r+0x1a>
 800e132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e136:	4299      	cmp	r1, r3
 800e138:	d002      	beq.n	800e140 <__sflush_r+0x94>
 800e13a:	4628      	mov	r0, r5
 800e13c:	f7fe fdee 	bl	800cd1c <_free_r>
 800e140:	2000      	movs	r0, #0
 800e142:	6360      	str	r0, [r4, #52]	; 0x34
 800e144:	e7c0      	b.n	800e0c8 <__sflush_r+0x1c>
 800e146:	2301      	movs	r3, #1
 800e148:	4628      	mov	r0, r5
 800e14a:	47b0      	blx	r6
 800e14c:	1c41      	adds	r1, r0, #1
 800e14e:	d1c8      	bne.n	800e0e2 <__sflush_r+0x36>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d0c5      	beq.n	800e0e2 <__sflush_r+0x36>
 800e156:	2b1d      	cmp	r3, #29
 800e158:	d001      	beq.n	800e15e <__sflush_r+0xb2>
 800e15a:	2b16      	cmp	r3, #22
 800e15c:	d101      	bne.n	800e162 <__sflush_r+0xb6>
 800e15e:	602f      	str	r7, [r5, #0]
 800e160:	e7b1      	b.n	800e0c6 <__sflush_r+0x1a>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	e7ad      	b.n	800e0c8 <__sflush_r+0x1c>
 800e16c:	690f      	ldr	r7, [r1, #16]
 800e16e:	2f00      	cmp	r7, #0
 800e170:	d0a9      	beq.n	800e0c6 <__sflush_r+0x1a>
 800e172:	0793      	lsls	r3, r2, #30
 800e174:	680e      	ldr	r6, [r1, #0]
 800e176:	bf08      	it	eq
 800e178:	694b      	ldreq	r3, [r1, #20]
 800e17a:	600f      	str	r7, [r1, #0]
 800e17c:	bf18      	it	ne
 800e17e:	2300      	movne	r3, #0
 800e180:	eba6 0807 	sub.w	r8, r6, r7
 800e184:	608b      	str	r3, [r1, #8]
 800e186:	f1b8 0f00 	cmp.w	r8, #0
 800e18a:	dd9c      	ble.n	800e0c6 <__sflush_r+0x1a>
 800e18c:	6a21      	ldr	r1, [r4, #32]
 800e18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e190:	4643      	mov	r3, r8
 800e192:	463a      	mov	r2, r7
 800e194:	4628      	mov	r0, r5
 800e196:	47b0      	blx	r6
 800e198:	2800      	cmp	r0, #0
 800e19a:	dc06      	bgt.n	800e1aa <__sflush_r+0xfe>
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a8:	e78e      	b.n	800e0c8 <__sflush_r+0x1c>
 800e1aa:	4407      	add	r7, r0
 800e1ac:	eba8 0800 	sub.w	r8, r8, r0
 800e1b0:	e7e9      	b.n	800e186 <__sflush_r+0xda>
 800e1b2:	bf00      	nop
 800e1b4:	dfbffffe 	.word	0xdfbffffe

0800e1b8 <_fflush_r>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	690b      	ldr	r3, [r1, #16]
 800e1bc:	4605      	mov	r5, r0
 800e1be:	460c      	mov	r4, r1
 800e1c0:	b913      	cbnz	r3, 800e1c8 <_fflush_r+0x10>
 800e1c2:	2500      	movs	r5, #0
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	bd38      	pop	{r3, r4, r5, pc}
 800e1c8:	b118      	cbz	r0, 800e1d2 <_fflush_r+0x1a>
 800e1ca:	6a03      	ldr	r3, [r0, #32]
 800e1cc:	b90b      	cbnz	r3, 800e1d2 <_fflush_r+0x1a>
 800e1ce:	f7fd fd01 	bl	800bbd4 <__sinit>
 800e1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d0f3      	beq.n	800e1c2 <_fflush_r+0xa>
 800e1da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1dc:	07d0      	lsls	r0, r2, #31
 800e1de:	d404      	bmi.n	800e1ea <_fflush_r+0x32>
 800e1e0:	0599      	lsls	r1, r3, #22
 800e1e2:	d402      	bmi.n	800e1ea <_fflush_r+0x32>
 800e1e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1e6:	f7fd fee0 	bl	800bfaa <__retarget_lock_acquire_recursive>
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	f7ff ff5d 	bl	800e0ac <__sflush_r>
 800e1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1f4:	07da      	lsls	r2, r3, #31
 800e1f6:	4605      	mov	r5, r0
 800e1f8:	d4e4      	bmi.n	800e1c4 <_fflush_r+0xc>
 800e1fa:	89a3      	ldrh	r3, [r4, #12]
 800e1fc:	059b      	lsls	r3, r3, #22
 800e1fe:	d4e1      	bmi.n	800e1c4 <_fflush_r+0xc>
 800e200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e202:	f7fd fed3 	bl	800bfac <__retarget_lock_release_recursive>
 800e206:	e7dd      	b.n	800e1c4 <_fflush_r+0xc>

0800e208 <fiprintf>:
 800e208:	b40e      	push	{r1, r2, r3}
 800e20a:	b503      	push	{r0, r1, lr}
 800e20c:	4601      	mov	r1, r0
 800e20e:	ab03      	add	r3, sp, #12
 800e210:	4805      	ldr	r0, [pc, #20]	; (800e228 <fiprintf+0x20>)
 800e212:	f853 2b04 	ldr.w	r2, [r3], #4
 800e216:	6800      	ldr	r0, [r0, #0]
 800e218:	9301      	str	r3, [sp, #4]
 800e21a:	f000 f897 	bl	800e34c <_vfiprintf_r>
 800e21e:	b002      	add	sp, #8
 800e220:	f85d eb04 	ldr.w	lr, [sp], #4
 800e224:	b003      	add	sp, #12
 800e226:	4770      	bx	lr
 800e228:	200005d8 	.word	0x200005d8

0800e22c <memmove>:
 800e22c:	4288      	cmp	r0, r1
 800e22e:	b510      	push	{r4, lr}
 800e230:	eb01 0402 	add.w	r4, r1, r2
 800e234:	d902      	bls.n	800e23c <memmove+0x10>
 800e236:	4284      	cmp	r4, r0
 800e238:	4623      	mov	r3, r4
 800e23a:	d807      	bhi.n	800e24c <memmove+0x20>
 800e23c:	1e43      	subs	r3, r0, #1
 800e23e:	42a1      	cmp	r1, r4
 800e240:	d008      	beq.n	800e254 <memmove+0x28>
 800e242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e24a:	e7f8      	b.n	800e23e <memmove+0x12>
 800e24c:	4402      	add	r2, r0
 800e24e:	4601      	mov	r1, r0
 800e250:	428a      	cmp	r2, r1
 800e252:	d100      	bne.n	800e256 <memmove+0x2a>
 800e254:	bd10      	pop	{r4, pc}
 800e256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e25e:	e7f7      	b.n	800e250 <memmove+0x24>

0800e260 <abort>:
 800e260:	b508      	push	{r3, lr}
 800e262:	2006      	movs	r0, #6
 800e264:	f000 fa4a 	bl	800e6fc <raise>
 800e268:	2001      	movs	r0, #1
 800e26a:	f7f4 fb43 	bl	80028f4 <_exit>

0800e26e <_calloc_r>:
 800e26e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e270:	fba1 2402 	umull	r2, r4, r1, r2
 800e274:	b94c      	cbnz	r4, 800e28a <_calloc_r+0x1c>
 800e276:	4611      	mov	r1, r2
 800e278:	9201      	str	r2, [sp, #4]
 800e27a:	f7fb fe71 	bl	8009f60 <_malloc_r>
 800e27e:	9a01      	ldr	r2, [sp, #4]
 800e280:	4605      	mov	r5, r0
 800e282:	b930      	cbnz	r0, 800e292 <_calloc_r+0x24>
 800e284:	4628      	mov	r0, r5
 800e286:	b003      	add	sp, #12
 800e288:	bd30      	pop	{r4, r5, pc}
 800e28a:	220c      	movs	r2, #12
 800e28c:	6002      	str	r2, [r0, #0]
 800e28e:	2500      	movs	r5, #0
 800e290:	e7f8      	b.n	800e284 <_calloc_r+0x16>
 800e292:	4621      	mov	r1, r4
 800e294:	f7fd fd37 	bl	800bd06 <memset>
 800e298:	e7f4      	b.n	800e284 <_calloc_r+0x16>

0800e29a <_realloc_r>:
 800e29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29e:	4680      	mov	r8, r0
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	460e      	mov	r6, r1
 800e2a4:	b921      	cbnz	r1, 800e2b0 <_realloc_r+0x16>
 800e2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	4611      	mov	r1, r2
 800e2ac:	f7fb be58 	b.w	8009f60 <_malloc_r>
 800e2b0:	b92a      	cbnz	r2, 800e2be <_realloc_r+0x24>
 800e2b2:	f7fe fd33 	bl	800cd1c <_free_r>
 800e2b6:	4625      	mov	r5, r4
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2be:	f000 fa39 	bl	800e734 <_malloc_usable_size_r>
 800e2c2:	4284      	cmp	r4, r0
 800e2c4:	4607      	mov	r7, r0
 800e2c6:	d802      	bhi.n	800e2ce <_realloc_r+0x34>
 800e2c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2cc:	d812      	bhi.n	800e2f4 <_realloc_r+0x5a>
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	f7fb fe45 	bl	8009f60 <_malloc_r>
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d0ed      	beq.n	800e2b8 <_realloc_r+0x1e>
 800e2dc:	42bc      	cmp	r4, r7
 800e2de:	4622      	mov	r2, r4
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	bf28      	it	cs
 800e2e4:	463a      	movcs	r2, r7
 800e2e6:	f7fd fe62 	bl	800bfae <memcpy>
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	f7fe fd15 	bl	800cd1c <_free_r>
 800e2f2:	e7e1      	b.n	800e2b8 <_realloc_r+0x1e>
 800e2f4:	4635      	mov	r5, r6
 800e2f6:	e7df      	b.n	800e2b8 <_realloc_r+0x1e>

0800e2f8 <__sfputc_r>:
 800e2f8:	6893      	ldr	r3, [r2, #8]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	b410      	push	{r4}
 800e300:	6093      	str	r3, [r2, #8]
 800e302:	da08      	bge.n	800e316 <__sfputc_r+0x1e>
 800e304:	6994      	ldr	r4, [r2, #24]
 800e306:	42a3      	cmp	r3, r4
 800e308:	db01      	blt.n	800e30e <__sfputc_r+0x16>
 800e30a:	290a      	cmp	r1, #10
 800e30c:	d103      	bne.n	800e316 <__sfputc_r+0x1e>
 800e30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e312:	f000 b935 	b.w	800e580 <__swbuf_r>
 800e316:	6813      	ldr	r3, [r2, #0]
 800e318:	1c58      	adds	r0, r3, #1
 800e31a:	6010      	str	r0, [r2, #0]
 800e31c:	7019      	strb	r1, [r3, #0]
 800e31e:	4608      	mov	r0, r1
 800e320:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <__sfputs_r>:
 800e326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e328:	4606      	mov	r6, r0
 800e32a:	460f      	mov	r7, r1
 800e32c:	4614      	mov	r4, r2
 800e32e:	18d5      	adds	r5, r2, r3
 800e330:	42ac      	cmp	r4, r5
 800e332:	d101      	bne.n	800e338 <__sfputs_r+0x12>
 800e334:	2000      	movs	r0, #0
 800e336:	e007      	b.n	800e348 <__sfputs_r+0x22>
 800e338:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e33c:	463a      	mov	r2, r7
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ffda 	bl	800e2f8 <__sfputc_r>
 800e344:	1c43      	adds	r3, r0, #1
 800e346:	d1f3      	bne.n	800e330 <__sfputs_r+0xa>
 800e348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e34c <_vfiprintf_r>:
 800e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e350:	460d      	mov	r5, r1
 800e352:	b09d      	sub	sp, #116	; 0x74
 800e354:	4614      	mov	r4, r2
 800e356:	4698      	mov	r8, r3
 800e358:	4606      	mov	r6, r0
 800e35a:	b118      	cbz	r0, 800e364 <_vfiprintf_r+0x18>
 800e35c:	6a03      	ldr	r3, [r0, #32]
 800e35e:	b90b      	cbnz	r3, 800e364 <_vfiprintf_r+0x18>
 800e360:	f7fd fc38 	bl	800bbd4 <__sinit>
 800e364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e366:	07d9      	lsls	r1, r3, #31
 800e368:	d405      	bmi.n	800e376 <_vfiprintf_r+0x2a>
 800e36a:	89ab      	ldrh	r3, [r5, #12]
 800e36c:	059a      	lsls	r2, r3, #22
 800e36e:	d402      	bmi.n	800e376 <_vfiprintf_r+0x2a>
 800e370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e372:	f7fd fe1a 	bl	800bfaa <__retarget_lock_acquire_recursive>
 800e376:	89ab      	ldrh	r3, [r5, #12]
 800e378:	071b      	lsls	r3, r3, #28
 800e37a:	d501      	bpl.n	800e380 <_vfiprintf_r+0x34>
 800e37c:	692b      	ldr	r3, [r5, #16]
 800e37e:	b99b      	cbnz	r3, 800e3a8 <_vfiprintf_r+0x5c>
 800e380:	4629      	mov	r1, r5
 800e382:	4630      	mov	r0, r6
 800e384:	f000 f93a 	bl	800e5fc <__swsetup_r>
 800e388:	b170      	cbz	r0, 800e3a8 <_vfiprintf_r+0x5c>
 800e38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e38c:	07dc      	lsls	r4, r3, #31
 800e38e:	d504      	bpl.n	800e39a <_vfiprintf_r+0x4e>
 800e390:	f04f 30ff 	mov.w	r0, #4294967295
 800e394:	b01d      	add	sp, #116	; 0x74
 800e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	0598      	lsls	r0, r3, #22
 800e39e:	d4f7      	bmi.n	800e390 <_vfiprintf_r+0x44>
 800e3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3a2:	f7fd fe03 	bl	800bfac <__retarget_lock_release_recursive>
 800e3a6:	e7f3      	b.n	800e390 <_vfiprintf_r+0x44>
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ac:	2320      	movs	r3, #32
 800e3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3b6:	2330      	movs	r3, #48	; 0x30
 800e3b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e56c <_vfiprintf_r+0x220>
 800e3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3c0:	f04f 0901 	mov.w	r9, #1
 800e3c4:	4623      	mov	r3, r4
 800e3c6:	469a      	mov	sl, r3
 800e3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3cc:	b10a      	cbz	r2, 800e3d2 <_vfiprintf_r+0x86>
 800e3ce:	2a25      	cmp	r2, #37	; 0x25
 800e3d0:	d1f9      	bne.n	800e3c6 <_vfiprintf_r+0x7a>
 800e3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800e3d6:	d00b      	beq.n	800e3f0 <_vfiprintf_r+0xa4>
 800e3d8:	465b      	mov	r3, fp
 800e3da:	4622      	mov	r2, r4
 800e3dc:	4629      	mov	r1, r5
 800e3de:	4630      	mov	r0, r6
 800e3e0:	f7ff ffa1 	bl	800e326 <__sfputs_r>
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	f000 80a9 	beq.w	800e53c <_vfiprintf_r+0x1f0>
 800e3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ec:	445a      	add	r2, fp
 800e3ee:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 80a1 	beq.w	800e53c <_vfiprintf_r+0x1f0>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e404:	f10a 0a01 	add.w	sl, sl, #1
 800e408:	9304      	str	r3, [sp, #16]
 800e40a:	9307      	str	r3, [sp, #28]
 800e40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e410:	931a      	str	r3, [sp, #104]	; 0x68
 800e412:	4654      	mov	r4, sl
 800e414:	2205      	movs	r2, #5
 800e416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41a:	4854      	ldr	r0, [pc, #336]	; (800e56c <_vfiprintf_r+0x220>)
 800e41c:	f7f1 fed8 	bl	80001d0 <memchr>
 800e420:	9a04      	ldr	r2, [sp, #16]
 800e422:	b9d8      	cbnz	r0, 800e45c <_vfiprintf_r+0x110>
 800e424:	06d1      	lsls	r1, r2, #27
 800e426:	bf44      	itt	mi
 800e428:	2320      	movmi	r3, #32
 800e42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e42e:	0713      	lsls	r3, r2, #28
 800e430:	bf44      	itt	mi
 800e432:	232b      	movmi	r3, #43	; 0x2b
 800e434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e438:	f89a 3000 	ldrb.w	r3, [sl]
 800e43c:	2b2a      	cmp	r3, #42	; 0x2a
 800e43e:	d015      	beq.n	800e46c <_vfiprintf_r+0x120>
 800e440:	9a07      	ldr	r2, [sp, #28]
 800e442:	4654      	mov	r4, sl
 800e444:	2000      	movs	r0, #0
 800e446:	f04f 0c0a 	mov.w	ip, #10
 800e44a:	4621      	mov	r1, r4
 800e44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e450:	3b30      	subs	r3, #48	; 0x30
 800e452:	2b09      	cmp	r3, #9
 800e454:	d94d      	bls.n	800e4f2 <_vfiprintf_r+0x1a6>
 800e456:	b1b0      	cbz	r0, 800e486 <_vfiprintf_r+0x13a>
 800e458:	9207      	str	r2, [sp, #28]
 800e45a:	e014      	b.n	800e486 <_vfiprintf_r+0x13a>
 800e45c:	eba0 0308 	sub.w	r3, r0, r8
 800e460:	fa09 f303 	lsl.w	r3, r9, r3
 800e464:	4313      	orrs	r3, r2
 800e466:	9304      	str	r3, [sp, #16]
 800e468:	46a2      	mov	sl, r4
 800e46a:	e7d2      	b.n	800e412 <_vfiprintf_r+0xc6>
 800e46c:	9b03      	ldr	r3, [sp, #12]
 800e46e:	1d19      	adds	r1, r3, #4
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	9103      	str	r1, [sp, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	bfbb      	ittet	lt
 800e478:	425b      	neglt	r3, r3
 800e47a:	f042 0202 	orrlt.w	r2, r2, #2
 800e47e:	9307      	strge	r3, [sp, #28]
 800e480:	9307      	strlt	r3, [sp, #28]
 800e482:	bfb8      	it	lt
 800e484:	9204      	strlt	r2, [sp, #16]
 800e486:	7823      	ldrb	r3, [r4, #0]
 800e488:	2b2e      	cmp	r3, #46	; 0x2e
 800e48a:	d10c      	bne.n	800e4a6 <_vfiprintf_r+0x15a>
 800e48c:	7863      	ldrb	r3, [r4, #1]
 800e48e:	2b2a      	cmp	r3, #42	; 0x2a
 800e490:	d134      	bne.n	800e4fc <_vfiprintf_r+0x1b0>
 800e492:	9b03      	ldr	r3, [sp, #12]
 800e494:	1d1a      	adds	r2, r3, #4
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	9203      	str	r2, [sp, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	bfb8      	it	lt
 800e49e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4a2:	3402      	adds	r4, #2
 800e4a4:	9305      	str	r3, [sp, #20]
 800e4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e57c <_vfiprintf_r+0x230>
 800e4aa:	7821      	ldrb	r1, [r4, #0]
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	f7f1 fe8e 	bl	80001d0 <memchr>
 800e4b4:	b138      	cbz	r0, 800e4c6 <_vfiprintf_r+0x17a>
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	eba0 000a 	sub.w	r0, r0, sl
 800e4bc:	2240      	movs	r2, #64	; 0x40
 800e4be:	4082      	lsls	r2, r0
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	3401      	adds	r4, #1
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4829      	ldr	r0, [pc, #164]	; (800e570 <_vfiprintf_r+0x224>)
 800e4cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4d0:	2206      	movs	r2, #6
 800e4d2:	f7f1 fe7d 	bl	80001d0 <memchr>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d03f      	beq.n	800e55a <_vfiprintf_r+0x20e>
 800e4da:	4b26      	ldr	r3, [pc, #152]	; (800e574 <_vfiprintf_r+0x228>)
 800e4dc:	bb1b      	cbnz	r3, 800e526 <_vfiprintf_r+0x1da>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	3307      	adds	r3, #7
 800e4e2:	f023 0307 	bic.w	r3, r3, #7
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	9303      	str	r3, [sp, #12]
 800e4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ec:	443b      	add	r3, r7
 800e4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f0:	e768      	b.n	800e3c4 <_vfiprintf_r+0x78>
 800e4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	e7a6      	b.n	800e44a <_vfiprintf_r+0xfe>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	3401      	adds	r4, #1
 800e500:	9305      	str	r3, [sp, #20]
 800e502:	4619      	mov	r1, r3
 800e504:	f04f 0c0a 	mov.w	ip, #10
 800e508:	4620      	mov	r0, r4
 800e50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e50e:	3a30      	subs	r2, #48	; 0x30
 800e510:	2a09      	cmp	r2, #9
 800e512:	d903      	bls.n	800e51c <_vfiprintf_r+0x1d0>
 800e514:	2b00      	cmp	r3, #0
 800e516:	d0c6      	beq.n	800e4a6 <_vfiprintf_r+0x15a>
 800e518:	9105      	str	r1, [sp, #20]
 800e51a:	e7c4      	b.n	800e4a6 <_vfiprintf_r+0x15a>
 800e51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e520:	4604      	mov	r4, r0
 800e522:	2301      	movs	r3, #1
 800e524:	e7f0      	b.n	800e508 <_vfiprintf_r+0x1bc>
 800e526:	ab03      	add	r3, sp, #12
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	462a      	mov	r2, r5
 800e52c:	4b12      	ldr	r3, [pc, #72]	; (800e578 <_vfiprintf_r+0x22c>)
 800e52e:	a904      	add	r1, sp, #16
 800e530:	4630      	mov	r0, r6
 800e532:	f7fc fced 	bl	800af10 <_printf_float>
 800e536:	4607      	mov	r7, r0
 800e538:	1c78      	adds	r0, r7, #1
 800e53a:	d1d6      	bne.n	800e4ea <_vfiprintf_r+0x19e>
 800e53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e53e:	07d9      	lsls	r1, r3, #31
 800e540:	d405      	bmi.n	800e54e <_vfiprintf_r+0x202>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	059a      	lsls	r2, r3, #22
 800e546:	d402      	bmi.n	800e54e <_vfiprintf_r+0x202>
 800e548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e54a:	f7fd fd2f 	bl	800bfac <__retarget_lock_release_recursive>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	065b      	lsls	r3, r3, #25
 800e552:	f53f af1d 	bmi.w	800e390 <_vfiprintf_r+0x44>
 800e556:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e558:	e71c      	b.n	800e394 <_vfiprintf_r+0x48>
 800e55a:	ab03      	add	r3, sp, #12
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	462a      	mov	r2, r5
 800e560:	4b05      	ldr	r3, [pc, #20]	; (800e578 <_vfiprintf_r+0x22c>)
 800e562:	a904      	add	r1, sp, #16
 800e564:	4630      	mov	r0, r6
 800e566:	f7fc ff77 	bl	800b458 <_printf_i>
 800e56a:	e7e4      	b.n	800e536 <_vfiprintf_r+0x1ea>
 800e56c:	08010084 	.word	0x08010084
 800e570:	0801008e 	.word	0x0801008e
 800e574:	0800af11 	.word	0x0800af11
 800e578:	0800e327 	.word	0x0800e327
 800e57c:	0801008a 	.word	0x0801008a

0800e580 <__swbuf_r>:
 800e580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e582:	460e      	mov	r6, r1
 800e584:	4614      	mov	r4, r2
 800e586:	4605      	mov	r5, r0
 800e588:	b118      	cbz	r0, 800e592 <__swbuf_r+0x12>
 800e58a:	6a03      	ldr	r3, [r0, #32]
 800e58c:	b90b      	cbnz	r3, 800e592 <__swbuf_r+0x12>
 800e58e:	f7fd fb21 	bl	800bbd4 <__sinit>
 800e592:	69a3      	ldr	r3, [r4, #24]
 800e594:	60a3      	str	r3, [r4, #8]
 800e596:	89a3      	ldrh	r3, [r4, #12]
 800e598:	071a      	lsls	r2, r3, #28
 800e59a:	d525      	bpl.n	800e5e8 <__swbuf_r+0x68>
 800e59c:	6923      	ldr	r3, [r4, #16]
 800e59e:	b31b      	cbz	r3, 800e5e8 <__swbuf_r+0x68>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	6922      	ldr	r2, [r4, #16]
 800e5a4:	1a98      	subs	r0, r3, r2
 800e5a6:	6963      	ldr	r3, [r4, #20]
 800e5a8:	b2f6      	uxtb	r6, r6
 800e5aa:	4283      	cmp	r3, r0
 800e5ac:	4637      	mov	r7, r6
 800e5ae:	dc04      	bgt.n	800e5ba <__swbuf_r+0x3a>
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f7ff fe00 	bl	800e1b8 <_fflush_r>
 800e5b8:	b9e0      	cbnz	r0, 800e5f4 <__swbuf_r+0x74>
 800e5ba:	68a3      	ldr	r3, [r4, #8]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	60a3      	str	r3, [r4, #8]
 800e5c0:	6823      	ldr	r3, [r4, #0]
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	6022      	str	r2, [r4, #0]
 800e5c6:	701e      	strb	r6, [r3, #0]
 800e5c8:	6962      	ldr	r2, [r4, #20]
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d004      	beq.n	800e5da <__swbuf_r+0x5a>
 800e5d0:	89a3      	ldrh	r3, [r4, #12]
 800e5d2:	07db      	lsls	r3, r3, #31
 800e5d4:	d506      	bpl.n	800e5e4 <__swbuf_r+0x64>
 800e5d6:	2e0a      	cmp	r6, #10
 800e5d8:	d104      	bne.n	800e5e4 <__swbuf_r+0x64>
 800e5da:	4621      	mov	r1, r4
 800e5dc:	4628      	mov	r0, r5
 800e5de:	f7ff fdeb 	bl	800e1b8 <_fflush_r>
 800e5e2:	b938      	cbnz	r0, 800e5f4 <__swbuf_r+0x74>
 800e5e4:	4638      	mov	r0, r7
 800e5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5e8:	4621      	mov	r1, r4
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f000 f806 	bl	800e5fc <__swsetup_r>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d0d5      	beq.n	800e5a0 <__swbuf_r+0x20>
 800e5f4:	f04f 37ff 	mov.w	r7, #4294967295
 800e5f8:	e7f4      	b.n	800e5e4 <__swbuf_r+0x64>
	...

0800e5fc <__swsetup_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4b2a      	ldr	r3, [pc, #168]	; (800e6a8 <__swsetup_r+0xac>)
 800e600:	4605      	mov	r5, r0
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	460c      	mov	r4, r1
 800e606:	b118      	cbz	r0, 800e610 <__swsetup_r+0x14>
 800e608:	6a03      	ldr	r3, [r0, #32]
 800e60a:	b90b      	cbnz	r3, 800e610 <__swsetup_r+0x14>
 800e60c:	f7fd fae2 	bl	800bbd4 <__sinit>
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e616:	0718      	lsls	r0, r3, #28
 800e618:	d422      	bmi.n	800e660 <__swsetup_r+0x64>
 800e61a:	06d9      	lsls	r1, r3, #27
 800e61c:	d407      	bmi.n	800e62e <__swsetup_r+0x32>
 800e61e:	2309      	movs	r3, #9
 800e620:	602b      	str	r3, [r5, #0]
 800e622:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e626:	81a3      	strh	r3, [r4, #12]
 800e628:	f04f 30ff 	mov.w	r0, #4294967295
 800e62c:	e034      	b.n	800e698 <__swsetup_r+0x9c>
 800e62e:	0758      	lsls	r0, r3, #29
 800e630:	d512      	bpl.n	800e658 <__swsetup_r+0x5c>
 800e632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e634:	b141      	cbz	r1, 800e648 <__swsetup_r+0x4c>
 800e636:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e63a:	4299      	cmp	r1, r3
 800e63c:	d002      	beq.n	800e644 <__swsetup_r+0x48>
 800e63e:	4628      	mov	r0, r5
 800e640:	f7fe fb6c 	bl	800cd1c <_free_r>
 800e644:	2300      	movs	r3, #0
 800e646:	6363      	str	r3, [r4, #52]	; 0x34
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e64e:	81a3      	strh	r3, [r4, #12]
 800e650:	2300      	movs	r3, #0
 800e652:	6063      	str	r3, [r4, #4]
 800e654:	6923      	ldr	r3, [r4, #16]
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	f043 0308 	orr.w	r3, r3, #8
 800e65e:	81a3      	strh	r3, [r4, #12]
 800e660:	6923      	ldr	r3, [r4, #16]
 800e662:	b94b      	cbnz	r3, 800e678 <__swsetup_r+0x7c>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e66a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e66e:	d003      	beq.n	800e678 <__swsetup_r+0x7c>
 800e670:	4621      	mov	r1, r4
 800e672:	4628      	mov	r0, r5
 800e674:	f000 f88c 	bl	800e790 <__smakebuf_r>
 800e678:	89a0      	ldrh	r0, [r4, #12]
 800e67a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e67e:	f010 0301 	ands.w	r3, r0, #1
 800e682:	d00a      	beq.n	800e69a <__swsetup_r+0x9e>
 800e684:	2300      	movs	r3, #0
 800e686:	60a3      	str	r3, [r4, #8]
 800e688:	6963      	ldr	r3, [r4, #20]
 800e68a:	425b      	negs	r3, r3
 800e68c:	61a3      	str	r3, [r4, #24]
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	b943      	cbnz	r3, 800e6a4 <__swsetup_r+0xa8>
 800e692:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e696:	d1c4      	bne.n	800e622 <__swsetup_r+0x26>
 800e698:	bd38      	pop	{r3, r4, r5, pc}
 800e69a:	0781      	lsls	r1, r0, #30
 800e69c:	bf58      	it	pl
 800e69e:	6963      	ldrpl	r3, [r4, #20]
 800e6a0:	60a3      	str	r3, [r4, #8]
 800e6a2:	e7f4      	b.n	800e68e <__swsetup_r+0x92>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e7f7      	b.n	800e698 <__swsetup_r+0x9c>
 800e6a8:	200005d8 	.word	0x200005d8

0800e6ac <_raise_r>:
 800e6ac:	291f      	cmp	r1, #31
 800e6ae:	b538      	push	{r3, r4, r5, lr}
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	460d      	mov	r5, r1
 800e6b4:	d904      	bls.n	800e6c0 <_raise_r+0x14>
 800e6b6:	2316      	movs	r3, #22
 800e6b8:	6003      	str	r3, [r0, #0]
 800e6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e6c2:	b112      	cbz	r2, 800e6ca <_raise_r+0x1e>
 800e6c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6c8:	b94b      	cbnz	r3, 800e6de <_raise_r+0x32>
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f000 f830 	bl	800e730 <_getpid_r>
 800e6d0:	462a      	mov	r2, r5
 800e6d2:	4601      	mov	r1, r0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6da:	f000 b817 	b.w	800e70c <_kill_r>
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d00a      	beq.n	800e6f8 <_raise_r+0x4c>
 800e6e2:	1c59      	adds	r1, r3, #1
 800e6e4:	d103      	bne.n	800e6ee <_raise_r+0x42>
 800e6e6:	2316      	movs	r3, #22
 800e6e8:	6003      	str	r3, [r0, #0]
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	e7e7      	b.n	800e6be <_raise_r+0x12>
 800e6ee:	2400      	movs	r4, #0
 800e6f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	4798      	blx	r3
 800e6f8:	2000      	movs	r0, #0
 800e6fa:	e7e0      	b.n	800e6be <_raise_r+0x12>

0800e6fc <raise>:
 800e6fc:	4b02      	ldr	r3, [pc, #8]	; (800e708 <raise+0xc>)
 800e6fe:	4601      	mov	r1, r0
 800e700:	6818      	ldr	r0, [r3, #0]
 800e702:	f7ff bfd3 	b.w	800e6ac <_raise_r>
 800e706:	bf00      	nop
 800e708:	200005d8 	.word	0x200005d8

0800e70c <_kill_r>:
 800e70c:	b538      	push	{r3, r4, r5, lr}
 800e70e:	4d07      	ldr	r5, [pc, #28]	; (800e72c <_kill_r+0x20>)
 800e710:	2300      	movs	r3, #0
 800e712:	4604      	mov	r4, r0
 800e714:	4608      	mov	r0, r1
 800e716:	4611      	mov	r1, r2
 800e718:	602b      	str	r3, [r5, #0]
 800e71a:	f7f4 f8db 	bl	80028d4 <_kill>
 800e71e:	1c43      	adds	r3, r0, #1
 800e720:	d102      	bne.n	800e728 <_kill_r+0x1c>
 800e722:	682b      	ldr	r3, [r5, #0]
 800e724:	b103      	cbz	r3, 800e728 <_kill_r+0x1c>
 800e726:	6023      	str	r3, [r4, #0]
 800e728:	bd38      	pop	{r3, r4, r5, pc}
 800e72a:	bf00      	nop
 800e72c:	2000483c 	.word	0x2000483c

0800e730 <_getpid_r>:
 800e730:	f7f4 b8c8 	b.w	80028c4 <_getpid>

0800e734 <_malloc_usable_size_r>:
 800e734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e738:	1f18      	subs	r0, r3, #4
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	bfbc      	itt	lt
 800e73e:	580b      	ldrlt	r3, [r1, r0]
 800e740:	18c0      	addlt	r0, r0, r3
 800e742:	4770      	bx	lr

0800e744 <__swhatbuf_r>:
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	460c      	mov	r4, r1
 800e748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e74c:	2900      	cmp	r1, #0
 800e74e:	b096      	sub	sp, #88	; 0x58
 800e750:	4615      	mov	r5, r2
 800e752:	461e      	mov	r6, r3
 800e754:	da0d      	bge.n	800e772 <__swhatbuf_r+0x2e>
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e75c:	f04f 0100 	mov.w	r1, #0
 800e760:	bf0c      	ite	eq
 800e762:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e766:	2340      	movne	r3, #64	; 0x40
 800e768:	2000      	movs	r0, #0
 800e76a:	6031      	str	r1, [r6, #0]
 800e76c:	602b      	str	r3, [r5, #0]
 800e76e:	b016      	add	sp, #88	; 0x58
 800e770:	bd70      	pop	{r4, r5, r6, pc}
 800e772:	466a      	mov	r2, sp
 800e774:	f000 f848 	bl	800e808 <_fstat_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	dbec      	blt.n	800e756 <__swhatbuf_r+0x12>
 800e77c:	9901      	ldr	r1, [sp, #4]
 800e77e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e782:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e786:	4259      	negs	r1, r3
 800e788:	4159      	adcs	r1, r3
 800e78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e78e:	e7eb      	b.n	800e768 <__swhatbuf_r+0x24>

0800e790 <__smakebuf_r>:
 800e790:	898b      	ldrh	r3, [r1, #12]
 800e792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e794:	079d      	lsls	r5, r3, #30
 800e796:	4606      	mov	r6, r0
 800e798:	460c      	mov	r4, r1
 800e79a:	d507      	bpl.n	800e7ac <__smakebuf_r+0x1c>
 800e79c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	6123      	str	r3, [r4, #16]
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	6163      	str	r3, [r4, #20]
 800e7a8:	b002      	add	sp, #8
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	ab01      	add	r3, sp, #4
 800e7ae:	466a      	mov	r2, sp
 800e7b0:	f7ff ffc8 	bl	800e744 <__swhatbuf_r>
 800e7b4:	9900      	ldr	r1, [sp, #0]
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	f7fb fbd1 	bl	8009f60 <_malloc_r>
 800e7be:	b948      	cbnz	r0, 800e7d4 <__smakebuf_r+0x44>
 800e7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7c4:	059a      	lsls	r2, r3, #22
 800e7c6:	d4ef      	bmi.n	800e7a8 <__smakebuf_r+0x18>
 800e7c8:	f023 0303 	bic.w	r3, r3, #3
 800e7cc:	f043 0302 	orr.w	r3, r3, #2
 800e7d0:	81a3      	strh	r3, [r4, #12]
 800e7d2:	e7e3      	b.n	800e79c <__smakebuf_r+0xc>
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	6020      	str	r0, [r4, #0]
 800e7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7dc:	81a3      	strh	r3, [r4, #12]
 800e7de:	9b00      	ldr	r3, [sp, #0]
 800e7e0:	6163      	str	r3, [r4, #20]
 800e7e2:	9b01      	ldr	r3, [sp, #4]
 800e7e4:	6120      	str	r0, [r4, #16]
 800e7e6:	b15b      	cbz	r3, 800e800 <__smakebuf_r+0x70>
 800e7e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f000 f81d 	bl	800e82c <_isatty_r>
 800e7f2:	b128      	cbz	r0, 800e800 <__smakebuf_r+0x70>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	f023 0303 	bic.w	r3, r3, #3
 800e7fa:	f043 0301 	orr.w	r3, r3, #1
 800e7fe:	81a3      	strh	r3, [r4, #12]
 800e800:	89a3      	ldrh	r3, [r4, #12]
 800e802:	431d      	orrs	r5, r3
 800e804:	81a5      	strh	r5, [r4, #12]
 800e806:	e7cf      	b.n	800e7a8 <__smakebuf_r+0x18>

0800e808 <_fstat_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d07      	ldr	r5, [pc, #28]	; (800e828 <_fstat_r+0x20>)
 800e80c:	2300      	movs	r3, #0
 800e80e:	4604      	mov	r4, r0
 800e810:	4608      	mov	r0, r1
 800e812:	4611      	mov	r1, r2
 800e814:	602b      	str	r3, [r5, #0]
 800e816:	f7f4 f8bc 	bl	8002992 <_fstat>
 800e81a:	1c43      	adds	r3, r0, #1
 800e81c:	d102      	bne.n	800e824 <_fstat_r+0x1c>
 800e81e:	682b      	ldr	r3, [r5, #0]
 800e820:	b103      	cbz	r3, 800e824 <_fstat_r+0x1c>
 800e822:	6023      	str	r3, [r4, #0]
 800e824:	bd38      	pop	{r3, r4, r5, pc}
 800e826:	bf00      	nop
 800e828:	2000483c 	.word	0x2000483c

0800e82c <_isatty_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d06      	ldr	r5, [pc, #24]	; (800e848 <_isatty_r+0x1c>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	602b      	str	r3, [r5, #0]
 800e838:	f7f4 f8bb 	bl	80029b2 <_isatty>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_isatty_r+0x1a>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_isatty_r+0x1a>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	2000483c 	.word	0x2000483c
 800e84c:	00000000 	.word	0x00000000

0800e850 <sin>:
 800e850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e852:	ec53 2b10 	vmov	r2, r3, d0
 800e856:	4828      	ldr	r0, [pc, #160]	; (800e8f8 <sin+0xa8>)
 800e858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e85c:	4281      	cmp	r1, r0
 800e85e:	dc07      	bgt.n	800e870 <sin+0x20>
 800e860:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e8f0 <sin+0xa0>
 800e864:	2000      	movs	r0, #0
 800e866:	b005      	add	sp, #20
 800e868:	f85d eb04 	ldr.w	lr, [sp], #4
 800e86c:	f000 b958 	b.w	800eb20 <__kernel_sin>
 800e870:	4822      	ldr	r0, [pc, #136]	; (800e8fc <sin+0xac>)
 800e872:	4281      	cmp	r1, r0
 800e874:	dd09      	ble.n	800e88a <sin+0x3a>
 800e876:	ee10 0a10 	vmov	r0, s0
 800e87a:	4619      	mov	r1, r3
 800e87c:	f7f1 fd04 	bl	8000288 <__aeabi_dsub>
 800e880:	ec41 0b10 	vmov	d0, r0, r1
 800e884:	b005      	add	sp, #20
 800e886:	f85d fb04 	ldr.w	pc, [sp], #4
 800e88a:	4668      	mov	r0, sp
 800e88c:	f000 fa08 	bl	800eca0 <__ieee754_rem_pio2>
 800e890:	f000 0003 	and.w	r0, r0, #3
 800e894:	2801      	cmp	r0, #1
 800e896:	d00c      	beq.n	800e8b2 <sin+0x62>
 800e898:	2802      	cmp	r0, #2
 800e89a:	d011      	beq.n	800e8c0 <sin+0x70>
 800e89c:	b9f0      	cbnz	r0, 800e8dc <sin+0x8c>
 800e89e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8a2:	ed9d 0b00 	vldr	d0, [sp]
 800e8a6:	2001      	movs	r0, #1
 800e8a8:	f000 f93a 	bl	800eb20 <__kernel_sin>
 800e8ac:	ec51 0b10 	vmov	r0, r1, d0
 800e8b0:	e7e6      	b.n	800e880 <sin+0x30>
 800e8b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8b6:	ed9d 0b00 	vldr	d0, [sp]
 800e8ba:	f000 f869 	bl	800e990 <__kernel_cos>
 800e8be:	e7f5      	b.n	800e8ac <sin+0x5c>
 800e8c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8c4:	ed9d 0b00 	vldr	d0, [sp]
 800e8c8:	2001      	movs	r0, #1
 800e8ca:	f000 f929 	bl	800eb20 <__kernel_sin>
 800e8ce:	ec53 2b10 	vmov	r2, r3, d0
 800e8d2:	ee10 0a10 	vmov	r0, s0
 800e8d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e8da:	e7d1      	b.n	800e880 <sin+0x30>
 800e8dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8e0:	ed9d 0b00 	vldr	d0, [sp]
 800e8e4:	f000 f854 	bl	800e990 <__kernel_cos>
 800e8e8:	e7f1      	b.n	800e8ce <sin+0x7e>
 800e8ea:	bf00      	nop
 800e8ec:	f3af 8000 	nop.w
	...
 800e8f8:	3fe921fb 	.word	0x3fe921fb
 800e8fc:	7fefffff 	.word	0x7fefffff

0800e900 <round>:
 800e900:	ec53 2b10 	vmov	r2, r3, d0
 800e904:	b570      	push	{r4, r5, r6, lr}
 800e906:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e90a:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e90e:	2813      	cmp	r0, #19
 800e910:	ee10 5a10 	vmov	r5, s0
 800e914:	4619      	mov	r1, r3
 800e916:	dc18      	bgt.n	800e94a <round+0x4a>
 800e918:	2800      	cmp	r0, #0
 800e91a:	da09      	bge.n	800e930 <round+0x30>
 800e91c:	3001      	adds	r0, #1
 800e91e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800e922:	d103      	bne.n	800e92c <round+0x2c>
 800e924:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e928:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e92c:	2300      	movs	r3, #0
 800e92e:	e02a      	b.n	800e986 <round+0x86>
 800e930:	4c16      	ldr	r4, [pc, #88]	; (800e98c <round+0x8c>)
 800e932:	4104      	asrs	r4, r0
 800e934:	ea03 0604 	and.w	r6, r3, r4
 800e938:	4316      	orrs	r6, r2
 800e93a:	d011      	beq.n	800e960 <round+0x60>
 800e93c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e940:	4103      	asrs	r3, r0
 800e942:	440b      	add	r3, r1
 800e944:	ea23 0104 	bic.w	r1, r3, r4
 800e948:	e7f0      	b.n	800e92c <round+0x2c>
 800e94a:	2833      	cmp	r0, #51	; 0x33
 800e94c:	dd0b      	ble.n	800e966 <round+0x66>
 800e94e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e952:	d105      	bne.n	800e960 <round+0x60>
 800e954:	ee10 0a10 	vmov	r0, s0
 800e958:	f7f1 fc98 	bl	800028c <__adddf3>
 800e95c:	4602      	mov	r2, r0
 800e95e:	460b      	mov	r3, r1
 800e960:	ec43 2b10 	vmov	d0, r2, r3
 800e964:	bd70      	pop	{r4, r5, r6, pc}
 800e966:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800e96a:	f04f 34ff 	mov.w	r4, #4294967295
 800e96e:	40f4      	lsrs	r4, r6
 800e970:	4214      	tst	r4, r2
 800e972:	d0f5      	beq.n	800e960 <round+0x60>
 800e974:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800e978:	2301      	movs	r3, #1
 800e97a:	4083      	lsls	r3, r0
 800e97c:	195b      	adds	r3, r3, r5
 800e97e:	bf28      	it	cs
 800e980:	3101      	addcs	r1, #1
 800e982:	ea23 0304 	bic.w	r3, r3, r4
 800e986:	461a      	mov	r2, r3
 800e988:	460b      	mov	r3, r1
 800e98a:	e7e9      	b.n	800e960 <round+0x60>
 800e98c:	000fffff 	.word	0x000fffff

0800e990 <__kernel_cos>:
 800e990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	ec57 6b10 	vmov	r6, r7, d0
 800e998:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e99c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e9a0:	ed8d 1b00 	vstr	d1, [sp]
 800e9a4:	da07      	bge.n	800e9b6 <__kernel_cos+0x26>
 800e9a6:	ee10 0a10 	vmov	r0, s0
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	f7f2 f8d4 	bl	8000b58 <__aeabi_d2iz>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	f000 8088 	beq.w	800eac6 <__kernel_cos+0x136>
 800e9b6:	4632      	mov	r2, r6
 800e9b8:	463b      	mov	r3, r7
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f1 fe1b 	bl	80005f8 <__aeabi_dmul>
 800e9c2:	4b51      	ldr	r3, [pc, #324]	; (800eb08 <__kernel_cos+0x178>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	f7f1 fe15 	bl	80005f8 <__aeabi_dmul>
 800e9ce:	a340      	add	r3, pc, #256	; (adr r3, 800ead0 <__kernel_cos+0x140>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	4682      	mov	sl, r0
 800e9d6:	468b      	mov	fp, r1
 800e9d8:	4620      	mov	r0, r4
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	a33d      	add	r3, pc, #244	; (adr r3, 800ead8 <__kernel_cos+0x148>)
 800e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e6:	f7f1 fc51 	bl	800028c <__adddf3>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	f7f1 fe03 	bl	80005f8 <__aeabi_dmul>
 800e9f2:	a33b      	add	r3, pc, #236	; (adr r3, 800eae0 <__kernel_cos+0x150>)
 800e9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f8:	f7f1 fc46 	bl	8000288 <__aeabi_dsub>
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	462b      	mov	r3, r5
 800ea00:	f7f1 fdfa 	bl	80005f8 <__aeabi_dmul>
 800ea04:	a338      	add	r3, pc, #224	; (adr r3, 800eae8 <__kernel_cos+0x158>)
 800ea06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0a:	f7f1 fc3f 	bl	800028c <__adddf3>
 800ea0e:	4622      	mov	r2, r4
 800ea10:	462b      	mov	r3, r5
 800ea12:	f7f1 fdf1 	bl	80005f8 <__aeabi_dmul>
 800ea16:	a336      	add	r3, pc, #216	; (adr r3, 800eaf0 <__kernel_cos+0x160>)
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	f7f1 fc34 	bl	8000288 <__aeabi_dsub>
 800ea20:	4622      	mov	r2, r4
 800ea22:	462b      	mov	r3, r5
 800ea24:	f7f1 fde8 	bl	80005f8 <__aeabi_dmul>
 800ea28:	a333      	add	r3, pc, #204	; (adr r3, 800eaf8 <__kernel_cos+0x168>)
 800ea2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2e:	f7f1 fc2d 	bl	800028c <__adddf3>
 800ea32:	4622      	mov	r2, r4
 800ea34:	462b      	mov	r3, r5
 800ea36:	f7f1 fddf 	bl	80005f8 <__aeabi_dmul>
 800ea3a:	4622      	mov	r2, r4
 800ea3c:	462b      	mov	r3, r5
 800ea3e:	f7f1 fddb 	bl	80005f8 <__aeabi_dmul>
 800ea42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea46:	4604      	mov	r4, r0
 800ea48:	460d      	mov	r5, r1
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	f7f1 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ea52:	460b      	mov	r3, r1
 800ea54:	4602      	mov	r2, r0
 800ea56:	4629      	mov	r1, r5
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f7f1 fc15 	bl	8000288 <__aeabi_dsub>
 800ea5e:	4b2b      	ldr	r3, [pc, #172]	; (800eb0c <__kernel_cos+0x17c>)
 800ea60:	4598      	cmp	r8, r3
 800ea62:	4606      	mov	r6, r0
 800ea64:	460f      	mov	r7, r1
 800ea66:	dc10      	bgt.n	800ea8a <__kernel_cos+0xfa>
 800ea68:	4602      	mov	r2, r0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	4650      	mov	r0, sl
 800ea6e:	4659      	mov	r1, fp
 800ea70:	f7f1 fc0a 	bl	8000288 <__aeabi_dsub>
 800ea74:	460b      	mov	r3, r1
 800ea76:	4926      	ldr	r1, [pc, #152]	; (800eb10 <__kernel_cos+0x180>)
 800ea78:	4602      	mov	r2, r0
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	f7f1 fc04 	bl	8000288 <__aeabi_dsub>
 800ea80:	ec41 0b10 	vmov	d0, r0, r1
 800ea84:	b003      	add	sp, #12
 800ea86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea8a:	4b22      	ldr	r3, [pc, #136]	; (800eb14 <__kernel_cos+0x184>)
 800ea8c:	4920      	ldr	r1, [pc, #128]	; (800eb10 <__kernel_cos+0x180>)
 800ea8e:	4598      	cmp	r8, r3
 800ea90:	bfcc      	ite	gt
 800ea92:	4d21      	ldrgt	r5, [pc, #132]	; (800eb18 <__kernel_cos+0x188>)
 800ea94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ea98:	2400      	movs	r4, #0
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	462b      	mov	r3, r5
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	f7f1 fbf2 	bl	8000288 <__aeabi_dsub>
 800eaa4:	4622      	mov	r2, r4
 800eaa6:	4680      	mov	r8, r0
 800eaa8:	4689      	mov	r9, r1
 800eaaa:	462b      	mov	r3, r5
 800eaac:	4650      	mov	r0, sl
 800eaae:	4659      	mov	r1, fp
 800eab0:	f7f1 fbea 	bl	8000288 <__aeabi_dsub>
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	f7f1 fbe6 	bl	8000288 <__aeabi_dsub>
 800eabc:	4602      	mov	r2, r0
 800eabe:	460b      	mov	r3, r1
 800eac0:	4640      	mov	r0, r8
 800eac2:	4649      	mov	r1, r9
 800eac4:	e7da      	b.n	800ea7c <__kernel_cos+0xec>
 800eac6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eb00 <__kernel_cos+0x170>
 800eaca:	e7db      	b.n	800ea84 <__kernel_cos+0xf4>
 800eacc:	f3af 8000 	nop.w
 800ead0:	be8838d4 	.word	0xbe8838d4
 800ead4:	bda8fae9 	.word	0xbda8fae9
 800ead8:	bdb4b1c4 	.word	0xbdb4b1c4
 800eadc:	3e21ee9e 	.word	0x3e21ee9e
 800eae0:	809c52ad 	.word	0x809c52ad
 800eae4:	3e927e4f 	.word	0x3e927e4f
 800eae8:	19cb1590 	.word	0x19cb1590
 800eaec:	3efa01a0 	.word	0x3efa01a0
 800eaf0:	16c15177 	.word	0x16c15177
 800eaf4:	3f56c16c 	.word	0x3f56c16c
 800eaf8:	5555554c 	.word	0x5555554c
 800eafc:	3fa55555 	.word	0x3fa55555
 800eb00:	00000000 	.word	0x00000000
 800eb04:	3ff00000 	.word	0x3ff00000
 800eb08:	3fe00000 	.word	0x3fe00000
 800eb0c:	3fd33332 	.word	0x3fd33332
 800eb10:	3ff00000 	.word	0x3ff00000
 800eb14:	3fe90000 	.word	0x3fe90000
 800eb18:	3fd20000 	.word	0x3fd20000
 800eb1c:	00000000 	.word	0x00000000

0800eb20 <__kernel_sin>:
 800eb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	ed2d 8b04 	vpush	{d8-d9}
 800eb28:	eeb0 8a41 	vmov.f32	s16, s2
 800eb2c:	eef0 8a61 	vmov.f32	s17, s3
 800eb30:	ec55 4b10 	vmov	r4, r5, d0
 800eb34:	b083      	sub	sp, #12
 800eb36:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eb3a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800eb3e:	9001      	str	r0, [sp, #4]
 800eb40:	da06      	bge.n	800eb50 <__kernel_sin+0x30>
 800eb42:	ee10 0a10 	vmov	r0, s0
 800eb46:	4629      	mov	r1, r5
 800eb48:	f7f2 f806 	bl	8000b58 <__aeabi_d2iz>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d051      	beq.n	800ebf4 <__kernel_sin+0xd4>
 800eb50:	4622      	mov	r2, r4
 800eb52:	462b      	mov	r3, r5
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	f7f1 fd4e 	bl	80005f8 <__aeabi_dmul>
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	468b      	mov	fp, r1
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	4620      	mov	r0, r4
 800eb66:	4629      	mov	r1, r5
 800eb68:	f7f1 fd46 	bl	80005f8 <__aeabi_dmul>
 800eb6c:	a341      	add	r3, pc, #260	; (adr r3, 800ec74 <__kernel_sin+0x154>)
 800eb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb72:	4680      	mov	r8, r0
 800eb74:	4689      	mov	r9, r1
 800eb76:	4650      	mov	r0, sl
 800eb78:	4659      	mov	r1, fp
 800eb7a:	f7f1 fd3d 	bl	80005f8 <__aeabi_dmul>
 800eb7e:	a33f      	add	r3, pc, #252	; (adr r3, 800ec7c <__kernel_sin+0x15c>)
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	f7f1 fb80 	bl	8000288 <__aeabi_dsub>
 800eb88:	4652      	mov	r2, sl
 800eb8a:	465b      	mov	r3, fp
 800eb8c:	f7f1 fd34 	bl	80005f8 <__aeabi_dmul>
 800eb90:	a33c      	add	r3, pc, #240	; (adr r3, 800ec84 <__kernel_sin+0x164>)
 800eb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb96:	f7f1 fb79 	bl	800028c <__adddf3>
 800eb9a:	4652      	mov	r2, sl
 800eb9c:	465b      	mov	r3, fp
 800eb9e:	f7f1 fd2b 	bl	80005f8 <__aeabi_dmul>
 800eba2:	a33a      	add	r3, pc, #232	; (adr r3, 800ec8c <__kernel_sin+0x16c>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	f7f1 fb6e 	bl	8000288 <__aeabi_dsub>
 800ebac:	4652      	mov	r2, sl
 800ebae:	465b      	mov	r3, fp
 800ebb0:	f7f1 fd22 	bl	80005f8 <__aeabi_dmul>
 800ebb4:	a337      	add	r3, pc, #220	; (adr r3, 800ec94 <__kernel_sin+0x174>)
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	f7f1 fb67 	bl	800028c <__adddf3>
 800ebbe:	9b01      	ldr	r3, [sp, #4]
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	b9eb      	cbnz	r3, 800ec02 <__kernel_sin+0xe2>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4650      	mov	r0, sl
 800ebcc:	4659      	mov	r1, fp
 800ebce:	f7f1 fd13 	bl	80005f8 <__aeabi_dmul>
 800ebd2:	a325      	add	r3, pc, #148	; (adr r3, 800ec68 <__kernel_sin+0x148>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f7f1 fb56 	bl	8000288 <__aeabi_dsub>
 800ebdc:	4642      	mov	r2, r8
 800ebde:	464b      	mov	r3, r9
 800ebe0:	f7f1 fd0a 	bl	80005f8 <__aeabi_dmul>
 800ebe4:	4602      	mov	r2, r0
 800ebe6:	460b      	mov	r3, r1
 800ebe8:	4620      	mov	r0, r4
 800ebea:	4629      	mov	r1, r5
 800ebec:	f7f1 fb4e 	bl	800028c <__adddf3>
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	460d      	mov	r5, r1
 800ebf4:	ec45 4b10 	vmov	d0, r4, r5
 800ebf8:	b003      	add	sp, #12
 800ebfa:	ecbd 8b04 	vpop	{d8-d9}
 800ebfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec02:	4b1b      	ldr	r3, [pc, #108]	; (800ec70 <__kernel_sin+0x150>)
 800ec04:	ec51 0b18 	vmov	r0, r1, d8
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f7f1 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ec0e:	4632      	mov	r2, r6
 800ec10:	ec41 0b19 	vmov	d9, r0, r1
 800ec14:	463b      	mov	r3, r7
 800ec16:	4640      	mov	r0, r8
 800ec18:	4649      	mov	r1, r9
 800ec1a:	f7f1 fced 	bl	80005f8 <__aeabi_dmul>
 800ec1e:	4602      	mov	r2, r0
 800ec20:	460b      	mov	r3, r1
 800ec22:	ec51 0b19 	vmov	r0, r1, d9
 800ec26:	f7f1 fb2f 	bl	8000288 <__aeabi_dsub>
 800ec2a:	4652      	mov	r2, sl
 800ec2c:	465b      	mov	r3, fp
 800ec2e:	f7f1 fce3 	bl	80005f8 <__aeabi_dmul>
 800ec32:	ec53 2b18 	vmov	r2, r3, d8
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	a30b      	add	r3, pc, #44	; (adr r3, 800ec68 <__kernel_sin+0x148>)
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	4606      	mov	r6, r0
 800ec42:	460f      	mov	r7, r1
 800ec44:	4640      	mov	r0, r8
 800ec46:	4649      	mov	r1, r9
 800ec48:	f7f1 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	460b      	mov	r3, r1
 800ec50:	4630      	mov	r0, r6
 800ec52:	4639      	mov	r1, r7
 800ec54:	f7f1 fb1a 	bl	800028c <__adddf3>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	4629      	mov	r1, r5
 800ec60:	f7f1 fb12 	bl	8000288 <__aeabi_dsub>
 800ec64:	e7c4      	b.n	800ebf0 <__kernel_sin+0xd0>
 800ec66:	bf00      	nop
 800ec68:	55555549 	.word	0x55555549
 800ec6c:	3fc55555 	.word	0x3fc55555
 800ec70:	3fe00000 	.word	0x3fe00000
 800ec74:	5acfd57c 	.word	0x5acfd57c
 800ec78:	3de5d93a 	.word	0x3de5d93a
 800ec7c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ec80:	3e5ae5e6 	.word	0x3e5ae5e6
 800ec84:	57b1fe7d 	.word	0x57b1fe7d
 800ec88:	3ec71de3 	.word	0x3ec71de3
 800ec8c:	19c161d5 	.word	0x19c161d5
 800ec90:	3f2a01a0 	.word	0x3f2a01a0
 800ec94:	1110f8a6 	.word	0x1110f8a6
 800ec98:	3f811111 	.word	0x3f811111
 800ec9c:	00000000 	.word	0x00000000

0800eca0 <__ieee754_rem_pio2>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	ed2d 8b02 	vpush	{d8}
 800eca8:	ec55 4b10 	vmov	r4, r5, d0
 800ecac:	4bca      	ldr	r3, [pc, #808]	; (800efd8 <__ieee754_rem_pio2+0x338>)
 800ecae:	b08b      	sub	sp, #44	; 0x2c
 800ecb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ecb4:	4598      	cmp	r8, r3
 800ecb6:	4682      	mov	sl, r0
 800ecb8:	9502      	str	r5, [sp, #8]
 800ecba:	dc08      	bgt.n	800ecce <__ieee754_rem_pio2+0x2e>
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	ed80 0b00 	vstr	d0, [r0]
 800ecc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ecc8:	f04f 0b00 	mov.w	fp, #0
 800eccc:	e028      	b.n	800ed20 <__ieee754_rem_pio2+0x80>
 800ecce:	4bc3      	ldr	r3, [pc, #780]	; (800efdc <__ieee754_rem_pio2+0x33c>)
 800ecd0:	4598      	cmp	r8, r3
 800ecd2:	dc78      	bgt.n	800edc6 <__ieee754_rem_pio2+0x126>
 800ecd4:	9b02      	ldr	r3, [sp, #8]
 800ecd6:	4ec2      	ldr	r6, [pc, #776]	; (800efe0 <__ieee754_rem_pio2+0x340>)
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	ee10 0a10 	vmov	r0, s0
 800ecde:	a3b0      	add	r3, pc, #704	; (adr r3, 800efa0 <__ieee754_rem_pio2+0x300>)
 800ece0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece4:	4629      	mov	r1, r5
 800ece6:	dd39      	ble.n	800ed5c <__ieee754_rem_pio2+0xbc>
 800ece8:	f7f1 face 	bl	8000288 <__aeabi_dsub>
 800ecec:	45b0      	cmp	r8, r6
 800ecee:	4604      	mov	r4, r0
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	d01b      	beq.n	800ed2c <__ieee754_rem_pio2+0x8c>
 800ecf4:	a3ac      	add	r3, pc, #688	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x308>)
 800ecf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfa:	f7f1 fac5 	bl	8000288 <__aeabi_dsub>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	e9ca 2300 	strd	r2, r3, [sl]
 800ed06:	4620      	mov	r0, r4
 800ed08:	4629      	mov	r1, r5
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	a3a6      	add	r3, pc, #664	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x308>)
 800ed10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed1c:	f04f 0b01 	mov.w	fp, #1
 800ed20:	4658      	mov	r0, fp
 800ed22:	b00b      	add	sp, #44	; 0x2c
 800ed24:	ecbd 8b02 	vpop	{d8}
 800ed28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2c:	a3a0      	add	r3, pc, #640	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x310>)
 800ed2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed32:	f7f1 faa9 	bl	8000288 <__aeabi_dsub>
 800ed36:	a3a0      	add	r3, pc, #640	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x318>)
 800ed38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	460d      	mov	r5, r1
 800ed40:	f7f1 faa2 	bl	8000288 <__aeabi_dsub>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	e9ca 2300 	strd	r2, r3, [sl]
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	4629      	mov	r1, r5
 800ed50:	f7f1 fa9a 	bl	8000288 <__aeabi_dsub>
 800ed54:	a398      	add	r3, pc, #608	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x318>)
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	e7db      	b.n	800ed14 <__ieee754_rem_pio2+0x74>
 800ed5c:	f7f1 fa96 	bl	800028c <__adddf3>
 800ed60:	45b0      	cmp	r8, r6
 800ed62:	4604      	mov	r4, r0
 800ed64:	460d      	mov	r5, r1
 800ed66:	d016      	beq.n	800ed96 <__ieee754_rem_pio2+0xf6>
 800ed68:	a38f      	add	r3, pc, #572	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x308>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fa8d 	bl	800028c <__adddf3>
 800ed72:	4602      	mov	r2, r0
 800ed74:	460b      	mov	r3, r1
 800ed76:	e9ca 2300 	strd	r2, r3, [sl]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	f7f1 fa83 	bl	8000288 <__aeabi_dsub>
 800ed82:	a389      	add	r3, pc, #548	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x308>)
 800ed84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed88:	f7f1 fa80 	bl	800028c <__adddf3>
 800ed8c:	f04f 3bff 	mov.w	fp, #4294967295
 800ed90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed94:	e7c4      	b.n	800ed20 <__ieee754_rem_pio2+0x80>
 800ed96:	a386      	add	r3, pc, #536	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x310>)
 800ed98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9c:	f7f1 fa76 	bl	800028c <__adddf3>
 800eda0:	a385      	add	r3, pc, #532	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x318>)
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	4604      	mov	r4, r0
 800eda8:	460d      	mov	r5, r1
 800edaa:	f7f1 fa6f 	bl	800028c <__adddf3>
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	e9ca 2300 	strd	r2, r3, [sl]
 800edb6:	4620      	mov	r0, r4
 800edb8:	4629      	mov	r1, r5
 800edba:	f7f1 fa65 	bl	8000288 <__aeabi_dsub>
 800edbe:	a37e      	add	r3, pc, #504	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x318>)
 800edc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc4:	e7e0      	b.n	800ed88 <__ieee754_rem_pio2+0xe8>
 800edc6:	4b87      	ldr	r3, [pc, #540]	; (800efe4 <__ieee754_rem_pio2+0x344>)
 800edc8:	4598      	cmp	r8, r3
 800edca:	f300 80d8 	bgt.w	800ef7e <__ieee754_rem_pio2+0x2de>
 800edce:	f000 f96d 	bl	800f0ac <fabs>
 800edd2:	ec55 4b10 	vmov	r4, r5, d0
 800edd6:	ee10 0a10 	vmov	r0, s0
 800edda:	a379      	add	r3, pc, #484	; (adr r3, 800efc0 <__ieee754_rem_pio2+0x320>)
 800eddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede0:	4629      	mov	r1, r5
 800ede2:	f7f1 fc09 	bl	80005f8 <__aeabi_dmul>
 800ede6:	4b80      	ldr	r3, [pc, #512]	; (800efe8 <__ieee754_rem_pio2+0x348>)
 800ede8:	2200      	movs	r2, #0
 800edea:	f7f1 fa4f 	bl	800028c <__adddf3>
 800edee:	f7f1 feb3 	bl	8000b58 <__aeabi_d2iz>
 800edf2:	4683      	mov	fp, r0
 800edf4:	f7f1 fb96 	bl	8000524 <__aeabi_i2d>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	ec43 2b18 	vmov	d8, r2, r3
 800ee00:	a367      	add	r3, pc, #412	; (adr r3, 800efa0 <__ieee754_rem_pio2+0x300>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 fbf7 	bl	80005f8 <__aeabi_dmul>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	4620      	mov	r0, r4
 800ee10:	4629      	mov	r1, r5
 800ee12:	f7f1 fa39 	bl	8000288 <__aeabi_dsub>
 800ee16:	a364      	add	r3, pc, #400	; (adr r3, 800efa8 <__ieee754_rem_pio2+0x308>)
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	460f      	mov	r7, r1
 800ee20:	ec51 0b18 	vmov	r0, r1, d8
 800ee24:	f7f1 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ee28:	f1bb 0f1f 	cmp.w	fp, #31
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	460d      	mov	r5, r1
 800ee30:	dc0d      	bgt.n	800ee4e <__ieee754_rem_pio2+0x1ae>
 800ee32:	4b6e      	ldr	r3, [pc, #440]	; (800efec <__ieee754_rem_pio2+0x34c>)
 800ee34:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ee38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee3c:	4543      	cmp	r3, r8
 800ee3e:	d006      	beq.n	800ee4e <__ieee754_rem_pio2+0x1ae>
 800ee40:	4622      	mov	r2, r4
 800ee42:	462b      	mov	r3, r5
 800ee44:	4630      	mov	r0, r6
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7f1 fa1e 	bl	8000288 <__aeabi_dsub>
 800ee4c:	e00e      	b.n	800ee6c <__ieee754_rem_pio2+0x1cc>
 800ee4e:	462b      	mov	r3, r5
 800ee50:	4622      	mov	r2, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	4639      	mov	r1, r7
 800ee56:	f7f1 fa17 	bl	8000288 <__aeabi_dsub>
 800ee5a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee5e:	9303      	str	r3, [sp, #12]
 800ee60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ee64:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ee68:	2b10      	cmp	r3, #16
 800ee6a:	dc02      	bgt.n	800ee72 <__ieee754_rem_pio2+0x1d2>
 800ee6c:	e9ca 0100 	strd	r0, r1, [sl]
 800ee70:	e039      	b.n	800eee6 <__ieee754_rem_pio2+0x246>
 800ee72:	a34f      	add	r3, pc, #316	; (adr r3, 800efb0 <__ieee754_rem_pio2+0x310>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	ec51 0b18 	vmov	r0, r1, d8
 800ee7c:	f7f1 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ee80:	4604      	mov	r4, r0
 800ee82:	460d      	mov	r5, r1
 800ee84:	4602      	mov	r2, r0
 800ee86:	460b      	mov	r3, r1
 800ee88:	4630      	mov	r0, r6
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	f7f1 f9fc 	bl	8000288 <__aeabi_dsub>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	4680      	mov	r8, r0
 800ee96:	4689      	mov	r9, r1
 800ee98:	4630      	mov	r0, r6
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	f7f1 f9f4 	bl	8000288 <__aeabi_dsub>
 800eea0:	4622      	mov	r2, r4
 800eea2:	462b      	mov	r3, r5
 800eea4:	f7f1 f9f0 	bl	8000288 <__aeabi_dsub>
 800eea8:	a343      	add	r3, pc, #268	; (adr r3, 800efb8 <__ieee754_rem_pio2+0x318>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	ec51 0b18 	vmov	r0, r1, d8
 800eeb6:	f7f1 fb9f 	bl	80005f8 <__aeabi_dmul>
 800eeba:	4622      	mov	r2, r4
 800eebc:	462b      	mov	r3, r5
 800eebe:	f7f1 f9e3 	bl	8000288 <__aeabi_dsub>
 800eec2:	4602      	mov	r2, r0
 800eec4:	460b      	mov	r3, r1
 800eec6:	4604      	mov	r4, r0
 800eec8:	460d      	mov	r5, r1
 800eeca:	4640      	mov	r0, r8
 800eecc:	4649      	mov	r1, r9
 800eece:	f7f1 f9db 	bl	8000288 <__aeabi_dsub>
 800eed2:	9a03      	ldr	r2, [sp, #12]
 800eed4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2b31      	cmp	r3, #49	; 0x31
 800eedc:	dc24      	bgt.n	800ef28 <__ieee754_rem_pio2+0x288>
 800eede:	e9ca 0100 	strd	r0, r1, [sl]
 800eee2:	4646      	mov	r6, r8
 800eee4:	464f      	mov	r7, r9
 800eee6:	e9da 8900 	ldrd	r8, r9, [sl]
 800eeea:	4630      	mov	r0, r6
 800eeec:	4642      	mov	r2, r8
 800eeee:	464b      	mov	r3, r9
 800eef0:	4639      	mov	r1, r7
 800eef2:	f7f1 f9c9 	bl	8000288 <__aeabi_dsub>
 800eef6:	462b      	mov	r3, r5
 800eef8:	4622      	mov	r2, r4
 800eefa:	f7f1 f9c5 	bl	8000288 <__aeabi_dsub>
 800eefe:	9b02      	ldr	r3, [sp, #8]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef06:	f6bf af0b 	bge.w	800ed20 <__ieee754_rem_pio2+0x80>
 800ef0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ef0e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ef12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef16:	f8ca 8000 	str.w	r8, [sl]
 800ef1a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ef1e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ef22:	f1cb 0b00 	rsb	fp, fp, #0
 800ef26:	e6fb      	b.n	800ed20 <__ieee754_rem_pio2+0x80>
 800ef28:	a327      	add	r3, pc, #156	; (adr r3, 800efc8 <__ieee754_rem_pio2+0x328>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	ec51 0b18 	vmov	r0, r1, d8
 800ef32:	f7f1 fb61 	bl	80005f8 <__aeabi_dmul>
 800ef36:	4604      	mov	r4, r0
 800ef38:	460d      	mov	r5, r1
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 f9a1 	bl	8000288 <__aeabi_dsub>
 800ef46:	4602      	mov	r2, r0
 800ef48:	460b      	mov	r3, r1
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	460f      	mov	r7, r1
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 f999 	bl	8000288 <__aeabi_dsub>
 800ef56:	4622      	mov	r2, r4
 800ef58:	462b      	mov	r3, r5
 800ef5a:	f7f1 f995 	bl	8000288 <__aeabi_dsub>
 800ef5e:	a31c      	add	r3, pc, #112	; (adr r3, 800efd0 <__ieee754_rem_pio2+0x330>)
 800ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef64:	4604      	mov	r4, r0
 800ef66:	460d      	mov	r5, r1
 800ef68:	ec51 0b18 	vmov	r0, r1, d8
 800ef6c:	f7f1 fb44 	bl	80005f8 <__aeabi_dmul>
 800ef70:	4622      	mov	r2, r4
 800ef72:	462b      	mov	r3, r5
 800ef74:	f7f1 f988 	bl	8000288 <__aeabi_dsub>
 800ef78:	4604      	mov	r4, r0
 800ef7a:	460d      	mov	r5, r1
 800ef7c:	e760      	b.n	800ee40 <__ieee754_rem_pio2+0x1a0>
 800ef7e:	4b1c      	ldr	r3, [pc, #112]	; (800eff0 <__ieee754_rem_pio2+0x350>)
 800ef80:	4598      	cmp	r8, r3
 800ef82:	dd37      	ble.n	800eff4 <__ieee754_rem_pio2+0x354>
 800ef84:	ee10 2a10 	vmov	r2, s0
 800ef88:	462b      	mov	r3, r5
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	f7f1 f97b 	bl	8000288 <__aeabi_dsub>
 800ef92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef96:	e9ca 0100 	strd	r0, r1, [sl]
 800ef9a:	e695      	b.n	800ecc8 <__ieee754_rem_pio2+0x28>
 800ef9c:	f3af 8000 	nop.w
 800efa0:	54400000 	.word	0x54400000
 800efa4:	3ff921fb 	.word	0x3ff921fb
 800efa8:	1a626331 	.word	0x1a626331
 800efac:	3dd0b461 	.word	0x3dd0b461
 800efb0:	1a600000 	.word	0x1a600000
 800efb4:	3dd0b461 	.word	0x3dd0b461
 800efb8:	2e037073 	.word	0x2e037073
 800efbc:	3ba3198a 	.word	0x3ba3198a
 800efc0:	6dc9c883 	.word	0x6dc9c883
 800efc4:	3fe45f30 	.word	0x3fe45f30
 800efc8:	2e000000 	.word	0x2e000000
 800efcc:	3ba3198a 	.word	0x3ba3198a
 800efd0:	252049c1 	.word	0x252049c1
 800efd4:	397b839a 	.word	0x397b839a
 800efd8:	3fe921fb 	.word	0x3fe921fb
 800efdc:	4002d97b 	.word	0x4002d97b
 800efe0:	3ff921fb 	.word	0x3ff921fb
 800efe4:	413921fb 	.word	0x413921fb
 800efe8:	3fe00000 	.word	0x3fe00000
 800efec:	08010098 	.word	0x08010098
 800eff0:	7fefffff 	.word	0x7fefffff
 800eff4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800eff8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800effc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f000:	4620      	mov	r0, r4
 800f002:	460d      	mov	r5, r1
 800f004:	f7f1 fda8 	bl	8000b58 <__aeabi_d2iz>
 800f008:	f7f1 fa8c 	bl	8000524 <__aeabi_i2d>
 800f00c:	4602      	mov	r2, r0
 800f00e:	460b      	mov	r3, r1
 800f010:	4620      	mov	r0, r4
 800f012:	4629      	mov	r1, r5
 800f014:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f018:	f7f1 f936 	bl	8000288 <__aeabi_dsub>
 800f01c:	4b21      	ldr	r3, [pc, #132]	; (800f0a4 <__ieee754_rem_pio2+0x404>)
 800f01e:	2200      	movs	r2, #0
 800f020:	f7f1 faea 	bl	80005f8 <__aeabi_dmul>
 800f024:	460d      	mov	r5, r1
 800f026:	4604      	mov	r4, r0
 800f028:	f7f1 fd96 	bl	8000b58 <__aeabi_d2iz>
 800f02c:	f7f1 fa7a 	bl	8000524 <__aeabi_i2d>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	4620      	mov	r0, r4
 800f036:	4629      	mov	r1, r5
 800f038:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f03c:	f7f1 f924 	bl	8000288 <__aeabi_dsub>
 800f040:	4b18      	ldr	r3, [pc, #96]	; (800f0a4 <__ieee754_rem_pio2+0x404>)
 800f042:	2200      	movs	r2, #0
 800f044:	f7f1 fad8 	bl	80005f8 <__aeabi_dmul>
 800f048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f04c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f050:	2703      	movs	r7, #3
 800f052:	2400      	movs	r4, #0
 800f054:	2500      	movs	r5, #0
 800f056:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f05a:	4622      	mov	r2, r4
 800f05c:	462b      	mov	r3, r5
 800f05e:	46b9      	mov	r9, r7
 800f060:	3f01      	subs	r7, #1
 800f062:	f7f1 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 800f066:	2800      	cmp	r0, #0
 800f068:	d1f5      	bne.n	800f056 <__ieee754_rem_pio2+0x3b6>
 800f06a:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <__ieee754_rem_pio2+0x408>)
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	2302      	movs	r3, #2
 800f070:	9300      	str	r3, [sp, #0]
 800f072:	4632      	mov	r2, r6
 800f074:	464b      	mov	r3, r9
 800f076:	4651      	mov	r1, sl
 800f078:	a804      	add	r0, sp, #16
 800f07a:	f000 f821 	bl	800f0c0 <__kernel_rem_pio2>
 800f07e:	9b02      	ldr	r3, [sp, #8]
 800f080:	2b00      	cmp	r3, #0
 800f082:	4683      	mov	fp, r0
 800f084:	f6bf ae4c 	bge.w	800ed20 <__ieee754_rem_pio2+0x80>
 800f088:	e9da 2100 	ldrd	r2, r1, [sl]
 800f08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f090:	e9ca 2300 	strd	r2, r3, [sl]
 800f094:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f098:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f09c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f0a0:	e73f      	b.n	800ef22 <__ieee754_rem_pio2+0x282>
 800f0a2:	bf00      	nop
 800f0a4:	41700000 	.word	0x41700000
 800f0a8:	08010118 	.word	0x08010118

0800f0ac <fabs>:
 800f0ac:	ec51 0b10 	vmov	r0, r1, d0
 800f0b0:	ee10 2a10 	vmov	r2, s0
 800f0b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f0b8:	ec43 2b10 	vmov	d0, r2, r3
 800f0bc:	4770      	bx	lr
	...

0800f0c0 <__kernel_rem_pio2>:
 800f0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c4:	ed2d 8b02 	vpush	{d8}
 800f0c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f0cc:	f112 0f14 	cmn.w	r2, #20
 800f0d0:	9306      	str	r3, [sp, #24]
 800f0d2:	9104      	str	r1, [sp, #16]
 800f0d4:	4bc2      	ldr	r3, [pc, #776]	; (800f3e0 <__kernel_rem_pio2+0x320>)
 800f0d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f0d8:	9009      	str	r0, [sp, #36]	; 0x24
 800f0da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	9b06      	ldr	r3, [sp, #24]
 800f0e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0e6:	bfa8      	it	ge
 800f0e8:	1ed4      	subge	r4, r2, #3
 800f0ea:	9305      	str	r3, [sp, #20]
 800f0ec:	bfb2      	itee	lt
 800f0ee:	2400      	movlt	r4, #0
 800f0f0:	2318      	movge	r3, #24
 800f0f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800f0f6:	f06f 0317 	mvn.w	r3, #23
 800f0fa:	fb04 3303 	mla	r3, r4, r3, r3
 800f0fe:	eb03 0a02 	add.w	sl, r3, r2
 800f102:	9b00      	ldr	r3, [sp, #0]
 800f104:	9a05      	ldr	r2, [sp, #20]
 800f106:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f3d0 <__kernel_rem_pio2+0x310>
 800f10a:	eb03 0802 	add.w	r8, r3, r2
 800f10e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f110:	1aa7      	subs	r7, r4, r2
 800f112:	ae20      	add	r6, sp, #128	; 0x80
 800f114:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f118:	2500      	movs	r5, #0
 800f11a:	4545      	cmp	r5, r8
 800f11c:	dd13      	ble.n	800f146 <__kernel_rem_pio2+0x86>
 800f11e:	9b06      	ldr	r3, [sp, #24]
 800f120:	aa20      	add	r2, sp, #128	; 0x80
 800f122:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f126:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f12a:	f04f 0800 	mov.w	r8, #0
 800f12e:	9b00      	ldr	r3, [sp, #0]
 800f130:	4598      	cmp	r8, r3
 800f132:	dc31      	bgt.n	800f198 <__kernel_rem_pio2+0xd8>
 800f134:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f3d0 <__kernel_rem_pio2+0x310>
 800f138:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f13c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f140:	462f      	mov	r7, r5
 800f142:	2600      	movs	r6, #0
 800f144:	e01b      	b.n	800f17e <__kernel_rem_pio2+0xbe>
 800f146:	42ef      	cmn	r7, r5
 800f148:	d407      	bmi.n	800f15a <__kernel_rem_pio2+0x9a>
 800f14a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f14e:	f7f1 f9e9 	bl	8000524 <__aeabi_i2d>
 800f152:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f156:	3501      	adds	r5, #1
 800f158:	e7df      	b.n	800f11a <__kernel_rem_pio2+0x5a>
 800f15a:	ec51 0b18 	vmov	r0, r1, d8
 800f15e:	e7f8      	b.n	800f152 <__kernel_rem_pio2+0x92>
 800f160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f164:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f168:	f7f1 fa46 	bl	80005f8 <__aeabi_dmul>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f174:	f7f1 f88a 	bl	800028c <__adddf3>
 800f178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f17c:	3601      	adds	r6, #1
 800f17e:	9b05      	ldr	r3, [sp, #20]
 800f180:	429e      	cmp	r6, r3
 800f182:	f1a7 0708 	sub.w	r7, r7, #8
 800f186:	ddeb      	ble.n	800f160 <__kernel_rem_pio2+0xa0>
 800f188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f18c:	f108 0801 	add.w	r8, r8, #1
 800f190:	ecab 7b02 	vstmia	fp!, {d7}
 800f194:	3508      	adds	r5, #8
 800f196:	e7ca      	b.n	800f12e <__kernel_rem_pio2+0x6e>
 800f198:	9b00      	ldr	r3, [sp, #0]
 800f19a:	aa0c      	add	r2, sp, #48	; 0x30
 800f19c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f1a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f1a8:	9c00      	ldr	r4, [sp, #0]
 800f1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800f1ac:	00e3      	lsls	r3, r4, #3
 800f1ae:	9308      	str	r3, [sp, #32]
 800f1b0:	ab98      	add	r3, sp, #608	; 0x260
 800f1b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f1ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f1be:	ab70      	add	r3, sp, #448	; 0x1c0
 800f1c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f1c4:	46c3      	mov	fp, r8
 800f1c6:	46a1      	mov	r9, r4
 800f1c8:	f1b9 0f00 	cmp.w	r9, #0
 800f1cc:	f1a5 0508 	sub.w	r5, r5, #8
 800f1d0:	dc77      	bgt.n	800f2c2 <__kernel_rem_pio2+0x202>
 800f1d2:	ec47 6b10 	vmov	d0, r6, r7
 800f1d6:	4650      	mov	r0, sl
 800f1d8:	f000 fac2 	bl	800f760 <scalbn>
 800f1dc:	ec57 6b10 	vmov	r6, r7, d0
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f1e6:	ee10 0a10 	vmov	r0, s0
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	f7f1 fa04 	bl	80005f8 <__aeabi_dmul>
 800f1f0:	ec41 0b10 	vmov	d0, r0, r1
 800f1f4:	f000 fb34 	bl	800f860 <floor>
 800f1f8:	4b7a      	ldr	r3, [pc, #488]	; (800f3e4 <__kernel_rem_pio2+0x324>)
 800f1fa:	ec51 0b10 	vmov	r0, r1, d0
 800f1fe:	2200      	movs	r2, #0
 800f200:	f7f1 f9fa 	bl	80005f8 <__aeabi_dmul>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	4630      	mov	r0, r6
 800f20a:	4639      	mov	r1, r7
 800f20c:	f7f1 f83c 	bl	8000288 <__aeabi_dsub>
 800f210:	460f      	mov	r7, r1
 800f212:	4606      	mov	r6, r0
 800f214:	f7f1 fca0 	bl	8000b58 <__aeabi_d2iz>
 800f218:	9002      	str	r0, [sp, #8]
 800f21a:	f7f1 f983 	bl	8000524 <__aeabi_i2d>
 800f21e:	4602      	mov	r2, r0
 800f220:	460b      	mov	r3, r1
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 f82f 	bl	8000288 <__aeabi_dsub>
 800f22a:	f1ba 0f00 	cmp.w	sl, #0
 800f22e:	4606      	mov	r6, r0
 800f230:	460f      	mov	r7, r1
 800f232:	dd6d      	ble.n	800f310 <__kernel_rem_pio2+0x250>
 800f234:	1e61      	subs	r1, r4, #1
 800f236:	ab0c      	add	r3, sp, #48	; 0x30
 800f238:	9d02      	ldr	r5, [sp, #8]
 800f23a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f23e:	f1ca 0018 	rsb	r0, sl, #24
 800f242:	fa43 f200 	asr.w	r2, r3, r0
 800f246:	4415      	add	r5, r2
 800f248:	4082      	lsls	r2, r0
 800f24a:	1a9b      	subs	r3, r3, r2
 800f24c:	aa0c      	add	r2, sp, #48	; 0x30
 800f24e:	9502      	str	r5, [sp, #8]
 800f250:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f254:	f1ca 0217 	rsb	r2, sl, #23
 800f258:	fa43 fb02 	asr.w	fp, r3, r2
 800f25c:	f1bb 0f00 	cmp.w	fp, #0
 800f260:	dd65      	ble.n	800f32e <__kernel_rem_pio2+0x26e>
 800f262:	9b02      	ldr	r3, [sp, #8]
 800f264:	2200      	movs	r2, #0
 800f266:	3301      	adds	r3, #1
 800f268:	9302      	str	r3, [sp, #8]
 800f26a:	4615      	mov	r5, r2
 800f26c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f270:	4294      	cmp	r4, r2
 800f272:	f300 809f 	bgt.w	800f3b4 <__kernel_rem_pio2+0x2f4>
 800f276:	f1ba 0f00 	cmp.w	sl, #0
 800f27a:	dd07      	ble.n	800f28c <__kernel_rem_pio2+0x1cc>
 800f27c:	f1ba 0f01 	cmp.w	sl, #1
 800f280:	f000 80c1 	beq.w	800f406 <__kernel_rem_pio2+0x346>
 800f284:	f1ba 0f02 	cmp.w	sl, #2
 800f288:	f000 80c7 	beq.w	800f41a <__kernel_rem_pio2+0x35a>
 800f28c:	f1bb 0f02 	cmp.w	fp, #2
 800f290:	d14d      	bne.n	800f32e <__kernel_rem_pio2+0x26e>
 800f292:	4632      	mov	r2, r6
 800f294:	463b      	mov	r3, r7
 800f296:	4954      	ldr	r1, [pc, #336]	; (800f3e8 <__kernel_rem_pio2+0x328>)
 800f298:	2000      	movs	r0, #0
 800f29a:	f7f0 fff5 	bl	8000288 <__aeabi_dsub>
 800f29e:	4606      	mov	r6, r0
 800f2a0:	460f      	mov	r7, r1
 800f2a2:	2d00      	cmp	r5, #0
 800f2a4:	d043      	beq.n	800f32e <__kernel_rem_pio2+0x26e>
 800f2a6:	4650      	mov	r0, sl
 800f2a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f3d8 <__kernel_rem_pio2+0x318>
 800f2ac:	f000 fa58 	bl	800f760 <scalbn>
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	ec53 2b10 	vmov	r2, r3, d0
 800f2b8:	f7f0 ffe6 	bl	8000288 <__aeabi_dsub>
 800f2bc:	4606      	mov	r6, r0
 800f2be:	460f      	mov	r7, r1
 800f2c0:	e035      	b.n	800f32e <__kernel_rem_pio2+0x26e>
 800f2c2:	4b4a      	ldr	r3, [pc, #296]	; (800f3ec <__kernel_rem_pio2+0x32c>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	4639      	mov	r1, r7
 800f2ca:	f7f1 f995 	bl	80005f8 <__aeabi_dmul>
 800f2ce:	f7f1 fc43 	bl	8000b58 <__aeabi_d2iz>
 800f2d2:	f7f1 f927 	bl	8000524 <__aeabi_i2d>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	460b      	mov	r3, r1
 800f2da:	ec43 2b18 	vmov	d8, r2, r3
 800f2de:	4b44      	ldr	r3, [pc, #272]	; (800f3f0 <__kernel_rem_pio2+0x330>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f7f1 f989 	bl	80005f8 <__aeabi_dmul>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	4639      	mov	r1, r7
 800f2ee:	f7f0 ffcb 	bl	8000288 <__aeabi_dsub>
 800f2f2:	f7f1 fc31 	bl	8000b58 <__aeabi_d2iz>
 800f2f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2fa:	f84b 0b04 	str.w	r0, [fp], #4
 800f2fe:	ec51 0b18 	vmov	r0, r1, d8
 800f302:	f7f0 ffc3 	bl	800028c <__adddf3>
 800f306:	f109 39ff 	add.w	r9, r9, #4294967295
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	e75b      	b.n	800f1c8 <__kernel_rem_pio2+0x108>
 800f310:	d106      	bne.n	800f320 <__kernel_rem_pio2+0x260>
 800f312:	1e63      	subs	r3, r4, #1
 800f314:	aa0c      	add	r2, sp, #48	; 0x30
 800f316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f31a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f31e:	e79d      	b.n	800f25c <__kernel_rem_pio2+0x19c>
 800f320:	4b34      	ldr	r3, [pc, #208]	; (800f3f4 <__kernel_rem_pio2+0x334>)
 800f322:	2200      	movs	r2, #0
 800f324:	f7f1 fbee 	bl	8000b04 <__aeabi_dcmpge>
 800f328:	2800      	cmp	r0, #0
 800f32a:	d140      	bne.n	800f3ae <__kernel_rem_pio2+0x2ee>
 800f32c:	4683      	mov	fp, r0
 800f32e:	2200      	movs	r2, #0
 800f330:	2300      	movs	r3, #0
 800f332:	4630      	mov	r0, r6
 800f334:	4639      	mov	r1, r7
 800f336:	f7f1 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	f000 80c1 	beq.w	800f4c2 <__kernel_rem_pio2+0x402>
 800f340:	1e65      	subs	r5, r4, #1
 800f342:	462b      	mov	r3, r5
 800f344:	2200      	movs	r2, #0
 800f346:	9900      	ldr	r1, [sp, #0]
 800f348:	428b      	cmp	r3, r1
 800f34a:	da6d      	bge.n	800f428 <__kernel_rem_pio2+0x368>
 800f34c:	2a00      	cmp	r2, #0
 800f34e:	f000 808a 	beq.w	800f466 <__kernel_rem_pio2+0x3a6>
 800f352:	ab0c      	add	r3, sp, #48	; 0x30
 800f354:	f1aa 0a18 	sub.w	sl, sl, #24
 800f358:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	f000 80ae 	beq.w	800f4be <__kernel_rem_pio2+0x3fe>
 800f362:	4650      	mov	r0, sl
 800f364:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f3d8 <__kernel_rem_pio2+0x318>
 800f368:	f000 f9fa 	bl	800f760 <scalbn>
 800f36c:	1c6b      	adds	r3, r5, #1
 800f36e:	00da      	lsls	r2, r3, #3
 800f370:	9205      	str	r2, [sp, #20]
 800f372:	ec57 6b10 	vmov	r6, r7, d0
 800f376:	aa70      	add	r2, sp, #448	; 0x1c0
 800f378:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f3ec <__kernel_rem_pio2+0x32c>
 800f37c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f380:	462c      	mov	r4, r5
 800f382:	f04f 0800 	mov.w	r8, #0
 800f386:	2c00      	cmp	r4, #0
 800f388:	f280 80d4 	bge.w	800f534 <__kernel_rem_pio2+0x474>
 800f38c:	462c      	mov	r4, r5
 800f38e:	2c00      	cmp	r4, #0
 800f390:	f2c0 8102 	blt.w	800f598 <__kernel_rem_pio2+0x4d8>
 800f394:	4b18      	ldr	r3, [pc, #96]	; (800f3f8 <__kernel_rem_pio2+0x338>)
 800f396:	461e      	mov	r6, r3
 800f398:	ab70      	add	r3, sp, #448	; 0x1c0
 800f39a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f39e:	1b2b      	subs	r3, r5, r4
 800f3a0:	f04f 0900 	mov.w	r9, #0
 800f3a4:	f04f 0a00 	mov.w	sl, #0
 800f3a8:	2700      	movs	r7, #0
 800f3aa:	9306      	str	r3, [sp, #24]
 800f3ac:	e0e6      	b.n	800f57c <__kernel_rem_pio2+0x4bc>
 800f3ae:	f04f 0b02 	mov.w	fp, #2
 800f3b2:	e756      	b.n	800f262 <__kernel_rem_pio2+0x1a2>
 800f3b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f3b8:	bb05      	cbnz	r5, 800f3fc <__kernel_rem_pio2+0x33c>
 800f3ba:	b123      	cbz	r3, 800f3c6 <__kernel_rem_pio2+0x306>
 800f3bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f3c0:	f8c8 3000 	str.w	r3, [r8]
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	3201      	adds	r2, #1
 800f3c8:	f108 0804 	add.w	r8, r8, #4
 800f3cc:	461d      	mov	r5, r3
 800f3ce:	e74f      	b.n	800f270 <__kernel_rem_pio2+0x1b0>
	...
 800f3dc:	3ff00000 	.word	0x3ff00000
 800f3e0:	08010260 	.word	0x08010260
 800f3e4:	40200000 	.word	0x40200000
 800f3e8:	3ff00000 	.word	0x3ff00000
 800f3ec:	3e700000 	.word	0x3e700000
 800f3f0:	41700000 	.word	0x41700000
 800f3f4:	3fe00000 	.word	0x3fe00000
 800f3f8:	08010220 	.word	0x08010220
 800f3fc:	1acb      	subs	r3, r1, r3
 800f3fe:	f8c8 3000 	str.w	r3, [r8]
 800f402:	462b      	mov	r3, r5
 800f404:	e7df      	b.n	800f3c6 <__kernel_rem_pio2+0x306>
 800f406:	1e62      	subs	r2, r4, #1
 800f408:	ab0c      	add	r3, sp, #48	; 0x30
 800f40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f40e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f412:	a90c      	add	r1, sp, #48	; 0x30
 800f414:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f418:	e738      	b.n	800f28c <__kernel_rem_pio2+0x1cc>
 800f41a:	1e62      	subs	r2, r4, #1
 800f41c:	ab0c      	add	r3, sp, #48	; 0x30
 800f41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f422:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f426:	e7f4      	b.n	800f412 <__kernel_rem_pio2+0x352>
 800f428:	a90c      	add	r1, sp, #48	; 0x30
 800f42a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f42e:	3b01      	subs	r3, #1
 800f430:	430a      	orrs	r2, r1
 800f432:	e788      	b.n	800f346 <__kernel_rem_pio2+0x286>
 800f434:	3301      	adds	r3, #1
 800f436:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f43a:	2900      	cmp	r1, #0
 800f43c:	d0fa      	beq.n	800f434 <__kernel_rem_pio2+0x374>
 800f43e:	9a08      	ldr	r2, [sp, #32]
 800f440:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f444:	446a      	add	r2, sp
 800f446:	3a98      	subs	r2, #152	; 0x98
 800f448:	9208      	str	r2, [sp, #32]
 800f44a:	9a06      	ldr	r2, [sp, #24]
 800f44c:	a920      	add	r1, sp, #128	; 0x80
 800f44e:	18a2      	adds	r2, r4, r2
 800f450:	18e3      	adds	r3, r4, r3
 800f452:	f104 0801 	add.w	r8, r4, #1
 800f456:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f45a:	9302      	str	r3, [sp, #8]
 800f45c:	9b02      	ldr	r3, [sp, #8]
 800f45e:	4543      	cmp	r3, r8
 800f460:	da04      	bge.n	800f46c <__kernel_rem_pio2+0x3ac>
 800f462:	461c      	mov	r4, r3
 800f464:	e6a2      	b.n	800f1ac <__kernel_rem_pio2+0xec>
 800f466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f468:	2301      	movs	r3, #1
 800f46a:	e7e4      	b.n	800f436 <__kernel_rem_pio2+0x376>
 800f46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f46e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f472:	f7f1 f857 	bl	8000524 <__aeabi_i2d>
 800f476:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f47c:	46ab      	mov	fp, r5
 800f47e:	461c      	mov	r4, r3
 800f480:	f04f 0900 	mov.w	r9, #0
 800f484:	2600      	movs	r6, #0
 800f486:	2700      	movs	r7, #0
 800f488:	9b05      	ldr	r3, [sp, #20]
 800f48a:	4599      	cmp	r9, r3
 800f48c:	dd06      	ble.n	800f49c <__kernel_rem_pio2+0x3dc>
 800f48e:	9b08      	ldr	r3, [sp, #32]
 800f490:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f494:	f108 0801 	add.w	r8, r8, #1
 800f498:	9308      	str	r3, [sp, #32]
 800f49a:	e7df      	b.n	800f45c <__kernel_rem_pio2+0x39c>
 800f49c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f4a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	f7f0 feec 	bl	800028c <__adddf3>
 800f4b4:	f109 0901 	add.w	r9, r9, #1
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	460f      	mov	r7, r1
 800f4bc:	e7e4      	b.n	800f488 <__kernel_rem_pio2+0x3c8>
 800f4be:	3d01      	subs	r5, #1
 800f4c0:	e747      	b.n	800f352 <__kernel_rem_pio2+0x292>
 800f4c2:	ec47 6b10 	vmov	d0, r6, r7
 800f4c6:	f1ca 0000 	rsb	r0, sl, #0
 800f4ca:	f000 f949 	bl	800f760 <scalbn>
 800f4ce:	ec57 6b10 	vmov	r6, r7, d0
 800f4d2:	4ba0      	ldr	r3, [pc, #640]	; (800f754 <__kernel_rem_pio2+0x694>)
 800f4d4:	ee10 0a10 	vmov	r0, s0
 800f4d8:	2200      	movs	r2, #0
 800f4da:	4639      	mov	r1, r7
 800f4dc:	f7f1 fb12 	bl	8000b04 <__aeabi_dcmpge>
 800f4e0:	b1f8      	cbz	r0, 800f522 <__kernel_rem_pio2+0x462>
 800f4e2:	4b9d      	ldr	r3, [pc, #628]	; (800f758 <__kernel_rem_pio2+0x698>)
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	4630      	mov	r0, r6
 800f4e8:	4639      	mov	r1, r7
 800f4ea:	f7f1 f885 	bl	80005f8 <__aeabi_dmul>
 800f4ee:	f7f1 fb33 	bl	8000b58 <__aeabi_d2iz>
 800f4f2:	4680      	mov	r8, r0
 800f4f4:	f7f1 f816 	bl	8000524 <__aeabi_i2d>
 800f4f8:	4b96      	ldr	r3, [pc, #600]	; (800f754 <__kernel_rem_pio2+0x694>)
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f7f1 f87c 	bl	80005f8 <__aeabi_dmul>
 800f500:	460b      	mov	r3, r1
 800f502:	4602      	mov	r2, r0
 800f504:	4639      	mov	r1, r7
 800f506:	4630      	mov	r0, r6
 800f508:	f7f0 febe 	bl	8000288 <__aeabi_dsub>
 800f50c:	f7f1 fb24 	bl	8000b58 <__aeabi_d2iz>
 800f510:	1c65      	adds	r5, r4, #1
 800f512:	ab0c      	add	r3, sp, #48	; 0x30
 800f514:	f10a 0a18 	add.w	sl, sl, #24
 800f518:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f51c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f520:	e71f      	b.n	800f362 <__kernel_rem_pio2+0x2a2>
 800f522:	4630      	mov	r0, r6
 800f524:	4639      	mov	r1, r7
 800f526:	f7f1 fb17 	bl	8000b58 <__aeabi_d2iz>
 800f52a:	ab0c      	add	r3, sp, #48	; 0x30
 800f52c:	4625      	mov	r5, r4
 800f52e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f532:	e716      	b.n	800f362 <__kernel_rem_pio2+0x2a2>
 800f534:	ab0c      	add	r3, sp, #48	; 0x30
 800f536:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f53a:	f7f0 fff3 	bl	8000524 <__aeabi_i2d>
 800f53e:	4632      	mov	r2, r6
 800f540:	463b      	mov	r3, r7
 800f542:	f7f1 f859 	bl	80005f8 <__aeabi_dmul>
 800f546:	4642      	mov	r2, r8
 800f548:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f54c:	464b      	mov	r3, r9
 800f54e:	4630      	mov	r0, r6
 800f550:	4639      	mov	r1, r7
 800f552:	f7f1 f851 	bl	80005f8 <__aeabi_dmul>
 800f556:	3c01      	subs	r4, #1
 800f558:	4606      	mov	r6, r0
 800f55a:	460f      	mov	r7, r1
 800f55c:	e713      	b.n	800f386 <__kernel_rem_pio2+0x2c6>
 800f55e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f562:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f566:	f7f1 f847 	bl	80005f8 <__aeabi_dmul>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4648      	mov	r0, r9
 800f570:	4651      	mov	r1, sl
 800f572:	f7f0 fe8b 	bl	800028c <__adddf3>
 800f576:	3701      	adds	r7, #1
 800f578:	4681      	mov	r9, r0
 800f57a:	468a      	mov	sl, r1
 800f57c:	9b00      	ldr	r3, [sp, #0]
 800f57e:	429f      	cmp	r7, r3
 800f580:	dc02      	bgt.n	800f588 <__kernel_rem_pio2+0x4c8>
 800f582:	9b06      	ldr	r3, [sp, #24]
 800f584:	429f      	cmp	r7, r3
 800f586:	ddea      	ble.n	800f55e <__kernel_rem_pio2+0x49e>
 800f588:	9a06      	ldr	r2, [sp, #24]
 800f58a:	ab48      	add	r3, sp, #288	; 0x120
 800f58c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f590:	e9c6 9a00 	strd	r9, sl, [r6]
 800f594:	3c01      	subs	r4, #1
 800f596:	e6fa      	b.n	800f38e <__kernel_rem_pio2+0x2ce>
 800f598:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f59a:	2b02      	cmp	r3, #2
 800f59c:	dc0b      	bgt.n	800f5b6 <__kernel_rem_pio2+0x4f6>
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	dc39      	bgt.n	800f616 <__kernel_rem_pio2+0x556>
 800f5a2:	d05d      	beq.n	800f660 <__kernel_rem_pio2+0x5a0>
 800f5a4:	9b02      	ldr	r3, [sp, #8]
 800f5a6:	f003 0007 	and.w	r0, r3, #7
 800f5aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f5ae:	ecbd 8b02 	vpop	{d8}
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f5b8:	2b03      	cmp	r3, #3
 800f5ba:	d1f3      	bne.n	800f5a4 <__kernel_rem_pio2+0x4e4>
 800f5bc:	9b05      	ldr	r3, [sp, #20]
 800f5be:	9500      	str	r5, [sp, #0]
 800f5c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f5c4:	eb0d 0403 	add.w	r4, sp, r3
 800f5c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f5cc:	46a2      	mov	sl, r4
 800f5ce:	9b00      	ldr	r3, [sp, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f1aa 0a08 	sub.w	sl, sl, #8
 800f5d6:	dc69      	bgt.n	800f6ac <__kernel_rem_pio2+0x5ec>
 800f5d8:	46aa      	mov	sl, r5
 800f5da:	f1ba 0f01 	cmp.w	sl, #1
 800f5de:	f1a4 0408 	sub.w	r4, r4, #8
 800f5e2:	f300 8083 	bgt.w	800f6ec <__kernel_rem_pio2+0x62c>
 800f5e6:	9c05      	ldr	r4, [sp, #20]
 800f5e8:	ab48      	add	r3, sp, #288	; 0x120
 800f5ea:	441c      	add	r4, r3
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	2d01      	cmp	r5, #1
 800f5f2:	f300 809a 	bgt.w	800f72a <__kernel_rem_pio2+0x66a>
 800f5f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f5fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f5fe:	f1bb 0f00 	cmp.w	fp, #0
 800f602:	f040 8098 	bne.w	800f736 <__kernel_rem_pio2+0x676>
 800f606:	9b04      	ldr	r3, [sp, #16]
 800f608:	e9c3 7800 	strd	r7, r8, [r3]
 800f60c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f610:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f614:	e7c6      	b.n	800f5a4 <__kernel_rem_pio2+0x4e4>
 800f616:	9e05      	ldr	r6, [sp, #20]
 800f618:	ab48      	add	r3, sp, #288	; 0x120
 800f61a:	441e      	add	r6, r3
 800f61c:	462c      	mov	r4, r5
 800f61e:	2000      	movs	r0, #0
 800f620:	2100      	movs	r1, #0
 800f622:	2c00      	cmp	r4, #0
 800f624:	da33      	bge.n	800f68e <__kernel_rem_pio2+0x5ce>
 800f626:	f1bb 0f00 	cmp.w	fp, #0
 800f62a:	d036      	beq.n	800f69a <__kernel_rem_pio2+0x5da>
 800f62c:	4602      	mov	r2, r0
 800f62e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f632:	9c04      	ldr	r4, [sp, #16]
 800f634:	e9c4 2300 	strd	r2, r3, [r4]
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f640:	f7f0 fe22 	bl	8000288 <__aeabi_dsub>
 800f644:	ae4a      	add	r6, sp, #296	; 0x128
 800f646:	2401      	movs	r4, #1
 800f648:	42a5      	cmp	r5, r4
 800f64a:	da29      	bge.n	800f6a0 <__kernel_rem_pio2+0x5e0>
 800f64c:	f1bb 0f00 	cmp.w	fp, #0
 800f650:	d002      	beq.n	800f658 <__kernel_rem_pio2+0x598>
 800f652:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f656:	4619      	mov	r1, r3
 800f658:	9b04      	ldr	r3, [sp, #16]
 800f65a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f65e:	e7a1      	b.n	800f5a4 <__kernel_rem_pio2+0x4e4>
 800f660:	9c05      	ldr	r4, [sp, #20]
 800f662:	ab48      	add	r3, sp, #288	; 0x120
 800f664:	441c      	add	r4, r3
 800f666:	2000      	movs	r0, #0
 800f668:	2100      	movs	r1, #0
 800f66a:	2d00      	cmp	r5, #0
 800f66c:	da09      	bge.n	800f682 <__kernel_rem_pio2+0x5c2>
 800f66e:	f1bb 0f00 	cmp.w	fp, #0
 800f672:	d002      	beq.n	800f67a <__kernel_rem_pio2+0x5ba>
 800f674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f678:	4619      	mov	r1, r3
 800f67a:	9b04      	ldr	r3, [sp, #16]
 800f67c:	e9c3 0100 	strd	r0, r1, [r3]
 800f680:	e790      	b.n	800f5a4 <__kernel_rem_pio2+0x4e4>
 800f682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f686:	f7f0 fe01 	bl	800028c <__adddf3>
 800f68a:	3d01      	subs	r5, #1
 800f68c:	e7ed      	b.n	800f66a <__kernel_rem_pio2+0x5aa>
 800f68e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f692:	f7f0 fdfb 	bl	800028c <__adddf3>
 800f696:	3c01      	subs	r4, #1
 800f698:	e7c3      	b.n	800f622 <__kernel_rem_pio2+0x562>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	e7c8      	b.n	800f632 <__kernel_rem_pio2+0x572>
 800f6a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f6a4:	f7f0 fdf2 	bl	800028c <__adddf3>
 800f6a8:	3401      	adds	r4, #1
 800f6aa:	e7cd      	b.n	800f648 <__kernel_rem_pio2+0x588>
 800f6ac:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f6b4:	9b00      	ldr	r3, [sp, #0]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	9300      	str	r3, [sp, #0]
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	463b      	mov	r3, r7
 800f6be:	4640      	mov	r0, r8
 800f6c0:	4649      	mov	r1, r9
 800f6c2:	f7f0 fde3 	bl	800028c <__adddf3>
 800f6c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4640      	mov	r0, r8
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	f7f0 fdd9 	bl	8000288 <__aeabi_dsub>
 800f6d6:	4632      	mov	r2, r6
 800f6d8:	463b      	mov	r3, r7
 800f6da:	f7f0 fdd7 	bl	800028c <__adddf3>
 800f6de:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f6e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f6e6:	ed8a 7b00 	vstr	d7, [sl]
 800f6ea:	e770      	b.n	800f5ce <__kernel_rem_pio2+0x50e>
 800f6ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f6f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	4632      	mov	r2, r6
 800f6f8:	463b      	mov	r3, r7
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	f7f0 fdc6 	bl	800028c <__adddf3>
 800f700:	e9cd 0100 	strd	r0, r1, [sp]
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4640      	mov	r0, r8
 800f70a:	4649      	mov	r1, r9
 800f70c:	f7f0 fdbc 	bl	8000288 <__aeabi_dsub>
 800f710:	4632      	mov	r2, r6
 800f712:	463b      	mov	r3, r7
 800f714:	f7f0 fdba 	bl	800028c <__adddf3>
 800f718:	ed9d 7b00 	vldr	d7, [sp]
 800f71c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f720:	ed84 7b00 	vstr	d7, [r4]
 800f724:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f728:	e757      	b.n	800f5da <__kernel_rem_pio2+0x51a>
 800f72a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f72e:	f7f0 fdad 	bl	800028c <__adddf3>
 800f732:	3d01      	subs	r5, #1
 800f734:	e75c      	b.n	800f5f0 <__kernel_rem_pio2+0x530>
 800f736:	9b04      	ldr	r3, [sp, #16]
 800f738:	9a04      	ldr	r2, [sp, #16]
 800f73a:	601f      	str	r7, [r3, #0]
 800f73c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f740:	605c      	str	r4, [r3, #4]
 800f742:	609d      	str	r5, [r3, #8]
 800f744:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f748:	60d3      	str	r3, [r2, #12]
 800f74a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f74e:	6110      	str	r0, [r2, #16]
 800f750:	6153      	str	r3, [r2, #20]
 800f752:	e727      	b.n	800f5a4 <__kernel_rem_pio2+0x4e4>
 800f754:	41700000 	.word	0x41700000
 800f758:	3e700000 	.word	0x3e700000
 800f75c:	00000000 	.word	0x00000000

0800f760 <scalbn>:
 800f760:	b570      	push	{r4, r5, r6, lr}
 800f762:	ec55 4b10 	vmov	r4, r5, d0
 800f766:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f76a:	4606      	mov	r6, r0
 800f76c:	462b      	mov	r3, r5
 800f76e:	b999      	cbnz	r1, 800f798 <scalbn+0x38>
 800f770:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f774:	4323      	orrs	r3, r4
 800f776:	d03f      	beq.n	800f7f8 <scalbn+0x98>
 800f778:	4b35      	ldr	r3, [pc, #212]	; (800f850 <scalbn+0xf0>)
 800f77a:	4629      	mov	r1, r5
 800f77c:	ee10 0a10 	vmov	r0, s0
 800f780:	2200      	movs	r2, #0
 800f782:	f7f0 ff39 	bl	80005f8 <__aeabi_dmul>
 800f786:	4b33      	ldr	r3, [pc, #204]	; (800f854 <scalbn+0xf4>)
 800f788:	429e      	cmp	r6, r3
 800f78a:	4604      	mov	r4, r0
 800f78c:	460d      	mov	r5, r1
 800f78e:	da10      	bge.n	800f7b2 <scalbn+0x52>
 800f790:	a327      	add	r3, pc, #156	; (adr r3, 800f830 <scalbn+0xd0>)
 800f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f796:	e01f      	b.n	800f7d8 <scalbn+0x78>
 800f798:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f79c:	4291      	cmp	r1, r2
 800f79e:	d10c      	bne.n	800f7ba <scalbn+0x5a>
 800f7a0:	ee10 2a10 	vmov	r2, s0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	f7f0 fd70 	bl	800028c <__adddf3>
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	460d      	mov	r5, r1
 800f7b0:	e022      	b.n	800f7f8 <scalbn+0x98>
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f7b8:	3936      	subs	r1, #54	; 0x36
 800f7ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f7be:	4296      	cmp	r6, r2
 800f7c0:	dd0d      	ble.n	800f7de <scalbn+0x7e>
 800f7c2:	2d00      	cmp	r5, #0
 800f7c4:	a11c      	add	r1, pc, #112	; (adr r1, 800f838 <scalbn+0xd8>)
 800f7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7ca:	da02      	bge.n	800f7d2 <scalbn+0x72>
 800f7cc:	a11c      	add	r1, pc, #112	; (adr r1, 800f840 <scalbn+0xe0>)
 800f7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7d2:	a319      	add	r3, pc, #100	; (adr r3, 800f838 <scalbn+0xd8>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	f7f0 ff0e 	bl	80005f8 <__aeabi_dmul>
 800f7dc:	e7e6      	b.n	800f7ac <scalbn+0x4c>
 800f7de:	1872      	adds	r2, r6, r1
 800f7e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f7e4:	428a      	cmp	r2, r1
 800f7e6:	dcec      	bgt.n	800f7c2 <scalbn+0x62>
 800f7e8:	2a00      	cmp	r2, #0
 800f7ea:	dd08      	ble.n	800f7fe <scalbn+0x9e>
 800f7ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f7f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f7f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f7f8:	ec45 4b10 	vmov	d0, r4, r5
 800f7fc:	bd70      	pop	{r4, r5, r6, pc}
 800f7fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f802:	da08      	bge.n	800f816 <scalbn+0xb6>
 800f804:	2d00      	cmp	r5, #0
 800f806:	a10a      	add	r1, pc, #40	; (adr r1, 800f830 <scalbn+0xd0>)
 800f808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f80c:	dac0      	bge.n	800f790 <scalbn+0x30>
 800f80e:	a10e      	add	r1, pc, #56	; (adr r1, 800f848 <scalbn+0xe8>)
 800f810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f814:	e7bc      	b.n	800f790 <scalbn+0x30>
 800f816:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f81a:	3236      	adds	r2, #54	; 0x36
 800f81c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f820:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f824:	4620      	mov	r0, r4
 800f826:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <scalbn+0xf8>)
 800f828:	2200      	movs	r2, #0
 800f82a:	e7d5      	b.n	800f7d8 <scalbn+0x78>
 800f82c:	f3af 8000 	nop.w
 800f830:	c2f8f359 	.word	0xc2f8f359
 800f834:	01a56e1f 	.word	0x01a56e1f
 800f838:	8800759c 	.word	0x8800759c
 800f83c:	7e37e43c 	.word	0x7e37e43c
 800f840:	8800759c 	.word	0x8800759c
 800f844:	fe37e43c 	.word	0xfe37e43c
 800f848:	c2f8f359 	.word	0xc2f8f359
 800f84c:	81a56e1f 	.word	0x81a56e1f
 800f850:	43500000 	.word	0x43500000
 800f854:	ffff3cb0 	.word	0xffff3cb0
 800f858:	3c900000 	.word	0x3c900000
 800f85c:	00000000 	.word	0x00000000

0800f860 <floor>:
 800f860:	ec51 0b10 	vmov	r0, r1, d0
 800f864:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f870:	2e13      	cmp	r6, #19
 800f872:	ee10 5a10 	vmov	r5, s0
 800f876:	ee10 8a10 	vmov	r8, s0
 800f87a:	460c      	mov	r4, r1
 800f87c:	dc31      	bgt.n	800f8e2 <floor+0x82>
 800f87e:	2e00      	cmp	r6, #0
 800f880:	da14      	bge.n	800f8ac <floor+0x4c>
 800f882:	a333      	add	r3, pc, #204	; (adr r3, 800f950 <floor+0xf0>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 fd00 	bl	800028c <__adddf3>
 800f88c:	2200      	movs	r2, #0
 800f88e:	2300      	movs	r3, #0
 800f890:	f7f1 f942 	bl	8000b18 <__aeabi_dcmpgt>
 800f894:	b138      	cbz	r0, 800f8a6 <floor+0x46>
 800f896:	2c00      	cmp	r4, #0
 800f898:	da53      	bge.n	800f942 <floor+0xe2>
 800f89a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f89e:	4325      	orrs	r5, r4
 800f8a0:	d052      	beq.n	800f948 <floor+0xe8>
 800f8a2:	4c2d      	ldr	r4, [pc, #180]	; (800f958 <floor+0xf8>)
 800f8a4:	2500      	movs	r5, #0
 800f8a6:	4621      	mov	r1, r4
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	e024      	b.n	800f8f6 <floor+0x96>
 800f8ac:	4f2b      	ldr	r7, [pc, #172]	; (800f95c <floor+0xfc>)
 800f8ae:	4137      	asrs	r7, r6
 800f8b0:	ea01 0307 	and.w	r3, r1, r7
 800f8b4:	4303      	orrs	r3, r0
 800f8b6:	d01e      	beq.n	800f8f6 <floor+0x96>
 800f8b8:	a325      	add	r3, pc, #148	; (adr r3, 800f950 <floor+0xf0>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f0 fce5 	bl	800028c <__adddf3>
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	f7f1 f927 	bl	8000b18 <__aeabi_dcmpgt>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d0eb      	beq.n	800f8a6 <floor+0x46>
 800f8ce:	2c00      	cmp	r4, #0
 800f8d0:	bfbe      	ittt	lt
 800f8d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f8d6:	4133      	asrlt	r3, r6
 800f8d8:	18e4      	addlt	r4, r4, r3
 800f8da:	ea24 0407 	bic.w	r4, r4, r7
 800f8de:	2500      	movs	r5, #0
 800f8e0:	e7e1      	b.n	800f8a6 <floor+0x46>
 800f8e2:	2e33      	cmp	r6, #51	; 0x33
 800f8e4:	dd0b      	ble.n	800f8fe <floor+0x9e>
 800f8e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f8ea:	d104      	bne.n	800f8f6 <floor+0x96>
 800f8ec:	ee10 2a10 	vmov	r2, s0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	f7f0 fccb 	bl	800028c <__adddf3>
 800f8f6:	ec41 0b10 	vmov	d0, r0, r1
 800f8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f902:	f04f 37ff 	mov.w	r7, #4294967295
 800f906:	40df      	lsrs	r7, r3
 800f908:	4238      	tst	r0, r7
 800f90a:	d0f4      	beq.n	800f8f6 <floor+0x96>
 800f90c:	a310      	add	r3, pc, #64	; (adr r3, 800f950 <floor+0xf0>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	f7f0 fcbb 	bl	800028c <__adddf3>
 800f916:	2200      	movs	r2, #0
 800f918:	2300      	movs	r3, #0
 800f91a:	f7f1 f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800f91e:	2800      	cmp	r0, #0
 800f920:	d0c1      	beq.n	800f8a6 <floor+0x46>
 800f922:	2c00      	cmp	r4, #0
 800f924:	da0a      	bge.n	800f93c <floor+0xdc>
 800f926:	2e14      	cmp	r6, #20
 800f928:	d101      	bne.n	800f92e <floor+0xce>
 800f92a:	3401      	adds	r4, #1
 800f92c:	e006      	b.n	800f93c <floor+0xdc>
 800f92e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f932:	2301      	movs	r3, #1
 800f934:	40b3      	lsls	r3, r6
 800f936:	441d      	add	r5, r3
 800f938:	45a8      	cmp	r8, r5
 800f93a:	d8f6      	bhi.n	800f92a <floor+0xca>
 800f93c:	ea25 0507 	bic.w	r5, r5, r7
 800f940:	e7b1      	b.n	800f8a6 <floor+0x46>
 800f942:	2500      	movs	r5, #0
 800f944:	462c      	mov	r4, r5
 800f946:	e7ae      	b.n	800f8a6 <floor+0x46>
 800f948:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f94c:	e7ab      	b.n	800f8a6 <floor+0x46>
 800f94e:	bf00      	nop
 800f950:	8800759c 	.word	0x8800759c
 800f954:	7e37e43c 	.word	0x7e37e43c
 800f958:	bff00000 	.word	0xbff00000
 800f95c:	000fffff 	.word	0x000fffff

0800f960 <_init>:
 800f960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f962:	bf00      	nop
 800f964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f966:	bc08      	pop	{r3}
 800f968:	469e      	mov	lr, r3
 800f96a:	4770      	bx	lr

0800f96c <_fini>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	bf00      	nop
 800f970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f972:	bc08      	pop	{r3}
 800f974:	469e      	mov	lr, r3
 800f976:	4770      	bx	lr
