
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800d458  0800d458  0001d458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db60  0800db60  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800db60  0800db60  0001db60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db68  0800db68  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db68  0800db68  0001db68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db6c  0800db6c  0001db6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800db70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003a68  200001d8  0800dd48  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c40  0800dd48  00023c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca45  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9f  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  00040930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001363  00000000  00000000  00042230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004bcd  00000000  00000000  00043593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c84c  00000000  00000000  00048160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101780  00000000  00000000  000649ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fb0  00000000  00000000  0016612c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0016e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d43c 	.word	0x0800d43c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d43c 	.word	0x0800d43c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	command = (struct user_command *)malloc(sizeof(struct user_command));
 8000ff4:	2018      	movs	r0, #24
 8000ff6:	f007 fd83 	bl	8008b00 <malloc>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <main+0xcc>)
 8001000:	601a      	str	r2, [r3, #0]
		if(command == NULL){
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <main+0xcc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <main+0x20>
			exit(99);
 800100a:	2063      	movs	r0, #99	; 0x63
 800100c:	f007 fd66 	bl	8008adc <exit>
		}
		command->channel = 0;
 8001010:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <main+0xcc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
		command->frequency = 0.0;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
		command->maxv = 0.0;
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <main+0xcc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
		command->minv = 0.0;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <main+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
		command->noise = 0;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <main+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
		command->wave = 'n';
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <main+0xcc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	226e      	movs	r2, #110	; 0x6e
 8001044:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f000 ff3c 	bl	8001ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f851 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9e5 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 f9bd 	bl	80013d0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001056:	f000 f89d 	bl	8001194 <MX_DAC1_Init>
  MX_RNG_Init();
 800105a:	f000 f8d9 	bl	8001210 <MX_RNG_Init>
  MX_TIM2_Init();
 800105e:	f000 f8eb 	bl	8001238 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001062:	f000 f985 	bl	8001370 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001066:	f000 f935 	bl	80012d4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <main+0xd0>)
 800106c:	f003 f8fc 	bl	8004268 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <main+0xd4>)
 8001072:	f003 f8f9 	bl	8004268 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001076:	f004 fa89 	bl	800558c <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 800107a:	4813      	ldr	r0, [pc, #76]	; (80010c8 <main+0xd8>)
 800107c:	f004 fb9f 	bl	80057be <osMutexNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <main+0xdc>)
 8001084:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (32, sizeof(uint64_t), &CommandQueue_attributes);
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <main+0xe0>)
 8001088:	2108      	movs	r1, #8
 800108a:	2020      	movs	r0, #32
 800108c:	f004 fca5 	bl	80059da <osMessageQueueNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <main+0xe4>)
 8001094:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DAC1 */
  DAC1Handle = osThreadNew(StartDAC, NULL, &DAC1_attributes);
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <main+0xe8>)
 8001098:	2100      	movs	r1, #0
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <main+0xec>)
 800109c:	f004 fac0 	bl	8005620 <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <main+0xf0>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* creation of Reciever */
  RecieverHandle = osThreadNew(StartReciever, NULL, &Reciever_attributes);
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <main+0xf4>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <main+0xf8>)
 80010ac:	f004 fab8 	bl	8005620 <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <main+0xfc>)
 80010b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010b6:	f004 fa8d 	bl	80055d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <main+0xca>
 80010bc:	200003d8 	.word	0x200003d8
 80010c0:	200002a8 	.word	0x200002a8
 80010c4:	200002f4 	.word	0x200002f4
 80010c8:	0800d684 	.word	0x0800d684
 80010cc:	200003d4 	.word	0x200003d4
 80010d0:	0800d66c 	.word	0x0800d66c
 80010d4:	200003d0 	.word	0x200003d0
 80010d8:	0800d624 	.word	0x0800d624
 80010dc:	08001451 	.word	0x08001451
 80010e0:	200003c8 	.word	0x200003c8
 80010e4:	0800d648 	.word	0x0800d648
 80010e8:	08001909 	.word	0x08001909
 80010ec:	200003cc 	.word	0x200003cc

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	; 0x58
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2244      	movs	r2, #68	; 0x44
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f009 fbf9 	bl	800a8f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001112:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001116:	f001 fce7 	bl	8002ae8 <HAL_PWREx_ControlVoltageScaling>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001120:	f000 fbfa 	bl	8001918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001124:	2310      	movs	r3, #16
 8001126:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001138:	2301      	movs	r3, #1
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001140:	2328      	movs	r3, #40	; 0x28
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001144:	2307      	movs	r3, #7
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4618      	mov	r0, r3
 8001156:	f001 fd1d 	bl	8002b94 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001160:	f000 fbda 	bl	8001918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2303      	movs	r3, #3
 800116a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2104      	movs	r1, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f8e5 	bl	800334c <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001188:	f000 fbc6 	bl	8001918 <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3758      	adds	r7, #88	; 0x58
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2224      	movs	r2, #36	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fba8 	bl	800a8f6 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_DAC1_Init+0x74>)
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_DAC1_Init+0x78>)
 80011aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_DAC1_Init+0x74>)
 80011ae:	f001 f832 	bl	8002216 <HAL_DAC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80011b8:	f000 fbae 	bl	8001918 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011c0:	2324      	movs	r3, #36	; 0x24
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2200      	movs	r2, #0
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_DAC1_Init+0x74>)
 80011d8:	f001 f83f 	bl	800225a <HAL_DAC_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80011e2:	f000 fb99 	bl	8001918 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 80011e6:	231c      	movs	r3, #28
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2210      	movs	r2, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_DAC1_Init+0x74>)
 80011f2:	f001 f832 	bl	800225a <HAL_DAC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 80011fc:	f000 fb8c 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001f4 	.word	0x200001f4
 800120c:	40007400 	.word	0x40007400

08001210 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_RNG_Init+0x20>)
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <MX_RNG_Init+0x24>)
 8001218:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_RNG_Init+0x20>)
 800121c:	f002 ff76 	bl	800410c <HAL_RNG_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001226:	f000 fb77 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000298 	.word	0x20000298
 8001234:	50060800 	.word	0x50060800

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001258:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM2_Init+0x98>)
 800126c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_TIM2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_TIM2_Init+0x98>)
 8001280:	f002 ff9b 	bl	80041ba <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800128a:	f000 fb45 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	f107 0310 	add.w	r3, r7, #16
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0x98>)
 800129c:	f003 f84c 	bl	8004338 <HAL_TIM_ConfigClockSource>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012a6:	f000 fb37 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012aa:	2320      	movs	r3, #32
 80012ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM2_Init+0x98>)
 80012b8:	f003 fa3c 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012c2:	f000 fb29 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200002a8 	.word	0x200002a8

080012d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM5_Init+0x94>)
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MX_TIM5_Init+0x98>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM5_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM5_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_TIM5_Init+0x94>)
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_TIM5_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_TIM5_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_TIM5_Init+0x94>)
 800131a:	f002 ff4e 	bl	80041ba <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001324:	f000 faf8 	bl	8001918 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM5_Init+0x94>)
 8001336:	f002 ffff 	bl	8004338 <HAL_TIM_ConfigClockSource>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001340:	f000 faea 	bl	8001918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001344:	2320      	movs	r3, #32
 8001346:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_TIM5_Init+0x94>)
 8001352:	f003 f9ef 	bl	8004734 <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 fadc 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002f4 	.word	0x200002f4
 800136c:	40000c00 	.word	0x40000c00

08001370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_USART2_UART_Init+0x5c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x58>)
 80013b4:	f003 fa46 	bl	8004844 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 faab 	bl	8001918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000340 	.word	0x20000340
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_DMA_Init+0x48>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <MX_DMA_Init+0x48>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6493      	str	r3, [r2, #72]	; 0x48
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_DMA_Init+0x48>)
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	200d      	movs	r0, #13
 80013f4:	f000 fed9 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 fef2 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	200e      	movs	r0, #14
 8001404:	f000 fed1 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001408:	200e      	movs	r0, #14
 800140a:	f000 feea 	bl	80021e2 <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_GPIO_Init+0x2c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	00000000 	.word	0x00000000

08001450 <StartDAC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDAC */
void StartDAC(void *argument)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b0e7      	sub	sp, #412	; 0x19c
 8001454:	af02      	add	r7, sp, #8
 8001456:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800145a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800145e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001472:	4bc9      	ldr	r3, [pc, #804]	; (8001798 <StartDAC+0x348>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 31ff 	mov.w	r1, #4294967295
 800147a:	4618      	mov	r0, r3
 800147c:	f004 fa25 	bl	80058ca <osMutexAcquire>
	  	uint8_t c = 0;
 8001480:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001484:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 800148c:	f107 010b 	add.w	r1, r7, #11
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	2201      	movs	r2, #1
 8001494:	48c1      	ldr	r0, [pc, #772]	; (800179c <StartDAC+0x34c>)
 8001496:	f003 faad 	bl	80049f4 <HAL_UART_Receive>
	  	HAL_UART_Transmit(&huart2, &c, 1, 100);
 800149a:	f107 010b 	add.w	r1, r7, #11
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	2201      	movs	r2, #1
 80014a2:	48be      	ldr	r0, [pc, #760]	; (800179c <StartDAC+0x34c>)
 80014a4:	f003 fa1c 	bl	80048e0 <HAL_UART_Transmit>

	  	if ((char)c == '\r'){
 80014a8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80014ac:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b0d      	cmp	r3, #13
 80014b4:	f040 81f9 	bne.w	80018aa <StartDAC+0x45a>
//	  		if enter is pressed, process command to see if valid
	  		command_buffer[i] = '\r';
 80014b8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014c0:	4413      	add	r3, r2
 80014c2:	220d      	movs	r2, #13
 80014c4:	701a      	strb	r2, [r3, #0]
	  		command_buffer[i+1] = '\n';
 80014c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014ca:	3301      	adds	r3, #1
 80014cc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014d0:	443b      	add	r3, r7
 80014d2:	220a      	movs	r2, #10
 80014d4:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		command_buffer[i+2] = '\0';
 80014d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014dc:	3302      	adds	r3, #2
 80014de:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80014e2:	443b      	add	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		print_size = sprintf(print_buffer, command_buffer);
 80014ea:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f009 f99b 	bl	800a830 <siprintf>
 80014fa:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
 80014fe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	48a4      	ldr	r0, [pc, #656]	; (800179c <StartDAC+0x34c>)
 800150c:	f003 f9e8 	bl	80048e0 <HAL_UART_Transmit>
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 8001510:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001514:	49a2      	ldr	r1, [pc, #648]	; (80017a0 <StartDAC+0x350>)
 8001516:	4618      	mov	r0, r3
 8001518:	f009 fa08 	bl	800a92c <strtok>
 800151c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 8001526:	2301      	movs	r3, #1
 8001528:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 800152c:	499c      	ldr	r1, [pc, #624]	; (80017a0 <StartDAC+0x350>)
 800152e:	2000      	movs	r0, #0
 8001530:	f009 f9fc 	bl	800a92c <strtok>
 8001534:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 8001538:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800153c:	f007 fac9 	bl	8008ad2 <atoi>
 8001540:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 8001544:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001548:	2b02      	cmp	r3, #2
 800154a:	dc03      	bgt.n	8001554 <StartDAC+0x104>
 800154c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001550:	2b00      	cmp	r3, #0
 8001552:	dc13      	bgt.n	800157c <StartDAC+0x12c>
	  			valid_entry = 0;														// if not make command invalid
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4991      	ldr	r1, [pc, #580]	; (80017a4 <StartDAC+0x354>)
 8001560:	4618      	mov	r0, r3
 8001562:	f009 f965 	bl	800a830 <siprintf>
 8001566:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800156a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800156e:	b29a      	uxth	r2, r3
 8001570:	f107 010c 	add.w	r1, r7, #12
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	4889      	ldr	r0, [pc, #548]	; (800179c <StartDAC+0x34c>)
 8001578:	f003 f9b2 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 800157c:	4b8a      	ldr	r3, [pc, #552]	; (80017a8 <StartDAC+0x358>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001584:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 8001586:	4986      	ldr	r1, [pc, #536]	; (80017a0 <StartDAC+0x350>)
 8001588:	2000      	movs	r0, #0
 800158a:	f009 f9cf 	bl	800a92c <strtok>
 800158e:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 8001592:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b41      	cmp	r3, #65	; 0x41
 800159a:	d022      	beq.n	80015e2 <StartDAC+0x192>
 800159c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b52      	cmp	r3, #82	; 0x52
 80015a4:	d01d      	beq.n	80015e2 <StartDAC+0x192>
 80015a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b53      	cmp	r3, #83	; 0x53
 80015ae:	d018      	beq.n	80015e2 <StartDAC+0x192>
 80015b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b54      	cmp	r3, #84	; 0x54
 80015b8:	d013      	beq.n	80015e2 <StartDAC+0x192>
	  			valid_entry = 0;														// if not make command invalid
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4979      	ldr	r1, [pc, #484]	; (80017ac <StartDAC+0x35c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f009 f932 	bl	800a830 <siprintf>
 80015cc:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80015d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f107 010c 	add.w	r1, r7, #12
 80015da:	2364      	movs	r3, #100	; 0x64
 80015dc:	486f      	ldr	r0, [pc, #444]	; (800179c <StartDAC+0x34c>)
 80015de:	f003 f97f 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <StartDAC+0x358>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 80015ee:	496c      	ldr	r1, [pc, #432]	; (80017a0 <StartDAC+0x350>)
 80015f0:	2000      	movs	r0, #0
 80015f2:	f009 f99b 	bl	800a92c <strtok>
 80015f6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		double fvalue = atof(word);
 80015fa:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80015fe:	f007 fa65 	bl	8008acc <atof>
 8001602:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if ((fvalue > 10000 || fvalue < 0.5) && fvalue != 0){							// check if frequncy value is valid
 8001606:	a360      	add	r3, pc, #384	; (adr r3, 8001788 <StartDAC+0x338>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001610:	f7ff fa82 	bl	8000b18 <__aeabi_dcmpgt>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <StartDAC+0x1de>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <StartDAC+0x360>)
 8001620:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001624:	f7ff fa5a 	bl	8000adc <__aeabi_dcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01e      	beq.n	800166c <StartDAC+0x21c>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800163a:	f7ff fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d113      	bne.n	800166c <StartDAC+0x21c>
	  			valid_entry = 0;														// if not make command invalid
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 800164a:	f107 030c 	add.w	r3, r7, #12
 800164e:	4959      	ldr	r1, [pc, #356]	; (80017b4 <StartDAC+0x364>)
 8001650:	4618      	mov	r0, r3
 8001652:	f009 f8ed 	bl	800a830 <siprintf>
 8001656:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800165a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	484d      	ldr	r0, [pc, #308]	; (800179c <StartDAC+0x34c>)
 8001668:	f003 f93a 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 800166c:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <StartDAC+0x358>)
 800166e:	681c      	ldr	r4, [r3, #0]
 8001670:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001674:	f7ff fab8 	bl	8000be8 <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	6063      	str	r3, [r4, #4]

	  		word = strtok(NULL, " ");
 800167c:	4948      	ldr	r1, [pc, #288]	; (80017a0 <StartDAC+0x350>)
 800167e:	2000      	movs	r0, #0
 8001680:	f009 f954 	bl	800a92c <strtok>
 8001684:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8001688:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800168c:	f007 fa1e 	bl	8008acc <atof>
 8001690:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 8001694:	a33e      	add	r3, pc, #248	; (adr r3, 8001790 <StartDAC+0x340>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800169e:	f7ff fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10a      	bne.n	80016be <StartDAC+0x26e>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016b4:	f7ff fa12 	bl	8000adc <__aeabi_dcmplt>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d013      	beq.n	80016e6 <StartDAC+0x296>
	  			valid_entry = 0;														// if not make command invalid
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	493b      	ldr	r1, [pc, #236]	; (80017b8 <StartDAC+0x368>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f009 f8b0 	bl	800a830 <siprintf>
 80016d0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80016d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 010c 	add.w	r1, r7, #12
 80016de:	2364      	movs	r3, #100	; 0x64
 80016e0:	482e      	ldr	r0, [pc, #184]	; (800179c <StartDAC+0x34c>)
 80016e2:	f003 f8fd 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <StartDAC+0x358>)
 80016e8:	681c      	ldr	r4, [r3, #0]
 80016ea:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80016ee:	f7ff fa7b 	bl	8000be8 <__aeabi_d2f>
 80016f2:	4603      	mov	r3, r0
 80016f4:	60a3      	str	r3, [r4, #8]
	  		print_size = sprintf(print_buffer, "Min Voltage %f, %f\r\n", command->minv, fvalue);
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <StartDAC+0x358>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff23 	bl	8000548 <__aeabi_f2d>
 8001702:	f107 040c 	add.w	r4, r7, #12
 8001706:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800170a:	e9cd 2300 	strd	r2, r3, [sp]
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	492a      	ldr	r1, [pc, #168]	; (80017bc <StartDAC+0x36c>)
 8001714:	4620      	mov	r0, r4
 8001716:	f009 f88b 	bl	800a830 <siprintf>
 800171a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800171e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001722:	b29a      	uxth	r2, r3
 8001724:	f107 010c 	add.w	r1, r7, #12
 8001728:	2364      	movs	r3, #100	; 0x64
 800172a:	481c      	ldr	r0, [pc, #112]	; (800179c <StartDAC+0x34c>)
 800172c:	f003 f8d8 	bl	80048e0 <HAL_UART_Transmit>

	  		word = strtok(NULL, " ");
 8001730:	491b      	ldr	r1, [pc, #108]	; (80017a0 <StartDAC+0x350>)
 8001732:	2000      	movs	r0, #0
 8001734:	f009 f8fa 	bl	800a92c <strtok>
 8001738:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 800173c:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001740:	f007 f9c4 	bl	8008acc <atof>
 8001744:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 8001748:	a311      	add	r3, pc, #68	; (adr r3, 8001790 <StartDAC+0x340>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001752:	f7ff f9e1 	bl	8000b18 <__aeabi_dcmpgt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10a      	bne.n	8001772 <StartDAC+0x322>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8001768:	f7ff f9b8 	bl	8000adc <__aeabi_dcmplt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d034      	beq.n	80017dc <StartDAC+0x38c>
	  			valid_entry = 0;														// if not make command invalid
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4910      	ldr	r1, [pc, #64]	; (80017c0 <StartDAC+0x370>)
 800177e:	4618      	mov	r0, r3
 8001780:	f009 f856 	bl	800a830 <siprintf>
 8001784:	e01e      	b.n	80017c4 <StartDAC+0x374>
 8001786:	bf00      	nop
 8001788:	00000000 	.word	0x00000000
 800178c:	40c38800 	.word	0x40c38800
 8001790:	66666666 	.word	0x66666666
 8001794:	400a6666 	.word	0x400a6666
 8001798:	200003d4 	.word	0x200003d4
 800179c:	20000340 	.word	0x20000340
 80017a0:	0800d484 	.word	0x0800d484
 80017a4:	0800d488 	.word	0x0800d488
 80017a8:	200003d8 	.word	0x200003d8
 80017ac:	0800d4a8 	.word	0x0800d4a8
 80017b0:	3fe00000 	.word	0x3fe00000
 80017b4:	0800d4f8 	.word	0x0800d4f8
 80017b8:	0800d534 	.word	0x0800d534
 80017bc:	0800d560 	.word	0x0800d560
 80017c0:	0800d578 	.word	0x0800d578
 80017c4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80017c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f107 010c 	add.w	r1, r7, #12
 80017d2:	2364      	movs	r3, #100	; 0x64
 80017d4:	4845      	ldr	r0, [pc, #276]	; (80018ec <StartDAC+0x49c>)
 80017d6:	f003 f883 	bl	80048e0 <HAL_UART_Transmit>
 80017da:	e022      	b.n	8001822 <StartDAC+0x3d2>
	  		} else if (ivalue <= command->minv){										// check if max voltage value is less than min voltage
 80017dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e8:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <StartDAC+0x4a0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d813      	bhi.n	8001822 <StartDAC+0x3d2>
	  			valid_entry = 0;														// if not make command invalid
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	493b      	ldr	r1, [pc, #236]	; (80018f4 <StartDAC+0x4a4>)
 8001806:	4618      	mov	r0, r3
 8001808:	f009 f812 	bl	800a830 <siprintf>
 800180c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001810:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001814:	b29a      	uxth	r2, r3
 8001816:	f107 010c 	add.w	r1, r7, #12
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	4833      	ldr	r0, [pc, #204]	; (80018ec <StartDAC+0x49c>)
 800181e:	f003 f85f 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <StartDAC+0x4a0>)
 8001824:	681c      	ldr	r4, [r3, #0]
 8001826:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800182a:	f7ff f9dd 	bl	8000be8 <__aeabi_d2f>
 800182e:	4603      	mov	r3, r0
 8001830:	60e3      	str	r3, [r4, #12]

	  		word = strtok(NULL, " ");
 8001832:	4931      	ldr	r1, [pc, #196]	; (80018f8 <StartDAC+0x4a8>)
 8001834:	2000      	movs	r0, #0
 8001836:	f009 f879 	bl	800a92c <strtok>
 800183a:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 800183e:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8001842:	f007 f946 	bl	8008ad2 <atoi>
 8001846:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 800184a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800184e:	2b0c      	cmp	r3, #12
 8001850:	dc03      	bgt.n	800185a <StartDAC+0x40a>
 8001852:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001856:	2b00      	cmp	r3, #0
 8001858:	da13      	bge.n	8001882 <StartDAC+0x432>
	  			valid_entry = 0;														// if not make command invalid
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4925      	ldr	r1, [pc, #148]	; (80018fc <StartDAC+0x4ac>)
 8001866:	4618      	mov	r0, r3
 8001868:	f008 ffe2 	bl	800a830 <siprintf>
 800186c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001870:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001874:	b29a      	uxth	r2, r3
 8001876:	f107 010c 	add.w	r1, r7, #12
 800187a:	2364      	movs	r3, #100	; 0x64
 800187c:	481b      	ldr	r0, [pc, #108]	; (80018ec <StartDAC+0x49c>)
 800187e:	f003 f82f 	bl	80048e0 <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <StartDAC+0x4a0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800188a:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 800188c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001890:	2b00      	cmp	r3, #0
 8001892:	d022      	beq.n	80018da <StartDAC+0x48a>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <StartDAC+0x4b0>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	2200      	movs	r2, #0
 800189c:	4914      	ldr	r1, [pc, #80]	; (80018f0 <StartDAC+0x4a0>)
 800189e:	f004 f90f 	bl	8005ac0 <osMessageQueuePut>
				valid_entry = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80018a8:	e017      	b.n	80018da <StartDAC+0x48a>
  			}

	  	} else if (c != 0){						// if character is valid and not enter key
 80018aa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018ae:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <StartDAC+0x48a>
	  		command_buffer[i] = c;				// add to buffer to save
 80018b8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018bc:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80018c0:	7819      	ldrb	r1, [r3, #0]
 80018c2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80018c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018ca:	4413      	add	r3, r2
 80018cc:	460a      	mov	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
	  		i++;
 80018d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80018d4:	3301      	adds	r3, #1
 80018d6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  	}
	  	osMutexRelease(MUTEXHandle);
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <StartDAC+0x4b4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 f83e 	bl	8005960 <osMutexRelease>
	  	osThreadYield();
 80018e4:	f003 ff30 	bl	8005748 <osThreadYield>
  {
 80018e8:	e5c3      	b.n	8001472 <StartDAC+0x22>
 80018ea:	bf00      	nop
 80018ec:	20000340 	.word	0x20000340
 80018f0:	200003d8 	.word	0x200003d8
 80018f4:	0800d5a4 	.word	0x0800d5a4
 80018f8:	0800d484 	.word	0x0800d484
 80018fc:	0800d5d8 	.word	0x0800d5d8
 8001900:	200003d0 	.word	0x200003d0
 8001904:	200003d4 	.word	0x200003d4

08001908 <StartReciever>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReciever */
void StartReciever(void *argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReciever */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f003 ff39 	bl	8005788 <osDelay>
 8001916:	e7fb      	b.n	8001910 <StartReciever+0x8>

08001918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191c:	b672      	cpsid	i
}
 800191e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001920:	e7fe      	b.n	8001920 <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_MspInit+0x4c>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_MspInit+0x4c>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6613      	str	r3, [r2, #96]	; 0x60
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_MspInit+0x4c>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_MspInit+0x4c>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_MspInit+0x4c>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	210f      	movs	r1, #15
 800195e:	f06f 0001 	mvn.w	r0, #1
 8001962:	f000 fc22 	bl	80021aa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_DAC_MspInit+0x120>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d17a      	bne.n	8001a8c <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 800199c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_DAC_MspInit+0x124>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80019c6:	2330      	movs	r3, #48	; 0x30
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f000 fecc 	bl	8002778 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 80019e2:	4a2f      	ldr	r2, [pc, #188]	; (8001aa0 <HAL_DAC_MspInit+0x12c>)
 80019e4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 80019e8:	2206      	movs	r2, #6
 80019ea:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 80019ee:	2210      	movs	r2, #16
 80019f0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019f8:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 80019fa:	2280      	movs	r2, #128	; 0x80
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a10:	2220      	movs	r2, #32
 8001a12:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a1c:	f000 fd44 	bl	80024a8 <HAL_DMA_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001a26:	f7ff ff77 	bl	8001918 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_DAC_MspInit+0x128>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_DAC_MspInit+0x134>)
 8001a3a:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a3e:	2205      	movs	r2, #5
 8001a40:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a44:	2210      	movs	r2, #16
 8001a46:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a66:	2220      	movs	r2, #32
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a72:	f000 fd19 	bl	80024a8 <HAL_DMA_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8001a7c:	f7ff ff4c 	bl	8001918 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a08      	ldr	r2, [pc, #32]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_DAC_MspInit+0x130>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40007400 	.word	0x40007400
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	20000208 	.word	0x20000208
 8001aa0:	40020030 	.word	0x40020030
 8001aa4:	20000250 	.word	0x20000250
 8001aa8:	40020044 	.word	0x40020044

08001aac <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0a6      	sub	sp, #152	; 0x98
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2288      	movs	r2, #136	; 0x88
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f008 ff1a 	bl	800a8f6 <memset>
  if(hrng->Instance==RNG)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_RNG_MspInit+0x80>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d12b      	bne.n	8001b24 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001acc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001ae2:	2310      	movs	r3, #16
 8001ae4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001aea:	2302      	movs	r3, #2
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001af2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 fe49 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001b08:	f7ff ff06 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_RNG_MspInit+0x84>)
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_RNG_MspInit+0x84>)
 8001b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RNG_MspInit+0x84>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3798      	adds	r7, #152	; 0x98
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	50060800 	.word	0x50060800
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b44:	d10c      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b46:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b5e:	e010      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_TIM_Base_MspInit+0x60>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b70:	f043 0308 	orr.w	r3, r3, #8
 8001b74:	6593      	str	r3, [r2, #88]	; 0x58
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_TIM_Base_MspInit+0x5c>)
 8001b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40000c00 	.word	0x40000c00

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0ac      	sub	sp, #176	; 0xb0
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2288      	movs	r2, #136	; 0x88
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fe9c 	bl	800a8f6 <memset>
  if(huart->Instance==USART2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_UART_MspInit+0xb0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d13b      	bne.n	8001c40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fddd 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001be0:	f7ff fe9a 	bl	8001918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bee:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c00:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_UART_MspInit+0xb4>)
 8001c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c14:	230c      	movs	r3, #12
 8001c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3c:	f000 fd9c 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	37b0      	adds	r7, #176	; 0xb0
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40004400 	.word	0x40004400
 8001c4c:	40021000 	.word	0x40021000

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 f974 	bl	8001f6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c84:	f005 fdbc 	bl	8007800 <xTaskGetSchedulerState>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c8e:	f006 fca3 	bl	80085d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA1_Channel3_IRQHandler+0x10>)
 8001c9e:	f000 fcbb 	bl	8002618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000208 	.word	0x20000208

08001cac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA1_Channel4_IRQHandler+0x10>)
 8001cb2:	f000 fcb1 	bl	8002618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000250 	.word	0x20000250

08001cc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_kill>:

int _kill(int pid, int sig)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cda:	f008 ff33 	bl	800ab44 <__errno>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2216      	movs	r2, #22
 8001ce2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_exit>:

void _exit (int status)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ffe7 	bl	8001cd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d02:	e7fe      	b.n	8001d02 <_exit+0x12>

08001d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00a      	b.n	8001d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf0      	blt.n	8001d16 <_read+0x12>
  }

  return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e009      	b.n	8001d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf1      	blt.n	8001d50 <_write+0x12>
  }
  return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_close>:

int _close(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_isatty>:

int _isatty(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f008 fe98 	bl	800ab44 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20018000 	.word	0x20018000
 8001e40:	00000400 	.word	0x00000400
 8001e44:	200003dc 	.word	0x200003dc
 8001e48:	20003c40 	.word	0x20003c40

08001e4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <SystemInit+0x20>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <SystemInit+0x20>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e74:	f7ff ffea 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e78:	480c      	ldr	r0, [pc, #48]	; (8001eac <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7a:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <LoopForever+0xe>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e90:	4c0a      	ldr	r4, [pc, #40]	; (8001ebc <LoopForever+0x16>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f008 fe57 	bl	800ab50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ea2:	f7ff f8a5 	bl	8000ff0 <main>

08001ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001eb4:	0800db70 	.word	0x0800db70
  ldr r2, =_sbss
 8001eb8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ebc:	20003c40 	.word	0x20003c40

08001ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_2_IRQHandler>

08001ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f961 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f80e 	bl	8001ef4 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	e001      	b.n	8001ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee4:	f7ff fd1e 	bl	8001924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_InitTick+0x6c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_InitTick+0x70>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_InitTick+0x6c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f96d 	bl	80021fe <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d809      	bhi.n	8001f44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 f937 	bl	80021aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_InitTick+0x74>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e007      	b.n	8001f54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e004      	b.n	8001f54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e001      	b.n	8001f54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	200003e0 	.word	0x200003e0

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200003e0 	.word	0x200003e0

08001fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	; (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	; (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff29 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff3e 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff8e 	bl	80020e8 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff31 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e014      	b.n	8002252 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fb9b 	bl	8001974 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	795b      	ldrb	r3, [r3, #5]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_DAC_ConfigChannel+0x1c>
 8002272:	2302      	movs	r3, #2
 8002274:	e114      	b.n	80024a0 <HAL_DAC_ConfigChannel+0x246>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2202      	movs	r2, #2
 8002280:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	f040 8081 	bne.w	800238e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800228c:	f7ff fe82 	bl	8001f94 <HAL_GetTick>
 8002290:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d140      	bne.n	800231a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002298:	e018      	b.n	80022cc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800229a:	f7ff fe7b 	bl	8001f94 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d911      	bls.n	80022cc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f043 0208 	orr.w	r2, r3, #8
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2203      	movs	r2, #3
 80022c6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e0e9      	b.n	80024a0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1df      	bne.n	800229a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f7ff fe66 	bl	8001fac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	6992      	ldr	r2, [r2, #24]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	e023      	b.n	8002334 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ec:	f7ff fe52 	bl	8001f94 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d90f      	bls.n	800231a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	2b00      	cmp	r3, #0
 8002302:	da0a      	bge.n	800231a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	f043 0208 	orr.w	r2, r3, #8
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2203      	movs	r2, #3
 8002314:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0c2      	b.n	80024a0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002320:	2b00      	cmp	r3, #0
 8002322:	dbe3      	blt.n	80022ec <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002324:	2001      	movs	r0, #1
 8002326:	f7ff fe41 	bl	8001fac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	6992      	ldr	r2, [r2, #24]
 8002332:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	ea02 0103 	and.w	r1, r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	21ff      	movs	r1, #255	; 0xff
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	ea02 0103 	and.w	r1, r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	409a      	lsls	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d11d      	bne.n	80023d2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	221f      	movs	r2, #31
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2207      	movs	r2, #7
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	f640 72fc 	movw	r2, #4092	; 0xffc
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	22c0      	movs	r2, #192	; 0xc0
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43da      	mvns	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	400a      	ands	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e098      	b.n	80025ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_DMA_Init+0x150>)
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d80f      	bhi.n	80024e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_DMA_Init+0x154>)
 80024ce:	4413      	add	r3, r2
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_DMA_Init+0x158>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	009a      	lsls	r2, r3, #2
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_DMA_Init+0x15c>)
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
 80024e4:	e00e      	b.n	8002504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b46      	ldr	r3, [pc, #280]	; (8002608 <HAL_DMA_Init+0x160>)
 80024ee:	4413      	add	r3, r2
 80024f0:	4a43      	ldr	r2, [pc, #268]	; (8002600 <HAL_DMA_Init+0x158>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_DMA_Init+0x164>)
 8002502:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800255e:	d039      	beq.n	80025d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_DMA_Init+0x15c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11a      	bne.n	80025a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_DMA_Init+0x168>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f003 031c 	and.w	r3, r3, #28
 8002576:	210f      	movs	r1, #15
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	4924      	ldr	r1, [pc, #144]	; (8002610 <HAL_DMA_Init+0x168>)
 8002580:	4013      	ands	r3, r2
 8002582:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_DMA_Init+0x168>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f003 031c 	and.w	r3, r3, #28
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	491d      	ldr	r1, [pc, #116]	; (8002610 <HAL_DMA_Init+0x168>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
 800259e:	e019      	b.n	80025d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f003 031c 	and.w	r3, r3, #28
 80025ac:	210f      	movs	r1, #15
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	4917      	ldr	r1, [pc, #92]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f003 031c 	and.w	r3, r3, #28
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	4911      	ldr	r1, [pc, #68]	; (8002614 <HAL_DMA_Init+0x16c>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40020407 	.word	0x40020407
 80025fc:	bffdfff8 	.word	0xbffdfff8
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	40020000 	.word	0x40020000
 8002608:	bffdfbf8 	.word	0xbffdfbf8
 800260c:	40020400 	.word	0x40020400
 8002610:	400200a8 	.word	0x400200a8
 8002614:	400204a8 	.word	0x400204a8

08002618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002634:	f003 031c 	and.w	r3, r3, #28
 8002638:	2204      	movs	r2, #4
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d026      	beq.n	8002692 <HAL_DMA_IRQHandler+0x7a>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d021      	beq.n	8002692 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d107      	bne.n	800266c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f003 021c 	and.w	r2, r3, #28
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2104      	movs	r1, #4
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	2b00      	cmp	r3, #0
 8002686:	d071      	beq.n	800276c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002690:	e06c      	b.n	800276c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f003 031c 	and.w	r3, r3, #28
 800269a:	2202      	movs	r2, #2
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02e      	beq.n	8002704 <HAL_DMA_IRQHandler+0xec>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d029      	beq.n	8002704 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10b      	bne.n	80026d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 020a 	bic.w	r2, r2, #10
 80026cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f003 021c 	and.w	r2, r3, #28
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2102      	movs	r1, #2
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d038      	beq.n	800276c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002702:	e033      	b.n	800276c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f003 031c 	and.w	r3, r3, #28
 800270c:	2208      	movs	r2, #8
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d02a      	beq.n	800276e <HAL_DMA_IRQHandler+0x156>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d025      	beq.n	800276e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 020e 	bic.w	r2, r2, #14
 8002730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f003 021c 	and.w	r2, r3, #28
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800276c:	bf00      	nop
 800276e:	bf00      	nop
}
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002786:	e17f      	b.n	8002a88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	4013      	ands	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8171 	beq.w	8002a82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d005      	beq.n	80027b8 <HAL_GPIO_Init+0x40>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d130      	bne.n	800281a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ee:	2201      	movs	r2, #1
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0201 	and.w	r2, r3, #1
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b03      	cmp	r3, #3
 8002824:	d118      	bne.n	8002858 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800282c:	2201      	movs	r2, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	08db      	lsrs	r3, r3, #3
 8002842:	f003 0201 	and.w	r2, r3, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b03      	cmp	r3, #3
 8002862:	d017      	beq.n	8002894 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d123      	bne.n	80028e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	6939      	ldr	r1, [r7, #16]
 80028e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4013      	ands	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80ac 	beq.w	8002a82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <HAL_GPIO_Init+0x330>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	4a5e      	ldr	r2, [pc, #376]	; (8002aa8 <HAL_GPIO_Init+0x330>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6613      	str	r3, [r2, #96]	; 0x60
 8002936:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_GPIO_Init+0x330>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002942:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_GPIO_Init+0x334>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x242>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x338>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x23e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_GPIO_Init+0x33c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x23a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_GPIO_Init+0x340>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x236>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x344>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x232>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x348>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x22e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x34c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x22a>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029a2:	2307      	movs	r3, #7
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x244>
 80029ba:	2300      	movs	r3, #0
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029cc:	4937      	ldr	r1, [pc, #220]	; (8002aac <HAL_GPIO_Init+0x334>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029da:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fe:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a04:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a28:	4a27      	ldr	r2, [pc, #156]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_GPIO_Init+0x350>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f47f ae78 	bne.w	8002788 <HAL_GPIO_Init+0x10>
  }
}
 8002a98:	bf00      	nop
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	48000c00 	.word	0x48000c00
 8002abc:	48001000 	.word	0x48001000
 8002ac0:	48001400 	.word	0x48001400
 8002ac4:	48001800 	.word	0x48001800
 8002ac8:	40010400 	.word	0x40010400

08002acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af6:	d130      	bne.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d038      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b0e:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2232      	movs	r2, #50	; 0x32
 8002b1c:	fb02 f303 	mul.w	r3, r2, r3
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0c9b      	lsrs	r3, r3, #18
 8002b28:	3301      	adds	r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b2c:	e002      	b.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	d102      	bne.n	8002b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f2      	bne.n	8002b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d110      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e00f      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d007      	beq.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b70:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	431bde83 	.word	0x431bde83

08002b94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e3ca      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba6:	4b97      	ldr	r3, [pc, #604]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb0:	4b94      	ldr	r3, [pc, #592]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80e4 	beq.w	8002d90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_RCC_OscConfig+0x4a>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	f040 808b 	bne.w	8002cec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 8087 	bne.w	8002cec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bde:	4b89      	ldr	r3, [pc, #548]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e3a2      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	4b82      	ldr	r3, [pc, #520]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_RCC_OscConfig+0x7c>
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_OscConfig+0x88>
 8002c10:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d223      	bcs.n	8002c68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fd55 	bl	80036d4 <RCC_SetFlashLatencyFromMSIRange>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e383      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c34:	4b73      	ldr	r3, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a72      	ldr	r2, [pc, #456]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c3a:	f043 0308 	orr.w	r3, r3, #8
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	4b70      	ldr	r3, [pc, #448]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	496d      	ldr	r1, [pc, #436]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	4968      	ldr	r1, [pc, #416]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
 8002c66:	e025      	b.n	8002cb4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c6e:	f043 0308 	orr.w	r3, r3, #8
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4960      	ldr	r1, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c86:	4b5f      	ldr	r3, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	495b      	ldr	r1, [pc, #364]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fd15 	bl	80036d4 <RCC_SetFlashLatencyFromMSIRange>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e343      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cb4:	f000 fc4a 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b52      	ldr	r3, [pc, #328]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	4950      	ldr	r1, [pc, #320]	; (8002e08 <HAL_RCC_OscConfig+0x274>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_RCC_OscConfig+0x278>)
 8002cd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCC_OscConfig+0x27c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff f90b 	bl	8001ef4 <HAL_InitTick>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d052      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	e327      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d032      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cf4:	4b43      	ldr	r3, [pc, #268]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a42      	ldr	r2, [pc, #264]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d00:	f7ff f948 	bl	8001f94 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d08:	f7ff f944 	bl	8001f94 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e310      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	4b3a      	ldr	r3, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d26:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a36      	ldr	r2, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4931      	ldr	r1, [pc, #196]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	492c      	ldr	r1, [pc, #176]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e01a      	b.n	8002d90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d66:	f7ff f915 	bl	8001f94 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d6e:	f7ff f911 	bl	8001f94 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e2dd      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x1da>
 8002d8c:	e000      	b.n	8002d90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d074      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x21a>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d10e      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d10b      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d064      	beq.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d160      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e2ba      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x24a>
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e026      	b.n	8002e2c <HAL_RCC_OscConfig+0x298>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de6:	d115      	bne.n	8002e14 <HAL_RCC_OscConfig+0x280>
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a02      	ldr	r2, [pc, #8]	; (8002e04 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x298>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	0800d694 	.word	0x0800d694
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004
 8002e14:	4ba0      	ldr	r3, [pc, #640]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a9f      	ldr	r2, [pc, #636]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b9d      	ldr	r3, [pc, #628]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a9c      	ldr	r2, [pc, #624]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7ff f8ae 	bl	8001f94 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7ff f8aa 	bl	8001f94 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e276      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x2a8>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f89a 	bl	8001f94 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7ff f896 	bl	8001f94 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e262      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e76:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x2d0>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d060      	beq.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x310>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d119      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d116      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ea4:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x328>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e23f      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4973      	ldr	r1, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed0:	e040      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eda:	4b6f      	ldr	r3, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6e      	ldr	r2, [pc, #440]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff f855 	bl	8001f94 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7ff f851 	bl	8001f94 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e21d      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	495f      	ldr	r1, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
 8002f20:	e018      	b.n	8002f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b5d      	ldr	r3, [pc, #372]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5c      	ldr	r2, [pc, #368]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f831 	bl	8001f94 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f36:	f7ff f82d 	bl	8001f94 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1f9      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f0      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d03c      	beq.n	8002fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01c      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f6e:	4a4a      	ldr	r2, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f78:	f7ff f80c 	bl	8001f94 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f80:	f7ff f808 	bl	8001f94 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1d4      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ef      	beq.n	8002f80 <HAL_RCC_OscConfig+0x3ec>
 8002fa0:	e01b      	b.n	8002fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa8:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002faa:	f023 0301 	bic.w	r3, r3, #1
 8002fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb2:	f7fe ffef 	bl	8001f94 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fba:	f7fe ffeb 	bl	8001f94 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e1b7      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ef      	bne.n	8002fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80a6 	beq.w	8003134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6593      	str	r3, [r2, #88]	; 0x58
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003010:	2301      	movs	r3, #1
 8003012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d118      	bne.n	8003052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302c:	f7fe ffb2 	bl	8001f94 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe ffae 	bl	8001f94 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e17a      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x508>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_RCC_OscConfig+0x4d8>
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	4a0d      	ldr	r2, [pc, #52]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306a:	e029      	b.n	80030c0 <HAL_RCC_OscConfig+0x52c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_OscConfig+0x50c>
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	4a03      	ldr	r2, [pc, #12]	; (8003098 <HAL_RCC_OscConfig+0x504>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003094:	e014      	b.n	80030c0 <HAL_RCC_OscConfig+0x52c>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
 80030a0:	4b9c      	ldr	r3, [pc, #624]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a9b      	ldr	r2, [pc, #620]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b0:	4b98      	ldr	r3, [pc, #608]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a97      	ldr	r2, [pc, #604]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe ff64 	bl	8001f94 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe ff60 	bl	8001f94 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e12a      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ed      	beq.n	80030d0 <HAL_RCC_OscConfig+0x53c>
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fe ff4d 	bl	8001f94 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe ff49 	bl	8001f94 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e113      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003114:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ed      	bne.n	80030fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b7a      	ldr	r3, [pc, #488]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	4a79      	ldr	r2, [pc, #484]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80fe 	beq.w	800333a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	2b02      	cmp	r3, #2
 8003144:	f040 80d0 	bne.w	80032e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003148:	4b72      	ldr	r3, [pc, #456]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0203 	and.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	429a      	cmp	r2, r3
 800315a:	d130      	bne.n	80031be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	3b01      	subs	r3, #1
 8003168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d127      	bne.n	80031be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d11f      	bne.n	80031be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003188:	2a07      	cmp	r2, #7
 800318a:	bf14      	ite	ne
 800318c:	2201      	movne	r2, #1
 800318e:	2200      	moveq	r2, #0
 8003190:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003192:	4293      	cmp	r3, r2
 8003194:	d113      	bne.n	80031be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d109      	bne.n	80031be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	3b01      	subs	r3, #1
 80031b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d06e      	beq.n	800329c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d069      	beq.n	8003298 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0ad      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031e0:	4b4c      	ldr	r3, [pc, #304]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80031e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ec:	f7fe fed2 	bl	8001f94 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fece 	bl	8001f94 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e09a      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x784>)
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003222:	3a01      	subs	r2, #1
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	4311      	orrs	r1, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800322c:	0212      	lsls	r2, r2, #8
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003234:	0852      	lsrs	r2, r2, #1
 8003236:	3a01      	subs	r2, #1
 8003238:	0552      	lsls	r2, r2, #21
 800323a:	4311      	orrs	r1, r2
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003240:	0852      	lsrs	r2, r2, #1
 8003242:	3a01      	subs	r2, #1
 8003244:	0652      	lsls	r2, r2, #25
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800324c:	0912      	lsrs	r2, r2, #4
 800324e:	0452      	lsls	r2, r2, #17
 8003250:	430a      	orrs	r2, r1
 8003252:	4930      	ldr	r1, [pc, #192]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 8003254:	4313      	orrs	r3, r2
 8003256:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800325e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003262:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003264:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800326a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003270:	f7fe fe90 	bl	8001f94 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fe8c 	bl	8001f94 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e058      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003296:	e050      	b.n	800333a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e04f      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d148      	bne.n	800333a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c0:	f7fe fe68 	bl	8001f94 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe fe64 	bl	8001f94 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e030      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0x734>
 80032e6:	e028      	b.n	800333a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	2b0c      	cmp	r3, #12
 80032ec:	d023      	beq.n	8003336 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_RCC_OscConfig+0x780>)
 80032f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe fe4b 	bl	8001f94 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003300:	e00c      	b.n	800331c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe fe47 	bl	8001f94 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d905      	bls.n	800331c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e013      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
 8003314:	40021000 	.word	0x40021000
 8003318:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_RCC_OscConfig+0x7b0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ec      	bne.n	8003302 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <HAL_RCC_OscConfig+0x7b0>)
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4905      	ldr	r1, [pc, #20]	; (8003344 <HAL_RCC_OscConfig+0x7b0>)
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_OscConfig+0x7b4>)
 8003330:	4013      	ands	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
 8003334:	e001      	b.n	800333a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3720      	adds	r7, #32
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	feeefffc 	.word	0xfeeefffc

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0e7      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b75      	ldr	r3, [pc, #468]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d910      	bls.n	8003390 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b72      	ldr	r3, [pc, #456]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 0207 	bic.w	r2, r3, #7
 8003376:	4970      	ldr	r1, [pc, #448]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d001      	beq.n	8003390 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0cf      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4b66      	ldr	r3, [pc, #408]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d908      	bls.n	80033be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4960      	ldr	r1, [pc, #384]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d04c      	beq.n	8003464 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	4b5a      	ldr	r3, [pc, #360]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d121      	bne.n	8003422 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0a6      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d115      	bne.n	8003422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e09a      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003402:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e08e      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e086      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b46      	ldr	r3, [pc, #280]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4943      	ldr	r1, [pc, #268]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003434:	f7fe fdae 	bl	8001f94 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe fdaa 	bl	8001f94 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e06e      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b31      	ldr	r3, [pc, #196]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347c:	429a      	cmp	r2, r3
 800347e:	d208      	bcs.n	8003492 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b2e      	ldr	r3, [pc, #184]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	492b      	ldr	r1, [pc, #172]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003492:	4b29      	ldr	r3, [pc, #164]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d210      	bcs.n	80034c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 0207 	bic.w	r2, r3, #7
 80034a8:	4923      	ldr	r1, [pc, #140]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <HAL_RCC_ClockConfig+0x1ec>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e036      	b.n	8003530 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	4918      	ldr	r1, [pc, #96]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4910      	ldr	r1, [pc, #64]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003500:	f000 f824 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	490b      	ldr	r1, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1f4>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1f8>)
 800351e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1fc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fce5 	bl	8001ef4 <HAL_InitTick>
 800352a:	4603      	mov	r3, r0
 800352c:	72fb      	strb	r3, [r7, #11]

  return status;
 800352e:	7afb      	ldrb	r3, [r7, #11]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40022000 	.word	0x40022000
 800353c:	40021000 	.word	0x40021000
 8003540:	0800d694 	.word	0x0800d694
 8003544:	20000000 	.word	0x20000000
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_GetSysClockFreq+0x34>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d121      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d11e      	bne.n	80035be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	e005      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035a8:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_GetSysClockFreq+0x110>)
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	e004      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <HAL_RCC_GetSysClockFreq+0x114>)
 80035d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d134      	bne.n	8003644 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d003      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xac>
 80035f0:	e005      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCC_GetSysClockFreq+0x110>)
 80035f4:	617b      	str	r3, [r7, #20]
      break;
 80035f6:	e005      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_GetSysClockFreq+0x114>)
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e002      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	617b      	str	r3, [r7, #20]
      break;
 8003602:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0a1b      	lsrs	r3, r3, #8
 8003618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	fb03 f202 	mul.w	r2, r3, r2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	fbb2 f3f3 	udiv	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_GetSysClockFreq+0x108>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	0e5b      	lsrs	r3, r3, #25
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	3301      	adds	r3, #1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003644:	69bb      	ldr	r3, [r7, #24]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	0800d6ac 	.word	0x0800d6ac
 800365c:	00f42400 	.word	0x00f42400
 8003660:	007a1200 	.word	0x007a1200

08003664 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003668:	4b03      	ldr	r3, [pc, #12]	; (8003678 <HAL_RCC_GetHCLKFreq+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000000 	.word	0x20000000

0800367c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003680:	f7ff fff0 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4904      	ldr	r1, [pc, #16]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	0800d6a4 	.word	0x0800d6a4

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036ac:	f7ff ffda 	bl	8003664 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0adb      	lsrs	r3, r3, #11
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4904      	ldr	r1, [pc, #16]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40021000 	.word	0x40021000
 80036d0:	0800d6a4 	.word	0x0800d6a4

080036d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036ec:	f7ff f9ee 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 80036f0:	6178      	str	r0, [r7, #20]
 80036f2:	e014      	b.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6593      	str	r3, [r2, #88]	; 0x58
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800370c:	f7ff f9de 	bl	8002acc <HAL_PWREx_GetVoltageRange>
 8003710:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003724:	d10b      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d919      	bls.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2ba0      	cmp	r3, #160	; 0xa0
 8003730:	d902      	bls.n	8003738 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003732:	2302      	movs	r3, #2
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e013      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003738:	2301      	movs	r3, #1
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e010      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b80      	cmp	r3, #128	; 0x80
 8003742:	d902      	bls.n	800374a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003744:	2303      	movs	r3, #3
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	e00a      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d102      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003750:	2302      	movs	r3, #2
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e004      	b.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b70      	cmp	r3, #112	; 0x70
 800375a:	d101      	bne.n	8003760 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800375c:	2301      	movs	r3, #1
 800375e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 0207 	bic.w	r2, r3, #7
 8003768:	4909      	ldr	r1, [pc, #36]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	40022000 	.word	0x40022000

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800379c:	2300      	movs	r3, #0
 800379e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d041      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037b8:	d02a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037be:	d824      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037c4:	d008      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ca:	d81e      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d4:	d010      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037d6:	e018      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d8:	4b86      	ldr	r3, [pc, #536]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a85      	ldr	r2, [pc, #532]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e4:	e015      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fabb 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fba6 	bl	8003f50 <RCCEx_PLLSAI2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	74fb      	strb	r3, [r7, #19]
      break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003826:	4973      	ldr	r1, [pc, #460]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d041      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003848:	d02a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800384a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800384e:	d824      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800385a:	d81e      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003864:	d010      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003866:	e018      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003868:	4b62      	ldr	r3, [pc, #392]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a61      	ldr	r2, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003872:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003874:	e015      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fa73 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003886:	e00c      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3320      	adds	r3, #32
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fb5e 	bl	8003f50 <RCCEx_PLLSAI2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	74fb      	strb	r3, [r7, #19]
      break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a8:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b6:	494f      	ldr	r1, [pc, #316]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038be:	e001      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	7cfb      	ldrb	r3, [r7, #19]
 80038c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a0 	beq.w	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d2:	2300      	movs	r3, #0
 80038d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	4a40      	ldr	r2, [pc, #256]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f6:	6593      	str	r3, [r2, #88]	; 0x58
 80038f8:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003904:	2301      	movs	r3, #1
 8003906:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800390e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003914:	f7fe fb3e 	bl	8001f94 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800391a:	e009      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fe fb3a 	bl	8001f94 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	74fb      	strb	r3, [r7, #19]
        break;
 800392e:	e005      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d15c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01f      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	429a      	cmp	r2, r3
 800395e:	d019      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	4a20      	ldr	r2, [pc, #128]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800398c:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe faf9 	bl	8001f94 <HAL_GetTick>
 80039a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a4:	e00b      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fe faf5 	bl	8001f94 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d902      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	74fb      	strb	r3, [r7, #19]
            break;
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ec      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e2:	4904      	ldr	r1, [pc, #16]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ea:	e009      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	74bb      	strb	r3, [r7, #18]
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a00:	7c7b      	ldrb	r3, [r7, #17]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	4b9e      	ldr	r3, [pc, #632]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0a:	4a9d      	ldr	r2, [pc, #628]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a1e:	4b98      	ldr	r3, [pc, #608]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f023 0203 	bic.w	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	4994      	ldr	r1, [pc, #592]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a40:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f023 020c 	bic.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	498c      	ldr	r1, [pc, #560]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0304 	and.w	r3, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4983      	ldr	r1, [pc, #524]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a84:	4b7e      	ldr	r3, [pc, #504]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	497b      	ldr	r1, [pc, #492]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab4:	4972      	ldr	r1, [pc, #456]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	496a      	ldr	r1, [pc, #424]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	4961      	ldr	r1, [pc, #388]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b0c:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	4959      	ldr	r1, [pc, #356]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2e:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	4950      	ldr	r1, [pc, #320]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b50:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	4948      	ldr	r1, [pc, #288]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b72:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	493f      	ldr	r1, [pc, #252]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d028      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b94:	4b3a      	ldr	r3, [pc, #232]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba2:	4937      	ldr	r1, [pc, #220]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb4:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bbe:	60d3      	str	r3, [r2, #12]
 8003bc0:	e011      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f8c8 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003be2:	7cfb      	ldrb	r3, [r7, #19]
 8003be4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d028      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bf2:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	491f      	ldr	r1, [pc, #124]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c12:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1c:	60d3      	str	r3, [r2, #12]
 8003c1e:	e011      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f899 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c3a:	7cfb      	ldrb	r3, [r7, #19]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
 8003c42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d02b      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a02      	ldr	r2, [pc, #8]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7a:	60d3      	str	r3, [r2, #12]
 8003c7c:	e014      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f867 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d02f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb4:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc2:	4928      	ldr	r1, [pc, #160]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2102      	movs	r1, #2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f844 	bl	8003d68 <RCCEx_PLLSAI1_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d014      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	74bb      	strb	r3, [r7, #18]
 8003cee:	e011      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3320      	adds	r3, #32
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f925 	bl	8003f50 <RCCEx_PLLSAI2_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d20:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2e:	490d      	ldr	r1, [pc, #52]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00b      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d52:	4904      	ldr	r1, [pc, #16]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000

08003d68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d76:	4b75      	ldr	r3, [pc, #468]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d82:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0203 	and.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d10d      	bne.n	8003dae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
       ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
       ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d047      	beq.n	8003e3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e044      	b.n	8003e3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d018      	beq.n	8003dee <RCCEx_PLLSAI1_Config+0x86>
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d825      	bhi.n	8003e0c <RCCEx_PLLSAI1_Config+0xa4>
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d002      	beq.n	8003dca <RCCEx_PLLSAI1_Config+0x62>
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d009      	beq.n	8003ddc <RCCEx_PLLSAI1_Config+0x74>
 8003dc8:	e020      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dca:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11d      	bne.n	8003e12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dda:	e01a      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ddc:	4b5b      	ldr	r3, [pc, #364]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dec:	e013      	b.n	8003e16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dee:	4b57      	ldr	r3, [pc, #348]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10f      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dfa:	4b54      	ldr	r3, [pc, #336]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e0a:	e006      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e004      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e12:	bf00      	nop
 8003e14:	e002      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6819      	ldr	r1, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	430b      	orrs	r3, r1
 8003e38:	4944      	ldr	r1, [pc, #272]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d17d      	bne.n	8003f40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fe f8a0 	bl	8001f94 <HAL_GetTick>
 8003e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e56:	e009      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e58:	f7fe f89c 	bl	8001f94 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d902      	bls.n	8003e6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	73fb      	strb	r3, [r7, #15]
        break;
 8003e6a:	e005      	b.n	8003e78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ef      	bne.n	8003e58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d160      	bne.n	8003f40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e84:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6892      	ldr	r2, [r2, #8]
 8003e94:	0211      	lsls	r1, r2, #8
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68d2      	ldr	r2, [r2, #12]
 8003e9a:	0912      	lsrs	r2, r2, #4
 8003e9c:	0452      	lsls	r2, r2, #17
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	492a      	ldr	r1, [pc, #168]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	610b      	str	r3, [r1, #16]
 8003ea6:	e027      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d112      	bne.n	8003ed4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eae:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6892      	ldr	r2, [r2, #8]
 8003ebe:	0211      	lsls	r1, r2, #8
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6912      	ldr	r2, [r2, #16]
 8003ec4:	0852      	lsrs	r2, r2, #1
 8003ec6:	3a01      	subs	r2, #1
 8003ec8:	0552      	lsls	r2, r2, #21
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	491f      	ldr	r1, [pc, #124]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	610b      	str	r3, [r1, #16]
 8003ed2:	e011      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6892      	ldr	r2, [r2, #8]
 8003ee4:	0211      	lsls	r1, r2, #8
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6952      	ldr	r2, [r2, #20]
 8003eea:	0852      	lsrs	r2, r2, #1
 8003eec:	3a01      	subs	r2, #1
 8003eee:	0652      	lsls	r2, r2, #25
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	4916      	ldr	r1, [pc, #88]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ef8:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe f846 	bl	8001f94 <HAL_GetTick>
 8003f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f0a:	e009      	b.n	8003f20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f0c:	f7fe f842 	bl	8001f94 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f1e:	e005      	b.n	8003f2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ef      	beq.n	8003f0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	4904      	ldr	r1, [pc, #16]	; (8003f4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000

08003f50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f5e:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d018      	beq.n	8003f9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 0203 	and.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d10d      	bne.n	8003f96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f82:	4b61      	ldr	r3, [pc, #388]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	091b      	lsrs	r3, r3, #4
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
       ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d047      	beq.n	8004026 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e044      	b.n	8004026 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d018      	beq.n	8003fd6 <RCCEx_PLLSAI2_Config+0x86>
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d825      	bhi.n	8003ff4 <RCCEx_PLLSAI2_Config+0xa4>
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d002      	beq.n	8003fb2 <RCCEx_PLLSAI2_Config+0x62>
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d009      	beq.n	8003fc4 <RCCEx_PLLSAI2_Config+0x74>
 8003fb0:	e020      	b.n	8003ff4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fb2:	4b55      	ldr	r3, [pc, #340]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11d      	bne.n	8003ffa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc2:	e01a      	b.n	8003ffa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fc4:	4b50      	ldr	r3, [pc, #320]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d116      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd4:	e013      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fd6:	4b4c      	ldr	r3, [pc, #304]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fe2:	4b49      	ldr	r3, [pc, #292]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ff2:	e006      	b.n	8004002 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff8:	e004      	b.n	8004004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004002:	bf00      	nop
    }

    if(status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10d      	bne.n	8004026 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800400a:	4b3f      	ldr	r3, [pc, #252]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	3b01      	subs	r3, #1
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	430b      	orrs	r3, r1
 8004020:	4939      	ldr	r1, [pc, #228]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d167      	bne.n	80040fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fd ffac 	bl	8001f94 <HAL_GetTick>
 800403c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403e:	e009      	b.n	8004054 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004040:	f7fd ffa8 	bl	8001f94 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d902      	bls.n	8004054 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	73fb      	strb	r3, [r7, #15]
        break;
 8004052:	e005      	b.n	8004060 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004054:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ef      	bne.n	8004040 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d14a      	bne.n	80040fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d111      	bne.n	8004090 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6892      	ldr	r2, [r2, #8]
 800407c:	0211      	lsls	r1, r2, #8
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	0912      	lsrs	r2, r2, #4
 8004084:	0452      	lsls	r2, r2, #17
 8004086:	430a      	orrs	r2, r1
 8004088:	491f      	ldr	r1, [pc, #124]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	614b      	str	r3, [r1, #20]
 800408e:	e011      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004098:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6912      	ldr	r2, [r2, #16]
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
 80040aa:	0652      	lsls	r2, r2, #25
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4916      	ldr	r1, [pc, #88]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a13      	ldr	r2, [pc, #76]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7fd ff68 	bl	8001f94 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c6:	e009      	b.n	80040dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040c8:	f7fd ff64 	bl	8001f94 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d902      	bls.n	80040dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	73fb      	strb	r3, [r7, #15]
          break;
 80040da:	e005      	b.n	80040e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ef      	beq.n	80040c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4904      	ldr	r1, [pc, #16]	; (8004108 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000

0800410c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e049      	b.n	80041b2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	795b      	ldrb	r3, [r3, #5]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d105      	bne.n	8004134 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fcbc 	bl	8001aac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0204 	orr.w	r2, r2, #4
 8004148:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d104      	bne.n	8004162 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2204      	movs	r2, #4
 800415c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e027      	b.n	80041b2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004162:	f7fd ff17 	bl	8001f94 <HAL_GetTick>
 8004166:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004168:	e015      	b.n	8004196 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800416a:	f7fd ff13 	bl	8001f94 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d90e      	bls.n	8004196 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d107      	bne.n	8004196 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2204      	movs	r2, #4
 800418a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00d      	b.n	80041b2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d0e2      	beq.n	800416a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e049      	b.n	8004260 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7fd fca7 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3304      	adds	r3, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f000 f967 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e047      	b.n	8004310 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a23      	ldr	r2, [pc, #140]	; (800431c <HAL_TIM_Base_Start+0xb4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429a:	d018      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a1f      	ldr	r2, [pc, #124]	; (8004320 <HAL_TIM_Base_Start+0xb8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <HAL_TIM_Base_Start+0xbc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <HAL_TIM_Base_Start+0xc0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_TIM_Base_Start+0xc4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_TIM_Base_Start+0x66>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_TIM_Base_Start+0xc8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d115      	bne.n	80042fa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	4b17      	ldr	r3, [pc, #92]	; (8004334 <HAL_TIM_Base_Start+0xcc>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d015      	beq.n	800430c <HAL_TIM_Base_Start+0xa4>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e6:	d011      	beq.n	800430c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e008      	b.n	800430c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e000      	b.n	800430e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40012c00 	.word	0x40012c00
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40013400 	.word	0x40013400
 8004330:	40014000 	.word	0x40014000
 8004334:	00010007 	.word	0x00010007

08004338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIM_ConfigClockSource+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e0b6      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d03e      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0xd8>
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	f200 8087 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	f000 8086 	beq.w	80044ae <HAL_TIM_ConfigClockSource+0x176>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	d87f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d01a      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xaa>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d87b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b60      	cmp	r3, #96	; 0x60
 80043b2:	d050      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x11e>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d877      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b50      	cmp	r3, #80	; 0x50
 80043ba:	d03c      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xfe>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d873      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d058      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x13e>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d86f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d064      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d86b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d060      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d867      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05c      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d05a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043e0:	e062      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043f2:	f000 f97f 	bl	80046f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	609a      	str	r2, [r3, #8]
      break;
 800440e:	e04f      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004420:	f000 f968 	bl	80046f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004432:	609a      	str	r2, [r3, #8]
      break;
 8004434:	e03c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004442:	461a      	mov	r2, r3
 8004444:	f000 f8dc 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2150      	movs	r1, #80	; 0x50
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f935 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004454:	e02c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004462:	461a      	mov	r2, r3
 8004464:	f000 f8fb 	bl	800465e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2160      	movs	r1, #96	; 0x60
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f925 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004474:	e01c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	461a      	mov	r2, r3
 8004484:	f000 f8bc 	bl	8004600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f915 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 8004494:	e00c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f000 f90c 	bl	80046be <TIM_ITRx_SetConfig>
      break;
 80044a6:	e003      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d013      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d00f      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3d      	ldr	r2, [pc, #244]	; (80045e4 <TIM_Base_SetConfig+0x118>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d00b      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3c      	ldr	r2, [pc, #240]	; (80045e8 <TIM_Base_SetConfig+0x11c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d007      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <TIM_Base_SetConfig+0x120>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3a      	ldr	r2, [pc, #232]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d108      	bne.n	800451e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2f      	ldr	r2, [pc, #188]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01f      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d01b      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <TIM_Base_SetConfig+0x118>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d017      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <TIM_Base_SetConfig+0x11c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2a      	ldr	r2, [pc, #168]	; (80045ec <TIM_Base_SetConfig+0x120>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00f      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a29      	ldr	r2, [pc, #164]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <TIM_Base_SetConfig+0x128>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <TIM_Base_SetConfig+0x12c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a26      	ldr	r2, [pc, #152]	; (80045fc <TIM_Base_SetConfig+0x130>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a10      	ldr	r2, [pc, #64]	; (80045e0 <TIM_Base_SetConfig+0x114>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <TIM_Base_SetConfig+0x124>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a11      	ldr	r2, [pc, #68]	; (80045f4 <TIM_Base_SetConfig+0x128>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <TIM_Base_SetConfig+0x12c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <TIM_Base_SetConfig+0x130>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d103      	bne.n	80045cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	615a      	str	r2, [r3, #20]
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800

08004600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f023 030a 	bic.w	r3, r3, #10
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800465e:	b480      	push	{r7}
 8004660:	b087      	sub	sp, #28
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f023 0210 	bic.w	r2, r3, #16
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	031b      	lsls	r3, r3, #12
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800469a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	621a      	str	r2, [r3, #32]
}
 80046b2:	bf00      	nop
 80046b4:	371c      	adds	r7, #28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f043 0307 	orr.w	r3, r3, #7
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800470e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	021a      	lsls	r2, r3, #8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	431a      	orrs	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4313      	orrs	r3, r2
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	609a      	str	r2, [r3, #8]
}
 8004728:	bf00      	nop
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004748:	2302      	movs	r3, #2
 800474a:	e068      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2e      	ldr	r2, [pc, #184]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004786:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1e      	ldr	r2, [pc, #120]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01d      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047be:	d018      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40014000 	.word	0x40014000

08004844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e040      	b.n	80048d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f996 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fc34 	bl	80050f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f979 	bl	8004b88 <UART_SetConfig>
 8004896:	4603      	mov	r3, r0
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e01b      	b.n	80048d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fcb3 	bl	800523c <UART_CheckIdleState>
 80048d6:	4603      	mov	r3, r0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4613      	mov	r3, r2
 80048ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d178      	bne.n	80049ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Transmit+0x24>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e071      	b.n	80049ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2221      	movs	r2, #33	; 0x21
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004916:	f7fd fb3d 	bl	8001f94 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Transmit+0x68>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004950:	e030      	b.n	80049b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fd15 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e03c      	b.n	80049ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004984:	b292      	uxth	r2, r2
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	3302      	adds	r3, #2
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e008      	b.n	80049a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	b292      	uxth	r2, r2
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	3301      	adds	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1c8      	bne.n	8004952 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	2140      	movs	r1, #64	; 0x40
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fcde 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e005      	b.n	80049ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	f040 80b6 	bne.w	8004b7c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_UART_Receive+0x28>
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0ae      	b.n	8004b7e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2222      	movs	r2, #34	; 0x22
 8004a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a36:	f7fd faad 	bl	8001f94 <HAL_GetTick>
 8004a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	88fa      	ldrh	r2, [r7, #6]
 8004a40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d10e      	bne.n	8004a74 <HAL_UART_Receive+0x80>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <HAL_UART_Receive+0x76>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a68:	e02d      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	22ff      	movs	r2, #255	; 0xff
 8004a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a72:	e028      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_UART_Receive+0xa4>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <HAL_UART_Receive+0x9a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	22ff      	movs	r2, #255	; 0xff
 8004a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a8c:	e01b      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	227f      	movs	r2, #127	; 0x7f
 8004a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a96:	e016      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa0:	d10d      	bne.n	8004abe <HAL_UART_Receive+0xca>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_UART_Receive+0xc0>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	227f      	movs	r2, #127	; 0x7f
 8004aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab2:	e008      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	223f      	movs	r2, #63	; 0x3f
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004abc:	e003      	b.n	8004ac6 <HAL_UART_Receive+0xd2>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004acc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad6:	d108      	bne.n	8004aea <HAL_UART_Receive+0xf6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e003      	b.n	8004af2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004af2:	e037      	b.n	8004b64 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2200      	movs	r2, #0
 8004afc:	2120      	movs	r1, #32
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fc44 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e033      	b.n	8004b7e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10c      	bne.n	8004b36 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	8a7b      	ldrh	r3, [r7, #18]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	3302      	adds	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e00d      	b.n	8004b52 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8a7b      	ldrh	r3, [r7, #18]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4013      	ands	r3, r2
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1c1      	bne.n	8004af4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3720      	adds	r7, #32
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b08a      	sub	sp, #40	; 0x28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4ba4      	ldr	r3, [pc, #656]	; (8004e48 <UART_SetConfig+0x2c0>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a99      	ldr	r2, [pc, #612]	; (8004e4c <UART_SetConfig+0x2c4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c04:	430a      	orrs	r2, r1
 8004c06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a90      	ldr	r2, [pc, #576]	; (8004e50 <UART_SetConfig+0x2c8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d126      	bne.n	8004c60 <UART_SetConfig+0xd8>
 8004c12:	4b90      	ldr	r3, [pc, #576]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f003 0303 	and.w	r3, r3, #3
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d81b      	bhi.n	8004c58 <UART_SetConfig+0xd0>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0xa0>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c39 	.word	0x08004c39
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c51 	.word	0x08004c51
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e116      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004c40:	2302      	movs	r3, #2
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e112      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e10e      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004c50:	2308      	movs	r3, #8
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e10a      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5e:	e106      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7c      	ldr	r2, [pc, #496]	; (8004e58 <UART_SetConfig+0x2d0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d138      	bne.n	8004cdc <UART_SetConfig+0x154>
 8004c6a:	4b7a      	ldr	r3, [pc, #488]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d82d      	bhi.n	8004cd4 <UART_SetConfig+0x14c>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <UART_SetConfig+0xf8>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004cb5 	.word	0x08004cb5
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004cd5 	.word	0x08004cd5
 8004c8c:	08004cd5 	.word	0x08004cd5
 8004c90:	08004cc5 	.word	0x08004cc5
 8004c94:	08004cd5 	.word	0x08004cd5
 8004c98:	08004cd5 	.word	0x08004cd5
 8004c9c:	08004cd5 	.word	0x08004cd5
 8004ca0:	08004cbd 	.word	0x08004cbd
 8004ca4:	08004cd5 	.word	0x08004cd5
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004ccd 	.word	0x08004ccd
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e0d8      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e0d4      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e0d0      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004ccc:	2308      	movs	r3, #8
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e0cc      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e0c8      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5e      	ldr	r2, [pc, #376]	; (8004e5c <UART_SetConfig+0x2d4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d125      	bne.n	8004d32 <UART_SetConfig+0x1aa>
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cf0:	2b30      	cmp	r3, #48	; 0x30
 8004cf2:	d016      	beq.n	8004d22 <UART_SetConfig+0x19a>
 8004cf4:	2b30      	cmp	r3, #48	; 0x30
 8004cf6:	d818      	bhi.n	8004d2a <UART_SetConfig+0x1a2>
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d00a      	beq.n	8004d12 <UART_SetConfig+0x18a>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d814      	bhi.n	8004d2a <UART_SetConfig+0x1a2>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <UART_SetConfig+0x182>
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d008      	beq.n	8004d1a <UART_SetConfig+0x192>
 8004d08:	e00f      	b.n	8004d2a <UART_SetConfig+0x1a2>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d10:	e0ad      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d12:	2302      	movs	r3, #2
 8004d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d18:	e0a9      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d20:	e0a5      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d22:	2308      	movs	r3, #8
 8004d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d28:	e0a1      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d2a:	2310      	movs	r3, #16
 8004d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d30:	e09d      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <UART_SetConfig+0x2d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d125      	bne.n	8004d88 <UART_SetConfig+0x200>
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d46:	2bc0      	cmp	r3, #192	; 0xc0
 8004d48:	d016      	beq.n	8004d78 <UART_SetConfig+0x1f0>
 8004d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d4c:	d818      	bhi.n	8004d80 <UART_SetConfig+0x1f8>
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d00a      	beq.n	8004d68 <UART_SetConfig+0x1e0>
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d814      	bhi.n	8004d80 <UART_SetConfig+0x1f8>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <UART_SetConfig+0x1d8>
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d008      	beq.n	8004d70 <UART_SetConfig+0x1e8>
 8004d5e:	e00f      	b.n	8004d80 <UART_SetConfig+0x1f8>
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e082      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e07e      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d70:	2304      	movs	r3, #4
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e07a      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d78:	2308      	movs	r3, #8
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e076      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d80:	2310      	movs	r3, #16
 8004d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d86:	e072      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	; (8004e64 <UART_SetConfig+0x2dc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d12a      	bne.n	8004de8 <UART_SetConfig+0x260>
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da0:	d01a      	beq.n	8004dd8 <UART_SetConfig+0x250>
 8004da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da6:	d81b      	bhi.n	8004de0 <UART_SetConfig+0x258>
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dac:	d00c      	beq.n	8004dc8 <UART_SetConfig+0x240>
 8004dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db2:	d815      	bhi.n	8004de0 <UART_SetConfig+0x258>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <UART_SetConfig+0x238>
 8004db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbc:	d008      	beq.n	8004dd0 <UART_SetConfig+0x248>
 8004dbe:	e00f      	b.n	8004de0 <UART_SetConfig+0x258>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc6:	e052      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dce:	e04e      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004dd0:	2304      	movs	r3, #4
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dd6:	e04a      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004dd8:	2308      	movs	r3, #8
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dde:	e046      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de6:	e042      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <UART_SetConfig+0x2c4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d13a      	bne.n	8004e68 <UART_SetConfig+0x2e0>
 8004df2:	4b18      	ldr	r3, [pc, #96]	; (8004e54 <UART_SetConfig+0x2cc>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e00:	d01a      	beq.n	8004e38 <UART_SetConfig+0x2b0>
 8004e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e06:	d81b      	bhi.n	8004e40 <UART_SetConfig+0x2b8>
 8004e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e0c:	d00c      	beq.n	8004e28 <UART_SetConfig+0x2a0>
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	d815      	bhi.n	8004e40 <UART_SetConfig+0x2b8>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <UART_SetConfig+0x298>
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d008      	beq.n	8004e30 <UART_SetConfig+0x2a8>
 8004e1e:	e00f      	b.n	8004e40 <UART_SetConfig+0x2b8>
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e26:	e022      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2e:	e01e      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e36:	e01a      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3e:	e016      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e46:	e012      	b.n	8004e6e <UART_SetConfig+0x2e6>
 8004e48:	efff69f3 	.word	0xefff69f3
 8004e4c:	40008000 	.word	0x40008000
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40004400 	.word	0x40004400
 8004e5c:	40004800 	.word	0x40004800
 8004e60:	40004c00 	.word	0x40004c00
 8004e64:	40005000 	.word	0x40005000
 8004e68:	2310      	movs	r3, #16
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a9f      	ldr	r2, [pc, #636]	; (80050f0 <UART_SetConfig+0x568>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d17a      	bne.n	8004f6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d824      	bhi.n	8004eca <UART_SetConfig+0x342>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0x300>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004ecb 	.word	0x08004ecb
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004ebb 	.word	0x08004ebb
 8004e9c:	08004ecb 	.word	0x08004ecb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004ecb 	.word	0x08004ecb
 8004ea8:	08004ec3 	.word	0x08004ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fbe6 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004eb0:	61f8      	str	r0, [r7, #28]
        break;
 8004eb2:	e010      	b.n	8004ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb4:	4b8f      	ldr	r3, [pc, #572]	; (80050f4 <UART_SetConfig+0x56c>)
 8004eb6:	61fb      	str	r3, [r7, #28]
        break;
 8004eb8:	e00d      	b.n	8004ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eba:	f7fe fb47 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8004ebe:	61f8      	str	r0, [r7, #28]
        break;
 8004ec0:	e009      	b.n	8004ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e005      	b.n	8004ed6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80fb 	beq.w	80050d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	4413      	add	r3, r2
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d305      	bcc.n	8004efa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d903      	bls.n	8004f02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f00:	e0e8      	b.n	80050d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	2200      	movs	r2, #0
 8004f06:	461c      	mov	r4, r3
 8004f08:	4615      	mov	r5, r2
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	022b      	lsls	r3, r5, #8
 8004f14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f18:	0222      	lsls	r2, r4, #8
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	6849      	ldr	r1, [r1, #4]
 8004f1e:	0849      	lsrs	r1, r1, #1
 8004f20:	2000      	movs	r0, #0
 8004f22:	4688      	mov	r8, r1
 8004f24:	4681      	mov	r9, r0
 8004f26:	eb12 0a08 	adds.w	sl, r2, r8
 8004f2a:	eb43 0b09 	adc.w	fp, r3, r9
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	4659      	mov	r1, fp
 8004f40:	f7fb fea2 	bl	8000c88 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f52:	d308      	bcc.n	8004f66 <UART_SetConfig+0x3de>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f5a:	d204      	bcs.n	8004f66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	60da      	str	r2, [r3, #12]
 8004f64:	e0b6      	b.n	80050d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f6c:	e0b2      	b.n	80050d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f76:	d15e      	bne.n	8005036 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d828      	bhi.n	8004fd2 <UART_SetConfig+0x44a>
 8004f80:	a201      	add	r2, pc, #4	; (adr r2, 8004f88 <UART_SetConfig+0x400>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	08004fd3 	.word	0x08004fd3
 8004f98:	08004fc3 	.word	0x08004fc3
 8004f9c:	08004fd3 	.word	0x08004fd3
 8004fa0:	08004fd3 	.word	0x08004fd3
 8004fa4:	08004fd3 	.word	0x08004fd3
 8004fa8:	08004fcb 	.word	0x08004fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fac:	f7fe fb66 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 8004fb0:	61f8      	str	r0, [r7, #28]
        break;
 8004fb2:	e014      	b.n	8004fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7fe fb78 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	61f8      	str	r0, [r7, #28]
        break;
 8004fba:	e010      	b.n	8004fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <UART_SetConfig+0x56c>)
 8004fbe:	61fb      	str	r3, [r7, #28]
        break;
 8004fc0:	e00d      	b.n	8004fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc2:	f7fe fac3 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8004fc6:	61f8      	str	r0, [r7, #28]
        break;
 8004fc8:	e009      	b.n	8004fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	61fb      	str	r3, [r7, #28]
        break;
 8004fd0:	e005      	b.n	8004fde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d077      	beq.n	80050d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	005a      	lsls	r2, r3, #1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	085b      	lsrs	r3, r3, #1
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b0f      	cmp	r3, #15
 8004ffe:	d916      	bls.n	800502e <UART_SetConfig+0x4a6>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005006:	d212      	bcs.n	800502e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	b29b      	uxth	r3, r3
 800500c:	f023 030f 	bic.w	r3, r3, #15
 8005010:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	b29a      	uxth	r2, r3
 800501e:	8afb      	ldrh	r3, [r7, #22]
 8005020:	4313      	orrs	r3, r2
 8005022:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	8afa      	ldrh	r2, [r7, #22]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	e052      	b.n	80050d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005034:	e04e      	b.n	80050d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800503a:	2b08      	cmp	r3, #8
 800503c:	d827      	bhi.n	800508e <UART_SetConfig+0x506>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <UART_SetConfig+0x4bc>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	0800508f 	.word	0x0800508f
 8005054:	0800507f 	.word	0x0800507f
 8005058:	0800508f 	.word	0x0800508f
 800505c:	0800508f 	.word	0x0800508f
 8005060:	0800508f 	.word	0x0800508f
 8005064:	08005087 	.word	0x08005087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005068:	f7fe fb08 	bl	800367c <HAL_RCC_GetPCLK1Freq>
 800506c:	61f8      	str	r0, [r7, #28]
        break;
 800506e:	e014      	b.n	800509a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005070:	f7fe fb1a 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8005074:	61f8      	str	r0, [r7, #28]
        break;
 8005076:	e010      	b.n	800509a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <UART_SetConfig+0x56c>)
 800507a:	61fb      	str	r3, [r7, #28]
        break;
 800507c:	e00d      	b.n	800509a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800507e:	f7fe fa65 	bl	800354c <HAL_RCC_GetSysClockFreq>
 8005082:	61f8      	str	r0, [r7, #28]
        break;
 8005084:	e009      	b.n	800509a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508a:	61fb      	str	r3, [r7, #28]
        break;
 800508c:	e005      	b.n	800509a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005098:	bf00      	nop
    }

    if (pclk != 0U)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d019      	beq.n	80050d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	085a      	lsrs	r2, r3, #1
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b0f      	cmp	r3, #15
 80050b8:	d909      	bls.n	80050ce <UART_SetConfig+0x546>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d205      	bcs.n	80050ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60da      	str	r2, [r3, #12]
 80050cc:	e002      	b.n	80050d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3728      	adds	r7, #40	; 0x28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ee:	bf00      	nop
 80050f0:	40008000 	.word	0x40008000
 80050f4:	00f42400 	.word	0x00f42400

080050f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01a      	beq.n	800520e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f6:	d10a      	bne.n	800520e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	605a      	str	r2, [r3, #4]
  }
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b098      	sub	sp, #96	; 0x60
 8005240:	af02      	add	r7, sp, #8
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800524c:	f7fc fea2 	bl	8001f94 <HAL_GetTick>
 8005250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d12e      	bne.n	80052be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005268:	2200      	movs	r2, #0
 800526a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f88c 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d021      	beq.n	80052be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005298:	647b      	str	r3, [r7, #68]	; 0x44
 800529a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800529e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e062      	b.n	8005384 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d149      	bne.n	8005360 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f856 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03c      	beq.n	8005360 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	e853 3f00 	ldrex	r3, [r3]
 80052f2:	623b      	str	r3, [r7, #32]
   return(result);
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
 8005306:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800530a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800530c:	e841 2300 	strex	r3, r2, [r1]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1e6      	bne.n	80052e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3308      	adds	r3, #8
 800531e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	60fb      	str	r3, [r7, #12]
   return(result);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3308      	adds	r3, #8
 8005336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e5      	bne.n	8005318 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e011      	b.n	8005384 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3758      	adds	r7, #88	; 0x58
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	4613      	mov	r3, r2
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539c:	e049      	b.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d045      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a6:	f7fc fdf5 	bl	8001f94 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d302      	bcc.n	80053bc <UART_WaitOnFlagUntilTimeout+0x30>
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e048      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d031      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d110      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f838 	bl	800545a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2208      	movs	r2, #8
 80053ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e029      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	d111      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f81e 	bl	800545a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	429a      	cmp	r2, r3
 800544e:	d0a6      	beq.n	800539e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b095      	sub	sp, #84	; 0x54
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d118      	bne.n	8005502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	647b      	str	r3, [r7, #68]	; 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005516:	bf00      	nop
 8005518:	3754      	adds	r7, #84	; 0x54
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <__NVIC_SetPriority>:
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	6039      	str	r1, [r7, #0]
 800552e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005534:	2b00      	cmp	r3, #0
 8005536:	db0a      	blt.n	800554e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	490c      	ldr	r1, [pc, #48]	; (8005570 <__NVIC_SetPriority+0x4c>)
 800553e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005542:	0112      	lsls	r2, r2, #4
 8005544:	b2d2      	uxtb	r2, r2
 8005546:	440b      	add	r3, r1
 8005548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800554c:	e00a      	b.n	8005564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4908      	ldr	r1, [pc, #32]	; (8005574 <__NVIC_SetPriority+0x50>)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	3b04      	subs	r3, #4
 800555c:	0112      	lsls	r2, r2, #4
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	440b      	add	r3, r1
 8005562:	761a      	strb	r2, [r3, #24]
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000e100 	.word	0xe000e100
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800557c:	2100      	movs	r1, #0
 800557e:	f06f 0004 	mvn.w	r0, #4
 8005582:	f7ff ffcf 	bl	8005524 <__NVIC_SetPriority>
#endif
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005592:	f3ef 8305 	mrs	r3, IPSR
 8005596:	603b      	str	r3, [r7, #0]
  return(result);
 8005598:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800559e:	f06f 0305 	mvn.w	r3, #5
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e00c      	b.n	80055c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <osKernelInitialize+0x44>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <osKernelInitialize+0x44>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	607b      	str	r3, [r7, #4]
 80055b8:	e002      	b.n	80055c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055c0:	687b      	ldr	r3, [r7, #4]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	200003e4 	.word	0x200003e4

080055d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055da:	f3ef 8305 	mrs	r3, IPSR
 80055de:	603b      	str	r3, [r7, #0]
  return(result);
 80055e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80055e6:	f06f 0305 	mvn.w	r3, #5
 80055ea:	607b      	str	r3, [r7, #4]
 80055ec:	e010      	b.n	8005610 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <osKernelStart+0x48>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d109      	bne.n	800560a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055f6:	f7ff ffbf 	bl	8005578 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <osKernelStart+0x48>)
 80055fc:	2202      	movs	r2, #2
 80055fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005600:	f001 fc92 	bl	8006f28 <vTaskStartScheduler>
      stat = osOK;
 8005604:	2300      	movs	r3, #0
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	e002      	b.n	8005610 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800560a:	f04f 33ff 	mov.w	r3, #4294967295
 800560e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200003e4 	.word	0x200003e4

08005620 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b08e      	sub	sp, #56	; 0x38
 8005624:	af04      	add	r7, sp, #16
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005630:	f3ef 8305 	mrs	r3, IPSR
 8005634:	617b      	str	r3, [r7, #20]
  return(result);
 8005636:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005638:	2b00      	cmp	r3, #0
 800563a:	d17f      	bne.n	800573c <osThreadNew+0x11c>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d07c      	beq.n	800573c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005642:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005646:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005648:	2318      	movs	r3, #24
 800564a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d045      	beq.n	80056e8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <osThreadNew+0x4a>
        name = attr->name;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <osThreadNew+0x70>
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b38      	cmp	r3, #56	; 0x38
 8005682:	d805      	bhi.n	8005690 <osThreadNew+0x70>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <osThreadNew+0x74>
        return (NULL);
 8005690:	2300      	movs	r3, #0
 8005692:	e054      	b.n	800573e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00e      	beq.n	80056ca <osThreadNew+0xaa>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	2ba7      	cmp	r3, #167	; 0xa7
 80056b2:	d90a      	bls.n	80056ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <osThreadNew+0xaa>
        mem = 1;
 80056c4:	2301      	movs	r3, #1
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e010      	b.n	80056ec <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <osThreadNew+0xcc>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d108      	bne.n	80056ec <osThreadNew+0xcc>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <osThreadNew+0xcc>
          mem = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	e001      	b.n	80056ec <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d110      	bne.n	8005714 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056fa:	9202      	str	r2, [sp, #8]
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f001 fa21 	bl	8006b50 <xTaskCreateStatic>
 800570e:	4603      	mov	r3, r0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e013      	b.n	800573c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d110      	bne.n	800573c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	b29a      	uxth	r2, r3
 800571e:	f107 0310 	add.w	r3, r7, #16
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f001 fa6c 	bl	8006c0a <xTaskCreate>
 8005732:	4603      	mov	r3, r0
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <osThreadNew+0x11c>
            hTask = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800573c:	693b      	ldr	r3, [r7, #16]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	; 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800574e:	f3ef 8305 	mrs	r3, IPSR
 8005752:	603b      	str	r3, [r7, #0]
  return(result);
 8005754:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <osThreadYield+0x1a>
    stat = osErrorISR;
 800575a:	f06f 0305 	mvn.w	r3, #5
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	e009      	b.n	8005776 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8005766:	4b07      	ldr	r3, [pc, #28]	; (8005784 <osThreadYield+0x3c>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005776:	687b      	ldr	r3, [r7, #4]
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005790:	f3ef 8305 	mrs	r3, IPSR
 8005794:	60bb      	str	r3, [r7, #8]
  return(result);
 8005796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <osDelay+0x1c>
    stat = osErrorISR;
 800579c:	f06f 0305 	mvn.w	r3, #5
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e007      	b.n	80057b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fb86 	bl	8006ec0 <vTaskDelay>
    }
  }

  return (stat);
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80057be:	b580      	push	{r7, lr}
 80057c0:	b088      	sub	sp, #32
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057ca:	f3ef 8305 	mrs	r3, IPSR
 80057ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80057d0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d174      	bne.n	80058c0 <osMutexNew+0x102>
    if (attr != NULL) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e001      	b.n	80057e8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <osMutexNew+0x3a>
      rmtx = 1U;
 80057f2:	2301      	movs	r3, #1
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e001      	b.n	80057fc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d15c      	bne.n	80058c0 <osMutexNew+0x102>
      mem = -1;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d015      	beq.n	800583e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d006      	beq.n	8005828 <osMutexNew+0x6a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b4f      	cmp	r3, #79	; 0x4f
 8005820:	d902      	bls.n	8005828 <osMutexNew+0x6a>
          mem = 1;
 8005822:	2301      	movs	r3, #1
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e00c      	b.n	8005842 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d108      	bne.n	8005842 <osMutexNew+0x84>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <osMutexNew+0x84>
            mem = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	e001      	b.n	8005842 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d112      	bne.n	800586e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4619      	mov	r1, r3
 8005854:	2004      	movs	r0, #4
 8005856:	f000 fbea 	bl	800602e <xQueueCreateMutexStatic>
 800585a:	61f8      	str	r0, [r7, #28]
 800585c:	e016      	b.n	800588c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4619      	mov	r1, r3
 8005864:	2001      	movs	r0, #1
 8005866:	f000 fbe2 	bl	800602e <xQueueCreateMutexStatic>
 800586a:	61f8      	str	r0, [r7, #28]
 800586c:	e00e      	b.n	800588c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800587a:	2004      	movs	r0, #4
 800587c:	f000 fbbf 	bl	8005ffe <xQueueCreateMutex>
 8005880:	61f8      	str	r0, [r7, #28]
 8005882:	e003      	b.n	800588c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005884:	2001      	movs	r0, #1
 8005886:	f000 fbba 	bl	8005ffe <xQueueCreateMutex>
 800588a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <osMutexNew+0xee>
        if (attr != NULL) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <osMutexNew+0xe2>
          name = attr->name;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e001      	b.n	80058a4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	69f8      	ldr	r0, [r7, #28]
 80058a8:	f001 f8f4 	bl	8006a94 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <osMutexNew+0x102>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80058c0:	69fb      	ldr	r3, [r7, #28]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e8:	f3ef 8305 	mrs	r3, IPSR
 80058ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80058f4:	f06f 0305 	mvn.w	r3, #5
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	e02c      	b.n	8005956 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005902:	f06f 0303 	mvn.w	r3, #3
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	e025      	b.n	8005956 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6938      	ldr	r0, [r7, #16]
 8005914:	f000 fbda 	bl	80060cc <xQueueTakeMutexRecursive>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d01b      	beq.n	8005956 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005924:	f06f 0301 	mvn.w	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e014      	b.n	8005956 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800592c:	f06f 0302 	mvn.w	r3, #2
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e010      	b.n	8005956 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6938      	ldr	r0, [r7, #16]
 8005938:	f000 fe78 	bl	800662c <xQueueSemaphoreTake>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d009      	beq.n	8005956 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005948:	f06f 0301 	mvn.w	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e002      	b.n	8005956 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005950:	f06f 0302 	mvn.w	r3, #2
 8005954:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005956:	697b      	ldr	r3, [r7, #20]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597c:	f3ef 8305 	mrs	r3, IPSR
 8005980:	60bb      	str	r3, [r7, #8]
  return(result);
 8005982:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005988:	f06f 0305 	mvn.w	r3, #5
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e01f      	b.n	80059d0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005996:	f06f 0303 	mvn.w	r3, #3
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	e018      	b.n	80059d0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d009      	beq.n	80059b8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059a4:	6938      	ldr	r0, [r7, #16]
 80059a6:	f000 fb5d 	bl	8006064 <xQueueGiveMutexRecursive>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d00f      	beq.n	80059d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059b0:	f06f 0302 	mvn.w	r3, #2
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e00b      	b.n	80059d0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80059b8:	2300      	movs	r3, #0
 80059ba:	2200      	movs	r2, #0
 80059bc:	2100      	movs	r1, #0
 80059be:	6938      	ldr	r0, [r7, #16]
 80059c0:	f000 fbba 	bl	8006138 <xQueueGenericSend>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d002      	beq.n	80059d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80059ca:	f06f 0302 	mvn.w	r3, #2
 80059ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80059d0:	697b      	ldr	r3, [r7, #20]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ea:	f3ef 8305 	mrs	r3, IPSR
 80059ee:	613b      	str	r3, [r7, #16]
  return(result);
 80059f0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15f      	bne.n	8005ab6 <osMessageQueueNew+0xdc>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d05c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d059      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
    mem = -1;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d029      	beq.n	8005a62 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d012      	beq.n	8005a3c <osMessageQueueNew+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b4f      	cmp	r3, #79	; 0x4f
 8005a1c:	d90e      	bls.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <osMessageQueueNew+0x62>
        mem = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e014      	b.n	8005a66 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d110      	bne.n	8005a66 <osMessageQueueNew+0x8c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10c      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <osMessageQueueNew+0x8c>
          mem = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e001      	b.n	8005a66 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10b      	bne.n	8005a84 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2100      	movs	r1, #0
 8005a76:	9100      	str	r1, [sp, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f9d0 	bl	8005e20 <xQueueGenericCreateStatic>
 8005a80:	61f8      	str	r0, [r7, #28]
 8005a82:	e008      	b.n	8005a96 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa3e 	bl	8005f10 <xQueueGenericCreate>
 8005a94:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <osMessageQueueNew+0xd0>
        name = attr->name;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e001      	b.n	8005aae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 ffef 	bl	8006a94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005ab6:	69fb      	ldr	r3, [r7, #28]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad8:	f3ef 8305 	mrs	r3, IPSR
 8005adc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d028      	beq.n	8005b36 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <osMessageQueuePut+0x36>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005af6:	f06f 0303 	mvn.w	r3, #3
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e038      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b02:	f107 0210 	add.w	r2, r7, #16
 8005b06:	2300      	movs	r3, #0
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	69b8      	ldr	r0, [r7, #24]
 8005b0c:	f000 fc12 	bl	8006334 <xQueueGenericSendFromISR>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e028      	b.n	8005b70 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d025      	beq.n	8005b70 <osMessageQueuePut+0xb0>
 8005b24:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <osMessageQueuePut+0xbc>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	e01c      	b.n	8005b70 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <osMessageQueuePut+0x82>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b42:	f06f 0303 	mvn.w	r3, #3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e012      	b.n	8005b70 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	69b8      	ldr	r0, [r7, #24]
 8005b52:	f000 faf1 	bl	8006138 <xQueueGenericSend>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d009      	beq.n	8005b70 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b62:	f06f 0301 	mvn.w	r3, #1
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	e002      	b.n	8005b70 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b6a:	f06f 0302 	mvn.w	r3, #2
 8005b6e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b70:	69fb      	ldr	r3, [r7, #28]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3720      	adds	r7, #32
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <vApplicationGetIdleTaskMemory+0x2c>)
 8005b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4a06      	ldr	r2, [pc, #24]	; (8005bb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	200003e8 	.word	0x200003e8
 8005bb0:	20000490 	.word	0x20000490

08005bb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005bc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a06      	ldr	r2, [pc, #24]	; (8005be4 <vApplicationGetTimerTaskMemory+0x30>)
 8005bca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20000890 	.word	0x20000890
 8005be4:	20000938 	.word	0x20000938

08005be8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f103 0208 	add.w	r2, r3, #8
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005c00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f103 0208 	add.w	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 0208 	add.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	601a      	str	r2, [r3, #0]
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d103      	bne.n	8005caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e00c      	b.n	8005cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3308      	adds	r3, #8
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e002      	b.n	8005cb8 <vListInsert+0x2e>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d2f6      	bcs.n	8005cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	601a      	str	r2, [r3, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6892      	ldr	r2, [r2, #8]
 8005d12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6852      	ldr	r2, [r2, #4]
 8005d1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d103      	bne.n	8005d30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	1e5a      	subs	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d7a:	f002 fb9b 	bl	80084b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	3b01      	subs	r3, #1
 8005dac:	68f9      	ldr	r1, [r7, #12]
 8005dae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005db0:	fb01 f303 	mul.w	r3, r1, r3
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	22ff      	movs	r2, #255	; 0xff
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d114      	bne.n	8005dfa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01a      	beq.n	8005e0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3310      	adds	r3, #16
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fb3d 	bl	800745c <xTaskRemoveFromEventList>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <xQueueGenericReset+0xcc>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	e009      	b.n	8005e0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3310      	adds	r3, #16
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fef2 	bl	8005be8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3324      	adds	r3, #36	; 0x24
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff feed 	bl	8005be8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f002 fb81 	bl	8008514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e12:	2301      	movs	r3, #1
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08e      	sub	sp, #56	; 0x38
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <xQueueGenericCreateStatic+0x52>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <xQueueGenericCreateStatic+0x56>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <xQueueGenericCreateStatic+0x58>
 8005e76:	2300      	movs	r3, #0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10a      	bne.n	8005e92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	623b      	str	r3, [r7, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <xQueueGenericCreateStatic+0x7e>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <xQueueGenericCreateStatic+0x82>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xQueueGenericCreateStatic+0x84>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	61fb      	str	r3, [r7, #28]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ebe:	2350      	movs	r3, #80	; 0x50
 8005ec0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b50      	cmp	r3, #80	; 0x50
 8005ec6:	d00a      	beq.n	8005ede <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	61bb      	str	r3, [r7, #24]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ede:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ef2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4613      	mov	r3, r2
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f83f 	bl	8005f84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3730      	adds	r7, #48	; 0x30
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	613b      	str	r3, [r7, #16]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3350      	adds	r3, #80	; 0x50
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 fbd5 	bl	80086f8 <pvPortMalloc>
 8005f4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d011      	beq.n	8005f7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3350      	adds	r3, #80	; 0x50
 8005f5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f68:	79fa      	ldrb	r2, [r7, #7]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f805 	bl	8005f84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d103      	bne.n	8005fa0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	69b8      	ldr	r0, [r7, #24]
 8005fb6:	f7ff fecb 	bl	8005d50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	2100      	movs	r1, #0
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8a1 	bl	8006138 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	4603      	mov	r3, r0
 8006006:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006008:	2301      	movs	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	461a      	mov	r2, r3
 8006014:	6939      	ldr	r1, [r7, #16]
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f7ff ff7a 	bl	8005f10 <xQueueGenericCreate>
 800601c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff ffd3 	bl	8005fca <prvInitialiseMutex>

		return xNewQueue;
 8006024:	68fb      	ldr	r3, [r7, #12]
	}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800602e:	b580      	push	{r7, lr}
 8006030:	b088      	sub	sp, #32
 8006032:	af02      	add	r7, sp, #8
 8006034:	4603      	mov	r3, r0
 8006036:	6039      	str	r1, [r7, #0]
 8006038:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800603a:	2301      	movs	r3, #1
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2200      	movs	r2, #0
 800604a:	6939      	ldr	r1, [r7, #16]
 800604c:	6978      	ldr	r0, [r7, #20]
 800604e:	f7ff fee7 	bl	8005e20 <xQueueGenericCreateStatic>
 8006052:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7ff ffb8 	bl	8005fca <prvInitialiseMutex>

		return xNewQueue;
 800605a:	68fb      	ldr	r3, [r7, #12]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	689c      	ldr	r4, [r3, #8]
 8006090:	f001 fba6 	bl	80077e0 <xTaskGetCurrentTaskHandle>
 8006094:	4603      	mov	r3, r0
 8006096:	429c      	cmp	r4, r3
 8006098:	d111      	bne.n	80060be <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	1e5a      	subs	r2, r3, #1
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80060ac:	2300      	movs	r3, #0
 80060ae:	2200      	movs	r2, #0
 80060b0:	2100      	movs	r1, #0
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f000 f840 	bl	8006138 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80060b8:	2301      	movs	r3, #1
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e001      	b.n	80060c2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80060c2:	697b      	ldr	r3, [r7, #20]
	}
 80060c4:	4618      	mov	r0, r3
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd90      	pop	{r4, r7, pc}

080060cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	689c      	ldr	r4, [r3, #8]
 80060fa:	f001 fb71 	bl	80077e0 <xTaskGetCurrentTaskHandle>
 80060fe:	4603      	mov	r3, r0
 8006100:	429c      	cmp	r4, r3
 8006102:	d107      	bne.n	8006114 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800610e:	2301      	movs	r3, #1
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e00c      	b.n	800612e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6938      	ldr	r0, [r7, #16]
 8006118:	f000 fa88 	bl	800662c <xQueueSemaphoreTake>
 800611c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	371c      	adds	r7, #28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd90      	pop	{r4, r7, pc}

08006138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08e      	sub	sp, #56	; 0x38
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xQueueGenericSend+0x32>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d103      	bne.n	8006178 <xQueueGenericSend+0x40>
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <xQueueGenericSend+0x44>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <xQueueGenericSend+0x46>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <xQueueGenericSend+0x60>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d103      	bne.n	80061a6 <xQueueGenericSend+0x6e>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <xQueueGenericSend+0x72>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <xQueueGenericSend+0x74>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	623b      	str	r3, [r7, #32]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061c6:	f001 fb1b 	bl	8007800 <xTaskGetSchedulerState>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <xQueueGenericSend+0x9e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <xQueueGenericSend+0xa2>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e000      	b.n	80061dc <xQueueGenericSend+0xa4>
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	61fb      	str	r3, [r7, #28]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061f6:	f002 f95d 	bl	80084b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <xQueueGenericSend+0xd4>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d129      	bne.n	8006260 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006212:	f000 fb2f 	bl	8006874 <prvCopyDataToQueue>
 8006216:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d010      	beq.n	8006242 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f919 	bl	800745c <xTaskRemoveFromEventList>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006230:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <xQueueGenericSend+0x1f8>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	e00a      	b.n	8006258 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006248:	4b39      	ldr	r3, [pc, #228]	; (8006330 <xQueueGenericSend+0x1f8>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006258:	f002 f95c 	bl	8008514 <vPortExitCritical>
				return pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	e063      	b.n	8006328 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006266:	f002 f955 	bl	8008514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800626a:	2300      	movs	r3, #0
 800626c:	e05c      	b.n	8006328 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800626e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006274:	f107 0314 	add.w	r3, r7, #20
 8006278:	4618      	mov	r0, r3
 800627a:	f001 f953 	bl	8007524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800627e:	2301      	movs	r3, #1
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006282:	f002 f947 	bl	8008514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006286:	f000 febf 	bl	8007008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800628a:	f002 f913 	bl	80084b4 <vPortEnterCritical>
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006294:	b25b      	sxtb	r3, r3
 8006296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629a:	d103      	bne.n	80062a4 <xQueueGenericSend+0x16c>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062aa:	b25b      	sxtb	r3, r3
 80062ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b0:	d103      	bne.n	80062ba <xQueueGenericSend+0x182>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ba:	f002 f92b 	bl	8008514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062be:	1d3a      	adds	r2, r7, #4
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 f942 	bl	8007550 <xTaskCheckForTimeOut>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d124      	bne.n	800631c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062d4:	f000 fbc6 	bl	8006a64 <prvIsQueueFull>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d018      	beq.n	8006310 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	3310      	adds	r3, #16
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	4611      	mov	r1, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 f868 	bl	80073bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ee:	f000 fb51 	bl	8006994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062f2:	f000 fe97 	bl	8007024 <xTaskResumeAll>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f47f af7c 	bne.w	80061f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <xQueueGenericSend+0x1f8>)
 8006300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	e772      	b.n	80061f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006312:	f000 fb3f 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006316:	f000 fe85 	bl	8007024 <xTaskResumeAll>
 800631a:	e76c      	b.n	80061f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800631c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631e:	f000 fb39 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006322:	f000 fe7f 	bl	8007024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006326:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006328:	4618      	mov	r0, r3
 800632a:	3738      	adds	r7, #56	; 0x38
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b090      	sub	sp, #64	; 0x40
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d103      	bne.n	8006370 <xQueueGenericSendFromISR+0x3c>
 8006368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <xQueueGenericSendFromISR+0x40>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <xQueueGenericSendFromISR+0x42>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d103      	bne.n	800639e <xQueueGenericSendFromISR+0x6a>
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <xQueueGenericSendFromISR+0x6e>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <xQueueGenericSendFromISR+0x70>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063be:	f002 f95b 	bl	8008678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063c2:	f3ef 8211 	mrs	r2, BASEPRI
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	61fa      	str	r2, [r7, #28]
 80063d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <xQueueGenericSendFromISR+0xbc>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d12f      	bne.n	8006450 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006406:	f000 fa35 	bl	8006874 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800640a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d112      	bne.n	800643a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2b00      	cmp	r3, #0
 800641a:	d016      	beq.n	800644a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641e:	3324      	adds	r3, #36	; 0x24
 8006420:	4618      	mov	r0, r3
 8006422:	f001 f81b 	bl	800745c <xTaskRemoveFromEventList>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e007      	b.n	800644a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800643a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800643e:	3301      	adds	r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	b25a      	sxtb	r2, r3
 8006444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800644a:	2301      	movs	r3, #1
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800644e:	e001      	b.n	8006454 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006450:	2300      	movs	r3, #0
 8006452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006456:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800645e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006462:	4618      	mov	r0, r3
 8006464:	3740      	adds	r7, #64	; 0x40
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <xQueueReceive+0x30>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	623b      	str	r3, [r7, #32]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <xQueueReceive+0x3e>
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <xQueueReceive+0x42>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <xQueueReceive+0x44>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <xQueueReceive+0x5e>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	61fb      	str	r3, [r7, #28]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ca:	f001 f999 	bl	8007800 <xTaskGetSchedulerState>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <xQueueReceive+0x6e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xQueueReceive+0x72>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueReceive+0x74>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueReceive+0x8e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	61bb      	str	r3, [r7, #24]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064fa:	f001 ffdb 	bl	80084b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01f      	beq.n	800654a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f000 fa1b 	bl	8006948 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	3310      	adds	r3, #16
 8006526:	4618      	mov	r0, r3
 8006528:	f000 ff98 	bl	800745c <xTaskRemoveFromEventList>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006532:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <xQueueReceive+0x1bc>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006542:	f001 ffe7 	bl	8008514 <vPortExitCritical>
				return pdPASS;
 8006546:	2301      	movs	r3, #1
 8006548:	e069      	b.n	800661e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006550:	f001 ffe0 	bl	8008514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006554:	2300      	movs	r3, #0
 8006556:	e062      	b.n	800661e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800655e:	f107 0310 	add.w	r3, r7, #16
 8006562:	4618      	mov	r0, r3
 8006564:	f000 ffde 	bl	8007524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800656c:	f001 ffd2 	bl	8008514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006570:	f000 fd4a 	bl	8007008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006574:	f001 ff9e 	bl	80084b4 <vPortEnterCritical>
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d103      	bne.n	800658e <xQueueReceive+0x122>
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006594:	b25b      	sxtb	r3, r3
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0x138>
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065a4:	f001 ffb6 	bl	8008514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065a8:	1d3a      	adds	r2, r7, #4
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 ffcd 	bl	8007550 <xTaskCheckForTimeOut>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d123      	bne.n	8006604 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065be:	f000 fa3b 	bl	8006a38 <prvIsQueueEmpty>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	3324      	adds	r3, #36	; 0x24
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fef3 	bl	80073bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	f000 f9dc 	bl	8006994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065dc:	f000 fd22 	bl	8007024 <xTaskResumeAll>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d189      	bne.n	80064fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <xQueueReceive+0x1bc>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e780      	b.n	80064fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fa:	f000 f9cb 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065fe:	f000 fd11 	bl	8007024 <xTaskResumeAll>
 8006602:	e77a      	b.n	80064fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006606:	f000 f9c5 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800660a:	f000 fd0b 	bl	8007024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 fa12 	bl	8006a38 <prvIsQueueEmpty>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	f43f af6f 	beq.w	80064fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800661c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800661e:	4618      	mov	r0, r3
 8006620:	3730      	adds	r7, #48	; 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61fb      	str	r3, [r7, #28]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800667c:	f001 f8c0 	bl	8007800 <xTaskGetSchedulerState>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d102      	bne.n	800668c <xQueueSemaphoreTake+0x60>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <xQueueSemaphoreTake+0x64>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <xQueueSemaphoreTake+0x66>
 8006690:	2300      	movs	r3, #0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	61bb      	str	r3, [r7, #24]
}
 80066a8:	bf00      	nop
 80066aa:	e7fe      	b.n	80066aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ac:	f001 ff02 	bl	80084b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d024      	beq.n	8006706 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	1e5a      	subs	r2, r3, #1
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80066cc:	f001 fa0e 	bl	8007aec <pvTaskIncrementMutexHeldCount>
 80066d0:	4602      	mov	r2, r0
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00f      	beq.n	80066fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	3310      	adds	r3, #16
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 feba 	bl	800745c <xTaskRemoveFromEventList>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066ee:	4b54      	ldr	r3, [pc, #336]	; (8006840 <xQueueSemaphoreTake+0x214>)
 80066f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066fe:	f001 ff09 	bl	8008514 <vPortExitCritical>
				return pdPASS;
 8006702:	2301      	movs	r3, #1
 8006704:	e097      	b.n	8006836 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d111      	bne.n	8006730 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	617b      	str	r3, [r7, #20]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006728:	f001 fef4 	bl	8008514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800672c:	2300      	movs	r3, #0
 800672e:	e082      	b.n	8006836 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fef2 	bl	8007524 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006744:	f001 fee6 	bl	8008514 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006748:	f000 fc5e 	bl	8007008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800674c:	f001 feb2 	bl	80084b4 <vPortEnterCritical>
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006756:	b25b      	sxtb	r3, r3
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d103      	bne.n	8006766 <xQueueSemaphoreTake+0x13a>
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800676c:	b25b      	sxtb	r3, r3
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d103      	bne.n	800677c <xQueueSemaphoreTake+0x150>
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800677c:	f001 feca 	bl	8008514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006780:	463a      	mov	r2, r7
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fee1 	bl	8007550 <xTaskCheckForTimeOut>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d132      	bne.n	80067fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006796:	f000 f94f 	bl	8006a38 <prvIsQueueEmpty>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d026      	beq.n	80067ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80067a8:	f001 fe84 	bl	80084b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f843 	bl	800783c <xTaskPriorityInherit>
 80067b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80067b8:	f001 feac 	bl	8008514 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	3324      	adds	r3, #36	; 0x24
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fdf9 	bl	80073bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067cc:	f000 f8e2 	bl	8006994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067d0:	f000 fc28 	bl	8007024 <xTaskResumeAll>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f47f af68 	bne.w	80066ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80067dc:	4b18      	ldr	r3, [pc, #96]	; (8006840 <xQueueSemaphoreTake+0x214>)
 80067de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	e75e      	b.n	80066ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80067ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067f0:	f000 f8d0 	bl	8006994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f4:	f000 fc16 	bl	8007024 <xTaskResumeAll>
 80067f8:	e758      	b.n	80066ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067fc:	f000 f8ca 	bl	8006994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006800:	f000 fc10 	bl	8007024 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006806:	f000 f917 	bl	8006a38 <prvIsQueueEmpty>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	f43f af4d 	beq.w	80066ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006818:	f001 fe4c 	bl	80084b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800681c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800681e:	f000 f811 	bl	8006844 <prvGetDisinheritPriorityAfterTimeout>
 8006822:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f8dc 	bl	80079e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006830:	f001 fe70 	bl	8008514 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006836:	4618      	mov	r0, r3
 8006838:	3738      	adds	r7, #56	; 0x38
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	e000ed04 	.word	0xe000ed04

08006844 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	e001      	b.n	8006866 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006866:	68fb      	ldr	r3, [r7, #12]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10d      	bne.n	80068ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d14d      	bne.n	8006936 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f834 	bl	800790c <xTaskPriorityDisinherit>
 80068a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	609a      	str	r2, [r3, #8]
 80068ac:	e043      	b.n	8006936 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d119      	bne.n	80068e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6858      	ldr	r0, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	461a      	mov	r2, r3
 80068be:	68b9      	ldr	r1, [r7, #8]
 80068c0:	f004 f96d 	bl	800ab9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	441a      	add	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d32b      	bcc.n	8006936 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	e026      	b.n	8006936 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68d8      	ldr	r0, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	461a      	mov	r2, r3
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	f004 f953 	bl	800ab9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	425b      	negs	r3, r3
 8006902:	441a      	add	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d207      	bcs.n	8006924 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	425b      	negs	r3, r3
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d105      	bne.n	8006936 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	3b01      	subs	r3, #1
 8006934:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800693e:	697b      	ldr	r3, [r7, #20]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d018      	beq.n	800698c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	441a      	add	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	429a      	cmp	r2, r3
 8006972:	d303      	bcc.n	800697c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68d9      	ldr	r1, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	461a      	mov	r2, r3
 8006986:	6838      	ldr	r0, [r7, #0]
 8006988:	f004 f909 	bl	800ab9e <memcpy>
	}
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800699c:	f001 fd8a 	bl	80084b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a8:	e011      	b.n	80069ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d012      	beq.n	80069d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	3324      	adds	r3, #36	; 0x24
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fd50 	bl	800745c <xTaskRemoveFromEventList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069c2:	f000 fe27 	bl	8007614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dce9      	bgt.n	80069aa <prvUnlockQueue+0x16>
 80069d6:	e000      	b.n	80069da <prvUnlockQueue+0x46>
					break;
 80069d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069e2:	f001 fd97 	bl	8008514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069e6:	f001 fd65 	bl	80084b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069f2:	e011      	b.n	8006a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d012      	beq.n	8006a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3310      	adds	r3, #16
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fd2b 	bl	800745c <xTaskRemoveFromEventList>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a0c:	f000 fe02 	bl	8007614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dce9      	bgt.n	80069f4 <prvUnlockQueue+0x60>
 8006a20:	e000      	b.n	8006a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	22ff      	movs	r2, #255	; 0xff
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a2c:	f001 fd72 	bl	8008514 <vPortExitCritical>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a40:	f001 fd38 	bl	80084b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e001      	b.n	8006a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 fd5d 	bl	8008514 <vPortExitCritical>

	return xReturn;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a6c:	f001 fd22 	bl	80084b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d102      	bne.n	8006a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e001      	b.n	8006a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a86:	f001 fd45 	bl	8008514 <vPortExitCritical>

	return xReturn;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e014      	b.n	8006ace <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006aa4:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <vQueueAddToRegistry+0x50>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10b      	bne.n	8006ac8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ab0:	490c      	ldr	r1, [pc, #48]	; (8006ae4 <vQueueAddToRegistry+0x50>)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006aba:	4a0a      	ldr	r2, [pc, #40]	; (8006ae4 <vQueueAddToRegistry+0x50>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ac6:	e006      	b.n	8006ad6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b07      	cmp	r3, #7
 8006ad2:	d9e7      	bls.n	8006aa4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20001138 	.word	0x20001138

08006ae8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006af8:	f001 fcdc 	bl	80084b4 <vPortEnterCritical>
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b02:	b25b      	sxtb	r3, r3
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d103      	bne.n	8006b12 <vQueueWaitForMessageRestricted+0x2a>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1e:	d103      	bne.n	8006b28 <vQueueWaitForMessageRestricted+0x40>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b28:	f001 fcf4 	bl	8008514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d106      	bne.n	8006b42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3324      	adds	r3, #36	; 0x24
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fc61 	bl	8007404 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b42:	6978      	ldr	r0, [r7, #20]
 8006b44:	f7ff ff26 	bl	8006994 <prvUnlockQueue>
	}
 8006b48:	bf00      	nop
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	; 0x38
 8006b54:	af04      	add	r7, sp, #16
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	623b      	str	r3, [r7, #32]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61fb      	str	r3, [r7, #28]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b96:	23a8      	movs	r3, #168	; 0xa8
 8006b98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2ba8      	cmp	r3, #168	; 0xa8
 8006b9e:	d00a      	beq.n	8006bb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	61bb      	str	r3, [r7, #24]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01e      	beq.n	8006bfc <xTaskCreateStatic+0xac>
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01b      	beq.n	8006bfc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	9302      	str	r3, [sp, #8]
 8006bde:	f107 0314 	add.w	r3, r7, #20
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f850 	bl	8006c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bf6:	f000 f8f3 	bl	8006de0 <prvAddNewTaskToReadyList>
 8006bfa:	e001      	b.n	8006c00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c00:	697b      	ldr	r3, [r7, #20]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b08c      	sub	sp, #48	; 0x30
 8006c0e:	af04      	add	r7, sp, #16
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	603b      	str	r3, [r7, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f001 fd6a 	bl	80086f8 <pvPortMalloc>
 8006c24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00e      	beq.n	8006c4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c2c:	20a8      	movs	r0, #168	; 0xa8
 8006c2e:	f001 fd63 	bl	80086f8 <pvPortMalloc>
 8006c32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c40:	e005      	b.n	8006c4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f001 fe24 	bl	8008890 <vPortFree>
 8006c48:	e001      	b.n	8006c4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d017      	beq.n	8006c84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9303      	str	r3, [sp, #12]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	9302      	str	r3, [sp, #8]
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f80e 	bl	8006c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c78:	69f8      	ldr	r0, [r7, #28]
 8006c7a:	f000 f8b1 	bl	8006de0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	e002      	b.n	8006c8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	461a      	mov	r2, r3
 8006cac:	21a5      	movs	r1, #165	; 0xa5
 8006cae:	f003 fe22 	bl	800a8f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <prvInitialiseNewTask+0x58>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	617b      	str	r3, [r7, #20]
}
 8006ce8:	bf00      	nop
 8006cea:	e7fe      	b.n	8006cea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01f      	beq.n	8006d32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e012      	b.n	8006d1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	7819      	ldrb	r1, [r3, #0]
 8006d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	3334      	adds	r3, #52	; 0x34
 8006d08:	460a      	mov	r2, r1
 8006d0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	4413      	add	r3, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b0f      	cmp	r3, #15
 8006d22:	d9e9      	bls.n	8006cf8 <prvInitialiseNewTask+0x64>
 8006d24:	e000      	b.n	8006d28 <prvInitialiseNewTask+0x94>
			{
				break;
 8006d26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d30:	e003      	b.n	8006d3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	2b37      	cmp	r3, #55	; 0x37
 8006d3e:	d901      	bls.n	8006d44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d40:	2337      	movs	r3, #55	; 0x37
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	2200      	movs	r2, #0
 8006d54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	3304      	adds	r3, #4
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe ff64 	bl	8005c28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	3318      	adds	r3, #24
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe ff5f 	bl	8005c28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	3354      	adds	r3, #84	; 0x54
 8006d94:	224c      	movs	r2, #76	; 0x4c
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f003 fdac 	bl	800a8f6 <memset>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	4a0c      	ldr	r2, [pc, #48]	; (8006dd4 <prvInitialiseNewTask+0x140>)
 8006da2:	659a      	str	r2, [r3, #88]	; 0x58
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	4a0c      	ldr	r2, [pc, #48]	; (8006dd8 <prvInitialiseNewTask+0x144>)
 8006da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	4a0b      	ldr	r2, [pc, #44]	; (8006ddc <prvInitialiseNewTask+0x148>)
 8006dae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	69b8      	ldr	r0, [r7, #24]
 8006db6:	f001 fa4f 	bl	8008258 <pxPortInitialiseStack>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dcc:	bf00      	nop
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20003afc 	.word	0x20003afc
 8006dd8:	20003b64 	.word	0x20003b64
 8006ddc:	20003bcc 	.word	0x20003bcc

08006de0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006de8:	f001 fb64 	bl	80084b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dec:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <prvAddNewTaskToReadyList+0xc4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a2c      	ldr	r2, [pc, #176]	; (8006ea4 <prvAddNewTaskToReadyList+0xc4>)
 8006df4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006df6:	4b2c      	ldr	r3, [pc, #176]	; (8006ea8 <prvAddNewTaskToReadyList+0xc8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006dfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <prvAddNewTaskToReadyList+0xc8>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e04:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <prvAddNewTaskToReadyList+0xc4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d110      	bne.n	8006e2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e0c:	f000 fc26 	bl	800765c <prvInitialiseTaskLists>
 8006e10:	e00d      	b.n	8006e2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <prvAddNewTaskToReadyList+0xcc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <prvAddNewTaskToReadyList+0xc8>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d802      	bhi.n	8006e2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e28:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <prvAddNewTaskToReadyList+0xc8>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e2e:	4b20      	ldr	r3, [pc, #128]	; (8006eb0 <prvAddNewTaskToReadyList+0xd0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <prvAddNewTaskToReadyList+0xd0>)
 8006e36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e38:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <prvAddNewTaskToReadyList+0xd0>)
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <prvAddNewTaskToReadyList+0xd4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d903      	bls.n	8006e54 <prvAddNewTaskToReadyList+0x74>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <prvAddNewTaskToReadyList+0xd4>)
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <prvAddNewTaskToReadyList+0xd8>)
 8006e62:	441a      	add	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7fe fee9 	bl	8005c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e70:	f001 fb50 	bl	8008514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e74:	4b0d      	ldr	r3, [pc, #52]	; (8006eac <prvAddNewTaskToReadyList+0xcc>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00e      	beq.n	8006e9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <prvAddNewTaskToReadyList+0xc8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d207      	bcs.n	8006e9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <prvAddNewTaskToReadyList+0xdc>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000164c 	.word	0x2000164c
 8006ea8:	20001178 	.word	0x20001178
 8006eac:	20001658 	.word	0x20001658
 8006eb0:	20001668 	.word	0x20001668
 8006eb4:	20001654 	.word	0x20001654
 8006eb8:	2000117c 	.word	0x2000117c
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d017      	beq.n	8006f02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ed2:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <vTaskDelay+0x60>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <vTaskDelay+0x30>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60bb      	str	r3, [r7, #8]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ef0:	f000 f88a 	bl	8007008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fe0c 	bl	8007b14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006efc:	f000 f892 	bl	8007024 <xTaskResumeAll>
 8006f00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <vTaskDelay+0x64>)
 8006f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20001674 	.word	0x20001674
 8006f24:	e000ed04 	.word	0xe000ed04

08006f28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f36:	463a      	mov	r2, r7
 8006f38:	1d39      	adds	r1, r7, #4
 8006f3a:	f107 0308 	add.w	r3, r7, #8
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fe1e 	bl	8005b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	9202      	str	r2, [sp, #8]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	460a      	mov	r2, r1
 8006f56:	4924      	ldr	r1, [pc, #144]	; (8006fe8 <vTaskStartScheduler+0xc0>)
 8006f58:	4824      	ldr	r0, [pc, #144]	; (8006fec <vTaskStartScheduler+0xc4>)
 8006f5a:	f7ff fdf9 	bl	8006b50 <xTaskCreateStatic>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	4a23      	ldr	r2, [pc, #140]	; (8006ff0 <vTaskStartScheduler+0xc8>)
 8006f62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <vTaskStartScheduler+0xc8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	e001      	b.n	8006f76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d102      	bne.n	8006f82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f7c:	f000 fe1e 	bl	8007bbc <xTimerCreateTimerTask>
 8006f80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d11b      	bne.n	8006fc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	613b      	str	r3, [r7, #16]
}
 8006f9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f9c:	4b15      	ldr	r3, [pc, #84]	; (8006ff4 <vTaskStartScheduler+0xcc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3354      	adds	r3, #84	; 0x54
 8006fa2:	4a15      	ldr	r2, [pc, #84]	; (8006ff8 <vTaskStartScheduler+0xd0>)
 8006fa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <vTaskStartScheduler+0xd4>)
 8006fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <vTaskStartScheduler+0xd8>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <vTaskStartScheduler+0xdc>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fba:	f001 f9d9 	bl	8008370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fbe:	e00e      	b.n	8006fde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d10a      	bne.n	8006fde <vTaskStartScheduler+0xb6>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	60fb      	str	r3, [r7, #12]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <vTaskStartScheduler+0xb4>
}
 8006fde:	bf00      	nop
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	0800d60c 	.word	0x0800d60c
 8006fec:	0800762d 	.word	0x0800762d
 8006ff0:	20001670 	.word	0x20001670
 8006ff4:	20001178 	.word	0x20001178
 8006ff8:	200001d4 	.word	0x200001d4
 8006ffc:	2000166c 	.word	0x2000166c
 8007000:	20001658 	.word	0x20001658
 8007004:	20001650 	.word	0x20001650

08007008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <vTaskSuspendAll+0x18>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	3301      	adds	r3, #1
 8007012:	4a03      	ldr	r2, [pc, #12]	; (8007020 <vTaskSuspendAll+0x18>)
 8007014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007016:	bf00      	nop
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20001674 	.word	0x20001674

08007024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007032:	4b42      	ldr	r3, [pc, #264]	; (800713c <xTaskResumeAll+0x118>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <xTaskResumeAll+0x2c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	603b      	str	r3, [r7, #0]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007050:	f001 fa30 	bl	80084b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <xTaskResumeAll+0x118>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3b01      	subs	r3, #1
 800705a:	4a38      	ldr	r2, [pc, #224]	; (800713c <xTaskResumeAll+0x118>)
 800705c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <xTaskResumeAll+0x118>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d162      	bne.n	800712c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007066:	4b36      	ldr	r3, [pc, #216]	; (8007140 <xTaskResumeAll+0x11c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d05e      	beq.n	800712c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800706e:	e02f      	b.n	80070d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007070:	4b34      	ldr	r3, [pc, #208]	; (8007144 <xTaskResumeAll+0x120>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3318      	adds	r3, #24
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fe3d 	bl	8005cfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fe38 	bl	8005cfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <xTaskResumeAll+0x124>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d903      	bls.n	80070a0 <xTaskResumeAll+0x7c>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	4a2a      	ldr	r2, [pc, #168]	; (8007148 <xTaskResumeAll+0x124>)
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4a27      	ldr	r2, [pc, #156]	; (800714c <xTaskResumeAll+0x128>)
 80070ae:	441a      	add	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f7fe fdc3 	bl	8005c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4b23      	ldr	r3, [pc, #140]	; (8007150 <xTaskResumeAll+0x12c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <xTaskResumeAll+0x130>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d0:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <xTaskResumeAll+0x120>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1cb      	bne.n	8007070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070de:	f000 fb5f 	bl	80077a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070e2:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <xTaskResumeAll+0x134>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070ee:	f000 f847 	bl	8007180 <xTaskIncrementTick>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80070f8:	4b16      	ldr	r3, [pc, #88]	; (8007154 <xTaskResumeAll+0x130>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3b01      	subs	r3, #1
 8007102:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f1      	bne.n	80070ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800710a:	4b13      	ldr	r3, [pc, #76]	; (8007158 <xTaskResumeAll+0x134>)
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007110:	4b10      	ldr	r3, [pc, #64]	; (8007154 <xTaskResumeAll+0x130>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d009      	beq.n	800712c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007118:	2301      	movs	r3, #1
 800711a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <xTaskResumeAll+0x138>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800712c:	f001 f9f2 	bl	8008514 <vPortExitCritical>

	return xAlreadyYielded;
 8007130:	68bb      	ldr	r3, [r7, #8]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20001674 	.word	0x20001674
 8007140:	2000164c 	.word	0x2000164c
 8007144:	2000160c 	.word	0x2000160c
 8007148:	20001654 	.word	0x20001654
 800714c:	2000117c 	.word	0x2000117c
 8007150:	20001178 	.word	0x20001178
 8007154:	20001660 	.word	0x20001660
 8007158:	2000165c 	.word	0x2000165c
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <xTaskGetTickCount+0x1c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800716c:	687b      	ldr	r3, [r7, #4]
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20001650 	.word	0x20001650

08007180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800718a:	4b4f      	ldr	r3, [pc, #316]	; (80072c8 <xTaskIncrementTick+0x148>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 808f 	bne.w	80072b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007194:	4b4d      	ldr	r3, [pc, #308]	; (80072cc <xTaskIncrementTick+0x14c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800719c:	4a4b      	ldr	r2, [pc, #300]	; (80072cc <xTaskIncrementTick+0x14c>)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d120      	bne.n	80071ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071a8:	4b49      	ldr	r3, [pc, #292]	; (80072d0 <xTaskIncrementTick+0x150>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	603b      	str	r3, [r7, #0]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <xTaskIncrementTick+0x46>
 80071c8:	4b41      	ldr	r3, [pc, #260]	; (80072d0 <xTaskIncrementTick+0x150>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	4b41      	ldr	r3, [pc, #260]	; (80072d4 <xTaskIncrementTick+0x154>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a3f      	ldr	r2, [pc, #252]	; (80072d0 <xTaskIncrementTick+0x150>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	4a3f      	ldr	r2, [pc, #252]	; (80072d4 <xTaskIncrementTick+0x154>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <xTaskIncrementTick+0x158>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3301      	adds	r3, #1
 80071e2:	4a3d      	ldr	r2, [pc, #244]	; (80072d8 <xTaskIncrementTick+0x158>)
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	f000 fadb 	bl	80077a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ea:	4b3c      	ldr	r3, [pc, #240]	; (80072dc <xTaskIncrementTick+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d349      	bcc.n	8007288 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <xTaskIncrementTick+0x150>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d104      	bne.n	8007208 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fe:	4b37      	ldr	r3, [pc, #220]	; (80072dc <xTaskIncrementTick+0x15c>)
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	601a      	str	r2, [r3, #0]
					break;
 8007206:	e03f      	b.n	8007288 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007208:	4b31      	ldr	r3, [pc, #196]	; (80072d0 <xTaskIncrementTick+0x150>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d203      	bcs.n	8007228 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007220:	4a2e      	ldr	r2, [pc, #184]	; (80072dc <xTaskIncrementTick+0x15c>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007226:	e02f      	b.n	8007288 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	3304      	adds	r3, #4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fd65 	bl	8005cfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3318      	adds	r3, #24
 800723e:	4618      	mov	r0, r3
 8007240:	f7fe fd5c 	bl	8005cfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007248:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <xTaskIncrementTick+0x160>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d903      	bls.n	8007258 <xTaskIncrementTick+0xd8>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	4a22      	ldr	r2, [pc, #136]	; (80072e0 <xTaskIncrementTick+0x160>)
 8007256:	6013      	str	r3, [r2, #0]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <xTaskIncrementTick+0x164>)
 8007266:	441a      	add	r2, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	3304      	adds	r3, #4
 800726c:	4619      	mov	r1, r3
 800726e:	4610      	mov	r0, r2
 8007270:	f7fe fce7 	bl	8005c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007278:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <xTaskIncrementTick+0x168>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	429a      	cmp	r2, r3
 8007280:	d3b8      	bcc.n	80071f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007286:	e7b5      	b.n	80071f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007288:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <xTaskIncrementTick+0x168>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4915      	ldr	r1, [pc, #84]	; (80072e4 <xTaskIncrementTick+0x164>)
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d901      	bls.n	80072a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072a4:	4b11      	ldr	r3, [pc, #68]	; (80072ec <xTaskIncrementTick+0x16c>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e004      	b.n	80072bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072b2:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <xTaskIncrementTick+0x170>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	4a0d      	ldr	r2, [pc, #52]	; (80072f0 <xTaskIncrementTick+0x170>)
 80072ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072bc:	697b      	ldr	r3, [r7, #20]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20001674 	.word	0x20001674
 80072cc:	20001650 	.word	0x20001650
 80072d0:	20001604 	.word	0x20001604
 80072d4:	20001608 	.word	0x20001608
 80072d8:	20001664 	.word	0x20001664
 80072dc:	2000166c 	.word	0x2000166c
 80072e0:	20001654 	.word	0x20001654
 80072e4:	2000117c 	.word	0x2000117c
 80072e8:	20001178 	.word	0x20001178
 80072ec:	20001660 	.word	0x20001660
 80072f0:	2000165c 	.word	0x2000165c

080072f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072fa:	4b2a      	ldr	r3, [pc, #168]	; (80073a4 <vTaskSwitchContext+0xb0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <vTaskSwitchContext+0xb4>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007308:	e046      	b.n	8007398 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800730a:	4b27      	ldr	r3, [pc, #156]	; (80073a8 <vTaskSwitchContext+0xb4>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007310:	4b26      	ldr	r3, [pc, #152]	; (80073ac <vTaskSwitchContext+0xb8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e010      	b.n	800733a <vTaskSwitchContext+0x46>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <vTaskSwitchContext+0x40>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vTaskSwitchContext+0x3e>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3b01      	subs	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	491d      	ldr	r1, [pc, #116]	; (80073b0 <vTaskSwitchContext+0xbc>)
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0e4      	beq.n	8007318 <vTaskSwitchContext+0x24>
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a15      	ldr	r2, [pc, #84]	; (80073b0 <vTaskSwitchContext+0xbc>)
 800735a:	4413      	add	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	3308      	adds	r3, #8
 8007370:	429a      	cmp	r2, r3
 8007372:	d104      	bne.n	800737e <vTaskSwitchContext+0x8a>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	4a0b      	ldr	r2, [pc, #44]	; (80073b4 <vTaskSwitchContext+0xc0>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <vTaskSwitchContext+0xb8>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <vTaskSwitchContext+0xc0>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3354      	adds	r3, #84	; 0x54
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <vTaskSwitchContext+0xc4>)
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	20001674 	.word	0x20001674
 80073a8:	20001660 	.word	0x20001660
 80073ac:	20001654 	.word	0x20001654
 80073b0:	2000117c 	.word	0x2000117c
 80073b4:	20001178 	.word	0x20001178
 80073b8:	200001d4 	.word	0x200001d4

080073bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	f383 8811 	msr	BASEPRI, r3
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	60fb      	str	r3, [r7, #12]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073e2:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vTaskPlaceOnEventList+0x44>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3318      	adds	r3, #24
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe fc4d 	bl	8005c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073f0:	2101      	movs	r1, #1
 80073f2:	6838      	ldr	r0, [r7, #0]
 80073f4:	f000 fb8e 	bl	8007b14 <prvAddCurrentTaskToDelayedList>
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20001178 	.word	0x20001178

08007404 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10a      	bne.n	800742c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	617b      	str	r3, [r7, #20]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <vTaskPlaceOnEventListRestricted+0x54>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3318      	adds	r3, #24
 8007432:	4619      	mov	r1, r3
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7fe fc04 	bl	8005c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007440:	f04f 33ff 	mov.w	r3, #4294967295
 8007444:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	68b8      	ldr	r0, [r7, #8]
 800744a:	f000 fb63 	bl	8007b14 <prvAddCurrentTaskToDelayedList>
	}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20001178 	.word	0x20001178

0800745c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3318      	adds	r3, #24
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fc35 	bl	8005cfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007492:	4b1e      	ldr	r3, [pc, #120]	; (800750c <xTaskRemoveFromEventList+0xb0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d11d      	bne.n	80074d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fc2c 	bl	8005cfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a8:	4b19      	ldr	r3, [pc, #100]	; (8007510 <xTaskRemoveFromEventList+0xb4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d903      	bls.n	80074b8 <xTaskRemoveFromEventList+0x5c>
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	4a16      	ldr	r2, [pc, #88]	; (8007510 <xTaskRemoveFromEventList+0xb4>)
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4a13      	ldr	r2, [pc, #76]	; (8007514 <xTaskRemoveFromEventList+0xb8>)
 80074c6:	441a      	add	r2, r3
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f7fe fbb7 	bl	8005c42 <vListInsertEnd>
 80074d4:	e005      	b.n	80074e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	3318      	adds	r3, #24
 80074da:	4619      	mov	r1, r3
 80074dc:	480e      	ldr	r0, [pc, #56]	; (8007518 <xTaskRemoveFromEventList+0xbc>)
 80074de:	f7fe fbb0 	bl	8005c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <xTaskRemoveFromEventList+0xc0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d905      	bls.n	80074fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074f4:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <xTaskRemoveFromEventList+0xc4>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	e001      	b.n	8007500 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007500:	697b      	ldr	r3, [r7, #20]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20001674 	.word	0x20001674
 8007510:	20001654 	.word	0x20001654
 8007514:	2000117c 	.word	0x2000117c
 8007518:	2000160c 	.word	0x2000160c
 800751c:	20001178 	.word	0x20001178
 8007520:	20001660 	.word	0x20001660

08007524 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <vTaskInternalSetTimeOutState+0x24>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <vTaskInternalSetTimeOutState+0x28>)
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	605a      	str	r2, [r3, #4]
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20001664 	.word	0x20001664
 800754c:	20001650 	.word	0x20001650

08007550 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	613b      	str	r3, [r7, #16]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	60fb      	str	r3, [r7, #12]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007592:	f000 ff8f 	bl	80084b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007596:	4b1d      	ldr	r3, [pc, #116]	; (800760c <xTaskCheckForTimeOut+0xbc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d102      	bne.n	80075b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
 80075b4:	e023      	b.n	80075fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4b15      	ldr	r3, [pc, #84]	; (8007610 <xTaskCheckForTimeOut+0xc0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d007      	beq.n	80075d2 <xTaskCheckForTimeOut+0x82>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d302      	bcc.n	80075d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075cc:	2301      	movs	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
 80075d0:	e015      	b.n	80075fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d20b      	bcs.n	80075f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	1ad2      	subs	r2, r2, r3
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff ff9b 	bl	8007524 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	e004      	b.n	80075fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075fe:	f000 ff89 	bl	8008514 <vPortExitCritical>

	return xReturn;
 8007602:	69fb      	ldr	r3, [r7, #28]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3720      	adds	r7, #32
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20001650 	.word	0x20001650
 8007610:	20001664 	.word	0x20001664

08007614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007618:	4b03      	ldr	r3, [pc, #12]	; (8007628 <vTaskMissedYield+0x14>)
 800761a:	2201      	movs	r2, #1
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	20001660 	.word	0x20001660

0800762c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007634:	f000 f852 	bl	80076dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007638:	4b06      	ldr	r3, [pc, #24]	; (8007654 <prvIdleTask+0x28>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d9f9      	bls.n	8007634 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <prvIdleTask+0x2c>)
 8007642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007650:	e7f0      	b.n	8007634 <prvIdleTask+0x8>
 8007652:	bf00      	nop
 8007654:	2000117c 	.word	0x2000117c
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	e00c      	b.n	8007682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4a12      	ldr	r2, [pc, #72]	; (80076bc <prvInitialiseTaskLists+0x60>)
 8007674:	4413      	add	r3, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f7fe fab6 	bl	8005be8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3301      	adds	r3, #1
 8007680:	607b      	str	r3, [r7, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b37      	cmp	r3, #55	; 0x37
 8007686:	d9ef      	bls.n	8007668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007688:	480d      	ldr	r0, [pc, #52]	; (80076c0 <prvInitialiseTaskLists+0x64>)
 800768a:	f7fe faad 	bl	8005be8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800768e:	480d      	ldr	r0, [pc, #52]	; (80076c4 <prvInitialiseTaskLists+0x68>)
 8007690:	f7fe faaa 	bl	8005be8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007694:	480c      	ldr	r0, [pc, #48]	; (80076c8 <prvInitialiseTaskLists+0x6c>)
 8007696:	f7fe faa7 	bl	8005be8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800769a:	480c      	ldr	r0, [pc, #48]	; (80076cc <prvInitialiseTaskLists+0x70>)
 800769c:	f7fe faa4 	bl	8005be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076a0:	480b      	ldr	r0, [pc, #44]	; (80076d0 <prvInitialiseTaskLists+0x74>)
 80076a2:	f7fe faa1 	bl	8005be8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <prvInitialiseTaskLists+0x78>)
 80076a8:	4a05      	ldr	r2, [pc, #20]	; (80076c0 <prvInitialiseTaskLists+0x64>)
 80076aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076ac:	4b0a      	ldr	r3, [pc, #40]	; (80076d8 <prvInitialiseTaskLists+0x7c>)
 80076ae:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <prvInitialiseTaskLists+0x68>)
 80076b0:	601a      	str	r2, [r3, #0]
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	2000117c 	.word	0x2000117c
 80076c0:	200015dc 	.word	0x200015dc
 80076c4:	200015f0 	.word	0x200015f0
 80076c8:	2000160c 	.word	0x2000160c
 80076cc:	20001620 	.word	0x20001620
 80076d0:	20001638 	.word	0x20001638
 80076d4:	20001604 	.word	0x20001604
 80076d8:	20001608 	.word	0x20001608

080076dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076e2:	e019      	b.n	8007718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076e4:	f000 fee6 	bl	80084b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e8:	4b10      	ldr	r3, [pc, #64]	; (800772c <prvCheckTasksWaitingTermination+0x50>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe fb01 	bl	8005cfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <prvCheckTasksWaitingTermination+0x54>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3b01      	subs	r3, #1
 8007700:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <prvCheckTasksWaitingTermination+0x54>)
 8007702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <prvCheckTasksWaitingTermination+0x58>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3b01      	subs	r3, #1
 800770a:	4a0a      	ldr	r2, [pc, #40]	; (8007734 <prvCheckTasksWaitingTermination+0x58>)
 800770c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800770e:	f000 ff01 	bl	8008514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f810 	bl	8007738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <prvCheckTasksWaitingTermination+0x58>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e1      	bne.n	80076e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20001620 	.word	0x20001620
 8007730:	2000164c 	.word	0x2000164c
 8007734:	20001634 	.word	0x20001634

08007738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3354      	adds	r3, #84	; 0x54
 8007744:	4618      	mov	r0, r3
 8007746:	f003 f961 	bl	800aa0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007750:	2b00      	cmp	r3, #0
 8007752:	d108      	bne.n	8007766 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	4618      	mov	r0, r3
 800775a:	f001 f899 	bl	8008890 <vPortFree>
				vPortFree( pxTCB );
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f896 	bl	8008890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007764:	e018      	b.n	8007798 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800776c:	2b01      	cmp	r3, #1
 800776e:	d103      	bne.n	8007778 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 f88d 	bl	8008890 <vPortFree>
	}
 8007776:	e00f      	b.n	8007798 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800777e:	2b02      	cmp	r3, #2
 8007780:	d00a      	beq.n	8007798 <prvDeleteTCB+0x60>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60fb      	str	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <prvDeleteTCB+0x5e>
	}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvResetNextTaskUnblockTime+0x38>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <prvResetNextTaskUnblockTime+0x3c>)
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077b8:	e008      	b.n	80077cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077ba:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <prvResetNextTaskUnblockTime+0x38>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a04      	ldr	r2, [pc, #16]	; (80077dc <prvResetNextTaskUnblockTime+0x3c>)
 80077ca:	6013      	str	r3, [r2, #0]
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	20001604 	.word	0x20001604
 80077dc:	2000166c 	.word	0x2000166c

080077e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <xTaskGetCurrentTaskHandle+0x1c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80077ec:	687b      	ldr	r3, [r7, #4]
	}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	20001178 	.word	0x20001178

08007800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <xTaskGetSchedulerState+0x34>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800780e:	2301      	movs	r3, #1
 8007810:	607b      	str	r3, [r7, #4]
 8007812:	e008      	b.n	8007826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <xTaskGetSchedulerState+0x38>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800781c:	2302      	movs	r3, #2
 800781e:	607b      	str	r3, [r7, #4]
 8007820:	e001      	b.n	8007826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007822:	2300      	movs	r3, #0
 8007824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007826:	687b      	ldr	r3, [r7, #4]
	}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	20001658 	.word	0x20001658
 8007838:	20001674 	.word	0x20001674

0800783c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d051      	beq.n	80078f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	4b2a      	ldr	r3, [pc, #168]	; (8007900 <xTaskPriorityInherit+0xc4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	429a      	cmp	r2, r3
 800785e:	d241      	bcs.n	80078e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	db06      	blt.n	8007876 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <xTaskPriorityInherit+0xc4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6959      	ldr	r1, [r3, #20]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <xTaskPriorityInherit+0xc8>)
 8007888:	4413      	add	r3, r2
 800788a:	4299      	cmp	r1, r3
 800788c:	d122      	bne.n	80078d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	3304      	adds	r3, #4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fa32 	bl	8005cfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007898:	4b19      	ldr	r3, [pc, #100]	; (8007900 <xTaskPriorityInherit+0xc4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <xTaskPriorityInherit+0xcc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d903      	bls.n	80078b6 <xTaskPriorityInherit+0x7a>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b2:	4a15      	ldr	r2, [pc, #84]	; (8007908 <xTaskPriorityInherit+0xcc>)
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4a10      	ldr	r2, [pc, #64]	; (8007904 <xTaskPriorityInherit+0xc8>)
 80078c4:	441a      	add	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f7fe f9b8 	bl	8005c42 <vListInsertEnd>
 80078d2:	e004      	b.n	80078de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <xTaskPriorityInherit+0xc4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	e008      	b.n	80078f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <xTaskPriorityInherit+0xc4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d201      	bcs.n	80078f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078f6:	68fb      	ldr	r3, [r7, #12]
	}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20001178 	.word	0x20001178
 8007904:	2000117c 	.word	0x2000117c
 8007908:	20001654 	.word	0x20001654

0800790c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d056      	beq.n	80079d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007922:	4b2e      	ldr	r3, [pc, #184]	; (80079dc <xTaskPriorityDisinherit+0xd0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	429a      	cmp	r2, r3
 800792a:	d00a      	beq.n	8007942 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60bb      	str	r3, [r7, #8]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	1e5a      	subs	r2, r3, #1
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007972:	429a      	cmp	r2, r3
 8007974:	d02c      	beq.n	80079d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797a:	2b00      	cmp	r3, #0
 800797c:	d128      	bne.n	80079d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe f9ba 	bl	8005cfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b0f      	ldr	r3, [pc, #60]	; (80079e0 <xTaskPriorityDisinherit+0xd4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d903      	bls.n	80079b0 <xTaskPriorityDisinherit+0xa4>
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <xTaskPriorityDisinherit+0xd4>)
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4a09      	ldr	r2, [pc, #36]	; (80079e4 <xTaskPriorityDisinherit+0xd8>)
 80079be:	441a      	add	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe f93b 	bl	8005c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079d0:	697b      	ldr	r3, [r7, #20]
	}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20001178 	.word	0x20001178
 80079e0:	20001654 	.word	0x20001654
 80079e4:	2000117c 	.word	0x2000117c

080079e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079f6:	2301      	movs	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d06a      	beq.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60fb      	str	r3, [r7, #12]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d902      	bls.n	8007a2e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e002      	b.n	8007a34 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a32:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d04b      	beq.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d146      	bne.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a48:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d10a      	bne.n	8007a68 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60bb      	str	r3, [r7, #8]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	db04      	blt.n	8007a86 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	6959      	ldr	r1, [r3, #20]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007a96:	4413      	add	r3, r2
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	d11c      	bne.n	8007ad6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe f92b 	bl	8005cfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d903      	bls.n	8007aba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ac8:	441a      	add	r2, r3
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7fe f8b6 	bl	8005c42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ad6:	bf00      	nop
 8007ad8:	3720      	adds	r7, #32
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20001178 	.word	0x20001178
 8007ae4:	2000117c 	.word	0x2000117c
 8007ae8:	20001654 	.word	0x20001654

08007aec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007af0:	4b07      	ldr	r3, [pc, #28]	; (8007b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007afe:	3201      	adds	r2, #1
 8007b00:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b04:	681b      	ldr	r3, [r3, #0]
	}
 8007b06:	4618      	mov	r0, r3
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20001178 	.word	0x20001178

08007b14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b1e:	4b21      	ldr	r3, [pc, #132]	; (8007ba4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b24:	4b20      	ldr	r3, [pc, #128]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f8e6 	bl	8005cfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d10a      	bne.n	8007b4e <prvAddCurrentTaskToDelayedList+0x3a>
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b3e:	4b1a      	ldr	r3, [pc, #104]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4819      	ldr	r0, [pc, #100]	; (8007bac <prvAddCurrentTaskToDelayedList+0x98>)
 8007b48:	f7fe f87b 	bl	8005c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b4c:	e026      	b.n	8007b9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4413      	add	r3, r2
 8007b54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d209      	bcs.n	8007b7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b66:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f7fe f889 	bl	8005c8a <vListInsert>
}
 8007b78:	e010      	b.n	8007b9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b7a:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fe f87f 	bl	8005c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d202      	bcs.n	8007b9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b96:	4a08      	ldr	r2, [pc, #32]	; (8007bb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6013      	str	r3, [r2, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20001650 	.word	0x20001650
 8007ba8:	20001178 	.word	0x20001178
 8007bac:	20001638 	.word	0x20001638
 8007bb0:	20001608 	.word	0x20001608
 8007bb4:	20001604 	.word	0x20001604
 8007bb8:	2000166c 	.word	0x2000166c

08007bbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08a      	sub	sp, #40	; 0x28
 8007bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bc6:	f000 fb07 	bl	80081d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bca:	4b1c      	ldr	r3, [pc, #112]	; (8007c3c <xTimerCreateTimerTask+0x80>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d021      	beq.n	8007c16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bda:	1d3a      	adds	r2, r7, #4
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	f107 030c 	add.w	r3, r7, #12
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fd ffe5 	bl	8005bb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bea:	6879      	ldr	r1, [r7, #4]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	9202      	str	r2, [sp, #8]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	4910      	ldr	r1, [pc, #64]	; (8007c40 <xTimerCreateTimerTask+0x84>)
 8007bfe:	4811      	ldr	r0, [pc, #68]	; (8007c44 <xTimerCreateTimerTask+0x88>)
 8007c00:	f7fe ffa6 	bl	8006b50 <xTaskCreateStatic>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4a10      	ldr	r2, [pc, #64]	; (8007c48 <xTimerCreateTimerTask+0x8c>)
 8007c08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c0a:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <xTimerCreateTimerTask+0x8c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	613b      	str	r3, [r7, #16]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200016a8 	.word	0x200016a8
 8007c40:	0800d614 	.word	0x0800d614
 8007c44:	08007d81 	.word	0x08007d81
 8007c48:	200016ac 	.word	0x200016ac

08007c4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	; 0x28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	623b      	str	r3, [r7, #32]
}
 8007c76:	bf00      	nop
 8007c78:	e7fe      	b.n	8007c78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <xTimerGenericCommand+0x98>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d02a      	beq.n	8007cd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2b05      	cmp	r3, #5
 8007c92:	dc18      	bgt.n	8007cc6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c94:	f7ff fdb4 	bl	8007800 <xTaskGetSchedulerState>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d109      	bne.n	8007cb2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <xTimerGenericCommand+0x98>)
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f107 0110 	add.w	r1, r7, #16
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007caa:	f7fe fa45 	bl	8006138 <xQueueGenericSend>
 8007cae:	6278      	str	r0, [r7, #36]	; 0x24
 8007cb0:	e012      	b.n	8007cd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <xTimerGenericCommand+0x98>)
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f107 0110 	add.w	r1, r7, #16
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f7fe fa3b 	bl	8006138 <xQueueGenericSend>
 8007cc2:	6278      	str	r0, [r7, #36]	; 0x24
 8007cc4:	e008      	b.n	8007cd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <xTimerGenericCommand+0x98>)
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	f107 0110 	add.w	r1, r7, #16
 8007cce:	2300      	movs	r3, #0
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	f7fe fb2f 	bl	8006334 <xQueueGenericSendFromISR>
 8007cd6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3728      	adds	r7, #40	; 0x28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200016a8 	.word	0x200016a8

08007ce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <prvProcessExpiredTimer+0x94>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fd fffb 	bl	8005cfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d022      	beq.n	8007d5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	18d1      	adds	r1, r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	6978      	ldr	r0, [r7, #20]
 8007d22:	f000 f8d1 	bl	8007ec8 <prvInsertTimerInActiveList>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01f      	beq.n	8007d6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	2300      	movs	r3, #0
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	2100      	movs	r1, #0
 8007d36:	6978      	ldr	r0, [r7, #20]
 8007d38:	f7ff ff88 	bl	8007c4c <xTimerGenericCommand>
 8007d3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d113      	bne.n	8007d6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d60:	f023 0301 	bic.w	r3, r3, #1
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	6978      	ldr	r0, [r7, #20]
 8007d72:	4798      	blx	r3
}
 8007d74:	bf00      	nop
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	200016a0 	.word	0x200016a0

08007d80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d88:	f107 0308 	add.w	r3, r7, #8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f857 	bl	8007e40 <prvGetNextExpireTime>
 8007d92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	4619      	mov	r1, r3
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f803 	bl	8007da4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d9e:	f000 f8d5 	bl	8007f4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007da2:	e7f1      	b.n	8007d88 <prvTimerTask+0x8>

08007da4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dae:	f7ff f92b 	bl	8007008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007db2:	f107 0308 	add.w	r3, r7, #8
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f866 	bl	8007e88 <prvSampleTimeNow>
 8007dbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d130      	bne.n	8007e26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <prvProcessTimerOrBlockTask+0x3c>
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d806      	bhi.n	8007de0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dd2:	f7ff f927 	bl	8007024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff ff85 	bl	8007ce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dde:	e024      	b.n	8007e2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007de6:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <prvProcessTimerOrBlockTask+0x90>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <prvProcessTimerOrBlockTask+0x50>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <prvProcessTimerOrBlockTask+0x52>
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <prvProcessTimerOrBlockTask+0x94>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	f7fe fe6f 	bl	8006ae8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e0a:	f7ff f90b 	bl	8007024 <xTaskResumeAll>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <prvProcessTimerOrBlockTask+0x98>)
 8007e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	f3bf 8f6f 	isb	sy
}
 8007e24:	e001      	b.n	8007e2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e26:	f7ff f8fd 	bl	8007024 <xTaskResumeAll>
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	200016a4 	.word	0x200016a4
 8007e38:	200016a8 	.word	0x200016a8
 8007e3c:	e000ed04 	.word	0xe000ed04

08007e40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e48:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <prvGetNextExpireTime+0x44>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <prvGetNextExpireTime+0x16>
 8007e52:	2201      	movs	r2, #1
 8007e54:	e000      	b.n	8007e58 <prvGetNextExpireTime+0x18>
 8007e56:	2200      	movs	r2, #0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <prvGetNextExpireTime+0x44>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e001      	b.n	8007e74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e74:	68fb      	ldr	r3, [r7, #12]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	200016a0 	.word	0x200016a0

08007e88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e90:	f7ff f966 	bl	8007160 <xTaskGetTickCount>
 8007e94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <prvSampleTimeNow+0x3c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d205      	bcs.n	8007eac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ea0:	f000 f936 	bl	8008110 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <prvSampleTimeNow+0x3c>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200016b0 	.word	0x200016b0

08007ec8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d812      	bhi.n	8007f14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	1ad2      	subs	r2, r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d302      	bcc.n	8007f02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	e01b      	b.n	8007f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f02:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <prvInsertTimerInActiveList+0x7c>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	f7fd febc 	bl	8005c8a <vListInsert>
 8007f12:	e012      	b.n	8007f3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d206      	bcs.n	8007f2a <prvInsertTimerInActiveList+0x62>
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d302      	bcc.n	8007f2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f24:	2301      	movs	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e007      	b.n	8007f3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <prvInsertTimerInActiveList+0x80>)
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4619      	mov	r1, r3
 8007f34:	4610      	mov	r0, r2
 8007f36:	f7fd fea8 	bl	8005c8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f3a:	697b      	ldr	r3, [r7, #20]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200016a4 	.word	0x200016a4
 8007f48:	200016a0 	.word	0x200016a0

08007f4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f52:	e0ca      	b.n	80080ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	da18      	bge.n	8007f8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f5a:	1d3b      	adds	r3, r7, #4
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	61fb      	str	r3, [r7, #28]
}
 8007f78:	bf00      	nop
 8007f7a:	e7fe      	b.n	8007f7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f82:	6850      	ldr	r0, [r2, #4]
 8007f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f86:	6892      	ldr	r2, [r2, #8]
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f2c0 80ab 	blt.w	80080ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d004      	beq.n	8007faa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fea9 	bl	8005cfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007faa:	463b      	mov	r3, r7
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff ff6b 	bl	8007e88 <prvSampleTimeNow>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	f200 8096 	bhi.w	80080e8 <prvProcessReceivedCommands+0x19c>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <prvProcessReceivedCommands+0x78>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007fed 	.word	0x08007fed
 8007fd0:	08008061 	.word	0x08008061
 8007fd4:	08008075 	.word	0x08008075
 8007fd8:	080080bf 	.word	0x080080bf
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08007fed 	.word	0x08007fed
 8007fe4:	08008061 	.word	0x08008061
 8007fe8:	08008075 	.word	0x08008075
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	18d1      	adds	r1, r2, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800800a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800c:	f7ff ff5c 	bl	8007ec8 <prvInsertTimerInActiveList>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d069      	beq.n	80080ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800801c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05e      	beq.n	80080ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	441a      	add	r2, r3
 8008034:	2300      	movs	r3, #0
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	2300      	movs	r3, #0
 800803a:	2100      	movs	r1, #0
 800803c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803e:	f7ff fe05 	bl	8007c4c <xTimerGenericCommand>
 8008042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008044:	6a3b      	ldr	r3, [r7, #32]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d14f      	bne.n	80080ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	61bb      	str	r3, [r7, #24]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008066:	f023 0301 	bic.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008072:	e03a      	b.n	80080ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800807a:	f043 0301 	orr.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10a      	bne.n	80080aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	617b      	str	r3, [r7, #20]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	18d1      	adds	r1, r2, r3
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b8:	f7ff ff06 	bl	8007ec8 <prvInsertTimerInActiveList>
					break;
 80080bc:	e015      	b.n	80080ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d103      	bne.n	80080d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80080cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ce:	f000 fbdf 	bl	8008890 <vPortFree>
 80080d2:	e00a      	b.n	80080ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80080e6:	e000      	b.n	80080ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80080e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ea:	4b08      	ldr	r3, [pc, #32]	; (800810c <prvProcessReceivedCommands+0x1c0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	1d39      	adds	r1, r7, #4
 80080f0:	2200      	movs	r2, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe f9ba 	bl	800646c <xQueueReceive>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f47f af2a 	bne.w	8007f54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	3730      	adds	r7, #48	; 0x30
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	200016a8 	.word	0x200016a8

08008110 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008116:	e048      	b.n	80081aa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008118:	4b2d      	ldr	r3, [pc, #180]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008122:	4b2b      	ldr	r3, [pc, #172]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3304      	adds	r3, #4
 8008130:	4618      	mov	r0, r3
 8008132:	f7fd fde3 	bl	8005cfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d02e      	beq.n	80081aa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4413      	add	r3, r2
 8008154:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	429a      	cmp	r2, r3
 800815c:	d90e      	bls.n	800817c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800816a:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fd fd88 	bl	8005c8a <vListInsert>
 800817a:	e016      	b.n	80081aa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800817c:	2300      	movs	r3, #0
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	2300      	movs	r3, #0
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	2100      	movs	r1, #0
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fd60 	bl	8007c4c <xTimerGenericCommand>
 800818c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	603b      	str	r3, [r7, #0]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1b1      	bne.n	8008118 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <prvSwitchTimerLists+0xc4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <prvSwitchTimerLists+0xc0>)
 80081c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081c2:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <prvSwitchTimerLists+0xc4>)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6013      	str	r3, [r2, #0]
}
 80081c8:	bf00      	nop
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200016a0 	.word	0x200016a0
 80081d4:	200016a4 	.word	0x200016a4

080081d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081de:	f000 f969 	bl	80084b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <prvCheckForValidListAndQueue+0x60>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d120      	bne.n	800822c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081ea:	4814      	ldr	r0, [pc, #80]	; (800823c <prvCheckForValidListAndQueue+0x64>)
 80081ec:	f7fd fcfc 	bl	8005be8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081f0:	4813      	ldr	r0, [pc, #76]	; (8008240 <prvCheckForValidListAndQueue+0x68>)
 80081f2:	f7fd fcf9 	bl	8005be8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <prvCheckForValidListAndQueue+0x6c>)
 80081f8:	4a10      	ldr	r2, [pc, #64]	; (800823c <prvCheckForValidListAndQueue+0x64>)
 80081fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081fc:	4b12      	ldr	r3, [pc, #72]	; (8008248 <prvCheckForValidListAndQueue+0x70>)
 80081fe:	4a10      	ldr	r2, [pc, #64]	; (8008240 <prvCheckForValidListAndQueue+0x68>)
 8008200:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008202:	2300      	movs	r3, #0
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <prvCheckForValidListAndQueue+0x74>)
 8008208:	4a11      	ldr	r2, [pc, #68]	; (8008250 <prvCheckForValidListAndQueue+0x78>)
 800820a:	2110      	movs	r1, #16
 800820c:	200a      	movs	r0, #10
 800820e:	f7fd fe07 	bl	8005e20 <xQueueGenericCreateStatic>
 8008212:	4603      	mov	r3, r0
 8008214:	4a08      	ldr	r2, [pc, #32]	; (8008238 <prvCheckForValidListAndQueue+0x60>)
 8008216:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008218:	4b07      	ldr	r3, [pc, #28]	; (8008238 <prvCheckForValidListAndQueue+0x60>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008220:	4b05      	ldr	r3, [pc, #20]	; (8008238 <prvCheckForValidListAndQueue+0x60>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	490b      	ldr	r1, [pc, #44]	; (8008254 <prvCheckForValidListAndQueue+0x7c>)
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fc34 	bl	8006a94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800822c:	f000 f972 	bl	8008514 <vPortExitCritical>
}
 8008230:	bf00      	nop
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200016a8 	.word	0x200016a8
 800823c:	20001678 	.word	0x20001678
 8008240:	2000168c 	.word	0x2000168c
 8008244:	200016a0 	.word	0x200016a0
 8008248:	200016a4 	.word	0x200016a4
 800824c:	20001754 	.word	0x20001754
 8008250:	200016b4 	.word	0x200016b4
 8008254:	0800d61c 	.word	0x0800d61c

08008258 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3b04      	subs	r3, #4
 8008268:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3b04      	subs	r3, #4
 8008276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0201 	bic.w	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3b04      	subs	r3, #4
 8008286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008288:	4a0c      	ldr	r2, [pc, #48]	; (80082bc <pxPortInitialiseStack+0x64>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b14      	subs	r3, #20
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3b04      	subs	r3, #4
 800829e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f06f 0202 	mvn.w	r2, #2
 80082a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3b20      	subs	r3, #32
 80082ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082ae:	68fb      	ldr	r3, [r7, #12]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	080082c1 	.word	0x080082c1

080082c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082ca:	4b12      	ldr	r3, [pc, #72]	; (8008314 <prvTaskExitError+0x54>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d2:	d00a      	beq.n	80082ea <prvTaskExitError+0x2a>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	60fb      	str	r3, [r7, #12]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <prvTaskExitError+0x28>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	60bb      	str	r3, [r7, #8]
}
 80082fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082fe:	bf00      	nop
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0fc      	beq.n	8008300 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008306:	bf00      	nop
 8008308:	bf00      	nop
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	2000000c 	.word	0x2000000c
	...

08008320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <pxCurrentTCBConst2>)
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f380 8809 	msr	PSP, r0
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f04f 0000 	mov.w	r0, #0
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	4770      	bx	lr
 800833c:	f3af 8000 	nop.w

08008340 <pxCurrentTCBConst2>:
 8008340:	20001178 	.word	0x20001178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008348:	4808      	ldr	r0, [pc, #32]	; (800836c <prvPortStartFirstTask+0x24>)
 800834a:	6800      	ldr	r0, [r0, #0]
 800834c:	6800      	ldr	r0, [r0, #0]
 800834e:	f380 8808 	msr	MSP, r0
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8814 	msr	CONTROL, r0
 800835a:	b662      	cpsie	i
 800835c:	b661      	cpsie	f
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	df00      	svc	0
 8008368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800836a:	bf00      	nop
 800836c:	e000ed08 	.word	0xe000ed08

08008370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008376:	4b46      	ldr	r3, [pc, #280]	; (8008490 <xPortStartScheduler+0x120>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a46      	ldr	r2, [pc, #280]	; (8008494 <xPortStartScheduler+0x124>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d10a      	bne.n	8008396 <xPortStartScheduler+0x26>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
}
 8008392:	bf00      	nop
 8008394:	e7fe      	b.n	8008394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008396:	4b3e      	ldr	r3, [pc, #248]	; (8008490 <xPortStartScheduler+0x120>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a3f      	ldr	r2, [pc, #252]	; (8008498 <xPortStartScheduler+0x128>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10a      	bne.n	80083b6 <xPortStartScheduler+0x46>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60fb      	str	r3, [r7, #12]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083b6:	4b39      	ldr	r3, [pc, #228]	; (800849c <xPortStartScheduler+0x12c>)
 80083b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	22ff      	movs	r2, #255	; 0xff
 80083c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <xPortStartScheduler+0x130>)
 80083dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083de:	4b31      	ldr	r3, [pc, #196]	; (80084a4 <xPortStartScheduler+0x134>)
 80083e0:	2207      	movs	r2, #7
 80083e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083e4:	e009      	b.n	80083fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80083e6:	4b2f      	ldr	r3, [pc, #188]	; (80084a4 <xPortStartScheduler+0x134>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a2d      	ldr	r2, [pc, #180]	; (80084a4 <xPortStartScheduler+0x134>)
 80083ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083fa:	78fb      	ldrb	r3, [r7, #3]
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	2b80      	cmp	r3, #128	; 0x80
 8008404:	d0ef      	beq.n	80083e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008406:	4b27      	ldr	r3, [pc, #156]	; (80084a4 <xPortStartScheduler+0x134>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f1c3 0307 	rsb	r3, r3, #7
 800840e:	2b04      	cmp	r3, #4
 8008410:	d00a      	beq.n	8008428 <xPortStartScheduler+0xb8>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60bb      	str	r3, [r7, #8]
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008428:	4b1e      	ldr	r3, [pc, #120]	; (80084a4 <xPortStartScheduler+0x134>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <xPortStartScheduler+0x134>)
 8008430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008432:	4b1c      	ldr	r3, [pc, #112]	; (80084a4 <xPortStartScheduler+0x134>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800843a:	4a1a      	ldr	r2, [pc, #104]	; (80084a4 <xPortStartScheduler+0x134>)
 800843c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	b2da      	uxtb	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008446:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <xPortStartScheduler+0x138>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a17      	ldr	r2, [pc, #92]	; (80084a8 <xPortStartScheduler+0x138>)
 800844c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008452:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <xPortStartScheduler+0x138>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a14      	ldr	r2, [pc, #80]	; (80084a8 <xPortStartScheduler+0x138>)
 8008458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800845c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800845e:	f000 f8dd 	bl	800861c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008462:	4b12      	ldr	r3, [pc, #72]	; (80084ac <xPortStartScheduler+0x13c>)
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008468:	f000 f8fc 	bl	8008664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800846c:	4b10      	ldr	r3, [pc, #64]	; (80084b0 <xPortStartScheduler+0x140>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a0f      	ldr	r2, [pc, #60]	; (80084b0 <xPortStartScheduler+0x140>)
 8008472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008478:	f7ff ff66 	bl	8008348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800847c:	f7fe ff3a 	bl	80072f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008480:	f7ff ff1e 	bl	80082c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	e000ed00 	.word	0xe000ed00
 8008494:	410fc271 	.word	0x410fc271
 8008498:	410fc270 	.word	0x410fc270
 800849c:	e000e400 	.word	0xe000e400
 80084a0:	200017a4 	.word	0x200017a4
 80084a4:	200017a8 	.word	0x200017a8
 80084a8:	e000ed20 	.word	0xe000ed20
 80084ac:	2000000c 	.word	0x2000000c
 80084b0:	e000ef34 	.word	0xe000ef34

080084b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	607b      	str	r3, [r7, #4]
}
 80084cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <vPortEnterCritical+0x58>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	4a0d      	ldr	r2, [pc, #52]	; (800850c <vPortEnterCritical+0x58>)
 80084d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084d8:	4b0c      	ldr	r3, [pc, #48]	; (800850c <vPortEnterCritical+0x58>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d10f      	bne.n	8008500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084e0:	4b0b      	ldr	r3, [pc, #44]	; (8008510 <vPortEnterCritical+0x5c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <vPortEnterCritical+0x4c>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	603b      	str	r3, [r7, #0]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <vPortEnterCritical+0x4a>
	}
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000000c 	.word	0x2000000c
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800851a:	4b12      	ldr	r3, [pc, #72]	; (8008564 <vPortExitCritical+0x50>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <vPortExitCritical+0x24>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	607b      	str	r3, [r7, #4]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <vPortExitCritical+0x50>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3b01      	subs	r3, #1
 800853e:	4a09      	ldr	r2, [pc, #36]	; (8008564 <vPortExitCritical+0x50>)
 8008540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008542:	4b08      	ldr	r3, [pc, #32]	; (8008564 <vPortExitCritical+0x50>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d105      	bne.n	8008556 <vPortExitCritical+0x42>
 800854a:	2300      	movs	r3, #0
 800854c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f383 8811 	msr	BASEPRI, r3
}
 8008554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c
	...

08008570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008570:	f3ef 8009 	mrs	r0, PSP
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	4b15      	ldr	r3, [pc, #84]	; (80085d0 <pxCurrentTCBConst>)
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	f01e 0f10 	tst.w	lr, #16
 8008580:	bf08      	it	eq
 8008582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858a:	6010      	str	r0, [r2, #0]
 800858c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008594:	f380 8811 	msr	BASEPRI, r0
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f7fe fea8 	bl	80072f4 <vTaskSwitchContext>
 80085a4:	f04f 0000 	mov.w	r0, #0
 80085a8:	f380 8811 	msr	BASEPRI, r0
 80085ac:	bc09      	pop	{r0, r3}
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	6808      	ldr	r0, [r1, #0]
 80085b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b6:	f01e 0f10 	tst.w	lr, #16
 80085ba:	bf08      	it	eq
 80085bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085c0:	f380 8809 	msr	PSP, r0
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	f3af 8000 	nop.w

080085d0 <pxCurrentTCBConst>:
 80085d0:	20001178 	.word	0x20001178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085f2:	f7fe fdc5 	bl	8007180 <xTaskIncrementTick>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <xPortSysTickHandler+0x40>)
 80085fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	2300      	movs	r3, #0
 8008606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f383 8811 	msr	BASEPRI, r3
}
 800860e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008620:	4b0b      	ldr	r3, [pc, #44]	; (8008650 <vPortSetupTimerInterrupt+0x34>)
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <vPortSetupTimerInterrupt+0x38>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800862c:	4b0a      	ldr	r3, [pc, #40]	; (8008658 <vPortSetupTimerInterrupt+0x3c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0a      	ldr	r2, [pc, #40]	; (800865c <vPortSetupTimerInterrupt+0x40>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	099b      	lsrs	r3, r3, #6
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <vPortSetupTimerInterrupt+0x44>)
 800863a:	3b01      	subs	r3, #1
 800863c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <vPortSetupTimerInterrupt+0x34>)
 8008640:	2207      	movs	r2, #7
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	e000e010 	.word	0xe000e010
 8008654:	e000e018 	.word	0xe000e018
 8008658:	20000000 	.word	0x20000000
 800865c:	10624dd3 	.word	0x10624dd3
 8008660:	e000e014 	.word	0xe000e014

08008664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008674 <vPortEnableVFP+0x10>
 8008668:	6801      	ldr	r1, [r0, #0]
 800866a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800866e:	6001      	str	r1, [r0, #0]
 8008670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008672:	bf00      	nop
 8008674:	e000ed88 	.word	0xe000ed88

08008678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800867e:	f3ef 8305 	mrs	r3, IPSR
 8008682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b0f      	cmp	r3, #15
 8008688:	d914      	bls.n	80086b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800868a:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <vPortValidateInterruptPriority+0x70>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <vPortValidateInterruptPriority+0x74>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	7afa      	ldrb	r2, [r7, #11]
 800869a:	429a      	cmp	r2, r3
 800869c:	d20a      	bcs.n	80086b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	607b      	str	r3, [r7, #4]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <vPortValidateInterruptPriority+0x78>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086bc:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <vPortValidateInterruptPriority+0x7c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d90a      	bls.n	80086da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	603b      	str	r3, [r7, #0]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <vPortValidateInterruptPriority+0x60>
	}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	e000e3f0 	.word	0xe000e3f0
 80086ec:	200017a4 	.word	0x200017a4
 80086f0:	e000ed0c 	.word	0xe000ed0c
 80086f4:	200017a8 	.word	0x200017a8

080086f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008704:	f7fe fc80 	bl	8007008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008708:	4b5b      	ldr	r3, [pc, #364]	; (8008878 <pvPortMalloc+0x180>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008710:	f000 f920 	bl	8008954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008714:	4b59      	ldr	r3, [pc, #356]	; (800887c <pvPortMalloc+0x184>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8093 	bne.w	8008848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01d      	beq.n	8008764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008728:	2208      	movs	r2, #8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d014      	beq.n	8008764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f023 0307 	bic.w	r3, r3, #7
 8008740:	3308      	adds	r3, #8
 8008742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <pvPortMalloc+0x6c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	617b      	str	r3, [r7, #20]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d06e      	beq.n	8008848 <pvPortMalloc+0x150>
 800876a:	4b45      	ldr	r3, [pc, #276]	; (8008880 <pvPortMalloc+0x188>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d869      	bhi.n	8008848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008774:	4b43      	ldr	r3, [pc, #268]	; (8008884 <pvPortMalloc+0x18c>)
 8008776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008778:	4b42      	ldr	r3, [pc, #264]	; (8008884 <pvPortMalloc+0x18c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800877e:	e004      	b.n	800878a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <pvPortMalloc+0xa4>
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f1      	bne.n	8008780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800879c:	4b36      	ldr	r3, [pc, #216]	; (8008878 <pvPortMalloc+0x180>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d050      	beq.n	8008848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2208      	movs	r2, #8
 80087ac:	4413      	add	r3, r2
 80087ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	2308      	movs	r3, #8
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d91f      	bls.n	8008808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <pvPortMalloc+0xf8>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	613b      	str	r3, [r7, #16]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008802:	69b8      	ldr	r0, [r7, #24]
 8008804:	f000 f908 	bl	8008a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008808:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <pvPortMalloc+0x188>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <pvPortMalloc+0x188>)
 8008814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <pvPortMalloc+0x188>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <pvPortMalloc+0x190>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d203      	bcs.n	800882a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008822:	4b17      	ldr	r3, [pc, #92]	; (8008880 <pvPortMalloc+0x188>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a18      	ldr	r2, [pc, #96]	; (8008888 <pvPortMalloc+0x190>)
 8008828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <pvPortMalloc+0x184>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	431a      	orrs	r2, r3
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <pvPortMalloc+0x194>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <pvPortMalloc+0x194>)
 8008846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008848:	f7fe fbec 	bl	8007024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <pvPortMalloc+0x174>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60fb      	str	r3, [r7, #12]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <pvPortMalloc+0x172>
	return pvReturn;
 800886c:	69fb      	ldr	r3, [r7, #28]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3728      	adds	r7, #40	; 0x28
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20003adc 	.word	0x20003adc
 800887c:	20003af0 	.word	0x20003af0
 8008880:	20003ae0 	.word	0x20003ae0
 8008884:	20003ad4 	.word	0x20003ad4
 8008888:	20003ae4 	.word	0x20003ae4
 800888c:	20003ae8 	.word	0x20003ae8

08008890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d04d      	beq.n	800893e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088a2:	2308      	movs	r3, #8
 80088a4:	425b      	negs	r3, r3
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4413      	add	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <vPortFree+0xb8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <vPortFree+0x44>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60fb      	str	r3, [r7, #12]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <vPortFree+0x62>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60bb      	str	r3, [r7, #8]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <vPortFree+0xb8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01e      	beq.n	800893e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d11a      	bne.n	800893e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <vPortFree+0xb8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	43db      	mvns	r3, r3
 8008912:	401a      	ands	r2, r3
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008918:	f7fe fb76 	bl	8007008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <vPortFree+0xbc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4413      	add	r3, r2
 8008926:	4a09      	ldr	r2, [pc, #36]	; (800894c <vPortFree+0xbc>)
 8008928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800892a:	6938      	ldr	r0, [r7, #16]
 800892c:	f000 f874 	bl	8008a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <vPortFree+0xc0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a06      	ldr	r2, [pc, #24]	; (8008950 <vPortFree+0xc0>)
 8008938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800893a:	f7fe fb73 	bl	8007024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800893e:	bf00      	nop
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20003af0 	.word	0x20003af0
 800894c:	20003ae0 	.word	0x20003ae0
 8008950:	20003aec 	.word	0x20003aec

08008954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800895a:	f242 3328 	movw	r3, #9000	; 0x2328
 800895e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008960:	4b27      	ldr	r3, [pc, #156]	; (8008a00 <prvHeapInit+0xac>)
 8008962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3307      	adds	r3, #7
 8008972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0307 	bic.w	r3, r3, #7
 800897a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	4a1f      	ldr	r2, [pc, #124]	; (8008a00 <prvHeapInit+0xac>)
 8008984:	4413      	add	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800898c:	4a1d      	ldr	r2, [pc, #116]	; (8008a04 <prvHeapInit+0xb0>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008992:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <prvHeapInit+0xb0>)
 8008994:	2200      	movs	r2, #0
 8008996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4413      	add	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089a0:	2208      	movs	r2, #8
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0307 	bic.w	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <prvHeapInit+0xb4>)
 80089b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <prvHeapInit+0xb4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <prvHeapInit+0xb4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089d4:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <prvHeapInit+0xb4>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a0a      	ldr	r2, [pc, #40]	; (8008a0c <prvHeapInit+0xb8>)
 80089e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <prvHeapInit+0xbc>)
 80089ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <prvHeapInit+0xc0>)
 80089ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089f2:	601a      	str	r2, [r3, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	200017ac 	.word	0x200017ac
 8008a04:	20003ad4 	.word	0x20003ad4
 8008a08:	20003adc 	.word	0x20003adc
 8008a0c:	20003ae4 	.word	0x20003ae4
 8008a10:	20003ae0 	.word	0x20003ae0
 8008a14:	20003af0 	.word	0x20003af0

08008a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a20:	4b28      	ldr	r3, [pc, #160]	; (8008ac4 <prvInsertBlockIntoFreeList+0xac>)
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e002      	b.n	8008a2c <prvInsertBlockIntoFreeList+0x14>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d8f7      	bhi.n	8008a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d108      	bne.n	8008a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	441a      	add	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	441a      	add	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d118      	bne.n	8008aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d00d      	beq.n	8008a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e008      	b.n	8008aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e003      	b.n	8008aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d002      	beq.n	8008ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20003ad4 	.word	0x20003ad4
 8008ac8:	20003adc 	.word	0x20003adc

08008acc <atof>:
 8008acc:	2100      	movs	r1, #0
 8008ace:	f000 bedd 	b.w	800988c <strtod>

08008ad2 <atoi>:
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	f000 bf69 	b.w	80099ac <strtol>
	...

08008adc <exit>:
 8008adc:	b508      	push	{r3, lr}
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <exit+0x1c>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	b113      	cbz	r3, 8008aea <exit+0xe>
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	f3af 8000 	nop.w
 8008aea:	4b04      	ldr	r3, [pc, #16]	; (8008afc <exit+0x20>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <exit+0x16>
 8008af0:	4798      	blx	r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7f9 f8fc 	bl	8001cf0 <_exit>
 8008af8:	00000000 	.word	0x00000000
 8008afc:	20003c34 	.word	0x20003c34

08008b00 <malloc>:
 8008b00:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <malloc+0xc>)
 8008b02:	4601      	mov	r1, r0
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f000 b823 	b.w	8008b50 <_malloc_r>
 8008b0a:	bf00      	nop
 8008b0c:	200001d4 	.word	0x200001d4

08008b10 <sbrk_aligned>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4e0e      	ldr	r6, [pc, #56]	; (8008b4c <sbrk_aligned+0x3c>)
 8008b14:	460c      	mov	r4, r1
 8008b16:	6831      	ldr	r1, [r6, #0]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	b911      	cbnz	r1, 8008b22 <sbrk_aligned+0x12>
 8008b1c:	f001 fff0 	bl	800ab00 <_sbrk_r>
 8008b20:	6030      	str	r0, [r6, #0]
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f001 ffeb 	bl	800ab00 <_sbrk_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	d00a      	beq.n	8008b44 <sbrk_aligned+0x34>
 8008b2e:	1cc4      	adds	r4, r0, #3
 8008b30:	f024 0403 	bic.w	r4, r4, #3
 8008b34:	42a0      	cmp	r0, r4
 8008b36:	d007      	beq.n	8008b48 <sbrk_aligned+0x38>
 8008b38:	1a21      	subs	r1, r4, r0
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f001 ffe0 	bl	800ab00 <_sbrk_r>
 8008b40:	3001      	adds	r0, #1
 8008b42:	d101      	bne.n	8008b48 <sbrk_aligned+0x38>
 8008b44:	f04f 34ff 	mov.w	r4, #4294967295
 8008b48:	4620      	mov	r0, r4
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	20003af8 	.word	0x20003af8

08008b50 <_malloc_r>:
 8008b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b54:	1ccd      	adds	r5, r1, #3
 8008b56:	f025 0503 	bic.w	r5, r5, #3
 8008b5a:	3508      	adds	r5, #8
 8008b5c:	2d0c      	cmp	r5, #12
 8008b5e:	bf38      	it	cc
 8008b60:	250c      	movcc	r5, #12
 8008b62:	2d00      	cmp	r5, #0
 8008b64:	4607      	mov	r7, r0
 8008b66:	db01      	blt.n	8008b6c <_malloc_r+0x1c>
 8008b68:	42a9      	cmp	r1, r5
 8008b6a:	d905      	bls.n	8008b78 <_malloc_r+0x28>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	2600      	movs	r6, #0
 8008b72:	4630      	mov	r0, r6
 8008b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c4c <_malloc_r+0xfc>
 8008b7c:	f000 f868 	bl	8008c50 <__malloc_lock>
 8008b80:	f8d8 3000 	ldr.w	r3, [r8]
 8008b84:	461c      	mov	r4, r3
 8008b86:	bb5c      	cbnz	r4, 8008be0 <_malloc_r+0x90>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f7ff ffc0 	bl	8008b10 <sbrk_aligned>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	4604      	mov	r4, r0
 8008b94:	d155      	bne.n	8008c42 <_malloc_r+0xf2>
 8008b96:	f8d8 4000 	ldr.w	r4, [r8]
 8008b9a:	4626      	mov	r6, r4
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	d145      	bne.n	8008c2c <_malloc_r+0xdc>
 8008ba0:	2c00      	cmp	r4, #0
 8008ba2:	d048      	beq.n	8008c36 <_malloc_r+0xe6>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	4631      	mov	r1, r6
 8008ba8:	4638      	mov	r0, r7
 8008baa:	eb04 0903 	add.w	r9, r4, r3
 8008bae:	f001 ffa7 	bl	800ab00 <_sbrk_r>
 8008bb2:	4581      	cmp	r9, r0
 8008bb4:	d13f      	bne.n	8008c36 <_malloc_r+0xe6>
 8008bb6:	6821      	ldr	r1, [r4, #0]
 8008bb8:	1a6d      	subs	r5, r5, r1
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4638      	mov	r0, r7
 8008bbe:	f7ff ffa7 	bl	8008b10 <sbrk_aligned>
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d037      	beq.n	8008c36 <_malloc_r+0xe6>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	442b      	add	r3, r5
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d038      	beq.n	8008c46 <_malloc_r+0xf6>
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	42a2      	cmp	r2, r4
 8008bd8:	d12b      	bne.n	8008c32 <_malloc_r+0xe2>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	605a      	str	r2, [r3, #4]
 8008bde:	e00f      	b.n	8008c00 <_malloc_r+0xb0>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	1b52      	subs	r2, r2, r5
 8008be4:	d41f      	bmi.n	8008c26 <_malloc_r+0xd6>
 8008be6:	2a0b      	cmp	r2, #11
 8008be8:	d917      	bls.n	8008c1a <_malloc_r+0xca>
 8008bea:	1961      	adds	r1, r4, r5
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	6025      	str	r5, [r4, #0]
 8008bf0:	bf18      	it	ne
 8008bf2:	6059      	strne	r1, [r3, #4]
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	bf08      	it	eq
 8008bf8:	f8c8 1000 	streq.w	r1, [r8]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f104 060b 	add.w	r6, r4, #11
 8008c06:	f000 f829 	bl	8008c5c <__malloc_unlock>
 8008c0a:	f026 0607 	bic.w	r6, r6, #7
 8008c0e:	1d23      	adds	r3, r4, #4
 8008c10:	1af2      	subs	r2, r6, r3
 8008c12:	d0ae      	beq.n	8008b72 <_malloc_r+0x22>
 8008c14:	1b9b      	subs	r3, r3, r6
 8008c16:	50a3      	str	r3, [r4, r2]
 8008c18:	e7ab      	b.n	8008b72 <_malloc_r+0x22>
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	6862      	ldr	r2, [r4, #4]
 8008c1e:	d1dd      	bne.n	8008bdc <_malloc_r+0x8c>
 8008c20:	f8c8 2000 	str.w	r2, [r8]
 8008c24:	e7ec      	b.n	8008c00 <_malloc_r+0xb0>
 8008c26:	4623      	mov	r3, r4
 8008c28:	6864      	ldr	r4, [r4, #4]
 8008c2a:	e7ac      	b.n	8008b86 <_malloc_r+0x36>
 8008c2c:	4634      	mov	r4, r6
 8008c2e:	6876      	ldr	r6, [r6, #4]
 8008c30:	e7b4      	b.n	8008b9c <_malloc_r+0x4c>
 8008c32:	4613      	mov	r3, r2
 8008c34:	e7cc      	b.n	8008bd0 <_malloc_r+0x80>
 8008c36:	230c      	movs	r3, #12
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f000 f80e 	bl	8008c5c <__malloc_unlock>
 8008c40:	e797      	b.n	8008b72 <_malloc_r+0x22>
 8008c42:	6025      	str	r5, [r4, #0]
 8008c44:	e7dc      	b.n	8008c00 <_malloc_r+0xb0>
 8008c46:	605b      	str	r3, [r3, #4]
 8008c48:	deff      	udf	#255	; 0xff
 8008c4a:	bf00      	nop
 8008c4c:	20003af4 	.word	0x20003af4

08008c50 <__malloc_lock>:
 8008c50:	4801      	ldr	r0, [pc, #4]	; (8008c58 <__malloc_lock+0x8>)
 8008c52:	f001 bfa2 	b.w	800ab9a <__retarget_lock_acquire_recursive>
 8008c56:	bf00      	nop
 8008c58:	20003c3c 	.word	0x20003c3c

08008c5c <__malloc_unlock>:
 8008c5c:	4801      	ldr	r0, [pc, #4]	; (8008c64 <__malloc_unlock+0x8>)
 8008c5e:	f001 bf9d 	b.w	800ab9c <__retarget_lock_release_recursive>
 8008c62:	bf00      	nop
 8008c64:	20003c3c 	.word	0x20003c3c

08008c68 <sulp>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	460d      	mov	r5, r1
 8008c6e:	ec45 4b10 	vmov	d0, r4, r5
 8008c72:	4616      	mov	r6, r2
 8008c74:	f003 fd6c 	bl	800c750 <__ulp>
 8008c78:	ec51 0b10 	vmov	r0, r1, d0
 8008c7c:	b17e      	cbz	r6, 8008c9e <sulp+0x36>
 8008c7e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008c82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dd09      	ble.n	8008c9e <sulp+0x36>
 8008c8a:	051b      	lsls	r3, r3, #20
 8008c8c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c90:	2400      	movs	r4, #0
 8008c92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c96:	4622      	mov	r2, r4
 8008c98:	462b      	mov	r3, r5
 8008c9a:	f7f7 fcad 	bl	80005f8 <__aeabi_dmul>
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}

08008ca0 <_strtod_l>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	ed2d 8b02 	vpush	{d8}
 8008ca8:	b09b      	sub	sp, #108	; 0x6c
 8008caa:	4604      	mov	r4, r0
 8008cac:	9213      	str	r2, [sp, #76]	; 0x4c
 8008cae:	2200      	movs	r2, #0
 8008cb0:	9216      	str	r2, [sp, #88]	; 0x58
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	f04f 0800 	mov.w	r8, #0
 8008cb8:	f04f 0900 	mov.w	r9, #0
 8008cbc:	460a      	mov	r2, r1
 8008cbe:	9215      	str	r2, [sp, #84]	; 0x54
 8008cc0:	7811      	ldrb	r1, [r2, #0]
 8008cc2:	292b      	cmp	r1, #43	; 0x2b
 8008cc4:	d04c      	beq.n	8008d60 <_strtod_l+0xc0>
 8008cc6:	d83a      	bhi.n	8008d3e <_strtod_l+0x9e>
 8008cc8:	290d      	cmp	r1, #13
 8008cca:	d834      	bhi.n	8008d36 <_strtod_l+0x96>
 8008ccc:	2908      	cmp	r1, #8
 8008cce:	d834      	bhi.n	8008d3a <_strtod_l+0x9a>
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d03d      	beq.n	8008d50 <_strtod_l+0xb0>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	920a      	str	r2, [sp, #40]	; 0x28
 8008cd8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008cda:	7832      	ldrb	r2, [r6, #0]
 8008cdc:	2a30      	cmp	r2, #48	; 0x30
 8008cde:	f040 80b4 	bne.w	8008e4a <_strtod_l+0x1aa>
 8008ce2:	7872      	ldrb	r2, [r6, #1]
 8008ce4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008ce8:	2a58      	cmp	r2, #88	; 0x58
 8008cea:	d170      	bne.n	8008dce <_strtod_l+0x12e>
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	ab16      	add	r3, sp, #88	; 0x58
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4a8e      	ldr	r2, [pc, #568]	; (8008f30 <_strtod_l+0x290>)
 8008cf8:	ab17      	add	r3, sp, #92	; 0x5c
 8008cfa:	a915      	add	r1, sp, #84	; 0x54
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f002 feb9 	bl	800ba74 <__gethex>
 8008d02:	f010 070f 	ands.w	r7, r0, #15
 8008d06:	4605      	mov	r5, r0
 8008d08:	d005      	beq.n	8008d16 <_strtod_l+0x76>
 8008d0a:	2f06      	cmp	r7, #6
 8008d0c:	d12a      	bne.n	8008d64 <_strtod_l+0xc4>
 8008d0e:	3601      	adds	r6, #1
 8008d10:	2300      	movs	r3, #0
 8008d12:	9615      	str	r6, [sp, #84]	; 0x54
 8008d14:	930a      	str	r3, [sp, #40]	; 0x28
 8008d16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 857f 	bne.w	800981c <_strtod_l+0xb7c>
 8008d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d20:	b1db      	cbz	r3, 8008d5a <_strtod_l+0xba>
 8008d22:	4642      	mov	r2, r8
 8008d24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d28:	ec43 2b10 	vmov	d0, r2, r3
 8008d2c:	b01b      	add	sp, #108	; 0x6c
 8008d2e:	ecbd 8b02 	vpop	{d8}
 8008d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d36:	2920      	cmp	r1, #32
 8008d38:	d1cc      	bne.n	8008cd4 <_strtod_l+0x34>
 8008d3a:	3201      	adds	r2, #1
 8008d3c:	e7bf      	b.n	8008cbe <_strtod_l+0x1e>
 8008d3e:	292d      	cmp	r1, #45	; 0x2d
 8008d40:	d1c8      	bne.n	8008cd4 <_strtod_l+0x34>
 8008d42:	2101      	movs	r1, #1
 8008d44:	910a      	str	r1, [sp, #40]	; 0x28
 8008d46:	1c51      	adds	r1, r2, #1
 8008d48:	9115      	str	r1, [sp, #84]	; 0x54
 8008d4a:	7852      	ldrb	r2, [r2, #1]
 8008d4c:	2a00      	cmp	r2, #0
 8008d4e:	d1c3      	bne.n	8008cd8 <_strtod_l+0x38>
 8008d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d52:	9515      	str	r5, [sp, #84]	; 0x54
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f040 855f 	bne.w	8009818 <_strtod_l+0xb78>
 8008d5a:	4642      	mov	r2, r8
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	e7e3      	b.n	8008d28 <_strtod_l+0x88>
 8008d60:	2100      	movs	r1, #0
 8008d62:	e7ef      	b.n	8008d44 <_strtod_l+0xa4>
 8008d64:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008d66:	b13a      	cbz	r2, 8008d78 <_strtod_l+0xd8>
 8008d68:	2135      	movs	r1, #53	; 0x35
 8008d6a:	a818      	add	r0, sp, #96	; 0x60
 8008d6c:	f003 fded 	bl	800c94a <__copybits>
 8008d70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008d72:	4620      	mov	r0, r4
 8008d74:	f003 f9c0 	bl	800c0f8 <_Bfree>
 8008d78:	3f01      	subs	r7, #1
 8008d7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d7c:	2f04      	cmp	r7, #4
 8008d7e:	d806      	bhi.n	8008d8e <_strtod_l+0xee>
 8008d80:	e8df f007 	tbb	[pc, r7]
 8008d84:	201d0314 	.word	0x201d0314
 8008d88:	14          	.byte	0x14
 8008d89:	00          	.byte	0x00
 8008d8a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008d8e:	05e9      	lsls	r1, r5, #23
 8008d90:	bf48      	it	mi
 8008d92:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d9a:	0d1b      	lsrs	r3, r3, #20
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1b9      	bne.n	8008d16 <_strtod_l+0x76>
 8008da2:	f001 fecf 	bl	800ab44 <__errno>
 8008da6:	2322      	movs	r3, #34	; 0x22
 8008da8:	6003      	str	r3, [r0, #0]
 8008daa:	e7b4      	b.n	8008d16 <_strtod_l+0x76>
 8008dac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008db0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008db4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008db8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008dbc:	e7e7      	b.n	8008d8e <_strtod_l+0xee>
 8008dbe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f38 <_strtod_l+0x298>
 8008dc2:	e7e4      	b.n	8008d8e <_strtod_l+0xee>
 8008dc4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008dc8:	f04f 38ff 	mov.w	r8, #4294967295
 8008dcc:	e7df      	b.n	8008d8e <_strtod_l+0xee>
 8008dce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	9215      	str	r2, [sp, #84]	; 0x54
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b30      	cmp	r3, #48	; 0x30
 8008dd8:	d0f9      	beq.n	8008dce <_strtod_l+0x12e>
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d09b      	beq.n	8008d16 <_strtod_l+0x76>
 8008dde:	2301      	movs	r3, #1
 8008de0:	f04f 0a00 	mov.w	sl, #0
 8008de4:	9304      	str	r3, [sp, #16]
 8008de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008dee:	46d3      	mov	fp, sl
 8008df0:	220a      	movs	r2, #10
 8008df2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008df4:	7806      	ldrb	r6, [r0, #0]
 8008df6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008dfa:	b2d9      	uxtb	r1, r3
 8008dfc:	2909      	cmp	r1, #9
 8008dfe:	d926      	bls.n	8008e4e <_strtod_l+0x1ae>
 8008e00:	494c      	ldr	r1, [pc, #304]	; (8008f34 <_strtod_l+0x294>)
 8008e02:	2201      	movs	r2, #1
 8008e04:	f001 fd7f 	bl	800a906 <strncmp>
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d030      	beq.n	8008e6e <_strtod_l+0x1ce>
 8008e0c:	2000      	movs	r0, #0
 8008e0e:	4632      	mov	r2, r6
 8008e10:	9005      	str	r0, [sp, #20]
 8008e12:	465e      	mov	r6, fp
 8008e14:	4603      	mov	r3, r0
 8008e16:	2a65      	cmp	r2, #101	; 0x65
 8008e18:	d001      	beq.n	8008e1e <_strtod_l+0x17e>
 8008e1a:	2a45      	cmp	r2, #69	; 0x45
 8008e1c:	d113      	bne.n	8008e46 <_strtod_l+0x1a6>
 8008e1e:	b91e      	cbnz	r6, 8008e28 <_strtod_l+0x188>
 8008e20:	9a04      	ldr	r2, [sp, #16]
 8008e22:	4302      	orrs	r2, r0
 8008e24:	d094      	beq.n	8008d50 <_strtod_l+0xb0>
 8008e26:	2600      	movs	r6, #0
 8008e28:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008e2a:	1c6a      	adds	r2, r5, #1
 8008e2c:	9215      	str	r2, [sp, #84]	; 0x54
 8008e2e:	786a      	ldrb	r2, [r5, #1]
 8008e30:	2a2b      	cmp	r2, #43	; 0x2b
 8008e32:	d074      	beq.n	8008f1e <_strtod_l+0x27e>
 8008e34:	2a2d      	cmp	r2, #45	; 0x2d
 8008e36:	d078      	beq.n	8008f2a <_strtod_l+0x28a>
 8008e38:	f04f 0c00 	mov.w	ip, #0
 8008e3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e40:	2909      	cmp	r1, #9
 8008e42:	d97f      	bls.n	8008f44 <_strtod_l+0x2a4>
 8008e44:	9515      	str	r5, [sp, #84]	; 0x54
 8008e46:	2700      	movs	r7, #0
 8008e48:	e09e      	b.n	8008f88 <_strtod_l+0x2e8>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e7c8      	b.n	8008de0 <_strtod_l+0x140>
 8008e4e:	f1bb 0f08 	cmp.w	fp, #8
 8008e52:	bfd8      	it	le
 8008e54:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008e56:	f100 0001 	add.w	r0, r0, #1
 8008e5a:	bfda      	itte	le
 8008e5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e60:	9309      	strle	r3, [sp, #36]	; 0x24
 8008e62:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008e66:	f10b 0b01 	add.w	fp, fp, #1
 8008e6a:	9015      	str	r0, [sp, #84]	; 0x54
 8008e6c:	e7c1      	b.n	8008df2 <_strtod_l+0x152>
 8008e6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	9215      	str	r2, [sp, #84]	; 0x54
 8008e74:	785a      	ldrb	r2, [r3, #1]
 8008e76:	f1bb 0f00 	cmp.w	fp, #0
 8008e7a:	d037      	beq.n	8008eec <_strtod_l+0x24c>
 8008e7c:	9005      	str	r0, [sp, #20]
 8008e7e:	465e      	mov	r6, fp
 8008e80:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d912      	bls.n	8008eae <_strtod_l+0x20e>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e7c4      	b.n	8008e16 <_strtod_l+0x176>
 8008e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	9215      	str	r2, [sp, #84]	; 0x54
 8008e92:	785a      	ldrb	r2, [r3, #1]
 8008e94:	3001      	adds	r0, #1
 8008e96:	2a30      	cmp	r2, #48	; 0x30
 8008e98:	d0f8      	beq.n	8008e8c <_strtod_l+0x1ec>
 8008e9a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	f200 84c1 	bhi.w	8009826 <_strtod_l+0xb86>
 8008ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ea6:	9005      	str	r0, [sp, #20]
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eac:	4606      	mov	r6, r0
 8008eae:	3a30      	subs	r2, #48	; 0x30
 8008eb0:	f100 0301 	add.w	r3, r0, #1
 8008eb4:	d014      	beq.n	8008ee0 <_strtod_l+0x240>
 8008eb6:	9905      	ldr	r1, [sp, #20]
 8008eb8:	4419      	add	r1, r3
 8008eba:	9105      	str	r1, [sp, #20]
 8008ebc:	4633      	mov	r3, r6
 8008ebe:	eb00 0c06 	add.w	ip, r0, r6
 8008ec2:	210a      	movs	r1, #10
 8008ec4:	4563      	cmp	r3, ip
 8008ec6:	d113      	bne.n	8008ef0 <_strtod_l+0x250>
 8008ec8:	1833      	adds	r3, r6, r0
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	f106 0601 	add.w	r6, r6, #1
 8008ed0:	4406      	add	r6, r0
 8008ed2:	dc1a      	bgt.n	8008f0a <_strtod_l+0x26a>
 8008ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ed6:	230a      	movs	r3, #10
 8008ed8:	fb03 2301 	mla	r3, r3, r1, r2
 8008edc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ede:	2300      	movs	r3, #0
 8008ee0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ee2:	1c51      	adds	r1, r2, #1
 8008ee4:	9115      	str	r1, [sp, #84]	; 0x54
 8008ee6:	7852      	ldrb	r2, [r2, #1]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	e7c9      	b.n	8008e80 <_strtod_l+0x1e0>
 8008eec:	4658      	mov	r0, fp
 8008eee:	e7d2      	b.n	8008e96 <_strtod_l+0x1f6>
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	f103 0301 	add.w	r3, r3, #1
 8008ef6:	dc03      	bgt.n	8008f00 <_strtod_l+0x260>
 8008ef8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008efa:	434f      	muls	r7, r1
 8008efc:	9709      	str	r7, [sp, #36]	; 0x24
 8008efe:	e7e1      	b.n	8008ec4 <_strtod_l+0x224>
 8008f00:	2b10      	cmp	r3, #16
 8008f02:	bfd8      	it	le
 8008f04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008f08:	e7dc      	b.n	8008ec4 <_strtod_l+0x224>
 8008f0a:	2e10      	cmp	r6, #16
 8008f0c:	bfdc      	itt	le
 8008f0e:	230a      	movle	r3, #10
 8008f10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008f14:	e7e3      	b.n	8008ede <_strtod_l+0x23e>
 8008f16:	2300      	movs	r3, #0
 8008f18:	9305      	str	r3, [sp, #20]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e780      	b.n	8008e20 <_strtod_l+0x180>
 8008f1e:	f04f 0c00 	mov.w	ip, #0
 8008f22:	1caa      	adds	r2, r5, #2
 8008f24:	9215      	str	r2, [sp, #84]	; 0x54
 8008f26:	78aa      	ldrb	r2, [r5, #2]
 8008f28:	e788      	b.n	8008e3c <_strtod_l+0x19c>
 8008f2a:	f04f 0c01 	mov.w	ip, #1
 8008f2e:	e7f8      	b.n	8008f22 <_strtod_l+0x282>
 8008f30:	0800d6e0 	.word	0x0800d6e0
 8008f34:	0800d6dc 	.word	0x0800d6dc
 8008f38:	7ff00000 	.word	0x7ff00000
 8008f3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f3e:	1c51      	adds	r1, r2, #1
 8008f40:	9115      	str	r1, [sp, #84]	; 0x54
 8008f42:	7852      	ldrb	r2, [r2, #1]
 8008f44:	2a30      	cmp	r2, #48	; 0x30
 8008f46:	d0f9      	beq.n	8008f3c <_strtod_l+0x29c>
 8008f48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f4c:	2908      	cmp	r1, #8
 8008f4e:	f63f af7a 	bhi.w	8008e46 <_strtod_l+0x1a6>
 8008f52:	3a30      	subs	r2, #48	; 0x30
 8008f54:	9208      	str	r2, [sp, #32]
 8008f56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f58:	920c      	str	r2, [sp, #48]	; 0x30
 8008f5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f5c:	1c57      	adds	r7, r2, #1
 8008f5e:	9715      	str	r7, [sp, #84]	; 0x54
 8008f60:	7852      	ldrb	r2, [r2, #1]
 8008f62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008f66:	f1be 0f09 	cmp.w	lr, #9
 8008f6a:	d938      	bls.n	8008fde <_strtod_l+0x33e>
 8008f6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f6e:	1a7f      	subs	r7, r7, r1
 8008f70:	2f08      	cmp	r7, #8
 8008f72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f76:	dc03      	bgt.n	8008f80 <_strtod_l+0x2e0>
 8008f78:	9908      	ldr	r1, [sp, #32]
 8008f7a:	428f      	cmp	r7, r1
 8008f7c:	bfa8      	it	ge
 8008f7e:	460f      	movge	r7, r1
 8008f80:	f1bc 0f00 	cmp.w	ip, #0
 8008f84:	d000      	beq.n	8008f88 <_strtod_l+0x2e8>
 8008f86:	427f      	negs	r7, r7
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	d14f      	bne.n	800902c <_strtod_l+0x38c>
 8008f8c:	9904      	ldr	r1, [sp, #16]
 8008f8e:	4301      	orrs	r1, r0
 8008f90:	f47f aec1 	bne.w	8008d16 <_strtod_l+0x76>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f47f aedb 	bne.w	8008d50 <_strtod_l+0xb0>
 8008f9a:	2a69      	cmp	r2, #105	; 0x69
 8008f9c:	d029      	beq.n	8008ff2 <_strtod_l+0x352>
 8008f9e:	dc26      	bgt.n	8008fee <_strtod_l+0x34e>
 8008fa0:	2a49      	cmp	r2, #73	; 0x49
 8008fa2:	d026      	beq.n	8008ff2 <_strtod_l+0x352>
 8008fa4:	2a4e      	cmp	r2, #78	; 0x4e
 8008fa6:	f47f aed3 	bne.w	8008d50 <_strtod_l+0xb0>
 8008faa:	499b      	ldr	r1, [pc, #620]	; (8009218 <_strtod_l+0x578>)
 8008fac:	a815      	add	r0, sp, #84	; 0x54
 8008fae:	f002 ffa1 	bl	800bef4 <__match>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f43f aecc 	beq.w	8008d50 <_strtod_l+0xb0>
 8008fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b28      	cmp	r3, #40	; 0x28
 8008fbe:	d12f      	bne.n	8009020 <_strtod_l+0x380>
 8008fc0:	4996      	ldr	r1, [pc, #600]	; (800921c <_strtod_l+0x57c>)
 8008fc2:	aa18      	add	r2, sp, #96	; 0x60
 8008fc4:	a815      	add	r0, sp, #84	; 0x54
 8008fc6:	f002 ffa9 	bl	800bf1c <__hexnan>
 8008fca:	2805      	cmp	r0, #5
 8008fcc:	d128      	bne.n	8009020 <_strtod_l+0x380>
 8008fce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fd4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fd8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fdc:	e69b      	b.n	8008d16 <_strtod_l+0x76>
 8008fde:	9f08      	ldr	r7, [sp, #32]
 8008fe0:	210a      	movs	r1, #10
 8008fe2:	fb01 2107 	mla	r1, r1, r7, r2
 8008fe6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008fea:	9208      	str	r2, [sp, #32]
 8008fec:	e7b5      	b.n	8008f5a <_strtod_l+0x2ba>
 8008fee:	2a6e      	cmp	r2, #110	; 0x6e
 8008ff0:	e7d9      	b.n	8008fa6 <_strtod_l+0x306>
 8008ff2:	498b      	ldr	r1, [pc, #556]	; (8009220 <_strtod_l+0x580>)
 8008ff4:	a815      	add	r0, sp, #84	; 0x54
 8008ff6:	f002 ff7d 	bl	800bef4 <__match>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f43f aea8 	beq.w	8008d50 <_strtod_l+0xb0>
 8009000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009002:	4988      	ldr	r1, [pc, #544]	; (8009224 <_strtod_l+0x584>)
 8009004:	3b01      	subs	r3, #1
 8009006:	a815      	add	r0, sp, #84	; 0x54
 8009008:	9315      	str	r3, [sp, #84]	; 0x54
 800900a:	f002 ff73 	bl	800bef4 <__match>
 800900e:	b910      	cbnz	r0, 8009016 <_strtod_l+0x376>
 8009010:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009012:	3301      	adds	r3, #1
 8009014:	9315      	str	r3, [sp, #84]	; 0x54
 8009016:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009234 <_strtod_l+0x594>
 800901a:	f04f 0800 	mov.w	r8, #0
 800901e:	e67a      	b.n	8008d16 <_strtod_l+0x76>
 8009020:	4881      	ldr	r0, [pc, #516]	; (8009228 <_strtod_l+0x588>)
 8009022:	f001 fdcd 	bl	800abc0 <nan>
 8009026:	ec59 8b10 	vmov	r8, r9, d0
 800902a:	e674      	b.n	8008d16 <_strtod_l+0x76>
 800902c:	9b05      	ldr	r3, [sp, #20]
 800902e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009030:	1afb      	subs	r3, r7, r3
 8009032:	f1bb 0f00 	cmp.w	fp, #0
 8009036:	bf08      	it	eq
 8009038:	46b3      	moveq	fp, r6
 800903a:	2e10      	cmp	r6, #16
 800903c:	9308      	str	r3, [sp, #32]
 800903e:	4635      	mov	r5, r6
 8009040:	bfa8      	it	ge
 8009042:	2510      	movge	r5, #16
 8009044:	f7f7 fa5e 	bl	8000504 <__aeabi_ui2d>
 8009048:	2e09      	cmp	r6, #9
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	dd13      	ble.n	8009078 <_strtod_l+0x3d8>
 8009050:	4b76      	ldr	r3, [pc, #472]	; (800922c <_strtod_l+0x58c>)
 8009052:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009056:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	4680      	mov	r8, r0
 8009060:	4650      	mov	r0, sl
 8009062:	4689      	mov	r9, r1
 8009064:	f7f7 fa4e 	bl	8000504 <__aeabi_ui2d>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4640      	mov	r0, r8
 800906e:	4649      	mov	r1, r9
 8009070:	f7f7 f90c 	bl	800028c <__adddf3>
 8009074:	4680      	mov	r8, r0
 8009076:	4689      	mov	r9, r1
 8009078:	2e0f      	cmp	r6, #15
 800907a:	dc38      	bgt.n	80090ee <_strtod_l+0x44e>
 800907c:	9b08      	ldr	r3, [sp, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f43f ae49 	beq.w	8008d16 <_strtod_l+0x76>
 8009084:	dd24      	ble.n	80090d0 <_strtod_l+0x430>
 8009086:	2b16      	cmp	r3, #22
 8009088:	dc0b      	bgt.n	80090a2 <_strtod_l+0x402>
 800908a:	4968      	ldr	r1, [pc, #416]	; (800922c <_strtod_l+0x58c>)
 800908c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	4680      	mov	r8, r0
 800909e:	4689      	mov	r9, r1
 80090a0:	e639      	b.n	8008d16 <_strtod_l+0x76>
 80090a2:	9a08      	ldr	r2, [sp, #32]
 80090a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80090a8:	4293      	cmp	r3, r2
 80090aa:	db20      	blt.n	80090ee <_strtod_l+0x44e>
 80090ac:	4c5f      	ldr	r4, [pc, #380]	; (800922c <_strtod_l+0x58c>)
 80090ae:	f1c6 060f 	rsb	r6, r6, #15
 80090b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80090b6:	4642      	mov	r2, r8
 80090b8:	464b      	mov	r3, r9
 80090ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090be:	f7f7 fa9b 	bl	80005f8 <__aeabi_dmul>
 80090c2:	9b08      	ldr	r3, [sp, #32]
 80090c4:	1b9e      	subs	r6, r3, r6
 80090c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80090ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090ce:	e7e3      	b.n	8009098 <_strtod_l+0x3f8>
 80090d0:	9b08      	ldr	r3, [sp, #32]
 80090d2:	3316      	adds	r3, #22
 80090d4:	db0b      	blt.n	80090ee <_strtod_l+0x44e>
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	1bdf      	subs	r7, r3, r7
 80090da:	4b54      	ldr	r3, [pc, #336]	; (800922c <_strtod_l+0x58c>)
 80090dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80090e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fbb0 	bl	800084c <__aeabi_ddiv>
 80090ec:	e7d6      	b.n	800909c <_strtod_l+0x3fc>
 80090ee:	9b08      	ldr	r3, [sp, #32]
 80090f0:	1b75      	subs	r5, r6, r5
 80090f2:	441d      	add	r5, r3
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	dd70      	ble.n	80091da <_strtod_l+0x53a>
 80090f8:	f015 030f 	ands.w	r3, r5, #15
 80090fc:	d00a      	beq.n	8009114 <_strtod_l+0x474>
 80090fe:	494b      	ldr	r1, [pc, #300]	; (800922c <_strtod_l+0x58c>)
 8009100:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009104:	4642      	mov	r2, r8
 8009106:	464b      	mov	r3, r9
 8009108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800910c:	f7f7 fa74 	bl	80005f8 <__aeabi_dmul>
 8009110:	4680      	mov	r8, r0
 8009112:	4689      	mov	r9, r1
 8009114:	f035 050f 	bics.w	r5, r5, #15
 8009118:	d04d      	beq.n	80091b6 <_strtod_l+0x516>
 800911a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800911e:	dd22      	ble.n	8009166 <_strtod_l+0x4c6>
 8009120:	2500      	movs	r5, #0
 8009122:	46ab      	mov	fp, r5
 8009124:	9509      	str	r5, [sp, #36]	; 0x24
 8009126:	9505      	str	r5, [sp, #20]
 8009128:	2322      	movs	r3, #34	; 0x22
 800912a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009234 <_strtod_l+0x594>
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	f04f 0800 	mov.w	r8, #0
 8009134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	f43f aded 	beq.w	8008d16 <_strtod_l+0x76>
 800913c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800913e:	4620      	mov	r0, r4
 8009140:	f002 ffda 	bl	800c0f8 <_Bfree>
 8009144:	9905      	ldr	r1, [sp, #20]
 8009146:	4620      	mov	r0, r4
 8009148:	f002 ffd6 	bl	800c0f8 <_Bfree>
 800914c:	4659      	mov	r1, fp
 800914e:	4620      	mov	r0, r4
 8009150:	f002 ffd2 	bl	800c0f8 <_Bfree>
 8009154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009156:	4620      	mov	r0, r4
 8009158:	f002 ffce 	bl	800c0f8 <_Bfree>
 800915c:	4629      	mov	r1, r5
 800915e:	4620      	mov	r0, r4
 8009160:	f002 ffca 	bl	800c0f8 <_Bfree>
 8009164:	e5d7      	b.n	8008d16 <_strtod_l+0x76>
 8009166:	4b32      	ldr	r3, [pc, #200]	; (8009230 <_strtod_l+0x590>)
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	2300      	movs	r3, #0
 800916c:	112d      	asrs	r5, r5, #4
 800916e:	4640      	mov	r0, r8
 8009170:	4649      	mov	r1, r9
 8009172:	469a      	mov	sl, r3
 8009174:	2d01      	cmp	r5, #1
 8009176:	dc21      	bgt.n	80091bc <_strtod_l+0x51c>
 8009178:	b10b      	cbz	r3, 800917e <_strtod_l+0x4de>
 800917a:	4680      	mov	r8, r0
 800917c:	4689      	mov	r9, r1
 800917e:	492c      	ldr	r1, [pc, #176]	; (8009230 <_strtod_l+0x590>)
 8009180:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009184:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009188:	4642      	mov	r2, r8
 800918a:	464b      	mov	r3, r9
 800918c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009190:	f7f7 fa32 	bl	80005f8 <__aeabi_dmul>
 8009194:	4b27      	ldr	r3, [pc, #156]	; (8009234 <_strtod_l+0x594>)
 8009196:	460a      	mov	r2, r1
 8009198:	400b      	ands	r3, r1
 800919a:	4927      	ldr	r1, [pc, #156]	; (8009238 <_strtod_l+0x598>)
 800919c:	428b      	cmp	r3, r1
 800919e:	4680      	mov	r8, r0
 80091a0:	d8be      	bhi.n	8009120 <_strtod_l+0x480>
 80091a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091a6:	428b      	cmp	r3, r1
 80091a8:	bf86      	itte	hi
 80091aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800923c <_strtod_l+0x59c>
 80091ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80091b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80091b6:	2300      	movs	r3, #0
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	e07b      	b.n	80092b4 <_strtod_l+0x614>
 80091bc:	07ea      	lsls	r2, r5, #31
 80091be:	d505      	bpl.n	80091cc <_strtod_l+0x52c>
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 fa17 	bl	80005f8 <__aeabi_dmul>
 80091ca:	2301      	movs	r3, #1
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	3208      	adds	r2, #8
 80091d0:	f10a 0a01 	add.w	sl, sl, #1
 80091d4:	106d      	asrs	r5, r5, #1
 80091d6:	9204      	str	r2, [sp, #16]
 80091d8:	e7cc      	b.n	8009174 <_strtod_l+0x4d4>
 80091da:	d0ec      	beq.n	80091b6 <_strtod_l+0x516>
 80091dc:	426d      	negs	r5, r5
 80091de:	f015 020f 	ands.w	r2, r5, #15
 80091e2:	d00a      	beq.n	80091fa <_strtod_l+0x55a>
 80091e4:	4b11      	ldr	r3, [pc, #68]	; (800922c <_strtod_l+0x58c>)
 80091e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 fb2b 	bl	800084c <__aeabi_ddiv>
 80091f6:	4680      	mov	r8, r0
 80091f8:	4689      	mov	r9, r1
 80091fa:	112d      	asrs	r5, r5, #4
 80091fc:	d0db      	beq.n	80091b6 <_strtod_l+0x516>
 80091fe:	2d1f      	cmp	r5, #31
 8009200:	dd1e      	ble.n	8009240 <_strtod_l+0x5a0>
 8009202:	2500      	movs	r5, #0
 8009204:	46ab      	mov	fp, r5
 8009206:	9509      	str	r5, [sp, #36]	; 0x24
 8009208:	9505      	str	r5, [sp, #20]
 800920a:	2322      	movs	r3, #34	; 0x22
 800920c:	f04f 0800 	mov.w	r8, #0
 8009210:	f04f 0900 	mov.w	r9, #0
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	e78d      	b.n	8009134 <_strtod_l+0x494>
 8009218:	0800d83e 	.word	0x0800d83e
 800921c:	0800d6f4 	.word	0x0800d6f4
 8009220:	0800d836 	.word	0x0800d836
 8009224:	0800d922 	.word	0x0800d922
 8009228:	0800d91e 	.word	0x0800d91e
 800922c:	0800da78 	.word	0x0800da78
 8009230:	0800da50 	.word	0x0800da50
 8009234:	7ff00000 	.word	0x7ff00000
 8009238:	7ca00000 	.word	0x7ca00000
 800923c:	7fefffff 	.word	0x7fefffff
 8009240:	f015 0310 	ands.w	r3, r5, #16
 8009244:	bf18      	it	ne
 8009246:	236a      	movne	r3, #106	; 0x6a
 8009248:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80095ec <_strtod_l+0x94c>
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	2300      	movs	r3, #0
 8009254:	07ea      	lsls	r2, r5, #31
 8009256:	d504      	bpl.n	8009262 <_strtod_l+0x5c2>
 8009258:	e9da 2300 	ldrd	r2, r3, [sl]
 800925c:	f7f7 f9cc 	bl	80005f8 <__aeabi_dmul>
 8009260:	2301      	movs	r3, #1
 8009262:	106d      	asrs	r5, r5, #1
 8009264:	f10a 0a08 	add.w	sl, sl, #8
 8009268:	d1f4      	bne.n	8009254 <_strtod_l+0x5b4>
 800926a:	b10b      	cbz	r3, 8009270 <_strtod_l+0x5d0>
 800926c:	4680      	mov	r8, r0
 800926e:	4689      	mov	r9, r1
 8009270:	9b04      	ldr	r3, [sp, #16]
 8009272:	b1bb      	cbz	r3, 80092a4 <_strtod_l+0x604>
 8009274:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009278:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800927c:	2b00      	cmp	r3, #0
 800927e:	4649      	mov	r1, r9
 8009280:	dd10      	ble.n	80092a4 <_strtod_l+0x604>
 8009282:	2b1f      	cmp	r3, #31
 8009284:	f340 811e 	ble.w	80094c4 <_strtod_l+0x824>
 8009288:	2b34      	cmp	r3, #52	; 0x34
 800928a:	bfde      	ittt	le
 800928c:	f04f 33ff 	movle.w	r3, #4294967295
 8009290:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009294:	4093      	lslle	r3, r2
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	bfcc      	ite	gt
 800929c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092a0:	ea03 0901 	andle.w	r9, r3, r1
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1a6      	bne.n	8009202 <_strtod_l+0x562>
 80092b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ba:	4633      	mov	r3, r6
 80092bc:	465a      	mov	r2, fp
 80092be:	4620      	mov	r0, r4
 80092c0:	f002 ff82 	bl	800c1c8 <__s2b>
 80092c4:	9009      	str	r0, [sp, #36]	; 0x24
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f af2a 	beq.w	8009120 <_strtod_l+0x480>
 80092cc:	9a08      	ldr	r2, [sp, #32]
 80092ce:	9b05      	ldr	r3, [sp, #20]
 80092d0:	2a00      	cmp	r2, #0
 80092d2:	eba3 0307 	sub.w	r3, r3, r7
 80092d6:	bfa8      	it	ge
 80092d8:	2300      	movge	r3, #0
 80092da:	930c      	str	r3, [sp, #48]	; 0x30
 80092dc:	2500      	movs	r5, #0
 80092de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80092e2:	9312      	str	r3, [sp, #72]	; 0x48
 80092e4:	46ab      	mov	fp, r5
 80092e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e8:	4620      	mov	r0, r4
 80092ea:	6859      	ldr	r1, [r3, #4]
 80092ec:	f002 fec4 	bl	800c078 <_Balloc>
 80092f0:	9005      	str	r0, [sp, #20]
 80092f2:	2800      	cmp	r0, #0
 80092f4:	f43f af18 	beq.w	8009128 <_strtod_l+0x488>
 80092f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	3202      	adds	r2, #2
 80092fe:	f103 010c 	add.w	r1, r3, #12
 8009302:	0092      	lsls	r2, r2, #2
 8009304:	300c      	adds	r0, #12
 8009306:	f001 fc4a 	bl	800ab9e <memcpy>
 800930a:	ec49 8b10 	vmov	d0, r8, r9
 800930e:	aa18      	add	r2, sp, #96	; 0x60
 8009310:	a917      	add	r1, sp, #92	; 0x5c
 8009312:	4620      	mov	r0, r4
 8009314:	f003 fa8c 	bl	800c830 <__d2b>
 8009318:	ec49 8b18 	vmov	d8, r8, r9
 800931c:	9016      	str	r0, [sp, #88]	; 0x58
 800931e:	2800      	cmp	r0, #0
 8009320:	f43f af02 	beq.w	8009128 <_strtod_l+0x488>
 8009324:	2101      	movs	r1, #1
 8009326:	4620      	mov	r0, r4
 8009328:	f002 ffe6 	bl	800c2f8 <__i2b>
 800932c:	4683      	mov	fp, r0
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f aefa 	beq.w	8009128 <_strtod_l+0x488>
 8009334:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009336:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009338:	2e00      	cmp	r6, #0
 800933a:	bfab      	itete	ge
 800933c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800933e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009340:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009342:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009346:	bfac      	ite	ge
 8009348:	eb06 0a03 	addge.w	sl, r6, r3
 800934c:	1b9f      	sublt	r7, r3, r6
 800934e:	9b04      	ldr	r3, [sp, #16]
 8009350:	1af6      	subs	r6, r6, r3
 8009352:	4416      	add	r6, r2
 8009354:	4ba0      	ldr	r3, [pc, #640]	; (80095d8 <_strtod_l+0x938>)
 8009356:	3e01      	subs	r6, #1
 8009358:	429e      	cmp	r6, r3
 800935a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800935e:	f280 80c4 	bge.w	80094ea <_strtod_l+0x84a>
 8009362:	1b9b      	subs	r3, r3, r6
 8009364:	2b1f      	cmp	r3, #31
 8009366:	eba2 0203 	sub.w	r2, r2, r3
 800936a:	f04f 0101 	mov.w	r1, #1
 800936e:	f300 80b0 	bgt.w	80094d2 <_strtod_l+0x832>
 8009372:	fa01 f303 	lsl.w	r3, r1, r3
 8009376:	930e      	str	r3, [sp, #56]	; 0x38
 8009378:	2300      	movs	r3, #0
 800937a:	930d      	str	r3, [sp, #52]	; 0x34
 800937c:	eb0a 0602 	add.w	r6, sl, r2
 8009380:	9b04      	ldr	r3, [sp, #16]
 8009382:	45b2      	cmp	sl, r6
 8009384:	4417      	add	r7, r2
 8009386:	441f      	add	r7, r3
 8009388:	4653      	mov	r3, sl
 800938a:	bfa8      	it	ge
 800938c:	4633      	movge	r3, r6
 800938e:	42bb      	cmp	r3, r7
 8009390:	bfa8      	it	ge
 8009392:	463b      	movge	r3, r7
 8009394:	2b00      	cmp	r3, #0
 8009396:	bfc2      	ittt	gt
 8009398:	1af6      	subgt	r6, r6, r3
 800939a:	1aff      	subgt	r7, r7, r3
 800939c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80093a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dd17      	ble.n	80093d6 <_strtod_l+0x736>
 80093a6:	4659      	mov	r1, fp
 80093a8:	461a      	mov	r2, r3
 80093aa:	4620      	mov	r0, r4
 80093ac:	f003 f864 	bl	800c478 <__pow5mult>
 80093b0:	4683      	mov	fp, r0
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aeb8 	beq.w	8009128 <_strtod_l+0x488>
 80093b8:	4601      	mov	r1, r0
 80093ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093bc:	4620      	mov	r0, r4
 80093be:	f002 ffb1 	bl	800c324 <__multiply>
 80093c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f43f aeaf 	beq.w	8009128 <_strtod_l+0x488>
 80093ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093cc:	4620      	mov	r0, r4
 80093ce:	f002 fe93 	bl	800c0f8 <_Bfree>
 80093d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d4:	9316      	str	r3, [sp, #88]	; 0x58
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	f300 808c 	bgt.w	80094f4 <_strtod_l+0x854>
 80093dc:	9b08      	ldr	r3, [sp, #32]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dd08      	ble.n	80093f4 <_strtod_l+0x754>
 80093e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093e4:	9905      	ldr	r1, [sp, #20]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f003 f846 	bl	800c478 <__pow5mult>
 80093ec:	9005      	str	r0, [sp, #20]
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f ae9a 	beq.w	8009128 <_strtod_l+0x488>
 80093f4:	2f00      	cmp	r7, #0
 80093f6:	dd08      	ble.n	800940a <_strtod_l+0x76a>
 80093f8:	9905      	ldr	r1, [sp, #20]
 80093fa:	463a      	mov	r2, r7
 80093fc:	4620      	mov	r0, r4
 80093fe:	f003 f895 	bl	800c52c <__lshift>
 8009402:	9005      	str	r0, [sp, #20]
 8009404:	2800      	cmp	r0, #0
 8009406:	f43f ae8f 	beq.w	8009128 <_strtod_l+0x488>
 800940a:	f1ba 0f00 	cmp.w	sl, #0
 800940e:	dd08      	ble.n	8009422 <_strtod_l+0x782>
 8009410:	4659      	mov	r1, fp
 8009412:	4652      	mov	r2, sl
 8009414:	4620      	mov	r0, r4
 8009416:	f003 f889 	bl	800c52c <__lshift>
 800941a:	4683      	mov	fp, r0
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f ae83 	beq.w	8009128 <_strtod_l+0x488>
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009426:	4620      	mov	r0, r4
 8009428:	f003 f908 	bl	800c63c <__mdiff>
 800942c:	4605      	mov	r5, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f ae7a 	beq.w	8009128 <_strtod_l+0x488>
 8009434:	68c3      	ldr	r3, [r0, #12]
 8009436:	930b      	str	r3, [sp, #44]	; 0x2c
 8009438:	2300      	movs	r3, #0
 800943a:	60c3      	str	r3, [r0, #12]
 800943c:	4659      	mov	r1, fp
 800943e:	f003 f8e1 	bl	800c604 <__mcmp>
 8009442:	2800      	cmp	r0, #0
 8009444:	da60      	bge.n	8009508 <_strtod_l+0x868>
 8009446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009448:	ea53 0308 	orrs.w	r3, r3, r8
 800944c:	f040 8084 	bne.w	8009558 <_strtod_l+0x8b8>
 8009450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009454:	2b00      	cmp	r3, #0
 8009456:	d17f      	bne.n	8009558 <_strtod_l+0x8b8>
 8009458:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800945c:	0d1b      	lsrs	r3, r3, #20
 800945e:	051b      	lsls	r3, r3, #20
 8009460:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009464:	d978      	bls.n	8009558 <_strtod_l+0x8b8>
 8009466:	696b      	ldr	r3, [r5, #20]
 8009468:	b913      	cbnz	r3, 8009470 <_strtod_l+0x7d0>
 800946a:	692b      	ldr	r3, [r5, #16]
 800946c:	2b01      	cmp	r3, #1
 800946e:	dd73      	ble.n	8009558 <_strtod_l+0x8b8>
 8009470:	4629      	mov	r1, r5
 8009472:	2201      	movs	r2, #1
 8009474:	4620      	mov	r0, r4
 8009476:	f003 f859 	bl	800c52c <__lshift>
 800947a:	4659      	mov	r1, fp
 800947c:	4605      	mov	r5, r0
 800947e:	f003 f8c1 	bl	800c604 <__mcmp>
 8009482:	2800      	cmp	r0, #0
 8009484:	dd68      	ble.n	8009558 <_strtod_l+0x8b8>
 8009486:	9904      	ldr	r1, [sp, #16]
 8009488:	4a54      	ldr	r2, [pc, #336]	; (80095dc <_strtod_l+0x93c>)
 800948a:	464b      	mov	r3, r9
 800948c:	2900      	cmp	r1, #0
 800948e:	f000 8084 	beq.w	800959a <_strtod_l+0x8fa>
 8009492:	ea02 0109 	and.w	r1, r2, r9
 8009496:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800949a:	dc7e      	bgt.n	800959a <_strtod_l+0x8fa>
 800949c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094a0:	f77f aeb3 	ble.w	800920a <_strtod_l+0x56a>
 80094a4:	4b4e      	ldr	r3, [pc, #312]	; (80095e0 <_strtod_l+0x940>)
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f7 f8a4 	bl	80005f8 <__aeabi_dmul>
 80094b0:	4b4a      	ldr	r3, [pc, #296]	; (80095dc <_strtod_l+0x93c>)
 80094b2:	400b      	ands	r3, r1
 80094b4:	4680      	mov	r8, r0
 80094b6:	4689      	mov	r9, r1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f47f ae3f 	bne.w	800913c <_strtod_l+0x49c>
 80094be:	2322      	movs	r3, #34	; 0x22
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	e63b      	b.n	800913c <_strtod_l+0x49c>
 80094c4:	f04f 32ff 	mov.w	r2, #4294967295
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	ea03 0808 	and.w	r8, r3, r8
 80094d0:	e6e8      	b.n	80092a4 <_strtod_l+0x604>
 80094d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80094d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80094da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80094de:	36e2      	adds	r6, #226	; 0xe2
 80094e0:	fa01 f306 	lsl.w	r3, r1, r6
 80094e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80094e8:	e748      	b.n	800937c <_strtod_l+0x6dc>
 80094ea:	2100      	movs	r1, #0
 80094ec:	2301      	movs	r3, #1
 80094ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80094f2:	e743      	b.n	800937c <_strtod_l+0x6dc>
 80094f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094f6:	4632      	mov	r2, r6
 80094f8:	4620      	mov	r0, r4
 80094fa:	f003 f817 	bl	800c52c <__lshift>
 80094fe:	9016      	str	r0, [sp, #88]	; 0x58
 8009500:	2800      	cmp	r0, #0
 8009502:	f47f af6b 	bne.w	80093dc <_strtod_l+0x73c>
 8009506:	e60f      	b.n	8009128 <_strtod_l+0x488>
 8009508:	46ca      	mov	sl, r9
 800950a:	d171      	bne.n	80095f0 <_strtod_l+0x950>
 800950c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800950e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009512:	b352      	cbz	r2, 800956a <_strtod_l+0x8ca>
 8009514:	4a33      	ldr	r2, [pc, #204]	; (80095e4 <_strtod_l+0x944>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d12a      	bne.n	8009570 <_strtod_l+0x8d0>
 800951a:	9b04      	ldr	r3, [sp, #16]
 800951c:	4641      	mov	r1, r8
 800951e:	b1fb      	cbz	r3, 8009560 <_strtod_l+0x8c0>
 8009520:	4b2e      	ldr	r3, [pc, #184]	; (80095dc <_strtod_l+0x93c>)
 8009522:	ea09 0303 	and.w	r3, r9, r3
 8009526:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800952a:	f04f 32ff 	mov.w	r2, #4294967295
 800952e:	d81a      	bhi.n	8009566 <_strtod_l+0x8c6>
 8009530:	0d1b      	lsrs	r3, r3, #20
 8009532:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009536:	fa02 f303 	lsl.w	r3, r2, r3
 800953a:	4299      	cmp	r1, r3
 800953c:	d118      	bne.n	8009570 <_strtod_l+0x8d0>
 800953e:	4b2a      	ldr	r3, [pc, #168]	; (80095e8 <_strtod_l+0x948>)
 8009540:	459a      	cmp	sl, r3
 8009542:	d102      	bne.n	800954a <_strtod_l+0x8aa>
 8009544:	3101      	adds	r1, #1
 8009546:	f43f adef 	beq.w	8009128 <_strtod_l+0x488>
 800954a:	4b24      	ldr	r3, [pc, #144]	; (80095dc <_strtod_l+0x93c>)
 800954c:	ea0a 0303 	and.w	r3, sl, r3
 8009550:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	9b04      	ldr	r3, [sp, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1a2      	bne.n	80094a4 <_strtod_l+0x804>
 800955e:	e5ed      	b.n	800913c <_strtod_l+0x49c>
 8009560:	f04f 33ff 	mov.w	r3, #4294967295
 8009564:	e7e9      	b.n	800953a <_strtod_l+0x89a>
 8009566:	4613      	mov	r3, r2
 8009568:	e7e7      	b.n	800953a <_strtod_l+0x89a>
 800956a:	ea53 0308 	orrs.w	r3, r3, r8
 800956e:	d08a      	beq.n	8009486 <_strtod_l+0x7e6>
 8009570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009572:	b1e3      	cbz	r3, 80095ae <_strtod_l+0x90e>
 8009574:	ea13 0f0a 	tst.w	r3, sl
 8009578:	d0ee      	beq.n	8009558 <_strtod_l+0x8b8>
 800957a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957c:	9a04      	ldr	r2, [sp, #16]
 800957e:	4640      	mov	r0, r8
 8009580:	4649      	mov	r1, r9
 8009582:	b1c3      	cbz	r3, 80095b6 <_strtod_l+0x916>
 8009584:	f7ff fb70 	bl	8008c68 <sulp>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	ec51 0b18 	vmov	r0, r1, d8
 8009590:	f7f6 fe7c 	bl	800028c <__adddf3>
 8009594:	4680      	mov	r8, r0
 8009596:	4689      	mov	r9, r1
 8009598:	e7de      	b.n	8009558 <_strtod_l+0x8b8>
 800959a:	4013      	ands	r3, r2
 800959c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095a8:	f04f 38ff 	mov.w	r8, #4294967295
 80095ac:	e7d4      	b.n	8009558 <_strtod_l+0x8b8>
 80095ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b0:	ea13 0f08 	tst.w	r3, r8
 80095b4:	e7e0      	b.n	8009578 <_strtod_l+0x8d8>
 80095b6:	f7ff fb57 	bl	8008c68 <sulp>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	ec51 0b18 	vmov	r0, r1, d8
 80095c2:	f7f6 fe61 	bl	8000288 <__aeabi_dsub>
 80095c6:	2200      	movs	r2, #0
 80095c8:	2300      	movs	r3, #0
 80095ca:	4680      	mov	r8, r0
 80095cc:	4689      	mov	r9, r1
 80095ce:	f7f7 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0c0      	beq.n	8009558 <_strtod_l+0x8b8>
 80095d6:	e618      	b.n	800920a <_strtod_l+0x56a>
 80095d8:	fffffc02 	.word	0xfffffc02
 80095dc:	7ff00000 	.word	0x7ff00000
 80095e0:	39500000 	.word	0x39500000
 80095e4:	000fffff 	.word	0x000fffff
 80095e8:	7fefffff 	.word	0x7fefffff
 80095ec:	0800d708 	.word	0x0800d708
 80095f0:	4659      	mov	r1, fp
 80095f2:	4628      	mov	r0, r5
 80095f4:	f003 f976 	bl	800c8e4 <__ratio>
 80095f8:	ec57 6b10 	vmov	r6, r7, d0
 80095fc:	ee10 0a10 	vmov	r0, s0
 8009600:	2200      	movs	r2, #0
 8009602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009606:	4639      	mov	r1, r7
 8009608:	f7f7 fa72 	bl	8000af0 <__aeabi_dcmple>
 800960c:	2800      	cmp	r0, #0
 800960e:	d071      	beq.n	80096f4 <_strtod_l+0xa54>
 8009610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009612:	2b00      	cmp	r3, #0
 8009614:	d17c      	bne.n	8009710 <_strtod_l+0xa70>
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	d15a      	bne.n	80096d2 <_strtod_l+0xa32>
 800961c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009620:	2b00      	cmp	r3, #0
 8009622:	d15d      	bne.n	80096e0 <_strtod_l+0xa40>
 8009624:	4b90      	ldr	r3, [pc, #576]	; (8009868 <_strtod_l+0xbc8>)
 8009626:	2200      	movs	r2, #0
 8009628:	4630      	mov	r0, r6
 800962a:	4639      	mov	r1, r7
 800962c:	f7f7 fa56 	bl	8000adc <__aeabi_dcmplt>
 8009630:	2800      	cmp	r0, #0
 8009632:	d15c      	bne.n	80096ee <_strtod_l+0xa4e>
 8009634:	4630      	mov	r0, r6
 8009636:	4639      	mov	r1, r7
 8009638:	4b8c      	ldr	r3, [pc, #560]	; (800986c <_strtod_l+0xbcc>)
 800963a:	2200      	movs	r2, #0
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	4606      	mov	r6, r0
 8009642:	460f      	mov	r7, r1
 8009644:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009648:	9606      	str	r6, [sp, #24]
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009650:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009654:	4b86      	ldr	r3, [pc, #536]	; (8009870 <_strtod_l+0xbd0>)
 8009656:	ea0a 0303 	and.w	r3, sl, r3
 800965a:	930d      	str	r3, [sp, #52]	; 0x34
 800965c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800965e:	4b85      	ldr	r3, [pc, #532]	; (8009874 <_strtod_l+0xbd4>)
 8009660:	429a      	cmp	r2, r3
 8009662:	f040 8090 	bne.w	8009786 <_strtod_l+0xae6>
 8009666:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800966a:	ec49 8b10 	vmov	d0, r8, r9
 800966e:	f003 f86f 	bl	800c750 <__ulp>
 8009672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009676:	ec51 0b10 	vmov	r0, r1, d0
 800967a:	f7f6 ffbd 	bl	80005f8 <__aeabi_dmul>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	f7f6 fe03 	bl	800028c <__adddf3>
 8009686:	460b      	mov	r3, r1
 8009688:	4979      	ldr	r1, [pc, #484]	; (8009870 <_strtod_l+0xbd0>)
 800968a:	4a7b      	ldr	r2, [pc, #492]	; (8009878 <_strtod_l+0xbd8>)
 800968c:	4019      	ands	r1, r3
 800968e:	4291      	cmp	r1, r2
 8009690:	4680      	mov	r8, r0
 8009692:	d944      	bls.n	800971e <_strtod_l+0xa7e>
 8009694:	ee18 2a90 	vmov	r2, s17
 8009698:	4b78      	ldr	r3, [pc, #480]	; (800987c <_strtod_l+0xbdc>)
 800969a:	429a      	cmp	r2, r3
 800969c:	d104      	bne.n	80096a8 <_strtod_l+0xa08>
 800969e:	ee18 3a10 	vmov	r3, s16
 80096a2:	3301      	adds	r3, #1
 80096a4:	f43f ad40 	beq.w	8009128 <_strtod_l+0x488>
 80096a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800987c <_strtod_l+0xbdc>
 80096ac:	f04f 38ff 	mov.w	r8, #4294967295
 80096b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80096b2:	4620      	mov	r0, r4
 80096b4:	f002 fd20 	bl	800c0f8 <_Bfree>
 80096b8:	9905      	ldr	r1, [sp, #20]
 80096ba:	4620      	mov	r0, r4
 80096bc:	f002 fd1c 	bl	800c0f8 <_Bfree>
 80096c0:	4659      	mov	r1, fp
 80096c2:	4620      	mov	r0, r4
 80096c4:	f002 fd18 	bl	800c0f8 <_Bfree>
 80096c8:	4629      	mov	r1, r5
 80096ca:	4620      	mov	r0, r4
 80096cc:	f002 fd14 	bl	800c0f8 <_Bfree>
 80096d0:	e609      	b.n	80092e6 <_strtod_l+0x646>
 80096d2:	f1b8 0f01 	cmp.w	r8, #1
 80096d6:	d103      	bne.n	80096e0 <_strtod_l+0xa40>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	f43f ad95 	beq.w	800920a <_strtod_l+0x56a>
 80096e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009838 <_strtod_l+0xb98>
 80096e4:	4f60      	ldr	r7, [pc, #384]	; (8009868 <_strtod_l+0xbc8>)
 80096e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096ea:	2600      	movs	r6, #0
 80096ec:	e7ae      	b.n	800964c <_strtod_l+0x9ac>
 80096ee:	4f5f      	ldr	r7, [pc, #380]	; (800986c <_strtod_l+0xbcc>)
 80096f0:	2600      	movs	r6, #0
 80096f2:	e7a7      	b.n	8009644 <_strtod_l+0x9a4>
 80096f4:	4b5d      	ldr	r3, [pc, #372]	; (800986c <_strtod_l+0xbcc>)
 80096f6:	4630      	mov	r0, r6
 80096f8:	4639      	mov	r1, r7
 80096fa:	2200      	movs	r2, #0
 80096fc:	f7f6 ff7c 	bl	80005f8 <__aeabi_dmul>
 8009700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009702:	4606      	mov	r6, r0
 8009704:	460f      	mov	r7, r1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d09c      	beq.n	8009644 <_strtod_l+0x9a4>
 800970a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800970e:	e79d      	b.n	800964c <_strtod_l+0x9ac>
 8009710:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009840 <_strtod_l+0xba0>
 8009714:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009718:	ec57 6b17 	vmov	r6, r7, d7
 800971c:	e796      	b.n	800964c <_strtod_l+0x9ac>
 800971e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	46ca      	mov	sl, r9
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1c2      	bne.n	80096b0 <_strtod_l+0xa10>
 800972a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800972e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009730:	0d1b      	lsrs	r3, r3, #20
 8009732:	051b      	lsls	r3, r3, #20
 8009734:	429a      	cmp	r2, r3
 8009736:	d1bb      	bne.n	80096b0 <_strtod_l+0xa10>
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 fabc 	bl	8000cb8 <__aeabi_d2lz>
 8009740:	f7f6 ff2c 	bl	800059c <__aeabi_l2d>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4630      	mov	r0, r6
 800974a:	4639      	mov	r1, r7
 800974c:	f7f6 fd9c 	bl	8000288 <__aeabi_dsub>
 8009750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009752:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009756:	ea43 0308 	orr.w	r3, r3, r8
 800975a:	4313      	orrs	r3, r2
 800975c:	4606      	mov	r6, r0
 800975e:	460f      	mov	r7, r1
 8009760:	d054      	beq.n	800980c <_strtod_l+0xb6c>
 8009762:	a339      	add	r3, pc, #228	; (adr r3, 8009848 <_strtod_l+0xba8>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f7 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f47f ace5 	bne.w	800913c <_strtod_l+0x49c>
 8009772:	a337      	add	r3, pc, #220	; (adr r3, 8009850 <_strtod_l+0xbb0>)
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	4630      	mov	r0, r6
 800977a:	4639      	mov	r1, r7
 800977c:	f7f7 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8009780:	2800      	cmp	r0, #0
 8009782:	d095      	beq.n	80096b0 <_strtod_l+0xa10>
 8009784:	e4da      	b.n	800913c <_strtod_l+0x49c>
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	b333      	cbz	r3, 80097d8 <_strtod_l+0xb38>
 800978a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800978c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009790:	d822      	bhi.n	80097d8 <_strtod_l+0xb38>
 8009792:	a331      	add	r3, pc, #196	; (adr r3, 8009858 <_strtod_l+0xbb8>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f9a8 	bl	8000af0 <__aeabi_dcmple>
 80097a0:	b1a0      	cbz	r0, 80097cc <_strtod_l+0xb2c>
 80097a2:	4639      	mov	r1, r7
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7f7 f9ff 	bl	8000ba8 <__aeabi_d2uiz>
 80097aa:	2801      	cmp	r0, #1
 80097ac:	bf38      	it	cc
 80097ae:	2001      	movcc	r0, #1
 80097b0:	f7f6 fea8 	bl	8000504 <__aeabi_ui2d>
 80097b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	bb23      	cbnz	r3, 8009806 <_strtod_l+0xb66>
 80097bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097c0:	9010      	str	r0, [sp, #64]	; 0x40
 80097c2:	9311      	str	r3, [sp, #68]	; 0x44
 80097c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80097cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80097d4:	1a9b      	subs	r3, r3, r2
 80097d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80097d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80097dc:	eeb0 0a48 	vmov.f32	s0, s16
 80097e0:	eef0 0a68 	vmov.f32	s1, s17
 80097e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80097e8:	f002 ffb2 	bl	800c750 <__ulp>
 80097ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80097f0:	ec53 2b10 	vmov	r2, r3, d0
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	ec53 2b18 	vmov	r2, r3, d8
 80097fc:	f7f6 fd46 	bl	800028c <__adddf3>
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	e78d      	b.n	8009722 <_strtod_l+0xa82>
 8009806:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800980a:	e7db      	b.n	80097c4 <_strtod_l+0xb24>
 800980c:	a314      	add	r3, pc, #80	; (adr r3, 8009860 <_strtod_l+0xbc0>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f7 f963 	bl	8000adc <__aeabi_dcmplt>
 8009816:	e7b3      	b.n	8009780 <_strtod_l+0xae0>
 8009818:	2300      	movs	r3, #0
 800981a:	930a      	str	r3, [sp, #40]	; 0x28
 800981c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800981e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	f7ff ba7c 	b.w	8008d1e <_strtod_l+0x7e>
 8009826:	2a65      	cmp	r2, #101	; 0x65
 8009828:	f43f ab75 	beq.w	8008f16 <_strtod_l+0x276>
 800982c:	2a45      	cmp	r2, #69	; 0x45
 800982e:	f43f ab72 	beq.w	8008f16 <_strtod_l+0x276>
 8009832:	2301      	movs	r3, #1
 8009834:	f7ff bbaa 	b.w	8008f8c <_strtod_l+0x2ec>
 8009838:	00000000 	.word	0x00000000
 800983c:	bff00000 	.word	0xbff00000
 8009840:	00000000 	.word	0x00000000
 8009844:	3ff00000 	.word	0x3ff00000
 8009848:	94a03595 	.word	0x94a03595
 800984c:	3fdfffff 	.word	0x3fdfffff
 8009850:	35afe535 	.word	0x35afe535
 8009854:	3fe00000 	.word	0x3fe00000
 8009858:	ffc00000 	.word	0xffc00000
 800985c:	41dfffff 	.word	0x41dfffff
 8009860:	94a03595 	.word	0x94a03595
 8009864:	3fcfffff 	.word	0x3fcfffff
 8009868:	3ff00000 	.word	0x3ff00000
 800986c:	3fe00000 	.word	0x3fe00000
 8009870:	7ff00000 	.word	0x7ff00000
 8009874:	7fe00000 	.word	0x7fe00000
 8009878:	7c9fffff 	.word	0x7c9fffff
 800987c:	7fefffff 	.word	0x7fefffff

08009880 <_strtod_r>:
 8009880:	4b01      	ldr	r3, [pc, #4]	; (8009888 <_strtod_r+0x8>)
 8009882:	f7ff ba0d 	b.w	8008ca0 <_strtod_l>
 8009886:	bf00      	nop
 8009888:	2000001c 	.word	0x2000001c

0800988c <strtod>:
 800988c:	460a      	mov	r2, r1
 800988e:	4601      	mov	r1, r0
 8009890:	4802      	ldr	r0, [pc, #8]	; (800989c <strtod+0x10>)
 8009892:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <strtod+0x14>)
 8009894:	6800      	ldr	r0, [r0, #0]
 8009896:	f7ff ba03 	b.w	8008ca0 <_strtod_l>
 800989a:	bf00      	nop
 800989c:	200001d4 	.word	0x200001d4
 80098a0:	2000001c 	.word	0x2000001c

080098a4 <_strtol_l.constprop.0>:
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098aa:	d001      	beq.n	80098b0 <_strtol_l.constprop.0+0xc>
 80098ac:	2b24      	cmp	r3, #36	; 0x24
 80098ae:	d906      	bls.n	80098be <_strtol_l.constprop.0+0x1a>
 80098b0:	f001 f948 	bl	800ab44 <__errno>
 80098b4:	2316      	movs	r3, #22
 80098b6:	6003      	str	r3, [r0, #0]
 80098b8:	2000      	movs	r0, #0
 80098ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80099a4 <_strtol_l.constprop.0+0x100>
 80098c2:	460d      	mov	r5, r1
 80098c4:	462e      	mov	r6, r5
 80098c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80098ce:	f017 0708 	ands.w	r7, r7, #8
 80098d2:	d1f7      	bne.n	80098c4 <_strtol_l.constprop.0+0x20>
 80098d4:	2c2d      	cmp	r4, #45	; 0x2d
 80098d6:	d132      	bne.n	800993e <_strtol_l.constprop.0+0x9a>
 80098d8:	782c      	ldrb	r4, [r5, #0]
 80098da:	2701      	movs	r7, #1
 80098dc:	1cb5      	adds	r5, r6, #2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d05b      	beq.n	800999a <_strtol_l.constprop.0+0xf6>
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d109      	bne.n	80098fa <_strtol_l.constprop.0+0x56>
 80098e6:	2c30      	cmp	r4, #48	; 0x30
 80098e8:	d107      	bne.n	80098fa <_strtol_l.constprop.0+0x56>
 80098ea:	782c      	ldrb	r4, [r5, #0]
 80098ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80098f0:	2c58      	cmp	r4, #88	; 0x58
 80098f2:	d14d      	bne.n	8009990 <_strtol_l.constprop.0+0xec>
 80098f4:	786c      	ldrb	r4, [r5, #1]
 80098f6:	2310      	movs	r3, #16
 80098f8:	3502      	adds	r5, #2
 80098fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80098fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009902:	f04f 0e00 	mov.w	lr, #0
 8009906:	fbb8 f9f3 	udiv	r9, r8, r3
 800990a:	4676      	mov	r6, lr
 800990c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009910:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009914:	f1bc 0f09 	cmp.w	ip, #9
 8009918:	d816      	bhi.n	8009948 <_strtol_l.constprop.0+0xa4>
 800991a:	4664      	mov	r4, ip
 800991c:	42a3      	cmp	r3, r4
 800991e:	dd24      	ble.n	800996a <_strtol_l.constprop.0+0xc6>
 8009920:	f1be 3fff 	cmp.w	lr, #4294967295
 8009924:	d008      	beq.n	8009938 <_strtol_l.constprop.0+0x94>
 8009926:	45b1      	cmp	r9, r6
 8009928:	d31c      	bcc.n	8009964 <_strtol_l.constprop.0+0xc0>
 800992a:	d101      	bne.n	8009930 <_strtol_l.constprop.0+0x8c>
 800992c:	45a2      	cmp	sl, r4
 800992e:	db19      	blt.n	8009964 <_strtol_l.constprop.0+0xc0>
 8009930:	fb06 4603 	mla	r6, r6, r3, r4
 8009934:	f04f 0e01 	mov.w	lr, #1
 8009938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800993c:	e7e8      	b.n	8009910 <_strtol_l.constprop.0+0x6c>
 800993e:	2c2b      	cmp	r4, #43	; 0x2b
 8009940:	bf04      	itt	eq
 8009942:	782c      	ldrbeq	r4, [r5, #0]
 8009944:	1cb5      	addeq	r5, r6, #2
 8009946:	e7ca      	b.n	80098de <_strtol_l.constprop.0+0x3a>
 8009948:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800994c:	f1bc 0f19 	cmp.w	ip, #25
 8009950:	d801      	bhi.n	8009956 <_strtol_l.constprop.0+0xb2>
 8009952:	3c37      	subs	r4, #55	; 0x37
 8009954:	e7e2      	b.n	800991c <_strtol_l.constprop.0+0x78>
 8009956:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800995a:	f1bc 0f19 	cmp.w	ip, #25
 800995e:	d804      	bhi.n	800996a <_strtol_l.constprop.0+0xc6>
 8009960:	3c57      	subs	r4, #87	; 0x57
 8009962:	e7db      	b.n	800991c <_strtol_l.constprop.0+0x78>
 8009964:	f04f 3eff 	mov.w	lr, #4294967295
 8009968:	e7e6      	b.n	8009938 <_strtol_l.constprop.0+0x94>
 800996a:	f1be 3fff 	cmp.w	lr, #4294967295
 800996e:	d105      	bne.n	800997c <_strtol_l.constprop.0+0xd8>
 8009970:	2322      	movs	r3, #34	; 0x22
 8009972:	6003      	str	r3, [r0, #0]
 8009974:	4646      	mov	r6, r8
 8009976:	b942      	cbnz	r2, 800998a <_strtol_l.constprop.0+0xe6>
 8009978:	4630      	mov	r0, r6
 800997a:	e79e      	b.n	80098ba <_strtol_l.constprop.0+0x16>
 800997c:	b107      	cbz	r7, 8009980 <_strtol_l.constprop.0+0xdc>
 800997e:	4276      	negs	r6, r6
 8009980:	2a00      	cmp	r2, #0
 8009982:	d0f9      	beq.n	8009978 <_strtol_l.constprop.0+0xd4>
 8009984:	f1be 0f00 	cmp.w	lr, #0
 8009988:	d000      	beq.n	800998c <_strtol_l.constprop.0+0xe8>
 800998a:	1e69      	subs	r1, r5, #1
 800998c:	6011      	str	r1, [r2, #0]
 800998e:	e7f3      	b.n	8009978 <_strtol_l.constprop.0+0xd4>
 8009990:	2430      	movs	r4, #48	; 0x30
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1b1      	bne.n	80098fa <_strtol_l.constprop.0+0x56>
 8009996:	2308      	movs	r3, #8
 8009998:	e7af      	b.n	80098fa <_strtol_l.constprop.0+0x56>
 800999a:	2c30      	cmp	r4, #48	; 0x30
 800999c:	d0a5      	beq.n	80098ea <_strtol_l.constprop.0+0x46>
 800999e:	230a      	movs	r3, #10
 80099a0:	e7ab      	b.n	80098fa <_strtol_l.constprop.0+0x56>
 80099a2:	bf00      	nop
 80099a4:	0800d731 	.word	0x0800d731

080099a8 <_strtol_r>:
 80099a8:	f7ff bf7c 	b.w	80098a4 <_strtol_l.constprop.0>

080099ac <strtol>:
 80099ac:	4613      	mov	r3, r2
 80099ae:	460a      	mov	r2, r1
 80099b0:	4601      	mov	r1, r0
 80099b2:	4802      	ldr	r0, [pc, #8]	; (80099bc <strtol+0x10>)
 80099b4:	6800      	ldr	r0, [r0, #0]
 80099b6:	f7ff bf75 	b.w	80098a4 <_strtol_l.constprop.0>
 80099ba:	bf00      	nop
 80099bc:	200001d4 	.word	0x200001d4

080099c0 <__cvt>:
 80099c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099c4:	ec55 4b10 	vmov	r4, r5, d0
 80099c8:	2d00      	cmp	r5, #0
 80099ca:	460e      	mov	r6, r1
 80099cc:	4619      	mov	r1, r3
 80099ce:	462b      	mov	r3, r5
 80099d0:	bfbb      	ittet	lt
 80099d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099d6:	461d      	movlt	r5, r3
 80099d8:	2300      	movge	r3, #0
 80099da:	232d      	movlt	r3, #45	; 0x2d
 80099dc:	700b      	strb	r3, [r1, #0]
 80099de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099e4:	4691      	mov	r9, r2
 80099e6:	f023 0820 	bic.w	r8, r3, #32
 80099ea:	bfbc      	itt	lt
 80099ec:	4622      	movlt	r2, r4
 80099ee:	4614      	movlt	r4, r2
 80099f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099f4:	d005      	beq.n	8009a02 <__cvt+0x42>
 80099f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099fa:	d100      	bne.n	80099fe <__cvt+0x3e>
 80099fc:	3601      	adds	r6, #1
 80099fe:	2102      	movs	r1, #2
 8009a00:	e000      	b.n	8009a04 <__cvt+0x44>
 8009a02:	2103      	movs	r1, #3
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	ab02      	add	r3, sp, #8
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	ec45 4b10 	vmov	d0, r4, r5
 8009a10:	4653      	mov	r3, sl
 8009a12:	4632      	mov	r2, r6
 8009a14:	f001 f988 	bl	800ad28 <_dtoa_r>
 8009a18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	d102      	bne.n	8009a26 <__cvt+0x66>
 8009a20:	f019 0f01 	tst.w	r9, #1
 8009a24:	d022      	beq.n	8009a6c <__cvt+0xac>
 8009a26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a2a:	eb07 0906 	add.w	r9, r7, r6
 8009a2e:	d110      	bne.n	8009a52 <__cvt+0x92>
 8009a30:	783b      	ldrb	r3, [r7, #0]
 8009a32:	2b30      	cmp	r3, #48	; 0x30
 8009a34:	d10a      	bne.n	8009a4c <__cvt+0x8c>
 8009a36:	2200      	movs	r2, #0
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f7 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a42:	b918      	cbnz	r0, 8009a4c <__cvt+0x8c>
 8009a44:	f1c6 0601 	rsb	r6, r6, #1
 8009a48:	f8ca 6000 	str.w	r6, [sl]
 8009a4c:	f8da 3000 	ldr.w	r3, [sl]
 8009a50:	4499      	add	r9, r3
 8009a52:	2200      	movs	r2, #0
 8009a54:	2300      	movs	r3, #0
 8009a56:	4620      	mov	r0, r4
 8009a58:	4629      	mov	r1, r5
 8009a5a:	f7f7 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a5e:	b108      	cbz	r0, 8009a64 <__cvt+0xa4>
 8009a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a64:	2230      	movs	r2, #48	; 0x30
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	454b      	cmp	r3, r9
 8009a6a:	d307      	bcc.n	8009a7c <__cvt+0xbc>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a70:	1bdb      	subs	r3, r3, r7
 8009a72:	4638      	mov	r0, r7
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	b004      	add	sp, #16
 8009a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7c:	1c59      	adds	r1, r3, #1
 8009a7e:	9103      	str	r1, [sp, #12]
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	e7f0      	b.n	8009a66 <__cvt+0xa6>

08009a84 <__exponent>:
 8009a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a86:	4603      	mov	r3, r0
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	bfb8      	it	lt
 8009a8c:	4249      	neglt	r1, r1
 8009a8e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a92:	bfb4      	ite	lt
 8009a94:	222d      	movlt	r2, #45	; 0x2d
 8009a96:	222b      	movge	r2, #43	; 0x2b
 8009a98:	2909      	cmp	r1, #9
 8009a9a:	7042      	strb	r2, [r0, #1]
 8009a9c:	dd2a      	ble.n	8009af4 <__exponent+0x70>
 8009a9e:	f10d 0207 	add.w	r2, sp, #7
 8009aa2:	4617      	mov	r7, r2
 8009aa4:	260a      	movs	r6, #10
 8009aa6:	4694      	mov	ip, r2
 8009aa8:	fb91 f5f6 	sdiv	r5, r1, r6
 8009aac:	fb06 1415 	mls	r4, r6, r5, r1
 8009ab0:	3430      	adds	r4, #48	; 0x30
 8009ab2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	2c63      	cmp	r4, #99	; 0x63
 8009aba:	f102 32ff 	add.w	r2, r2, #4294967295
 8009abe:	4629      	mov	r1, r5
 8009ac0:	dcf1      	bgt.n	8009aa6 <__exponent+0x22>
 8009ac2:	3130      	adds	r1, #48	; 0x30
 8009ac4:	f1ac 0402 	sub.w	r4, ip, #2
 8009ac8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009acc:	1c41      	adds	r1, r0, #1
 8009ace:	4622      	mov	r2, r4
 8009ad0:	42ba      	cmp	r2, r7
 8009ad2:	d30a      	bcc.n	8009aea <__exponent+0x66>
 8009ad4:	f10d 0209 	add.w	r2, sp, #9
 8009ad8:	eba2 020c 	sub.w	r2, r2, ip
 8009adc:	42bc      	cmp	r4, r7
 8009ade:	bf88      	it	hi
 8009ae0:	2200      	movhi	r2, #0
 8009ae2:	4413      	add	r3, r2
 8009ae4:	1a18      	subs	r0, r3, r0
 8009ae6:	b003      	add	sp, #12
 8009ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009aee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009af2:	e7ed      	b.n	8009ad0 <__exponent+0x4c>
 8009af4:	2330      	movs	r3, #48	; 0x30
 8009af6:	3130      	adds	r1, #48	; 0x30
 8009af8:	7083      	strb	r3, [r0, #2]
 8009afa:	70c1      	strb	r1, [r0, #3]
 8009afc:	1d03      	adds	r3, r0, #4
 8009afe:	e7f1      	b.n	8009ae4 <__exponent+0x60>

08009b00 <_printf_float>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	ed2d 8b02 	vpush	{d8}
 8009b08:	b08d      	sub	sp, #52	; 0x34
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b10:	4616      	mov	r6, r2
 8009b12:	461f      	mov	r7, r3
 8009b14:	4605      	mov	r5, r0
 8009b16:	f000 ff65 	bl	800a9e4 <_localeconv_r>
 8009b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b1e:	4650      	mov	r0, sl
 8009b20:	f7f6 fba6 	bl	8000270 <strlen>
 8009b24:	2300      	movs	r3, #0
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	9305      	str	r3, [sp, #20]
 8009b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b34:	3307      	adds	r3, #7
 8009b36:	f023 0307 	bic.w	r3, r3, #7
 8009b3a:	f103 0208 	add.w	r2, r3, #8
 8009b3e:	f8c8 2000 	str.w	r2, [r8]
 8009b42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b4a:	9307      	str	r3, [sp, #28]
 8009b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b50:	ee08 0a10 	vmov	s16, r0
 8009b54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b5c:	4b9e      	ldr	r3, [pc, #632]	; (8009dd8 <_printf_float+0x2d8>)
 8009b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b62:	f7f6 ffe3 	bl	8000b2c <__aeabi_dcmpun>
 8009b66:	bb88      	cbnz	r0, 8009bcc <_printf_float+0xcc>
 8009b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b6c:	4b9a      	ldr	r3, [pc, #616]	; (8009dd8 <_printf_float+0x2d8>)
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b72:	f7f6 ffbd 	bl	8000af0 <__aeabi_dcmple>
 8009b76:	bb48      	cbnz	r0, 8009bcc <_printf_float+0xcc>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 ffac 	bl	8000adc <__aeabi_dcmplt>
 8009b84:	b110      	cbz	r0, 8009b8c <_printf_float+0x8c>
 8009b86:	232d      	movs	r3, #45	; 0x2d
 8009b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8c:	4a93      	ldr	r2, [pc, #588]	; (8009ddc <_printf_float+0x2dc>)
 8009b8e:	4b94      	ldr	r3, [pc, #592]	; (8009de0 <_printf_float+0x2e0>)
 8009b90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b94:	bf94      	ite	ls
 8009b96:	4690      	movls	r8, r2
 8009b98:	4698      	movhi	r8, r3
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	9b05      	ldr	r3, [sp, #20]
 8009ba0:	f023 0304 	bic.w	r3, r3, #4
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	9700      	str	r7, [sp, #0]
 8009bac:	4633      	mov	r3, r6
 8009bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f000 f9da 	bl	8009f6c <_printf_common>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f040 8090 	bne.w	8009cde <_printf_float+0x1de>
 8009bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc2:	b00d      	add	sp, #52	; 0x34
 8009bc4:	ecbd 8b02 	vpop	{d8}
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	4642      	mov	r2, r8
 8009bce:	464b      	mov	r3, r9
 8009bd0:	4640      	mov	r0, r8
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7f6 ffaa 	bl	8000b2c <__aeabi_dcmpun>
 8009bd8:	b140      	cbz	r0, 8009bec <_printf_float+0xec>
 8009bda:	464b      	mov	r3, r9
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfbc      	itt	lt
 8009be0:	232d      	movlt	r3, #45	; 0x2d
 8009be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009be6:	4a7f      	ldr	r2, [pc, #508]	; (8009de4 <_printf_float+0x2e4>)
 8009be8:	4b7f      	ldr	r3, [pc, #508]	; (8009de8 <_printf_float+0x2e8>)
 8009bea:	e7d1      	b.n	8009b90 <_printf_float+0x90>
 8009bec:	6863      	ldr	r3, [r4, #4]
 8009bee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009bf2:	9206      	str	r2, [sp, #24]
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	d13f      	bne.n	8009c78 <_printf_float+0x178>
 8009bf8:	2306      	movs	r3, #6
 8009bfa:	6063      	str	r3, [r4, #4]
 8009bfc:	9b05      	ldr	r3, [sp, #20]
 8009bfe:	6861      	ldr	r1, [r4, #4]
 8009c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c04:	2300      	movs	r3, #0
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	ab0a      	add	r3, sp, #40	; 0x28
 8009c0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c0e:	ab09      	add	r3, sp, #36	; 0x24
 8009c10:	ec49 8b10 	vmov	d0, r8, r9
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	6022      	str	r2, [r4, #0]
 8009c18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7ff fecf 	bl	80099c0 <__cvt>
 8009c22:	9b06      	ldr	r3, [sp, #24]
 8009c24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c26:	2b47      	cmp	r3, #71	; 0x47
 8009c28:	4680      	mov	r8, r0
 8009c2a:	d108      	bne.n	8009c3e <_printf_float+0x13e>
 8009c2c:	1cc8      	adds	r0, r1, #3
 8009c2e:	db02      	blt.n	8009c36 <_printf_float+0x136>
 8009c30:	6863      	ldr	r3, [r4, #4]
 8009c32:	4299      	cmp	r1, r3
 8009c34:	dd41      	ble.n	8009cba <_printf_float+0x1ba>
 8009c36:	f1ab 0302 	sub.w	r3, fp, #2
 8009c3a:	fa5f fb83 	uxtb.w	fp, r3
 8009c3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c42:	d820      	bhi.n	8009c86 <_printf_float+0x186>
 8009c44:	3901      	subs	r1, #1
 8009c46:	465a      	mov	r2, fp
 8009c48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c4c:	9109      	str	r1, [sp, #36]	; 0x24
 8009c4e:	f7ff ff19 	bl	8009a84 <__exponent>
 8009c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c54:	1813      	adds	r3, r2, r0
 8009c56:	2a01      	cmp	r2, #1
 8009c58:	4681      	mov	r9, r0
 8009c5a:	6123      	str	r3, [r4, #16]
 8009c5c:	dc02      	bgt.n	8009c64 <_printf_float+0x164>
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	07d2      	lsls	r2, r2, #31
 8009c62:	d501      	bpl.n	8009c68 <_printf_float+0x168>
 8009c64:	3301      	adds	r3, #1
 8009c66:	6123      	str	r3, [r4, #16]
 8009c68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d09c      	beq.n	8009baa <_printf_float+0xaa>
 8009c70:	232d      	movs	r3, #45	; 0x2d
 8009c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c76:	e798      	b.n	8009baa <_printf_float+0xaa>
 8009c78:	9a06      	ldr	r2, [sp, #24]
 8009c7a:	2a47      	cmp	r2, #71	; 0x47
 8009c7c:	d1be      	bne.n	8009bfc <_printf_float+0xfc>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1bc      	bne.n	8009bfc <_printf_float+0xfc>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e7b9      	b.n	8009bfa <_printf_float+0xfa>
 8009c86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c8a:	d118      	bne.n	8009cbe <_printf_float+0x1be>
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	6863      	ldr	r3, [r4, #4]
 8009c90:	dd0b      	ble.n	8009caa <_printf_float+0x1aa>
 8009c92:	6121      	str	r1, [r4, #16]
 8009c94:	b913      	cbnz	r3, 8009c9c <_printf_float+0x19c>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	07d0      	lsls	r0, r2, #31
 8009c9a:	d502      	bpl.n	8009ca2 <_printf_float+0x1a2>
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	440b      	add	r3, r1
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ca4:	f04f 0900 	mov.w	r9, #0
 8009ca8:	e7de      	b.n	8009c68 <_printf_float+0x168>
 8009caa:	b913      	cbnz	r3, 8009cb2 <_printf_float+0x1b2>
 8009cac:	6822      	ldr	r2, [r4, #0]
 8009cae:	07d2      	lsls	r2, r2, #31
 8009cb0:	d501      	bpl.n	8009cb6 <_printf_float+0x1b6>
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	e7f4      	b.n	8009ca0 <_printf_float+0x1a0>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e7f2      	b.n	8009ca0 <_printf_float+0x1a0>
 8009cba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	db05      	blt.n	8009cd0 <_printf_float+0x1d0>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	6121      	str	r1, [r4, #16]
 8009cc8:	07d8      	lsls	r0, r3, #31
 8009cca:	d5ea      	bpl.n	8009ca2 <_printf_float+0x1a2>
 8009ccc:	1c4b      	adds	r3, r1, #1
 8009cce:	e7e7      	b.n	8009ca0 <_printf_float+0x1a0>
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	bfd4      	ite	le
 8009cd4:	f1c1 0202 	rsble	r2, r1, #2
 8009cd8:	2201      	movgt	r2, #1
 8009cda:	4413      	add	r3, r2
 8009cdc:	e7e0      	b.n	8009ca0 <_printf_float+0x1a0>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	055a      	lsls	r2, r3, #21
 8009ce2:	d407      	bmi.n	8009cf4 <_printf_float+0x1f4>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4628      	mov	r0, r5
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	d12c      	bne.n	8009d4c <_printf_float+0x24c>
 8009cf2:	e764      	b.n	8009bbe <_printf_float+0xbe>
 8009cf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cf8:	f240 80e0 	bls.w	8009ebc <_printf_float+0x3bc>
 8009cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	f7f6 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d034      	beq.n	8009d76 <_printf_float+0x276>
 8009d0c:	4a37      	ldr	r2, [pc, #220]	; (8009dec <_printf_float+0x2ec>)
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af51 	beq.w	8009bbe <_printf_float+0xbe>
 8009d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d20:	429a      	cmp	r2, r3
 8009d22:	db02      	blt.n	8009d2a <_printf_float+0x22a>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	07d8      	lsls	r0, r3, #31
 8009d28:	d510      	bpl.n	8009d4c <_printf_float+0x24c>
 8009d2a:	ee18 3a10 	vmov	r3, s16
 8009d2e:	4652      	mov	r2, sl
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af41 	beq.w	8009bbe <_printf_float+0xbe>
 8009d3c:	f04f 0800 	mov.w	r8, #0
 8009d40:	f104 091a 	add.w	r9, r4, #26
 8009d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d46:	3b01      	subs	r3, #1
 8009d48:	4543      	cmp	r3, r8
 8009d4a:	dc09      	bgt.n	8009d60 <_printf_float+0x260>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079b      	lsls	r3, r3, #30
 8009d50:	f100 8107 	bmi.w	8009f62 <_printf_float+0x462>
 8009d54:	68e0      	ldr	r0, [r4, #12]
 8009d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d58:	4298      	cmp	r0, r3
 8009d5a:	bfb8      	it	lt
 8009d5c:	4618      	movlt	r0, r3
 8009d5e:	e730      	b.n	8009bc2 <_printf_float+0xc2>
 8009d60:	2301      	movs	r3, #1
 8009d62:	464a      	mov	r2, r9
 8009d64:	4631      	mov	r1, r6
 8009d66:	4628      	mov	r0, r5
 8009d68:	47b8      	blx	r7
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f43f af27 	beq.w	8009bbe <_printf_float+0xbe>
 8009d70:	f108 0801 	add.w	r8, r8, #1
 8009d74:	e7e6      	b.n	8009d44 <_printf_float+0x244>
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc39      	bgt.n	8009df0 <_printf_float+0x2f0>
 8009d7c:	4a1b      	ldr	r2, [pc, #108]	; (8009dec <_printf_float+0x2ec>)
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4631      	mov	r1, r6
 8009d82:	4628      	mov	r0, r5
 8009d84:	47b8      	blx	r7
 8009d86:	3001      	adds	r0, #1
 8009d88:	f43f af19 	beq.w	8009bbe <_printf_float+0xbe>
 8009d8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d90:	4313      	orrs	r3, r2
 8009d92:	d102      	bne.n	8009d9a <_printf_float+0x29a>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07d9      	lsls	r1, r3, #31
 8009d98:	d5d8      	bpl.n	8009d4c <_printf_float+0x24c>
 8009d9a:	ee18 3a10 	vmov	r3, s16
 8009d9e:	4652      	mov	r2, sl
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f af09 	beq.w	8009bbe <_printf_float+0xbe>
 8009dac:	f04f 0900 	mov.w	r9, #0
 8009db0:	f104 0a1a 	add.w	sl, r4, #26
 8009db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db6:	425b      	negs	r3, r3
 8009db8:	454b      	cmp	r3, r9
 8009dba:	dc01      	bgt.n	8009dc0 <_printf_float+0x2c0>
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbe:	e792      	b.n	8009ce6 <_printf_float+0x1e6>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4652      	mov	r2, sl
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f43f aef7 	beq.w	8009bbe <_printf_float+0xbe>
 8009dd0:	f109 0901 	add.w	r9, r9, #1
 8009dd4:	e7ee      	b.n	8009db4 <_printf_float+0x2b4>
 8009dd6:	bf00      	nop
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	0800d831 	.word	0x0800d831
 8009de0:	0800d835 	.word	0x0800d835
 8009de4:	0800d839 	.word	0x0800d839
 8009de8:	0800d83d 	.word	0x0800d83d
 8009dec:	0800d841 	.word	0x0800d841
 8009df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bfa8      	it	ge
 8009df8:	461a      	movge	r2, r3
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	4691      	mov	r9, r2
 8009dfe:	dc37      	bgt.n	8009e70 <_printf_float+0x370>
 8009e00:	f04f 0b00 	mov.w	fp, #0
 8009e04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e08:	f104 021a 	add.w	r2, r4, #26
 8009e0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e0e:	9305      	str	r3, [sp, #20]
 8009e10:	eba3 0309 	sub.w	r3, r3, r9
 8009e14:	455b      	cmp	r3, fp
 8009e16:	dc33      	bgt.n	8009e80 <_printf_float+0x380>
 8009e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	db3b      	blt.n	8009e98 <_printf_float+0x398>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	07da      	lsls	r2, r3, #31
 8009e24:	d438      	bmi.n	8009e98 <_printf_float+0x398>
 8009e26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e2a:	eba2 0903 	sub.w	r9, r2, r3
 8009e2e:	9b05      	ldr	r3, [sp, #20]
 8009e30:	1ad2      	subs	r2, r2, r3
 8009e32:	4591      	cmp	r9, r2
 8009e34:	bfa8      	it	ge
 8009e36:	4691      	movge	r9, r2
 8009e38:	f1b9 0f00 	cmp.w	r9, #0
 8009e3c:	dc35      	bgt.n	8009eaa <_printf_float+0x3aa>
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e46:	f104 0a1a 	add.w	sl, r4, #26
 8009e4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e4e:	1a9b      	subs	r3, r3, r2
 8009e50:	eba3 0309 	sub.w	r3, r3, r9
 8009e54:	4543      	cmp	r3, r8
 8009e56:	f77f af79 	ble.w	8009d4c <_printf_float+0x24c>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	4652      	mov	r2, sl
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4628      	mov	r0, r5
 8009e62:	47b8      	blx	r7
 8009e64:	3001      	adds	r0, #1
 8009e66:	f43f aeaa 	beq.w	8009bbe <_printf_float+0xbe>
 8009e6a:	f108 0801 	add.w	r8, r8, #1
 8009e6e:	e7ec      	b.n	8009e4a <_printf_float+0x34a>
 8009e70:	4613      	mov	r3, r2
 8009e72:	4631      	mov	r1, r6
 8009e74:	4642      	mov	r2, r8
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d1c0      	bne.n	8009e00 <_printf_float+0x300>
 8009e7e:	e69e      	b.n	8009bbe <_printf_float+0xbe>
 8009e80:	2301      	movs	r3, #1
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	9205      	str	r2, [sp, #20]
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f ae97 	beq.w	8009bbe <_printf_float+0xbe>
 8009e90:	9a05      	ldr	r2, [sp, #20]
 8009e92:	f10b 0b01 	add.w	fp, fp, #1
 8009e96:	e7b9      	b.n	8009e0c <_printf_float+0x30c>
 8009e98:	ee18 3a10 	vmov	r3, s16
 8009e9c:	4652      	mov	r2, sl
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d1be      	bne.n	8009e26 <_printf_float+0x326>
 8009ea8:	e689      	b.n	8009bbe <_printf_float+0xbe>
 8009eaa:	9a05      	ldr	r2, [sp, #20]
 8009eac:	464b      	mov	r3, r9
 8009eae:	4442      	add	r2, r8
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b8      	blx	r7
 8009eb6:	3001      	adds	r0, #1
 8009eb8:	d1c1      	bne.n	8009e3e <_printf_float+0x33e>
 8009eba:	e680      	b.n	8009bbe <_printf_float+0xbe>
 8009ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ebe:	2a01      	cmp	r2, #1
 8009ec0:	dc01      	bgt.n	8009ec6 <_printf_float+0x3c6>
 8009ec2:	07db      	lsls	r3, r3, #31
 8009ec4:	d53a      	bpl.n	8009f3c <_printf_float+0x43c>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4642      	mov	r2, r8
 8009eca:	4631      	mov	r1, r6
 8009ecc:	4628      	mov	r0, r5
 8009ece:	47b8      	blx	r7
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f43f ae74 	beq.w	8009bbe <_printf_float+0xbe>
 8009ed6:	ee18 3a10 	vmov	r3, s16
 8009eda:	4652      	mov	r2, sl
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f ae6b 	beq.w	8009bbe <_printf_float+0xbe>
 8009ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009eec:	2200      	movs	r2, #0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009ef4:	f7f6 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef8:	b9d8      	cbnz	r0, 8009f32 <_printf_float+0x432>
 8009efa:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009efe:	f108 0201 	add.w	r2, r8, #1
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d10e      	bne.n	8009f2a <_printf_float+0x42a>
 8009f0c:	e657      	b.n	8009bbe <_printf_float+0xbe>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4652      	mov	r2, sl
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae50 	beq.w	8009bbe <_printf_float+0xbe>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	4543      	cmp	r3, r8
 8009f28:	dcf1      	bgt.n	8009f0e <_printf_float+0x40e>
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f30:	e6da      	b.n	8009ce8 <_printf_float+0x1e8>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 0a1a 	add.w	sl, r4, #26
 8009f3a:	e7f2      	b.n	8009f22 <_printf_float+0x422>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4642      	mov	r2, r8
 8009f40:	e7df      	b.n	8009f02 <_printf_float+0x402>
 8009f42:	2301      	movs	r3, #1
 8009f44:	464a      	mov	r2, r9
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae36 	beq.w	8009bbe <_printf_float+0xbe>
 8009f52:	f108 0801 	add.w	r8, r8, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcf0      	bgt.n	8009f42 <_printf_float+0x442>
 8009f60:	e6f8      	b.n	8009d54 <_printf_float+0x254>
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	f104 0919 	add.w	r9, r4, #25
 8009f6a:	e7f4      	b.n	8009f56 <_printf_float+0x456>

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4699      	mov	r9, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc26      	bgt.n	800a002 <_printf_common+0x96>
 8009fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb8:	1e13      	subs	r3, r2, #0
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42b      	bmi.n	800a01c <_printf_common+0xb0>
 8009fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d01e      	beq.n	800a010 <_printf_common+0xa4>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	6922      	ldr	r2, [r4, #16]
 8009fd6:	f003 0306 	and.w	r3, r3, #6
 8009fda:	2b04      	cmp	r3, #4
 8009fdc:	bf02      	ittt	eq
 8009fde:	68e5      	ldreq	r5, [r4, #12]
 8009fe0:	6833      	ldreq	r3, [r6, #0]
 8009fe2:	1aed      	subeq	r5, r5, r3
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	341a      	adds	r4, #26
 8009ffa:	42b5      	cmp	r5, r6
 8009ffc:	d11a      	bne.n	800a034 <_printf_common+0xc8>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e008      	b.n	800a014 <_printf_common+0xa8>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4649      	mov	r1, r9
 800a008:	4638      	mov	r0, r7
 800a00a:	47c0      	blx	r8
 800a00c:	3001      	adds	r0, #1
 800a00e:	d103      	bne.n	800a018 <_printf_common+0xac>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	e7c6      	b.n	8009faa <_printf_common+0x3e>
 800a01c:	18e1      	adds	r1, r4, r3
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	2030      	movs	r0, #48	; 0x30
 800a022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a026:	4422      	add	r2, r4
 800a028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a030:	3302      	adds	r3, #2
 800a032:	e7c7      	b.n	8009fc4 <_printf_common+0x58>
 800a034:	2301      	movs	r3, #1
 800a036:	4622      	mov	r2, r4
 800a038:	4649      	mov	r1, r9
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c0      	blx	r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d0e6      	beq.n	800a010 <_printf_common+0xa4>
 800a042:	3601      	adds	r6, #1
 800a044:	e7d9      	b.n	8009ffa <_printf_common+0x8e>
	...

0800a048 <_printf_i>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	7e0f      	ldrb	r7, [r1, #24]
 800a04e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a050:	2f78      	cmp	r7, #120	; 0x78
 800a052:	4691      	mov	r9, r2
 800a054:	4680      	mov	r8, r0
 800a056:	460c      	mov	r4, r1
 800a058:	469a      	mov	sl, r3
 800a05a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a05e:	d807      	bhi.n	800a070 <_printf_i+0x28>
 800a060:	2f62      	cmp	r7, #98	; 0x62
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x32>
 800a064:	2f00      	cmp	r7, #0
 800a066:	f000 80d4 	beq.w	800a212 <_printf_i+0x1ca>
 800a06a:	2f58      	cmp	r7, #88	; 0x58
 800a06c:	f000 80c0 	beq.w	800a1f0 <_printf_i+0x1a8>
 800a070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a078:	e03a      	b.n	800a0f0 <_printf_i+0xa8>
 800a07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a07e:	2b15      	cmp	r3, #21
 800a080:	d8f6      	bhi.n	800a070 <_printf_i+0x28>
 800a082:	a101      	add	r1, pc, #4	; (adr r1, 800a088 <_printf_i+0x40>)
 800a084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a071 	.word	0x0800a071
 800a094:	0800a071 	.word	0x0800a071
 800a098:	0800a071 	.word	0x0800a071
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a071 	.word	0x0800a071
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a1f9 	.word	0x0800a1f9
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a1b3 	.word	0x0800a1b3
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a071 	.word	0x0800a071
 800a0c8:	0800a21b 	.word	0x0800a21b
 800a0cc:	0800a071 	.word	0x0800a071
 800a0d0:	0800a121 	.word	0x0800a121
 800a0d4:	0800a071 	.word	0x0800a071
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a1bb 	.word	0x0800a1bb
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	602a      	str	r2, [r5, #0]
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e09f      	b.n	800a234 <_printf_i+0x1ec>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	682b      	ldr	r3, [r5, #0]
 800a0f8:	0607      	lsls	r7, r0, #24
 800a0fa:	f103 0104 	add.w	r1, r3, #4
 800a0fe:	6029      	str	r1, [r5, #0]
 800a100:	d501      	bpl.n	800a106 <_printf_i+0xbe>
 800a102:	681e      	ldr	r6, [r3, #0]
 800a104:	e003      	b.n	800a10e <_printf_i+0xc6>
 800a106:	0646      	lsls	r6, r0, #25
 800a108:	d5fb      	bpl.n	800a102 <_printf_i+0xba>
 800a10a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a10e:	2e00      	cmp	r6, #0
 800a110:	da03      	bge.n	800a11a <_printf_i+0xd2>
 800a112:	232d      	movs	r3, #45	; 0x2d
 800a114:	4276      	negs	r6, r6
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a11a:	485a      	ldr	r0, [pc, #360]	; (800a284 <_printf_i+0x23c>)
 800a11c:	230a      	movs	r3, #10
 800a11e:	e012      	b.n	800a146 <_printf_i+0xfe>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	6820      	ldr	r0, [r4, #0]
 800a124:	1d19      	adds	r1, r3, #4
 800a126:	6029      	str	r1, [r5, #0]
 800a128:	0605      	lsls	r5, r0, #24
 800a12a:	d501      	bpl.n	800a130 <_printf_i+0xe8>
 800a12c:	681e      	ldr	r6, [r3, #0]
 800a12e:	e002      	b.n	800a136 <_printf_i+0xee>
 800a130:	0641      	lsls	r1, r0, #25
 800a132:	d5fb      	bpl.n	800a12c <_printf_i+0xe4>
 800a134:	881e      	ldrh	r6, [r3, #0]
 800a136:	4853      	ldr	r0, [pc, #332]	; (800a284 <_printf_i+0x23c>)
 800a138:	2f6f      	cmp	r7, #111	; 0x6f
 800a13a:	bf0c      	ite	eq
 800a13c:	2308      	moveq	r3, #8
 800a13e:	230a      	movne	r3, #10
 800a140:	2100      	movs	r1, #0
 800a142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a146:	6865      	ldr	r5, [r4, #4]
 800a148:	60a5      	str	r5, [r4, #8]
 800a14a:	2d00      	cmp	r5, #0
 800a14c:	bfa2      	ittt	ge
 800a14e:	6821      	ldrge	r1, [r4, #0]
 800a150:	f021 0104 	bicge.w	r1, r1, #4
 800a154:	6021      	strge	r1, [r4, #0]
 800a156:	b90e      	cbnz	r6, 800a15c <_printf_i+0x114>
 800a158:	2d00      	cmp	r5, #0
 800a15a:	d04b      	beq.n	800a1f4 <_printf_i+0x1ac>
 800a15c:	4615      	mov	r5, r2
 800a15e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a162:	fb03 6711 	mls	r7, r3, r1, r6
 800a166:	5dc7      	ldrb	r7, [r0, r7]
 800a168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a16c:	4637      	mov	r7, r6
 800a16e:	42bb      	cmp	r3, r7
 800a170:	460e      	mov	r6, r1
 800a172:	d9f4      	bls.n	800a15e <_printf_i+0x116>
 800a174:	2b08      	cmp	r3, #8
 800a176:	d10b      	bne.n	800a190 <_printf_i+0x148>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07de      	lsls	r6, r3, #31
 800a17c:	d508      	bpl.n	800a190 <_printf_i+0x148>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	6861      	ldr	r1, [r4, #4]
 800a182:	4299      	cmp	r1, r3
 800a184:	bfde      	ittt	le
 800a186:	2330      	movle	r3, #48	; 0x30
 800a188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a18c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a190:	1b52      	subs	r2, r2, r5
 800a192:	6122      	str	r2, [r4, #16]
 800a194:	f8cd a000 	str.w	sl, [sp]
 800a198:	464b      	mov	r3, r9
 800a19a:	aa03      	add	r2, sp, #12
 800a19c:	4621      	mov	r1, r4
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f7ff fee4 	bl	8009f6c <_printf_common>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d14a      	bne.n	800a23e <_printf_i+0x1f6>
 800a1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ac:	b004      	add	sp, #16
 800a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	f043 0320 	orr.w	r3, r3, #32
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	4833      	ldr	r0, [pc, #204]	; (800a288 <_printf_i+0x240>)
 800a1bc:	2778      	movs	r7, #120	; 0x78
 800a1be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	6829      	ldr	r1, [r5, #0]
 800a1c6:	061f      	lsls	r7, r3, #24
 800a1c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1cc:	d402      	bmi.n	800a1d4 <_printf_i+0x18c>
 800a1ce:	065f      	lsls	r7, r3, #25
 800a1d0:	bf48      	it	mi
 800a1d2:	b2b6      	uxthmi	r6, r6
 800a1d4:	07df      	lsls	r7, r3, #31
 800a1d6:	bf48      	it	mi
 800a1d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a1dc:	6029      	str	r1, [r5, #0]
 800a1de:	bf48      	it	mi
 800a1e0:	6023      	strmi	r3, [r4, #0]
 800a1e2:	b91e      	cbnz	r6, 800a1ec <_printf_i+0x1a4>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	f023 0320 	bic.w	r3, r3, #32
 800a1ea:	6023      	str	r3, [r4, #0]
 800a1ec:	2310      	movs	r3, #16
 800a1ee:	e7a7      	b.n	800a140 <_printf_i+0xf8>
 800a1f0:	4824      	ldr	r0, [pc, #144]	; (800a284 <_printf_i+0x23c>)
 800a1f2:	e7e4      	b.n	800a1be <_printf_i+0x176>
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	e7bd      	b.n	800a174 <_printf_i+0x12c>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6826      	ldr	r6, [r4, #0]
 800a1fc:	6961      	ldr	r1, [r4, #20]
 800a1fe:	1d18      	adds	r0, r3, #4
 800a200:	6028      	str	r0, [r5, #0]
 800a202:	0635      	lsls	r5, r6, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1c4>
 800a208:	6019      	str	r1, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1ca>
 800a20c:	0670      	lsls	r0, r6, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1c0>
 800a210:	8019      	strh	r1, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4615      	mov	r5, r2
 800a218:	e7bc      	b.n	800a194 <_printf_i+0x14c>
 800a21a:	682b      	ldr	r3, [r5, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	602a      	str	r2, [r5, #0]
 800a220:	681d      	ldr	r5, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4628      	mov	r0, r5
 800a228:	f7f5 ffd2 	bl	80001d0 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1ea>
 800a22e:	1b40      	subs	r0, r0, r5
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	e7aa      	b.n	800a194 <_printf_i+0x14c>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	462a      	mov	r2, r5
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ad      	beq.n	800a1a8 <_printf_i+0x160>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x232>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a6      	b.n	800a1ac <_printf_i+0x164>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09d      	beq.n	800a1a8 <_printf_i+0x160>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x216>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x20a>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x226>
 800a282:	bf00      	nop
 800a284:	0800d843 	.word	0x0800d843
 800a288:	0800d854 	.word	0x0800d854

0800a28c <_scanf_float>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	b087      	sub	sp, #28
 800a292:	4617      	mov	r7, r2
 800a294:	9303      	str	r3, [sp, #12]
 800a296:	688b      	ldr	r3, [r1, #8]
 800a298:	1e5a      	subs	r2, r3, #1
 800a29a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a29e:	bf83      	ittte	hi
 800a2a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a2a4:	195b      	addhi	r3, r3, r5
 800a2a6:	9302      	strhi	r3, [sp, #8]
 800a2a8:	2300      	movls	r3, #0
 800a2aa:	bf86      	itte	hi
 800a2ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a2b0:	608b      	strhi	r3, [r1, #8]
 800a2b2:	9302      	strls	r3, [sp, #8]
 800a2b4:	680b      	ldr	r3, [r1, #0]
 800a2b6:	468b      	mov	fp, r1
 800a2b8:	2500      	movs	r5, #0
 800a2ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a2be:	f84b 3b1c 	str.w	r3, [fp], #28
 800a2c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a2c6:	4680      	mov	r8, r0
 800a2c8:	460c      	mov	r4, r1
 800a2ca:	465e      	mov	r6, fp
 800a2cc:	46aa      	mov	sl, r5
 800a2ce:	46a9      	mov	r9, r5
 800a2d0:	9501      	str	r5, [sp, #4]
 800a2d2:	68a2      	ldr	r2, [r4, #8]
 800a2d4:	b152      	cbz	r2, 800a2ec <_scanf_float+0x60>
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b4e      	cmp	r3, #78	; 0x4e
 800a2dc:	d864      	bhi.n	800a3a8 <_scanf_float+0x11c>
 800a2de:	2b40      	cmp	r3, #64	; 0x40
 800a2e0:	d83c      	bhi.n	800a35c <_scanf_float+0xd0>
 800a2e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a2e6:	b2c8      	uxtb	r0, r1
 800a2e8:	280e      	cmp	r0, #14
 800a2ea:	d93a      	bls.n	800a362 <_scanf_float+0xd6>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	d003      	beq.n	800a2fa <_scanf_float+0x6e>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2fe:	f1ba 0f01 	cmp.w	sl, #1
 800a302:	f200 8113 	bhi.w	800a52c <_scanf_float+0x2a0>
 800a306:	455e      	cmp	r6, fp
 800a308:	f200 8105 	bhi.w	800a516 <_scanf_float+0x28a>
 800a30c:	2501      	movs	r5, #1
 800a30e:	4628      	mov	r0, r5
 800a310:	b007      	add	sp, #28
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a31a:	2a0d      	cmp	r2, #13
 800a31c:	d8e6      	bhi.n	800a2ec <_scanf_float+0x60>
 800a31e:	a101      	add	r1, pc, #4	; (adr r1, 800a324 <_scanf_float+0x98>)
 800a320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a324:	0800a463 	.word	0x0800a463
 800a328:	0800a2ed 	.word	0x0800a2ed
 800a32c:	0800a2ed 	.word	0x0800a2ed
 800a330:	0800a2ed 	.word	0x0800a2ed
 800a334:	0800a4c3 	.word	0x0800a4c3
 800a338:	0800a49b 	.word	0x0800a49b
 800a33c:	0800a2ed 	.word	0x0800a2ed
 800a340:	0800a2ed 	.word	0x0800a2ed
 800a344:	0800a471 	.word	0x0800a471
 800a348:	0800a2ed 	.word	0x0800a2ed
 800a34c:	0800a2ed 	.word	0x0800a2ed
 800a350:	0800a2ed 	.word	0x0800a2ed
 800a354:	0800a2ed 	.word	0x0800a2ed
 800a358:	0800a429 	.word	0x0800a429
 800a35c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a360:	e7db      	b.n	800a31a <_scanf_float+0x8e>
 800a362:	290e      	cmp	r1, #14
 800a364:	d8c2      	bhi.n	800a2ec <_scanf_float+0x60>
 800a366:	a001      	add	r0, pc, #4	; (adr r0, 800a36c <_scanf_float+0xe0>)
 800a368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a36c:	0800a41b 	.word	0x0800a41b
 800a370:	0800a2ed 	.word	0x0800a2ed
 800a374:	0800a41b 	.word	0x0800a41b
 800a378:	0800a4af 	.word	0x0800a4af
 800a37c:	0800a2ed 	.word	0x0800a2ed
 800a380:	0800a3c9 	.word	0x0800a3c9
 800a384:	0800a405 	.word	0x0800a405
 800a388:	0800a405 	.word	0x0800a405
 800a38c:	0800a405 	.word	0x0800a405
 800a390:	0800a405 	.word	0x0800a405
 800a394:	0800a405 	.word	0x0800a405
 800a398:	0800a405 	.word	0x0800a405
 800a39c:	0800a405 	.word	0x0800a405
 800a3a0:	0800a405 	.word	0x0800a405
 800a3a4:	0800a405 	.word	0x0800a405
 800a3a8:	2b6e      	cmp	r3, #110	; 0x6e
 800a3aa:	d809      	bhi.n	800a3c0 <_scanf_float+0x134>
 800a3ac:	2b60      	cmp	r3, #96	; 0x60
 800a3ae:	d8b2      	bhi.n	800a316 <_scanf_float+0x8a>
 800a3b0:	2b54      	cmp	r3, #84	; 0x54
 800a3b2:	d077      	beq.n	800a4a4 <_scanf_float+0x218>
 800a3b4:	2b59      	cmp	r3, #89	; 0x59
 800a3b6:	d199      	bne.n	800a2ec <_scanf_float+0x60>
 800a3b8:	2d07      	cmp	r5, #7
 800a3ba:	d197      	bne.n	800a2ec <_scanf_float+0x60>
 800a3bc:	2508      	movs	r5, #8
 800a3be:	e029      	b.n	800a414 <_scanf_float+0x188>
 800a3c0:	2b74      	cmp	r3, #116	; 0x74
 800a3c2:	d06f      	beq.n	800a4a4 <_scanf_float+0x218>
 800a3c4:	2b79      	cmp	r3, #121	; 0x79
 800a3c6:	e7f6      	b.n	800a3b6 <_scanf_float+0x12a>
 800a3c8:	6821      	ldr	r1, [r4, #0]
 800a3ca:	05c8      	lsls	r0, r1, #23
 800a3cc:	d51a      	bpl.n	800a404 <_scanf_float+0x178>
 800a3ce:	9b02      	ldr	r3, [sp, #8]
 800a3d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a3d4:	6021      	str	r1, [r4, #0]
 800a3d6:	f109 0901 	add.w	r9, r9, #1
 800a3da:	b11b      	cbz	r3, 800a3e4 <_scanf_float+0x158>
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	3201      	adds	r2, #1
 800a3e0:	9302      	str	r3, [sp, #8]
 800a3e2:	60a2      	str	r2, [r4, #8]
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	607b      	str	r3, [r7, #4]
 800a3f8:	f340 8084 	ble.w	800a504 <_scanf_float+0x278>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	e766      	b.n	800a2d2 <_scanf_float+0x46>
 800a404:	eb1a 0f05 	cmn.w	sl, r5
 800a408:	f47f af70 	bne.w	800a2ec <_scanf_float+0x60>
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	f806 3b01 	strb.w	r3, [r6], #1
 800a418:	e7e4      	b.n	800a3e4 <_scanf_float+0x158>
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	0610      	lsls	r0, r2, #24
 800a41e:	f57f af65 	bpl.w	800a2ec <_scanf_float+0x60>
 800a422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a426:	e7f4      	b.n	800a412 <_scanf_float+0x186>
 800a428:	f1ba 0f00 	cmp.w	sl, #0
 800a42c:	d10e      	bne.n	800a44c <_scanf_float+0x1c0>
 800a42e:	f1b9 0f00 	cmp.w	r9, #0
 800a432:	d10e      	bne.n	800a452 <_scanf_float+0x1c6>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a43a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a43e:	d108      	bne.n	800a452 <_scanf_float+0x1c6>
 800a440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a444:	6022      	str	r2, [r4, #0]
 800a446:	f04f 0a01 	mov.w	sl, #1
 800a44a:	e7e3      	b.n	800a414 <_scanf_float+0x188>
 800a44c:	f1ba 0f02 	cmp.w	sl, #2
 800a450:	d055      	beq.n	800a4fe <_scanf_float+0x272>
 800a452:	2d01      	cmp	r5, #1
 800a454:	d002      	beq.n	800a45c <_scanf_float+0x1d0>
 800a456:	2d04      	cmp	r5, #4
 800a458:	f47f af48 	bne.w	800a2ec <_scanf_float+0x60>
 800a45c:	3501      	adds	r5, #1
 800a45e:	b2ed      	uxtb	r5, r5
 800a460:	e7d8      	b.n	800a414 <_scanf_float+0x188>
 800a462:	f1ba 0f01 	cmp.w	sl, #1
 800a466:	f47f af41 	bne.w	800a2ec <_scanf_float+0x60>
 800a46a:	f04f 0a02 	mov.w	sl, #2
 800a46e:	e7d1      	b.n	800a414 <_scanf_float+0x188>
 800a470:	b97d      	cbnz	r5, 800a492 <_scanf_float+0x206>
 800a472:	f1b9 0f00 	cmp.w	r9, #0
 800a476:	f47f af3c 	bne.w	800a2f2 <_scanf_float+0x66>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a484:	f47f af39 	bne.w	800a2fa <_scanf_float+0x6e>
 800a488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	2501      	movs	r5, #1
 800a490:	e7c0      	b.n	800a414 <_scanf_float+0x188>
 800a492:	2d03      	cmp	r5, #3
 800a494:	d0e2      	beq.n	800a45c <_scanf_float+0x1d0>
 800a496:	2d05      	cmp	r5, #5
 800a498:	e7de      	b.n	800a458 <_scanf_float+0x1cc>
 800a49a:	2d02      	cmp	r5, #2
 800a49c:	f47f af26 	bne.w	800a2ec <_scanf_float+0x60>
 800a4a0:	2503      	movs	r5, #3
 800a4a2:	e7b7      	b.n	800a414 <_scanf_float+0x188>
 800a4a4:	2d06      	cmp	r5, #6
 800a4a6:	f47f af21 	bne.w	800a2ec <_scanf_float+0x60>
 800a4aa:	2507      	movs	r5, #7
 800a4ac:	e7b2      	b.n	800a414 <_scanf_float+0x188>
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	0591      	lsls	r1, r2, #22
 800a4b2:	f57f af1b 	bpl.w	800a2ec <_scanf_float+0x60>
 800a4b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4c0:	e7a8      	b.n	800a414 <_scanf_float+0x188>
 800a4c2:	6822      	ldr	r2, [r4, #0]
 800a4c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a4c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a4cc:	d006      	beq.n	800a4dc <_scanf_float+0x250>
 800a4ce:	0550      	lsls	r0, r2, #21
 800a4d0:	f57f af0c 	bpl.w	800a2ec <_scanf_float+0x60>
 800a4d4:	f1b9 0f00 	cmp.w	r9, #0
 800a4d8:	f43f af0f 	beq.w	800a2fa <_scanf_float+0x6e>
 800a4dc:	0591      	lsls	r1, r2, #22
 800a4de:	bf58      	it	pl
 800a4e0:	9901      	ldrpl	r1, [sp, #4]
 800a4e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4e6:	bf58      	it	pl
 800a4e8:	eba9 0101 	subpl.w	r1, r9, r1
 800a4ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a4f0:	bf58      	it	pl
 800a4f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	f04f 0900 	mov.w	r9, #0
 800a4fc:	e78a      	b.n	800a414 <_scanf_float+0x188>
 800a4fe:	f04f 0a03 	mov.w	sl, #3
 800a502:	e787      	b.n	800a414 <_scanf_float+0x188>
 800a504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a508:	4639      	mov	r1, r7
 800a50a:	4640      	mov	r0, r8
 800a50c:	4798      	blx	r3
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f aedf 	beq.w	800a2d2 <_scanf_float+0x46>
 800a514:	e6ea      	b.n	800a2ec <_scanf_float+0x60>
 800a516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a51a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a51e:	463a      	mov	r2, r7
 800a520:	4640      	mov	r0, r8
 800a522:	4798      	blx	r3
 800a524:	6923      	ldr	r3, [r4, #16]
 800a526:	3b01      	subs	r3, #1
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	e6ec      	b.n	800a306 <_scanf_float+0x7a>
 800a52c:	1e6b      	subs	r3, r5, #1
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d825      	bhi.n	800a57e <_scanf_float+0x2f2>
 800a532:	2d02      	cmp	r5, #2
 800a534:	d836      	bhi.n	800a5a4 <_scanf_float+0x318>
 800a536:	455e      	cmp	r6, fp
 800a538:	f67f aee8 	bls.w	800a30c <_scanf_float+0x80>
 800a53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a544:	463a      	mov	r2, r7
 800a546:	4640      	mov	r0, r8
 800a548:	4798      	blx	r3
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	3b01      	subs	r3, #1
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	e7f1      	b.n	800a536 <_scanf_float+0x2aa>
 800a552:	9802      	ldr	r0, [sp, #8]
 800a554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a55c:	9002      	str	r0, [sp, #8]
 800a55e:	463a      	mov	r2, r7
 800a560:	4640      	mov	r0, r8
 800a562:	4798      	blx	r3
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	3b01      	subs	r3, #1
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a56e:	fa5f fa8a 	uxtb.w	sl, sl
 800a572:	f1ba 0f02 	cmp.w	sl, #2
 800a576:	d1ec      	bne.n	800a552 <_scanf_float+0x2c6>
 800a578:	3d03      	subs	r5, #3
 800a57a:	b2ed      	uxtb	r5, r5
 800a57c:	1b76      	subs	r6, r6, r5
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	05da      	lsls	r2, r3, #23
 800a582:	d52f      	bpl.n	800a5e4 <_scanf_float+0x358>
 800a584:	055b      	lsls	r3, r3, #21
 800a586:	d510      	bpl.n	800a5aa <_scanf_float+0x31e>
 800a588:	455e      	cmp	r6, fp
 800a58a:	f67f aebf 	bls.w	800a30c <_scanf_float+0x80>
 800a58e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a596:	463a      	mov	r2, r7
 800a598:	4640      	mov	r0, r8
 800a59a:	4798      	blx	r3
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	6123      	str	r3, [r4, #16]
 800a5a2:	e7f1      	b.n	800a588 <_scanf_float+0x2fc>
 800a5a4:	46aa      	mov	sl, r5
 800a5a6:	9602      	str	r6, [sp, #8]
 800a5a8:	e7df      	b.n	800a56a <_scanf_float+0x2de>
 800a5aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	2965      	cmp	r1, #101	; 0x65
 800a5b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	d00c      	beq.n	800a5d8 <_scanf_float+0x34c>
 800a5be:	2945      	cmp	r1, #69	; 0x45
 800a5c0:	d00a      	beq.n	800a5d8 <_scanf_float+0x34c>
 800a5c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5c6:	463a      	mov	r2, r7
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	4798      	blx	r3
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	1eb5      	subs	r5, r6, #2
 800a5d6:	6123      	str	r3, [r4, #16]
 800a5d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5dc:	463a      	mov	r2, r7
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4798      	blx	r3
 800a5e2:	462e      	mov	r6, r5
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	f015 0510 	ands.w	r5, r5, #16
 800a5ea:	d158      	bne.n	800a69e <_scanf_float+0x412>
 800a5ec:	7035      	strb	r5, [r6, #0]
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f8:	d11c      	bne.n	800a634 <_scanf_float+0x3a8>
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	454b      	cmp	r3, r9
 800a5fe:	eba3 0209 	sub.w	r2, r3, r9
 800a602:	d124      	bne.n	800a64e <_scanf_float+0x3c2>
 800a604:	2200      	movs	r2, #0
 800a606:	4659      	mov	r1, fp
 800a608:	4640      	mov	r0, r8
 800a60a:	f7ff f939 	bl	8009880 <_strtod_r>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	6821      	ldr	r1, [r4, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f011 0f02 	tst.w	r1, #2
 800a618:	ec57 6b10 	vmov	r6, r7, d0
 800a61c:	f103 0204 	add.w	r2, r3, #4
 800a620:	d020      	beq.n	800a664 <_scanf_float+0x3d8>
 800a622:	9903      	ldr	r1, [sp, #12]
 800a624:	600a      	str	r2, [r1, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	e9c3 6700 	strd	r6, r7, [r3]
 800a62c:	68e3      	ldr	r3, [r4, #12]
 800a62e:	3301      	adds	r3, #1
 800a630:	60e3      	str	r3, [r4, #12]
 800a632:	e66c      	b.n	800a30e <_scanf_float+0x82>
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0e4      	beq.n	800a604 <_scanf_float+0x378>
 800a63a:	9905      	ldr	r1, [sp, #20]
 800a63c:	230a      	movs	r3, #10
 800a63e:	462a      	mov	r2, r5
 800a640:	3101      	adds	r1, #1
 800a642:	4640      	mov	r0, r8
 800a644:	f7ff f9b0 	bl	80099a8 <_strtol_r>
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	9e05      	ldr	r6, [sp, #20]
 800a64c:	1ac2      	subs	r2, r0, r3
 800a64e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a652:	429e      	cmp	r6, r3
 800a654:	bf28      	it	cs
 800a656:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a65a:	4912      	ldr	r1, [pc, #72]	; (800a6a4 <_scanf_float+0x418>)
 800a65c:	4630      	mov	r0, r6
 800a65e:	f000 f8e7 	bl	800a830 <siprintf>
 800a662:	e7cf      	b.n	800a604 <_scanf_float+0x378>
 800a664:	f011 0f04 	tst.w	r1, #4
 800a668:	9903      	ldr	r1, [sp, #12]
 800a66a:	600a      	str	r2, [r1, #0]
 800a66c:	d1db      	bne.n	800a626 <_scanf_float+0x39a>
 800a66e:	f8d3 8000 	ldr.w	r8, [r3]
 800a672:	ee10 2a10 	vmov	r2, s0
 800a676:	ee10 0a10 	vmov	r0, s0
 800a67a:	463b      	mov	r3, r7
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f6 fa55 	bl	8000b2c <__aeabi_dcmpun>
 800a682:	b128      	cbz	r0, 800a690 <_scanf_float+0x404>
 800a684:	4808      	ldr	r0, [pc, #32]	; (800a6a8 <_scanf_float+0x41c>)
 800a686:	f000 faa3 	bl	800abd0 <nanf>
 800a68a:	ed88 0a00 	vstr	s0, [r8]
 800a68e:	e7cd      	b.n	800a62c <_scanf_float+0x3a0>
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f6 faa8 	bl	8000be8 <__aeabi_d2f>
 800a698:	f8c8 0000 	str.w	r0, [r8]
 800a69c:	e7c6      	b.n	800a62c <_scanf_float+0x3a0>
 800a69e:	2500      	movs	r5, #0
 800a6a0:	e635      	b.n	800a30e <_scanf_float+0x82>
 800a6a2:	bf00      	nop
 800a6a4:	0800d865 	.word	0x0800d865
 800a6a8:	0800d91e 	.word	0x0800d91e

0800a6ac <std>:
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a6b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6ba:	6083      	str	r3, [r0, #8]
 800a6bc:	8181      	strh	r1, [r0, #12]
 800a6be:	6643      	str	r3, [r0, #100]	; 0x64
 800a6c0:	81c2      	strh	r2, [r0, #14]
 800a6c2:	6183      	str	r3, [r0, #24]
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	2208      	movs	r2, #8
 800a6c8:	305c      	adds	r0, #92	; 0x5c
 800a6ca:	f000 f914 	bl	800a8f6 <memset>
 800a6ce:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <std+0x58>)
 800a6d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a6d2:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <std+0x5c>)
 800a6d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <std+0x60>)
 800a6d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6da:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <std+0x64>)
 800a6dc:	6323      	str	r3, [r4, #48]	; 0x30
 800a6de:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <std+0x68>)
 800a6e0:	6224      	str	r4, [r4, #32]
 800a6e2:	429c      	cmp	r4, r3
 800a6e4:	d006      	beq.n	800a6f4 <std+0x48>
 800a6e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a6ea:	4294      	cmp	r4, r2
 800a6ec:	d002      	beq.n	800a6f4 <std+0x48>
 800a6ee:	33d0      	adds	r3, #208	; 0xd0
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	d105      	bne.n	800a700 <std+0x54>
 800a6f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6fc:	f000 ba4c 	b.w	800ab98 <__retarget_lock_init_recursive>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	0800a871 	.word	0x0800a871
 800a708:	0800a893 	.word	0x0800a893
 800a70c:	0800a8cb 	.word	0x0800a8cb
 800a710:	0800a8ef 	.word	0x0800a8ef
 800a714:	20003afc 	.word	0x20003afc

0800a718 <stdio_exit_handler>:
 800a718:	4a02      	ldr	r2, [pc, #8]	; (800a724 <stdio_exit_handler+0xc>)
 800a71a:	4903      	ldr	r1, [pc, #12]	; (800a728 <stdio_exit_handler+0x10>)
 800a71c:	4803      	ldr	r0, [pc, #12]	; (800a72c <stdio_exit_handler+0x14>)
 800a71e:	f000 b869 	b.w	800a7f4 <_fwalk_sglue>
 800a722:	bf00      	nop
 800a724:	20000010 	.word	0x20000010
 800a728:	0800cda9 	.word	0x0800cda9
 800a72c:	20000188 	.word	0x20000188

0800a730 <cleanup_stdio>:
 800a730:	6841      	ldr	r1, [r0, #4]
 800a732:	4b0c      	ldr	r3, [pc, #48]	; (800a764 <cleanup_stdio+0x34>)
 800a734:	4299      	cmp	r1, r3
 800a736:	b510      	push	{r4, lr}
 800a738:	4604      	mov	r4, r0
 800a73a:	d001      	beq.n	800a740 <cleanup_stdio+0x10>
 800a73c:	f002 fb34 	bl	800cda8 <_fflush_r>
 800a740:	68a1      	ldr	r1, [r4, #8]
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <cleanup_stdio+0x38>)
 800a744:	4299      	cmp	r1, r3
 800a746:	d002      	beq.n	800a74e <cleanup_stdio+0x1e>
 800a748:	4620      	mov	r0, r4
 800a74a:	f002 fb2d 	bl	800cda8 <_fflush_r>
 800a74e:	68e1      	ldr	r1, [r4, #12]
 800a750:	4b06      	ldr	r3, [pc, #24]	; (800a76c <cleanup_stdio+0x3c>)
 800a752:	4299      	cmp	r1, r3
 800a754:	d004      	beq.n	800a760 <cleanup_stdio+0x30>
 800a756:	4620      	mov	r0, r4
 800a758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a75c:	f002 bb24 	b.w	800cda8 <_fflush_r>
 800a760:	bd10      	pop	{r4, pc}
 800a762:	bf00      	nop
 800a764:	20003afc 	.word	0x20003afc
 800a768:	20003b64 	.word	0x20003b64
 800a76c:	20003bcc 	.word	0x20003bcc

0800a770 <global_stdio_init.part.0>:
 800a770:	b510      	push	{r4, lr}
 800a772:	4b0b      	ldr	r3, [pc, #44]	; (800a7a0 <global_stdio_init.part.0+0x30>)
 800a774:	4c0b      	ldr	r4, [pc, #44]	; (800a7a4 <global_stdio_init.part.0+0x34>)
 800a776:	4a0c      	ldr	r2, [pc, #48]	; (800a7a8 <global_stdio_init.part.0+0x38>)
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	4620      	mov	r0, r4
 800a77c:	2200      	movs	r2, #0
 800a77e:	2104      	movs	r1, #4
 800a780:	f7ff ff94 	bl	800a6ac <std>
 800a784:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a788:	2201      	movs	r2, #1
 800a78a:	2109      	movs	r1, #9
 800a78c:	f7ff ff8e 	bl	800a6ac <std>
 800a790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a794:	2202      	movs	r2, #2
 800a796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a79a:	2112      	movs	r1, #18
 800a79c:	f7ff bf86 	b.w	800a6ac <std>
 800a7a0:	20003c34 	.word	0x20003c34
 800a7a4:	20003afc 	.word	0x20003afc
 800a7a8:	0800a719 	.word	0x0800a719

0800a7ac <__sfp_lock_acquire>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__sfp_lock_acquire+0x8>)
 800a7ae:	f000 b9f4 	b.w	800ab9a <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	20003c3d 	.word	0x20003c3d

0800a7b8 <__sfp_lock_release>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__sfp_lock_release+0x8>)
 800a7ba:	f000 b9ef 	b.w	800ab9c <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	20003c3d 	.word	0x20003c3d

0800a7c4 <__sinit>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	f7ff fff0 	bl	800a7ac <__sfp_lock_acquire>
 800a7cc:	6a23      	ldr	r3, [r4, #32]
 800a7ce:	b11b      	cbz	r3, 800a7d8 <__sinit+0x14>
 800a7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7d4:	f7ff bff0 	b.w	800a7b8 <__sfp_lock_release>
 800a7d8:	4b04      	ldr	r3, [pc, #16]	; (800a7ec <__sinit+0x28>)
 800a7da:	6223      	str	r3, [r4, #32]
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <__sinit+0x2c>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1f5      	bne.n	800a7d0 <__sinit+0xc>
 800a7e4:	f7ff ffc4 	bl	800a770 <global_stdio_init.part.0>
 800a7e8:	e7f2      	b.n	800a7d0 <__sinit+0xc>
 800a7ea:	bf00      	nop
 800a7ec:	0800a731 	.word	0x0800a731
 800a7f0:	20003c34 	.word	0x20003c34

0800a7f4 <_fwalk_sglue>:
 800a7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	4688      	mov	r8, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	2600      	movs	r6, #0
 800a800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a804:	f1b9 0901 	subs.w	r9, r9, #1
 800a808:	d505      	bpl.n	800a816 <_fwalk_sglue+0x22>
 800a80a:	6824      	ldr	r4, [r4, #0]
 800a80c:	2c00      	cmp	r4, #0
 800a80e:	d1f7      	bne.n	800a800 <_fwalk_sglue+0xc>
 800a810:	4630      	mov	r0, r6
 800a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d907      	bls.n	800a82c <_fwalk_sglue+0x38>
 800a81c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a820:	3301      	adds	r3, #1
 800a822:	d003      	beq.n	800a82c <_fwalk_sglue+0x38>
 800a824:	4629      	mov	r1, r5
 800a826:	4638      	mov	r0, r7
 800a828:	47c0      	blx	r8
 800a82a:	4306      	orrs	r6, r0
 800a82c:	3568      	adds	r5, #104	; 0x68
 800a82e:	e7e9      	b.n	800a804 <_fwalk_sglue+0x10>

0800a830 <siprintf>:
 800a830:	b40e      	push	{r1, r2, r3}
 800a832:	b500      	push	{lr}
 800a834:	b09c      	sub	sp, #112	; 0x70
 800a836:	ab1d      	add	r3, sp, #116	; 0x74
 800a838:	9002      	str	r0, [sp, #8]
 800a83a:	9006      	str	r0, [sp, #24]
 800a83c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a840:	4809      	ldr	r0, [pc, #36]	; (800a868 <siprintf+0x38>)
 800a842:	9107      	str	r1, [sp, #28]
 800a844:	9104      	str	r1, [sp, #16]
 800a846:	4909      	ldr	r1, [pc, #36]	; (800a86c <siprintf+0x3c>)
 800a848:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84c:	9105      	str	r1, [sp, #20]
 800a84e:	6800      	ldr	r0, [r0, #0]
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	a902      	add	r1, sp, #8
 800a854:	f002 f924 	bl	800caa0 <_svfiprintf_r>
 800a858:	9b02      	ldr	r3, [sp, #8]
 800a85a:	2200      	movs	r2, #0
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	b01c      	add	sp, #112	; 0x70
 800a860:	f85d eb04 	ldr.w	lr, [sp], #4
 800a864:	b003      	add	sp, #12
 800a866:	4770      	bx	lr
 800a868:	200001d4 	.word	0x200001d4
 800a86c:	ffff0208 	.word	0xffff0208

0800a870 <__sread>:
 800a870:	b510      	push	{r4, lr}
 800a872:	460c      	mov	r4, r1
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	f000 f930 	bl	800aadc <_read_r>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	bfab      	itete	ge
 800a880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a882:	89a3      	ldrhlt	r3, [r4, #12]
 800a884:	181b      	addge	r3, r3, r0
 800a886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a88a:	bfac      	ite	ge
 800a88c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a88e:	81a3      	strhlt	r3, [r4, #12]
 800a890:	bd10      	pop	{r4, pc}

0800a892 <__swrite>:
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	461f      	mov	r7, r3
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	05db      	lsls	r3, r3, #23
 800a89c:	4605      	mov	r5, r0
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	d505      	bpl.n	800a8b0 <__swrite+0x1e>
 800a8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f000 f904 	bl	800aab8 <_lseek_r>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	4632      	mov	r2, r6
 800a8be:	463b      	mov	r3, r7
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c6:	f000 b92b 	b.w	800ab20 <_write_r>

0800a8ca <__sseek>:
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d2:	f000 f8f1 	bl	800aab8 <_lseek_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	bf15      	itete	ne
 800a8dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8e6:	81a3      	strheq	r3, [r4, #12]
 800a8e8:	bf18      	it	ne
 800a8ea:	81a3      	strhne	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__sclose>:
 800a8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f2:	f000 b87b 	b.w	800a9ec <_close_r>

0800a8f6 <memset>:
 800a8f6:	4402      	add	r2, r0
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d100      	bne.n	800a900 <memset+0xa>
 800a8fe:	4770      	bx	lr
 800a900:	f803 1b01 	strb.w	r1, [r3], #1
 800a904:	e7f9      	b.n	800a8fa <memset+0x4>

0800a906 <strncmp>:
 800a906:	b510      	push	{r4, lr}
 800a908:	b16a      	cbz	r2, 800a926 <strncmp+0x20>
 800a90a:	3901      	subs	r1, #1
 800a90c:	1884      	adds	r4, r0, r2
 800a90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a912:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a916:	429a      	cmp	r2, r3
 800a918:	d103      	bne.n	800a922 <strncmp+0x1c>
 800a91a:	42a0      	cmp	r0, r4
 800a91c:	d001      	beq.n	800a922 <strncmp+0x1c>
 800a91e:	2a00      	cmp	r2, #0
 800a920:	d1f5      	bne.n	800a90e <strncmp+0x8>
 800a922:	1ad0      	subs	r0, r2, r3
 800a924:	bd10      	pop	{r4, pc}
 800a926:	4610      	mov	r0, r2
 800a928:	e7fc      	b.n	800a924 <strncmp+0x1e>
	...

0800a92c <strtok>:
 800a92c:	4b16      	ldr	r3, [pc, #88]	; (800a988 <strtok+0x5c>)
 800a92e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a930:	681e      	ldr	r6, [r3, #0]
 800a932:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a934:	4605      	mov	r5, r0
 800a936:	b9fc      	cbnz	r4, 800a978 <strtok+0x4c>
 800a938:	2050      	movs	r0, #80	; 0x50
 800a93a:	9101      	str	r1, [sp, #4]
 800a93c:	f7fe f8e0 	bl	8008b00 <malloc>
 800a940:	9901      	ldr	r1, [sp, #4]
 800a942:	6470      	str	r0, [r6, #68]	; 0x44
 800a944:	4602      	mov	r2, r0
 800a946:	b920      	cbnz	r0, 800a952 <strtok+0x26>
 800a948:	4b10      	ldr	r3, [pc, #64]	; (800a98c <strtok+0x60>)
 800a94a:	4811      	ldr	r0, [pc, #68]	; (800a990 <strtok+0x64>)
 800a94c:	215b      	movs	r1, #91	; 0x5b
 800a94e:	f000 f945 	bl	800abdc <__assert_func>
 800a952:	e9c0 4400 	strd	r4, r4, [r0]
 800a956:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a95a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a95e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a962:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a966:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a96a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a96e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a972:	6184      	str	r4, [r0, #24]
 800a974:	7704      	strb	r4, [r0, #28]
 800a976:	6244      	str	r4, [r0, #36]	; 0x24
 800a978:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a97a:	2301      	movs	r3, #1
 800a97c:	4628      	mov	r0, r5
 800a97e:	b002      	add	sp, #8
 800a980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a984:	f000 b806 	b.w	800a994 <__strtok_r>
 800a988:	200001d4 	.word	0x200001d4
 800a98c:	0800d86a 	.word	0x0800d86a
 800a990:	0800d881 	.word	0x0800d881

0800a994 <__strtok_r>:
 800a994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a996:	b908      	cbnz	r0, 800a99c <__strtok_r+0x8>
 800a998:	6810      	ldr	r0, [r2, #0]
 800a99a:	b188      	cbz	r0, 800a9c0 <__strtok_r+0x2c>
 800a99c:	4604      	mov	r4, r0
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a9aa:	b91e      	cbnz	r6, 800a9b4 <__strtok_r+0x20>
 800a9ac:	b965      	cbnz	r5, 800a9c8 <__strtok_r+0x34>
 800a9ae:	6015      	str	r5, [r2, #0]
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	e005      	b.n	800a9c0 <__strtok_r+0x2c>
 800a9b4:	42b5      	cmp	r5, r6
 800a9b6:	d1f6      	bne.n	800a9a6 <__strtok_r+0x12>
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1f0      	bne.n	800a99e <__strtok_r+0xa>
 800a9bc:	6014      	str	r4, [r2, #0]
 800a9be:	7003      	strb	r3, [r0, #0]
 800a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	e00c      	b.n	800a9e0 <__strtok_r+0x4c>
 800a9c6:	b915      	cbnz	r5, 800a9ce <__strtok_r+0x3a>
 800a9c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9cc:	460e      	mov	r6, r1
 800a9ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a9d2:	42ab      	cmp	r3, r5
 800a9d4:	d1f7      	bne.n	800a9c6 <__strtok_r+0x32>
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0f3      	beq.n	800a9c2 <__strtok_r+0x2e>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a9e0:	6014      	str	r4, [r2, #0]
 800a9e2:	e7ed      	b.n	800a9c0 <__strtok_r+0x2c>

0800a9e4 <_localeconv_r>:
 800a9e4:	4800      	ldr	r0, [pc, #0]	; (800a9e8 <_localeconv_r+0x4>)
 800a9e6:	4770      	bx	lr
 800a9e8:	2000010c 	.word	0x2000010c

0800a9ec <_close_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d06      	ldr	r5, [pc, #24]	; (800aa08 <_close_r+0x1c>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f7 f9bd 	bl	8001d76 <_close>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_close_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_close_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20003c38 	.word	0x20003c38

0800aa0c <_reclaim_reent>:
 800aa0c:	4b29      	ldr	r3, [pc, #164]	; (800aab4 <_reclaim_reent+0xa8>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4283      	cmp	r3, r0
 800aa12:	b570      	push	{r4, r5, r6, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	d04b      	beq.n	800aab0 <_reclaim_reent+0xa4>
 800aa18:	69c3      	ldr	r3, [r0, #28]
 800aa1a:	b143      	cbz	r3, 800aa2e <_reclaim_reent+0x22>
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d144      	bne.n	800aaac <_reclaim_reent+0xa0>
 800aa22:	69e3      	ldr	r3, [r4, #28]
 800aa24:	6819      	ldr	r1, [r3, #0]
 800aa26:	b111      	cbz	r1, 800aa2e <_reclaim_reent+0x22>
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 ff6f 	bl	800b90c <_free_r>
 800aa2e:	6961      	ldr	r1, [r4, #20]
 800aa30:	b111      	cbz	r1, 800aa38 <_reclaim_reent+0x2c>
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 ff6a 	bl	800b90c <_free_r>
 800aa38:	69e1      	ldr	r1, [r4, #28]
 800aa3a:	b111      	cbz	r1, 800aa42 <_reclaim_reent+0x36>
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f000 ff65 	bl	800b90c <_free_r>
 800aa42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa44:	b111      	cbz	r1, 800aa4c <_reclaim_reent+0x40>
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 ff60 	bl	800b90c <_free_r>
 800aa4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa4e:	b111      	cbz	r1, 800aa56 <_reclaim_reent+0x4a>
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 ff5b 	bl	800b90c <_free_r>
 800aa56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa58:	b111      	cbz	r1, 800aa60 <_reclaim_reent+0x54>
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 ff56 	bl	800b90c <_free_r>
 800aa60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa62:	b111      	cbz	r1, 800aa6a <_reclaim_reent+0x5e>
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 ff51 	bl	800b90c <_free_r>
 800aa6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa6c:	b111      	cbz	r1, 800aa74 <_reclaim_reent+0x68>
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f000 ff4c 	bl	800b90c <_free_r>
 800aa74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa76:	b111      	cbz	r1, 800aa7e <_reclaim_reent+0x72>
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f000 ff47 	bl	800b90c <_free_r>
 800aa7e:	6a23      	ldr	r3, [r4, #32]
 800aa80:	b1b3      	cbz	r3, 800aab0 <_reclaim_reent+0xa4>
 800aa82:	4620      	mov	r0, r4
 800aa84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa88:	4718      	bx	r3
 800aa8a:	5949      	ldr	r1, [r1, r5]
 800aa8c:	b941      	cbnz	r1, 800aaa0 <_reclaim_reent+0x94>
 800aa8e:	3504      	adds	r5, #4
 800aa90:	69e3      	ldr	r3, [r4, #28]
 800aa92:	2d80      	cmp	r5, #128	; 0x80
 800aa94:	68d9      	ldr	r1, [r3, #12]
 800aa96:	d1f8      	bne.n	800aa8a <_reclaim_reent+0x7e>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 ff37 	bl	800b90c <_free_r>
 800aa9e:	e7c0      	b.n	800aa22 <_reclaim_reent+0x16>
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 ff32 	bl	800b90c <_free_r>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	e7ef      	b.n	800aa8c <_reclaim_reent+0x80>
 800aaac:	2500      	movs	r5, #0
 800aaae:	e7ef      	b.n	800aa90 <_reclaim_reent+0x84>
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
 800aab2:	bf00      	nop
 800aab4:	200001d4 	.word	0x200001d4

0800aab8 <_lseek_r>:
 800aab8:	b538      	push	{r3, r4, r5, lr}
 800aaba:	4d07      	ldr	r5, [pc, #28]	; (800aad8 <_lseek_r+0x20>)
 800aabc:	4604      	mov	r4, r0
 800aabe:	4608      	mov	r0, r1
 800aac0:	4611      	mov	r1, r2
 800aac2:	2200      	movs	r2, #0
 800aac4:	602a      	str	r2, [r5, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f7f7 f97c 	bl	8001dc4 <_lseek>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_lseek_r+0x1e>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_lseek_r+0x1e>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	20003c38 	.word	0x20003c38

0800aadc <_read_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d07      	ldr	r5, [pc, #28]	; (800aafc <_read_r+0x20>)
 800aae0:	4604      	mov	r4, r0
 800aae2:	4608      	mov	r0, r1
 800aae4:	4611      	mov	r1, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	602a      	str	r2, [r5, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	f7f7 f90a 	bl	8001d04 <_read>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_read_r+0x1e>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_read_r+0x1e>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	20003c38 	.word	0x20003c38

0800ab00 <_sbrk_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d06      	ldr	r5, [pc, #24]	; (800ab1c <_sbrk_r+0x1c>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	602b      	str	r3, [r5, #0]
 800ab0c:	f7f7 f968 	bl	8001de0 <_sbrk>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	d102      	bne.n	800ab1a <_sbrk_r+0x1a>
 800ab14:	682b      	ldr	r3, [r5, #0]
 800ab16:	b103      	cbz	r3, 800ab1a <_sbrk_r+0x1a>
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	bd38      	pop	{r3, r4, r5, pc}
 800ab1c:	20003c38 	.word	0x20003c38

0800ab20 <_write_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4d07      	ldr	r5, [pc, #28]	; (800ab40 <_write_r+0x20>)
 800ab24:	4604      	mov	r4, r0
 800ab26:	4608      	mov	r0, r1
 800ab28:	4611      	mov	r1, r2
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	602a      	str	r2, [r5, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7f7 f905 	bl	8001d3e <_write>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_write_r+0x1e>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_write_r+0x1e>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20003c38 	.word	0x20003c38

0800ab44 <__errno>:
 800ab44:	4b01      	ldr	r3, [pc, #4]	; (800ab4c <__errno+0x8>)
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	200001d4 	.word	0x200001d4

0800ab50 <__libc_init_array>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	4d0d      	ldr	r5, [pc, #52]	; (800ab88 <__libc_init_array+0x38>)
 800ab54:	4c0d      	ldr	r4, [pc, #52]	; (800ab8c <__libc_init_array+0x3c>)
 800ab56:	1b64      	subs	r4, r4, r5
 800ab58:	10a4      	asrs	r4, r4, #2
 800ab5a:	2600      	movs	r6, #0
 800ab5c:	42a6      	cmp	r6, r4
 800ab5e:	d109      	bne.n	800ab74 <__libc_init_array+0x24>
 800ab60:	4d0b      	ldr	r5, [pc, #44]	; (800ab90 <__libc_init_array+0x40>)
 800ab62:	4c0c      	ldr	r4, [pc, #48]	; (800ab94 <__libc_init_array+0x44>)
 800ab64:	f002 fc6a 	bl	800d43c <_init>
 800ab68:	1b64      	subs	r4, r4, r5
 800ab6a:	10a4      	asrs	r4, r4, #2
 800ab6c:	2600      	movs	r6, #0
 800ab6e:	42a6      	cmp	r6, r4
 800ab70:	d105      	bne.n	800ab7e <__libc_init_array+0x2e>
 800ab72:	bd70      	pop	{r4, r5, r6, pc}
 800ab74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab78:	4798      	blx	r3
 800ab7a:	3601      	adds	r6, #1
 800ab7c:	e7ee      	b.n	800ab5c <__libc_init_array+0xc>
 800ab7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab82:	4798      	blx	r3
 800ab84:	3601      	adds	r6, #1
 800ab86:	e7f2      	b.n	800ab6e <__libc_init_array+0x1e>
 800ab88:	0800db68 	.word	0x0800db68
 800ab8c:	0800db68 	.word	0x0800db68
 800ab90:	0800db68 	.word	0x0800db68
 800ab94:	0800db6c 	.word	0x0800db6c

0800ab98 <__retarget_lock_init_recursive>:
 800ab98:	4770      	bx	lr

0800ab9a <__retarget_lock_acquire_recursive>:
 800ab9a:	4770      	bx	lr

0800ab9c <__retarget_lock_release_recursive>:
 800ab9c:	4770      	bx	lr

0800ab9e <memcpy>:
 800ab9e:	440a      	add	r2, r1
 800aba0:	4291      	cmp	r1, r2
 800aba2:	f100 33ff 	add.w	r3, r0, #4294967295
 800aba6:	d100      	bne.n	800abaa <memcpy+0xc>
 800aba8:	4770      	bx	lr
 800abaa:	b510      	push	{r4, lr}
 800abac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb4:	4291      	cmp	r1, r2
 800abb6:	d1f9      	bne.n	800abac <memcpy+0xe>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	0000      	movs	r0, r0
 800abbc:	0000      	movs	r0, r0
	...

0800abc0 <nan>:
 800abc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abc8 <nan+0x8>
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	00000000 	.word	0x00000000
 800abcc:	7ff80000 	.word	0x7ff80000

0800abd0 <nanf>:
 800abd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abd8 <nanf+0x8>
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	7fc00000 	.word	0x7fc00000

0800abdc <__assert_func>:
 800abdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abde:	4614      	mov	r4, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <__assert_func+0x2c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4605      	mov	r5, r0
 800abe8:	68d8      	ldr	r0, [r3, #12]
 800abea:	b14c      	cbz	r4, 800ac00 <__assert_func+0x24>
 800abec:	4b07      	ldr	r3, [pc, #28]	; (800ac0c <__assert_func+0x30>)
 800abee:	9100      	str	r1, [sp, #0]
 800abf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abf4:	4906      	ldr	r1, [pc, #24]	; (800ac10 <__assert_func+0x34>)
 800abf6:	462b      	mov	r3, r5
 800abf8:	f002 f8fe 	bl	800cdf8 <fiprintf>
 800abfc:	f002 f928 	bl	800ce50 <abort>
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <__assert_func+0x38>)
 800ac02:	461c      	mov	r4, r3
 800ac04:	e7f3      	b.n	800abee <__assert_func+0x12>
 800ac06:	bf00      	nop
 800ac08:	200001d4 	.word	0x200001d4
 800ac0c:	0800d8e3 	.word	0x0800d8e3
 800ac10:	0800d8f0 	.word	0x0800d8f0
 800ac14:	0800d91e 	.word	0x0800d91e

0800ac18 <quorem>:
 800ac18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	6903      	ldr	r3, [r0, #16]
 800ac1e:	690c      	ldr	r4, [r1, #16]
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	4607      	mov	r7, r0
 800ac24:	db7e      	blt.n	800ad24 <quorem+0x10c>
 800ac26:	3c01      	subs	r4, #1
 800ac28:	f101 0814 	add.w	r8, r1, #20
 800ac2c:	f100 0514 	add.w	r5, r0, #20
 800ac30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	429a      	cmp	r2, r3
 800ac42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac4e:	d331      	bcc.n	800acb4 <quorem+0x9c>
 800ac50:	f04f 0e00 	mov.w	lr, #0
 800ac54:	4640      	mov	r0, r8
 800ac56:	46ac      	mov	ip, r5
 800ac58:	46f2      	mov	sl, lr
 800ac5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac5e:	b293      	uxth	r3, r2
 800ac60:	fb06 e303 	mla	r3, r6, r3, lr
 800ac64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac68:	0c1a      	lsrs	r2, r3, #16
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	ebaa 0303 	sub.w	r3, sl, r3
 800ac70:	f8dc a000 	ldr.w	sl, [ip]
 800ac74:	fa13 f38a 	uxtah	r3, r3, sl
 800ac78:	fb06 220e 	mla	r2, r6, lr, r2
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac84:	b292      	uxth	r2, r2
 800ac86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac8e:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac92:	4581      	cmp	r9, r0
 800ac94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac98:	f84c 3b04 	str.w	r3, [ip], #4
 800ac9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aca0:	d2db      	bcs.n	800ac5a <quorem+0x42>
 800aca2:	f855 300b 	ldr.w	r3, [r5, fp]
 800aca6:	b92b      	cbnz	r3, 800acb4 <quorem+0x9c>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	3b04      	subs	r3, #4
 800acac:	429d      	cmp	r5, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	d32c      	bcc.n	800ad0c <quorem+0xf4>
 800acb2:	613c      	str	r4, [r7, #16]
 800acb4:	4638      	mov	r0, r7
 800acb6:	f001 fca5 	bl	800c604 <__mcmp>
 800acba:	2800      	cmp	r0, #0
 800acbc:	db22      	blt.n	800ad04 <quorem+0xec>
 800acbe:	3601      	adds	r6, #1
 800acc0:	4629      	mov	r1, r5
 800acc2:	2000      	movs	r0, #0
 800acc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800acc8:	f8d1 c000 	ldr.w	ip, [r1]
 800accc:	b293      	uxth	r3, r2
 800acce:	1ac3      	subs	r3, r0, r3
 800acd0:	0c12      	lsrs	r2, r2, #16
 800acd2:	fa13 f38c 	uxtah	r3, r3, ip
 800acd6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800acda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800acde:	b29b      	uxth	r3, r3
 800ace0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace4:	45c1      	cmp	r9, r8
 800ace6:	f841 3b04 	str.w	r3, [r1], #4
 800acea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acee:	d2e9      	bcs.n	800acc4 <quorem+0xac>
 800acf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acf8:	b922      	cbnz	r2, 800ad04 <quorem+0xec>
 800acfa:	3b04      	subs	r3, #4
 800acfc:	429d      	cmp	r5, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	d30a      	bcc.n	800ad18 <quorem+0x100>
 800ad02:	613c      	str	r4, [r7, #16]
 800ad04:	4630      	mov	r0, r6
 800ad06:	b003      	add	sp, #12
 800ad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	6812      	ldr	r2, [r2, #0]
 800ad0e:	3b04      	subs	r3, #4
 800ad10:	2a00      	cmp	r2, #0
 800ad12:	d1ce      	bne.n	800acb2 <quorem+0x9a>
 800ad14:	3c01      	subs	r4, #1
 800ad16:	e7c9      	b.n	800acac <quorem+0x94>
 800ad18:	6812      	ldr	r2, [r2, #0]
 800ad1a:	3b04      	subs	r3, #4
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	d1f0      	bne.n	800ad02 <quorem+0xea>
 800ad20:	3c01      	subs	r4, #1
 800ad22:	e7eb      	b.n	800acfc <quorem+0xe4>
 800ad24:	2000      	movs	r0, #0
 800ad26:	e7ee      	b.n	800ad06 <quorem+0xee>

0800ad28 <_dtoa_r>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	ed2d 8b04 	vpush	{d8-d9}
 800ad30:	69c5      	ldr	r5, [r0, #28]
 800ad32:	b093      	sub	sp, #76	; 0x4c
 800ad34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad38:	ec57 6b10 	vmov	r6, r7, d0
 800ad3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad40:	9107      	str	r1, [sp, #28]
 800ad42:	4604      	mov	r4, r0
 800ad44:	920a      	str	r2, [sp, #40]	; 0x28
 800ad46:	930d      	str	r3, [sp, #52]	; 0x34
 800ad48:	b975      	cbnz	r5, 800ad68 <_dtoa_r+0x40>
 800ad4a:	2010      	movs	r0, #16
 800ad4c:	f7fd fed8 	bl	8008b00 <malloc>
 800ad50:	4602      	mov	r2, r0
 800ad52:	61e0      	str	r0, [r4, #28]
 800ad54:	b920      	cbnz	r0, 800ad60 <_dtoa_r+0x38>
 800ad56:	4bae      	ldr	r3, [pc, #696]	; (800b010 <_dtoa_r+0x2e8>)
 800ad58:	21ef      	movs	r1, #239	; 0xef
 800ad5a:	48ae      	ldr	r0, [pc, #696]	; (800b014 <_dtoa_r+0x2ec>)
 800ad5c:	f7ff ff3e 	bl	800abdc <__assert_func>
 800ad60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad64:	6005      	str	r5, [r0, #0]
 800ad66:	60c5      	str	r5, [r0, #12]
 800ad68:	69e3      	ldr	r3, [r4, #28]
 800ad6a:	6819      	ldr	r1, [r3, #0]
 800ad6c:	b151      	cbz	r1, 800ad84 <_dtoa_r+0x5c>
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	604a      	str	r2, [r1, #4]
 800ad72:	2301      	movs	r3, #1
 800ad74:	4093      	lsls	r3, r2
 800ad76:	608b      	str	r3, [r1, #8]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	f001 f9bd 	bl	800c0f8 <_Bfree>
 800ad7e:	69e3      	ldr	r3, [r4, #28]
 800ad80:	2200      	movs	r2, #0
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	1e3b      	subs	r3, r7, #0
 800ad86:	bfbb      	ittet	lt
 800ad88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad8c:	9303      	strlt	r3, [sp, #12]
 800ad8e:	2300      	movge	r3, #0
 800ad90:	2201      	movlt	r2, #1
 800ad92:	bfac      	ite	ge
 800ad94:	f8c8 3000 	strge.w	r3, [r8]
 800ad98:	f8c8 2000 	strlt.w	r2, [r8]
 800ad9c:	4b9e      	ldr	r3, [pc, #632]	; (800b018 <_dtoa_r+0x2f0>)
 800ad9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ada2:	ea33 0308 	bics.w	r3, r3, r8
 800ada6:	d11b      	bne.n	800ade0 <_dtoa_r+0xb8>
 800ada8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800adae:	6013      	str	r3, [r2, #0]
 800adb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800adb4:	4333      	orrs	r3, r6
 800adb6:	f000 8593 	beq.w	800b8e0 <_dtoa_r+0xbb8>
 800adba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adbc:	b963      	cbnz	r3, 800add8 <_dtoa_r+0xb0>
 800adbe:	4b97      	ldr	r3, [pc, #604]	; (800b01c <_dtoa_r+0x2f4>)
 800adc0:	e027      	b.n	800ae12 <_dtoa_r+0xea>
 800adc2:	4b97      	ldr	r3, [pc, #604]	; (800b020 <_dtoa_r+0x2f8>)
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	3308      	adds	r3, #8
 800adc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	9800      	ldr	r0, [sp, #0]
 800adce:	b013      	add	sp, #76	; 0x4c
 800add0:	ecbd 8b04 	vpop	{d8-d9}
 800add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add8:	4b90      	ldr	r3, [pc, #576]	; (800b01c <_dtoa_r+0x2f4>)
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	3303      	adds	r3, #3
 800adde:	e7f3      	b.n	800adc8 <_dtoa_r+0xa0>
 800ade0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade4:	2200      	movs	r2, #0
 800ade6:	ec51 0b17 	vmov	r0, r1, d7
 800adea:	eeb0 8a47 	vmov.f32	s16, s14
 800adee:	eef0 8a67 	vmov.f32	s17, s15
 800adf2:	2300      	movs	r3, #0
 800adf4:	f7f5 fe68 	bl	8000ac8 <__aeabi_dcmpeq>
 800adf8:	4681      	mov	r9, r0
 800adfa:	b160      	cbz	r0, 800ae16 <_dtoa_r+0xee>
 800adfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adfe:	2301      	movs	r3, #1
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 8568 	beq.w	800b8da <_dtoa_r+0xbb2>
 800ae0a:	4b86      	ldr	r3, [pc, #536]	; (800b024 <_dtoa_r+0x2fc>)
 800ae0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	e7da      	b.n	800adcc <_dtoa_r+0xa4>
 800ae16:	aa10      	add	r2, sp, #64	; 0x40
 800ae18:	a911      	add	r1, sp, #68	; 0x44
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae20:	eef0 0a68 	vmov.f32	s1, s17
 800ae24:	f001 fd04 	bl	800c830 <__d2b>
 800ae28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	2d00      	cmp	r5, #0
 800ae30:	d07f      	beq.n	800af32 <_dtoa_r+0x20a>
 800ae32:	ee18 3a90 	vmov	r3, s17
 800ae36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ae3e:	ec51 0b18 	vmov	r0, r1, d8
 800ae42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ae4e:	4619      	mov	r1, r3
 800ae50:	2200      	movs	r2, #0
 800ae52:	4b75      	ldr	r3, [pc, #468]	; (800b028 <_dtoa_r+0x300>)
 800ae54:	f7f5 fa18 	bl	8000288 <__aeabi_dsub>
 800ae58:	a367      	add	r3, pc, #412	; (adr r3, 800aff8 <_dtoa_r+0x2d0>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	f7f5 fbcb 	bl	80005f8 <__aeabi_dmul>
 800ae62:	a367      	add	r3, pc, #412	; (adr r3, 800b000 <_dtoa_r+0x2d8>)
 800ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae68:	f7f5 fa10 	bl	800028c <__adddf3>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	4628      	mov	r0, r5
 800ae70:	460f      	mov	r7, r1
 800ae72:	f7f5 fb57 	bl	8000524 <__aeabi_i2d>
 800ae76:	a364      	add	r3, pc, #400	; (adr r3, 800b008 <_dtoa_r+0x2e0>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f7f5 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4630      	mov	r0, r6
 800ae86:	4639      	mov	r1, r7
 800ae88:	f7f5 fa00 	bl	800028c <__adddf3>
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	460f      	mov	r7, r1
 800ae90:	f7f5 fe62 	bl	8000b58 <__aeabi_d2iz>
 800ae94:	2200      	movs	r2, #0
 800ae96:	4683      	mov	fp, r0
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	f7f5 fe1d 	bl	8000adc <__aeabi_dcmplt>
 800aea2:	b148      	cbz	r0, 800aeb8 <_dtoa_r+0x190>
 800aea4:	4658      	mov	r0, fp
 800aea6:	f7f5 fb3d 	bl	8000524 <__aeabi_i2d>
 800aeaa:	4632      	mov	r2, r6
 800aeac:	463b      	mov	r3, r7
 800aeae:	f7f5 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeb2:	b908      	cbnz	r0, 800aeb8 <_dtoa_r+0x190>
 800aeb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aeb8:	f1bb 0f16 	cmp.w	fp, #22
 800aebc:	d857      	bhi.n	800af6e <_dtoa_r+0x246>
 800aebe:	4b5b      	ldr	r3, [pc, #364]	; (800b02c <_dtoa_r+0x304>)
 800aec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	ec51 0b18 	vmov	r0, r1, d8
 800aecc:	f7f5 fe06 	bl	8000adc <__aeabi_dcmplt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	d04e      	beq.n	800af72 <_dtoa_r+0x24a>
 800aed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aed8:	2300      	movs	r3, #0
 800aeda:	930c      	str	r3, [sp, #48]	; 0x30
 800aedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aede:	1b5b      	subs	r3, r3, r5
 800aee0:	1e5a      	subs	r2, r3, #1
 800aee2:	bf45      	ittet	mi
 800aee4:	f1c3 0301 	rsbmi	r3, r3, #1
 800aee8:	9305      	strmi	r3, [sp, #20]
 800aeea:	2300      	movpl	r3, #0
 800aeec:	2300      	movmi	r3, #0
 800aeee:	9206      	str	r2, [sp, #24]
 800aef0:	bf54      	ite	pl
 800aef2:	9305      	strpl	r3, [sp, #20]
 800aef4:	9306      	strmi	r3, [sp, #24]
 800aef6:	f1bb 0f00 	cmp.w	fp, #0
 800aefa:	db3c      	blt.n	800af76 <_dtoa_r+0x24e>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800af02:	445b      	add	r3, fp
 800af04:	9306      	str	r3, [sp, #24]
 800af06:	2300      	movs	r3, #0
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	9b07      	ldr	r3, [sp, #28]
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	d868      	bhi.n	800afe2 <_dtoa_r+0x2ba>
 800af10:	2b05      	cmp	r3, #5
 800af12:	bfc4      	itt	gt
 800af14:	3b04      	subgt	r3, #4
 800af16:	9307      	strgt	r3, [sp, #28]
 800af18:	9b07      	ldr	r3, [sp, #28]
 800af1a:	f1a3 0302 	sub.w	r3, r3, #2
 800af1e:	bfcc      	ite	gt
 800af20:	2500      	movgt	r5, #0
 800af22:	2501      	movle	r5, #1
 800af24:	2b03      	cmp	r3, #3
 800af26:	f200 8085 	bhi.w	800b034 <_dtoa_r+0x30c>
 800af2a:	e8df f003 	tbb	[pc, r3]
 800af2e:	3b2e      	.short	0x3b2e
 800af30:	5839      	.short	0x5839
 800af32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af36:	441d      	add	r5, r3
 800af38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	bfc1      	itttt	gt
 800af40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af44:	fa08 f803 	lslgt.w	r8, r8, r3
 800af48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800af4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800af50:	bfd6      	itet	le
 800af52:	f1c3 0320 	rsble	r3, r3, #32
 800af56:	ea48 0003 	orrgt.w	r0, r8, r3
 800af5a:	fa06 f003 	lslle.w	r0, r6, r3
 800af5e:	f7f5 fad1 	bl	8000504 <__aeabi_ui2d>
 800af62:	2201      	movs	r2, #1
 800af64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af68:	3d01      	subs	r5, #1
 800af6a:	920e      	str	r2, [sp, #56]	; 0x38
 800af6c:	e76f      	b.n	800ae4e <_dtoa_r+0x126>
 800af6e:	2301      	movs	r3, #1
 800af70:	e7b3      	b.n	800aeda <_dtoa_r+0x1b2>
 800af72:	900c      	str	r0, [sp, #48]	; 0x30
 800af74:	e7b2      	b.n	800aedc <_dtoa_r+0x1b4>
 800af76:	9b05      	ldr	r3, [sp, #20]
 800af78:	eba3 030b 	sub.w	r3, r3, fp
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	f1cb 0300 	rsb	r3, fp, #0
 800af82:	9308      	str	r3, [sp, #32]
 800af84:	2300      	movs	r3, #0
 800af86:	930b      	str	r3, [sp, #44]	; 0x2c
 800af88:	e7bf      	b.n	800af0a <_dtoa_r+0x1e2>
 800af8a:	2300      	movs	r3, #0
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc52      	bgt.n	800b03a <_dtoa_r+0x312>
 800af94:	2301      	movs	r3, #1
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	461a      	mov	r2, r3
 800af9c:	920a      	str	r2, [sp, #40]	; 0x28
 800af9e:	e00b      	b.n	800afb8 <_dtoa_r+0x290>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f3      	b.n	800af8c <_dtoa_r+0x264>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afaa:	445b      	add	r3, fp
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	3301      	adds	r3, #1
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	bfb8      	it	lt
 800afb6:	2301      	movlt	r3, #1
 800afb8:	69e0      	ldr	r0, [r4, #28]
 800afba:	2100      	movs	r1, #0
 800afbc:	2204      	movs	r2, #4
 800afbe:	f102 0614 	add.w	r6, r2, #20
 800afc2:	429e      	cmp	r6, r3
 800afc4:	d93d      	bls.n	800b042 <_dtoa_r+0x31a>
 800afc6:	6041      	str	r1, [r0, #4]
 800afc8:	4620      	mov	r0, r4
 800afca:	f001 f855 	bl	800c078 <_Balloc>
 800afce:	9000      	str	r0, [sp, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d139      	bne.n	800b048 <_dtoa_r+0x320>
 800afd4:	4b16      	ldr	r3, [pc, #88]	; (800b030 <_dtoa_r+0x308>)
 800afd6:	4602      	mov	r2, r0
 800afd8:	f240 11af 	movw	r1, #431	; 0x1af
 800afdc:	e6bd      	b.n	800ad5a <_dtoa_r+0x32>
 800afde:	2301      	movs	r3, #1
 800afe0:	e7e1      	b.n	800afa6 <_dtoa_r+0x27e>
 800afe2:	2501      	movs	r5, #1
 800afe4:	2300      	movs	r3, #0
 800afe6:	9307      	str	r3, [sp, #28]
 800afe8:	9509      	str	r5, [sp, #36]	; 0x24
 800afea:	f04f 33ff 	mov.w	r3, #4294967295
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	2312      	movs	r3, #18
 800aff6:	e7d1      	b.n	800af9c <_dtoa_r+0x274>
 800aff8:	636f4361 	.word	0x636f4361
 800affc:	3fd287a7 	.word	0x3fd287a7
 800b000:	8b60c8b3 	.word	0x8b60c8b3
 800b004:	3fc68a28 	.word	0x3fc68a28
 800b008:	509f79fb 	.word	0x509f79fb
 800b00c:	3fd34413 	.word	0x3fd34413
 800b010:	0800d86a 	.word	0x0800d86a
 800b014:	0800d92c 	.word	0x0800d92c
 800b018:	7ff00000 	.word	0x7ff00000
 800b01c:	0800d928 	.word	0x0800d928
 800b020:	0800d91f 	.word	0x0800d91f
 800b024:	0800d842 	.word	0x0800d842
 800b028:	3ff80000 	.word	0x3ff80000
 800b02c:	0800da78 	.word	0x0800da78
 800b030:	0800d984 	.word	0x0800d984
 800b034:	2301      	movs	r3, #1
 800b036:	9309      	str	r3, [sp, #36]	; 0x24
 800b038:	e7d7      	b.n	800afea <_dtoa_r+0x2c2>
 800b03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	e7ba      	b.n	800afb8 <_dtoa_r+0x290>
 800b042:	3101      	adds	r1, #1
 800b044:	0052      	lsls	r2, r2, #1
 800b046:	e7ba      	b.n	800afbe <_dtoa_r+0x296>
 800b048:	69e3      	ldr	r3, [r4, #28]
 800b04a:	9a00      	ldr	r2, [sp, #0]
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	9b04      	ldr	r3, [sp, #16]
 800b050:	2b0e      	cmp	r3, #14
 800b052:	f200 80a8 	bhi.w	800b1a6 <_dtoa_r+0x47e>
 800b056:	2d00      	cmp	r5, #0
 800b058:	f000 80a5 	beq.w	800b1a6 <_dtoa_r+0x47e>
 800b05c:	f1bb 0f00 	cmp.w	fp, #0
 800b060:	dd38      	ble.n	800b0d4 <_dtoa_r+0x3ac>
 800b062:	4bc0      	ldr	r3, [pc, #768]	; (800b364 <_dtoa_r+0x63c>)
 800b064:	f00b 020f 	and.w	r2, fp, #15
 800b068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b070:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b074:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b078:	d019      	beq.n	800b0ae <_dtoa_r+0x386>
 800b07a:	4bbb      	ldr	r3, [pc, #748]	; (800b368 <_dtoa_r+0x640>)
 800b07c:	ec51 0b18 	vmov	r0, r1, d8
 800b080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b084:	f7f5 fbe2 	bl	800084c <__aeabi_ddiv>
 800b088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b08c:	f008 080f 	and.w	r8, r8, #15
 800b090:	2503      	movs	r5, #3
 800b092:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b368 <_dtoa_r+0x640>
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	d10a      	bne.n	800b0b2 <_dtoa_r+0x38a>
 800b09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	463b      	mov	r3, r7
 800b0a4:	f7f5 fbd2 	bl	800084c <__aeabi_ddiv>
 800b0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ac:	e02b      	b.n	800b106 <_dtoa_r+0x3de>
 800b0ae:	2502      	movs	r5, #2
 800b0b0:	e7ef      	b.n	800b092 <_dtoa_r+0x36a>
 800b0b2:	f018 0f01 	tst.w	r8, #1
 800b0b6:	d008      	beq.n	800b0ca <_dtoa_r+0x3a2>
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0c0:	f7f5 fa9a 	bl	80005f8 <__aeabi_dmul>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460f      	mov	r7, r1
 800b0ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0ce:	f109 0908 	add.w	r9, r9, #8
 800b0d2:	e7e0      	b.n	800b096 <_dtoa_r+0x36e>
 800b0d4:	f000 809f 	beq.w	800b216 <_dtoa_r+0x4ee>
 800b0d8:	f1cb 0600 	rsb	r6, fp, #0
 800b0dc:	4ba1      	ldr	r3, [pc, #644]	; (800b364 <_dtoa_r+0x63c>)
 800b0de:	4fa2      	ldr	r7, [pc, #648]	; (800b368 <_dtoa_r+0x640>)
 800b0e0:	f006 020f 	and.w	r2, r6, #15
 800b0e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ec:	ec51 0b18 	vmov	r0, r1, d8
 800b0f0:	f7f5 fa82 	bl	80005f8 <__aeabi_dmul>
 800b0f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0f8:	1136      	asrs	r6, r6, #4
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2502      	movs	r5, #2
 800b0fe:	2e00      	cmp	r6, #0
 800b100:	d17e      	bne.n	800b200 <_dtoa_r+0x4d8>
 800b102:	2b00      	cmp	r3, #0
 800b104:	d1d0      	bne.n	800b0a8 <_dtoa_r+0x380>
 800b106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b108:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8084 	beq.w	800b21a <_dtoa_r+0x4f2>
 800b112:	4b96      	ldr	r3, [pc, #600]	; (800b36c <_dtoa_r+0x644>)
 800b114:	2200      	movs	r2, #0
 800b116:	4640      	mov	r0, r8
 800b118:	4649      	mov	r1, r9
 800b11a:	f7f5 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d07b      	beq.n	800b21a <_dtoa_r+0x4f2>
 800b122:	9b04      	ldr	r3, [sp, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d078      	beq.n	800b21a <_dtoa_r+0x4f2>
 800b128:	9b01      	ldr	r3, [sp, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	dd39      	ble.n	800b1a2 <_dtoa_r+0x47a>
 800b12e:	4b90      	ldr	r3, [pc, #576]	; (800b370 <_dtoa_r+0x648>)
 800b130:	2200      	movs	r2, #0
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 fa5f 	bl	80005f8 <__aeabi_dmul>
 800b13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b13e:	9e01      	ldr	r6, [sp, #4]
 800b140:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b144:	3501      	adds	r5, #1
 800b146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b14a:	4628      	mov	r0, r5
 800b14c:	f7f5 f9ea 	bl	8000524 <__aeabi_i2d>
 800b150:	4642      	mov	r2, r8
 800b152:	464b      	mov	r3, r9
 800b154:	f7f5 fa50 	bl	80005f8 <__aeabi_dmul>
 800b158:	4b86      	ldr	r3, [pc, #536]	; (800b374 <_dtoa_r+0x64c>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7f5 f896 	bl	800028c <__adddf3>
 800b160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b168:	9303      	str	r3, [sp, #12]
 800b16a:	2e00      	cmp	r6, #0
 800b16c:	d158      	bne.n	800b220 <_dtoa_r+0x4f8>
 800b16e:	4b82      	ldr	r3, [pc, #520]	; (800b378 <_dtoa_r+0x650>)
 800b170:	2200      	movs	r2, #0
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 f887 	bl	8000288 <__aeabi_dsub>
 800b17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b17e:	4680      	mov	r8, r0
 800b180:	4689      	mov	r9, r1
 800b182:	f7f5 fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 800b186:	2800      	cmp	r0, #0
 800b188:	f040 8296 	bne.w	800b6b8 <_dtoa_r+0x990>
 800b18c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b190:	4640      	mov	r0, r8
 800b192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b196:	4649      	mov	r1, r9
 800b198:	f7f5 fca0 	bl	8000adc <__aeabi_dcmplt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f040 8289 	bne.w	800b6b4 <_dtoa_r+0x98c>
 800b1a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f2c0 814e 	blt.w	800b44a <_dtoa_r+0x722>
 800b1ae:	f1bb 0f0e 	cmp.w	fp, #14
 800b1b2:	f300 814a 	bgt.w	800b44a <_dtoa_r+0x722>
 800b1b6:	4b6b      	ldr	r3, [pc, #428]	; (800b364 <_dtoa_r+0x63c>)
 800b1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f280 80dc 	bge.w	800b380 <_dtoa_r+0x658>
 800b1c8:	9b04      	ldr	r3, [sp, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f300 80d8 	bgt.w	800b380 <_dtoa_r+0x658>
 800b1d0:	f040 826f 	bne.w	800b6b2 <_dtoa_r+0x98a>
 800b1d4:	4b68      	ldr	r3, [pc, #416]	; (800b378 <_dtoa_r+0x650>)
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4640      	mov	r0, r8
 800b1da:	4649      	mov	r1, r9
 800b1dc:	f7f5 fa0c 	bl	80005f8 <__aeabi_dmul>
 800b1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e4:	f7f5 fc8e 	bl	8000b04 <__aeabi_dcmpge>
 800b1e8:	9e04      	ldr	r6, [sp, #16]
 800b1ea:	4637      	mov	r7, r6
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f040 8245 	bne.w	800b67c <_dtoa_r+0x954>
 800b1f2:	9d00      	ldr	r5, [sp, #0]
 800b1f4:	2331      	movs	r3, #49	; 0x31
 800b1f6:	f805 3b01 	strb.w	r3, [r5], #1
 800b1fa:	f10b 0b01 	add.w	fp, fp, #1
 800b1fe:	e241      	b.n	800b684 <_dtoa_r+0x95c>
 800b200:	07f2      	lsls	r2, r6, #31
 800b202:	d505      	bpl.n	800b210 <_dtoa_r+0x4e8>
 800b204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b208:	f7f5 f9f6 	bl	80005f8 <__aeabi_dmul>
 800b20c:	3501      	adds	r5, #1
 800b20e:	2301      	movs	r3, #1
 800b210:	1076      	asrs	r6, r6, #1
 800b212:	3708      	adds	r7, #8
 800b214:	e773      	b.n	800b0fe <_dtoa_r+0x3d6>
 800b216:	2502      	movs	r5, #2
 800b218:	e775      	b.n	800b106 <_dtoa_r+0x3de>
 800b21a:	9e04      	ldr	r6, [sp, #16]
 800b21c:	465f      	mov	r7, fp
 800b21e:	e792      	b.n	800b146 <_dtoa_r+0x41e>
 800b220:	9900      	ldr	r1, [sp, #0]
 800b222:	4b50      	ldr	r3, [pc, #320]	; (800b364 <_dtoa_r+0x63c>)
 800b224:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b228:	4431      	add	r1, r6
 800b22a:	9102      	str	r1, [sp, #8]
 800b22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b22e:	eeb0 9a47 	vmov.f32	s18, s14
 800b232:	eef0 9a67 	vmov.f32	s19, s15
 800b236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b23a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b23e:	2900      	cmp	r1, #0
 800b240:	d044      	beq.n	800b2cc <_dtoa_r+0x5a4>
 800b242:	494e      	ldr	r1, [pc, #312]	; (800b37c <_dtoa_r+0x654>)
 800b244:	2000      	movs	r0, #0
 800b246:	f7f5 fb01 	bl	800084c <__aeabi_ddiv>
 800b24a:	ec53 2b19 	vmov	r2, r3, d9
 800b24e:	f7f5 f81b 	bl	8000288 <__aeabi_dsub>
 800b252:	9d00      	ldr	r5, [sp, #0]
 800b254:	ec41 0b19 	vmov	d9, r0, r1
 800b258:	4649      	mov	r1, r9
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7f5 fc7c 	bl	8000b58 <__aeabi_d2iz>
 800b260:	4606      	mov	r6, r0
 800b262:	f7f5 f95f 	bl	8000524 <__aeabi_i2d>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	4640      	mov	r0, r8
 800b26c:	4649      	mov	r1, r9
 800b26e:	f7f5 f80b 	bl	8000288 <__aeabi_dsub>
 800b272:	3630      	adds	r6, #48	; 0x30
 800b274:	f805 6b01 	strb.w	r6, [r5], #1
 800b278:	ec53 2b19 	vmov	r2, r3, d9
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	f7f5 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800b284:	2800      	cmp	r0, #0
 800b286:	d164      	bne.n	800b352 <_dtoa_r+0x62a>
 800b288:	4642      	mov	r2, r8
 800b28a:	464b      	mov	r3, r9
 800b28c:	4937      	ldr	r1, [pc, #220]	; (800b36c <_dtoa_r+0x644>)
 800b28e:	2000      	movs	r0, #0
 800b290:	f7f4 fffa 	bl	8000288 <__aeabi_dsub>
 800b294:	ec53 2b19 	vmov	r2, r3, d9
 800b298:	f7f5 fc20 	bl	8000adc <__aeabi_dcmplt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	f040 80b6 	bne.w	800b40e <_dtoa_r+0x6e6>
 800b2a2:	9b02      	ldr	r3, [sp, #8]
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	f43f af7c 	beq.w	800b1a2 <_dtoa_r+0x47a>
 800b2aa:	4b31      	ldr	r3, [pc, #196]	; (800b370 <_dtoa_r+0x648>)
 800b2ac:	ec51 0b19 	vmov	r0, r1, d9
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f7f5 f9a1 	bl	80005f8 <__aeabi_dmul>
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <_dtoa_r+0x648>)
 800b2b8:	ec41 0b19 	vmov	d9, r0, r1
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4640      	mov	r0, r8
 800b2c0:	4649      	mov	r1, r9
 800b2c2:	f7f5 f999 	bl	80005f8 <__aeabi_dmul>
 800b2c6:	4680      	mov	r8, r0
 800b2c8:	4689      	mov	r9, r1
 800b2ca:	e7c5      	b.n	800b258 <_dtoa_r+0x530>
 800b2cc:	ec51 0b17 	vmov	r0, r1, d7
 800b2d0:	f7f5 f992 	bl	80005f8 <__aeabi_dmul>
 800b2d4:	9b02      	ldr	r3, [sp, #8]
 800b2d6:	9d00      	ldr	r5, [sp, #0]
 800b2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2da:	ec41 0b19 	vmov	d9, r0, r1
 800b2de:	4649      	mov	r1, r9
 800b2e0:	4640      	mov	r0, r8
 800b2e2:	f7f5 fc39 	bl	8000b58 <__aeabi_d2iz>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	f7f5 f91c 	bl	8000524 <__aeabi_i2d>
 800b2ec:	3630      	adds	r6, #48	; 0x30
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f7f4 ffc7 	bl	8000288 <__aeabi_dsub>
 800b2fa:	f805 6b01 	strb.w	r6, [r5], #1
 800b2fe:	9b02      	ldr	r3, [sp, #8]
 800b300:	429d      	cmp	r5, r3
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	d124      	bne.n	800b356 <_dtoa_r+0x62e>
 800b30c:	4b1b      	ldr	r3, [pc, #108]	; (800b37c <_dtoa_r+0x654>)
 800b30e:	ec51 0b19 	vmov	r0, r1, d9
 800b312:	f7f4 ffbb 	bl	800028c <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4640      	mov	r0, r8
 800b31c:	4649      	mov	r1, r9
 800b31e:	f7f5 fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 800b322:	2800      	cmp	r0, #0
 800b324:	d173      	bne.n	800b40e <_dtoa_r+0x6e6>
 800b326:	ec53 2b19 	vmov	r2, r3, d9
 800b32a:	4914      	ldr	r1, [pc, #80]	; (800b37c <_dtoa_r+0x654>)
 800b32c:	2000      	movs	r0, #0
 800b32e:	f7f4 ffab 	bl	8000288 <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4640      	mov	r0, r8
 800b338:	4649      	mov	r1, r9
 800b33a:	f7f5 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800b33e:	2800      	cmp	r0, #0
 800b340:	f43f af2f 	beq.w	800b1a2 <_dtoa_r+0x47a>
 800b344:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b346:	1e6b      	subs	r3, r5, #1
 800b348:	930f      	str	r3, [sp, #60]	; 0x3c
 800b34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b34e:	2b30      	cmp	r3, #48	; 0x30
 800b350:	d0f8      	beq.n	800b344 <_dtoa_r+0x61c>
 800b352:	46bb      	mov	fp, r7
 800b354:	e04a      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b356:	4b06      	ldr	r3, [pc, #24]	; (800b370 <_dtoa_r+0x648>)
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	4680      	mov	r8, r0
 800b35e:	4689      	mov	r9, r1
 800b360:	e7bd      	b.n	800b2de <_dtoa_r+0x5b6>
 800b362:	bf00      	nop
 800b364:	0800da78 	.word	0x0800da78
 800b368:	0800da50 	.word	0x0800da50
 800b36c:	3ff00000 	.word	0x3ff00000
 800b370:	40240000 	.word	0x40240000
 800b374:	401c0000 	.word	0x401c0000
 800b378:	40140000 	.word	0x40140000
 800b37c:	3fe00000 	.word	0x3fe00000
 800b380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b384:	9d00      	ldr	r5, [sp, #0]
 800b386:	4642      	mov	r2, r8
 800b388:	464b      	mov	r3, r9
 800b38a:	4630      	mov	r0, r6
 800b38c:	4639      	mov	r1, r7
 800b38e:	f7f5 fa5d 	bl	800084c <__aeabi_ddiv>
 800b392:	f7f5 fbe1 	bl	8000b58 <__aeabi_d2iz>
 800b396:	9001      	str	r0, [sp, #4]
 800b398:	f7f5 f8c4 	bl	8000524 <__aeabi_i2d>
 800b39c:	4642      	mov	r2, r8
 800b39e:	464b      	mov	r3, r9
 800b3a0:	f7f5 f92a 	bl	80005f8 <__aeabi_dmul>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	f7f4 ff6c 	bl	8000288 <__aeabi_dsub>
 800b3b0:	9e01      	ldr	r6, [sp, #4]
 800b3b2:	9f04      	ldr	r7, [sp, #16]
 800b3b4:	3630      	adds	r6, #48	; 0x30
 800b3b6:	f805 6b01 	strb.w	r6, [r5], #1
 800b3ba:	9e00      	ldr	r6, [sp, #0]
 800b3bc:	1bae      	subs	r6, r5, r6
 800b3be:	42b7      	cmp	r7, r6
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	d134      	bne.n	800b430 <_dtoa_r+0x708>
 800b3c6:	f7f4 ff61 	bl	800028c <__adddf3>
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	464b      	mov	r3, r9
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	f7f5 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 800b3d6:	b9c8      	cbnz	r0, 800b40c <_dtoa_r+0x6e4>
 800b3d8:	4642      	mov	r2, r8
 800b3da:	464b      	mov	r3, r9
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3e4:	b110      	cbz	r0, 800b3ec <_dtoa_r+0x6c4>
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	07db      	lsls	r3, r3, #31
 800b3ea:	d40f      	bmi.n	800b40c <_dtoa_r+0x6e4>
 800b3ec:	4651      	mov	r1, sl
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 fe82 	bl	800c0f8 <_Bfree>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b3f8:	702b      	strb	r3, [r5, #0]
 800b3fa:	f10b 0301 	add.w	r3, fp, #1
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b402:	2b00      	cmp	r3, #0
 800b404:	f43f ace2 	beq.w	800adcc <_dtoa_r+0xa4>
 800b408:	601d      	str	r5, [r3, #0]
 800b40a:	e4df      	b.n	800adcc <_dtoa_r+0xa4>
 800b40c:	465f      	mov	r7, fp
 800b40e:	462b      	mov	r3, r5
 800b410:	461d      	mov	r5, r3
 800b412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b416:	2a39      	cmp	r2, #57	; 0x39
 800b418:	d106      	bne.n	800b428 <_dtoa_r+0x700>
 800b41a:	9a00      	ldr	r2, [sp, #0]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d1f7      	bne.n	800b410 <_dtoa_r+0x6e8>
 800b420:	9900      	ldr	r1, [sp, #0]
 800b422:	2230      	movs	r2, #48	; 0x30
 800b424:	3701      	adds	r7, #1
 800b426:	700a      	strb	r2, [r1, #0]
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	3201      	adds	r2, #1
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e790      	b.n	800b352 <_dtoa_r+0x62a>
 800b430:	4ba3      	ldr	r3, [pc, #652]	; (800b6c0 <_dtoa_r+0x998>)
 800b432:	2200      	movs	r2, #0
 800b434:	f7f5 f8e0 	bl	80005f8 <__aeabi_dmul>
 800b438:	2200      	movs	r2, #0
 800b43a:	2300      	movs	r3, #0
 800b43c:	4606      	mov	r6, r0
 800b43e:	460f      	mov	r7, r1
 800b440:	f7f5 fb42 	bl	8000ac8 <__aeabi_dcmpeq>
 800b444:	2800      	cmp	r0, #0
 800b446:	d09e      	beq.n	800b386 <_dtoa_r+0x65e>
 800b448:	e7d0      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b44c:	2a00      	cmp	r2, #0
 800b44e:	f000 80ca 	beq.w	800b5e6 <_dtoa_r+0x8be>
 800b452:	9a07      	ldr	r2, [sp, #28]
 800b454:	2a01      	cmp	r2, #1
 800b456:	f300 80ad 	bgt.w	800b5b4 <_dtoa_r+0x88c>
 800b45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b45c:	2a00      	cmp	r2, #0
 800b45e:	f000 80a5 	beq.w	800b5ac <_dtoa_r+0x884>
 800b462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b466:	9e08      	ldr	r6, [sp, #32]
 800b468:	9d05      	ldr	r5, [sp, #20]
 800b46a:	9a05      	ldr	r2, [sp, #20]
 800b46c:	441a      	add	r2, r3
 800b46e:	9205      	str	r2, [sp, #20]
 800b470:	9a06      	ldr	r2, [sp, #24]
 800b472:	2101      	movs	r1, #1
 800b474:	441a      	add	r2, r3
 800b476:	4620      	mov	r0, r4
 800b478:	9206      	str	r2, [sp, #24]
 800b47a:	f000 ff3d 	bl	800c2f8 <__i2b>
 800b47e:	4607      	mov	r7, r0
 800b480:	b165      	cbz	r5, 800b49c <_dtoa_r+0x774>
 800b482:	9b06      	ldr	r3, [sp, #24]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dd09      	ble.n	800b49c <_dtoa_r+0x774>
 800b488:	42ab      	cmp	r3, r5
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	bfa8      	it	ge
 800b48e:	462b      	movge	r3, r5
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	9205      	str	r2, [sp, #20]
 800b494:	9a06      	ldr	r2, [sp, #24]
 800b496:	1aed      	subs	r5, r5, r3
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	9306      	str	r3, [sp, #24]
 800b49c:	9b08      	ldr	r3, [sp, #32]
 800b49e:	b1f3      	cbz	r3, 800b4de <_dtoa_r+0x7b6>
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f000 80a3 	beq.w	800b5ee <_dtoa_r+0x8c6>
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	dd10      	ble.n	800b4ce <_dtoa_r+0x7a6>
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	4632      	mov	r2, r6
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 ffe1 	bl	800c478 <__pow5mult>
 800b4b6:	4652      	mov	r2, sl
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 ff31 	bl	800c324 <__multiply>
 800b4c2:	4651      	mov	r1, sl
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 fe16 	bl	800c0f8 <_Bfree>
 800b4cc:	46c2      	mov	sl, r8
 800b4ce:	9b08      	ldr	r3, [sp, #32]
 800b4d0:	1b9a      	subs	r2, r3, r6
 800b4d2:	d004      	beq.n	800b4de <_dtoa_r+0x7b6>
 800b4d4:	4651      	mov	r1, sl
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f000 ffce 	bl	800c478 <__pow5mult>
 800b4dc:	4682      	mov	sl, r0
 800b4de:	2101      	movs	r1, #1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 ff09 	bl	800c2f8 <__i2b>
 800b4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	f340 8081 	ble.w	800b5f2 <_dtoa_r+0x8ca>
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 ffbf 	bl	800c478 <__pow5mult>
 800b4fa:	9b07      	ldr	r3, [sp, #28]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	4606      	mov	r6, r0
 800b500:	dd7a      	ble.n	800b5f8 <_dtoa_r+0x8d0>
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	6933      	ldr	r3, [r6, #16]
 800b508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b50c:	6918      	ldr	r0, [r3, #16]
 800b50e:	f000 fea5 	bl	800c25c <__hi0bits>
 800b512:	f1c0 0020 	rsb	r0, r0, #32
 800b516:	9b06      	ldr	r3, [sp, #24]
 800b518:	4418      	add	r0, r3
 800b51a:	f010 001f 	ands.w	r0, r0, #31
 800b51e:	f000 8094 	beq.w	800b64a <_dtoa_r+0x922>
 800b522:	f1c0 0320 	rsb	r3, r0, #32
 800b526:	2b04      	cmp	r3, #4
 800b528:	f340 8085 	ble.w	800b636 <_dtoa_r+0x90e>
 800b52c:	9b05      	ldr	r3, [sp, #20]
 800b52e:	f1c0 001c 	rsb	r0, r0, #28
 800b532:	4403      	add	r3, r0
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	9b06      	ldr	r3, [sp, #24]
 800b538:	4403      	add	r3, r0
 800b53a:	4405      	add	r5, r0
 800b53c:	9306      	str	r3, [sp, #24]
 800b53e:	9b05      	ldr	r3, [sp, #20]
 800b540:	2b00      	cmp	r3, #0
 800b542:	dd05      	ble.n	800b550 <_dtoa_r+0x828>
 800b544:	4651      	mov	r1, sl
 800b546:	461a      	mov	r2, r3
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 ffef 	bl	800c52c <__lshift>
 800b54e:	4682      	mov	sl, r0
 800b550:	9b06      	ldr	r3, [sp, #24]
 800b552:	2b00      	cmp	r3, #0
 800b554:	dd05      	ble.n	800b562 <_dtoa_r+0x83a>
 800b556:	4631      	mov	r1, r6
 800b558:	461a      	mov	r2, r3
 800b55a:	4620      	mov	r0, r4
 800b55c:	f000 ffe6 	bl	800c52c <__lshift>
 800b560:	4606      	mov	r6, r0
 800b562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b564:	2b00      	cmp	r3, #0
 800b566:	d072      	beq.n	800b64e <_dtoa_r+0x926>
 800b568:	4631      	mov	r1, r6
 800b56a:	4650      	mov	r0, sl
 800b56c:	f001 f84a 	bl	800c604 <__mcmp>
 800b570:	2800      	cmp	r0, #0
 800b572:	da6c      	bge.n	800b64e <_dtoa_r+0x926>
 800b574:	2300      	movs	r3, #0
 800b576:	4651      	mov	r1, sl
 800b578:	220a      	movs	r2, #10
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fdde 	bl	800c13c <__multadd>
 800b580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b582:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b586:	4682      	mov	sl, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 81b0 	beq.w	800b8ee <_dtoa_r+0xbc6>
 800b58e:	2300      	movs	r3, #0
 800b590:	4639      	mov	r1, r7
 800b592:	220a      	movs	r2, #10
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fdd1 	bl	800c13c <__multadd>
 800b59a:	9b01      	ldr	r3, [sp, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f300 8096 	bgt.w	800b6d0 <_dtoa_r+0x9a8>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	dc59      	bgt.n	800b65e <_dtoa_r+0x936>
 800b5aa:	e091      	b.n	800b6d0 <_dtoa_r+0x9a8>
 800b5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5b2:	e758      	b.n	800b466 <_dtoa_r+0x73e>
 800b5b4:	9b04      	ldr	r3, [sp, #16]
 800b5b6:	1e5e      	subs	r6, r3, #1
 800b5b8:	9b08      	ldr	r3, [sp, #32]
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	bfbf      	itttt	lt
 800b5be:	9b08      	ldrlt	r3, [sp, #32]
 800b5c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b5c2:	9608      	strlt	r6, [sp, #32]
 800b5c4:	1af3      	sublt	r3, r6, r3
 800b5c6:	bfb4      	ite	lt
 800b5c8:	18d2      	addlt	r2, r2, r3
 800b5ca:	1b9e      	subge	r6, r3, r6
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	bfbc      	itt	lt
 800b5d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b5d2:	2600      	movlt	r6, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb7      	itett	lt
 800b5d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b5dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b5e0:	1a9d      	sublt	r5, r3, r2
 800b5e2:	2300      	movlt	r3, #0
 800b5e4:	e741      	b.n	800b46a <_dtoa_r+0x742>
 800b5e6:	9e08      	ldr	r6, [sp, #32]
 800b5e8:	9d05      	ldr	r5, [sp, #20]
 800b5ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b5ec:	e748      	b.n	800b480 <_dtoa_r+0x758>
 800b5ee:	9a08      	ldr	r2, [sp, #32]
 800b5f0:	e770      	b.n	800b4d4 <_dtoa_r+0x7ac>
 800b5f2:	9b07      	ldr	r3, [sp, #28]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	dc19      	bgt.n	800b62c <_dtoa_r+0x904>
 800b5f8:	9b02      	ldr	r3, [sp, #8]
 800b5fa:	b9bb      	cbnz	r3, 800b62c <_dtoa_r+0x904>
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b602:	b99b      	cbnz	r3, 800b62c <_dtoa_r+0x904>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b60a:	0d1b      	lsrs	r3, r3, #20
 800b60c:	051b      	lsls	r3, r3, #20
 800b60e:	b183      	cbz	r3, 800b632 <_dtoa_r+0x90a>
 800b610:	9b05      	ldr	r3, [sp, #20]
 800b612:	3301      	adds	r3, #1
 800b614:	9305      	str	r3, [sp, #20]
 800b616:	9b06      	ldr	r3, [sp, #24]
 800b618:	3301      	adds	r3, #1
 800b61a:	9306      	str	r3, [sp, #24]
 800b61c:	f04f 0801 	mov.w	r8, #1
 800b620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b622:	2b00      	cmp	r3, #0
 800b624:	f47f af6f 	bne.w	800b506 <_dtoa_r+0x7de>
 800b628:	2001      	movs	r0, #1
 800b62a:	e774      	b.n	800b516 <_dtoa_r+0x7ee>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	e7f6      	b.n	800b620 <_dtoa_r+0x8f8>
 800b632:	4698      	mov	r8, r3
 800b634:	e7f4      	b.n	800b620 <_dtoa_r+0x8f8>
 800b636:	d082      	beq.n	800b53e <_dtoa_r+0x816>
 800b638:	9a05      	ldr	r2, [sp, #20]
 800b63a:	331c      	adds	r3, #28
 800b63c:	441a      	add	r2, r3
 800b63e:	9205      	str	r2, [sp, #20]
 800b640:	9a06      	ldr	r2, [sp, #24]
 800b642:	441a      	add	r2, r3
 800b644:	441d      	add	r5, r3
 800b646:	9206      	str	r2, [sp, #24]
 800b648:	e779      	b.n	800b53e <_dtoa_r+0x816>
 800b64a:	4603      	mov	r3, r0
 800b64c:	e7f4      	b.n	800b638 <_dtoa_r+0x910>
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc37      	bgt.n	800b6c4 <_dtoa_r+0x99c>
 800b654:	9b07      	ldr	r3, [sp, #28]
 800b656:	2b02      	cmp	r3, #2
 800b658:	dd34      	ble.n	800b6c4 <_dtoa_r+0x99c>
 800b65a:	9b04      	ldr	r3, [sp, #16]
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	b963      	cbnz	r3, 800b67c <_dtoa_r+0x954>
 800b662:	4631      	mov	r1, r6
 800b664:	2205      	movs	r2, #5
 800b666:	4620      	mov	r0, r4
 800b668:	f000 fd68 	bl	800c13c <__multadd>
 800b66c:	4601      	mov	r1, r0
 800b66e:	4606      	mov	r6, r0
 800b670:	4650      	mov	r0, sl
 800b672:	f000 ffc7 	bl	800c604 <__mcmp>
 800b676:	2800      	cmp	r0, #0
 800b678:	f73f adbb 	bgt.w	800b1f2 <_dtoa_r+0x4ca>
 800b67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b67e:	9d00      	ldr	r5, [sp, #0]
 800b680:	ea6f 0b03 	mvn.w	fp, r3
 800b684:	f04f 0800 	mov.w	r8, #0
 800b688:	4631      	mov	r1, r6
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fd34 	bl	800c0f8 <_Bfree>
 800b690:	2f00      	cmp	r7, #0
 800b692:	f43f aeab 	beq.w	800b3ec <_dtoa_r+0x6c4>
 800b696:	f1b8 0f00 	cmp.w	r8, #0
 800b69a:	d005      	beq.n	800b6a8 <_dtoa_r+0x980>
 800b69c:	45b8      	cmp	r8, r7
 800b69e:	d003      	beq.n	800b6a8 <_dtoa_r+0x980>
 800b6a0:	4641      	mov	r1, r8
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 fd28 	bl	800c0f8 <_Bfree>
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fd24 	bl	800c0f8 <_Bfree>
 800b6b0:	e69c      	b.n	800b3ec <_dtoa_r+0x6c4>
 800b6b2:	2600      	movs	r6, #0
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	e7e1      	b.n	800b67c <_dtoa_r+0x954>
 800b6b8:	46bb      	mov	fp, r7
 800b6ba:	4637      	mov	r7, r6
 800b6bc:	e599      	b.n	800b1f2 <_dtoa_r+0x4ca>
 800b6be:	bf00      	nop
 800b6c0:	40240000 	.word	0x40240000
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f000 80c8 	beq.w	800b85c <_dtoa_r+0xb34>
 800b6cc:	9b04      	ldr	r3, [sp, #16]
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	2d00      	cmp	r5, #0
 800b6d2:	dd05      	ble.n	800b6e0 <_dtoa_r+0x9b8>
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 ff27 	bl	800c52c <__lshift>
 800b6de:	4607      	mov	r7, r0
 800b6e0:	f1b8 0f00 	cmp.w	r8, #0
 800b6e4:	d05b      	beq.n	800b79e <_dtoa_r+0xa76>
 800b6e6:	6879      	ldr	r1, [r7, #4]
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f000 fcc5 	bl	800c078 <_Balloc>
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	b928      	cbnz	r0, 800b6fe <_dtoa_r+0x9d6>
 800b6f2:	4b83      	ldr	r3, [pc, #524]	; (800b900 <_dtoa_r+0xbd8>)
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b6fa:	f7ff bb2e 	b.w	800ad5a <_dtoa_r+0x32>
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	3202      	adds	r2, #2
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	f107 010c 	add.w	r1, r7, #12
 800b708:	300c      	adds	r0, #12
 800b70a:	f7ff fa48 	bl	800ab9e <memcpy>
 800b70e:	2201      	movs	r2, #1
 800b710:	4629      	mov	r1, r5
 800b712:	4620      	mov	r0, r4
 800b714:	f000 ff0a 	bl	800c52c <__lshift>
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	3301      	adds	r3, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b722:	4413      	add	r3, r2
 800b724:	9308      	str	r3, [sp, #32]
 800b726:	9b02      	ldr	r3, [sp, #8]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	46b8      	mov	r8, r7
 800b72e:	9306      	str	r3, [sp, #24]
 800b730:	4607      	mov	r7, r0
 800b732:	9b04      	ldr	r3, [sp, #16]
 800b734:	4631      	mov	r1, r6
 800b736:	3b01      	subs	r3, #1
 800b738:	4650      	mov	r0, sl
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	f7ff fa6c 	bl	800ac18 <quorem>
 800b740:	4641      	mov	r1, r8
 800b742:	9002      	str	r0, [sp, #8]
 800b744:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b748:	4650      	mov	r0, sl
 800b74a:	f000 ff5b 	bl	800c604 <__mcmp>
 800b74e:	463a      	mov	r2, r7
 800b750:	9005      	str	r0, [sp, #20]
 800b752:	4631      	mov	r1, r6
 800b754:	4620      	mov	r0, r4
 800b756:	f000 ff71 	bl	800c63c <__mdiff>
 800b75a:	68c2      	ldr	r2, [r0, #12]
 800b75c:	4605      	mov	r5, r0
 800b75e:	bb02      	cbnz	r2, 800b7a2 <_dtoa_r+0xa7a>
 800b760:	4601      	mov	r1, r0
 800b762:	4650      	mov	r0, sl
 800b764:	f000 ff4e 	bl	800c604 <__mcmp>
 800b768:	4602      	mov	r2, r0
 800b76a:	4629      	mov	r1, r5
 800b76c:	4620      	mov	r0, r4
 800b76e:	9209      	str	r2, [sp, #36]	; 0x24
 800b770:	f000 fcc2 	bl	800c0f8 <_Bfree>
 800b774:	9b07      	ldr	r3, [sp, #28]
 800b776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b778:	9d04      	ldr	r5, [sp, #16]
 800b77a:	ea43 0102 	orr.w	r1, r3, r2
 800b77e:	9b06      	ldr	r3, [sp, #24]
 800b780:	4319      	orrs	r1, r3
 800b782:	d110      	bne.n	800b7a6 <_dtoa_r+0xa7e>
 800b784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b788:	d029      	beq.n	800b7de <_dtoa_r+0xab6>
 800b78a:	9b05      	ldr	r3, [sp, #20]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd02      	ble.n	800b796 <_dtoa_r+0xa6e>
 800b790:	9b02      	ldr	r3, [sp, #8]
 800b792:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	f883 9000 	strb.w	r9, [r3]
 800b79c:	e774      	b.n	800b688 <_dtoa_r+0x960>
 800b79e:	4638      	mov	r0, r7
 800b7a0:	e7ba      	b.n	800b718 <_dtoa_r+0x9f0>
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	e7e1      	b.n	800b76a <_dtoa_r+0xa42>
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db04      	blt.n	800b7b6 <_dtoa_r+0xa8e>
 800b7ac:	9907      	ldr	r1, [sp, #28]
 800b7ae:	430b      	orrs	r3, r1
 800b7b0:	9906      	ldr	r1, [sp, #24]
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	d120      	bne.n	800b7f8 <_dtoa_r+0xad0>
 800b7b6:	2a00      	cmp	r2, #0
 800b7b8:	dded      	ble.n	800b796 <_dtoa_r+0xa6e>
 800b7ba:	4651      	mov	r1, sl
 800b7bc:	2201      	movs	r2, #1
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 feb4 	bl	800c52c <__lshift>
 800b7c4:	4631      	mov	r1, r6
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	f000 ff1c 	bl	800c604 <__mcmp>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	dc03      	bgt.n	800b7d8 <_dtoa_r+0xab0>
 800b7d0:	d1e1      	bne.n	800b796 <_dtoa_r+0xa6e>
 800b7d2:	f019 0f01 	tst.w	r9, #1
 800b7d6:	d0de      	beq.n	800b796 <_dtoa_r+0xa6e>
 800b7d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b7dc:	d1d8      	bne.n	800b790 <_dtoa_r+0xa68>
 800b7de:	9a01      	ldr	r2, [sp, #4]
 800b7e0:	2339      	movs	r3, #57	; 0x39
 800b7e2:	7013      	strb	r3, [r2, #0]
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7ee:	2a39      	cmp	r2, #57	; 0x39
 800b7f0:	d06c      	beq.n	800b8cc <_dtoa_r+0xba4>
 800b7f2:	3201      	adds	r2, #1
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	e747      	b.n	800b688 <_dtoa_r+0x960>
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	dd07      	ble.n	800b80c <_dtoa_r+0xae4>
 800b7fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b800:	d0ed      	beq.n	800b7de <_dtoa_r+0xab6>
 800b802:	9a01      	ldr	r2, [sp, #4]
 800b804:	f109 0301 	add.w	r3, r9, #1
 800b808:	7013      	strb	r3, [r2, #0]
 800b80a:	e73d      	b.n	800b688 <_dtoa_r+0x960>
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	9a08      	ldr	r2, [sp, #32]
 800b810:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b814:	4293      	cmp	r3, r2
 800b816:	d043      	beq.n	800b8a0 <_dtoa_r+0xb78>
 800b818:	4651      	mov	r1, sl
 800b81a:	2300      	movs	r3, #0
 800b81c:	220a      	movs	r2, #10
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fc8c 	bl	800c13c <__multadd>
 800b824:	45b8      	cmp	r8, r7
 800b826:	4682      	mov	sl, r0
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	f04f 020a 	mov.w	r2, #10
 800b830:	4641      	mov	r1, r8
 800b832:	4620      	mov	r0, r4
 800b834:	d107      	bne.n	800b846 <_dtoa_r+0xb1e>
 800b836:	f000 fc81 	bl	800c13c <__multadd>
 800b83a:	4680      	mov	r8, r0
 800b83c:	4607      	mov	r7, r0
 800b83e:	9b04      	ldr	r3, [sp, #16]
 800b840:	3301      	adds	r3, #1
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	e775      	b.n	800b732 <_dtoa_r+0xa0a>
 800b846:	f000 fc79 	bl	800c13c <__multadd>
 800b84a:	4639      	mov	r1, r7
 800b84c:	4680      	mov	r8, r0
 800b84e:	2300      	movs	r3, #0
 800b850:	220a      	movs	r2, #10
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fc72 	bl	800c13c <__multadd>
 800b858:	4607      	mov	r7, r0
 800b85a:	e7f0      	b.n	800b83e <_dtoa_r+0xb16>
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	9d00      	ldr	r5, [sp, #0]
 800b862:	4631      	mov	r1, r6
 800b864:	4650      	mov	r0, sl
 800b866:	f7ff f9d7 	bl	800ac18 <quorem>
 800b86a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	f805 9b01 	strb.w	r9, [r5], #1
 800b874:	1aea      	subs	r2, r5, r3
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	4293      	cmp	r3, r2
 800b87a:	dd07      	ble.n	800b88c <_dtoa_r+0xb64>
 800b87c:	4651      	mov	r1, sl
 800b87e:	2300      	movs	r3, #0
 800b880:	220a      	movs	r2, #10
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fc5a 	bl	800c13c <__multadd>
 800b888:	4682      	mov	sl, r0
 800b88a:	e7ea      	b.n	800b862 <_dtoa_r+0xb3a>
 800b88c:	9b01      	ldr	r3, [sp, #4]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	bfc8      	it	gt
 800b892:	461d      	movgt	r5, r3
 800b894:	9b00      	ldr	r3, [sp, #0]
 800b896:	bfd8      	it	le
 800b898:	2501      	movle	r5, #1
 800b89a:	441d      	add	r5, r3
 800b89c:	f04f 0800 	mov.w	r8, #0
 800b8a0:	4651      	mov	r1, sl
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 fe41 	bl	800c52c <__lshift>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	f000 fea9 	bl	800c604 <__mcmp>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dc96      	bgt.n	800b7e4 <_dtoa_r+0xabc>
 800b8b6:	d102      	bne.n	800b8be <_dtoa_r+0xb96>
 800b8b8:	f019 0f01 	tst.w	r9, #1
 800b8bc:	d192      	bne.n	800b7e4 <_dtoa_r+0xabc>
 800b8be:	462b      	mov	r3, r5
 800b8c0:	461d      	mov	r5, r3
 800b8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c6:	2a30      	cmp	r2, #48	; 0x30
 800b8c8:	d0fa      	beq.n	800b8c0 <_dtoa_r+0xb98>
 800b8ca:	e6dd      	b.n	800b688 <_dtoa_r+0x960>
 800b8cc:	9a00      	ldr	r2, [sp, #0]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d189      	bne.n	800b7e6 <_dtoa_r+0xabe>
 800b8d2:	f10b 0b01 	add.w	fp, fp, #1
 800b8d6:	2331      	movs	r3, #49	; 0x31
 800b8d8:	e796      	b.n	800b808 <_dtoa_r+0xae0>
 800b8da:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <_dtoa_r+0xbdc>)
 800b8dc:	f7ff ba99 	b.w	800ae12 <_dtoa_r+0xea>
 800b8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f47f aa6d 	bne.w	800adc2 <_dtoa_r+0x9a>
 800b8e8:	4b07      	ldr	r3, [pc, #28]	; (800b908 <_dtoa_r+0xbe0>)
 800b8ea:	f7ff ba92 	b.w	800ae12 <_dtoa_r+0xea>
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	dcb5      	bgt.n	800b860 <_dtoa_r+0xb38>
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	f73f aeb1 	bgt.w	800b65e <_dtoa_r+0x936>
 800b8fc:	e7b0      	b.n	800b860 <_dtoa_r+0xb38>
 800b8fe:	bf00      	nop
 800b900:	0800d984 	.word	0x0800d984
 800b904:	0800d841 	.word	0x0800d841
 800b908:	0800d91f 	.word	0x0800d91f

0800b90c <_free_r>:
 800b90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b90e:	2900      	cmp	r1, #0
 800b910:	d044      	beq.n	800b99c <_free_r+0x90>
 800b912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b916:	9001      	str	r0, [sp, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f1a1 0404 	sub.w	r4, r1, #4
 800b91e:	bfb8      	it	lt
 800b920:	18e4      	addlt	r4, r4, r3
 800b922:	f7fd f995 	bl	8008c50 <__malloc_lock>
 800b926:	4a1e      	ldr	r2, [pc, #120]	; (800b9a0 <_free_r+0x94>)
 800b928:	9801      	ldr	r0, [sp, #4]
 800b92a:	6813      	ldr	r3, [r2, #0]
 800b92c:	b933      	cbnz	r3, 800b93c <_free_r+0x30>
 800b92e:	6063      	str	r3, [r4, #4]
 800b930:	6014      	str	r4, [r2, #0]
 800b932:	b003      	add	sp, #12
 800b934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b938:	f7fd b990 	b.w	8008c5c <__malloc_unlock>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d908      	bls.n	800b952 <_free_r+0x46>
 800b940:	6825      	ldr	r5, [r4, #0]
 800b942:	1961      	adds	r1, r4, r5
 800b944:	428b      	cmp	r3, r1
 800b946:	bf01      	itttt	eq
 800b948:	6819      	ldreq	r1, [r3, #0]
 800b94a:	685b      	ldreq	r3, [r3, #4]
 800b94c:	1949      	addeq	r1, r1, r5
 800b94e:	6021      	streq	r1, [r4, #0]
 800b950:	e7ed      	b.n	800b92e <_free_r+0x22>
 800b952:	461a      	mov	r2, r3
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	b10b      	cbz	r3, 800b95c <_free_r+0x50>
 800b958:	42a3      	cmp	r3, r4
 800b95a:	d9fa      	bls.n	800b952 <_free_r+0x46>
 800b95c:	6811      	ldr	r1, [r2, #0]
 800b95e:	1855      	adds	r5, r2, r1
 800b960:	42a5      	cmp	r5, r4
 800b962:	d10b      	bne.n	800b97c <_free_r+0x70>
 800b964:	6824      	ldr	r4, [r4, #0]
 800b966:	4421      	add	r1, r4
 800b968:	1854      	adds	r4, r2, r1
 800b96a:	42a3      	cmp	r3, r4
 800b96c:	6011      	str	r1, [r2, #0]
 800b96e:	d1e0      	bne.n	800b932 <_free_r+0x26>
 800b970:	681c      	ldr	r4, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	6053      	str	r3, [r2, #4]
 800b976:	440c      	add	r4, r1
 800b978:	6014      	str	r4, [r2, #0]
 800b97a:	e7da      	b.n	800b932 <_free_r+0x26>
 800b97c:	d902      	bls.n	800b984 <_free_r+0x78>
 800b97e:	230c      	movs	r3, #12
 800b980:	6003      	str	r3, [r0, #0]
 800b982:	e7d6      	b.n	800b932 <_free_r+0x26>
 800b984:	6825      	ldr	r5, [r4, #0]
 800b986:	1961      	adds	r1, r4, r5
 800b988:	428b      	cmp	r3, r1
 800b98a:	bf04      	itt	eq
 800b98c:	6819      	ldreq	r1, [r3, #0]
 800b98e:	685b      	ldreq	r3, [r3, #4]
 800b990:	6063      	str	r3, [r4, #4]
 800b992:	bf04      	itt	eq
 800b994:	1949      	addeq	r1, r1, r5
 800b996:	6021      	streq	r1, [r4, #0]
 800b998:	6054      	str	r4, [r2, #4]
 800b99a:	e7ca      	b.n	800b932 <_free_r+0x26>
 800b99c:	b003      	add	sp, #12
 800b99e:	bd30      	pop	{r4, r5, pc}
 800b9a0:	20003af4 	.word	0x20003af4

0800b9a4 <rshift>:
 800b9a4:	6903      	ldr	r3, [r0, #16]
 800b9a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9b2:	f100 0414 	add.w	r4, r0, #20
 800b9b6:	dd45      	ble.n	800ba44 <rshift+0xa0>
 800b9b8:	f011 011f 	ands.w	r1, r1, #31
 800b9bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9c4:	d10c      	bne.n	800b9e0 <rshift+0x3c>
 800b9c6:	f100 0710 	add.w	r7, r0, #16
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	42b1      	cmp	r1, r6
 800b9ce:	d334      	bcc.n	800ba3a <rshift+0x96>
 800b9d0:	1a9b      	subs	r3, r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	1eea      	subs	r2, r5, #3
 800b9d6:	4296      	cmp	r6, r2
 800b9d8:	bf38      	it	cc
 800b9da:	2300      	movcc	r3, #0
 800b9dc:	4423      	add	r3, r4
 800b9de:	e015      	b.n	800ba0c <rshift+0x68>
 800b9e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9e4:	f1c1 0820 	rsb	r8, r1, #32
 800b9e8:	40cf      	lsrs	r7, r1
 800b9ea:	f105 0e04 	add.w	lr, r5, #4
 800b9ee:	46a1      	mov	r9, r4
 800b9f0:	4576      	cmp	r6, lr
 800b9f2:	46f4      	mov	ip, lr
 800b9f4:	d815      	bhi.n	800ba22 <rshift+0x7e>
 800b9f6:	1a9a      	subs	r2, r3, r2
 800b9f8:	0092      	lsls	r2, r2, #2
 800b9fa:	3a04      	subs	r2, #4
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	42ae      	cmp	r6, r5
 800ba00:	bf38      	it	cc
 800ba02:	2200      	movcc	r2, #0
 800ba04:	18a3      	adds	r3, r4, r2
 800ba06:	50a7      	str	r7, [r4, r2]
 800ba08:	b107      	cbz	r7, 800ba0c <rshift+0x68>
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	1b1a      	subs	r2, r3, r4
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba14:	bf08      	it	eq
 800ba16:	2300      	moveq	r3, #0
 800ba18:	6102      	str	r2, [r0, #16]
 800ba1a:	bf08      	it	eq
 800ba1c:	6143      	streq	r3, [r0, #20]
 800ba1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba22:	f8dc c000 	ldr.w	ip, [ip]
 800ba26:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba2a:	ea4c 0707 	orr.w	r7, ip, r7
 800ba2e:	f849 7b04 	str.w	r7, [r9], #4
 800ba32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba36:	40cf      	lsrs	r7, r1
 800ba38:	e7da      	b.n	800b9f0 <rshift+0x4c>
 800ba3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba42:	e7c3      	b.n	800b9cc <rshift+0x28>
 800ba44:	4623      	mov	r3, r4
 800ba46:	e7e1      	b.n	800ba0c <rshift+0x68>

0800ba48 <__hexdig_fun>:
 800ba48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d802      	bhi.n	800ba56 <__hexdig_fun+0xe>
 800ba50:	3820      	subs	r0, #32
 800ba52:	b2c0      	uxtb	r0, r0
 800ba54:	4770      	bx	lr
 800ba56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d801      	bhi.n	800ba62 <__hexdig_fun+0x1a>
 800ba5e:	3847      	subs	r0, #71	; 0x47
 800ba60:	e7f7      	b.n	800ba52 <__hexdig_fun+0xa>
 800ba62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ba66:	2b05      	cmp	r3, #5
 800ba68:	d801      	bhi.n	800ba6e <__hexdig_fun+0x26>
 800ba6a:	3827      	subs	r0, #39	; 0x27
 800ba6c:	e7f1      	b.n	800ba52 <__hexdig_fun+0xa>
 800ba6e:	2000      	movs	r0, #0
 800ba70:	4770      	bx	lr
	...

0800ba74 <__gethex>:
 800ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	4617      	mov	r7, r2
 800ba7a:	680a      	ldr	r2, [r1, #0]
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	f102 0b02 	add.w	fp, r2, #2
 800ba82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba8a:	4681      	mov	r9, r0
 800ba8c:	468a      	mov	sl, r1
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	32fe      	adds	r2, #254	; 0xfe
 800ba92:	eb02 030b 	add.w	r3, r2, fp
 800ba96:	46d8      	mov	r8, fp
 800ba98:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	2830      	cmp	r0, #48	; 0x30
 800baa0:	d0f7      	beq.n	800ba92 <__gethex+0x1e>
 800baa2:	f7ff ffd1 	bl	800ba48 <__hexdig_fun>
 800baa6:	4604      	mov	r4, r0
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d138      	bne.n	800bb1e <__gethex+0xaa>
 800baac:	49a7      	ldr	r1, [pc, #668]	; (800bd4c <__gethex+0x2d8>)
 800baae:	2201      	movs	r2, #1
 800bab0:	4640      	mov	r0, r8
 800bab2:	f7fe ff28 	bl	800a906 <strncmp>
 800bab6:	4606      	mov	r6, r0
 800bab8:	2800      	cmp	r0, #0
 800baba:	d169      	bne.n	800bb90 <__gethex+0x11c>
 800babc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bac0:	465d      	mov	r5, fp
 800bac2:	f7ff ffc1 	bl	800ba48 <__hexdig_fun>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d064      	beq.n	800bb94 <__gethex+0x120>
 800baca:	465a      	mov	r2, fp
 800bacc:	7810      	ldrb	r0, [r2, #0]
 800bace:	2830      	cmp	r0, #48	; 0x30
 800bad0:	4690      	mov	r8, r2
 800bad2:	f102 0201 	add.w	r2, r2, #1
 800bad6:	d0f9      	beq.n	800bacc <__gethex+0x58>
 800bad8:	f7ff ffb6 	bl	800ba48 <__hexdig_fun>
 800badc:	2301      	movs	r3, #1
 800bade:	fab0 f480 	clz	r4, r0
 800bae2:	0964      	lsrs	r4, r4, #5
 800bae4:	465e      	mov	r6, fp
 800bae6:	9301      	str	r3, [sp, #4]
 800bae8:	4642      	mov	r2, r8
 800baea:	4615      	mov	r5, r2
 800baec:	3201      	adds	r2, #1
 800baee:	7828      	ldrb	r0, [r5, #0]
 800baf0:	f7ff ffaa 	bl	800ba48 <__hexdig_fun>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1f8      	bne.n	800baea <__gethex+0x76>
 800baf8:	4994      	ldr	r1, [pc, #592]	; (800bd4c <__gethex+0x2d8>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	4628      	mov	r0, r5
 800bafe:	f7fe ff02 	bl	800a906 <strncmp>
 800bb02:	b978      	cbnz	r0, 800bb24 <__gethex+0xb0>
 800bb04:	b946      	cbnz	r6, 800bb18 <__gethex+0xa4>
 800bb06:	1c6e      	adds	r6, r5, #1
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4615      	mov	r5, r2
 800bb0c:	3201      	adds	r2, #1
 800bb0e:	7828      	ldrb	r0, [r5, #0]
 800bb10:	f7ff ff9a 	bl	800ba48 <__hexdig_fun>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d1f8      	bne.n	800bb0a <__gethex+0x96>
 800bb18:	1b73      	subs	r3, r6, r5
 800bb1a:	009e      	lsls	r6, r3, #2
 800bb1c:	e004      	b.n	800bb28 <__gethex+0xb4>
 800bb1e:	2400      	movs	r4, #0
 800bb20:	4626      	mov	r6, r4
 800bb22:	e7e1      	b.n	800bae8 <__gethex+0x74>
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d1f7      	bne.n	800bb18 <__gethex+0xa4>
 800bb28:	782b      	ldrb	r3, [r5, #0]
 800bb2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb2e:	2b50      	cmp	r3, #80	; 0x50
 800bb30:	d13d      	bne.n	800bbae <__gethex+0x13a>
 800bb32:	786b      	ldrb	r3, [r5, #1]
 800bb34:	2b2b      	cmp	r3, #43	; 0x2b
 800bb36:	d02f      	beq.n	800bb98 <__gethex+0x124>
 800bb38:	2b2d      	cmp	r3, #45	; 0x2d
 800bb3a:	d031      	beq.n	800bba0 <__gethex+0x12c>
 800bb3c:	1c69      	adds	r1, r5, #1
 800bb3e:	f04f 0b00 	mov.w	fp, #0
 800bb42:	7808      	ldrb	r0, [r1, #0]
 800bb44:	f7ff ff80 	bl	800ba48 <__hexdig_fun>
 800bb48:	1e42      	subs	r2, r0, #1
 800bb4a:	b2d2      	uxtb	r2, r2
 800bb4c:	2a18      	cmp	r2, #24
 800bb4e:	d82e      	bhi.n	800bbae <__gethex+0x13a>
 800bb50:	f1a0 0210 	sub.w	r2, r0, #16
 800bb54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb58:	f7ff ff76 	bl	800ba48 <__hexdig_fun>
 800bb5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bb60:	fa5f fc8c 	uxtb.w	ip, ip
 800bb64:	f1bc 0f18 	cmp.w	ip, #24
 800bb68:	d91d      	bls.n	800bba6 <__gethex+0x132>
 800bb6a:	f1bb 0f00 	cmp.w	fp, #0
 800bb6e:	d000      	beq.n	800bb72 <__gethex+0xfe>
 800bb70:	4252      	negs	r2, r2
 800bb72:	4416      	add	r6, r2
 800bb74:	f8ca 1000 	str.w	r1, [sl]
 800bb78:	b1dc      	cbz	r4, 800bbb2 <__gethex+0x13e>
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bf14      	ite	ne
 800bb80:	f04f 0800 	movne.w	r8, #0
 800bb84:	f04f 0806 	moveq.w	r8, #6
 800bb88:	4640      	mov	r0, r8
 800bb8a:	b005      	add	sp, #20
 800bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb90:	4645      	mov	r5, r8
 800bb92:	4626      	mov	r6, r4
 800bb94:	2401      	movs	r4, #1
 800bb96:	e7c7      	b.n	800bb28 <__gethex+0xb4>
 800bb98:	f04f 0b00 	mov.w	fp, #0
 800bb9c:	1ca9      	adds	r1, r5, #2
 800bb9e:	e7d0      	b.n	800bb42 <__gethex+0xce>
 800bba0:	f04f 0b01 	mov.w	fp, #1
 800bba4:	e7fa      	b.n	800bb9c <__gethex+0x128>
 800bba6:	230a      	movs	r3, #10
 800bba8:	fb03 0002 	mla	r0, r3, r2, r0
 800bbac:	e7d0      	b.n	800bb50 <__gethex+0xdc>
 800bbae:	4629      	mov	r1, r5
 800bbb0:	e7e0      	b.n	800bb74 <__gethex+0x100>
 800bbb2:	eba5 0308 	sub.w	r3, r5, r8
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	4621      	mov	r1, r4
 800bbba:	2b07      	cmp	r3, #7
 800bbbc:	dc0a      	bgt.n	800bbd4 <__gethex+0x160>
 800bbbe:	4648      	mov	r0, r9
 800bbc0:	f000 fa5a 	bl	800c078 <_Balloc>
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	b940      	cbnz	r0, 800bbda <__gethex+0x166>
 800bbc8:	4b61      	ldr	r3, [pc, #388]	; (800bd50 <__gethex+0x2dc>)
 800bbca:	4602      	mov	r2, r0
 800bbcc:	21e4      	movs	r1, #228	; 0xe4
 800bbce:	4861      	ldr	r0, [pc, #388]	; (800bd54 <__gethex+0x2e0>)
 800bbd0:	f7ff f804 	bl	800abdc <__assert_func>
 800bbd4:	3101      	adds	r1, #1
 800bbd6:	105b      	asrs	r3, r3, #1
 800bbd8:	e7ef      	b.n	800bbba <__gethex+0x146>
 800bbda:	f100 0a14 	add.w	sl, r0, #20
 800bbde:	2300      	movs	r3, #0
 800bbe0:	495a      	ldr	r1, [pc, #360]	; (800bd4c <__gethex+0x2d8>)
 800bbe2:	f8cd a004 	str.w	sl, [sp, #4]
 800bbe6:	469b      	mov	fp, r3
 800bbe8:	45a8      	cmp	r8, r5
 800bbea:	d342      	bcc.n	800bc72 <__gethex+0x1fe>
 800bbec:	9801      	ldr	r0, [sp, #4]
 800bbee:	f840 bb04 	str.w	fp, [r0], #4
 800bbf2:	eba0 000a 	sub.w	r0, r0, sl
 800bbf6:	1080      	asrs	r0, r0, #2
 800bbf8:	6120      	str	r0, [r4, #16]
 800bbfa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bbfe:	4658      	mov	r0, fp
 800bc00:	f000 fb2c 	bl	800c25c <__hi0bits>
 800bc04:	683d      	ldr	r5, [r7, #0]
 800bc06:	eba8 0000 	sub.w	r0, r8, r0
 800bc0a:	42a8      	cmp	r0, r5
 800bc0c:	dd59      	ble.n	800bcc2 <__gethex+0x24e>
 800bc0e:	eba0 0805 	sub.w	r8, r0, r5
 800bc12:	4641      	mov	r1, r8
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 febb 	bl	800c990 <__any_on>
 800bc1a:	4683      	mov	fp, r0
 800bc1c:	b1b8      	cbz	r0, 800bc4e <__gethex+0x1da>
 800bc1e:	f108 33ff 	add.w	r3, r8, #4294967295
 800bc22:	1159      	asrs	r1, r3, #5
 800bc24:	f003 021f 	and.w	r2, r3, #31
 800bc28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc2c:	f04f 0b01 	mov.w	fp, #1
 800bc30:	fa0b f202 	lsl.w	r2, fp, r2
 800bc34:	420a      	tst	r2, r1
 800bc36:	d00a      	beq.n	800bc4e <__gethex+0x1da>
 800bc38:	455b      	cmp	r3, fp
 800bc3a:	dd06      	ble.n	800bc4a <__gethex+0x1d6>
 800bc3c:	f1a8 0102 	sub.w	r1, r8, #2
 800bc40:	4620      	mov	r0, r4
 800bc42:	f000 fea5 	bl	800c990 <__any_on>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d138      	bne.n	800bcbc <__gethex+0x248>
 800bc4a:	f04f 0b02 	mov.w	fp, #2
 800bc4e:	4641      	mov	r1, r8
 800bc50:	4620      	mov	r0, r4
 800bc52:	f7ff fea7 	bl	800b9a4 <rshift>
 800bc56:	4446      	add	r6, r8
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	42b3      	cmp	r3, r6
 800bc5c:	da41      	bge.n	800bce2 <__gethex+0x26e>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4648      	mov	r0, r9
 800bc62:	f000 fa49 	bl	800c0f8 <_Bfree>
 800bc66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc68:	2300      	movs	r3, #0
 800bc6a:	6013      	str	r3, [r2, #0]
 800bc6c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bc70:	e78a      	b.n	800bb88 <__gethex+0x114>
 800bc72:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bc76:	2a2e      	cmp	r2, #46	; 0x2e
 800bc78:	d014      	beq.n	800bca4 <__gethex+0x230>
 800bc7a:	2b20      	cmp	r3, #32
 800bc7c:	d106      	bne.n	800bc8c <__gethex+0x218>
 800bc7e:	9b01      	ldr	r3, [sp, #4]
 800bc80:	f843 bb04 	str.w	fp, [r3], #4
 800bc84:	f04f 0b00 	mov.w	fp, #0
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	7828      	ldrb	r0, [r5, #0]
 800bc8e:	9303      	str	r3, [sp, #12]
 800bc90:	f7ff feda 	bl	800ba48 <__hexdig_fun>
 800bc94:	9b03      	ldr	r3, [sp, #12]
 800bc96:	f000 000f 	and.w	r0, r0, #15
 800bc9a:	4098      	lsls	r0, r3
 800bc9c:	ea4b 0b00 	orr.w	fp, fp, r0
 800bca0:	3304      	adds	r3, #4
 800bca2:	e7a1      	b.n	800bbe8 <__gethex+0x174>
 800bca4:	45a8      	cmp	r8, r5
 800bca6:	d8e8      	bhi.n	800bc7a <__gethex+0x206>
 800bca8:	2201      	movs	r2, #1
 800bcaa:	4628      	mov	r0, r5
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	f7fe fe2a 	bl	800a906 <strncmp>
 800bcb2:	4926      	ldr	r1, [pc, #152]	; (800bd4c <__gethex+0x2d8>)
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d1df      	bne.n	800bc7a <__gethex+0x206>
 800bcba:	e795      	b.n	800bbe8 <__gethex+0x174>
 800bcbc:	f04f 0b03 	mov.w	fp, #3
 800bcc0:	e7c5      	b.n	800bc4e <__gethex+0x1da>
 800bcc2:	da0b      	bge.n	800bcdc <__gethex+0x268>
 800bcc4:	eba5 0800 	sub.w	r8, r5, r0
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4642      	mov	r2, r8
 800bccc:	4648      	mov	r0, r9
 800bcce:	f000 fc2d 	bl	800c52c <__lshift>
 800bcd2:	eba6 0608 	sub.w	r6, r6, r8
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	f100 0a14 	add.w	sl, r0, #20
 800bcdc:	f04f 0b00 	mov.w	fp, #0
 800bce0:	e7ba      	b.n	800bc58 <__gethex+0x1e4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	dd73      	ble.n	800bdd0 <__gethex+0x35c>
 800bce8:	1b9e      	subs	r6, r3, r6
 800bcea:	42b5      	cmp	r5, r6
 800bcec:	dc34      	bgt.n	800bd58 <__gethex+0x2e4>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d023      	beq.n	800bd3c <__gethex+0x2c8>
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d025      	beq.n	800bd44 <__gethex+0x2d0>
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d115      	bne.n	800bd28 <__gethex+0x2b4>
 800bcfc:	42b5      	cmp	r5, r6
 800bcfe:	d113      	bne.n	800bd28 <__gethex+0x2b4>
 800bd00:	2d01      	cmp	r5, #1
 800bd02:	d10b      	bne.n	800bd1c <__gethex+0x2a8>
 800bd04:	9a02      	ldr	r2, [sp, #8]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	f8ca 3000 	str.w	r3, [sl]
 800bd12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd14:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bd18:	601c      	str	r4, [r3, #0]
 800bd1a:	e735      	b.n	800bb88 <__gethex+0x114>
 800bd1c:	1e69      	subs	r1, r5, #1
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fe36 	bl	800c990 <__any_on>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d1ed      	bne.n	800bd04 <__gethex+0x290>
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4648      	mov	r0, r9
 800bd2c:	f000 f9e4 	bl	800c0f8 <_Bfree>
 800bd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd32:	2300      	movs	r3, #0
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bd3a:	e725      	b.n	800bb88 <__gethex+0x114>
 800bd3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f2      	bne.n	800bd28 <__gethex+0x2b4>
 800bd42:	e7df      	b.n	800bd04 <__gethex+0x290>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1dc      	bne.n	800bd04 <__gethex+0x290>
 800bd4a:	e7ed      	b.n	800bd28 <__gethex+0x2b4>
 800bd4c:	0800d6dc 	.word	0x0800d6dc
 800bd50:	0800d984 	.word	0x0800d984
 800bd54:	0800d995 	.word	0x0800d995
 800bd58:	f106 38ff 	add.w	r8, r6, #4294967295
 800bd5c:	f1bb 0f00 	cmp.w	fp, #0
 800bd60:	d133      	bne.n	800bdca <__gethex+0x356>
 800bd62:	f1b8 0f00 	cmp.w	r8, #0
 800bd66:	d004      	beq.n	800bd72 <__gethex+0x2fe>
 800bd68:	4641      	mov	r1, r8
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 fe10 	bl	800c990 <__any_on>
 800bd70:	4683      	mov	fp, r0
 800bd72:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bd76:	2301      	movs	r3, #1
 800bd78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd7c:	f008 081f 	and.w	r8, r8, #31
 800bd80:	fa03 f308 	lsl.w	r3, r3, r8
 800bd84:	4213      	tst	r3, r2
 800bd86:	4631      	mov	r1, r6
 800bd88:	4620      	mov	r0, r4
 800bd8a:	bf18      	it	ne
 800bd8c:	f04b 0b02 	orrne.w	fp, fp, #2
 800bd90:	1bad      	subs	r5, r5, r6
 800bd92:	f7ff fe07 	bl	800b9a4 <rshift>
 800bd96:	687e      	ldr	r6, [r7, #4]
 800bd98:	f04f 0802 	mov.w	r8, #2
 800bd9c:	f1bb 0f00 	cmp.w	fp, #0
 800bda0:	d04a      	beq.n	800be38 <__gethex+0x3c4>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d016      	beq.n	800bdd6 <__gethex+0x362>
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d018      	beq.n	800bdde <__gethex+0x36a>
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d109      	bne.n	800bdc4 <__gethex+0x350>
 800bdb0:	f01b 0f02 	tst.w	fp, #2
 800bdb4:	d006      	beq.n	800bdc4 <__gethex+0x350>
 800bdb6:	f8da 3000 	ldr.w	r3, [sl]
 800bdba:	ea4b 0b03 	orr.w	fp, fp, r3
 800bdbe:	f01b 0f01 	tst.w	fp, #1
 800bdc2:	d10f      	bne.n	800bde4 <__gethex+0x370>
 800bdc4:	f048 0810 	orr.w	r8, r8, #16
 800bdc8:	e036      	b.n	800be38 <__gethex+0x3c4>
 800bdca:	f04f 0b01 	mov.w	fp, #1
 800bdce:	e7d0      	b.n	800bd72 <__gethex+0x2fe>
 800bdd0:	f04f 0801 	mov.w	r8, #1
 800bdd4:	e7e2      	b.n	800bd9c <__gethex+0x328>
 800bdd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdd8:	f1c3 0301 	rsb	r3, r3, #1
 800bddc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0ef      	beq.n	800bdc4 <__gethex+0x350>
 800bde4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bde8:	f104 0214 	add.w	r2, r4, #20
 800bdec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4694      	mov	ip, r2
 800bdfa:	f852 1b04 	ldr.w	r1, [r2], #4
 800bdfe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800be02:	d01e      	beq.n	800be42 <__gethex+0x3ce>
 800be04:	3101      	adds	r1, #1
 800be06:	f8cc 1000 	str.w	r1, [ip]
 800be0a:	f1b8 0f02 	cmp.w	r8, #2
 800be0e:	f104 0214 	add.w	r2, r4, #20
 800be12:	d13d      	bne.n	800be90 <__gethex+0x41c>
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	3b01      	subs	r3, #1
 800be18:	42ab      	cmp	r3, r5
 800be1a:	d10b      	bne.n	800be34 <__gethex+0x3c0>
 800be1c:	1169      	asrs	r1, r5, #5
 800be1e:	2301      	movs	r3, #1
 800be20:	f005 051f 	and.w	r5, r5, #31
 800be24:	fa03 f505 	lsl.w	r5, r3, r5
 800be28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be2c:	421d      	tst	r5, r3
 800be2e:	bf18      	it	ne
 800be30:	f04f 0801 	movne.w	r8, #1
 800be34:	f048 0820 	orr.w	r8, r8, #32
 800be38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be3a:	601c      	str	r4, [r3, #0]
 800be3c:	9b02      	ldr	r3, [sp, #8]
 800be3e:	601e      	str	r6, [r3, #0]
 800be40:	e6a2      	b.n	800bb88 <__gethex+0x114>
 800be42:	4290      	cmp	r0, r2
 800be44:	f842 3c04 	str.w	r3, [r2, #-4]
 800be48:	d8d6      	bhi.n	800bdf8 <__gethex+0x384>
 800be4a:	68a2      	ldr	r2, [r4, #8]
 800be4c:	4593      	cmp	fp, r2
 800be4e:	db17      	blt.n	800be80 <__gethex+0x40c>
 800be50:	6861      	ldr	r1, [r4, #4]
 800be52:	4648      	mov	r0, r9
 800be54:	3101      	adds	r1, #1
 800be56:	f000 f90f 	bl	800c078 <_Balloc>
 800be5a:	4682      	mov	sl, r0
 800be5c:	b918      	cbnz	r0, 800be66 <__gethex+0x3f2>
 800be5e:	4b1b      	ldr	r3, [pc, #108]	; (800becc <__gethex+0x458>)
 800be60:	4602      	mov	r2, r0
 800be62:	2184      	movs	r1, #132	; 0x84
 800be64:	e6b3      	b.n	800bbce <__gethex+0x15a>
 800be66:	6922      	ldr	r2, [r4, #16]
 800be68:	3202      	adds	r2, #2
 800be6a:	f104 010c 	add.w	r1, r4, #12
 800be6e:	0092      	lsls	r2, r2, #2
 800be70:	300c      	adds	r0, #12
 800be72:	f7fe fe94 	bl	800ab9e <memcpy>
 800be76:	4621      	mov	r1, r4
 800be78:	4648      	mov	r0, r9
 800be7a:	f000 f93d 	bl	800c0f8 <_Bfree>
 800be7e:	4654      	mov	r4, sl
 800be80:	6922      	ldr	r2, [r4, #16]
 800be82:	1c51      	adds	r1, r2, #1
 800be84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800be88:	6121      	str	r1, [r4, #16]
 800be8a:	2101      	movs	r1, #1
 800be8c:	6151      	str	r1, [r2, #20]
 800be8e:	e7bc      	b.n	800be0a <__gethex+0x396>
 800be90:	6921      	ldr	r1, [r4, #16]
 800be92:	4559      	cmp	r1, fp
 800be94:	dd0b      	ble.n	800beae <__gethex+0x43a>
 800be96:	2101      	movs	r1, #1
 800be98:	4620      	mov	r0, r4
 800be9a:	f7ff fd83 	bl	800b9a4 <rshift>
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3601      	adds	r6, #1
 800bea2:	42b3      	cmp	r3, r6
 800bea4:	f6ff aedb 	blt.w	800bc5e <__gethex+0x1ea>
 800bea8:	f04f 0801 	mov.w	r8, #1
 800beac:	e7c2      	b.n	800be34 <__gethex+0x3c0>
 800beae:	f015 051f 	ands.w	r5, r5, #31
 800beb2:	d0f9      	beq.n	800bea8 <__gethex+0x434>
 800beb4:	9b01      	ldr	r3, [sp, #4]
 800beb6:	441a      	add	r2, r3
 800beb8:	f1c5 0520 	rsb	r5, r5, #32
 800bebc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bec0:	f000 f9cc 	bl	800c25c <__hi0bits>
 800bec4:	42a8      	cmp	r0, r5
 800bec6:	dbe6      	blt.n	800be96 <__gethex+0x422>
 800bec8:	e7ee      	b.n	800bea8 <__gethex+0x434>
 800beca:	bf00      	nop
 800becc:	0800d984 	.word	0x0800d984

0800bed0 <L_shift>:
 800bed0:	f1c2 0208 	rsb	r2, r2, #8
 800bed4:	0092      	lsls	r2, r2, #2
 800bed6:	b570      	push	{r4, r5, r6, lr}
 800bed8:	f1c2 0620 	rsb	r6, r2, #32
 800bedc:	6843      	ldr	r3, [r0, #4]
 800bede:	6804      	ldr	r4, [r0, #0]
 800bee0:	fa03 f506 	lsl.w	r5, r3, r6
 800bee4:	432c      	orrs	r4, r5
 800bee6:	40d3      	lsrs	r3, r2
 800bee8:	6004      	str	r4, [r0, #0]
 800beea:	f840 3f04 	str.w	r3, [r0, #4]!
 800beee:	4288      	cmp	r0, r1
 800bef0:	d3f4      	bcc.n	800bedc <L_shift+0xc>
 800bef2:	bd70      	pop	{r4, r5, r6, pc}

0800bef4 <__match>:
 800bef4:	b530      	push	{r4, r5, lr}
 800bef6:	6803      	ldr	r3, [r0, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800befe:	b914      	cbnz	r4, 800bf06 <__match+0x12>
 800bf00:	6003      	str	r3, [r0, #0]
 800bf02:	2001      	movs	r0, #1
 800bf04:	bd30      	pop	{r4, r5, pc}
 800bf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bf0e:	2d19      	cmp	r5, #25
 800bf10:	bf98      	it	ls
 800bf12:	3220      	addls	r2, #32
 800bf14:	42a2      	cmp	r2, r4
 800bf16:	d0f0      	beq.n	800befa <__match+0x6>
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e7f3      	b.n	800bf04 <__match+0x10>

0800bf1c <__hexnan>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	680b      	ldr	r3, [r1, #0]
 800bf22:	6801      	ldr	r1, [r0, #0]
 800bf24:	115e      	asrs	r6, r3, #5
 800bf26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bf2a:	f013 031f 	ands.w	r3, r3, #31
 800bf2e:	b087      	sub	sp, #28
 800bf30:	bf18      	it	ne
 800bf32:	3604      	addne	r6, #4
 800bf34:	2500      	movs	r5, #0
 800bf36:	1f37      	subs	r7, r6, #4
 800bf38:	4682      	mov	sl, r0
 800bf3a:	4690      	mov	r8, r2
 800bf3c:	9301      	str	r3, [sp, #4]
 800bf3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf42:	46b9      	mov	r9, r7
 800bf44:	463c      	mov	r4, r7
 800bf46:	9502      	str	r5, [sp, #8]
 800bf48:	46ab      	mov	fp, r5
 800bf4a:	784a      	ldrb	r2, [r1, #1]
 800bf4c:	1c4b      	adds	r3, r1, #1
 800bf4e:	9303      	str	r3, [sp, #12]
 800bf50:	b342      	cbz	r2, 800bfa4 <__hexnan+0x88>
 800bf52:	4610      	mov	r0, r2
 800bf54:	9105      	str	r1, [sp, #20]
 800bf56:	9204      	str	r2, [sp, #16]
 800bf58:	f7ff fd76 	bl	800ba48 <__hexdig_fun>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d14f      	bne.n	800c000 <__hexnan+0xe4>
 800bf60:	9a04      	ldr	r2, [sp, #16]
 800bf62:	9905      	ldr	r1, [sp, #20]
 800bf64:	2a20      	cmp	r2, #32
 800bf66:	d818      	bhi.n	800bf9a <__hexnan+0x7e>
 800bf68:	9b02      	ldr	r3, [sp, #8]
 800bf6a:	459b      	cmp	fp, r3
 800bf6c:	dd13      	ble.n	800bf96 <__hexnan+0x7a>
 800bf6e:	454c      	cmp	r4, r9
 800bf70:	d206      	bcs.n	800bf80 <__hexnan+0x64>
 800bf72:	2d07      	cmp	r5, #7
 800bf74:	dc04      	bgt.n	800bf80 <__hexnan+0x64>
 800bf76:	462a      	mov	r2, r5
 800bf78:	4649      	mov	r1, r9
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	f7ff ffa8 	bl	800bed0 <L_shift>
 800bf80:	4544      	cmp	r4, r8
 800bf82:	d950      	bls.n	800c026 <__hexnan+0x10a>
 800bf84:	2300      	movs	r3, #0
 800bf86:	f1a4 0904 	sub.w	r9, r4, #4
 800bf8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf8e:	f8cd b008 	str.w	fp, [sp, #8]
 800bf92:	464c      	mov	r4, r9
 800bf94:	461d      	mov	r5, r3
 800bf96:	9903      	ldr	r1, [sp, #12]
 800bf98:	e7d7      	b.n	800bf4a <__hexnan+0x2e>
 800bf9a:	2a29      	cmp	r2, #41	; 0x29
 800bf9c:	d155      	bne.n	800c04a <__hexnan+0x12e>
 800bf9e:	3102      	adds	r1, #2
 800bfa0:	f8ca 1000 	str.w	r1, [sl]
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	d04f      	beq.n	800c04a <__hexnan+0x12e>
 800bfaa:	454c      	cmp	r4, r9
 800bfac:	d206      	bcs.n	800bfbc <__hexnan+0xa0>
 800bfae:	2d07      	cmp	r5, #7
 800bfb0:	dc04      	bgt.n	800bfbc <__hexnan+0xa0>
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	4649      	mov	r1, r9
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f7ff ff8a 	bl	800bed0 <L_shift>
 800bfbc:	4544      	cmp	r4, r8
 800bfbe:	d934      	bls.n	800c02a <__hexnan+0x10e>
 800bfc0:	f1a8 0204 	sub.w	r2, r8, #4
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bfca:	f842 1f04 	str.w	r1, [r2, #4]!
 800bfce:	429f      	cmp	r7, r3
 800bfd0:	d2f9      	bcs.n	800bfc6 <__hexnan+0xaa>
 800bfd2:	1b3b      	subs	r3, r7, r4
 800bfd4:	f023 0303 	bic.w	r3, r3, #3
 800bfd8:	3304      	adds	r3, #4
 800bfda:	3e03      	subs	r6, #3
 800bfdc:	3401      	adds	r4, #1
 800bfde:	42a6      	cmp	r6, r4
 800bfe0:	bf38      	it	cc
 800bfe2:	2304      	movcc	r3, #4
 800bfe4:	4443      	add	r3, r8
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f843 2b04 	str.w	r2, [r3], #4
 800bfec:	429f      	cmp	r7, r3
 800bfee:	d2fb      	bcs.n	800bfe8 <__hexnan+0xcc>
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	b91b      	cbnz	r3, 800bffc <__hexnan+0xe0>
 800bff4:	4547      	cmp	r7, r8
 800bff6:	d126      	bne.n	800c046 <__hexnan+0x12a>
 800bff8:	2301      	movs	r3, #1
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	2005      	movs	r0, #5
 800bffe:	e025      	b.n	800c04c <__hexnan+0x130>
 800c000:	3501      	adds	r5, #1
 800c002:	2d08      	cmp	r5, #8
 800c004:	f10b 0b01 	add.w	fp, fp, #1
 800c008:	dd06      	ble.n	800c018 <__hexnan+0xfc>
 800c00a:	4544      	cmp	r4, r8
 800c00c:	d9c3      	bls.n	800bf96 <__hexnan+0x7a>
 800c00e:	2300      	movs	r3, #0
 800c010:	f844 3c04 	str.w	r3, [r4, #-4]
 800c014:	2501      	movs	r5, #1
 800c016:	3c04      	subs	r4, #4
 800c018:	6822      	ldr	r2, [r4, #0]
 800c01a:	f000 000f 	and.w	r0, r0, #15
 800c01e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c022:	6020      	str	r0, [r4, #0]
 800c024:	e7b7      	b.n	800bf96 <__hexnan+0x7a>
 800c026:	2508      	movs	r5, #8
 800c028:	e7b5      	b.n	800bf96 <__hexnan+0x7a>
 800c02a:	9b01      	ldr	r3, [sp, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0df      	beq.n	800bff0 <__hexnan+0xd4>
 800c030:	f1c3 0320 	rsb	r3, r3, #32
 800c034:	f04f 32ff 	mov.w	r2, #4294967295
 800c038:	40da      	lsrs	r2, r3
 800c03a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c03e:	4013      	ands	r3, r2
 800c040:	f846 3c04 	str.w	r3, [r6, #-4]
 800c044:	e7d4      	b.n	800bff0 <__hexnan+0xd4>
 800c046:	3f04      	subs	r7, #4
 800c048:	e7d2      	b.n	800bff0 <__hexnan+0xd4>
 800c04a:	2004      	movs	r0, #4
 800c04c:	b007      	add	sp, #28
 800c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c052 <__ascii_mbtowc>:
 800c052:	b082      	sub	sp, #8
 800c054:	b901      	cbnz	r1, 800c058 <__ascii_mbtowc+0x6>
 800c056:	a901      	add	r1, sp, #4
 800c058:	b142      	cbz	r2, 800c06c <__ascii_mbtowc+0x1a>
 800c05a:	b14b      	cbz	r3, 800c070 <__ascii_mbtowc+0x1e>
 800c05c:	7813      	ldrb	r3, [r2, #0]
 800c05e:	600b      	str	r3, [r1, #0]
 800c060:	7812      	ldrb	r2, [r2, #0]
 800c062:	1e10      	subs	r0, r2, #0
 800c064:	bf18      	it	ne
 800c066:	2001      	movne	r0, #1
 800c068:	b002      	add	sp, #8
 800c06a:	4770      	bx	lr
 800c06c:	4610      	mov	r0, r2
 800c06e:	e7fb      	b.n	800c068 <__ascii_mbtowc+0x16>
 800c070:	f06f 0001 	mvn.w	r0, #1
 800c074:	e7f8      	b.n	800c068 <__ascii_mbtowc+0x16>
	...

0800c078 <_Balloc>:
 800c078:	b570      	push	{r4, r5, r6, lr}
 800c07a:	69c6      	ldr	r6, [r0, #28]
 800c07c:	4604      	mov	r4, r0
 800c07e:	460d      	mov	r5, r1
 800c080:	b976      	cbnz	r6, 800c0a0 <_Balloc+0x28>
 800c082:	2010      	movs	r0, #16
 800c084:	f7fc fd3c 	bl	8008b00 <malloc>
 800c088:	4602      	mov	r2, r0
 800c08a:	61e0      	str	r0, [r4, #28]
 800c08c:	b920      	cbnz	r0, 800c098 <_Balloc+0x20>
 800c08e:	4b18      	ldr	r3, [pc, #96]	; (800c0f0 <_Balloc+0x78>)
 800c090:	4818      	ldr	r0, [pc, #96]	; (800c0f4 <_Balloc+0x7c>)
 800c092:	216b      	movs	r1, #107	; 0x6b
 800c094:	f7fe fda2 	bl	800abdc <__assert_func>
 800c098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c09c:	6006      	str	r6, [r0, #0]
 800c09e:	60c6      	str	r6, [r0, #12]
 800c0a0:	69e6      	ldr	r6, [r4, #28]
 800c0a2:	68f3      	ldr	r3, [r6, #12]
 800c0a4:	b183      	cbz	r3, 800c0c8 <_Balloc+0x50>
 800c0a6:	69e3      	ldr	r3, [r4, #28]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0ae:	b9b8      	cbnz	r0, 800c0e0 <_Balloc+0x68>
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c0b6:	1d72      	adds	r2, r6, #5
 800c0b8:	0092      	lsls	r2, r2, #2
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 fecf 	bl	800ce5e <_calloc_r>
 800c0c0:	b160      	cbz	r0, 800c0dc <_Balloc+0x64>
 800c0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0c6:	e00e      	b.n	800c0e6 <_Balloc+0x6e>
 800c0c8:	2221      	movs	r2, #33	; 0x21
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fec6 	bl	800ce5e <_calloc_r>
 800c0d2:	69e3      	ldr	r3, [r4, #28]
 800c0d4:	60f0      	str	r0, [r6, #12]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d1e4      	bne.n	800c0a6 <_Balloc+0x2e>
 800c0dc:	2000      	movs	r0, #0
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	6802      	ldr	r2, [r0, #0]
 800c0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0ec:	e7f7      	b.n	800c0de <_Balloc+0x66>
 800c0ee:	bf00      	nop
 800c0f0:	0800d86a 	.word	0x0800d86a
 800c0f4:	0800d9f5 	.word	0x0800d9f5

0800c0f8 <_Bfree>:
 800c0f8:	b570      	push	{r4, r5, r6, lr}
 800c0fa:	69c6      	ldr	r6, [r0, #28]
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	b976      	cbnz	r6, 800c120 <_Bfree+0x28>
 800c102:	2010      	movs	r0, #16
 800c104:	f7fc fcfc 	bl	8008b00 <malloc>
 800c108:	4602      	mov	r2, r0
 800c10a:	61e8      	str	r0, [r5, #28]
 800c10c:	b920      	cbnz	r0, 800c118 <_Bfree+0x20>
 800c10e:	4b09      	ldr	r3, [pc, #36]	; (800c134 <_Bfree+0x3c>)
 800c110:	4809      	ldr	r0, [pc, #36]	; (800c138 <_Bfree+0x40>)
 800c112:	218f      	movs	r1, #143	; 0x8f
 800c114:	f7fe fd62 	bl	800abdc <__assert_func>
 800c118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c11c:	6006      	str	r6, [r0, #0]
 800c11e:	60c6      	str	r6, [r0, #12]
 800c120:	b13c      	cbz	r4, 800c132 <_Bfree+0x3a>
 800c122:	69eb      	ldr	r3, [r5, #28]
 800c124:	6862      	ldr	r2, [r4, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c12c:	6021      	str	r1, [r4, #0]
 800c12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c132:	bd70      	pop	{r4, r5, r6, pc}
 800c134:	0800d86a 	.word	0x0800d86a
 800c138:	0800d9f5 	.word	0x0800d9f5

0800c13c <__multadd>:
 800c13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c140:	690d      	ldr	r5, [r1, #16]
 800c142:	4607      	mov	r7, r0
 800c144:	460c      	mov	r4, r1
 800c146:	461e      	mov	r6, r3
 800c148:	f101 0c14 	add.w	ip, r1, #20
 800c14c:	2000      	movs	r0, #0
 800c14e:	f8dc 3000 	ldr.w	r3, [ip]
 800c152:	b299      	uxth	r1, r3
 800c154:	fb02 6101 	mla	r1, r2, r1, r6
 800c158:	0c1e      	lsrs	r6, r3, #16
 800c15a:	0c0b      	lsrs	r3, r1, #16
 800c15c:	fb02 3306 	mla	r3, r2, r6, r3
 800c160:	b289      	uxth	r1, r1
 800c162:	3001      	adds	r0, #1
 800c164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c168:	4285      	cmp	r5, r0
 800c16a:	f84c 1b04 	str.w	r1, [ip], #4
 800c16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c172:	dcec      	bgt.n	800c14e <__multadd+0x12>
 800c174:	b30e      	cbz	r6, 800c1ba <__multadd+0x7e>
 800c176:	68a3      	ldr	r3, [r4, #8]
 800c178:	42ab      	cmp	r3, r5
 800c17a:	dc19      	bgt.n	800c1b0 <__multadd+0x74>
 800c17c:	6861      	ldr	r1, [r4, #4]
 800c17e:	4638      	mov	r0, r7
 800c180:	3101      	adds	r1, #1
 800c182:	f7ff ff79 	bl	800c078 <_Balloc>
 800c186:	4680      	mov	r8, r0
 800c188:	b928      	cbnz	r0, 800c196 <__multadd+0x5a>
 800c18a:	4602      	mov	r2, r0
 800c18c:	4b0c      	ldr	r3, [pc, #48]	; (800c1c0 <__multadd+0x84>)
 800c18e:	480d      	ldr	r0, [pc, #52]	; (800c1c4 <__multadd+0x88>)
 800c190:	21ba      	movs	r1, #186	; 0xba
 800c192:	f7fe fd23 	bl	800abdc <__assert_func>
 800c196:	6922      	ldr	r2, [r4, #16]
 800c198:	3202      	adds	r2, #2
 800c19a:	f104 010c 	add.w	r1, r4, #12
 800c19e:	0092      	lsls	r2, r2, #2
 800c1a0:	300c      	adds	r0, #12
 800c1a2:	f7fe fcfc 	bl	800ab9e <memcpy>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	f7ff ffa5 	bl	800c0f8 <_Bfree>
 800c1ae:	4644      	mov	r4, r8
 800c1b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1b4:	3501      	adds	r5, #1
 800c1b6:	615e      	str	r6, [r3, #20]
 800c1b8:	6125      	str	r5, [r4, #16]
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1c0:	0800d984 	.word	0x0800d984
 800c1c4:	0800d9f5 	.word	0x0800d9f5

0800c1c8 <__s2b>:
 800c1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	4615      	mov	r5, r2
 800c1d0:	461f      	mov	r7, r3
 800c1d2:	2209      	movs	r2, #9
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1dc:	2100      	movs	r1, #0
 800c1de:	2201      	movs	r2, #1
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	db09      	blt.n	800c1f8 <__s2b+0x30>
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff ff47 	bl	800c078 <_Balloc>
 800c1ea:	b940      	cbnz	r0, 800c1fe <__s2b+0x36>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	4b19      	ldr	r3, [pc, #100]	; (800c254 <__s2b+0x8c>)
 800c1f0:	4819      	ldr	r0, [pc, #100]	; (800c258 <__s2b+0x90>)
 800c1f2:	21d3      	movs	r1, #211	; 0xd3
 800c1f4:	f7fe fcf2 	bl	800abdc <__assert_func>
 800c1f8:	0052      	lsls	r2, r2, #1
 800c1fa:	3101      	adds	r1, #1
 800c1fc:	e7f0      	b.n	800c1e0 <__s2b+0x18>
 800c1fe:	9b08      	ldr	r3, [sp, #32]
 800c200:	6143      	str	r3, [r0, #20]
 800c202:	2d09      	cmp	r5, #9
 800c204:	f04f 0301 	mov.w	r3, #1
 800c208:	6103      	str	r3, [r0, #16]
 800c20a:	dd16      	ble.n	800c23a <__s2b+0x72>
 800c20c:	f104 0909 	add.w	r9, r4, #9
 800c210:	46c8      	mov	r8, r9
 800c212:	442c      	add	r4, r5
 800c214:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c218:	4601      	mov	r1, r0
 800c21a:	3b30      	subs	r3, #48	; 0x30
 800c21c:	220a      	movs	r2, #10
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff8c 	bl	800c13c <__multadd>
 800c224:	45a0      	cmp	r8, r4
 800c226:	d1f5      	bne.n	800c214 <__s2b+0x4c>
 800c228:	f1a5 0408 	sub.w	r4, r5, #8
 800c22c:	444c      	add	r4, r9
 800c22e:	1b2d      	subs	r5, r5, r4
 800c230:	1963      	adds	r3, r4, r5
 800c232:	42bb      	cmp	r3, r7
 800c234:	db04      	blt.n	800c240 <__s2b+0x78>
 800c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23a:	340a      	adds	r4, #10
 800c23c:	2509      	movs	r5, #9
 800c23e:	e7f6      	b.n	800c22e <__s2b+0x66>
 800c240:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c244:	4601      	mov	r1, r0
 800c246:	3b30      	subs	r3, #48	; 0x30
 800c248:	220a      	movs	r2, #10
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7ff ff76 	bl	800c13c <__multadd>
 800c250:	e7ee      	b.n	800c230 <__s2b+0x68>
 800c252:	bf00      	nop
 800c254:	0800d984 	.word	0x0800d984
 800c258:	0800d9f5 	.word	0x0800d9f5

0800c25c <__hi0bits>:
 800c25c:	0c03      	lsrs	r3, r0, #16
 800c25e:	041b      	lsls	r3, r3, #16
 800c260:	b9d3      	cbnz	r3, 800c298 <__hi0bits+0x3c>
 800c262:	0400      	lsls	r0, r0, #16
 800c264:	2310      	movs	r3, #16
 800c266:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c26a:	bf04      	itt	eq
 800c26c:	0200      	lsleq	r0, r0, #8
 800c26e:	3308      	addeq	r3, #8
 800c270:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c274:	bf04      	itt	eq
 800c276:	0100      	lsleq	r0, r0, #4
 800c278:	3304      	addeq	r3, #4
 800c27a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c27e:	bf04      	itt	eq
 800c280:	0080      	lsleq	r0, r0, #2
 800c282:	3302      	addeq	r3, #2
 800c284:	2800      	cmp	r0, #0
 800c286:	db05      	blt.n	800c294 <__hi0bits+0x38>
 800c288:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c28c:	f103 0301 	add.w	r3, r3, #1
 800c290:	bf08      	it	eq
 800c292:	2320      	moveq	r3, #32
 800c294:	4618      	mov	r0, r3
 800c296:	4770      	bx	lr
 800c298:	2300      	movs	r3, #0
 800c29a:	e7e4      	b.n	800c266 <__hi0bits+0xa>

0800c29c <__lo0bits>:
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	f013 0207 	ands.w	r2, r3, #7
 800c2a2:	d00c      	beq.n	800c2be <__lo0bits+0x22>
 800c2a4:	07d9      	lsls	r1, r3, #31
 800c2a6:	d422      	bmi.n	800c2ee <__lo0bits+0x52>
 800c2a8:	079a      	lsls	r2, r3, #30
 800c2aa:	bf49      	itett	mi
 800c2ac:	085b      	lsrmi	r3, r3, #1
 800c2ae:	089b      	lsrpl	r3, r3, #2
 800c2b0:	6003      	strmi	r3, [r0, #0]
 800c2b2:	2201      	movmi	r2, #1
 800c2b4:	bf5c      	itt	pl
 800c2b6:	6003      	strpl	r3, [r0, #0]
 800c2b8:	2202      	movpl	r2, #2
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	4770      	bx	lr
 800c2be:	b299      	uxth	r1, r3
 800c2c0:	b909      	cbnz	r1, 800c2c6 <__lo0bits+0x2a>
 800c2c2:	0c1b      	lsrs	r3, r3, #16
 800c2c4:	2210      	movs	r2, #16
 800c2c6:	b2d9      	uxtb	r1, r3
 800c2c8:	b909      	cbnz	r1, 800c2ce <__lo0bits+0x32>
 800c2ca:	3208      	adds	r2, #8
 800c2cc:	0a1b      	lsrs	r3, r3, #8
 800c2ce:	0719      	lsls	r1, r3, #28
 800c2d0:	bf04      	itt	eq
 800c2d2:	091b      	lsreq	r3, r3, #4
 800c2d4:	3204      	addeq	r2, #4
 800c2d6:	0799      	lsls	r1, r3, #30
 800c2d8:	bf04      	itt	eq
 800c2da:	089b      	lsreq	r3, r3, #2
 800c2dc:	3202      	addeq	r2, #2
 800c2de:	07d9      	lsls	r1, r3, #31
 800c2e0:	d403      	bmi.n	800c2ea <__lo0bits+0x4e>
 800c2e2:	085b      	lsrs	r3, r3, #1
 800c2e4:	f102 0201 	add.w	r2, r2, #1
 800c2e8:	d003      	beq.n	800c2f2 <__lo0bits+0x56>
 800c2ea:	6003      	str	r3, [r0, #0]
 800c2ec:	e7e5      	b.n	800c2ba <__lo0bits+0x1e>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	e7e3      	b.n	800c2ba <__lo0bits+0x1e>
 800c2f2:	2220      	movs	r2, #32
 800c2f4:	e7e1      	b.n	800c2ba <__lo0bits+0x1e>
	...

0800c2f8 <__i2b>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	f7ff febb 	bl	800c078 <_Balloc>
 800c302:	4602      	mov	r2, r0
 800c304:	b928      	cbnz	r0, 800c312 <__i2b+0x1a>
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <__i2b+0x24>)
 800c308:	4805      	ldr	r0, [pc, #20]	; (800c320 <__i2b+0x28>)
 800c30a:	f240 1145 	movw	r1, #325	; 0x145
 800c30e:	f7fe fc65 	bl	800abdc <__assert_func>
 800c312:	2301      	movs	r3, #1
 800c314:	6144      	str	r4, [r0, #20]
 800c316:	6103      	str	r3, [r0, #16]
 800c318:	bd10      	pop	{r4, pc}
 800c31a:	bf00      	nop
 800c31c:	0800d984 	.word	0x0800d984
 800c320:	0800d9f5 	.word	0x0800d9f5

0800c324 <__multiply>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	4691      	mov	r9, r2
 800c32a:	690a      	ldr	r2, [r1, #16]
 800c32c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c330:	429a      	cmp	r2, r3
 800c332:	bfb8      	it	lt
 800c334:	460b      	movlt	r3, r1
 800c336:	460c      	mov	r4, r1
 800c338:	bfbc      	itt	lt
 800c33a:	464c      	movlt	r4, r9
 800c33c:	4699      	movlt	r9, r3
 800c33e:	6927      	ldr	r7, [r4, #16]
 800c340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c344:	68a3      	ldr	r3, [r4, #8]
 800c346:	6861      	ldr	r1, [r4, #4]
 800c348:	eb07 060a 	add.w	r6, r7, sl
 800c34c:	42b3      	cmp	r3, r6
 800c34e:	b085      	sub	sp, #20
 800c350:	bfb8      	it	lt
 800c352:	3101      	addlt	r1, #1
 800c354:	f7ff fe90 	bl	800c078 <_Balloc>
 800c358:	b930      	cbnz	r0, 800c368 <__multiply+0x44>
 800c35a:	4602      	mov	r2, r0
 800c35c:	4b44      	ldr	r3, [pc, #272]	; (800c470 <__multiply+0x14c>)
 800c35e:	4845      	ldr	r0, [pc, #276]	; (800c474 <__multiply+0x150>)
 800c360:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c364:	f7fe fc3a 	bl	800abdc <__assert_func>
 800c368:	f100 0514 	add.w	r5, r0, #20
 800c36c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c370:	462b      	mov	r3, r5
 800c372:	2200      	movs	r2, #0
 800c374:	4543      	cmp	r3, r8
 800c376:	d321      	bcc.n	800c3bc <__multiply+0x98>
 800c378:	f104 0314 	add.w	r3, r4, #20
 800c37c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c380:	f109 0314 	add.w	r3, r9, #20
 800c384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c388:	9202      	str	r2, [sp, #8]
 800c38a:	1b3a      	subs	r2, r7, r4
 800c38c:	3a15      	subs	r2, #21
 800c38e:	f022 0203 	bic.w	r2, r2, #3
 800c392:	3204      	adds	r2, #4
 800c394:	f104 0115 	add.w	r1, r4, #21
 800c398:	428f      	cmp	r7, r1
 800c39a:	bf38      	it	cc
 800c39c:	2204      	movcc	r2, #4
 800c39e:	9201      	str	r2, [sp, #4]
 800c3a0:	9a02      	ldr	r2, [sp, #8]
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d80c      	bhi.n	800c3c2 <__multiply+0x9e>
 800c3a8:	2e00      	cmp	r6, #0
 800c3aa:	dd03      	ble.n	800c3b4 <__multiply+0x90>
 800c3ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d05b      	beq.n	800c46c <__multiply+0x148>
 800c3b4:	6106      	str	r6, [r0, #16]
 800c3b6:	b005      	add	sp, #20
 800c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3bc:	f843 2b04 	str.w	r2, [r3], #4
 800c3c0:	e7d8      	b.n	800c374 <__multiply+0x50>
 800c3c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3c6:	f1ba 0f00 	cmp.w	sl, #0
 800c3ca:	d024      	beq.n	800c416 <__multiply+0xf2>
 800c3cc:	f104 0e14 	add.w	lr, r4, #20
 800c3d0:	46a9      	mov	r9, r5
 800c3d2:	f04f 0c00 	mov.w	ip, #0
 800c3d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3da:	f8d9 1000 	ldr.w	r1, [r9]
 800c3de:	fa1f fb82 	uxth.w	fp, r2
 800c3e2:	b289      	uxth	r1, r1
 800c3e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c3f0:	4461      	add	r1, ip
 800c3f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c3fe:	b289      	uxth	r1, r1
 800c400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c404:	4577      	cmp	r7, lr
 800c406:	f849 1b04 	str.w	r1, [r9], #4
 800c40a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c40e:	d8e2      	bhi.n	800c3d6 <__multiply+0xb2>
 800c410:	9a01      	ldr	r2, [sp, #4]
 800c412:	f845 c002 	str.w	ip, [r5, r2]
 800c416:	9a03      	ldr	r2, [sp, #12]
 800c418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c41c:	3304      	adds	r3, #4
 800c41e:	f1b9 0f00 	cmp.w	r9, #0
 800c422:	d021      	beq.n	800c468 <__multiply+0x144>
 800c424:	6829      	ldr	r1, [r5, #0]
 800c426:	f104 0c14 	add.w	ip, r4, #20
 800c42a:	46ae      	mov	lr, r5
 800c42c:	f04f 0a00 	mov.w	sl, #0
 800c430:	f8bc b000 	ldrh.w	fp, [ip]
 800c434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c438:	fb09 220b 	mla	r2, r9, fp, r2
 800c43c:	4452      	add	r2, sl
 800c43e:	b289      	uxth	r1, r1
 800c440:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c444:	f84e 1b04 	str.w	r1, [lr], #4
 800c448:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c44c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c450:	f8be 1000 	ldrh.w	r1, [lr]
 800c454:	fb09 110a 	mla	r1, r9, sl, r1
 800c458:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c45c:	4567      	cmp	r7, ip
 800c45e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c462:	d8e5      	bhi.n	800c430 <__multiply+0x10c>
 800c464:	9a01      	ldr	r2, [sp, #4]
 800c466:	50a9      	str	r1, [r5, r2]
 800c468:	3504      	adds	r5, #4
 800c46a:	e799      	b.n	800c3a0 <__multiply+0x7c>
 800c46c:	3e01      	subs	r6, #1
 800c46e:	e79b      	b.n	800c3a8 <__multiply+0x84>
 800c470:	0800d984 	.word	0x0800d984
 800c474:	0800d9f5 	.word	0x0800d9f5

0800c478 <__pow5mult>:
 800c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c47c:	4615      	mov	r5, r2
 800c47e:	f012 0203 	ands.w	r2, r2, #3
 800c482:	4606      	mov	r6, r0
 800c484:	460f      	mov	r7, r1
 800c486:	d007      	beq.n	800c498 <__pow5mult+0x20>
 800c488:	4c25      	ldr	r4, [pc, #148]	; (800c520 <__pow5mult+0xa8>)
 800c48a:	3a01      	subs	r2, #1
 800c48c:	2300      	movs	r3, #0
 800c48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c492:	f7ff fe53 	bl	800c13c <__multadd>
 800c496:	4607      	mov	r7, r0
 800c498:	10ad      	asrs	r5, r5, #2
 800c49a:	d03d      	beq.n	800c518 <__pow5mult+0xa0>
 800c49c:	69f4      	ldr	r4, [r6, #28]
 800c49e:	b97c      	cbnz	r4, 800c4c0 <__pow5mult+0x48>
 800c4a0:	2010      	movs	r0, #16
 800c4a2:	f7fc fb2d 	bl	8008b00 <malloc>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	61f0      	str	r0, [r6, #28]
 800c4aa:	b928      	cbnz	r0, 800c4b8 <__pow5mult+0x40>
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <__pow5mult+0xac>)
 800c4ae:	481e      	ldr	r0, [pc, #120]	; (800c528 <__pow5mult+0xb0>)
 800c4b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c4b4:	f7fe fb92 	bl	800abdc <__assert_func>
 800c4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4bc:	6004      	str	r4, [r0, #0]
 800c4be:	60c4      	str	r4, [r0, #12]
 800c4c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4c8:	b94c      	cbnz	r4, 800c4de <__pow5mult+0x66>
 800c4ca:	f240 2171 	movw	r1, #625	; 0x271
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7ff ff12 	bl	800c2f8 <__i2b>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4da:	4604      	mov	r4, r0
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	07eb      	lsls	r3, r5, #31
 800c4e4:	d50a      	bpl.n	800c4fc <__pow5mult+0x84>
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ff1a 	bl	800c324 <__multiply>
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	4680      	mov	r8, r0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7ff fdff 	bl	800c0f8 <_Bfree>
 800c4fa:	4647      	mov	r7, r8
 800c4fc:	106d      	asrs	r5, r5, #1
 800c4fe:	d00b      	beq.n	800c518 <__pow5mult+0xa0>
 800c500:	6820      	ldr	r0, [r4, #0]
 800c502:	b938      	cbnz	r0, 800c514 <__pow5mult+0x9c>
 800c504:	4622      	mov	r2, r4
 800c506:	4621      	mov	r1, r4
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff ff0b 	bl	800c324 <__multiply>
 800c50e:	6020      	str	r0, [r4, #0]
 800c510:	f8c0 9000 	str.w	r9, [r0]
 800c514:	4604      	mov	r4, r0
 800c516:	e7e4      	b.n	800c4e2 <__pow5mult+0x6a>
 800c518:	4638      	mov	r0, r7
 800c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51e:	bf00      	nop
 800c520:	0800db40 	.word	0x0800db40
 800c524:	0800d86a 	.word	0x0800d86a
 800c528:	0800d9f5 	.word	0x0800d9f5

0800c52c <__lshift>:
 800c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c530:	460c      	mov	r4, r1
 800c532:	6849      	ldr	r1, [r1, #4]
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c53a:	68a3      	ldr	r3, [r4, #8]
 800c53c:	4607      	mov	r7, r0
 800c53e:	4691      	mov	r9, r2
 800c540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c544:	f108 0601 	add.w	r6, r8, #1
 800c548:	42b3      	cmp	r3, r6
 800c54a:	db0b      	blt.n	800c564 <__lshift+0x38>
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff fd93 	bl	800c078 <_Balloc>
 800c552:	4605      	mov	r5, r0
 800c554:	b948      	cbnz	r0, 800c56a <__lshift+0x3e>
 800c556:	4602      	mov	r2, r0
 800c558:	4b28      	ldr	r3, [pc, #160]	; (800c5fc <__lshift+0xd0>)
 800c55a:	4829      	ldr	r0, [pc, #164]	; (800c600 <__lshift+0xd4>)
 800c55c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c560:	f7fe fb3c 	bl	800abdc <__assert_func>
 800c564:	3101      	adds	r1, #1
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	e7ee      	b.n	800c548 <__lshift+0x1c>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f100 0114 	add.w	r1, r0, #20
 800c570:	f100 0210 	add.w	r2, r0, #16
 800c574:	4618      	mov	r0, r3
 800c576:	4553      	cmp	r3, sl
 800c578:	db33      	blt.n	800c5e2 <__lshift+0xb6>
 800c57a:	6920      	ldr	r0, [r4, #16]
 800c57c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c580:	f104 0314 	add.w	r3, r4, #20
 800c584:	f019 091f 	ands.w	r9, r9, #31
 800c588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c58c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c590:	d02b      	beq.n	800c5ea <__lshift+0xbe>
 800c592:	f1c9 0e20 	rsb	lr, r9, #32
 800c596:	468a      	mov	sl, r1
 800c598:	2200      	movs	r2, #0
 800c59a:	6818      	ldr	r0, [r3, #0]
 800c59c:	fa00 f009 	lsl.w	r0, r0, r9
 800c5a0:	4310      	orrs	r0, r2
 800c5a2:	f84a 0b04 	str.w	r0, [sl], #4
 800c5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5aa:	459c      	cmp	ip, r3
 800c5ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5b0:	d8f3      	bhi.n	800c59a <__lshift+0x6e>
 800c5b2:	ebac 0304 	sub.w	r3, ip, r4
 800c5b6:	3b15      	subs	r3, #21
 800c5b8:	f023 0303 	bic.w	r3, r3, #3
 800c5bc:	3304      	adds	r3, #4
 800c5be:	f104 0015 	add.w	r0, r4, #21
 800c5c2:	4584      	cmp	ip, r0
 800c5c4:	bf38      	it	cc
 800c5c6:	2304      	movcc	r3, #4
 800c5c8:	50ca      	str	r2, [r1, r3]
 800c5ca:	b10a      	cbz	r2, 800c5d0 <__lshift+0xa4>
 800c5cc:	f108 0602 	add.w	r6, r8, #2
 800c5d0:	3e01      	subs	r6, #1
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	612e      	str	r6, [r5, #16]
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	f7ff fd8e 	bl	800c0f8 <_Bfree>
 800c5dc:	4628      	mov	r0, r5
 800c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	e7c5      	b.n	800c576 <__lshift+0x4a>
 800c5ea:	3904      	subs	r1, #4
 800c5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5f4:	459c      	cmp	ip, r3
 800c5f6:	d8f9      	bhi.n	800c5ec <__lshift+0xc0>
 800c5f8:	e7ea      	b.n	800c5d0 <__lshift+0xa4>
 800c5fa:	bf00      	nop
 800c5fc:	0800d984 	.word	0x0800d984
 800c600:	0800d9f5 	.word	0x0800d9f5

0800c604 <__mcmp>:
 800c604:	b530      	push	{r4, r5, lr}
 800c606:	6902      	ldr	r2, [r0, #16]
 800c608:	690c      	ldr	r4, [r1, #16]
 800c60a:	1b12      	subs	r2, r2, r4
 800c60c:	d10e      	bne.n	800c62c <__mcmp+0x28>
 800c60e:	f100 0314 	add.w	r3, r0, #20
 800c612:	3114      	adds	r1, #20
 800c614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c61c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c624:	42a5      	cmp	r5, r4
 800c626:	d003      	beq.n	800c630 <__mcmp+0x2c>
 800c628:	d305      	bcc.n	800c636 <__mcmp+0x32>
 800c62a:	2201      	movs	r2, #1
 800c62c:	4610      	mov	r0, r2
 800c62e:	bd30      	pop	{r4, r5, pc}
 800c630:	4283      	cmp	r3, r0
 800c632:	d3f3      	bcc.n	800c61c <__mcmp+0x18>
 800c634:	e7fa      	b.n	800c62c <__mcmp+0x28>
 800c636:	f04f 32ff 	mov.w	r2, #4294967295
 800c63a:	e7f7      	b.n	800c62c <__mcmp+0x28>

0800c63c <__mdiff>:
 800c63c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c640:	460c      	mov	r4, r1
 800c642:	4606      	mov	r6, r0
 800c644:	4611      	mov	r1, r2
 800c646:	4620      	mov	r0, r4
 800c648:	4690      	mov	r8, r2
 800c64a:	f7ff ffdb 	bl	800c604 <__mcmp>
 800c64e:	1e05      	subs	r5, r0, #0
 800c650:	d110      	bne.n	800c674 <__mdiff+0x38>
 800c652:	4629      	mov	r1, r5
 800c654:	4630      	mov	r0, r6
 800c656:	f7ff fd0f 	bl	800c078 <_Balloc>
 800c65a:	b930      	cbnz	r0, 800c66a <__mdiff+0x2e>
 800c65c:	4b3a      	ldr	r3, [pc, #232]	; (800c748 <__mdiff+0x10c>)
 800c65e:	4602      	mov	r2, r0
 800c660:	f240 2137 	movw	r1, #567	; 0x237
 800c664:	4839      	ldr	r0, [pc, #228]	; (800c74c <__mdiff+0x110>)
 800c666:	f7fe fab9 	bl	800abdc <__assert_func>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c674:	bfa4      	itt	ge
 800c676:	4643      	movge	r3, r8
 800c678:	46a0      	movge	r8, r4
 800c67a:	4630      	mov	r0, r6
 800c67c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c680:	bfa6      	itte	ge
 800c682:	461c      	movge	r4, r3
 800c684:	2500      	movge	r5, #0
 800c686:	2501      	movlt	r5, #1
 800c688:	f7ff fcf6 	bl	800c078 <_Balloc>
 800c68c:	b920      	cbnz	r0, 800c698 <__mdiff+0x5c>
 800c68e:	4b2e      	ldr	r3, [pc, #184]	; (800c748 <__mdiff+0x10c>)
 800c690:	4602      	mov	r2, r0
 800c692:	f240 2145 	movw	r1, #581	; 0x245
 800c696:	e7e5      	b.n	800c664 <__mdiff+0x28>
 800c698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c69c:	6926      	ldr	r6, [r4, #16]
 800c69e:	60c5      	str	r5, [r0, #12]
 800c6a0:	f104 0914 	add.w	r9, r4, #20
 800c6a4:	f108 0514 	add.w	r5, r8, #20
 800c6a8:	f100 0e14 	add.w	lr, r0, #20
 800c6ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6b4:	f108 0210 	add.w	r2, r8, #16
 800c6b8:	46f2      	mov	sl, lr
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6c4:	fa11 f88b 	uxtah	r8, r1, fp
 800c6c8:	b299      	uxth	r1, r3
 800c6ca:	0c1b      	lsrs	r3, r3, #16
 800c6cc:	eba8 0801 	sub.w	r8, r8, r1
 800c6d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6d8:	fa1f f888 	uxth.w	r8, r8
 800c6dc:	1419      	asrs	r1, r3, #16
 800c6de:	454e      	cmp	r6, r9
 800c6e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c6e4:	f84a 3b04 	str.w	r3, [sl], #4
 800c6e8:	d8e8      	bhi.n	800c6bc <__mdiff+0x80>
 800c6ea:	1b33      	subs	r3, r6, r4
 800c6ec:	3b15      	subs	r3, #21
 800c6ee:	f023 0303 	bic.w	r3, r3, #3
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	3415      	adds	r4, #21
 800c6f6:	42a6      	cmp	r6, r4
 800c6f8:	bf38      	it	cc
 800c6fa:	2304      	movcc	r3, #4
 800c6fc:	441d      	add	r5, r3
 800c6fe:	4473      	add	r3, lr
 800c700:	469e      	mov	lr, r3
 800c702:	462e      	mov	r6, r5
 800c704:	4566      	cmp	r6, ip
 800c706:	d30e      	bcc.n	800c726 <__mdiff+0xea>
 800c708:	f10c 0203 	add.w	r2, ip, #3
 800c70c:	1b52      	subs	r2, r2, r5
 800c70e:	f022 0203 	bic.w	r2, r2, #3
 800c712:	3d03      	subs	r5, #3
 800c714:	45ac      	cmp	ip, r5
 800c716:	bf38      	it	cc
 800c718:	2200      	movcc	r2, #0
 800c71a:	4413      	add	r3, r2
 800c71c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c720:	b17a      	cbz	r2, 800c742 <__mdiff+0x106>
 800c722:	6107      	str	r7, [r0, #16]
 800c724:	e7a4      	b.n	800c670 <__mdiff+0x34>
 800c726:	f856 8b04 	ldr.w	r8, [r6], #4
 800c72a:	fa11 f288 	uxtah	r2, r1, r8
 800c72e:	1414      	asrs	r4, r2, #16
 800c730:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c734:	b292      	uxth	r2, r2
 800c736:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c73a:	f84e 2b04 	str.w	r2, [lr], #4
 800c73e:	1421      	asrs	r1, r4, #16
 800c740:	e7e0      	b.n	800c704 <__mdiff+0xc8>
 800c742:	3f01      	subs	r7, #1
 800c744:	e7ea      	b.n	800c71c <__mdiff+0xe0>
 800c746:	bf00      	nop
 800c748:	0800d984 	.word	0x0800d984
 800c74c:	0800d9f5 	.word	0x0800d9f5

0800c750 <__ulp>:
 800c750:	b082      	sub	sp, #8
 800c752:	ed8d 0b00 	vstr	d0, [sp]
 800c756:	9a01      	ldr	r2, [sp, #4]
 800c758:	4b0f      	ldr	r3, [pc, #60]	; (800c798 <__ulp+0x48>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c760:	2b00      	cmp	r3, #0
 800c762:	dc08      	bgt.n	800c776 <__ulp+0x26>
 800c764:	425b      	negs	r3, r3
 800c766:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c76a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c76e:	da04      	bge.n	800c77a <__ulp+0x2a>
 800c770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c774:	4113      	asrs	r3, r2
 800c776:	2200      	movs	r2, #0
 800c778:	e008      	b.n	800c78c <__ulp+0x3c>
 800c77a:	f1a2 0314 	sub.w	r3, r2, #20
 800c77e:	2b1e      	cmp	r3, #30
 800c780:	bfda      	itte	le
 800c782:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c786:	40da      	lsrle	r2, r3
 800c788:	2201      	movgt	r2, #1
 800c78a:	2300      	movs	r3, #0
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	ec41 0b10 	vmov	d0, r0, r1
 800c794:	b002      	add	sp, #8
 800c796:	4770      	bx	lr
 800c798:	7ff00000 	.word	0x7ff00000

0800c79c <__b2d>:
 800c79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a0:	6906      	ldr	r6, [r0, #16]
 800c7a2:	f100 0814 	add.w	r8, r0, #20
 800c7a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7aa:	1f37      	subs	r7, r6, #4
 800c7ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	f7ff fd53 	bl	800c25c <__hi0bits>
 800c7b6:	f1c0 0320 	rsb	r3, r0, #32
 800c7ba:	280a      	cmp	r0, #10
 800c7bc:	600b      	str	r3, [r1, #0]
 800c7be:	491b      	ldr	r1, [pc, #108]	; (800c82c <__b2d+0x90>)
 800c7c0:	dc15      	bgt.n	800c7ee <__b2d+0x52>
 800c7c2:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7c6:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7ca:	45b8      	cmp	r8, r7
 800c7cc:	ea43 0501 	orr.w	r5, r3, r1
 800c7d0:	bf34      	ite	cc
 800c7d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7d6:	2300      	movcs	r3, #0
 800c7d8:	3015      	adds	r0, #21
 800c7da:	fa02 f000 	lsl.w	r0, r2, r0
 800c7de:	fa23 f30c 	lsr.w	r3, r3, ip
 800c7e2:	4303      	orrs	r3, r0
 800c7e4:	461c      	mov	r4, r3
 800c7e6:	ec45 4b10 	vmov	d0, r4, r5
 800c7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ee:	45b8      	cmp	r8, r7
 800c7f0:	bf3a      	itte	cc
 800c7f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7f6:	f1a6 0708 	subcc.w	r7, r6, #8
 800c7fa:	2300      	movcs	r3, #0
 800c7fc:	380b      	subs	r0, #11
 800c7fe:	d012      	beq.n	800c826 <__b2d+0x8a>
 800c800:	f1c0 0120 	rsb	r1, r0, #32
 800c804:	fa23 f401 	lsr.w	r4, r3, r1
 800c808:	4082      	lsls	r2, r0
 800c80a:	4322      	orrs	r2, r4
 800c80c:	4547      	cmp	r7, r8
 800c80e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c812:	bf8c      	ite	hi
 800c814:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c818:	2200      	movls	r2, #0
 800c81a:	4083      	lsls	r3, r0
 800c81c:	40ca      	lsrs	r2, r1
 800c81e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c822:	4313      	orrs	r3, r2
 800c824:	e7de      	b.n	800c7e4 <__b2d+0x48>
 800c826:	ea42 0501 	orr.w	r5, r2, r1
 800c82a:	e7db      	b.n	800c7e4 <__b2d+0x48>
 800c82c:	3ff00000 	.word	0x3ff00000

0800c830 <__d2b>:
 800c830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c834:	460f      	mov	r7, r1
 800c836:	2101      	movs	r1, #1
 800c838:	ec59 8b10 	vmov	r8, r9, d0
 800c83c:	4616      	mov	r6, r2
 800c83e:	f7ff fc1b 	bl	800c078 <_Balloc>
 800c842:	4604      	mov	r4, r0
 800c844:	b930      	cbnz	r0, 800c854 <__d2b+0x24>
 800c846:	4602      	mov	r2, r0
 800c848:	4b24      	ldr	r3, [pc, #144]	; (800c8dc <__d2b+0xac>)
 800c84a:	4825      	ldr	r0, [pc, #148]	; (800c8e0 <__d2b+0xb0>)
 800c84c:	f240 310f 	movw	r1, #783	; 0x30f
 800c850:	f7fe f9c4 	bl	800abdc <__assert_func>
 800c854:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c85c:	bb2d      	cbnz	r5, 800c8aa <__d2b+0x7a>
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	f1b8 0300 	subs.w	r3, r8, #0
 800c864:	d026      	beq.n	800c8b4 <__d2b+0x84>
 800c866:	4668      	mov	r0, sp
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	f7ff fd17 	bl	800c29c <__lo0bits>
 800c86e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c872:	b1e8      	cbz	r0, 800c8b0 <__d2b+0x80>
 800c874:	f1c0 0320 	rsb	r3, r0, #32
 800c878:	fa02 f303 	lsl.w	r3, r2, r3
 800c87c:	430b      	orrs	r3, r1
 800c87e:	40c2      	lsrs	r2, r0
 800c880:	6163      	str	r3, [r4, #20]
 800c882:	9201      	str	r2, [sp, #4]
 800c884:	9b01      	ldr	r3, [sp, #4]
 800c886:	61a3      	str	r3, [r4, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bf14      	ite	ne
 800c88c:	2202      	movne	r2, #2
 800c88e:	2201      	moveq	r2, #1
 800c890:	6122      	str	r2, [r4, #16]
 800c892:	b1bd      	cbz	r5, 800c8c4 <__d2b+0x94>
 800c894:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c898:	4405      	add	r5, r0
 800c89a:	603d      	str	r5, [r7, #0]
 800c89c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	b003      	add	sp, #12
 800c8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8ae:	e7d6      	b.n	800c85e <__d2b+0x2e>
 800c8b0:	6161      	str	r1, [r4, #20]
 800c8b2:	e7e7      	b.n	800c884 <__d2b+0x54>
 800c8b4:	a801      	add	r0, sp, #4
 800c8b6:	f7ff fcf1 	bl	800c29c <__lo0bits>
 800c8ba:	9b01      	ldr	r3, [sp, #4]
 800c8bc:	6163      	str	r3, [r4, #20]
 800c8be:	3020      	adds	r0, #32
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	e7e5      	b.n	800c890 <__d2b+0x60>
 800c8c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8cc:	6038      	str	r0, [r7, #0]
 800c8ce:	6918      	ldr	r0, [r3, #16]
 800c8d0:	f7ff fcc4 	bl	800c25c <__hi0bits>
 800c8d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8d8:	e7e2      	b.n	800c8a0 <__d2b+0x70>
 800c8da:	bf00      	nop
 800c8dc:	0800d984 	.word	0x0800d984
 800c8e0:	0800d9f5 	.word	0x0800d9f5

0800c8e4 <__ratio>:
 800c8e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	4688      	mov	r8, r1
 800c8ea:	4669      	mov	r1, sp
 800c8ec:	4681      	mov	r9, r0
 800c8ee:	f7ff ff55 	bl	800c79c <__b2d>
 800c8f2:	a901      	add	r1, sp, #4
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	ec55 4b10 	vmov	r4, r5, d0
 800c8fa:	f7ff ff4f 	bl	800c79c <__b2d>
 800c8fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c902:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c906:	eba3 0c02 	sub.w	ip, r3, r2
 800c90a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c90e:	1a9b      	subs	r3, r3, r2
 800c910:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c914:	ec51 0b10 	vmov	r0, r1, d0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfd6      	itet	le
 800c91c:	460a      	movle	r2, r1
 800c91e:	462a      	movgt	r2, r5
 800c920:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c924:	468b      	mov	fp, r1
 800c926:	462f      	mov	r7, r5
 800c928:	bfd4      	ite	le
 800c92a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c92e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c932:	4620      	mov	r0, r4
 800c934:	ee10 2a10 	vmov	r2, s0
 800c938:	465b      	mov	r3, fp
 800c93a:	4639      	mov	r1, r7
 800c93c:	f7f3 ff86 	bl	800084c <__aeabi_ddiv>
 800c940:	ec41 0b10 	vmov	d0, r0, r1
 800c944:	b003      	add	sp, #12
 800c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c94a <__copybits>:
 800c94a:	3901      	subs	r1, #1
 800c94c:	b570      	push	{r4, r5, r6, lr}
 800c94e:	1149      	asrs	r1, r1, #5
 800c950:	6914      	ldr	r4, [r2, #16]
 800c952:	3101      	adds	r1, #1
 800c954:	f102 0314 	add.w	r3, r2, #20
 800c958:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c95c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c960:	1f05      	subs	r5, r0, #4
 800c962:	42a3      	cmp	r3, r4
 800c964:	d30c      	bcc.n	800c980 <__copybits+0x36>
 800c966:	1aa3      	subs	r3, r4, r2
 800c968:	3b11      	subs	r3, #17
 800c96a:	f023 0303 	bic.w	r3, r3, #3
 800c96e:	3211      	adds	r2, #17
 800c970:	42a2      	cmp	r2, r4
 800c972:	bf88      	it	hi
 800c974:	2300      	movhi	r3, #0
 800c976:	4418      	add	r0, r3
 800c978:	2300      	movs	r3, #0
 800c97a:	4288      	cmp	r0, r1
 800c97c:	d305      	bcc.n	800c98a <__copybits+0x40>
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	f853 6b04 	ldr.w	r6, [r3], #4
 800c984:	f845 6f04 	str.w	r6, [r5, #4]!
 800c988:	e7eb      	b.n	800c962 <__copybits+0x18>
 800c98a:	f840 3b04 	str.w	r3, [r0], #4
 800c98e:	e7f4      	b.n	800c97a <__copybits+0x30>

0800c990 <__any_on>:
 800c990:	f100 0214 	add.w	r2, r0, #20
 800c994:	6900      	ldr	r0, [r0, #16]
 800c996:	114b      	asrs	r3, r1, #5
 800c998:	4298      	cmp	r0, r3
 800c99a:	b510      	push	{r4, lr}
 800c99c:	db11      	blt.n	800c9c2 <__any_on+0x32>
 800c99e:	dd0a      	ble.n	800c9b6 <__any_on+0x26>
 800c9a0:	f011 011f 	ands.w	r1, r1, #31
 800c9a4:	d007      	beq.n	800c9b6 <__any_on+0x26>
 800c9a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9aa:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ae:	fa00 f101 	lsl.w	r1, r0, r1
 800c9b2:	428c      	cmp	r4, r1
 800c9b4:	d10b      	bne.n	800c9ce <__any_on+0x3e>
 800c9b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d803      	bhi.n	800c9c6 <__any_on+0x36>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	bd10      	pop	{r4, pc}
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	e7f7      	b.n	800c9b6 <__any_on+0x26>
 800c9c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9ca:	2900      	cmp	r1, #0
 800c9cc:	d0f5      	beq.n	800c9ba <__any_on+0x2a>
 800c9ce:	2001      	movs	r0, #1
 800c9d0:	e7f6      	b.n	800c9c0 <__any_on+0x30>

0800c9d2 <__ascii_wctomb>:
 800c9d2:	b149      	cbz	r1, 800c9e8 <__ascii_wctomb+0x16>
 800c9d4:	2aff      	cmp	r2, #255	; 0xff
 800c9d6:	bf85      	ittet	hi
 800c9d8:	238a      	movhi	r3, #138	; 0x8a
 800c9da:	6003      	strhi	r3, [r0, #0]
 800c9dc:	700a      	strbls	r2, [r1, #0]
 800c9de:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9e2:	bf98      	it	ls
 800c9e4:	2001      	movls	r0, #1
 800c9e6:	4770      	bx	lr
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	4770      	bx	lr

0800c9ec <__ssputs_r>:
 800c9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f0:	688e      	ldr	r6, [r1, #8]
 800c9f2:	461f      	mov	r7, r3
 800c9f4:	42be      	cmp	r6, r7
 800c9f6:	680b      	ldr	r3, [r1, #0]
 800c9f8:	4682      	mov	sl, r0
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	4690      	mov	r8, r2
 800c9fe:	d82c      	bhi.n	800ca5a <__ssputs_r+0x6e>
 800ca00:	898a      	ldrh	r2, [r1, #12]
 800ca02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca06:	d026      	beq.n	800ca56 <__ssputs_r+0x6a>
 800ca08:	6965      	ldr	r5, [r4, #20]
 800ca0a:	6909      	ldr	r1, [r1, #16]
 800ca0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca10:	eba3 0901 	sub.w	r9, r3, r1
 800ca14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca18:	1c7b      	adds	r3, r7, #1
 800ca1a:	444b      	add	r3, r9
 800ca1c:	106d      	asrs	r5, r5, #1
 800ca1e:	429d      	cmp	r5, r3
 800ca20:	bf38      	it	cc
 800ca22:	461d      	movcc	r5, r3
 800ca24:	0553      	lsls	r3, r2, #21
 800ca26:	d527      	bpl.n	800ca78 <__ssputs_r+0x8c>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7fc f891 	bl	8008b50 <_malloc_r>
 800ca2e:	4606      	mov	r6, r0
 800ca30:	b360      	cbz	r0, 800ca8c <__ssputs_r+0xa0>
 800ca32:	6921      	ldr	r1, [r4, #16]
 800ca34:	464a      	mov	r2, r9
 800ca36:	f7fe f8b2 	bl	800ab9e <memcpy>
 800ca3a:	89a3      	ldrh	r3, [r4, #12]
 800ca3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	6126      	str	r6, [r4, #16]
 800ca48:	6165      	str	r5, [r4, #20]
 800ca4a:	444e      	add	r6, r9
 800ca4c:	eba5 0509 	sub.w	r5, r5, r9
 800ca50:	6026      	str	r6, [r4, #0]
 800ca52:	60a5      	str	r5, [r4, #8]
 800ca54:	463e      	mov	r6, r7
 800ca56:	42be      	cmp	r6, r7
 800ca58:	d900      	bls.n	800ca5c <__ssputs_r+0x70>
 800ca5a:	463e      	mov	r6, r7
 800ca5c:	6820      	ldr	r0, [r4, #0]
 800ca5e:	4632      	mov	r2, r6
 800ca60:	4641      	mov	r1, r8
 800ca62:	f000 f9db 	bl	800ce1c <memmove>
 800ca66:	68a3      	ldr	r3, [r4, #8]
 800ca68:	1b9b      	subs	r3, r3, r6
 800ca6a:	60a3      	str	r3, [r4, #8]
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	4433      	add	r3, r6
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	2000      	movs	r0, #0
 800ca74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca78:	462a      	mov	r2, r5
 800ca7a:	f000 fa06 	bl	800ce8a <_realloc_r>
 800ca7e:	4606      	mov	r6, r0
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d1e0      	bne.n	800ca46 <__ssputs_r+0x5a>
 800ca84:	6921      	ldr	r1, [r4, #16]
 800ca86:	4650      	mov	r0, sl
 800ca88:	f7fe ff40 	bl	800b90c <_free_r>
 800ca8c:	230c      	movs	r3, #12
 800ca8e:	f8ca 3000 	str.w	r3, [sl]
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca98:	81a3      	strh	r3, [r4, #12]
 800ca9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9e:	e7e9      	b.n	800ca74 <__ssputs_r+0x88>

0800caa0 <_svfiprintf_r>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	4698      	mov	r8, r3
 800caa6:	898b      	ldrh	r3, [r1, #12]
 800caa8:	061b      	lsls	r3, r3, #24
 800caaa:	b09d      	sub	sp, #116	; 0x74
 800caac:	4607      	mov	r7, r0
 800caae:	460d      	mov	r5, r1
 800cab0:	4614      	mov	r4, r2
 800cab2:	d50e      	bpl.n	800cad2 <_svfiprintf_r+0x32>
 800cab4:	690b      	ldr	r3, [r1, #16]
 800cab6:	b963      	cbnz	r3, 800cad2 <_svfiprintf_r+0x32>
 800cab8:	2140      	movs	r1, #64	; 0x40
 800caba:	f7fc f849 	bl	8008b50 <_malloc_r>
 800cabe:	6028      	str	r0, [r5, #0]
 800cac0:	6128      	str	r0, [r5, #16]
 800cac2:	b920      	cbnz	r0, 800cace <_svfiprintf_r+0x2e>
 800cac4:	230c      	movs	r3, #12
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	e0d0      	b.n	800cc70 <_svfiprintf_r+0x1d0>
 800cace:	2340      	movs	r3, #64	; 0x40
 800cad0:	616b      	str	r3, [r5, #20]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9309      	str	r3, [sp, #36]	; 0x24
 800cad6:	2320      	movs	r3, #32
 800cad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cadc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae0:	2330      	movs	r3, #48	; 0x30
 800cae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc88 <_svfiprintf_r+0x1e8>
 800cae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caea:	f04f 0901 	mov.w	r9, #1
 800caee:	4623      	mov	r3, r4
 800caf0:	469a      	mov	sl, r3
 800caf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf6:	b10a      	cbz	r2, 800cafc <_svfiprintf_r+0x5c>
 800caf8:	2a25      	cmp	r2, #37	; 0x25
 800cafa:	d1f9      	bne.n	800caf0 <_svfiprintf_r+0x50>
 800cafc:	ebba 0b04 	subs.w	fp, sl, r4
 800cb00:	d00b      	beq.n	800cb1a <_svfiprintf_r+0x7a>
 800cb02:	465b      	mov	r3, fp
 800cb04:	4622      	mov	r2, r4
 800cb06:	4629      	mov	r1, r5
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f7ff ff6f 	bl	800c9ec <__ssputs_r>
 800cb0e:	3001      	adds	r0, #1
 800cb10:	f000 80a9 	beq.w	800cc66 <_svfiprintf_r+0x1c6>
 800cb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb16:	445a      	add	r2, fp
 800cb18:	9209      	str	r2, [sp, #36]	; 0x24
 800cb1a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 80a1 	beq.w	800cc66 <_svfiprintf_r+0x1c6>
 800cb24:	2300      	movs	r3, #0
 800cb26:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2e:	f10a 0a01 	add.w	sl, sl, #1
 800cb32:	9304      	str	r3, [sp, #16]
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb3a:	931a      	str	r3, [sp, #104]	; 0x68
 800cb3c:	4654      	mov	r4, sl
 800cb3e:	2205      	movs	r2, #5
 800cb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb44:	4850      	ldr	r0, [pc, #320]	; (800cc88 <_svfiprintf_r+0x1e8>)
 800cb46:	f7f3 fb43 	bl	80001d0 <memchr>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	b9d8      	cbnz	r0, 800cb86 <_svfiprintf_r+0xe6>
 800cb4e:	06d0      	lsls	r0, r2, #27
 800cb50:	bf44      	itt	mi
 800cb52:	2320      	movmi	r3, #32
 800cb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb58:	0711      	lsls	r1, r2, #28
 800cb5a:	bf44      	itt	mi
 800cb5c:	232b      	movmi	r3, #43	; 0x2b
 800cb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb62:	f89a 3000 	ldrb.w	r3, [sl]
 800cb66:	2b2a      	cmp	r3, #42	; 0x2a
 800cb68:	d015      	beq.n	800cb96 <_svfiprintf_r+0xf6>
 800cb6a:	9a07      	ldr	r2, [sp, #28]
 800cb6c:	4654      	mov	r4, sl
 800cb6e:	2000      	movs	r0, #0
 800cb70:	f04f 0c0a 	mov.w	ip, #10
 800cb74:	4621      	mov	r1, r4
 800cb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7a:	3b30      	subs	r3, #48	; 0x30
 800cb7c:	2b09      	cmp	r3, #9
 800cb7e:	d94d      	bls.n	800cc1c <_svfiprintf_r+0x17c>
 800cb80:	b1b0      	cbz	r0, 800cbb0 <_svfiprintf_r+0x110>
 800cb82:	9207      	str	r2, [sp, #28]
 800cb84:	e014      	b.n	800cbb0 <_svfiprintf_r+0x110>
 800cb86:	eba0 0308 	sub.w	r3, r0, r8
 800cb8a:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	46a2      	mov	sl, r4
 800cb94:	e7d2      	b.n	800cb3c <_svfiprintf_r+0x9c>
 800cb96:	9b03      	ldr	r3, [sp, #12]
 800cb98:	1d19      	adds	r1, r3, #4
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	9103      	str	r1, [sp, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bfbb      	ittet	lt
 800cba2:	425b      	neglt	r3, r3
 800cba4:	f042 0202 	orrlt.w	r2, r2, #2
 800cba8:	9307      	strge	r3, [sp, #28]
 800cbaa:	9307      	strlt	r3, [sp, #28]
 800cbac:	bfb8      	it	lt
 800cbae:	9204      	strlt	r2, [sp, #16]
 800cbb0:	7823      	ldrb	r3, [r4, #0]
 800cbb2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb4:	d10c      	bne.n	800cbd0 <_svfiprintf_r+0x130>
 800cbb6:	7863      	ldrb	r3, [r4, #1]
 800cbb8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbba:	d134      	bne.n	800cc26 <_svfiprintf_r+0x186>
 800cbbc:	9b03      	ldr	r3, [sp, #12]
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	9203      	str	r2, [sp, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	bfb8      	it	lt
 800cbc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbcc:	3402      	adds	r4, #2
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cc98 <_svfiprintf_r+0x1f8>
 800cbd4:	7821      	ldrb	r1, [r4, #0]
 800cbd6:	2203      	movs	r2, #3
 800cbd8:	4650      	mov	r0, sl
 800cbda:	f7f3 faf9 	bl	80001d0 <memchr>
 800cbde:	b138      	cbz	r0, 800cbf0 <_svfiprintf_r+0x150>
 800cbe0:	9b04      	ldr	r3, [sp, #16]
 800cbe2:	eba0 000a 	sub.w	r0, r0, sl
 800cbe6:	2240      	movs	r2, #64	; 0x40
 800cbe8:	4082      	lsls	r2, r0
 800cbea:	4313      	orrs	r3, r2
 800cbec:	3401      	adds	r4, #1
 800cbee:	9304      	str	r3, [sp, #16]
 800cbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf4:	4825      	ldr	r0, [pc, #148]	; (800cc8c <_svfiprintf_r+0x1ec>)
 800cbf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbfa:	2206      	movs	r2, #6
 800cbfc:	f7f3 fae8 	bl	80001d0 <memchr>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d038      	beq.n	800cc76 <_svfiprintf_r+0x1d6>
 800cc04:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <_svfiprintf_r+0x1f0>)
 800cc06:	bb1b      	cbnz	r3, 800cc50 <_svfiprintf_r+0x1b0>
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	3307      	adds	r3, #7
 800cc0c:	f023 0307 	bic.w	r3, r3, #7
 800cc10:	3308      	adds	r3, #8
 800cc12:	9303      	str	r3, [sp, #12]
 800cc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc16:	4433      	add	r3, r6
 800cc18:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1a:	e768      	b.n	800caee <_svfiprintf_r+0x4e>
 800cc1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc20:	460c      	mov	r4, r1
 800cc22:	2001      	movs	r0, #1
 800cc24:	e7a6      	b.n	800cb74 <_svfiprintf_r+0xd4>
 800cc26:	2300      	movs	r3, #0
 800cc28:	3401      	adds	r4, #1
 800cc2a:	9305      	str	r3, [sp, #20]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	f04f 0c0a 	mov.w	ip, #10
 800cc32:	4620      	mov	r0, r4
 800cc34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc38:	3a30      	subs	r2, #48	; 0x30
 800cc3a:	2a09      	cmp	r2, #9
 800cc3c:	d903      	bls.n	800cc46 <_svfiprintf_r+0x1a6>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0c6      	beq.n	800cbd0 <_svfiprintf_r+0x130>
 800cc42:	9105      	str	r1, [sp, #20]
 800cc44:	e7c4      	b.n	800cbd0 <_svfiprintf_r+0x130>
 800cc46:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e7f0      	b.n	800cc32 <_svfiprintf_r+0x192>
 800cc50:	ab03      	add	r3, sp, #12
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	462a      	mov	r2, r5
 800cc56:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <_svfiprintf_r+0x1f4>)
 800cc58:	a904      	add	r1, sp, #16
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f7fc ff50 	bl	8009b00 <_printf_float>
 800cc60:	1c42      	adds	r2, r0, #1
 800cc62:	4606      	mov	r6, r0
 800cc64:	d1d6      	bne.n	800cc14 <_svfiprintf_r+0x174>
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	065b      	lsls	r3, r3, #25
 800cc6a:	f53f af2d 	bmi.w	800cac8 <_svfiprintf_r+0x28>
 800cc6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc70:	b01d      	add	sp, #116	; 0x74
 800cc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc76:	ab03      	add	r3, sp, #12
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <_svfiprintf_r+0x1f4>)
 800cc7e:	a904      	add	r1, sp, #16
 800cc80:	4638      	mov	r0, r7
 800cc82:	f7fd f9e1 	bl	800a048 <_printf_i>
 800cc86:	e7eb      	b.n	800cc60 <_svfiprintf_r+0x1c0>
 800cc88:	0800db4c 	.word	0x0800db4c
 800cc8c:	0800db56 	.word	0x0800db56
 800cc90:	08009b01 	.word	0x08009b01
 800cc94:	0800c9ed 	.word	0x0800c9ed
 800cc98:	0800db52 	.word	0x0800db52

0800cc9c <__sflush_r>:
 800cc9c:	898a      	ldrh	r2, [r1, #12]
 800cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca2:	4605      	mov	r5, r0
 800cca4:	0710      	lsls	r0, r2, #28
 800cca6:	460c      	mov	r4, r1
 800cca8:	d458      	bmi.n	800cd5c <__sflush_r+0xc0>
 800ccaa:	684b      	ldr	r3, [r1, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dc05      	bgt.n	800ccbc <__sflush_r+0x20>
 800ccb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	dc02      	bgt.n	800ccbc <__sflush_r+0x20>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccbe:	2e00      	cmp	r6, #0
 800ccc0:	d0f9      	beq.n	800ccb6 <__sflush_r+0x1a>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccc8:	682f      	ldr	r7, [r5, #0]
 800ccca:	6a21      	ldr	r1, [r4, #32]
 800cccc:	602b      	str	r3, [r5, #0]
 800ccce:	d032      	beq.n	800cd36 <__sflush_r+0x9a>
 800ccd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	075a      	lsls	r2, r3, #29
 800ccd6:	d505      	bpl.n	800cce4 <__sflush_r+0x48>
 800ccd8:	6863      	ldr	r3, [r4, #4]
 800ccda:	1ac0      	subs	r0, r0, r3
 800ccdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccde:	b10b      	cbz	r3, 800cce4 <__sflush_r+0x48>
 800cce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cce2:	1ac0      	subs	r0, r0, r3
 800cce4:	2300      	movs	r3, #0
 800cce6:	4602      	mov	r2, r0
 800cce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccea:	6a21      	ldr	r1, [r4, #32]
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b0      	blx	r6
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	d106      	bne.n	800cd04 <__sflush_r+0x68>
 800ccf6:	6829      	ldr	r1, [r5, #0]
 800ccf8:	291d      	cmp	r1, #29
 800ccfa:	d82b      	bhi.n	800cd54 <__sflush_r+0xb8>
 800ccfc:	4a29      	ldr	r2, [pc, #164]	; (800cda4 <__sflush_r+0x108>)
 800ccfe:	410a      	asrs	r2, r1
 800cd00:	07d6      	lsls	r6, r2, #31
 800cd02:	d427      	bmi.n	800cd54 <__sflush_r+0xb8>
 800cd04:	2200      	movs	r2, #0
 800cd06:	6062      	str	r2, [r4, #4]
 800cd08:	04d9      	lsls	r1, r3, #19
 800cd0a:	6922      	ldr	r2, [r4, #16]
 800cd0c:	6022      	str	r2, [r4, #0]
 800cd0e:	d504      	bpl.n	800cd1a <__sflush_r+0x7e>
 800cd10:	1c42      	adds	r2, r0, #1
 800cd12:	d101      	bne.n	800cd18 <__sflush_r+0x7c>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b903      	cbnz	r3, 800cd1a <__sflush_r+0x7e>
 800cd18:	6560      	str	r0, [r4, #84]	; 0x54
 800cd1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1c:	602f      	str	r7, [r5, #0]
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d0c9      	beq.n	800ccb6 <__sflush_r+0x1a>
 800cd22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd26:	4299      	cmp	r1, r3
 800cd28:	d002      	beq.n	800cd30 <__sflush_r+0x94>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f7fe fdee 	bl	800b90c <_free_r>
 800cd30:	2000      	movs	r0, #0
 800cd32:	6360      	str	r0, [r4, #52]	; 0x34
 800cd34:	e7c0      	b.n	800ccb8 <__sflush_r+0x1c>
 800cd36:	2301      	movs	r3, #1
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b0      	blx	r6
 800cd3c:	1c41      	adds	r1, r0, #1
 800cd3e:	d1c8      	bne.n	800ccd2 <__sflush_r+0x36>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0c5      	beq.n	800ccd2 <__sflush_r+0x36>
 800cd46:	2b1d      	cmp	r3, #29
 800cd48:	d001      	beq.n	800cd4e <__sflush_r+0xb2>
 800cd4a:	2b16      	cmp	r3, #22
 800cd4c:	d101      	bne.n	800cd52 <__sflush_r+0xb6>
 800cd4e:	602f      	str	r7, [r5, #0]
 800cd50:	e7b1      	b.n	800ccb6 <__sflush_r+0x1a>
 800cd52:	89a3      	ldrh	r3, [r4, #12]
 800cd54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd58:	81a3      	strh	r3, [r4, #12]
 800cd5a:	e7ad      	b.n	800ccb8 <__sflush_r+0x1c>
 800cd5c:	690f      	ldr	r7, [r1, #16]
 800cd5e:	2f00      	cmp	r7, #0
 800cd60:	d0a9      	beq.n	800ccb6 <__sflush_r+0x1a>
 800cd62:	0793      	lsls	r3, r2, #30
 800cd64:	680e      	ldr	r6, [r1, #0]
 800cd66:	bf08      	it	eq
 800cd68:	694b      	ldreq	r3, [r1, #20]
 800cd6a:	600f      	str	r7, [r1, #0]
 800cd6c:	bf18      	it	ne
 800cd6e:	2300      	movne	r3, #0
 800cd70:	eba6 0807 	sub.w	r8, r6, r7
 800cd74:	608b      	str	r3, [r1, #8]
 800cd76:	f1b8 0f00 	cmp.w	r8, #0
 800cd7a:	dd9c      	ble.n	800ccb6 <__sflush_r+0x1a>
 800cd7c:	6a21      	ldr	r1, [r4, #32]
 800cd7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd80:	4643      	mov	r3, r8
 800cd82:	463a      	mov	r2, r7
 800cd84:	4628      	mov	r0, r5
 800cd86:	47b0      	blx	r6
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	dc06      	bgt.n	800cd9a <__sflush_r+0xfe>
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd92:	81a3      	strh	r3, [r4, #12]
 800cd94:	f04f 30ff 	mov.w	r0, #4294967295
 800cd98:	e78e      	b.n	800ccb8 <__sflush_r+0x1c>
 800cd9a:	4407      	add	r7, r0
 800cd9c:	eba8 0800 	sub.w	r8, r8, r0
 800cda0:	e7e9      	b.n	800cd76 <__sflush_r+0xda>
 800cda2:	bf00      	nop
 800cda4:	dfbffffe 	.word	0xdfbffffe

0800cda8 <_fflush_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	690b      	ldr	r3, [r1, #16]
 800cdac:	4605      	mov	r5, r0
 800cdae:	460c      	mov	r4, r1
 800cdb0:	b913      	cbnz	r3, 800cdb8 <_fflush_r+0x10>
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	b118      	cbz	r0, 800cdc2 <_fflush_r+0x1a>
 800cdba:	6a03      	ldr	r3, [r0, #32]
 800cdbc:	b90b      	cbnz	r3, 800cdc2 <_fflush_r+0x1a>
 800cdbe:	f7fd fd01 	bl	800a7c4 <__sinit>
 800cdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0f3      	beq.n	800cdb2 <_fflush_r+0xa>
 800cdca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdcc:	07d0      	lsls	r0, r2, #31
 800cdce:	d404      	bmi.n	800cdda <_fflush_r+0x32>
 800cdd0:	0599      	lsls	r1, r3, #22
 800cdd2:	d402      	bmi.n	800cdda <_fflush_r+0x32>
 800cdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdd6:	f7fd fee0 	bl	800ab9a <__retarget_lock_acquire_recursive>
 800cdda:	4628      	mov	r0, r5
 800cddc:	4621      	mov	r1, r4
 800cdde:	f7ff ff5d 	bl	800cc9c <__sflush_r>
 800cde2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cde4:	07da      	lsls	r2, r3, #31
 800cde6:	4605      	mov	r5, r0
 800cde8:	d4e4      	bmi.n	800cdb4 <_fflush_r+0xc>
 800cdea:	89a3      	ldrh	r3, [r4, #12]
 800cdec:	059b      	lsls	r3, r3, #22
 800cdee:	d4e1      	bmi.n	800cdb4 <_fflush_r+0xc>
 800cdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdf2:	f7fd fed3 	bl	800ab9c <__retarget_lock_release_recursive>
 800cdf6:	e7dd      	b.n	800cdb4 <_fflush_r+0xc>

0800cdf8 <fiprintf>:
 800cdf8:	b40e      	push	{r1, r2, r3}
 800cdfa:	b503      	push	{r0, r1, lr}
 800cdfc:	4601      	mov	r1, r0
 800cdfe:	ab03      	add	r3, sp, #12
 800ce00:	4805      	ldr	r0, [pc, #20]	; (800ce18 <fiprintf+0x20>)
 800ce02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce06:	6800      	ldr	r0, [r0, #0]
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	f000 f897 	bl	800cf3c <_vfiprintf_r>
 800ce0e:	b002      	add	sp, #8
 800ce10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce14:	b003      	add	sp, #12
 800ce16:	4770      	bx	lr
 800ce18:	200001d4 	.word	0x200001d4

0800ce1c <memmove>:
 800ce1c:	4288      	cmp	r0, r1
 800ce1e:	b510      	push	{r4, lr}
 800ce20:	eb01 0402 	add.w	r4, r1, r2
 800ce24:	d902      	bls.n	800ce2c <memmove+0x10>
 800ce26:	4284      	cmp	r4, r0
 800ce28:	4623      	mov	r3, r4
 800ce2a:	d807      	bhi.n	800ce3c <memmove+0x20>
 800ce2c:	1e43      	subs	r3, r0, #1
 800ce2e:	42a1      	cmp	r1, r4
 800ce30:	d008      	beq.n	800ce44 <memmove+0x28>
 800ce32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce3a:	e7f8      	b.n	800ce2e <memmove+0x12>
 800ce3c:	4402      	add	r2, r0
 800ce3e:	4601      	mov	r1, r0
 800ce40:	428a      	cmp	r2, r1
 800ce42:	d100      	bne.n	800ce46 <memmove+0x2a>
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce4e:	e7f7      	b.n	800ce40 <memmove+0x24>

0800ce50 <abort>:
 800ce50:	b508      	push	{r3, lr}
 800ce52:	2006      	movs	r0, #6
 800ce54:	f000 fa4a 	bl	800d2ec <raise>
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f7f4 ff49 	bl	8001cf0 <_exit>

0800ce5e <_calloc_r>:
 800ce5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce60:	fba1 2402 	umull	r2, r4, r1, r2
 800ce64:	b94c      	cbnz	r4, 800ce7a <_calloc_r+0x1c>
 800ce66:	4611      	mov	r1, r2
 800ce68:	9201      	str	r2, [sp, #4]
 800ce6a:	f7fb fe71 	bl	8008b50 <_malloc_r>
 800ce6e:	9a01      	ldr	r2, [sp, #4]
 800ce70:	4605      	mov	r5, r0
 800ce72:	b930      	cbnz	r0, 800ce82 <_calloc_r+0x24>
 800ce74:	4628      	mov	r0, r5
 800ce76:	b003      	add	sp, #12
 800ce78:	bd30      	pop	{r4, r5, pc}
 800ce7a:	220c      	movs	r2, #12
 800ce7c:	6002      	str	r2, [r0, #0]
 800ce7e:	2500      	movs	r5, #0
 800ce80:	e7f8      	b.n	800ce74 <_calloc_r+0x16>
 800ce82:	4621      	mov	r1, r4
 800ce84:	f7fd fd37 	bl	800a8f6 <memset>
 800ce88:	e7f4      	b.n	800ce74 <_calloc_r+0x16>

0800ce8a <_realloc_r>:
 800ce8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce8e:	4680      	mov	r8, r0
 800ce90:	4614      	mov	r4, r2
 800ce92:	460e      	mov	r6, r1
 800ce94:	b921      	cbnz	r1, 800cea0 <_realloc_r+0x16>
 800ce96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	f7fb be58 	b.w	8008b50 <_malloc_r>
 800cea0:	b92a      	cbnz	r2, 800ceae <_realloc_r+0x24>
 800cea2:	f7fe fd33 	bl	800b90c <_free_r>
 800cea6:	4625      	mov	r5, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceae:	f000 fa39 	bl	800d324 <_malloc_usable_size_r>
 800ceb2:	4284      	cmp	r4, r0
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	d802      	bhi.n	800cebe <_realloc_r+0x34>
 800ceb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cebc:	d812      	bhi.n	800cee4 <_realloc_r+0x5a>
 800cebe:	4621      	mov	r1, r4
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7fb fe45 	bl	8008b50 <_malloc_r>
 800cec6:	4605      	mov	r5, r0
 800cec8:	2800      	cmp	r0, #0
 800ceca:	d0ed      	beq.n	800cea8 <_realloc_r+0x1e>
 800cecc:	42bc      	cmp	r4, r7
 800cece:	4622      	mov	r2, r4
 800ced0:	4631      	mov	r1, r6
 800ced2:	bf28      	it	cs
 800ced4:	463a      	movcs	r2, r7
 800ced6:	f7fd fe62 	bl	800ab9e <memcpy>
 800ceda:	4631      	mov	r1, r6
 800cedc:	4640      	mov	r0, r8
 800cede:	f7fe fd15 	bl	800b90c <_free_r>
 800cee2:	e7e1      	b.n	800cea8 <_realloc_r+0x1e>
 800cee4:	4635      	mov	r5, r6
 800cee6:	e7df      	b.n	800cea8 <_realloc_r+0x1e>

0800cee8 <__sfputc_r>:
 800cee8:	6893      	ldr	r3, [r2, #8]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	b410      	push	{r4}
 800cef0:	6093      	str	r3, [r2, #8]
 800cef2:	da08      	bge.n	800cf06 <__sfputc_r+0x1e>
 800cef4:	6994      	ldr	r4, [r2, #24]
 800cef6:	42a3      	cmp	r3, r4
 800cef8:	db01      	blt.n	800cefe <__sfputc_r+0x16>
 800cefa:	290a      	cmp	r1, #10
 800cefc:	d103      	bne.n	800cf06 <__sfputc_r+0x1e>
 800cefe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf02:	f000 b935 	b.w	800d170 <__swbuf_r>
 800cf06:	6813      	ldr	r3, [r2, #0]
 800cf08:	1c58      	adds	r0, r3, #1
 800cf0a:	6010      	str	r0, [r2, #0]
 800cf0c:	7019      	strb	r1, [r3, #0]
 800cf0e:	4608      	mov	r0, r1
 800cf10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf14:	4770      	bx	lr

0800cf16 <__sfputs_r>:
 800cf16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	18d5      	adds	r5, r2, r3
 800cf20:	42ac      	cmp	r4, r5
 800cf22:	d101      	bne.n	800cf28 <__sfputs_r+0x12>
 800cf24:	2000      	movs	r0, #0
 800cf26:	e007      	b.n	800cf38 <__sfputs_r+0x22>
 800cf28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2c:	463a      	mov	r2, r7
 800cf2e:	4630      	mov	r0, r6
 800cf30:	f7ff ffda 	bl	800cee8 <__sfputc_r>
 800cf34:	1c43      	adds	r3, r0, #1
 800cf36:	d1f3      	bne.n	800cf20 <__sfputs_r+0xa>
 800cf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf3c <_vfiprintf_r>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	460d      	mov	r5, r1
 800cf42:	b09d      	sub	sp, #116	; 0x74
 800cf44:	4614      	mov	r4, r2
 800cf46:	4698      	mov	r8, r3
 800cf48:	4606      	mov	r6, r0
 800cf4a:	b118      	cbz	r0, 800cf54 <_vfiprintf_r+0x18>
 800cf4c:	6a03      	ldr	r3, [r0, #32]
 800cf4e:	b90b      	cbnz	r3, 800cf54 <_vfiprintf_r+0x18>
 800cf50:	f7fd fc38 	bl	800a7c4 <__sinit>
 800cf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf56:	07d9      	lsls	r1, r3, #31
 800cf58:	d405      	bmi.n	800cf66 <_vfiprintf_r+0x2a>
 800cf5a:	89ab      	ldrh	r3, [r5, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d402      	bmi.n	800cf66 <_vfiprintf_r+0x2a>
 800cf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf62:	f7fd fe1a 	bl	800ab9a <__retarget_lock_acquire_recursive>
 800cf66:	89ab      	ldrh	r3, [r5, #12]
 800cf68:	071b      	lsls	r3, r3, #28
 800cf6a:	d501      	bpl.n	800cf70 <_vfiprintf_r+0x34>
 800cf6c:	692b      	ldr	r3, [r5, #16]
 800cf6e:	b99b      	cbnz	r3, 800cf98 <_vfiprintf_r+0x5c>
 800cf70:	4629      	mov	r1, r5
 800cf72:	4630      	mov	r0, r6
 800cf74:	f000 f93a 	bl	800d1ec <__swsetup_r>
 800cf78:	b170      	cbz	r0, 800cf98 <_vfiprintf_r+0x5c>
 800cf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf7c:	07dc      	lsls	r4, r3, #31
 800cf7e:	d504      	bpl.n	800cf8a <_vfiprintf_r+0x4e>
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295
 800cf84:	b01d      	add	sp, #116	; 0x74
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	89ab      	ldrh	r3, [r5, #12]
 800cf8c:	0598      	lsls	r0, r3, #22
 800cf8e:	d4f7      	bmi.n	800cf80 <_vfiprintf_r+0x44>
 800cf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf92:	f7fd fe03 	bl	800ab9c <__retarget_lock_release_recursive>
 800cf96:	e7f3      	b.n	800cf80 <_vfiprintf_r+0x44>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf9c:	2320      	movs	r3, #32
 800cf9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa6:	2330      	movs	r3, #48	; 0x30
 800cfa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d15c <_vfiprintf_r+0x220>
 800cfac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfb0:	f04f 0901 	mov.w	r9, #1
 800cfb4:	4623      	mov	r3, r4
 800cfb6:	469a      	mov	sl, r3
 800cfb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfbc:	b10a      	cbz	r2, 800cfc2 <_vfiprintf_r+0x86>
 800cfbe:	2a25      	cmp	r2, #37	; 0x25
 800cfc0:	d1f9      	bne.n	800cfb6 <_vfiprintf_r+0x7a>
 800cfc2:	ebba 0b04 	subs.w	fp, sl, r4
 800cfc6:	d00b      	beq.n	800cfe0 <_vfiprintf_r+0xa4>
 800cfc8:	465b      	mov	r3, fp
 800cfca:	4622      	mov	r2, r4
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f7ff ffa1 	bl	800cf16 <__sfputs_r>
 800cfd4:	3001      	adds	r0, #1
 800cfd6:	f000 80a9 	beq.w	800d12c <_vfiprintf_r+0x1f0>
 800cfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfdc:	445a      	add	r2, fp
 800cfde:	9209      	str	r2, [sp, #36]	; 0x24
 800cfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 80a1 	beq.w	800d12c <_vfiprintf_r+0x1f0>
 800cfea:	2300      	movs	r3, #0
 800cfec:	f04f 32ff 	mov.w	r2, #4294967295
 800cff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cff4:	f10a 0a01 	add.w	sl, sl, #1
 800cff8:	9304      	str	r3, [sp, #16]
 800cffa:	9307      	str	r3, [sp, #28]
 800cffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d000:	931a      	str	r3, [sp, #104]	; 0x68
 800d002:	4654      	mov	r4, sl
 800d004:	2205      	movs	r2, #5
 800d006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00a:	4854      	ldr	r0, [pc, #336]	; (800d15c <_vfiprintf_r+0x220>)
 800d00c:	f7f3 f8e0 	bl	80001d0 <memchr>
 800d010:	9a04      	ldr	r2, [sp, #16]
 800d012:	b9d8      	cbnz	r0, 800d04c <_vfiprintf_r+0x110>
 800d014:	06d1      	lsls	r1, r2, #27
 800d016:	bf44      	itt	mi
 800d018:	2320      	movmi	r3, #32
 800d01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d01e:	0713      	lsls	r3, r2, #28
 800d020:	bf44      	itt	mi
 800d022:	232b      	movmi	r3, #43	; 0x2b
 800d024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d028:	f89a 3000 	ldrb.w	r3, [sl]
 800d02c:	2b2a      	cmp	r3, #42	; 0x2a
 800d02e:	d015      	beq.n	800d05c <_vfiprintf_r+0x120>
 800d030:	9a07      	ldr	r2, [sp, #28]
 800d032:	4654      	mov	r4, sl
 800d034:	2000      	movs	r0, #0
 800d036:	f04f 0c0a 	mov.w	ip, #10
 800d03a:	4621      	mov	r1, r4
 800d03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d040:	3b30      	subs	r3, #48	; 0x30
 800d042:	2b09      	cmp	r3, #9
 800d044:	d94d      	bls.n	800d0e2 <_vfiprintf_r+0x1a6>
 800d046:	b1b0      	cbz	r0, 800d076 <_vfiprintf_r+0x13a>
 800d048:	9207      	str	r2, [sp, #28]
 800d04a:	e014      	b.n	800d076 <_vfiprintf_r+0x13a>
 800d04c:	eba0 0308 	sub.w	r3, r0, r8
 800d050:	fa09 f303 	lsl.w	r3, r9, r3
 800d054:	4313      	orrs	r3, r2
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	46a2      	mov	sl, r4
 800d05a:	e7d2      	b.n	800d002 <_vfiprintf_r+0xc6>
 800d05c:	9b03      	ldr	r3, [sp, #12]
 800d05e:	1d19      	adds	r1, r3, #4
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	9103      	str	r1, [sp, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfbb      	ittet	lt
 800d068:	425b      	neglt	r3, r3
 800d06a:	f042 0202 	orrlt.w	r2, r2, #2
 800d06e:	9307      	strge	r3, [sp, #28]
 800d070:	9307      	strlt	r3, [sp, #28]
 800d072:	bfb8      	it	lt
 800d074:	9204      	strlt	r2, [sp, #16]
 800d076:	7823      	ldrb	r3, [r4, #0]
 800d078:	2b2e      	cmp	r3, #46	; 0x2e
 800d07a:	d10c      	bne.n	800d096 <_vfiprintf_r+0x15a>
 800d07c:	7863      	ldrb	r3, [r4, #1]
 800d07e:	2b2a      	cmp	r3, #42	; 0x2a
 800d080:	d134      	bne.n	800d0ec <_vfiprintf_r+0x1b0>
 800d082:	9b03      	ldr	r3, [sp, #12]
 800d084:	1d1a      	adds	r2, r3, #4
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	9203      	str	r2, [sp, #12]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	bfb8      	it	lt
 800d08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d092:	3402      	adds	r4, #2
 800d094:	9305      	str	r3, [sp, #20]
 800d096:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d16c <_vfiprintf_r+0x230>
 800d09a:	7821      	ldrb	r1, [r4, #0]
 800d09c:	2203      	movs	r2, #3
 800d09e:	4650      	mov	r0, sl
 800d0a0:	f7f3 f896 	bl	80001d0 <memchr>
 800d0a4:	b138      	cbz	r0, 800d0b6 <_vfiprintf_r+0x17a>
 800d0a6:	9b04      	ldr	r3, [sp, #16]
 800d0a8:	eba0 000a 	sub.w	r0, r0, sl
 800d0ac:	2240      	movs	r2, #64	; 0x40
 800d0ae:	4082      	lsls	r2, r0
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	3401      	adds	r4, #1
 800d0b4:	9304      	str	r3, [sp, #16]
 800d0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ba:	4829      	ldr	r0, [pc, #164]	; (800d160 <_vfiprintf_r+0x224>)
 800d0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0c0:	2206      	movs	r2, #6
 800d0c2:	f7f3 f885 	bl	80001d0 <memchr>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d03f      	beq.n	800d14a <_vfiprintf_r+0x20e>
 800d0ca:	4b26      	ldr	r3, [pc, #152]	; (800d164 <_vfiprintf_r+0x228>)
 800d0cc:	bb1b      	cbnz	r3, 800d116 <_vfiprintf_r+0x1da>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	3307      	adds	r3, #7
 800d0d2:	f023 0307 	bic.w	r3, r3, #7
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	9303      	str	r3, [sp, #12]
 800d0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0dc:	443b      	add	r3, r7
 800d0de:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e0:	e768      	b.n	800cfb4 <_vfiprintf_r+0x78>
 800d0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	e7a6      	b.n	800d03a <_vfiprintf_r+0xfe>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	3401      	adds	r4, #1
 800d0f0:	9305      	str	r3, [sp, #20]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f04f 0c0a 	mov.w	ip, #10
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0fe:	3a30      	subs	r2, #48	; 0x30
 800d100:	2a09      	cmp	r2, #9
 800d102:	d903      	bls.n	800d10c <_vfiprintf_r+0x1d0>
 800d104:	2b00      	cmp	r3, #0
 800d106:	d0c6      	beq.n	800d096 <_vfiprintf_r+0x15a>
 800d108:	9105      	str	r1, [sp, #20]
 800d10a:	e7c4      	b.n	800d096 <_vfiprintf_r+0x15a>
 800d10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d110:	4604      	mov	r4, r0
 800d112:	2301      	movs	r3, #1
 800d114:	e7f0      	b.n	800d0f8 <_vfiprintf_r+0x1bc>
 800d116:	ab03      	add	r3, sp, #12
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	462a      	mov	r2, r5
 800d11c:	4b12      	ldr	r3, [pc, #72]	; (800d168 <_vfiprintf_r+0x22c>)
 800d11e:	a904      	add	r1, sp, #16
 800d120:	4630      	mov	r0, r6
 800d122:	f7fc fced 	bl	8009b00 <_printf_float>
 800d126:	4607      	mov	r7, r0
 800d128:	1c78      	adds	r0, r7, #1
 800d12a:	d1d6      	bne.n	800d0da <_vfiprintf_r+0x19e>
 800d12c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d12e:	07d9      	lsls	r1, r3, #31
 800d130:	d405      	bmi.n	800d13e <_vfiprintf_r+0x202>
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	059a      	lsls	r2, r3, #22
 800d136:	d402      	bmi.n	800d13e <_vfiprintf_r+0x202>
 800d138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d13a:	f7fd fd2f 	bl	800ab9c <__retarget_lock_release_recursive>
 800d13e:	89ab      	ldrh	r3, [r5, #12]
 800d140:	065b      	lsls	r3, r3, #25
 800d142:	f53f af1d 	bmi.w	800cf80 <_vfiprintf_r+0x44>
 800d146:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d148:	e71c      	b.n	800cf84 <_vfiprintf_r+0x48>
 800d14a:	ab03      	add	r3, sp, #12
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	462a      	mov	r2, r5
 800d150:	4b05      	ldr	r3, [pc, #20]	; (800d168 <_vfiprintf_r+0x22c>)
 800d152:	a904      	add	r1, sp, #16
 800d154:	4630      	mov	r0, r6
 800d156:	f7fc ff77 	bl	800a048 <_printf_i>
 800d15a:	e7e4      	b.n	800d126 <_vfiprintf_r+0x1ea>
 800d15c:	0800db4c 	.word	0x0800db4c
 800d160:	0800db56 	.word	0x0800db56
 800d164:	08009b01 	.word	0x08009b01
 800d168:	0800cf17 	.word	0x0800cf17
 800d16c:	0800db52 	.word	0x0800db52

0800d170 <__swbuf_r>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	460e      	mov	r6, r1
 800d174:	4614      	mov	r4, r2
 800d176:	4605      	mov	r5, r0
 800d178:	b118      	cbz	r0, 800d182 <__swbuf_r+0x12>
 800d17a:	6a03      	ldr	r3, [r0, #32]
 800d17c:	b90b      	cbnz	r3, 800d182 <__swbuf_r+0x12>
 800d17e:	f7fd fb21 	bl	800a7c4 <__sinit>
 800d182:	69a3      	ldr	r3, [r4, #24]
 800d184:	60a3      	str	r3, [r4, #8]
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	071a      	lsls	r2, r3, #28
 800d18a:	d525      	bpl.n	800d1d8 <__swbuf_r+0x68>
 800d18c:	6923      	ldr	r3, [r4, #16]
 800d18e:	b31b      	cbz	r3, 800d1d8 <__swbuf_r+0x68>
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	6922      	ldr	r2, [r4, #16]
 800d194:	1a98      	subs	r0, r3, r2
 800d196:	6963      	ldr	r3, [r4, #20]
 800d198:	b2f6      	uxtb	r6, r6
 800d19a:	4283      	cmp	r3, r0
 800d19c:	4637      	mov	r7, r6
 800d19e:	dc04      	bgt.n	800d1aa <__swbuf_r+0x3a>
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f7ff fe00 	bl	800cda8 <_fflush_r>
 800d1a8:	b9e0      	cbnz	r0, 800d1e4 <__swbuf_r+0x74>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	60a3      	str	r3, [r4, #8]
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	6022      	str	r2, [r4, #0]
 800d1b6:	701e      	strb	r6, [r3, #0]
 800d1b8:	6962      	ldr	r2, [r4, #20]
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d004      	beq.n	800d1ca <__swbuf_r+0x5a>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	07db      	lsls	r3, r3, #31
 800d1c4:	d506      	bpl.n	800d1d4 <__swbuf_r+0x64>
 800d1c6:	2e0a      	cmp	r6, #10
 800d1c8:	d104      	bne.n	800d1d4 <__swbuf_r+0x64>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f7ff fdeb 	bl	800cda8 <_fflush_r>
 800d1d2:	b938      	cbnz	r0, 800d1e4 <__swbuf_r+0x74>
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d8:	4621      	mov	r1, r4
 800d1da:	4628      	mov	r0, r5
 800d1dc:	f000 f806 	bl	800d1ec <__swsetup_r>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d0d5      	beq.n	800d190 <__swbuf_r+0x20>
 800d1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800d1e8:	e7f4      	b.n	800d1d4 <__swbuf_r+0x64>
	...

0800d1ec <__swsetup_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4b2a      	ldr	r3, [pc, #168]	; (800d298 <__swsetup_r+0xac>)
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	6818      	ldr	r0, [r3, #0]
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	b118      	cbz	r0, 800d200 <__swsetup_r+0x14>
 800d1f8:	6a03      	ldr	r3, [r0, #32]
 800d1fa:	b90b      	cbnz	r3, 800d200 <__swsetup_r+0x14>
 800d1fc:	f7fd fae2 	bl	800a7c4 <__sinit>
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d206:	0718      	lsls	r0, r3, #28
 800d208:	d422      	bmi.n	800d250 <__swsetup_r+0x64>
 800d20a:	06d9      	lsls	r1, r3, #27
 800d20c:	d407      	bmi.n	800d21e <__swsetup_r+0x32>
 800d20e:	2309      	movs	r3, #9
 800d210:	602b      	str	r3, [r5, #0]
 800d212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	f04f 30ff 	mov.w	r0, #4294967295
 800d21c:	e034      	b.n	800d288 <__swsetup_r+0x9c>
 800d21e:	0758      	lsls	r0, r3, #29
 800d220:	d512      	bpl.n	800d248 <__swsetup_r+0x5c>
 800d222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d224:	b141      	cbz	r1, 800d238 <__swsetup_r+0x4c>
 800d226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d22a:	4299      	cmp	r1, r3
 800d22c:	d002      	beq.n	800d234 <__swsetup_r+0x48>
 800d22e:	4628      	mov	r0, r5
 800d230:	f7fe fb6c 	bl	800b90c <_free_r>
 800d234:	2300      	movs	r3, #0
 800d236:	6363      	str	r3, [r4, #52]	; 0x34
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	2300      	movs	r3, #0
 800d242:	6063      	str	r3, [r4, #4]
 800d244:	6923      	ldr	r3, [r4, #16]
 800d246:	6023      	str	r3, [r4, #0]
 800d248:	89a3      	ldrh	r3, [r4, #12]
 800d24a:	f043 0308 	orr.w	r3, r3, #8
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	b94b      	cbnz	r3, 800d268 <__swsetup_r+0x7c>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d25e:	d003      	beq.n	800d268 <__swsetup_r+0x7c>
 800d260:	4621      	mov	r1, r4
 800d262:	4628      	mov	r0, r5
 800d264:	f000 f88c 	bl	800d380 <__smakebuf_r>
 800d268:	89a0      	ldrh	r0, [r4, #12]
 800d26a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d26e:	f010 0301 	ands.w	r3, r0, #1
 800d272:	d00a      	beq.n	800d28a <__swsetup_r+0x9e>
 800d274:	2300      	movs	r3, #0
 800d276:	60a3      	str	r3, [r4, #8]
 800d278:	6963      	ldr	r3, [r4, #20]
 800d27a:	425b      	negs	r3, r3
 800d27c:	61a3      	str	r3, [r4, #24]
 800d27e:	6923      	ldr	r3, [r4, #16]
 800d280:	b943      	cbnz	r3, 800d294 <__swsetup_r+0xa8>
 800d282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d286:	d1c4      	bne.n	800d212 <__swsetup_r+0x26>
 800d288:	bd38      	pop	{r3, r4, r5, pc}
 800d28a:	0781      	lsls	r1, r0, #30
 800d28c:	bf58      	it	pl
 800d28e:	6963      	ldrpl	r3, [r4, #20]
 800d290:	60a3      	str	r3, [r4, #8]
 800d292:	e7f4      	b.n	800d27e <__swsetup_r+0x92>
 800d294:	2000      	movs	r0, #0
 800d296:	e7f7      	b.n	800d288 <__swsetup_r+0x9c>
 800d298:	200001d4 	.word	0x200001d4

0800d29c <_raise_r>:
 800d29c:	291f      	cmp	r1, #31
 800d29e:	b538      	push	{r3, r4, r5, lr}
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	460d      	mov	r5, r1
 800d2a4:	d904      	bls.n	800d2b0 <_raise_r+0x14>
 800d2a6:	2316      	movs	r3, #22
 800d2a8:	6003      	str	r3, [r0, #0]
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	bd38      	pop	{r3, r4, r5, pc}
 800d2b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d2b2:	b112      	cbz	r2, 800d2ba <_raise_r+0x1e>
 800d2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2b8:	b94b      	cbnz	r3, 800d2ce <_raise_r+0x32>
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f000 f830 	bl	800d320 <_getpid_r>
 800d2c0:	462a      	mov	r2, r5
 800d2c2:	4601      	mov	r1, r0
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2ca:	f000 b817 	b.w	800d2fc <_kill_r>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d00a      	beq.n	800d2e8 <_raise_r+0x4c>
 800d2d2:	1c59      	adds	r1, r3, #1
 800d2d4:	d103      	bne.n	800d2de <_raise_r+0x42>
 800d2d6:	2316      	movs	r3, #22
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	2001      	movs	r0, #1
 800d2dc:	e7e7      	b.n	800d2ae <_raise_r+0x12>
 800d2de:	2400      	movs	r4, #0
 800d2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	4798      	blx	r3
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e7e0      	b.n	800d2ae <_raise_r+0x12>

0800d2ec <raise>:
 800d2ec:	4b02      	ldr	r3, [pc, #8]	; (800d2f8 <raise+0xc>)
 800d2ee:	4601      	mov	r1, r0
 800d2f0:	6818      	ldr	r0, [r3, #0]
 800d2f2:	f7ff bfd3 	b.w	800d29c <_raise_r>
 800d2f6:	bf00      	nop
 800d2f8:	200001d4 	.word	0x200001d4

0800d2fc <_kill_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_kill_r+0x20>)
 800d300:	2300      	movs	r3, #0
 800d302:	4604      	mov	r4, r0
 800d304:	4608      	mov	r0, r1
 800d306:	4611      	mov	r1, r2
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	f7f4 fce1 	bl	8001cd0 <_kill>
 800d30e:	1c43      	adds	r3, r0, #1
 800d310:	d102      	bne.n	800d318 <_kill_r+0x1c>
 800d312:	682b      	ldr	r3, [r5, #0]
 800d314:	b103      	cbz	r3, 800d318 <_kill_r+0x1c>
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	bd38      	pop	{r3, r4, r5, pc}
 800d31a:	bf00      	nop
 800d31c:	20003c38 	.word	0x20003c38

0800d320 <_getpid_r>:
 800d320:	f7f4 bcce 	b.w	8001cc0 <_getpid>

0800d324 <_malloc_usable_size_r>:
 800d324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d328:	1f18      	subs	r0, r3, #4
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	bfbc      	itt	lt
 800d32e:	580b      	ldrlt	r3, [r1, r0]
 800d330:	18c0      	addlt	r0, r0, r3
 800d332:	4770      	bx	lr

0800d334 <__swhatbuf_r>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	460c      	mov	r4, r1
 800d338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33c:	2900      	cmp	r1, #0
 800d33e:	b096      	sub	sp, #88	; 0x58
 800d340:	4615      	mov	r5, r2
 800d342:	461e      	mov	r6, r3
 800d344:	da0d      	bge.n	800d362 <__swhatbuf_r+0x2e>
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d34c:	f04f 0100 	mov.w	r1, #0
 800d350:	bf0c      	ite	eq
 800d352:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d356:	2340      	movne	r3, #64	; 0x40
 800d358:	2000      	movs	r0, #0
 800d35a:	6031      	str	r1, [r6, #0]
 800d35c:	602b      	str	r3, [r5, #0]
 800d35e:	b016      	add	sp, #88	; 0x58
 800d360:	bd70      	pop	{r4, r5, r6, pc}
 800d362:	466a      	mov	r2, sp
 800d364:	f000 f848 	bl	800d3f8 <_fstat_r>
 800d368:	2800      	cmp	r0, #0
 800d36a:	dbec      	blt.n	800d346 <__swhatbuf_r+0x12>
 800d36c:	9901      	ldr	r1, [sp, #4]
 800d36e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d372:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d376:	4259      	negs	r1, r3
 800d378:	4159      	adcs	r1, r3
 800d37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d37e:	e7eb      	b.n	800d358 <__swhatbuf_r+0x24>

0800d380 <__smakebuf_r>:
 800d380:	898b      	ldrh	r3, [r1, #12]
 800d382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d384:	079d      	lsls	r5, r3, #30
 800d386:	4606      	mov	r6, r0
 800d388:	460c      	mov	r4, r1
 800d38a:	d507      	bpl.n	800d39c <__smakebuf_r+0x1c>
 800d38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	6123      	str	r3, [r4, #16]
 800d394:	2301      	movs	r3, #1
 800d396:	6163      	str	r3, [r4, #20]
 800d398:	b002      	add	sp, #8
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	ab01      	add	r3, sp, #4
 800d39e:	466a      	mov	r2, sp
 800d3a0:	f7ff ffc8 	bl	800d334 <__swhatbuf_r>
 800d3a4:	9900      	ldr	r1, [sp, #0]
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7fb fbd1 	bl	8008b50 <_malloc_r>
 800d3ae:	b948      	cbnz	r0, 800d3c4 <__smakebuf_r+0x44>
 800d3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b4:	059a      	lsls	r2, r3, #22
 800d3b6:	d4ef      	bmi.n	800d398 <__smakebuf_r+0x18>
 800d3b8:	f023 0303 	bic.w	r3, r3, #3
 800d3bc:	f043 0302 	orr.w	r3, r3, #2
 800d3c0:	81a3      	strh	r3, [r4, #12]
 800d3c2:	e7e3      	b.n	800d38c <__smakebuf_r+0xc>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	6020      	str	r0, [r4, #0]
 800d3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	9b00      	ldr	r3, [sp, #0]
 800d3d0:	6163      	str	r3, [r4, #20]
 800d3d2:	9b01      	ldr	r3, [sp, #4]
 800d3d4:	6120      	str	r0, [r4, #16]
 800d3d6:	b15b      	cbz	r3, 800d3f0 <__smakebuf_r+0x70>
 800d3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f000 f81d 	bl	800d41c <_isatty_r>
 800d3e2:	b128      	cbz	r0, 800d3f0 <__smakebuf_r+0x70>
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	f023 0303 	bic.w	r3, r3, #3
 800d3ea:	f043 0301 	orr.w	r3, r3, #1
 800d3ee:	81a3      	strh	r3, [r4, #12]
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	431d      	orrs	r5, r3
 800d3f4:	81a5      	strh	r5, [r4, #12]
 800d3f6:	e7cf      	b.n	800d398 <__smakebuf_r+0x18>

0800d3f8 <_fstat_r>:
 800d3f8:	b538      	push	{r3, r4, r5, lr}
 800d3fa:	4d07      	ldr	r5, [pc, #28]	; (800d418 <_fstat_r+0x20>)
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	4604      	mov	r4, r0
 800d400:	4608      	mov	r0, r1
 800d402:	4611      	mov	r1, r2
 800d404:	602b      	str	r3, [r5, #0]
 800d406:	f7f4 fcc2 	bl	8001d8e <_fstat>
 800d40a:	1c43      	adds	r3, r0, #1
 800d40c:	d102      	bne.n	800d414 <_fstat_r+0x1c>
 800d40e:	682b      	ldr	r3, [r5, #0]
 800d410:	b103      	cbz	r3, 800d414 <_fstat_r+0x1c>
 800d412:	6023      	str	r3, [r4, #0]
 800d414:	bd38      	pop	{r3, r4, r5, pc}
 800d416:	bf00      	nop
 800d418:	20003c38 	.word	0x20003c38

0800d41c <_isatty_r>:
 800d41c:	b538      	push	{r3, r4, r5, lr}
 800d41e:	4d06      	ldr	r5, [pc, #24]	; (800d438 <_isatty_r+0x1c>)
 800d420:	2300      	movs	r3, #0
 800d422:	4604      	mov	r4, r0
 800d424:	4608      	mov	r0, r1
 800d426:	602b      	str	r3, [r5, #0]
 800d428:	f7f4 fcc1 	bl	8001dae <_isatty>
 800d42c:	1c43      	adds	r3, r0, #1
 800d42e:	d102      	bne.n	800d436 <_isatty_r+0x1a>
 800d430:	682b      	ldr	r3, [r5, #0]
 800d432:	b103      	cbz	r3, 800d436 <_isatty_r+0x1a>
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	20003c38 	.word	0x20003c38

0800d43c <_init>:
 800d43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43e:	bf00      	nop
 800d440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d442:	bc08      	pop	{r3}
 800d444:	469e      	mov	lr, r3
 800d446:	4770      	bx	lr

0800d448 <_fini>:
 800d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44a:	bf00      	nop
 800d44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44e:	bc08      	pop	{r3}
 800d450:	469e      	mov	lr, r3
 800d452:	4770      	bx	lr
