
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000010  08007058  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b18  08007058  00021b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aeba  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003915  00000000  00000000  0003af3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001840  00000000  00000000  0003e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012dd  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003728  00000000  00000000  00041375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b179  00000000  00000000  00044a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe791  00000000  00000000  0005fc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000066c8  00000000  00000000  0015e3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00164a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f30 	.word	0x08006f30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08006f30 	.word	0x08006f30

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc62 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f846 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9da 	bl	8000890 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 f9b2 	bl	8000844 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f980 	bl	80007e4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004e4:	f000 f890 	bl	8000608 <MX_DAC1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f8e0 	bl	80006ac <MX_TIM2_Init>
  MX_TIM5_Init();
 80004ec:	f000 f92c 	bl	8000748 <MX_TIM5_Init>
  MX_RNG_Init();
 80004f0:	f000 f8c8 	bl	8000684 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0x70>)
 80004f6:	f002 fea9 	bl	800324c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 80004fa:	4811      	ldr	r0, [pc, #68]	; (8000540 <main+0x74>)
 80004fc:	f002 fea6 	bl	800324c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 fee2 	bl	80042c8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandQueue_attributes);
 8000504:	4a0f      	ldr	r2, [pc, #60]	; (8000544 <main+0x78>)
 8000506:	2102      	movs	r1, #2
 8000508:	2010      	movs	r0, #16
 800050a:	f003 ffd4 	bl	80044b6 <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <main+0x7c>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProcessCommand */
  ProcessCommandHandle = osThreadNew(StartProcessCommand, NULL, &ProcessCommand_attributes);
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <main+0x80>)
 8000516:	2100      	movs	r1, #0
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <main+0x84>)
 800051a:	f003 ff1f 	bl	800435c <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <main+0x88>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of RecieveCommand */
  RecieveCommandHandle = osThreadNew(StartRecieveCommand, NULL, &RecieveCommand_attributes);
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <main+0x8c>)
 8000526:	2100      	movs	r1, #0
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x90>)
 800052a:	f003 ff17 	bl	800435c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <main+0x94>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f003 feec 	bl	8004310 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x6c>
 800053a:	bf00      	nop
 800053c:	200000e0 	.word	0x200000e0
 8000540:	2000012c 	.word	0x2000012c
 8000544:	08006fd8 	.word	0x08006fd8
 8000548:	20000208 	.word	0x20000208
 800054c:	08006f90 	.word	0x08006f90
 8000550:	08000935 	.word	0x08000935
 8000554:	20000200 	.word	0x20000200
 8000558:	08006fb4 	.word	0x08006fb4
 800055c:	08000945 	.word	0x08000945
 8000560:	20000204 	.word	0x20000204

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b096      	sub	sp, #88	; 0x58
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2244      	movs	r2, #68	; 0x44
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f006 fca2 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	463b      	mov	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000586:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058a:	f001 fa1f 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000594:	f000 f9de 	bl	8000954 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a2:	2310      	movs	r3, #16
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a6:	2302      	movs	r3, #2
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005aa:	2302      	movs	r3, #2
 80005ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ae:	2301      	movs	r3, #1
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005b2:	230a      	movs	r3, #10
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fa56 	bl	8001a78 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d2:	f000 f9bf 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fe1e 	bl	8002230 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005fa:	f000 f9ab 	bl	8000954 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3758      	adds	r7, #88	; 0x58
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2224      	movs	r2, #36	; 0x24
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f006 fc51 	bl	8006ebc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_DAC1_Init+0x74>)
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <MX_DAC1_Init+0x78>)
 800061e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <MX_DAC1_Init+0x74>)
 8000622:	f000 fd6a 	bl	80010fa <HAL_DAC_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800062c:	f000 f992 	bl	8000954 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000634:	2324      	movs	r3, #36	; 0x24
 8000636:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_DAC1_Init+0x74>)
 800064c:	f000 fd77 	bl	800113e <HAL_DAC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000656:	f000 f97d 	bl	8000954 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 800065a:	231c      	movs	r3, #28
 800065c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2210      	movs	r2, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_DAC1_Init+0x74>)
 8000666:	f000 fd6a 	bl	800113e <HAL_DAC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8000670:	f000 f970 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000002c 	.word	0x2000002c
 8000680:	40007400 	.word	0x40007400

08000684 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_RNG_Init+0x20>)
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <MX_RNG_Init+0x24>)
 800068c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_RNG_Init+0x20>)
 8000690:	f002 fcae 	bl	8002ff0 <HAL_RNG_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800069a:	f000 f95b 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000d0 	.word	0x200000d0
 80006a8:	50060800 	.word	0x50060800

080006ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_TIM2_Init+0x98>)
 80006cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_TIM2_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_TIM2_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_TIM2_Init+0x98>)
 80006e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_TIM2_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_TIM2_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f2:	4814      	ldr	r0, [pc, #80]	; (8000744 <MX_TIM2_Init+0x98>)
 80006f4:	f002 fd52 	bl	800319c <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006fe:	f000 f929 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_TIM2_Init+0x98>)
 8000710:	f002 fe04 	bl	800331c <HAL_TIM_ConfigClockSource>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800071a:	f000 f91b 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_TIM2_Init+0x98>)
 800072c:	f002 fff4 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000736:	f000 f90d 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000e0 	.word	0x200000e0

08000748 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_TIM5_Init+0x94>)
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_TIM5_Init+0x98>)
 800076a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_TIM5_Init+0x94>)
 800076e:	2200      	movs	r2, #0
 8000770:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM5_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_TIM5_Init+0x94>)
 800077a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_TIM5_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM5_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <MX_TIM5_Init+0x94>)
 800078e:	f002 fd05 	bl	800319c <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000798:	f000 f8dc 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM5_Init+0x94>)
 80007aa:	f002 fdb7 	bl	800331c <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 f8ce 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_TIM5_Init+0x94>)
 80007c6:	f002 ffa7 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f8c0 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000012c 	.word	0x2000012c
 80007e0:	40000c00 	.word	0x40000c00

080007e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART2_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000828:	f002 fffe 	bl	8003828 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f88f 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000178 	.word	0x20000178
 8000840:	40004400 	.word	0x40004400

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_DMA_Init+0x48>)
 800084c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <MX_DMA_Init+0x48>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6493      	str	r3, [r2, #72]	; 0x48
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_DMA_Init+0x48>)
 8000858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2105      	movs	r1, #5
 8000866:	200d      	movs	r0, #13
 8000868:	f000 fc11 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800086c:	200d      	movs	r0, #13
 800086e:	f000 fc2a 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2105      	movs	r1, #5
 8000876:	200e      	movs	r0, #14
 8000878:	f000 fc09 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800087c:	200e      	movs	r0, #14
 800087e:	f000 fc22 	bl	80010c6 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_GPIO_Init+0x9c>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a20      	ldr	r2, [pc, #128]	; (800092c <MX_GPIO_Init+0x9c>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0x9c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_GPIO_Init+0x9c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a1a      	ldr	r2, [pc, #104]	; (800092c <MX_GPIO_Init+0x9c>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_GPIO_Init+0x9c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0x9c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <MX_GPIO_Init+0x9c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_GPIO_Init+0x9c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_GPIO_Init+0x9c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <MX_GPIO_Init+0x9c>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_GPIO_Init+0x9c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xa0>)
 800091e:	f000 fe9d 	bl	800165c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <StartProcessCommand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProcessCommand */
void StartProcessCommand(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f003 fd9f 	bl	8004480 <osDelay>
 8000942:	e7fb      	b.n	800093c <StartProcessCommand+0x8>

08000944 <StartRecieveCommand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecieveCommand */
void StartRecieveCommand(void *argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRecieveCommand */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f003 fd97 	bl	8004480 <osDelay>
 8000952:	e7fb      	b.n	800094c <StartRecieveCommand+0x8>

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <HAL_MspInit+0x4c>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <HAL_MspInit+0x4c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_MspInit+0x4c>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_MspInit+0x4c>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_MspInit+0x4c>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 fb76 	bl	800108e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <HAL_DAC_MspInit+0x120>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d17a      	bne.n	8000ac8 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009dc:	6593      	str	r3, [r2, #88]	; 0x58
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a39      	ldr	r2, [pc, #228]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <HAL_DAC_MspInit+0x124>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a02:	2330      	movs	r3, #48	; 0x30
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fe20 	bl	800165c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <HAL_DAC_MspInit+0x12c>)
 8000a20:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a24:	2206      	movs	r2, #6
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a28:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a36:	2280      	movs	r2, #128	; 0x80
 8000a38:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a40:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a48:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000a56:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a58:	f000 fc98 	bl	800138c <HAL_DMA_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000a62:	f7ff ff77 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_DAC_MspInit+0x128>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a74:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_DAC_MspInit+0x134>)
 8000a76:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a96:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000aae:	f000 fc6d 	bl	800138c <HAL_DMA_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8000ab8:	f7ff ff4c 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_DAC_MspInit+0x130>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40007400 	.word	0x40007400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	20000040 	.word	0x20000040
 8000adc:	40020030 	.word	0x40020030
 8000ae0:	20000088 	.word	0x20000088
 8000ae4:	40020044 	.word	0x40020044

08000ae8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0a6      	sub	sp, #152	; 0x98
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	2288      	movs	r2, #136	; 0x88
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f006 f9df 	bl	8006ebc <memset>
  if(hrng->Instance==RNG)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_RNG_MspInit+0x90>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d133      	bne.n	8000b70 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b0c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b22:	2307      	movs	r3, #7
 8000b24:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000b2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fd9d 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8000b44:	f7ff ff06 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_RNG_MspInit+0x94>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <HAL_RNG_MspInit+0x94>)
 8000b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_RNG_MspInit+0x94>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2105      	movs	r1, #5
 8000b64:	2050      	movs	r0, #80	; 0x50
 8000b66:	f000 fa92 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8000b6a:	2050      	movs	r0, #80	; 0x50
 8000b6c:	f000 faab 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000b70:	bf00      	nop
 8000b72:	3798      	adds	r7, #152	; 0x98
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	50060800 	.word	0x50060800
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d10c      	bne.n	8000bac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000baa:	e010      	b.n	8000bce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_TIM_Base_MspInit+0x60>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10b      	bne.n	8000bce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_TIM_Base_MspInit+0x5c>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40000c00 	.word	0x40000c00

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ac      	sub	sp, #176	; 0xb0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2288      	movs	r2, #136	; 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 f959 	bl	8006ebc <memset>
  if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_UART_MspInit+0xb0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d13b      	bne.n	8000c8c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fd29 	bl	8002678 <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff fe92 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0xb4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c60:	230c      	movs	r3, #12
 8000c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fce8 	bl	800165c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	37b0      	adds	r7, #176	; 0xb0
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40021000 	.word	0x40021000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8c0 	bl	8000e50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cd0:	f005 f890 	bl	8005df4 <xTaskGetSchedulerState>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d001      	beq.n	8000cde <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cda:	f005 fe75 	bl	80069c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cea:	f000 fc07 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000040 	.word	0x20000040

08000cf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA1_Channel4_IRQHandler+0x10>)
 8000cfe:	f000 fbfd 	bl	80014fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000088 	.word	0x20000088

08000d0c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <RNG_IRQHandler+0x10>)
 8000d12:	f002 f9c4 	bl	800309e <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000d0 	.word	0x200000d0

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f006 f8ab 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d76:	f7ff fba9 	bl	80004cc <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d88:	08007048 	.word	0x08007048
  ldr r2, =_sbss
 8000d8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d90:	20001b18 	.word	0x20001b18

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_Init+0x3c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_Init+0x3c>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 f962 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db4:	200f      	movs	r0, #15
 8000db6:	f000 f80f 	bl	8000dd8 <HAL_InitTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	e001      	b.n	8000dca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc6:	f7ff fdcb 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_InitTick+0x6c>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d023      	beq.n	8000e34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_InitTick+0x70>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_InitTick+0x6c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f96d 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10f      	bne.n	8000e2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d809      	bhi.n	8000e28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f000 f937 	bl	800108e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_InitTick+0x74>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e007      	b.n	8000e38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e004      	b.n	8000e38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e001      	b.n	8000e38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	2000020c 	.word	0x2000020c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000020c 	.word	0x2000020c

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff3e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff31 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa2 	bl	8001034 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e014      	b.n	8001136 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	791b      	ldrb	r3, [r3, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fc47 	bl	80009b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b088      	sub	sp, #32
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	795b      	ldrb	r3, [r3, #5]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d101      	bne.n	800115a <HAL_DAC_ConfigChannel+0x1c>
 8001156:	2302      	movs	r3, #2
 8001158:	e114      	b.n	8001384 <HAL_DAC_ConfigChannel+0x246>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2201      	movs	r2, #1
 800115e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2202      	movs	r2, #2
 8001164:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b04      	cmp	r3, #4
 800116c:	f040 8081 	bne.w	8001272 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001170:	f7ff fe82 	bl	8000e78 <HAL_GetTick>
 8001174:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d140      	bne.n	80011fe <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800117c:	e018      	b.n	80011b0 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800117e:	f7ff fe7b 	bl	8000e78 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d911      	bls.n	80011b0 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00a      	beq.n	80011b0 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	f043 0208 	orr.w	r2, r3, #8
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2203      	movs	r2, #3
 80011aa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0e9      	b.n	8001384 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1df      	bne.n	800117e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f7ff fe66 	bl	8000e90 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	6992      	ldr	r2, [r2, #24]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
 80011ce:	e023      	b.n	8001218 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80011d0:	f7ff fe52 	bl	8000e78 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d90f      	bls.n	80011fe <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da0a      	bge.n	80011fe <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	f043 0208 	orr.w	r2, r3, #8
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2203      	movs	r2, #3
 80011f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e0c2      	b.n	8001384 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001204:	2b00      	cmp	r3, #0
 8001206:	dbe3      	blt.n	80011d0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff fe41 	bl	8000e90 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	6992      	ldr	r2, [r2, #24]
 8001216:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	ea02 0103 	and.w	r1, r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	69da      	ldr	r2, [r3, #28]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	409a      	lsls	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	21ff      	movs	r1, #255	; 0xff
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	ea02 0103 	and.w	r1, r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d11d      	bne.n	80012b6 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001280:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	221f      	movs	r2, #31
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012bc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2207      	movs	r2, #7
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	431a      	orrs	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6819      	ldr	r1, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	22c0      	movs	r2, #192	; 0xc0
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43da      	mvns	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2200      	movs	r2, #0
 8001380:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e098      	b.n	80014d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_DMA_Init+0x150>)
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d80f      	bhi.n	80013ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b4b      	ldr	r3, [pc, #300]	; (80014e0 <HAL_DMA_Init+0x154>)
 80013b2:	4413      	add	r3, r2
 80013b4:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_DMA_Init+0x158>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_DMA_Init+0x15c>)
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
 80013c8:	e00e      	b.n	80013e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_DMA_Init+0x160>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a43      	ldr	r2, [pc, #268]	; (80014e4 <HAL_DMA_Init+0x158>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	009a      	lsls	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_DMA_Init+0x164>)
 80013e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001402:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001442:	d039      	beq.n	80014b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_DMA_Init+0x15c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d11a      	bne.n	8001484 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_DMA_Init+0x168>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 031c 	and.w	r3, r3, #28
 800145a:	210f      	movs	r1, #15
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <HAL_DMA_Init+0x168>)
 8001464:	4013      	ands	r3, r2
 8001466:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <HAL_DMA_Init+0x168>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	f003 031c 	and.w	r3, r3, #28
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	491d      	ldr	r1, [pc, #116]	; (80014f4 <HAL_DMA_Init+0x168>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
 8001482:	e019      	b.n	80014b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_DMA_Init+0x16c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 031c 	and.w	r3, r3, #28
 8001490:	210f      	movs	r1, #15
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	4917      	ldr	r1, [pc, #92]	; (80014f8 <HAL_DMA_Init+0x16c>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_DMA_Init+0x16c>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6859      	ldr	r1, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f003 031c 	and.w	r3, r3, #28
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	4911      	ldr	r1, [pc, #68]	; (80014f8 <HAL_DMA_Init+0x16c>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40020407 	.word	0x40020407
 80014e0:	bffdfff8 	.word	0xbffdfff8
 80014e4:	cccccccd 	.word	0xcccccccd
 80014e8:	40020000 	.word	0x40020000
 80014ec:	bffdfbf8 	.word	0xbffdfbf8
 80014f0:	40020400 	.word	0x40020400
 80014f4:	400200a8 	.word	0x400200a8
 80014f8:	400204a8 	.word	0x400204a8

080014fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	2204      	movs	r2, #4
 800151e:	409a      	lsls	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d026      	beq.n	8001576 <HAL_DMA_IRQHandler+0x7a>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d021      	beq.n	8001576 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0320 	and.w	r3, r3, #32
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0204 	bic.w	r2, r2, #4
 800154e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 021c 	and.w	r2, r3, #28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2104      	movs	r1, #4
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	2b00      	cmp	r3, #0
 800156a:	d071      	beq.n	8001650 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001574:	e06c      	b.n	8001650 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 031c 	and.w	r3, r3, #28
 800157e:	2202      	movs	r2, #2
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d02e      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xec>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d029      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10b      	bne.n	80015ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 020a 	bic.w	r2, r2, #10
 80015b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f003 021c 	and.w	r2, r3, #28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	2102      	movs	r1, #2
 80015c8:	fa01 f202 	lsl.w	r2, r1, r2
 80015cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d038      	beq.n	8001650 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015e6:	e033      	b.n	8001650 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 031c 	and.w	r3, r3, #28
 80015f0:	2208      	movs	r2, #8
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d02a      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d025      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 021c 	and.w	r2, r3, #28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001644:	2b00      	cmp	r3, #0
 8001646:	d004      	beq.n	8001652 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001650:	bf00      	nop
 8001652:	bf00      	nop
}
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b087      	sub	sp, #28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166a:	e17f      	b.n	800196c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 8171 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	2b01      	cmp	r3, #1
 800168e:	d005      	beq.n	800169c <HAL_GPIO_Init+0x40>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d130      	bne.n	80016fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d2:	2201      	movs	r2, #1
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 0201 	and.w	r2, r3, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b03      	cmp	r3, #3
 8001708:	d118      	bne.n	800173c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80ac 	beq.w	8001966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_GPIO_Init+0x330>)
 8001810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_GPIO_Init+0x330>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6613      	str	r3, [r2, #96]	; 0x60
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_GPIO_Init+0x330>)
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001826:	4a5a      	ldr	r2, [pc, #360]	; (8001990 <HAL_GPIO_Init+0x334>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001850:	d025      	beq.n	800189e <HAL_GPIO_Init+0x242>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_GPIO_Init+0x338>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01f      	beq.n	800189a <HAL_GPIO_Init+0x23e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_GPIO_Init+0x33c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d019      	beq.n	8001896 <HAL_GPIO_Init+0x23a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_GPIO_Init+0x340>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0x236>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x344>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_Init+0x232>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x348>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x34c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_GPIO_Init+0x22a>
 8001882:	2306      	movs	r3, #6
 8001884:	e00c      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001886:	2307      	movs	r3, #7
 8001888:	e00a      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800188e:	2304      	movs	r3, #4
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x244>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	f002 0203 	and.w	r2, r2, #3
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b0:	4937      	ldr	r1, [pc, #220]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e2:	4a32      	ldr	r2, [pc, #200]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_GPIO_Init+0x350>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001936:	4a1d      	ldr	r2, [pc, #116]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x350>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <HAL_GPIO_Init+0x350>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	f47f ae78 	bne.w	800166c <HAL_GPIO_Init+0x10>
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000
 8001994:	48000400 	.word	0x48000400
 8001998:	48000800 	.word	0x48000800
 800199c:	48000c00 	.word	0x48000c00
 80019a0:	48001000 	.word	0x48001000
 80019a4:	48001400 	.word	0x48001400
 80019a8:	48001800 	.word	0x48001800
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019da:	d130      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	d038      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2232      	movs	r2, #50	; 0x32
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a10:	e002      	b.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d102      	bne.n	8001a2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f2      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a38:	d110      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e00f      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	d007      	beq.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a54:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e3ca      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4b97      	ldr	r3, [pc, #604]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a94:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80e4 	beq.w	8001c74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4a>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	f040 808b 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	f040 8087 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ac2:	4b89      	ldr	r3, [pc, #548]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x62>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e3a2      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1a      	ldr	r2, [r3, #32]
 8001ade:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_RCC_OscConfig+0x7c>
 8001aea:	4b7f      	ldr	r3, [pc, #508]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af2:	e005      	b.n	8001b00 <HAL_RCC_OscConfig+0x88>
 8001af4:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	091b      	lsrs	r3, r3, #4
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d223      	bcs.n	8001b4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fd55 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e383      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b18:	4b73      	ldr	r3, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a72      	ldr	r2, [pc, #456]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	496d      	ldr	r1, [pc, #436]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b36:	4b6c      	ldr	r3, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4968      	ldr	r1, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	604b      	str	r3, [r1, #4]
 8001b4a:	e025      	b.n	8001b98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4960      	ldr	r1, [pc, #384]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	495b      	ldr	r1, [pc, #364]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd15 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e343      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 fc4a 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	4950      	ldr	r1, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x274>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_RCC_OscConfig+0x278>)
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f90b 	bl	8000dd8 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d052      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	e327      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d032      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f948 	bl	8000e78 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bec:	f7ff f944 	bl	8000e78 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e310      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a36      	ldr	r2, [pc, #216]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4931      	ldr	r1, [pc, #196]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	492c      	ldr	r1, [pc, #176]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e01a      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4a:	f7ff f915 	bl	8000e78 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c52:	f7ff f911 	bl	8000e78 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e2dd      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1da>
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d074      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x21a>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d10e      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d10b      	bne.n	8001caa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d064      	beq.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d160      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e2ba      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e026      	b.n	8001d10 <HAL_RCC_OscConfig+0x298>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cca:	d115      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x280>
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a02      	ldr	r2, [pc, #8]	; (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x298>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08006ff0 	.word	0x08006ff0
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a9f      	ldr	r2, [pc, #636]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4b9d      	ldr	r3, [pc, #628]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a9c      	ldr	r2, [pc, #624]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff f8ae 	bl	8000e78 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f8aa 	bl	8000e78 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e276      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d32:	4b92      	ldr	r3, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2a8>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f89a 	bl	8000e78 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f896 	bl	8000e78 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e262      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x2d0>
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d060      	beq.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x310>
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d119      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d116      	bne.n	8001db6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d88:	4b7c      	ldr	r3, [pc, #496]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x328>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e23f      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	4973      	ldr	r1, [pc, #460]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	e040      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d023      	beq.n	8001e06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbe:	4b6f      	ldr	r3, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a6e      	ldr	r2, [pc, #440]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f855 	bl	8000e78 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f851 	bl	8000e78 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e21d      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de4:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	495f      	ldr	r1, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b5d      	ldr	r3, [pc, #372]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a5c      	ldr	r2, [pc, #368]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7ff f831 	bl	8000e78 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1a:	f7ff f82d 	bl	8000e78 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e1f9      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d01c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	4a4a      	ldr	r2, [pc, #296]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f80c 	bl	8000e78 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff f808 	bl	8000e78 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e1d4      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ef      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3ec>
 8001e84:	e01b      	b.n	8001ebe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	4a3b      	ldr	r2, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7fe ffef 	bl	8000e78 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7fe ffeb 	bl	8000e78 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1b7      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a6 	beq.w	8002018 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ed0:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7fe ffb2 	bl	8000e78 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe ffae 	bl	8000e78 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e17a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x508>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d108      	bne.n	8001f50 <HAL_RCC_OscConfig+0x4d8>
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f4e:	e029      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b05      	cmp	r3, #5
 8001f56:	d115      	bne.n	8001f84 <HAL_RCC_OscConfig+0x50c>
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	e014      	b.n	8001fa4 <HAL_RCC_OscConfig+0x52c>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	4b9c      	ldr	r3, [pc, #624]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a9b      	ldr	r2, [pc, #620]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f94:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a97      	ldr	r2, [pc, #604]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7fe ff64 	bl	8000e78 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff60 	bl	8000e78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e12a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ed      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x53c>
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7fe ff4d 	bl	8000e78 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe ff49 	bl	8000e78 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e113      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	4b7f      	ldr	r3, [pc, #508]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ed      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b7a      	ldr	r3, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a79      	ldr	r2, [pc, #484]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80fe 	beq.w	800221e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	2b02      	cmp	r3, #2
 8002028:	f040 80d0 	bne.w	80021cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800202c:	4b72      	ldr	r3, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203c:	429a      	cmp	r2, r3
 800203e:	d130      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	3b01      	subs	r3, #1
 800204c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d127      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d11f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800206c:	2a07      	cmp	r2, #7
 800206e:	bf14      	ite	ne
 8002070:	2201      	movne	r2, #1
 8002072:	2200      	moveq	r2, #0
 8002074:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	4293      	cmp	r3, r2
 8002078:	d113      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d06e      	beq.n	8002180 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d069      	beq.n	800217c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0ad      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d0:	f7fe fed2 	bl	8000e78 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe fece 	bl	8000e78 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e09a      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x784>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002106:	3a01      	subs	r2, #1
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	4311      	orrs	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002110:	0212      	lsls	r2, r2, #8
 8002112:	4311      	orrs	r1, r2
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002118:	0852      	lsrs	r2, r2, #1
 800211a:	3a01      	subs	r2, #1
 800211c:	0552      	lsls	r2, r2, #21
 800211e:	4311      	orrs	r1, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002124:	0852      	lsrs	r2, r2, #1
 8002126:	3a01      	subs	r2, #1
 8002128:	0652      	lsls	r2, r2, #25
 800212a:	4311      	orrs	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002130:	0912      	lsrs	r2, r2, #4
 8002132:	0452      	lsls	r2, r2, #17
 8002134:	430a      	orrs	r2, r1
 8002136:	4930      	ldr	r1, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002138:	4313      	orrs	r3, r2
 800213a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2d      	ldr	r2, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002146:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002154:	f7fe fe90 	bl	8000e78 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fe8c 	bl	8000e78 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e058      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800217a:	e050      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04f      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d148      	bne.n	800221e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a16      	ldr	r2, [pc, #88]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a4:	f7fe fe68 	bl	8000e78 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fe64 	bl	8000e78 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e030      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x734>
 80021ca:	e028      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d023      	beq.n	800221a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_RCC_OscConfig+0x780>)
 80021d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021de:	f7fe fe4b 	bl	8000e78 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	e00c      	b.n	8002200 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fe47 	bl	8000e78 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d905      	bls.n	8002200 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e013      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
 80021f8:	40021000 	.word	0x40021000
 80021fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_OscConfig+0x7b0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ec      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x7b0>)
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	4905      	ldr	r1, [pc, #20]	; (8002228 <HAL_RCC_OscConfig+0x7b0>)
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_OscConfig+0x7b4>)
 8002214:	4013      	ands	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
 8002218:	e001      	b.n	800221e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	feeefffc 	.word	0xfeeefffc

08002230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0e7      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b75      	ldr	r3, [pc, #468]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b72      	ldr	r3, [pc, #456]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4970      	ldr	r1, [pc, #448]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b6e      	ldr	r3, [pc, #440]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0cf      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	429a      	cmp	r2, r3
 800228e:	d908      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4960      	ldr	r1, [pc, #384]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d04c      	beq.n	8002348 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d121      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0a6      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e09a      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e6:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e08e      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e086      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4943      	ldr	r1, [pc, #268]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fdae 	bl	8000e78 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fdaa 	bl	8000e78 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e06e      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002360:	429a      	cmp	r2, r3
 8002362:	d208      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	492b      	ldr	r1, [pc, #172]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d210      	bcs.n	80023a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	4923      	ldr	r1, [pc, #140]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e036      	b.n	8002414 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b2:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4918      	ldr	r1, [pc, #96]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	4910      	ldr	r1, [pc, #64]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e4:	f000 f824 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	490b      	ldr	r1, [pc, #44]	; (8002424 <HAL_RCC_ClockConfig+0x1f4>)
 80023f6:	5ccb      	ldrb	r3, [r1, r3]
 80023f8:	f003 031f 	and.w	r3, r3, #31
 80023fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002400:	4a09      	ldr	r2, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1f8>)
 8002402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_RCC_ClockConfig+0x1fc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fce5 	bl	8000dd8 <HAL_InitTick>
 800240e:	4603      	mov	r3, r0
 8002410:	72fb      	strb	r3, [r7, #11]

  return status;
 8002412:	7afb      	ldrb	r3, [r7, #11]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40022000 	.word	0x40022000
 8002420:	40021000 	.word	0x40021000
 8002424:	08006ff0 	.word	0x08006ff0
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002470:	4b31      	ldr	r3, [pc, #196]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e005      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800248c:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e004      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d134      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xac>
 80024d4:	e005      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024d8:	617b      	str	r3, [r7, #20]
      break;
 80024da:	e005      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_GetSysClockFreq+0x114>)
 80024de:	617b      	str	r3, [r7, #20]
      break;
 80024e0:	e002      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	617b      	str	r3, [r7, #20]
      break;
 80024e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	3301      	adds	r3, #1
 80024f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	0e5b      	lsrs	r3, r3, #25
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	3301      	adds	r3, #1
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002528:	69bb      	ldr	r3, [r7, #24]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	08007008 	.word	0x08007008
 8002540:	00f42400 	.word	0x00f42400
 8002544:	007a1200 	.word	0x007a1200

08002548 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000000 	.word	0x20000000

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002564:	f7ff fff0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0a1b      	lsrs	r3, r3, #8
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4904      	ldr	r1, [pc, #16]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08007000 	.word	0x08007000

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002590:	f7ff ffda 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	0adb      	lsrs	r3, r3, #11
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4904      	ldr	r1, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08007000 	.word	0x08007000

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff f9ee 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a24      	ldr	r2, [pc, #144]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b22      	ldr	r3, [pc, #136]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff f9de 	bl	80019b0 <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d10b      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d919      	bls.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2ba0      	cmp	r3, #160	; 0xa0
 8002614:	d902      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e013      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e010      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d902      	bls.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002628:	2303      	movs	r3, #3
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e00a      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d102      	bne.n	800263a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002634:	2302      	movs	r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e004      	b.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d101      	bne.n	8002644 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0207 	bic.w	r2, r3, #7
 800264c:	4909      	ldr	r1, [pc, #36]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	d001      	beq.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000
 8002674:	40022000 	.word	0x40022000

08002678 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002680:	2300      	movs	r3, #0
 8002682:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002684:	2300      	movs	r3, #0
 8002686:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d041      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002698:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800269c:	d02a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800269e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026a2:	d824      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ae:	d81e      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d010      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ba:	e018      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026bc:	4b86      	ldr	r3, [pc, #536]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a85      	ldr	r2, [pc, #532]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026c8:	e015      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	2100      	movs	r1, #0
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fabb 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 80026d6:	4603      	mov	r3, r0
 80026d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026da:	e00c      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3320      	adds	r3, #32
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fba6 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ec:	e003      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	74fb      	strb	r3, [r7, #19]
      break;
 80026f2:	e000      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fc:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002702:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800270a:	4973      	ldr	r1, [pc, #460]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002712:	e001      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d041      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002728:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800272c:	d02a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800272e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002732:	d824      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800273a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273e:	d81e      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d010      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa73 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fb5e 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800278c:	4b52      	ldr	r3, [pc, #328]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279a:	494f      	ldr	r1, [pc, #316]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a0 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a40      	ldr	r2, [pc, #256]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027f8:	f7fe fb3e 	bl	8000e78 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027fe:	e009      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002800:	f7fe fb3a 	bl	8000e78 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	74fb      	strb	r3, [r7, #19]
        break;
 8002812:	e005      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002814:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d15c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002830:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01f      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d019      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a20      	ldr	r2, [pc, #128]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002870:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe faf9 	bl	8000e78 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00b      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe faf5 	bl	8000e78 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d902      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	74fb      	strb	r3, [r7, #19]
            break;
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ec      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	74bb      	strb	r3, [r7, #18]
 80028d4:	e006      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ee:	4a9d      	ldr	r2, [pc, #628]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002902:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f023 0203 	bic.w	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	4994      	ldr	r1, [pc, #592]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002924:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 020c 	bic.w	r2, r3, #12
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	498c      	ldr	r1, [pc, #560]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002946:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4983      	ldr	r1, [pc, #524]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002968:	4b7e      	ldr	r3, [pc, #504]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	497b      	ldr	r1, [pc, #492]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	4972      	ldr	r1, [pc, #456]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ac:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	4961      	ldr	r1, [pc, #388]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029f0:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	4959      	ldr	r1, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a20:	4950      	ldr	r1, [pc, #320]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a42:	4948      	ldr	r1, [pc, #288]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	493f      	ldr	r1, [pc, #252]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d028      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a86:	4937      	ldr	r1, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a31      	ldr	r2, [pc, #196]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aa2:	60d3      	str	r3, [r2, #12]
 8002aa4:	e011      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aae:	d10c      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f8c8 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ac6:	7cfb      	ldrb	r3, [r7, #19]
 8002ac8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d028      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	491f      	ldr	r1, [pc, #124]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af4:	d106      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af6:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b00:	60d3      	str	r3, [r2, #12]
 8002b02:	e011      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2101      	movs	r1, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f899 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02b      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d109      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
 8002b60:	e014      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	2101      	movs	r1, #1
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 f867 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02f      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b98:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	4928      	ldr	r1, [pc, #160]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb6:	d10d      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f844 	bl	8002c4c <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	2102      	movs	r1, #2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f925 	bl	8002e34 <RCCEx_PLLSAI2_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c12:	490d      	ldr	r1, [pc, #52]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00b      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c5a:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d018      	beq.n	8002c98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f003 0203 	and.w	r2, r3, #3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10d      	bne.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
       ||
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d047      	beq.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e044      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d018      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x86>
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d825      	bhi.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d002      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x62>
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d009      	beq.n	8002cc0 <RCCEx_PLLSAI1_Config+0x74>
 8002cac:	e020      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cae:	4b60      	ldr	r3, [pc, #384]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11d      	bne.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e01a      	b.n	8002cf6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e013      	b.n	8002cfa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cd2:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cee:	e006      	b.n	8002cfe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e004      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6819      	ldr	r1, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	4944      	ldr	r1, [pc, #272]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d17d      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a40      	ldr	r2, [pc, #256]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d34:	f7fe f8a0 	bl	8000e78 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d3a:	e009      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3c:	f7fe f89c 	bl	8000e78 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d4e:	e005      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d50:	4b37      	ldr	r3, [pc, #220]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ef      	bne.n	8002d3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d160      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d111      	bne.n	8002d8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d68:	4b31      	ldr	r3, [pc, #196]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6892      	ldr	r2, [r2, #8]
 8002d78:	0211      	lsls	r1, r2, #8
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68d2      	ldr	r2, [r2, #12]
 8002d7e:	0912      	lsrs	r2, r2, #4
 8002d80:	0452      	lsls	r2, r2, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	492a      	ldr	r1, [pc, #168]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	610b      	str	r3, [r1, #16]
 8002d8a:	e027      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d112      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	0211      	lsls	r1, r2, #8
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6912      	ldr	r2, [r2, #16]
 8002da8:	0852      	lsrs	r2, r2, #1
 8002daa:	3a01      	subs	r2, #1
 8002dac:	0552      	lsls	r2, r2, #21
 8002dae:	430a      	orrs	r2, r1
 8002db0:	491f      	ldr	r1, [pc, #124]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	610b      	str	r3, [r1, #16]
 8002db6:	e011      	b.n	8002ddc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6892      	ldr	r2, [r2, #8]
 8002dc8:	0211      	lsls	r1, r2, #8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6952      	ldr	r2, [r2, #20]
 8002dce:	0852      	lsrs	r2, r2, #1
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	0652      	lsls	r2, r2, #25
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	4916      	ldr	r1, [pc, #88]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe f846 	bl	8000e78 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002df0:	f7fe f842 	bl	8000e78 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
          break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ef      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4904      	ldr	r1, [pc, #16]	; (8002e30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000

08002e34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e4e:	4b67      	ldr	r3, [pc, #412]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
       ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
       ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d047      	beq.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x86>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI2_Config+0x62>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI2_Config+0x74>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b55      	ldr	r3, [pc, #340]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b50      	ldr	r3, [pc, #320]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b49      	ldr	r3, [pc, #292]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eee:	4b3f      	ldr	r3, [pc, #252]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4939      	ldr	r1, [pc, #228]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d167      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a35      	ldr	r2, [pc, #212]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fd ffac 	bl	8000e78 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f24:	f7fd ffa8 	bl	8000e78 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ef      	bne.n	8002f24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14a      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0912      	lsrs	r2, r2, #4
 8002f68:	0452      	lsls	r2, r2, #17
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	491f      	ldr	r1, [pc, #124]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	614b      	str	r3, [r1, #20]
 8002f72:	e011      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6912      	ldr	r2, [r2, #16]
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0652      	lsls	r2, r2, #25
 8002f90:	430a      	orrs	r2, r1
 8002f92:	4916      	ldr	r1, [pc, #88]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fd ff68 	bl	8000e78 <HAL_GetTick>
 8002fa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002faa:	e009      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fac:	f7fd ff64 	bl	8000e78 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d902      	bls.n	8002fc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fbe:	e005      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	4904      	ldr	r1, [pc, #16]	; (8002fec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000

08002ff0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e049      	b.n	8003096 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	795b      	ldrb	r3, [r3, #5]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fd68 	bl	8000ae8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0204 	orr.w	r2, r2, #4
 800302c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d104      	bne.n	8003046 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2204      	movs	r2, #4
 8003040:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e027      	b.n	8003096 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003046:	f7fd ff17 	bl	8000e78 <HAL_GetTick>
 800304a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800304c:	e015      	b.n	800307a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800304e:	f7fd ff13 	bl	8000e78 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d90e      	bls.n	800307a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d107      	bne.n	800307a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e00d      	b.n	8003096 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d0e2      	beq.n	800304e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2210      	movs	r2, #16
 80030c0:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80030c2:	2301      	movs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e01f      	b.n	8003108 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01a      	beq.n	8003108 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e00c      	b.n	8003108 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 80030f4:	2301      	movs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10b      	bne.n	8003126 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2204      	movs	r2, #4
 8003112:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f837 	bl	8003188 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8003122:	605a      	str	r2, [r3, #4]

    return;
 8003124:	e022      	b.n	800316c <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01d      	beq.n	800316c <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0208 	bic.w	r2, r2, #8
 800313e:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	795b      	ldrb	r3, [r3, #5]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00b      	beq.n	800316c <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4619      	mov	r1, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f803 	bl	8003172 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e049      	b.n	8003242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fcdc 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 f968 	bl	80034b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d001      	beq.n	8003264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e047      	b.n	80032f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <HAL_TIM_Base_Start+0xb4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327e:	d018      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	; (8003304 <HAL_TIM_Base_Start+0xb8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <HAL_TIM_Base_Start+0xbc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	; (800330c <HAL_TIM_Base_Start+0xc0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_TIM_Base_Start+0xc4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_Base_Start+0x66>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_TIM_Base_Start+0xc8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d115      	bne.n	80032de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <HAL_TIM_Base_Start+0xcc>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d015      	beq.n	80032f0 <HAL_TIM_Base_Start+0xa4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d011      	beq.n	80032f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	e008      	b.n	80032f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40000c00 	.word	0x40000c00
 8003310:	40013400 	.word	0x40013400
 8003314:	40014000 	.word	0x40014000
 8003318:	00010007 	.word	0x00010007

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIM_ConfigClockSource+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e0b6      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x18a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800335a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003374:	d03e      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0xd8>
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337a:	f200 8087 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x170>
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	f000 8086 	beq.w	8003492 <HAL_TIM_ConfigClockSource+0x176>
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	d87f      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	d01a      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0xaa>
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d87b      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	d050      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x11e>
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d877      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 800339c:	2b50      	cmp	r3, #80	; 0x50
 800339e:	d03c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0xfe>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d873      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d058      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x13e>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d86f      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 80033ac:	2b30      	cmp	r3, #48	; 0x30
 80033ae:	d064      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x15e>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d86b      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d060      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x15e>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d867      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x170>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05c      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x15e>
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d05a      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x15e>
 80033c4:	e062      	b.n	800348c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	f000 f97f 	bl	80036d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	609a      	str	r2, [r3, #8]
      break;
 80033f2:	e04f      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003404:	f000 f968 	bl	80036d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	609a      	str	r2, [r3, #8]
      break;
 8003418:	e03c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	461a      	mov	r2, r3
 8003428:	f000 f8dc 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2150      	movs	r1, #80	; 0x50
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f935 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003438:	e02c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	461a      	mov	r2, r3
 8003448:	f000 f8fb 	bl	8003642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2160      	movs	r1, #96	; 0x60
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f925 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003458:	e01c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	461a      	mov	r2, r3
 8003468:	f000 f8bc 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f915 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003478:	e00c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 f90c 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 800348a:	e003      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e000      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ce:	d00f      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3d      	ldr	r2, [pc, #244]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00b      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3c      	ldr	r2, [pc, #240]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d007      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d108      	bne.n	8003502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d01b      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <TIM_Base_SetConfig+0x118>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d017      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <TIM_Base_SetConfig+0x11c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <TIM_Base_SetConfig+0x120>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00f      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <TIM_Base_SetConfig+0x128>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <TIM_Base_SetConfig+0x12c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a26      	ldr	r2, [pc, #152]	; (80035e0 <TIM_Base_SetConfig+0x130>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <TIM_Base_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00f      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <TIM_Base_SetConfig+0x124>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <TIM_Base_SetConfig+0x128>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <TIM_Base_SetConfig+0x12c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0xf8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <TIM_Base_SetConfig+0x130>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f023 0210 	bic.w	r2, r3, #16
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800367e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e068      	b.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2e      	ldr	r2, [pc, #184]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800376a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d018      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a13      	ldr	r2, [pc, #76]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10c      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40013400 	.word	0x40013400
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40014000 	.word	0x40014000

08003828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e040      	b.n	80038bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd f9ca 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fae0 	bl	8003e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f825 	bl	80038c4 <UART_SetConfig>
 800387a:	4603      	mov	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e01b      	b.n	80038bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb5f 	bl	8003f78 <UART_CheckIdleState>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b08a      	sub	sp, #40	; 0x28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4ba4      	ldr	r3, [pc, #656]	; (8003b84 <UART_SetConfig+0x2c0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a99      	ldr	r2, [pc, #612]	; (8003b88 <UART_SetConfig+0x2c4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800392c:	4313      	orrs	r3, r2
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	430a      	orrs	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a90      	ldr	r2, [pc, #576]	; (8003b8c <UART_SetConfig+0x2c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d126      	bne.n	800399c <UART_SetConfig+0xd8>
 800394e:	4b90      	ldr	r3, [pc, #576]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b03      	cmp	r3, #3
 800395a:	d81b      	bhi.n	8003994 <UART_SetConfig+0xd0>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0xa0>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003985 	.word	0x08003985
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398d 	.word	0x0800398d
 8003974:	2301      	movs	r3, #1
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e116      	b.n	8003baa <UART_SetConfig+0x2e6>
 800397c:	2302      	movs	r3, #2
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e112      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003984:	2304      	movs	r3, #4
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e10e      	b.n	8003baa <UART_SetConfig+0x2e6>
 800398c:	2308      	movs	r3, #8
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e10a      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003994:	2310      	movs	r3, #16
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e106      	b.n	8003baa <UART_SetConfig+0x2e6>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7c      	ldr	r2, [pc, #496]	; (8003b94 <UART_SetConfig+0x2d0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d138      	bne.n	8003a18 <UART_SetConfig+0x154>
 80039a6:	4b7a      	ldr	r3, [pc, #488]	; (8003b90 <UART_SetConfig+0x2cc>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d82d      	bhi.n	8003a10 <UART_SetConfig+0x14c>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0xf8>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003a11 	.word	0x08003a11
 80039c4:	08003a11 	.word	0x08003a11
 80039c8:	08003a11 	.word	0x08003a11
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a11 	.word	0x08003a11
 80039d4:	08003a11 	.word	0x08003a11
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	080039f9 	.word	0x080039f9
 80039e0:	08003a11 	.word	0x08003a11
 80039e4:	08003a11 	.word	0x08003a11
 80039e8:	08003a11 	.word	0x08003a11
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	2300      	movs	r3, #0
 80039f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f6:	e0d8      	b.n	8003baa <UART_SetConfig+0x2e6>
 80039f8:	2302      	movs	r3, #2
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e0d4      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a00:	2304      	movs	r3, #4
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e0d0      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a08:	2308      	movs	r3, #8
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e0cc      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a10:	2310      	movs	r3, #16
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e0c8      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5e      	ldr	r2, [pc, #376]	; (8003b98 <UART_SetConfig+0x2d4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d125      	bne.n	8003a6e <UART_SetConfig+0x1aa>
 8003a22:	4b5b      	ldr	r3, [pc, #364]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a2c:	2b30      	cmp	r3, #48	; 0x30
 8003a2e:	d016      	beq.n	8003a5e <UART_SetConfig+0x19a>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d818      	bhi.n	8003a66 <UART_SetConfig+0x1a2>
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d00a      	beq.n	8003a4e <UART_SetConfig+0x18a>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d814      	bhi.n	8003a66 <UART_SetConfig+0x1a2>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <UART_SetConfig+0x182>
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d008      	beq.n	8003a56 <UART_SetConfig+0x192>
 8003a44:	e00f      	b.n	8003a66 <UART_SetConfig+0x1a2>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4c:	e0ad      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a54:	e0a9      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a56:	2304      	movs	r3, #4
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5c:	e0a5      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a64:	e0a1      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a66:	2310      	movs	r3, #16
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6c:	e09d      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a4a      	ldr	r2, [pc, #296]	; (8003b9c <UART_SetConfig+0x2d8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d125      	bne.n	8003ac4 <UART_SetConfig+0x200>
 8003a78:	4b45      	ldr	r3, [pc, #276]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a82:	2bc0      	cmp	r3, #192	; 0xc0
 8003a84:	d016      	beq.n	8003ab4 <UART_SetConfig+0x1f0>
 8003a86:	2bc0      	cmp	r3, #192	; 0xc0
 8003a88:	d818      	bhi.n	8003abc <UART_SetConfig+0x1f8>
 8003a8a:	2b80      	cmp	r3, #128	; 0x80
 8003a8c:	d00a      	beq.n	8003aa4 <UART_SetConfig+0x1e0>
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d814      	bhi.n	8003abc <UART_SetConfig+0x1f8>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <UART_SetConfig+0x1d8>
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d008      	beq.n	8003aac <UART_SetConfig+0x1e8>
 8003a9a:	e00f      	b.n	8003abc <UART_SetConfig+0x1f8>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e082      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e07e      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003aac:	2304      	movs	r3, #4
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e07a      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e076      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003abc:	2310      	movs	r3, #16
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e072      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <UART_SetConfig+0x2dc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d12a      	bne.n	8003b24 <UART_SetConfig+0x260>
 8003ace:	4b30      	ldr	r3, [pc, #192]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003adc:	d01a      	beq.n	8003b14 <UART_SetConfig+0x250>
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae2:	d81b      	bhi.n	8003b1c <UART_SetConfig+0x258>
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d00c      	beq.n	8003b04 <UART_SetConfig+0x240>
 8003aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aee:	d815      	bhi.n	8003b1c <UART_SetConfig+0x258>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <UART_SetConfig+0x238>
 8003af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af8:	d008      	beq.n	8003b0c <UART_SetConfig+0x248>
 8003afa:	e00f      	b.n	8003b1c <UART_SetConfig+0x258>
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e052      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b04:	2302      	movs	r3, #2
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e04e      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e04a      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b14:	2308      	movs	r3, #8
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e046      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e042      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <UART_SetConfig+0x2c4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d13a      	bne.n	8003ba4 <UART_SetConfig+0x2e0>
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <UART_SetConfig+0x2cc>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b3c:	d01a      	beq.n	8003b74 <UART_SetConfig+0x2b0>
 8003b3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b42:	d81b      	bhi.n	8003b7c <UART_SetConfig+0x2b8>
 8003b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b48:	d00c      	beq.n	8003b64 <UART_SetConfig+0x2a0>
 8003b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4e:	d815      	bhi.n	8003b7c <UART_SetConfig+0x2b8>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <UART_SetConfig+0x298>
 8003b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b58:	d008      	beq.n	8003b6c <UART_SetConfig+0x2a8>
 8003b5a:	e00f      	b.n	8003b7c <UART_SetConfig+0x2b8>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b62:	e022      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6a:	e01e      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b72:	e01a      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e016      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e012      	b.n	8003baa <UART_SetConfig+0x2e6>
 8003b84:	efff69f3 	.word	0xefff69f3
 8003b88:	40008000 	.word	0x40008000
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40004400 	.word	0x40004400
 8003b98:	40004800 	.word	0x40004800
 8003b9c:	40004c00 	.word	0x40004c00
 8003ba0:	40005000 	.word	0x40005000
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a9f      	ldr	r2, [pc, #636]	; (8003e2c <UART_SetConfig+0x568>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d17a      	bne.n	8003caa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d824      	bhi.n	8003c06 <UART_SetConfig+0x342>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0x300>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003c07 	.word	0x08003c07
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003c07 	.word	0x08003c07
 8003bd4:	08003bf7 	.word	0x08003bf7
 8003bd8:	08003c07 	.word	0x08003c07
 8003bdc:	08003c07 	.word	0x08003c07
 8003be0:	08003c07 	.word	0x08003c07
 8003be4:	08003bff 	.word	0x08003bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003be8:	f7fe fcba 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003bec:	61f8      	str	r0, [r7, #28]
        break;
 8003bee:	e010      	b.n	8003c12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bf0:	4b8f      	ldr	r3, [pc, #572]	; (8003e30 <UART_SetConfig+0x56c>)
 8003bf2:	61fb      	str	r3, [r7, #28]
        break;
 8003bf4:	e00d      	b.n	8003c12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf6:	f7fe fc1b 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003bfa:	61f8      	str	r0, [r7, #28]
        break;
 8003bfc:	e009      	b.n	8003c12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	e005      	b.n	8003c12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80fb 	beq.w	8003e10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d305      	bcc.n	8003c36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d903      	bls.n	8003c3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c3c:	e0e8      	b.n	8003e10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2200      	movs	r2, #0
 8003c42:	461c      	mov	r4, r3
 8003c44:	4615      	mov	r5, r2
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	022b      	lsls	r3, r5, #8
 8003c50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c54:	0222      	lsls	r2, r4, #8
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	6849      	ldr	r1, [r1, #4]
 8003c5a:	0849      	lsrs	r1, r1, #1
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	4688      	mov	r8, r1
 8003c60:	4681      	mov	r9, r0
 8003c62:	eb12 0a08 	adds.w	sl, r2, r8
 8003c66:	eb43 0b09 	adc.w	fp, r3, r9
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c78:	4650      	mov	r0, sl
 8003c7a:	4659      	mov	r1, fp
 8003c7c:	f7fc faa8 	bl	80001d0 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4613      	mov	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c8e:	d308      	bcc.n	8003ca2 <UART_SetConfig+0x3de>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c96:	d204      	bcs.n	8003ca2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e0b6      	b.n	8003e10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ca8:	e0b2      	b.n	8003e10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb2:	d15e      	bne.n	8003d72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d828      	bhi.n	8003d0e <UART_SetConfig+0x44a>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0x400>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003d0f 	.word	0x08003d0f
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003d0f 	.word	0x08003d0f
 8003cdc:	08003d0f 	.word	0x08003d0f
 8003ce0:	08003d0f 	.word	0x08003d0f
 8003ce4:	08003d07 	.word	0x08003d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce8:	f7fe fc3a 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003cec:	61f8      	str	r0, [r7, #28]
        break;
 8003cee:	e014      	b.n	8003d1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf0:	f7fe fc4c 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003cf4:	61f8      	str	r0, [r7, #28]
        break;
 8003cf6:	e010      	b.n	8003d1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf8:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <UART_SetConfig+0x56c>)
 8003cfa:	61fb      	str	r3, [r7, #28]
        break;
 8003cfc:	e00d      	b.n	8003d1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfe:	f7fe fb97 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003d02:	61f8      	str	r0, [r7, #28]
        break;
 8003d04:	e009      	b.n	8003d1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0a:	61fb      	str	r3, [r7, #28]
        break;
 8003d0c:	e005      	b.n	8003d1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d077      	beq.n	8003e10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	005a      	lsls	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	441a      	add	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d916      	bls.n	8003d6a <UART_SetConfig+0x4a6>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d42:	d212      	bcs.n	8003d6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	8afa      	ldrh	r2, [r7, #22]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	e052      	b.n	8003e10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d70:	e04e      	b.n	8003e10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d827      	bhi.n	8003dca <UART_SetConfig+0x506>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x4bc>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	08003dcb 	.word	0x08003dcb
 8003d90:	08003dbb 	.word	0x08003dbb
 8003d94:	08003dcb 	.word	0x08003dcb
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003dcb 	.word	0x08003dcb
 8003da0:	08003dc3 	.word	0x08003dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe fbdc 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003da8:	61f8      	str	r0, [r7, #28]
        break;
 8003daa:	e014      	b.n	8003dd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dac:	f7fe fbee 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8003db0:	61f8      	str	r0, [r7, #28]
        break;
 8003db2:	e010      	b.n	8003dd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <UART_SetConfig+0x56c>)
 8003db6:	61fb      	str	r3, [r7, #28]
        break;
 8003db8:	e00d      	b.n	8003dd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dba:	f7fe fb39 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8003dbe:	61f8      	str	r0, [r7, #28]
        break;
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc6:	61fb      	str	r3, [r7, #28]
        break;
 8003dc8:	e005      	b.n	8003dd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dd4:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d019      	beq.n	8003e10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	085a      	lsrs	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	d909      	bls.n	8003e0a <UART_SetConfig+0x546>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfc:	d205      	bcs.n	8003e0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	e002      	b.n	8003e10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3728      	adds	r7, #40	; 0x28
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40008000 	.word	0x40008000
 8003e30:	00f42400 	.word	0x00f42400

08003e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f32:	d10a      	bne.n	8003f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b098      	sub	sp, #96	; 0x60
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f88:	f7fc ff76 	bl	8000e78 <HAL_GetTick>
 8003f8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d12e      	bne.n	8003ffa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f88c 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d021      	beq.n	8003ffa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e062      	b.n	80040c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d149      	bne.n	800409c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f856 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03c      	beq.n	800409c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	623b      	str	r3, [r7, #32]
   return(result);
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
 8004042:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60fb      	str	r3, [r7, #12]
   return(result);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e011      	b.n	80040c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3758      	adds	r7, #88	; 0x58
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	e049      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d045      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fc fec9 	bl	8000e78 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e048      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d031      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d110      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f838 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2208      	movs	r2, #8
 800412a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e029      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	d111      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f81e 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e00f      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d0a6      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004196:	b480      	push	{r7}
 8004198:	b095      	sub	sp, #84	; 0x54
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
 80041be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	2b01      	cmp	r3, #1
 800420a:	d118      	bne.n	800423e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60bb      	str	r3, [r7, #8]
   return(result);
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0310 	bic.w	r3, r3, #16
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	61bb      	str	r3, [r7, #24]
 800422c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	613b      	str	r3, [r7, #16]
   return(result);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004252:	bf00      	nop
 8004254:	3754      	adds	r7, #84	; 0x54
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <__NVIC_SetPriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	6039      	str	r1, [r7, #0]
 800426a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	db0a      	blt.n	800428a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	490c      	ldr	r1, [pc, #48]	; (80042ac <__NVIC_SetPriority+0x4c>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	0112      	lsls	r2, r2, #4
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	440b      	add	r3, r1
 8004284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004288:	e00a      	b.n	80042a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <__NVIC_SetPriority+0x50>)
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3b04      	subs	r3, #4
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	440b      	add	r3, r1
 800429e:	761a      	strb	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000e100 	.word	0xe000e100
 80042b0:	e000ed00 	.word	0xe000ed00

080042b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042b8:	2100      	movs	r1, #0
 80042ba:	f06f 0004 	mvn.w	r0, #4
 80042be:	f7ff ffcf 	bl	8004260 <__NVIC_SetPriority>
#endif
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ce:	f3ef 8305 	mrs	r3, IPSR
 80042d2:	603b      	str	r3, [r7, #0]
  return(result);
 80042d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80042da:	f06f 0305 	mvn.w	r3, #5
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e00c      	b.n	80042fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <osKernelInitialize+0x44>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d105      	bne.n	80042f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <osKernelInitialize+0x44>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	e002      	b.n	80042fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042fc:	687b      	ldr	r3, [r7, #4]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000210 	.word	0x20000210

08004310 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004316:	f3ef 8305 	mrs	r3, IPSR
 800431a:	603b      	str	r3, [r7, #0]
  return(result);
 800431c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004322:	f06f 0305 	mvn.w	r3, #5
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	e010      	b.n	800434c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <osKernelStart+0x48>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d109      	bne.n	8004346 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004332:	f7ff ffbf 	bl	80042b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <osKernelStart+0x48>)
 8004338:	2202      	movs	r2, #2
 800433a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800433c:	f001 f912 	bl	8005564 <vTaskStartScheduler>
      stat = osOK;
 8004340:	2300      	movs	r3, #0
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	e002      	b.n	800434c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800434c:	687b      	ldr	r3, [r7, #4]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000210 	.word	0x20000210

0800435c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af04      	add	r7, sp, #16
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800436c:	f3ef 8305 	mrs	r3, IPSR
 8004370:	617b      	str	r3, [r7, #20]
  return(result);
 8004372:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004374:	2b00      	cmp	r3, #0
 8004376:	d17e      	bne.n	8004476 <osThreadNew+0x11a>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d07b      	beq.n	8004476 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800437e:	2380      	movs	r3, #128	; 0x80
 8004380:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004382:	2318      	movs	r3, #24
 8004384:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800438a:	f04f 33ff 	mov.w	r3, #4294967295
 800438e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d045      	beq.n	8004422 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <osThreadNew+0x48>
        name = attr->name;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <osThreadNew+0x6e>
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b38      	cmp	r3, #56	; 0x38
 80043bc:	d805      	bhi.n	80043ca <osThreadNew+0x6e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <osThreadNew+0x72>
        return (NULL);
 80043ca:	2300      	movs	r3, #0
 80043cc:	e054      	b.n	8004478 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <osThreadNew+0xa8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b5b      	cmp	r3, #91	; 0x5b
 80043ec:	d90a      	bls.n	8004404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <osThreadNew+0xa8>
        mem = 1;
 80043fe:	2301      	movs	r3, #1
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	e010      	b.n	8004426 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10c      	bne.n	8004426 <osThreadNew+0xca>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <osThreadNew+0xca>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <osThreadNew+0xca>
          mem = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	e001      	b.n	8004426 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d110      	bne.n	800444e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004434:	9202      	str	r2, [sp, #8]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6a3a      	ldr	r2, [r7, #32]
 8004440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 feb8 	bl	80051b8 <xTaskCreateStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e013      	b.n	8004476 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d110      	bne.n	8004476 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	b29a      	uxth	r2, r3
 8004458:	f107 0310 	add.w	r3, r7, #16
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 ff03 	bl	8005272 <xTaskCreate>
 800446c:	4603      	mov	r3, r0
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <osThreadNew+0x11a>
            hTask = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004476:	693b      	ldr	r3, [r7, #16]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	; 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004488:	f3ef 8305 	mrs	r3, IPSR
 800448c:	60bb      	str	r3, [r7, #8]
  return(result);
 800448e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <osDelay+0x1c>
    stat = osErrorISR;
 8004494:	f06f 0305 	mvn.w	r3, #5
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e007      	b.n	80044ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 f828 	bl	80054fc <vTaskDelay>
    }
  }

  return (stat);
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b08a      	sub	sp, #40	; 0x28
 80044ba:	af02      	add	r7, sp, #8
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	613b      	str	r3, [r7, #16]
  return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d15f      	bne.n	8004592 <osMessageQueueNew+0xdc>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05c      	beq.n	8004592 <osMessageQueueNew+0xdc>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d059      	beq.n	8004592 <osMessageQueueNew+0xdc>
    mem = -1;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d029      	beq.n	800453e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <osMessageQueueNew+0x62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b4f      	cmp	r3, #79	; 0x4f
 80044f8:	d90e      	bls.n	8004518 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <osMessageQueueNew+0x62>
        mem = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e014      	b.n	8004542 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d110      	bne.n	8004542 <osMessageQueueNew+0x8c>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10c      	bne.n	8004542 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d104      	bne.n	8004542 <osMessageQueueNew+0x8c>
          mem = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e001      	b.n	8004542 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10b      	bne.n	8004560 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2100      	movs	r1, #0
 8004552:	9100      	str	r1, [sp, #0]
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f970 	bl	800483c <xQueueGenericCreateStatic>
 800455c:	61f8      	str	r0, [r7, #28]
 800455e:	e008      	b.n	8004572 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004566:	2200      	movs	r2, #0
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f9de 	bl	800492c <xQueueGenericCreate>
 8004570:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <osMessageQueueNew+0xd0>
        name = attr->name;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e001      	b.n	800458a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	69f8      	ldr	r0, [r7, #28]
 800458e:	f000 fdb5 	bl	80050fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004592:	69fb      	ldr	r3, [r7, #28]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80045ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	4a06      	ldr	r2, [pc, #24]	; (80045cc <vApplicationGetIdleTaskMemory+0x30>)
 80045b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2280      	movs	r2, #128	; 0x80
 80045b8:	601a      	str	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000214 	.word	0x20000214
 80045cc:	20000270 	.word	0x20000270

080045d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <vApplicationGetTimerTaskMemory+0x2c>)
 80045e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4a06      	ldr	r2, [pc, #24]	; (8004600 <vApplicationGetTimerTaskMemory+0x30>)
 80045e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ee:	601a      	str	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000470 	.word	0x20000470
 8004600:	200004cc 	.word	0x200004cc

08004604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f103 0208 	add.w	r2, r3, #8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f103 0208 	add.w	r2, r3, #8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f103 0208 	add.w	r2, r3, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d103      	bne.n	80046c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e00c      	b.n	80046e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3308      	adds	r3, #8
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e002      	b.n	80046d4 <vListInsert+0x2e>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d2f6      	bcs.n	80046ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6892      	ldr	r2, [r2, #8]
 800472e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6852      	ldr	r2, [r2, #4]
 8004738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d103      	bne.n	800474c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004796:	f002 f885 	bl	80068a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	3b01      	subs	r3, #1
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	441a      	add	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	22ff      	movs	r2, #255	; 0xff
 80047e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d114      	bne.n	8004816 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01a      	beq.n	800482a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3310      	adds	r3, #16
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f93d 	bl	8005a78 <xTaskRemoveFromEventList>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <xQueueGenericReset+0xcc>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	e009      	b.n	800482a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3310      	adds	r3, #16
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fef2 	bl	8004604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff feed 	bl	8004604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800482a:	f002 f86b 	bl	8006904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800482e:	2301      	movs	r3, #1
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08e      	sub	sp, #56	; 0x38
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10a      	bne.n	8004866 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004862:	bf00      	nop
 8004864:	e7fe      	b.n	8004864 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <xQueueGenericCreateStatic+0x52>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xQueueGenericCreateStatic+0x56>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericCreateStatic+0x58>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueGenericCreateStatic+0x7e>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueGenericCreateStatic+0x82>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericCreateStatic+0x84>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048da:	2350      	movs	r3, #80	; 0x50
 80048dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d00a      	beq.n	80048fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61bb      	str	r3, [r7, #24]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00d      	beq.n	8004922 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800490e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f83f 	bl	80049a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	; 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	613b      	str	r3, [r7, #16]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3350      	adds	r3, #80	; 0x50
 8004964:	4618      	mov	r0, r3
 8004966:	f002 f8bf 	bl	8006ae8 <pvPortMalloc>
 800496a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	3350      	adds	r3, #80	; 0x50
 800497a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004984:	79fa      	ldrb	r2, [r7, #7]
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	4613      	mov	r3, r2
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	68b9      	ldr	r1, [r7, #8]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f805 	bl	80049a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004996:	69bb      	ldr	r3, [r7, #24]
	}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e002      	b.n	80049c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049ce:	2101      	movs	r1, #1
 80049d0:	69b8      	ldr	r0, [r7, #24]
 80049d2:	f7ff fecb 	bl	800476c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08e      	sub	sp, #56	; 0x38
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049f6:	2300      	movs	r3, #0
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <xQueueGenericSend+0x32>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <xQueueGenericSend+0x40>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <xQueueGenericSend+0x44>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <xQueueGenericSend+0x46>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <xQueueGenericSend+0x60>
	__asm volatile
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a44:	bf00      	nop
 8004a46:	e7fe      	b.n	8004a46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d103      	bne.n	8004a56 <xQueueGenericSend+0x6e>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <xQueueGenericSend+0x72>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <xQueueGenericSend+0x74>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10a      	bne.n	8004a76 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	623b      	str	r3, [r7, #32]
}
 8004a72:	bf00      	nop
 8004a74:	e7fe      	b.n	8004a74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a76:	f001 f9bd 	bl	8005df4 <xTaskGetSchedulerState>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <xQueueGenericSend+0x9e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <xQueueGenericSend+0xa2>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <xQueueGenericSend+0xa4>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	61fb      	str	r3, [r7, #28]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aa6:	f001 fefd 	bl	80068a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <xQueueGenericSend+0xd4>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d129      	bne.n	8004b10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac2:	f000 fa0b 	bl	8004edc <prvCopyDataToQueue>
 8004ac6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	3324      	adds	r3, #36	; 0x24
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ffcf 	bl	8005a78 <xTaskRemoveFromEventList>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ae0:	4b3f      	ldr	r3, [pc, #252]	; (8004be0 <xQueueGenericSend+0x1f8>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	e00a      	b.n	8004b08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004af8:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <xQueueGenericSend+0x1f8>)
 8004afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b08:	f001 fefc 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e063      	b.n	8004bd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b16:	f001 fef5 	bl	8006904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e05c      	b.n	8004bd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d106      	bne.n	8004b32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b24:	f107 0314 	add.w	r3, r7, #20
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f809 	bl	8005b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b32:	f001 fee7 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b36:	f000 fd7b 	bl	8005630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b3a:	f001 feb3 	bl	80068a4 <vPortEnterCritical>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d103      	bne.n	8004b54 <xQueueGenericSend+0x16c>
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b60:	d103      	bne.n	8004b6a <xQueueGenericSend+0x182>
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6a:	f001 fecb 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b6e:	1d3a      	adds	r2, r7, #4
 8004b70:	f107 0314 	add.w	r3, r7, #20
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fff8 	bl	8005b6c <xTaskCheckForTimeOut>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d124      	bne.n	8004bcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b84:	f000 faa2 	bl	80050cc <prvIsQueueFull>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3310      	adds	r3, #16
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 ff1e 	bl	80059d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b9e:	f000 fa2d 	bl	8004ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ba2:	f000 fd53 	bl	800564c <xTaskResumeAll>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f47f af7c 	bne.w	8004aa6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <xQueueGenericSend+0x1f8>)
 8004bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	e772      	b.n	8004aa6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bc2:	f000 fa1b 	bl	8004ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bc6:	f000 fd41 	bl	800564c <xTaskResumeAll>
 8004bca:	e76c      	b.n	8004aa6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bce:	f000 fa15 	bl	8004ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bd2:	f000 fd3b 	bl	800564c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3738      	adds	r7, #56	; 0x38
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b090      	sub	sp, #64	; 0x40
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <xQueueGenericSendFromISR+0x3c>
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <xQueueGenericSendFromISR+0x40>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <xQueueGenericSendFromISR+0x42>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d103      	bne.n	8004c4e <xQueueGenericSendFromISR+0x6a>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <xQueueGenericSendFromISR+0x6e>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <xQueueGenericSendFromISR+0x70>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c6e:	f001 fefb 	bl	8006a68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c72:	f3ef 8211 	mrs	r2, BASEPRI
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61fa      	str	r2, [r7, #28]
 8004c88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <xQueueGenericSendFromISR+0xbc>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d12f      	bne.n	8004d00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cb6:	f000 f911 	bl	8004edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d112      	bne.n	8004cea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	3324      	adds	r3, #36	; 0x24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fed1 	bl	8005a78 <xTaskRemoveFromEventList>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00b      	beq.n	8004cfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e007      	b.n	8004cfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	b25a      	sxtb	r2, r3
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004cfe:	e001      	b.n	8004d04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3740      	adds	r7, #64	; 0x40
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <xQueueReceive+0x30>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	623b      	str	r3, [r7, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <xQueueReceive+0x3e>
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <xQueueReceive+0x42>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <xQueueReceive+0x44>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <xQueueReceive+0x5e>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	61fb      	str	r3, [r7, #28]
}
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d7a:	f001 f83b 	bl	8005df4 <xTaskGetSchedulerState>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d102      	bne.n	8004d8a <xQueueReceive+0x6e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <xQueueReceive+0x72>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueReceive+0x74>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xQueueReceive+0x8e>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	61bb      	str	r3, [r7, #24]
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004daa:	f001 fd7b 	bl	80068a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01f      	beq.n	8004dfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbe:	f000 f8f7 	bl	8004fb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00f      	beq.n	8004df2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fe4e 	bl	8005a78 <xTaskRemoveFromEventList>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004de2:	4b3d      	ldr	r3, [pc, #244]	; (8004ed8 <xQueueReceive+0x1bc>)
 8004de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004df2:	f001 fd87 	bl	8006904 <vPortExitCritical>
				return pdPASS;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e069      	b.n	8004ece <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e00:	f001 fd80 	bl	8006904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e062      	b.n	8004ece <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e0e:	f107 0310 	add.w	r3, r7, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fe94 	bl	8005b40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e1c:	f001 fd72 	bl	8006904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e20:	f000 fc06 	bl	8005630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e24:	f001 fd3e 	bl	80068a4 <vPortEnterCritical>
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d103      	bne.n	8004e3e <xQueueReceive+0x122>
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d103      	bne.n	8004e54 <xQueueReceive+0x138>
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	f001 fd56 	bl	8006904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e58:	1d3a      	adds	r2, r7, #4
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fe83 	bl	8005b6c <xTaskCheckForTimeOut>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d123      	bne.n	8004eb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6e:	f000 f917 	bl	80050a0 <prvIsQueueEmpty>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	3324      	adds	r3, #36	; 0x24
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fda9 	bl	80059d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e88:	f000 f8b8 	bl	8004ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e8c:	f000 fbde 	bl	800564c <xTaskResumeAll>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d189      	bne.n	8004daa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <xQueueReceive+0x1bc>)
 8004e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	e780      	b.n	8004daa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eaa:	f000 f8a7 	bl	8004ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eae:	f000 fbcd 	bl	800564c <xTaskResumeAll>
 8004eb2:	e77a      	b.n	8004daa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb6:	f000 f8a1 	bl	8004ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eba:	f000 fbc7 	bl	800564c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec0:	f000 f8ee 	bl	80050a0 <prvIsQueueEmpty>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f43f af6f 	beq.w	8004daa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ecc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3730      	adds	r7, #48	; 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d14d      	bne.n	8004f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 ff92 	bl	8005e30 <xTaskPriorityDisinherit>
 8004f0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	e043      	b.n	8004f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d119      	bne.n	8004f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6858      	ldr	r0, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	461a      	mov	r2, r3
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	f001 fff4 	bl	8006f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d32b      	bcc.n	8004f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	e026      	b.n	8004f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68d8      	ldr	r0, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	f001 ffda 	bl	8006f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	425b      	negs	r3, r3
 8004f6a:	441a      	add	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d207      	bcs.n	8004f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	425b      	negs	r3, r3
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d105      	bne.n	8004f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d018      	beq.n	8004ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	441a      	add	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68da      	ldr	r2, [r3, #12]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d303      	bcc.n	8004fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68d9      	ldr	r1, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	461a      	mov	r2, r3
 8004fee:	6838      	ldr	r0, [r7, #0]
 8004ff0:	f001 ff90 	bl	8006f14 <memcpy>
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005004:	f001 fc4e 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800500e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005010:	e011      	b.n	8005036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	2b00      	cmp	r3, #0
 8005018:	d012      	beq.n	8005040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3324      	adds	r3, #36	; 0x24
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fd2a 	bl	8005a78 <xTaskRemoveFromEventList>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800502a:	f000 fe01 	bl	8005c30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	3b01      	subs	r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	dce9      	bgt.n	8005012 <prvUnlockQueue+0x16>
 800503e:	e000      	b.n	8005042 <prvUnlockQueue+0x46>
					break;
 8005040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800504a:	f001 fc5b 	bl	8006904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800504e:	f001 fc29 	bl	80068a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800505a:	e011      	b.n	8005080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d012      	beq.n	800508a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3310      	adds	r3, #16
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fd05 	bl	8005a78 <xTaskRemoveFromEventList>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005074:	f000 fddc 	bl	8005c30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005078:	7bbb      	ldrb	r3, [r7, #14]
 800507a:	3b01      	subs	r3, #1
 800507c:	b2db      	uxtb	r3, r3
 800507e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dce9      	bgt.n	800505c <prvUnlockQueue+0x60>
 8005088:	e000      	b.n	800508c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800508a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005094:	f001 fc36 	bl	8006904 <vPortExitCritical>
}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050a8:	f001 fbfc 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e001      	b.n	80050be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050be:	f001 fc21 	bl	8006904 <vPortExitCritical>

	return xReturn;
 80050c2:	68fb      	ldr	r3, [r7, #12]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050d4:	f001 fbe6 	bl	80068a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d102      	bne.n	80050ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e001      	b.n	80050ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ee:	f001 fc09 	bl	8006904 <vPortExitCritical>

	return xReturn;
 80050f2:	68fb      	ldr	r3, [r7, #12]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e014      	b.n	8005136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800510c:	4a0f      	ldr	r2, [pc, #60]	; (800514c <vQueueAddToRegistry+0x50>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005118:	490c      	ldr	r1, [pc, #48]	; (800514c <vQueueAddToRegistry+0x50>)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <vQueueAddToRegistry+0x50>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4413      	add	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800512e:	e006      	b.n	800513e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	3301      	adds	r3, #1
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b07      	cmp	r3, #7
 800513a:	d9e7      	bls.n	800510c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800513c:	bf00      	nop
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	200008cc 	.word	0x200008cc

08005150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005160:	f001 fba0 	bl	80068a4 <vPortEnterCritical>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516a:	b25b      	sxtb	r3, r3
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d103      	bne.n	800517a <vQueueWaitForMessageRestricted+0x2a>
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005180:	b25b      	sxtb	r3, r3
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d103      	bne.n	8005190 <vQueueWaitForMessageRestricted+0x40>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005190:	f001 fbb8 	bl	8006904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3324      	adds	r3, #36	; 0x24
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fc3b 	bl	8005a20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f7ff ff26 	bl	8004ffc <prvUnlockQueue>
	}
 80051b0:	bf00      	nop
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af04      	add	r7, sp, #16
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	623b      	str	r3, [r7, #32]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10a      	bne.n	80051fe <xTaskCreateStatic+0x46>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	61fb      	str	r3, [r7, #28]
}
 80051fa:	bf00      	nop
 80051fc:	e7fe      	b.n	80051fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fe:	235c      	movs	r3, #92	; 0x5c
 8005200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b5c      	cmp	r3, #92	; 0x5c
 8005206:	d00a      	beq.n	800521e <xTaskCreateStatic+0x66>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61bb      	str	r3, [r7, #24]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800521e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01e      	beq.n	8005264 <xTaskCreateStatic+0xac>
 8005226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523e:	2300      	movs	r3, #0
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	f107 0314 	add.w	r3, r7, #20
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 f850 	bl	80052fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800525c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525e:	f000 f8dd 	bl	800541c <prvAddNewTaskToReadyList>
 8005262:	e001      	b.n	8005268 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005268:	697b      	ldr	r3, [r7, #20]
	}
 800526a:	4618      	mov	r0, r3
 800526c:	3728      	adds	r7, #40	; 0x28
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005272:	b580      	push	{r7, lr}
 8005274:	b08c      	sub	sp, #48	; 0x30
 8005276:	af04      	add	r7, sp, #16
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f001 fc2e 	bl	8006ae8 <pvPortMalloc>
 800528c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005294:	205c      	movs	r0, #92	; 0x5c
 8005296:	f001 fc27 	bl	8006ae8 <pvPortMalloc>
 800529a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
 80052a8:	e005      	b.n	80052b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f001 fce8 	bl	8006c80 <vPortFree>
 80052b0:	e001      	b.n	80052b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d017      	beq.n	80052ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c4:	88fa      	ldrh	r2, [r7, #6]
 80052c6:	2300      	movs	r3, #0
 80052c8:	9303      	str	r3, [sp, #12]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9302      	str	r3, [sp, #8]
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f80e 	bl	80052fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052e0:	69f8      	ldr	r0, [r7, #28]
 80052e2:	f000 f89b 	bl	800541c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e6:	2301      	movs	r3, #1
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	e002      	b.n	80052f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052ec:	f04f 33ff 	mov.w	r3, #4294967295
 80052f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052f2:	69bb      	ldr	r3, [r7, #24]
	}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	461a      	mov	r2, r3
 8005314:	21a5      	movs	r1, #165	; 0xa5
 8005316:	f001 fdd1 	bl	8006ebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005324:	3b01      	subs	r3, #1
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f023 0307 	bic.w	r3, r3, #7
 8005332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <prvInitialiseNewTask+0x58>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	617b      	str	r3, [r7, #20]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d01f      	beq.n	800539a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e012      	b.n	8005386 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	7819      	ldrb	r1, [r3, #0]
 8005368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	3334      	adds	r3, #52	; 0x34
 8005370:	460a      	mov	r2, r1
 8005372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d9e9      	bls.n	8005360 <prvInitialiseNewTask+0x64>
 800538c:	e000      	b.n	8005390 <prvInitialiseNewTask+0x94>
			{
				break;
 800538e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005398:	e003      	b.n	80053a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	2b37      	cmp	r3, #55	; 0x37
 80053a6:	d901      	bls.n	80053ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053a8:	2337      	movs	r3, #55	; 0x37
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2200      	movs	r2, #0
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	3304      	adds	r3, #4
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7ff f93e 	bl	8004644 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	3318      	adds	r3, #24
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff f939 	bl	8004644 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	2200      	movs	r2, #0
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	69b8      	ldr	r0, [r7, #24]
 80053fc:	f001 f928 	bl	8006650 <pxPortInitialiseStack>
 8005400:	4602      	mov	r2, r0
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005412:	bf00      	nop
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005424:	f001 fa3e 	bl	80068a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <prvAddNewTaskToReadyList+0xc4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	4a2c      	ldr	r2, [pc, #176]	; (80054e0 <prvAddNewTaskToReadyList+0xc4>)
 8005430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005432:	4b2c      	ldr	r3, [pc, #176]	; (80054e4 <prvAddNewTaskToReadyList+0xc8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800543a:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <prvAddNewTaskToReadyList+0xc8>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <prvAddNewTaskToReadyList+0xc4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d110      	bne.n	800546a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005448:	f000 fc16 	bl	8005c78 <prvInitialiseTaskLists>
 800544c:	e00d      	b.n	800546a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <prvAddNewTaskToReadyList+0xcc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d109      	bne.n	800546a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005456:	4b23      	ldr	r3, [pc, #140]	; (80054e4 <prvAddNewTaskToReadyList+0xc8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	d802      	bhi.n	800546a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005464:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <prvAddNewTaskToReadyList+0xc8>)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <prvAddNewTaskToReadyList+0xd0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <prvAddNewTaskToReadyList+0xd0>)
 8005472:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005474:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <prvAddNewTaskToReadyList+0xd0>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4b1b      	ldr	r3, [pc, #108]	; (80054f0 <prvAddNewTaskToReadyList+0xd4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d903      	bls.n	8005490 <prvAddNewTaskToReadyList+0x74>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <prvAddNewTaskToReadyList+0xd4>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <prvAddNewTaskToReadyList+0xd8>)
 800549e:	441a      	add	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7ff f8d9 	bl	800465e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054ac:	f001 fa2a 	bl	8006904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <prvAddNewTaskToReadyList+0xcc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054b8:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <prvAddNewTaskToReadyList+0xc8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d207      	bcs.n	80054d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <prvAddNewTaskToReadyList+0xdc>)
 80054c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000de0 	.word	0x20000de0
 80054e4:	2000090c 	.word	0x2000090c
 80054e8:	20000dec 	.word	0x20000dec
 80054ec:	20000dfc 	.word	0x20000dfc
 80054f0:	20000de8 	.word	0x20000de8
 80054f4:	20000910 	.word	0x20000910
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d017      	beq.n	800553e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <vTaskDelay+0x60>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <vTaskDelay+0x30>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	60bb      	str	r3, [r7, #8]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800552c:	f000 f880 	bl	8005630 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005530:	2100      	movs	r1, #0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fcea 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005538:	f000 f888 	bl	800564c <xTaskResumeAll>
 800553c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <vTaskDelay+0x64>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000e08 	.word	0x20000e08
 8005560:	e000ed04 	.word	0xe000ed04

08005564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005572:	463a      	mov	r2, r7
 8005574:	1d39      	adds	r1, r7, #4
 8005576:	f107 0308 	add.w	r3, r7, #8
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff f80e 	bl	800459c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	9202      	str	r2, [sp, #8]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2300      	movs	r3, #0
 8005590:	460a      	mov	r2, r1
 8005592:	4921      	ldr	r1, [pc, #132]	; (8005618 <vTaskStartScheduler+0xb4>)
 8005594:	4821      	ldr	r0, [pc, #132]	; (800561c <vTaskStartScheduler+0xb8>)
 8005596:	f7ff fe0f 	bl	80051b8 <xTaskCreateStatic>
 800559a:	4603      	mov	r3, r0
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <vTaskStartScheduler+0xbc>)
 800559e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055a0:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <vTaskStartScheduler+0xbc>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e001      	b.n	80055b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d102      	bne.n	80055be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055b8:	f000 fcfc 	bl	8005fb4 <xTimerCreateTimerTask>
 80055bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d116      	bne.n	80055f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	613b      	str	r3, [r7, #16]
}
 80055d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055d8:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vTaskStartScheduler+0xc0>)
 80055da:	f04f 32ff 	mov.w	r2, #4294967295
 80055de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055e0:	4b11      	ldr	r3, [pc, #68]	; (8005628 <vTaskStartScheduler+0xc4>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055e6:	4b11      	ldr	r3, [pc, #68]	; (800562c <vTaskStartScheduler+0xc8>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ec:	f001 f8b8 	bl	8006760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055f0:	e00e      	b.n	8005610 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d10a      	bne.n	8005610 <vTaskStartScheduler+0xac>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60fb      	str	r3, [r7, #12]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <vTaskStartScheduler+0xaa>
}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08006f78 	.word	0x08006f78
 800561c:	08005c49 	.word	0x08005c49
 8005620:	20000e04 	.word	0x20000e04
 8005624:	20000e00 	.word	0x20000e00
 8005628:	20000dec 	.word	0x20000dec
 800562c:	20000de4 	.word	0x20000de4

08005630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <vTaskSuspendAll+0x18>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	4a03      	ldr	r2, [pc, #12]	; (8005648 <vTaskSuspendAll+0x18>)
 800563c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20000e08 	.word	0x20000e08

0800564c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800565a:	4b42      	ldr	r3, [pc, #264]	; (8005764 <xTaskResumeAll+0x118>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xTaskResumeAll+0x2c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	603b      	str	r3, [r7, #0]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005678:	f001 f914 	bl	80068a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800567c:	4b39      	ldr	r3, [pc, #228]	; (8005764 <xTaskResumeAll+0x118>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3b01      	subs	r3, #1
 8005682:	4a38      	ldr	r2, [pc, #224]	; (8005764 <xTaskResumeAll+0x118>)
 8005684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005686:	4b37      	ldr	r3, [pc, #220]	; (8005764 <xTaskResumeAll+0x118>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d162      	bne.n	8005754 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800568e:	4b36      	ldr	r3, [pc, #216]	; (8005768 <xTaskResumeAll+0x11c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d05e      	beq.n	8005754 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005696:	e02f      	b.n	80056f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005698:	4b34      	ldr	r3, [pc, #208]	; (800576c <xTaskResumeAll+0x120>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3318      	adds	r3, #24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff f837 	bl	8004718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff f832 	bl	8004718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <xTaskResumeAll+0x124>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d903      	bls.n	80056c8 <xTaskResumeAll+0x7c>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <xTaskResumeAll+0x124>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4a27      	ldr	r2, [pc, #156]	; (8005774 <xTaskResumeAll+0x128>)
 80056d6:	441a      	add	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fe ffbd 	bl	800465e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	4b23      	ldr	r3, [pc, #140]	; (8005778 <xTaskResumeAll+0x12c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056f2:	4b22      	ldr	r3, [pc, #136]	; (800577c <xTaskResumeAll+0x130>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056f8:	4b1c      	ldr	r3, [pc, #112]	; (800576c <xTaskResumeAll+0x120>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1cb      	bne.n	8005698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005706:	f000 fb55 	bl	8005db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <xTaskResumeAll+0x134>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d010      	beq.n	8005738 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005716:	f000 f847 	bl	80057a8 <xTaskIncrementTick>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005720:	4b16      	ldr	r3, [pc, #88]	; (800577c <xTaskResumeAll+0x130>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3b01      	subs	r3, #1
 800572a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f1      	bne.n	8005716 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <xTaskResumeAll+0x134>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005738:	4b10      	ldr	r3, [pc, #64]	; (800577c <xTaskResumeAll+0x130>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005744:	4b0f      	ldr	r3, [pc, #60]	; (8005784 <xTaskResumeAll+0x138>)
 8005746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005754:	f001 f8d6 	bl	8006904 <vPortExitCritical>

	return xAlreadyYielded;
 8005758:	68bb      	ldr	r3, [r7, #8]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000e08 	.word	0x20000e08
 8005768:	20000de0 	.word	0x20000de0
 800576c:	20000da0 	.word	0x20000da0
 8005770:	20000de8 	.word	0x20000de8
 8005774:	20000910 	.word	0x20000910
 8005778:	2000090c 	.word	0x2000090c
 800577c:	20000df4 	.word	0x20000df4
 8005780:	20000df0 	.word	0x20000df0
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <xTaskGetTickCount+0x1c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005794:	687b      	ldr	r3, [r7, #4]
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000de4 	.word	0x20000de4

080057a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b2:	4b4f      	ldr	r3, [pc, #316]	; (80058f0 <xTaskIncrementTick+0x148>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808f 	bne.w	80058da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057bc:	4b4d      	ldr	r3, [pc, #308]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c4:	4a4b      	ldr	r2, [pc, #300]	; (80058f4 <xTaskIncrementTick+0x14c>)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d120      	bne.n	8005812 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d0:	4b49      	ldr	r3, [pc, #292]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <xTaskIncrementTick+0x46>
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4b41      	ldr	r3, [pc, #260]	; (80058fc <xTaskIncrementTick+0x154>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a3f      	ldr	r2, [pc, #252]	; (80058f8 <xTaskIncrementTick+0x150>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	4a3f      	ldr	r2, [pc, #252]	; (80058fc <xTaskIncrementTick+0x154>)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <xTaskIncrementTick+0x158>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	4a3d      	ldr	r2, [pc, #244]	; (8005900 <xTaskIncrementTick+0x158>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	f000 fad1 	bl	8005db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005812:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <xTaskIncrementTick+0x15c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d349      	bcc.n	80058b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581c:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <xTaskIncrementTick+0x150>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005826:	4b37      	ldr	r3, [pc, #220]	; (8005904 <xTaskIncrementTick+0x15c>)
 8005828:	f04f 32ff 	mov.w	r2, #4294967295
 800582c:	601a      	str	r2, [r3, #0]
					break;
 800582e:	e03f      	b.n	80058b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005830:	4b31      	ldr	r3, [pc, #196]	; (80058f8 <xTaskIncrementTick+0x150>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d203      	bcs.n	8005850 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005848:	4a2e      	ldr	r2, [pc, #184]	; (8005904 <xTaskIncrementTick+0x15c>)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800584e:	e02f      	b.n	80058b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe ff5f 	bl	8004718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3318      	adds	r3, #24
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe ff56 	bl	8004718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b25      	ldr	r3, [pc, #148]	; (8005908 <xTaskIncrementTick+0x160>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d903      	bls.n	8005880 <xTaskIncrementTick+0xd8>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a22      	ldr	r2, [pc, #136]	; (8005908 <xTaskIncrementTick+0x160>)
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <xTaskIncrementTick+0x164>)
 800588e:	441a      	add	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f7fe fee1 	bl	800465e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <xTaskIncrementTick+0x168>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d3b8      	bcc.n	800581c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ae:	e7b5      	b.n	800581c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058b0:	4b17      	ldr	r3, [pc, #92]	; (8005910 <xTaskIncrementTick+0x168>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b6:	4915      	ldr	r1, [pc, #84]	; (800590c <xTaskIncrementTick+0x164>)
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d901      	bls.n	80058cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <xTaskIncrementTick+0x16c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e004      	b.n	80058e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <xTaskIncrementTick+0x170>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3301      	adds	r3, #1
 80058e0:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <xTaskIncrementTick+0x170>)
 80058e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058e4:	697b      	ldr	r3, [r7, #20]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000e08 	.word	0x20000e08
 80058f4:	20000de4 	.word	0x20000de4
 80058f8:	20000d98 	.word	0x20000d98
 80058fc:	20000d9c 	.word	0x20000d9c
 8005900:	20000df8 	.word	0x20000df8
 8005904:	20000e00 	.word	0x20000e00
 8005908:	20000de8 	.word	0x20000de8
 800590c:	20000910 	.word	0x20000910
 8005910:	2000090c 	.word	0x2000090c
 8005914:	20000df4 	.word	0x20000df4
 8005918:	20000df0 	.word	0x20000df0

0800591c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005922:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <vTaskSwitchContext+0xa8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800592a:	4b27      	ldr	r3, [pc, #156]	; (80059c8 <vTaskSwitchContext+0xac>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005930:	e041      	b.n	80059b6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <vTaskSwitchContext+0xac>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005938:	4b24      	ldr	r3, [pc, #144]	; (80059cc <vTaskSwitchContext+0xb0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	e010      	b.n	8005962 <vTaskSwitchContext+0x46>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <vTaskSwitchContext+0x40>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	607b      	str	r3, [r7, #4]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskSwitchContext+0x3e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b01      	subs	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	491b      	ldr	r1, [pc, #108]	; (80059d0 <vTaskSwitchContext+0xb4>)
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0e4      	beq.n	8005940 <vTaskSwitchContext+0x24>
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a13      	ldr	r2, [pc, #76]	; (80059d0 <vTaskSwitchContext+0xb4>)
 8005982:	4413      	add	r3, r2
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	3308      	adds	r3, #8
 8005998:	429a      	cmp	r2, r3
 800599a:	d104      	bne.n	80059a6 <vTaskSwitchContext+0x8a>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <vTaskSwitchContext+0xb8>)
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4a06      	ldr	r2, [pc, #24]	; (80059cc <vTaskSwitchContext+0xb0>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6013      	str	r3, [r2, #0]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000e08 	.word	0x20000e08
 80059c8:	20000df4 	.word	0x20000df4
 80059cc:	20000de8 	.word	0x20000de8
 80059d0:	20000910 	.word	0x20000910
 80059d4:	2000090c 	.word	0x2000090c

080059d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	60fb      	str	r3, [r7, #12]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <vTaskPlaceOnEventList+0x44>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3318      	adds	r3, #24
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fe fe4d 	bl	80046a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	6838      	ldr	r0, [r7, #0]
 8005a10:	f000 fa7c 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	2000090c 	.word	0x2000090c

08005a20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	617b      	str	r3, [r7, #20]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a48:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3318      	adds	r3, #24
 8005a4e:	4619      	mov	r1, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f7fe fe04 	bl	800465e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	f000 fa51 	bl	8005f0c <prvAddCurrentTaskToDelayedList>
	}
 8005a6a:	bf00      	nop
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2000090c 	.word	0x2000090c

08005a78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	60fb      	str	r3, [r7, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	e7fe      	b.n	8005aa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	3318      	adds	r3, #24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fe35 	bl	8004718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <xTaskRemoveFromEventList+0xb0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11d      	bne.n	8005af2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe2c 	bl	8004718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	4b19      	ldr	r3, [pc, #100]	; (8005b2c <xTaskRemoveFromEventList+0xb4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d903      	bls.n	8005ad4 <xTaskRemoveFromEventList+0x5c>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <xTaskRemoveFromEventList+0xb4>)
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <xTaskRemoveFromEventList+0xb8>)
 8005ae2:	441a      	add	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4610      	mov	r0, r2
 8005aec:	f7fe fdb7 	bl	800465e <vListInsertEnd>
 8005af0:	e005      	b.n	8005afe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3318      	adds	r3, #24
 8005af6:	4619      	mov	r1, r3
 8005af8:	480e      	ldr	r0, [pc, #56]	; (8005b34 <xTaskRemoveFromEventList+0xbc>)
 8005afa:	f7fe fdb0 	bl	800465e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <xTaskRemoveFromEventList+0xc0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d905      	bls.n	8005b18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <xTaskRemoveFromEventList+0xc4>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e001      	b.n	8005b1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000e08 	.word	0x20000e08
 8005b2c:	20000de8 	.word	0x20000de8
 8005b30:	20000910 	.word	0x20000910
 8005b34:	20000da0 	.word	0x20000da0
 8005b38:	2000090c 	.word	0x2000090c
 8005b3c:	20000df4 	.word	0x20000df4

08005b40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <vTaskInternalSetTimeOutState+0x24>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <vTaskInternalSetTimeOutState+0x28>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	605a      	str	r2, [r3, #4]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000df8 	.word	0x20000df8
 8005b68:	20000de4 	.word	0x20000de4

08005b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	613b      	str	r3, [r7, #16]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	60fb      	str	r3, [r7, #12]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005bae:	f000 fe79 	bl	80068a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <xTaskCheckForTimeOut+0xbc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d102      	bne.n	8005bd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e023      	b.n	8005c1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <xTaskCheckForTimeOut+0xc0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d007      	beq.n	8005bee <xTaskCheckForTimeOut+0x82>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e015      	b.n	8005c1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d20b      	bcs.n	8005c10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad2      	subs	r2, r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff9b 	bl	8005b40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
 8005c0e:	e004      	b.n	8005c1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c1a:	f000 fe73 	bl	8006904 <vPortExitCritical>

	return xReturn;
 8005c1e:	69fb      	ldr	r3, [r7, #28]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3720      	adds	r7, #32
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000de4 	.word	0x20000de4
 8005c2c:	20000df8 	.word	0x20000df8

08005c30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c34:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <vTaskMissedYield+0x14>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
}
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000df4 	.word	0x20000df4

08005c48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c50:	f000 f852 	bl	8005cf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <prvIdleTask+0x28>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d9f9      	bls.n	8005c50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <prvIdleTask+0x2c>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c6c:	e7f0      	b.n	8005c50 <prvIdleTask+0x8>
 8005c6e:	bf00      	nop
 8005c70:	20000910 	.word	0x20000910
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	e00c      	b.n	8005c9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <prvInitialiseTaskLists+0x60>)
 8005c90:	4413      	add	r3, r2
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fcb6 	bl	8004604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b37      	cmp	r3, #55	; 0x37
 8005ca2:	d9ef      	bls.n	8005c84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ca4:	480d      	ldr	r0, [pc, #52]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005ca6:	f7fe fcad 	bl	8004604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005caa:	480d      	ldr	r0, [pc, #52]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005cac:	f7fe fcaa 	bl	8004604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cb0:	480c      	ldr	r0, [pc, #48]	; (8005ce4 <prvInitialiseTaskLists+0x6c>)
 8005cb2:	f7fe fca7 	bl	8004604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cb6:	480c      	ldr	r0, [pc, #48]	; (8005ce8 <prvInitialiseTaskLists+0x70>)
 8005cb8:	f7fe fca4 	bl	8004604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005cbc:	480b      	ldr	r0, [pc, #44]	; (8005cec <prvInitialiseTaskLists+0x74>)
 8005cbe:	f7fe fca1 	bl	8004604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <prvInitialiseTaskLists+0x78>)
 8005cc4:	4a05      	ldr	r2, [pc, #20]	; (8005cdc <prvInitialiseTaskLists+0x64>)
 8005cc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <prvInitialiseTaskLists+0x7c>)
 8005cca:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <prvInitialiseTaskLists+0x68>)
 8005ccc:	601a      	str	r2, [r3, #0]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000910 	.word	0x20000910
 8005cdc:	20000d70 	.word	0x20000d70
 8005ce0:	20000d84 	.word	0x20000d84
 8005ce4:	20000da0 	.word	0x20000da0
 8005ce8:	20000db4 	.word	0x20000db4
 8005cec:	20000dcc 	.word	0x20000dcc
 8005cf0:	20000d98 	.word	0x20000d98
 8005cf4:	20000d9c 	.word	0x20000d9c

08005cf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cfe:	e019      	b.n	8005d34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d00:	f000 fdd0 	bl	80068a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <prvCheckTasksWaitingTermination+0x50>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fd01 	bl	8004718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4a0b      	ldr	r2, [pc, #44]	; (8005d4c <prvCheckTasksWaitingTermination+0x54>)
 8005d1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d2a:	f000 fdeb 	bl	8006904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f810 	bl	8005d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d34:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <prvCheckTasksWaitingTermination+0x58>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e1      	bne.n	8005d00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000db4 	.word	0x20000db4
 8005d4c:	20000de0 	.word	0x20000de0
 8005d50:	20000dc8 	.word	0x20000dc8

08005d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d108      	bne.n	8005d78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff88 	bl	8006c80 <vPortFree>
				vPortFree( pxTCB );
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 ff85 	bl	8006c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d76:	e018      	b.n	8005daa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d103      	bne.n	8005d8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 ff7c 	bl	8006c80 <vPortFree>
	}
 8005d88:	e00f      	b.n	8005daa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d00a      	beq.n	8005daa <prvDeleteTCB+0x56>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	60fb      	str	r3, [r7, #12]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <prvDeleteTCB+0x54>
	}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005dcc:	e008      	b.n	8005de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvResetNextTaskUnblockTime+0x38>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <prvResetNextTaskUnblockTime+0x3c>)
 8005dde:	6013      	str	r3, [r2, #0]
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	20000d98 	.word	0x20000d98
 8005df0:	20000e00 	.word	0x20000e00

08005df4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <xTaskGetSchedulerState+0x34>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d102      	bne.n	8005e08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e02:	2301      	movs	r3, #1
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	e008      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <xTaskGetSchedulerState+0x38>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e10:	2302      	movs	r3, #2
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	e001      	b.n	8005e1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e1a:	687b      	ldr	r3, [r7, #4]
	}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	20000dec 	.word	0x20000dec
 8005e2c:	20000e08 	.word	0x20000e08

08005e30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d056      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e46:	4b2e      	ldr	r3, [pc, #184]	; (8005f00 <xTaskPriorityDisinherit+0xd0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10a      	bne.n	8005e84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60bb      	str	r3, [r7, #8]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e88:	1e5a      	subs	r2, r3, #1
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d02c      	beq.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d128      	bne.n	8005ef4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fe fc36 	bl	8004718 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec4:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <xTaskPriorityDisinherit+0xd4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <xTaskPriorityDisinherit+0xa4>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <xTaskPriorityDisinherit+0xd4>)
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4a09      	ldr	r2, [pc, #36]	; (8005f08 <xTaskPriorityDisinherit+0xd8>)
 8005ee2:	441a      	add	r2, r3
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7fe fbb7 	bl	800465e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ef4:	697b      	ldr	r3, [r7, #20]
	}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000090c 	.word	0x2000090c
 8005f04:	20000de8 	.word	0x20000de8
 8005f08:	20000910 	.word	0x20000910

08005f0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f16:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1c:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fe fbf8 	bl	8004718 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d10a      	bne.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4819      	ldr	r0, [pc, #100]	; (8005fa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f40:	f7fe fb8d 	bl	800465e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f44:	e026      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d209      	bcs.n	8005f72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fb9b 	bl	80046a6 <vListInsert>
}
 8005f70:	e010      	b.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f72:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fb91 	bl	80046a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d202      	bcs.n	8005f94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f8e:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000de4 	.word	0x20000de4
 8005fa0:	2000090c 	.word	0x2000090c
 8005fa4:	20000dcc 	.word	0x20000dcc
 8005fa8:	20000d9c 	.word	0x20000d9c
 8005fac:	20000d98 	.word	0x20000d98
 8005fb0:	20000e00 	.word	0x20000e00

08005fb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fbe:	f000 fb07 	bl	80065d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fc2:	4b1c      	ldr	r3, [pc, #112]	; (8006034 <xTimerCreateTimerTask+0x80>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d021      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fd2:	1d3a      	adds	r2, r7, #4
 8005fd4:	f107 0108 	add.w	r1, r7, #8
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fe faf7 	bl	80045d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	2302      	movs	r3, #2
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	4910      	ldr	r1, [pc, #64]	; (8006038 <xTimerCreateTimerTask+0x84>)
 8005ff6:	4811      	ldr	r0, [pc, #68]	; (800603c <xTimerCreateTimerTask+0x88>)
 8005ff8:	f7ff f8de 	bl	80051b8 <xTaskCreateStatic>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4a10      	ldr	r2, [pc, #64]	; (8006040 <xTimerCreateTimerTask+0x8c>)
 8006000:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <xTimerCreateTimerTask+0x8c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800600a:	2301      	movs	r3, #1
 800600c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	613b      	str	r3, [r7, #16]
}
 8006026:	bf00      	nop
 8006028:	e7fe      	b.n	8006028 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000e3c 	.word	0x20000e3c
 8006038:	08006f80 	.word	0x08006f80
 800603c:	08006179 	.word	0x08006179
 8006040:	20000e40 	.word	0x20000e40

08006044 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08a      	sub	sp, #40	; 0x28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xTimerGenericCommand+0x2e>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	623b      	str	r3, [r7, #32]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <xTimerGenericCommand+0x98>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d02a      	beq.n	80060d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b05      	cmp	r3, #5
 800608a:	dc18      	bgt.n	80060be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800608c:	f7ff feb2 	bl	8005df4 <xTaskGetSchedulerState>
 8006090:	4603      	mov	r3, r0
 8006092:	2b02      	cmp	r3, #2
 8006094:	d109      	bne.n	80060aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <xTimerGenericCommand+0x98>)
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	f107 0110 	add.w	r1, r7, #16
 800609e:	2300      	movs	r3, #0
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	f7fe fca1 	bl	80049e8 <xQueueGenericSend>
 80060a6:	6278      	str	r0, [r7, #36]	; 0x24
 80060a8:	e012      	b.n	80060d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <xTimerGenericCommand+0x98>)
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	f107 0110 	add.w	r1, r7, #16
 80060b2:	2300      	movs	r3, #0
 80060b4:	2200      	movs	r2, #0
 80060b6:	f7fe fc97 	bl	80049e8 <xQueueGenericSend>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24
 80060bc:	e008      	b.n	80060d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060be:	4b07      	ldr	r3, [pc, #28]	; (80060dc <xTimerGenericCommand+0x98>)
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f107 0110 	add.w	r1, r7, #16
 80060c6:	2300      	movs	r3, #0
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	f7fe fd8b 	bl	8004be4 <xQueueGenericSendFromISR>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000e3c 	.word	0x20000e3c

080060e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <prvProcessExpiredTimer+0x94>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fb0d 	bl	8004718 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	18d1      	adds	r1, r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	6978      	ldr	r0, [r7, #20]
 800611a:	f000 f8d1 	bl	80062c0 <prvInsertTimerInActiveList>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006124:	2300      	movs	r3, #0
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2300      	movs	r3, #0
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	2100      	movs	r1, #0
 800612e:	6978      	ldr	r0, [r7, #20]
 8006130:	f7ff ff88 	bl	8006044 <xTimerGenericCommand>
 8006134:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d113      	bne.n	8006164 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	60fb      	str	r3, [r7, #12]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	b2da      	uxtb	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	6978      	ldr	r0, [r7, #20]
 800616a:	4798      	blx	r3
}
 800616c:	bf00      	nop
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000e34 	.word	0x20000e34

08006178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	4618      	mov	r0, r3
 8006186:	f000 f857 	bl	8006238 <prvGetNextExpireTime>
 800618a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 f803 	bl	800619c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006196:	f000 f8d5 	bl	8006344 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800619a:	e7f1      	b.n	8006180 <prvTimerTask+0x8>

0800619c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061a6:	f7ff fa43 	bl	8005630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061aa:	f107 0308 	add.w	r3, r7, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f866 	bl	8006280 <prvSampleTimeNow>
 80061b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d130      	bne.n	800621e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <prvProcessTimerOrBlockTask+0x3c>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d806      	bhi.n	80061d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061ca:	f7ff fa3f 	bl	800564c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff85 	bl	80060e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061d6:	e024      	b.n	8006222 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <prvProcessTimerOrBlockTask+0x90>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <prvProcessTimerOrBlockTask+0x50>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e000      	b.n	80061ee <prvProcessTimerOrBlockTask+0x52>
 80061ec:	2300      	movs	r3, #0
 80061ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80061f0:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <prvProcessTimerOrBlockTask+0x94>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f7fe ffa7 	bl	8005150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006202:	f7ff fa23 	bl	800564c <xTaskResumeAll>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <prvProcessTimerOrBlockTask+0x98>)
 800620e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	f3bf 8f6f 	isb	sy
}
 800621c:	e001      	b.n	8006222 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800621e:	f7ff fa15 	bl	800564c <xTaskResumeAll>
}
 8006222:	bf00      	nop
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20000e38 	.word	0x20000e38
 8006230:	20000e3c 	.word	0x20000e3c
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <prvGetNextExpireTime+0x44>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <prvGetNextExpireTime+0x16>
 800624a:	2201      	movs	r2, #1
 800624c:	e000      	b.n	8006250 <prvGetNextExpireTime+0x18>
 800624e:	2200      	movs	r2, #0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <prvGetNextExpireTime+0x44>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e001      	b.n	800626c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000e34 	.word	0x20000e34

08006280 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006288:	f7ff fa7e 	bl	8005788 <xTaskGetTickCount>
 800628c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <prvSampleTimeNow+0x3c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	429a      	cmp	r2, r3
 8006296:	d205      	bcs.n	80062a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006298:	f000 f936 	bl	8006508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e002      	b.n	80062aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062aa:	4a04      	ldr	r2, [pc, #16]	; (80062bc <prvSampleTimeNow+0x3c>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062b0:	68fb      	ldr	r3, [r7, #12]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000e44 	.word	0x20000e44

080062c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d812      	bhi.n	800630c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d302      	bcc.n	80062fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80062f4:	2301      	movs	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e01b      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <prvInsertTimerInActiveList+0x7c>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fe f9ce 	bl	80046a6 <vListInsert>
 800630a:	e012      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	429a      	cmp	r2, r3
 8006312:	d206      	bcs.n	8006322 <prvInsertTimerInActiveList+0x62>
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e007      	b.n	8006332 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <prvInsertTimerInActiveList+0x80>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7fe f9ba 	bl	80046a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006332:	697b      	ldr	r3, [r7, #20]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000e38 	.word	0x20000e38
 8006340:	20000e34 	.word	0x20000e34

08006344 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	; 0x38
 8006348:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800634a:	e0ca      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	da18      	bge.n	8006384 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	3304      	adds	r3, #4
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10a      	bne.n	8006374 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61fb      	str	r3, [r7, #28]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637a:	6850      	ldr	r0, [r2, #4]
 800637c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637e:	6892      	ldr	r2, [r2, #8]
 8006380:	4611      	mov	r1, r2
 8006382:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f2c0 80ab 	blt.w	80064e2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	3304      	adds	r3, #4
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe f9bb 	bl	8004718 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063a2:	463b      	mov	r3, r7
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff6b 	bl	8006280 <prvSampleTimeNow>
 80063aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	f200 8096 	bhi.w	80064e0 <prvProcessReceivedCommands+0x19c>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <prvProcessReceivedCommands+0x78>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063e5 	.word	0x080063e5
 80063c4:	080063e5 	.word	0x080063e5
 80063c8:	08006459 	.word	0x08006459
 80063cc:	0800646d 	.word	0x0800646d
 80063d0:	080064b7 	.word	0x080064b7
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	080063e5 	.word	0x080063e5
 80063dc:	08006459 	.word	0x08006459
 80063e0:	0800646d 	.word	0x0800646d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ea:	f043 0301 	orr.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	18d1      	adds	r1, r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006404:	f7ff ff5c 	bl	80062c0 <prvInsertTimerInActiveList>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d069      	beq.n	80064e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05e      	beq.n	80064e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	441a      	add	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	2300      	movs	r3, #0
 8006432:	2100      	movs	r1, #0
 8006434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006436:	f7ff fe05 	bl	8006044 <xTimerGenericCommand>
 800643a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d14f      	bne.n	80064e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	61bb      	str	r3, [r7, #24]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800646a:	e03a      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	617b      	str	r3, [r7, #20]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	18d1      	adds	r1, r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b0:	f7ff ff06 	bl	80062c0 <prvInsertTimerInActiveList>
					break;
 80064b4:	e015      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c6:	f000 fbdb 	bl	8006c80 <vPortFree>
 80064ca:	e00a      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d2:	f023 0301 	bic.w	r3, r3, #1
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064de:	e000      	b.n	80064e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80064e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <prvProcessReceivedCommands+0x1c0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1d39      	adds	r1, r7, #4
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fc16 	bl	8004d1c <xQueueReceive>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f47f af2a 	bne.w	800634c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000e3c 	.word	0x20000e3c

08006508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800650e:	e048      	b.n	80065a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651a:	4b2b      	ldr	r3, [pc, #172]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3304      	adds	r3, #4
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe f8f5 	bl	8004718 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d02e      	beq.n	80065a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d90e      	bls.n	8006574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe f89a 	bl	80046a6 <vListInsert>
 8006572:	e016      	b.n	80065a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006574:	2300      	movs	r3, #0
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	2300      	movs	r3, #0
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fd60 	bl	8006044 <xTimerGenericCommand>
 8006584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	603b      	str	r3, [r7, #0]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1b1      	bne.n	8006510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065ac:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <prvSwitchTimerLists+0xc4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a04      	ldr	r2, [pc, #16]	; (80065c8 <prvSwitchTimerLists+0xc0>)
 80065b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ba:	4a04      	ldr	r2, [pc, #16]	; (80065cc <prvSwitchTimerLists+0xc4>)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	6013      	str	r3, [r2, #0]
}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000e34 	.word	0x20000e34
 80065cc:	20000e38 	.word	0x20000e38

080065d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065d6:	f000 f965 	bl	80068a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d120      	bne.n	8006624 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065e2:	4814      	ldr	r0, [pc, #80]	; (8006634 <prvCheckForValidListAndQueue+0x64>)
 80065e4:	f7fe f80e 	bl	8004604 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065e8:	4813      	ldr	r0, [pc, #76]	; (8006638 <prvCheckForValidListAndQueue+0x68>)
 80065ea:	f7fe f80b 	bl	8004604 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065ee:	4b13      	ldr	r3, [pc, #76]	; (800663c <prvCheckForValidListAndQueue+0x6c>)
 80065f0:	4a10      	ldr	r2, [pc, #64]	; (8006634 <prvCheckForValidListAndQueue+0x64>)
 80065f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <prvCheckForValidListAndQueue+0x70>)
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <prvCheckForValidListAndQueue+0x68>)
 80065f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <prvCheckForValidListAndQueue+0x74>)
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <prvCheckForValidListAndQueue+0x78>)
 8006602:	2110      	movs	r1, #16
 8006604:	200a      	movs	r0, #10
 8006606:	f7fe f919 	bl	800483c <xQueueGenericCreateStatic>
 800660a:	4603      	mov	r3, r0
 800660c:	4a08      	ldr	r2, [pc, #32]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 800660e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <prvCheckForValidListAndQueue+0x60>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	490b      	ldr	r1, [pc, #44]	; (800664c <prvCheckForValidListAndQueue+0x7c>)
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe fd6c 	bl	80050fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006624:	f000 f96e 	bl	8006904 <vPortExitCritical>
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000e3c 	.word	0x20000e3c
 8006634:	20000e0c 	.word	0x20000e0c
 8006638:	20000e20 	.word	0x20000e20
 800663c:	20000e34 	.word	0x20000e34
 8006640:	20000e38 	.word	0x20000e38
 8006644:	20000ee8 	.word	0x20000ee8
 8006648:	20000e48 	.word	0x20000e48
 800664c:	08006f88 	.word	0x08006f88

08006650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3b04      	subs	r3, #4
 8006660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3b04      	subs	r3, #4
 800666e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f023 0201 	bic.w	r2, r3, #1
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3b04      	subs	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006680:	4a0c      	ldr	r2, [pc, #48]	; (80066b4 <pxPortInitialiseStack+0x64>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3b14      	subs	r3, #20
 800668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f06f 0202 	mvn.w	r2, #2
 800669e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b20      	subs	r3, #32
 80066a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066a6:	68fb      	ldr	r3, [r7, #12]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	080066b9 	.word	0x080066b9

080066b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <prvTaskExitError+0x54>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ca:	d00a      	beq.n	80066e2 <prvTaskExitError+0x2a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	60fb      	str	r3, [r7, #12]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <prvTaskExitError+0x28>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066f6:	bf00      	nop
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0fc      	beq.n	80066f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	2000000c 	.word	0x2000000c

08006710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <pxCurrentTCBConst2>)
 8006712:	6819      	ldr	r1, [r3, #0]
 8006714:	6808      	ldr	r0, [r1, #0]
 8006716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f380 8809 	msr	PSP, r0
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	4770      	bx	lr
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst2>:
 8006730:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006738:	4808      	ldr	r0, [pc, #32]	; (800675c <prvPortStartFirstTask+0x24>)
 800673a:	6800      	ldr	r0, [r0, #0]
 800673c:	6800      	ldr	r0, [r0, #0]
 800673e:	f380 8808 	msr	MSP, r0
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8814 	msr	CONTROL, r0
 800674a:	b662      	cpsie	i
 800674c:	b661      	cpsie	f
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	df00      	svc	0
 8006758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800675a:	bf00      	nop
 800675c:	e000ed08 	.word	0xe000ed08

08006760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006766:	4b46      	ldr	r3, [pc, #280]	; (8006880 <xPortStartScheduler+0x120>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a46      	ldr	r2, [pc, #280]	; (8006884 <xPortStartScheduler+0x124>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10a      	bne.n	8006786 <xPortStartScheduler+0x26>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	613b      	str	r3, [r7, #16]
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006786:	4b3e      	ldr	r3, [pc, #248]	; (8006880 <xPortStartScheduler+0x120>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <xPortStartScheduler+0x128>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10a      	bne.n	80067a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60fb      	str	r3, [r7, #12]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067a6:	4b39      	ldr	r3, [pc, #228]	; (800688c <xPortStartScheduler+0x12c>)
 80067a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4b31      	ldr	r3, [pc, #196]	; (8006890 <xPortStartScheduler+0x130>)
 80067cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ce:	4b31      	ldr	r3, [pc, #196]	; (8006894 <xPortStartScheduler+0x134>)
 80067d0:	2207      	movs	r2, #7
 80067d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067d4:	e009      	b.n	80067ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067d6:	4b2f      	ldr	r3, [pc, #188]	; (8006894 <xPortStartScheduler+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	3b01      	subs	r3, #1
 80067dc:	4a2d      	ldr	r2, [pc, #180]	; (8006894 <xPortStartScheduler+0x134>)
 80067de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d0ef      	beq.n	80067d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067f6:	4b27      	ldr	r3, [pc, #156]	; (8006894 <xPortStartScheduler+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1c3 0307 	rsb	r3, r3, #7
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00a      	beq.n	8006818 <xPortStartScheduler+0xb8>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60bb      	str	r3, [r7, #8]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006818:	4b1e      	ldr	r3, [pc, #120]	; (8006894 <xPortStartScheduler+0x134>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	021b      	lsls	r3, r3, #8
 800681e:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <xPortStartScheduler+0x134>)
 8006820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006822:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <xPortStartScheduler+0x134>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800682a:	4a1a      	ldr	r2, [pc, #104]	; (8006894 <xPortStartScheduler+0x134>)
 800682c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006836:	4b18      	ldr	r3, [pc, #96]	; (8006898 <xPortStartScheduler+0x138>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a17      	ldr	r2, [pc, #92]	; (8006898 <xPortStartScheduler+0x138>)
 800683c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006842:	4b15      	ldr	r3, [pc, #84]	; (8006898 <xPortStartScheduler+0x138>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a14      	ldr	r2, [pc, #80]	; (8006898 <xPortStartScheduler+0x138>)
 8006848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800684c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800684e:	f000 f8dd 	bl	8006a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <xPortStartScheduler+0x13c>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006858:	f000 f8fc 	bl	8006a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800685c:	4b10      	ldr	r3, [pc, #64]	; (80068a0 <xPortStartScheduler+0x140>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <xPortStartScheduler+0x140>)
 8006862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006868:	f7ff ff66 	bl	8006738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800686c:	f7ff f856 	bl	800591c <vTaskSwitchContext>
	prvTaskExitError();
 8006870:	f7ff ff22 	bl	80066b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	e000ed00 	.word	0xe000ed00
 8006884:	410fc271 	.word	0x410fc271
 8006888:	410fc270 	.word	0x410fc270
 800688c:	e000e400 	.word	0xe000e400
 8006890:	20000f38 	.word	0x20000f38
 8006894:	20000f3c 	.word	0x20000f3c
 8006898:	e000ed20 	.word	0xe000ed20
 800689c:	2000000c 	.word	0x2000000c
 80068a0:	e000ef34 	.word	0xe000ef34

080068a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	607b      	str	r3, [r7, #4]
}
 80068bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <vPortEnterCritical+0x58>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <vPortEnterCritical+0x58>)
 80068c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068c8:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <vPortEnterCritical+0x58>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10f      	bne.n	80068f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068d0:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortEnterCritical+0x5c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	603b      	str	r3, [r7, #0]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vPortEnterCritical+0x4a>
	}
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	2000000c 	.word	0x2000000c
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <vPortExitCritical+0x50>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <vPortExitCritical+0x24>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <vPortExitCritical+0x50>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	4a09      	ldr	r2, [pc, #36]	; (8006954 <vPortExitCritical+0x50>)
 8006930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <vPortExitCritical+0x50>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <vPortExitCritical+0x42>
 800693a:	2300      	movs	r3, #0
 800693c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f383 8811 	msr	BASEPRI, r3
}
 8006944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000000c 	.word	0x2000000c
	...

08006960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006960:	f3ef 8009 	mrs	r0, PSP
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4b15      	ldr	r3, [pc, #84]	; (80069c0 <pxCurrentTCBConst>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	f01e 0f10 	tst.w	lr, #16
 8006970:	bf08      	it	eq
 8006972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	6010      	str	r0, [r2, #0]
 800697c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006984:	f380 8811 	msr	BASEPRI, r0
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f7fe ffc4 	bl	800591c <vTaskSwitchContext>
 8006994:	f04f 0000 	mov.w	r0, #0
 8006998:	f380 8811 	msr	BASEPRI, r0
 800699c:	bc09      	pop	{r0, r3}
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	6808      	ldr	r0, [r1, #0]
 80069a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a6:	f01e 0f10 	tst.w	lr, #16
 80069aa:	bf08      	it	eq
 80069ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069b0:	f380 8809 	msr	PSP, r0
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst>:
 80069c0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	607b      	str	r3, [r7, #4]
}
 80069e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069e2:	f7fe fee1 	bl	80057a8 <xTaskIncrementTick>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <xPortSysTickHandler+0x40>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	2300      	movs	r3, #0
 80069f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <vPortSetupTimerInterrupt+0x38>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a1c:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <vPortSetupTimerInterrupt+0x3c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a0a      	ldr	r2, [pc, #40]	; (8006a4c <vPortSetupTimerInterrupt+0x40>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	4a09      	ldr	r2, [pc, #36]	; (8006a50 <vPortSetupTimerInterrupt+0x44>)
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <vPortSetupTimerInterrupt+0x34>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	e000e010 	.word	0xe000e010
 8006a44:	e000e018 	.word	0xe000e018
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	10624dd3 	.word	0x10624dd3
 8006a50:	e000e014 	.word	0xe000e014

08006a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a64 <vPortEnableVFP+0x10>
 8006a58:	6801      	ldr	r1, [r0, #0]
 8006a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a5e:	6001      	str	r1, [r0, #0]
 8006a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a62:	bf00      	nop
 8006a64:	e000ed88 	.word	0xe000ed88

08006a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a6e:	f3ef 8305 	mrs	r3, IPSR
 8006a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d914      	bls.n	8006aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a7a:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <vPortValidateInterruptPriority+0x70>)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <vPortValidateInterruptPriority+0x74>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	7afa      	ldrb	r2, [r7, #11]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d20a      	bcs.n	8006aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <vPortValidateInterruptPriority+0x78>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <vPortValidateInterruptPriority+0x7c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d90a      	bls.n	8006aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	603b      	str	r3, [r7, #0]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <vPortValidateInterruptPriority+0x60>
	}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000e3f0 	.word	0xe000e3f0
 8006adc:	20000f38 	.word	0x20000f38
 8006ae0:	e000ed0c 	.word	0xe000ed0c
 8006ae4:	20000f3c 	.word	0x20000f3c

08006ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006af4:	f7fe fd9c 	bl	8005630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006af8:	4b5b      	ldr	r3, [pc, #364]	; (8006c68 <pvPortMalloc+0x180>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b00:	f000 f920 	bl	8006d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <pvPortMalloc+0x184>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8093 	bne.w	8006c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01d      	beq.n	8006b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b18:	2208      	movs	r2, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d014      	beq.n	8006b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <pvPortMalloc+0x6c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	617b      	str	r3, [r7, #20]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06e      	beq.n	8006c38 <pvPortMalloc+0x150>
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d869      	bhi.n	8006c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6e:	e004      	b.n	8006b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <pvPortMalloc+0xa4>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f1      	bne.n	8006b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b8c:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <pvPortMalloc+0x180>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d050      	beq.n	8006c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d91f      	bls.n	8006bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	613b      	str	r3, [r7, #16]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f000 f908 	bl	8006e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <pvPortMalloc+0x188>)
 8006c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <pvPortMalloc+0x188>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <pvPortMalloc+0x190>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d203      	bcs.n	8006c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <pvPortMalloc+0x188>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <pvPortMalloc+0x190>)
 8006c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <pvPortMalloc+0x184>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x194>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <pvPortMalloc+0x194>)
 8006c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c38:	f7fe fd08 	bl	800564c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <pvPortMalloc+0x174>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <pvPortMalloc+0x172>
	return pvReturn;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001b00 	.word	0x20001b00
 8006c6c:	20001b14 	.word	0x20001b14
 8006c70:	20001b04 	.word	0x20001b04
 8006c74:	20001af8 	.word	0x20001af8
 8006c78:	20001b08 	.word	0x20001b08
 8006c7c:	20001b0c 	.word	0x20001b0c

08006c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04d      	beq.n	8006d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c92:	2308      	movs	r3, #8
 8006c94:	425b      	negs	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vPortFree+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <vPortFree+0x44>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <vPortFree+0x62>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <vPortFree+0xb8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11a      	bne.n	8006d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <vPortFree+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7fe fc92 	bl	8005630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <vPortFree+0xbc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vPortFree+0xbc>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f874 	bl	8006e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vPortFree+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <vPortFree+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d2a:	f7fe fc8f 	bl	800564c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20001b14 	.word	0x20001b14
 8006d3c:	20001b04 	.word	0x20001b04
 8006d40:	20001b10 	.word	0x20001b10

08006d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <prvHeapInit+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <prvHeapInit+0xac>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <prvHeapInit+0xb0>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <prvHeapInit+0xb0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d90:	2208      	movs	r2, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <prvHeapInit+0xb4>)
 8006da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvHeapInit+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvHeapInit+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvHeapInit+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvHeapInit+0xb8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <prvHeapInit+0xbc>)
 8006dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvHeapInit+0xc0>)
 8006dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000f40 	.word	0x20000f40
 8006df4:	20001af8 	.word	0x20001af8
 8006df8:	20001b00 	.word	0x20001b00
 8006dfc:	20001b08 	.word	0x20001b08
 8006e00:	20001b04 	.word	0x20001b04
 8006e04:	20001b14 	.word	0x20001b14

08006e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvInsertBlockIntoFreeList+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d8f7      	bhi.n	8006e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d118      	bne.n	8006e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e008      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20001af8 	.word	0x20001af8
 8006eb8:	20001b00 	.word	0x20001b00

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4d0d      	ldr	r5, [pc, #52]	; (8006f04 <__libc_init_array+0x38>)
 8006ed0:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	42a6      	cmp	r6, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	4d0b      	ldr	r5, [pc, #44]	; (8006f0c <__libc_init_array+0x40>)
 8006ede:	4c0c      	ldr	r4, [pc, #48]	; (8006f10 <__libc_init_array+0x44>)
 8006ee0:	f000 f826 	bl	8006f30 <_init>
 8006ee4:	1b64      	subs	r4, r4, r5
 8006ee6:	10a4      	asrs	r4, r4, #2
 8006ee8:	2600      	movs	r6, #0
 8006eea:	42a6      	cmp	r6, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef4:	4798      	blx	r3
 8006ef6:	3601      	adds	r6, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efe:	4798      	blx	r3
 8006f00:	3601      	adds	r6, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	08007040 	.word	0x08007040
 8006f08:	08007040 	.word	0x08007040
 8006f0c:	08007040 	.word	0x08007040
 8006f10:	08007044 	.word	0x08007044

08006f14 <memcpy>:
 8006f14:	440a      	add	r2, r1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	4770      	bx	lr
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d1f9      	bne.n	8006f22 <memcpy+0xe>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
