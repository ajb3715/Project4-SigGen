
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800fa68  0800fa68  0001fa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104f0  080104f0  000305dc  2**0
                  CONTENTS
  4 .ARM          00000008  080104f0  080104f0  000204f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104f8  080104f8  000305dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104f8  080104f8  000204f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104fc  080104fc  000204fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  08010500  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  200005dc  08010adc  000305dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  08010adc  00034844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e016  00000000  00000000  0003064f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f9  00000000  00000000  0004e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00052760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001403  00000000  00000000  00054138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3fd  00000000  00000000  0005553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d68d  00000000  00000000  0007f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001019c6  00000000  00000000  0009cfc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000852c  00000000  00000000  0019e98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001a6eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005dc 	.word	0x200005dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa50 	.word	0x0800fa50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e0 	.word	0x200005e0
 80001cc:	0800fa50 	.word	0x0800fa50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_noise>:
    1701, 1690, 1690, 1701, 1690, 1690, 1701, 1701, 1701, 1701, 1722, 1722, 1712, 1722, 1722, 1733,
    1733, 1733, 1733, 1712, 1712, 1712, 1733, 1733, 1733, 1733, 1733, 1733, 1744, 1744, 1744, 1744,
    1744, 1744, 1733, 1733, 1722, 1722, 1722, 1722, 1722, 1722, 1733, 1722, 1722, 1722, 1722, 1722,
    1701, 1669, 1669, 1680, 1690, 1690, 1690, 1701, 1701, 1712, 1712, 1712, 1690, 1669, 1669, 1680
};
uint16_t get_noise(int noise){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	switch(noise){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d83a      	bhi.n	8001074 <get_noise+0x84>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <get_noise+0x14>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	0800103d 	.word	0x0800103d
 800100c:	08001041 	.word	0x08001041
 8001010:	08001045 	.word	0x08001045
 8001014:	08001049 	.word	0x08001049
 8001018:	0800104d 	.word	0x0800104d
 800101c:	08001051 	.word	0x08001051
 8001020:	08001055 	.word	0x08001055
 8001024:	08001059 	.word	0x08001059
 8001028:	0800105d 	.word	0x0800105d
 800102c:	08001063 	.word	0x08001063
 8001030:	08001069 	.word	0x08001069
 8001034:	0800106f 	.word	0x0800106f
		case(0):
			return (uint16_t)0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	e01c      	b.n	8001076 <get_noise+0x86>
			break;
		case(1):
			return (uint16_t)0x01;
 800103c:	2301      	movs	r3, #1
 800103e:	e01a      	b.n	8001076 <get_noise+0x86>
			break;
		case(2):
			return (uint16_t)0x03;
 8001040:	2303      	movs	r3, #3
 8001042:	e018      	b.n	8001076 <get_noise+0x86>
			break;
		case(3):
			return (uint16_t)0x07;
 8001044:	2307      	movs	r3, #7
 8001046:	e016      	b.n	8001076 <get_noise+0x86>
			break;
		case(4):
			return (uint16_t)0x0F;
 8001048:	230f      	movs	r3, #15
 800104a:	e014      	b.n	8001076 <get_noise+0x86>
			break;
		case(5):
			return (uint16_t)0x1F;
 800104c:	231f      	movs	r3, #31
 800104e:	e012      	b.n	8001076 <get_noise+0x86>
			break;
		case(6):
			return (uint16_t)0x3F;
 8001050:	233f      	movs	r3, #63	; 0x3f
 8001052:	e010      	b.n	8001076 <get_noise+0x86>
			break;
		case(7):
			return (uint16_t)0x7F;
 8001054:	237f      	movs	r3, #127	; 0x7f
 8001056:	e00e      	b.n	8001076 <get_noise+0x86>
			break;
		case(8):
			return (uint16_t)0xFF;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	e00c      	b.n	8001076 <get_noise+0x86>
			break;
		case(9):
			return (uint16_t)0x1FF;
 800105c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001060:	e009      	b.n	8001076 <get_noise+0x86>
			break;
		case(10):
			return (uint16_t)0x3FF;
 8001062:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001066:	e006      	b.n	8001076 <get_noise+0x86>
			break;
		case(11):
			return (uint16_t)0x7FF;
 8001068:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800106c:	e003      	b.n	8001076 <get_noise+0x86>
			break;
		case(12):
			return (uint16_t)0xFFF;
 800106e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001072:	e000      	b.n	8001076 <get_noise+0x86>
			break;
		default:
			return (uint16_t) 0;
 8001074:	2300      	movs	r3, #0

	}

}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	0000      	movs	r0, r0
	...

08001088 <init_DC>:
void init_DC(float maxv, float minv, int noise, RNG_HandleTypeDef *hrng,int channel){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001092:	edc7 0a04 	vstr	s1, [r7, #16]
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ffa7 	bl	8000ff0 <get_noise>
 80010a2:	4603      	mov	r3, r0
 80010a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d13c      	bne.n	8001126 <init_DC+0x9e>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b0:	e033      	b.n	800111a <init_DC+0x92>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f004 f982 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010c4:	4013      	ands	r3, r2
 80010c6:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (minv*4096/3.3);
 80010c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b0 <init_DC+0x128>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	a332      	add	r3, pc, #200	; (adr r3, 80011a8 <init_DC+0x120>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <init_DC+0x12c>)
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		waveform[i] |= new_noise;
 8001100:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <init_DC+0x12c>)
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800110a:	431a      	orrs	r2, r3
 800110c:	4929      	ldr	r1, [pc, #164]	; (80011b4 <init_DC+0x12c>)
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	3301      	adds	r3, #1
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <init_DC+0x130>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	429a      	cmp	r2, r3
 8001122:	dbc6      	blt.n	80010b2 <init_DC+0x2a>
			waveform2[i] = (uint16_t) (minv*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}

}
 8001124:	e03b      	b.n	800119e <init_DC+0x116>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	e033      	b.n	8001194 <init_DC+0x10c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f004 f945 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	b29a      	uxth	r2, r3
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	4013      	ands	r3, r2
 8001140:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (minv*4096/3.3);
 8001142:	edd7 7a04 	vldr	s15, [r7, #16]
 8001146:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011b0 <init_DC+0x128>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	a314      	add	r3, pc, #80	; (adr r3, 80011a8 <init_DC+0x120>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fb76 	bl	800084c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <init_DC+0x134>)
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <init_DC+0x134>)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001184:	431a      	orrs	r2, r3
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <init_DC+0x134>)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <init_DC+0x130>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	429a      	cmp	r2, r3
 800119c:	dbc6      	blt.n	800112c <init_DC+0xa4>
}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	66666666 	.word	0x66666666
 80011ac:	400a6666 	.word	0x400a6666
 80011b0:	45800000 	.word	0x45800000
 80011b4:	200005f8 	.word	0x200005f8
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200009f8 	.word	0x200009f8

080011c0 <init_generator>:

void init_generator(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel) {
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff0b 	bl	8000ff0 <get_noise>
 80011da:	4603      	mov	r3, r0
 80011dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 8091 	bne.w	8001308 <init_generator+0x148>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ea:	e086      	b.n	80012fa <init_generator+0x13a>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f004 f8e5 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fe:	4013      	ands	r3, r2
 8001200:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	a38b      	add	r3, pc, #556	; (adr r3, 8001438 <init_generator+0x278>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9f3 	bl	80005f8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <init_generator+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b17 	vmov	d7, r2, r3
 800123a:	eeb0 0a47 	vmov.f32	s0, s14
 800123e:	eef0 0a67 	vmov.f32	s1, s15
 8001242:	f00d fb7d 	bl	800e940 <sin>
 8001246:	ec55 4b10 	vmov	r4, r5, d0
 800124a:	ed97 7a05 	vldr	s14, [r7, #20]
 800124e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800125a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125e:	ee16 0a90 	vmov	r0, s13
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4614      	mov	r4, r2
 8001278:	461d      	mov	r5, r3
 800127a:	ed97 7a05 	vldr	s14, [r7, #20]
 800127e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800128a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800128e:	ee16 0a90 	vmov	r0, s13
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff5 	bl	800028c <__adddf3>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <init_generator+0x284>)
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	a35c      	add	r3, pc, #368	; (adr r3, 8001430 <init_generator+0x270>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fac3 	bl	800084c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <init_generator+0x288>)
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//waveform[i] = round(((sin(i*2*M_PI / 256) + 1)*((4096 / 3.3*(maxv - minv)) / 2)) + 4096 / 3.3 * minv);
		waveform[i] |= new_noise;
 80012e0:	4a59      	ldr	r2, [pc, #356]	; (8001448 <init_generator+0x288>)
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ea:	431a      	orrs	r2, r3
 80012ec:	4956      	ldr	r1, [pc, #344]	; (8001448 <init_generator+0x288>)
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	3301      	adds	r3, #1
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <init_generator+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	f6ff af73 	blt.w	80011ec <init_generator+0x2c>
			uint16_t new_noise = (uint16_t)(random & bits);
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}
}
 8001306:	e08f      	b.n	8001428 <init_generator+0x268>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
 800130c:	e086      	b.n	800141c <init_generator+0x25c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f004 f854 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	b29a      	uxth	r2, r3
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	4013      	ands	r3, r2
 8001322:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	a343      	add	r3, pc, #268	; (adr r3, 8001438 <init_generator+0x278>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <init_generator+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8ee 	bl	8000524 <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f00d faec 	bl	800e940 <sin>
 8001368:	ec55 4b10 	vmov	r4, r5, d0
 800136c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001370:	edd7 7a04 	vldr	s15, [r7, #16]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800137c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001380:	ee16 0a90 	vmov	r0, s13
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f932 	bl	80005f8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	ed97 7a05 	vldr	s14, [r7, #20]
 80013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b0:	ee16 0a90 	vmov	r0, s13
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7fe ff64 	bl	800028c <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <init_generator+0x284>)
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a314      	add	r3, pc, #80	; (adr r3, 8001430 <init_generator+0x270>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <init_generator+0x28c>)
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <init_generator+0x28c>)
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	431a      	orrs	r2, r3
 800140e:	490f      	ldr	r1, [pc, #60]	; (800144c <init_generator+0x28c>)
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	3301      	adds	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <init_generator+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001422:	429a      	cmp	r2, r3
 8001424:	f6ff af73 	blt.w	800130e <init_generator+0x14e>
}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	66666666 	.word	0x66666666
 8001434:	400a6666 	.word	0x400a6666
 8001438:	54442d18 	.word	0x54442d18
 800143c:	401921fb 	.word	0x401921fb
 8001440:	20000000 	.word	0x20000000
 8001444:	40b00000 	.word	0x40b00000
 8001448:	200005f8 	.word	0x200005f8
 800144c:	200009f8 	.word	0x200009f8

08001450 <init_triangle>:

void init_triangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel){
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a05 	vstr	s0, [r7, #20]
 800145a:	edc7 0a04 	vstr	s1, [r7, #16]
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fdc3 	bl	8000ff0 <get_noise>
 800146a:	4603      	mov	r3, r0
 800146c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 809a 	bne.w	80015aa <init_triangle+0x15a>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147a:	e08f      	b.n	800159c <init_triangle+0x14c>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f003 ff9d 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	b29a      	uxth	r2, r3
 800148c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148e:	4013      	ands	r3, r2
 8001490:	847b      	strh	r3, [r7, #34]	; 0x22
        if(i < NUM_SAMPLES/2){
 8001492:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <init_triangle+0x2a0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	461a      	mov	r2, r3
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	4293      	cmp	r3, r2
 80014a2:	da35      	bge.n	8001510 <init_triangle+0xc0>
        	waveform[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b0:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <init_triangle+0x2a0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80016f4 <init_triangle+0x2a4>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	ee17 0a90 	vmov	r0, s15
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	a37f      	add	r3, pc, #508	; (adr r3, 80016e8 <init_triangle+0x298>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb54 	bl	8000ba8 <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	b29b      	uxth	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <init_triangle+0x2a8>)
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800150e:	e038      	b.n	8001582 <init_triangle+0x132>
        }else{
        	waveform[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <init_triangle+0x2a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001524:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <init_triangle+0x2a0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001536:	edd7 6a05 	vldr	s13, [r7, #20]
 800153a:	edd7 7a04 	vldr	s15, [r7, #16]
 800153e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80016f4 <init_triangle+0x2a4>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	a362      	add	r3, pc, #392	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f972 	bl	800084c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001574:	4603      	mov	r3, r0
 8001576:	b29b      	uxth	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <init_triangle+0x2a8>)
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    	waveform[i] |= noise;
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <init_triangle+0x2a8>)
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800158a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800158c:	431a      	orrs	r2, r3
 800158e:	495a      	ldr	r1, [pc, #360]	; (80016f8 <init_triangle+0x2a8>)
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <init_triangle+0x2a0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f6ff af6a 	blt.w	800147c <init_triangle+0x2c>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
	        }
	    	waveform2[i] |= noise;
	    }
	}
}
 80015a8:	e098      	b.n	80016dc <init_triangle+0x28c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	e08f      	b.n	80016d0 <init_triangle+0x280>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f003 ff03 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c2:	4013      	ands	r3, r2
 80015c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	        if(i < NUM_SAMPLES/2){
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <init_triangle+0x2a0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0fda      	lsrs	r2, r3, #31
 80015cc:	4413      	add	r3, r2
 80015ce:	105b      	asrs	r3, r3, #1
 80015d0:	461a      	mov	r2, r3
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	4293      	cmp	r3, r2
 80015d6:	da35      	bge.n	8001644 <init_triangle+0x1f4>
	        	waveform2[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <init_triangle+0x2a0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80015fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	edd7 7a04 	vldr	s15, [r7, #16]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80016f4 <init_triangle+0x2a4>
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	a332      	add	r3, pc, #200	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f912 	bl	800084c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff faba 	bl	8000ba8 <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29b      	uxth	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	4a30      	ldr	r2, [pc, #192]	; (80016fc <init_triangle+0x2ac>)
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001642:	e038      	b.n	80016b6 <init_triangle+0x266>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <init_triangle+0x2a0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <init_triangle+0x2a0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800166a:	edd7 6a05 	vldr	s13, [r7, #20]
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016f4 <init_triangle+0x2a4>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	a315      	add	r3, pc, #84	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8d8 	bl	800084c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa80 	bl	8000ba8 <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <init_triangle+0x2ac>)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <init_triangle+0x2ac>)
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c0:	431a      	orrs	r2, r3
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <init_triangle+0x2ac>)
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	3301      	adds	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <init_triangle+0x2a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f6ff af6a 	blt.w	80015b0 <init_triangle+0x160>
}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	66666666 	.word	0x66666666
 80016ec:	400a6666 	.word	0x400a6666
 80016f0:	20000000 	.word	0x20000000
 80016f4:	45800000 	.word	0x45800000
 80016f8:	200005f8 	.word	0x200005f8
 80016fc:	200009f8 	.word	0x200009f8

08001700 <init_rectangle>:


void init_rectangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng,int channel){
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	ed87 0a05 	vstr	s0, [r7, #20]
 800170a:	edc7 0a04 	vstr	s1, [r7, #16]
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fc6b 	bl	8000ff0 <get_noise>
 800171a:	4603      	mov	r3, r0
 800171c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d148      	bne.n	80017b6 <init_rectangle+0xb6>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e03f      	b.n	80017aa <init_rectangle+0xaa>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f003 fe46 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b29a      	uxth	r2, r3
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	4013      	ands	r3, r2
 800173e:	847b      	strh	r3, [r7, #34]	; 0x22
    	waveform[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <init_rectangle+0x158>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0fda      	lsrs	r2, r3, #31
 8001746:	4413      	add	r3, r2
 8001748:	105b      	asrs	r3, r3, #1
 800174a:	461a      	mov	r2, r3
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	4293      	cmp	r3, r2
 8001750:	da02      	bge.n	8001758 <init_rectangle+0x58>
 8001752:	edd7 7a04 	vldr	s15, [r7, #16]
 8001756:	e001      	b.n	800175c <init_rectangle+0x5c>
 8001758:	edd7 7a05 	vldr	s15, [r7, #20]
 800175c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800185c <init_rectangle+0x15c>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	a338      	add	r3, pc, #224	; (adr r3, 8001850 <init_rectangle+0x150>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f86b 	bl	800084c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	4a35      	ldr	r2, [pc, #212]	; (8001860 <init_rectangle+0x160>)
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	waveform[i] |= noise;
 8001790:	4a33      	ldr	r2, [pc, #204]	; (8001860 <init_rectangle+0x160>)
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179a:	431a      	orrs	r2, r3
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <init_rectangle+0x160>)
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	3301      	adds	r3, #1
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <init_rectangle+0x158>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbba      	blt.n	800172a <init_rectangle+0x2a>
			uint16_t noise = (uint16_t)(random & bits);
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
	    	waveform2[i] |= noise;
	    }
	}
}
 80017b4:	e047      	b.n	8001846 <init_rectangle+0x146>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ba:	e03f      	b.n	800183c <init_rectangle+0x13c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f003 fdfd 	bl	80053c2 <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ce:	4013      	ands	r3, r2
 80017d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <init_rectangle+0x158>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	4413      	add	r3, r2
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	461a      	mov	r2, r3
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	4293      	cmp	r3, r2
 80017e2:	da02      	bge.n	80017ea <init_rectangle+0xea>
 80017e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e8:	e001      	b.n	80017ee <init_rectangle+0xee>
 80017ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800185c <init_rectangle+0x15c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	a314      	add	r3, pc, #80	; (adr r3, 8001850 <init_rectangle+0x150>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f822 	bl	800084c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9ca 	bl	8000ba8 <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <init_rectangle+0x164>)
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <init_rectangle+0x164>)
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800182c:	431a      	orrs	r2, r3
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <init_rectangle+0x164>)
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	3301      	adds	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <init_rectangle+0x158>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	429a      	cmp	r2, r3
 8001844:	dbba      	blt.n	80017bc <init_rectangle+0xbc>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	66666666 	.word	0x66666666
 8001854:	400a6666 	.word	0x400a6666
 8001858:	20000000 	.word	0x20000000
 800185c:	45800000 	.word	0x45800000
 8001860:	200005f8 	.word	0x200005f8
 8001864:	200009f8 	.word	0x200009f8

08001868 <init_ekg>:

void init_ekg(int channel){
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(channel == 1){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d113      	bne.n	800189e <init_ekg+0x36>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e00a      	b.n	8001892 <init_ekg+0x2a>
			waveform[i] = ekg[i];
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <init_ekg+0x68>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <init_ekg+0x6c>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <init_ekg+0x70>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbef      	blt.n	800187c <init_ekg+0x14>
	else{
	    for(int i = 0; i < NUM_SAMPLES; i++){
	        waveform2[i] = ekg[i];
	    }
	}
}
 800189c:	e012      	b.n	80018c4 <init_ekg+0x5c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	e00a      	b.n	80018ba <init_ekg+0x52>
	        waveform2[i] = ekg[i];
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <init_ekg+0x68>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <init_ekg+0x74>)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <init_ekg+0x70>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbef      	blt.n	80018a4 <init_ekg+0x3c>
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200005f8 	.word	0x200005f8
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200009f8 	.word	0x200009f8

080018e0 <sig_gen>:

void sig_gen(struct user_command *cmd, RNG_HandleTypeDef *hrng,DAC_HandleTypeDef *dac ){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	//Process user input
	if(cmd->channel == 1){
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <sig_gen+0x1e>
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fbf8 	bl	80030ec <HAL_DAC_Stop_DMA>
 80018fc:	e003      	b.n	8001906 <sig_gen+0x26>
	}
	else{
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_2);
 80018fe:	2110      	movs	r1, #16
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 fbf3 	bl	80030ec <HAL_DAC_Stop_DMA>
	}
	switch(cmd->wave){
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	3b41      	subs	r3, #65	; 0x41
 800190c:	2b13      	cmp	r3, #19
 800190e:	f200 8085 	bhi.w	8001a1c <sig_gen+0x13c>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <sig_gen+0x38>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001a11 	.word	0x08001a11
 800191c:	08001a1d 	.word	0x08001a1d
 8001920:	08001a1d 	.word	0x08001a1d
 8001924:	08001a1d 	.word	0x08001a1d
 8001928:	08001a1d 	.word	0x08001a1d
 800192c:	08001a1d 	.word	0x08001a1d
 8001930:	08001a1d 	.word	0x08001a1d
 8001934:	08001a1d 	.word	0x08001a1d
 8001938:	08001a1d 	.word	0x08001a1d
 800193c:	08001a1d 	.word	0x08001a1d
 8001940:	08001a1d 	.word	0x08001a1d
 8001944:	08001a1d 	.word	0x08001a1d
 8001948:	08001a1d 	.word	0x08001a1d
 800194c:	08001a1d 	.word	0x08001a1d
 8001950:	08001a1d 	.word	0x08001a1d
 8001954:	08001a1d 	.word	0x08001a1d
 8001958:	08001a1d 	.word	0x08001a1d
 800195c:	08001969 	.word	0x08001969
 8001960:	0800198f 	.word	0x0800198f
 8001964:	080019eb 	.word	0x080019eb
	case('R'):
		//Change to Rectangle wave
		init_rectangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a03 	vldr	s15, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a02 	vldr	s14, [r3, #8]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6918      	ldr	r0, [r3, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	eef0 0a47 	vmov.f32	s1, s14
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	f7ff feba 	bl	8001700 <init_rectangle>
		break;
 800198c:	e047      	b.n	8001a1e <sig_gen+0x13e>
	case('S'):
		// Change to Sine wave

		if(cmd->frequency != 0.0){
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	edd3 7a01 	vldr	s15, [r3, #4]
 8001994:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d012      	beq.n	80019c4 <sig_gen+0xe4>
			init_generator(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	eef0 0a47 	vmov.f32	s1, s14
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff fbff 	bl	80011c0 <init_generator>
		}
		else{
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
		}
		break;
 80019c2:	e02c      	b.n	8001a1e <sig_gen+0x13e>
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6918      	ldr	r0, [r3, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	eef0 0a47 	vmov.f32	s1, s14
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	f7ff fb50 	bl	8001088 <init_DC>
		break;
 80019e8:	e019      	b.n	8001a1e <sig_gen+0x13e>
	case('T'):
		//Change to Triangle
		init_triangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6918      	ldr	r0, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	eef0 0a47 	vmov.f32	s1, s14
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	f7ff fd21 	bl	8001450 <init_triangle>
		break;
 8001a0e:	e006      	b.n	8001a1e <sig_gen+0x13e>
	case('A'):
		//Change to ekg
		init_ekg(cmd->channel);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff27 	bl	8001868 <init_ekg>
		break;
 8001a1a:	e000      	b.n	8001a1e <sig_gen+0x13e>
	default:
		break;
 8001a1c:	bf00      	nop
	}

	if(cmd->channel == 1){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d137      	bne.n	8001a96 <sig_gen+0x1b6>
		TIM2->ARR = round(80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <sig_gen+0x220>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	a12b      	add	r1, pc, #172	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a4e:	f7fe fefd 	bl	800084c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f00c ffc5 	bl	800e9f0 <round>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f899 	bl	8000ba8 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->EGR = TIM_EGR_UG;
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_1, (uint32_t*)waveform, SAMPLES, DAC_ALIGN_12B_R);
 8001a82:	2300      	movs	r3, #0
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <sig_gen+0x224>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fa60 	bl	8002f54 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
	}



}
 8001a94:	e02a      	b.n	8001aec <sig_gen+0x20c>
		TIM5->ARR = (80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <sig_gen+0x220>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	a10f      	add	r1, pc, #60	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001abe:	f7fe fec5 	bl	800084c <__aeabi_ddiv>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4c10      	ldr	r4, [pc, #64]	; (8001b08 <sig_gen+0x228>)
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f86c 	bl	8000ba8 <__aeabi_d2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM5->EGR = TIM_EGR_UG;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <sig_gen+0x228>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <sig_gen+0x22c>)
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f001 fa34 	bl	8002f54 <HAL_DAC_Start_DMA>
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	419312d0 	.word	0x419312d0
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200005f8 	.word	0x200005f8
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	200009f8 	.word	0x200009f8

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	command = (struct user_command *)malloc(sizeof(struct user_command));
 8001b14:	2018      	movs	r0, #24
 8001b16:	f008 fd41 	bl	800a59c <malloc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <main+0xcc>)
 8001b20:	601a      	str	r2, [r3, #0]
		if(command == NULL){
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <main+0xcc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <main+0x20>
			exit(99);
 8001b2a:	2063      	movs	r0, #99	; 0x63
 8001b2c:	f008 fa4e 	bl	8009fcc <exit>
		}
		command->channel = 0;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <main+0xcc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		command->frequency = 0.0;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <main+0xcc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
		command->maxv = 0.0;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <main+0xcc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
		command->minv = 0.0;
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <main+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
		command->noise = 0;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <main+0xcc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
		command->wave = 'n';
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <main+0xcc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	226e      	movs	r2, #110	; 0x6e
 8001b64:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f001 f828 	bl	8002bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f851 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 f9e5 	bl	8001f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f000 f9bd 	bl	8001ef0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001b76:	f000 f89d 	bl	8001cb4 <MX_DAC1_Init>
  MX_RNG_Init();
 8001b7a:	f000 f8d9 	bl	8001d30 <MX_RNG_Init>
  MX_TIM2_Init();
 8001b7e:	f000 f8eb 	bl	8001d58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b82:	f000 f985 	bl	8001e90 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001b86:	f000 f935 	bl	8001df4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <main+0xd0>)
 8001b8c:	f003 fcc6 	bl	800551c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <main+0xd4>)
 8001b92:	f003 fcc3 	bl	800551c <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b96:	f004 fe53 	bl	8006840 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001b9a:	4813      	ldr	r0, [pc, #76]	; (8001be8 <main+0xd8>)
 8001b9c:	f004 ff4e 	bl	8006a3c <osMutexNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <main+0xdc>)
 8001ba4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (32, sizeof(uint64_t), &CommandQueue_attributes);
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <main+0xe0>)
 8001ba8:	2108      	movs	r1, #8
 8001baa:	2020      	movs	r0, #32
 8001bac:	f005 f854 	bl	8006c58 <osMessageQueueNew>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <main+0xe4>)
 8001bb4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Recieve */
  RecieveHandle = osThreadNew(StartRecieve, NULL, &Recieve_attributes);
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <main+0xe8>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <main+0xec>)
 8001bbc:	f004 fe8a 	bl	80068d4 <osThreadNew>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <main+0xf0>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* creation of Process */
  ProcessHandle = osThreadNew(StartProcess, NULL, &Process_attributes);
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <main+0xf4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <main+0xf8>)
 8001bcc:	f004 fe82 	bl	80068d4 <osThreadNew>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <main+0xfc>)
 8001bd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bd6:	f004 fe57 	bl	8006888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <main+0xca>
 8001bdc:	20000fdc 	.word	0x20000fdc
 8001be0:	20000eac 	.word	0x20000eac
 8001be4:	20000ef8 	.word	0x20000ef8
 8001be8:	0800fe38 	.word	0x0800fe38
 8001bec:	20000fd8 	.word	0x20000fd8
 8001bf0:	0800fe20 	.word	0x0800fe20
 8001bf4:	20000fd4 	.word	0x20000fd4
 8001bf8:	0800fdd8 	.word	0x0800fdd8
 8001bfc:	08001f71 	.word	0x08001f71
 8001c00:	20000fcc 	.word	0x20000fcc
 8001c04:	0800fdfc 	.word	0x0800fdfc
 8001c08:	08002551 	.word	0x08002551
 8001c0c:	20000fd0 	.word	0x20000fd0

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b096      	sub	sp, #88	; 0x58
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00a f916 	bl	800be50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c36:	f002 f85b 	bl	8003cf0 <HAL_PWREx_ControlVoltageScaling>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c40:	f000 fce6 	bl	8002610 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c44:	2310      	movs	r3, #16
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c54:	2302      	movs	r3, #2
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c60:	2328      	movs	r3, #40	; 0x28
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c64:	2307      	movs	r3, #7
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f891 	bl	8003d9c <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c80:	f000 fcc6 	bl	8002610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fc59 	bl	8004554 <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ca8:	f000 fcb2 	bl	8002610 <Error_Handler>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3758      	adds	r7, #88	; 0x58
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2224      	movs	r2, #36	; 0x24
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00a f8c5 	bl	800be50 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <MX_DAC1_Init+0x78>)
 8001cca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cce:	f001 f91e 	bl	8002f0e <HAL_DAC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cd8:	f000 fc9a 	bl	8002610 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ce0:	2324      	movs	r3, #36	; 0x24
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cf8:	f001 fa5b 	bl	80031b2 <HAL_DAC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fc85 	bl	8002610 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001d06:	231c      	movs	r3, #28
 8001d08:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001d12:	f001 fa4e 	bl	80031b2 <HAL_DAC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001d1c:	f000 fc78 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000df8 	.word	0x20000df8
 8001d2c:	40007400 	.word	0x40007400

08001d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MX_RNG_Init+0x24>)
 8001d38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d3c:	f003 faea 	bl	8005314 <HAL_RNG_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d46:	f000 fc63 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000e9c 	.word	0x20000e9c
 8001d54:	50060800 	.word	0x50060800

08001d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001da0:	f003 fb65 	bl	800546e <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001daa:	f000 fc31 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dbc:	f003 fc16 	bl	80055ec <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f000 fc23 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 fe06 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f000 fc15 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000eac 	.word	0x20000eac

08001df4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_TIM5_Init+0x98>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e3a:	f003 fb18 	bl	800546e <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001e44:	f000 fbe4 	bl	8002610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e56:	f003 fbc9 	bl	80055ec <HAL_TIM_ConfigClockSource>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e60:	f000 fbd6 	bl	8002610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e64:	2320      	movs	r3, #32
 8001e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e72:	f003 fdb9 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 fbc8 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000ef8 	.word	0x20000ef8
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_USART2_UART_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ed4:	f003 fe10 	bl	8005af8 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ede:	f000 fb97 	bl	8002610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000f44 	.word	0x20000f44
 8001eec:	40004400 	.word	0x40004400

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_DMA_Init+0x48>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <MX_DMA_Init+0x48>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6493      	str	r3, [r2, #72]	; 0x48
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_DMA_Init+0x48>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	200d      	movs	r0, #13
 8001f14:	f000 ffc5 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f18:	200d      	movs	r0, #13
 8001f1a:	f000 ffde 	bl	8002eda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2105      	movs	r1, #5
 8001f22:	200e      	movs	r0, #14
 8001f24:	f000 ffbd 	bl	8002ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f28:	200e      	movs	r0, #14
 8001f2a:	f000 ffd6 	bl	8002eda <HAL_NVIC_EnableIRQ>

}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <StartRecieve>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRecieve */
void StartRecieve(void *argument)
{
 8001f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f74:	b0ec      	sub	sp, #432	; 0x1b0
 8001f76:	af08      	add	r7, sp, #32
 8001f78:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f80:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	print_size = sprintf(print_buffer, "Welcome to the Signal Generator!\r\nEnter signal parameters to get started: <gen> <channel> <type> <frequency> <min v> <max v> <noise>\r\n");
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	49c7      	ldr	r1, [pc, #796]	; (80022b8 <StartRecieve+0x348>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f008 ff5a 	bl	800ae54 <siprintf>
 8001fa0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001fa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f107 010c 	add.w	r1, r7, #12
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	48c2      	ldr	r0, [pc, #776]	; (80022bc <StartRecieve+0x34c>)
 8001fb2:	f003 fdef 	bl	8005b94 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001fb6:	4bc2      	ldr	r3, [pc, #776]	; (80022c0 <StartRecieve+0x350>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fdc2 	bl	8006b48 <osMutexAcquire>
	  	uint8_t c = 0;
 8001fc4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fc8:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 8001fd0:	f107 010b 	add.w	r1, r7, #11
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	48b8      	ldr	r0, [pc, #736]	; (80022bc <StartRecieve+0x34c>)
 8001fda:	f003 fe65 	bl	8005ca8 <HAL_UART_Receive>

	  	if ((char)c == '\r'){
 8001fde:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fe2:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b0d      	cmp	r3, #13
 8001fea:	f040 8242 	bne.w	8002472 <StartRecieve+0x502>
//	  		if enter is pressed, process command to see if valid
	  		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8001fee:	2364      	movs	r3, #100	; 0x64
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	49b4      	ldr	r1, [pc, #720]	; (80022c4 <StartRecieve+0x354>)
 8001ff4:	48b1      	ldr	r0, [pc, #708]	; (80022bc <StartRecieve+0x34c>)
 8001ff6:	f003 fdcd 	bl	8005b94 <HAL_UART_Transmit>
	  		command_buffer[i] = '\r';
 8001ffa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001ffe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002002:	4413      	add	r3, r2
 8002004:	220d      	movs	r2, #13
 8002006:	701a      	strb	r2, [r3, #0]
	  		command_buffer[i+1] = '\n';
 8002008:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800200c:	3301      	adds	r3, #1
 800200e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002012:	443b      	add	r3, r7
 8002014:	220a      	movs	r2, #10
 8002016:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		command_buffer[i+2] = '\0';
 800201a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800201e:	3302      	adds	r3, #2
 8002020:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002024:	443b      	add	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	f803 2c84 	strb.w	r2, [r3, #-132]
	  		print_size = sprintf(print_buffer, command_buffer);
 800202c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f008 ff0c 	bl	800ae54 <siprintf>
 800203c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
 8002040:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002044:	b29a      	uxth	r2, r3
 8002046:	f107 010c 	add.w	r1, r7, #12
 800204a:	2364      	movs	r3, #100	; 0x64
 800204c:	489b      	ldr	r0, [pc, #620]	; (80022bc <StartRecieve+0x34c>)
 800204e:	f003 fda1 	bl	8005b94 <HAL_UART_Transmit>
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 8002052:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002056:	499c      	ldr	r1, [pc, #624]	; (80022c8 <StartRecieve+0x358>)
 8002058:	4618      	mov	r0, r3
 800205a:	f009 fe9d 	bl	800bd98 <strtok>
 800205e:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 8002068:	2301      	movs	r3, #1
 800206a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 800206e:	4996      	ldr	r1, [pc, #600]	; (80022c8 <StartRecieve+0x358>)
 8002070:	2000      	movs	r0, #0
 8002072:	f009 fe91 	bl	800bd98 <strtok>
 8002076:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 800207a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800207e:	f007 ffa0 	bl	8009fc2 <atoi>
 8002082:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 8002086:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800208a:	2b02      	cmp	r3, #2
 800208c:	dc03      	bgt.n	8002096 <StartRecieve+0x126>
 800208e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002092:	2b00      	cmp	r3, #0
 8002094:	dc13      	bgt.n	80020be <StartRecieve+0x14e>
	  			valid_entry = 0;														// if not make command invalid
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	498a      	ldr	r1, [pc, #552]	; (80022cc <StartRecieve+0x35c>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f008 fed6 	bl	800ae54 <siprintf>
 80020a8:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80020ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f107 010c 	add.w	r1, r7, #12
 80020b6:	2364      	movs	r3, #100	; 0x64
 80020b8:	4880      	ldr	r0, [pc, #512]	; (80022bc <StartRecieve+0x34c>)
 80020ba:	f003 fd6b 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 80020be:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <StartRecieve+0x360>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020c6:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 80020c8:	497f      	ldr	r1, [pc, #508]	; (80022c8 <StartRecieve+0x358>)
 80020ca:	2000      	movs	r0, #0
 80020cc:	f009 fe64 	bl	800bd98 <strtok>
 80020d0:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 80020d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b41      	cmp	r3, #65	; 0x41
 80020dc:	d022      	beq.n	8002124 <StartRecieve+0x1b4>
 80020de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b52      	cmp	r3, #82	; 0x52
 80020e6:	d01d      	beq.n	8002124 <StartRecieve+0x1b4>
 80020e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b53      	cmp	r3, #83	; 0x53
 80020f0:	d018      	beq.n	8002124 <StartRecieve+0x1b4>
 80020f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b54      	cmp	r3, #84	; 0x54
 80020fa:	d013      	beq.n	8002124 <StartRecieve+0x1b4>
	  			valid_entry = 0;														// if not make command invalid
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	4973      	ldr	r1, [pc, #460]	; (80022d4 <StartRecieve+0x364>)
 8002108:	4618      	mov	r0, r3
 800210a:	f008 fea3 	bl	800ae54 <siprintf>
 800210e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002112:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002116:	b29a      	uxth	r2, r3
 8002118:	f107 010c 	add.w	r1, r7, #12
 800211c:	2364      	movs	r3, #100	; 0x64
 800211e:	4867      	ldr	r0, [pc, #412]	; (80022bc <StartRecieve+0x34c>)
 8002120:	f003 fd38 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <StartRecieve+0x360>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 8002130:	4965      	ldr	r1, [pc, #404]	; (80022c8 <StartRecieve+0x358>)
 8002132:	2000      	movs	r0, #0
 8002134:	f009 fe30 	bl	800bd98 <strtok>
 8002138:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		double fvalue = atof(word);
 800213c:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002140:	f007 ff3c 	bl	8009fbc <atof>
 8002144:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if ((fvalue > 10000 || fvalue < 0.5) && fvalue != 0){							// check if frequncy value is valid
 8002148:	a357      	add	r3, pc, #348	; (adr r3, 80022a8 <StartRecieve+0x338>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002152:	f7fe fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <StartRecieve+0x200>
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <StartRecieve+0x368>)
 8002162:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002166:	f7fe fcb9 	bl	8000adc <__aeabi_dcmplt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01e      	beq.n	80021ae <StartRecieve+0x23e>
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800217c:	f7fe fca4 	bl	8000ac8 <__aeabi_dcmpeq>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d113      	bne.n	80021ae <StartRecieve+0x23e>
	  			valid_entry = 0;														// if not make command invalid
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4952      	ldr	r1, [pc, #328]	; (80022dc <StartRecieve+0x36c>)
 8002192:	4618      	mov	r0, r3
 8002194:	f008 fe5e 	bl	800ae54 <siprintf>
 8002198:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800219c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f107 010c 	add.w	r1, r7, #12
 80021a6:	2364      	movs	r3, #100	; 0x64
 80021a8:	4844      	ldr	r0, [pc, #272]	; (80022bc <StartRecieve+0x34c>)
 80021aa:	f003 fcf3 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <StartRecieve+0x360>)
 80021b0:	681c      	ldr	r4, [r3, #0]
 80021b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021b6:	f7fe fd17 	bl	8000be8 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	6063      	str	r3, [r4, #4]

	  		word = strtok(NULL, " ");
 80021be:	4942      	ldr	r1, [pc, #264]	; (80022c8 <StartRecieve+0x358>)
 80021c0:	2000      	movs	r0, #0
 80021c2:	f009 fde9 	bl	800bd98 <strtok>
 80021c6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 80021ca:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80021ce:	f007 fef5 	bl	8009fbc <atof>
 80021d2:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 80021d6:	a336      	add	r3, pc, #216	; (adr r3, 80022b0 <StartRecieve+0x340>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021e0:	f7fe fc9a 	bl	8000b18 <__aeabi_dcmpgt>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <StartRecieve+0x290>
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021f6:	f7fe fc71 	bl	8000adc <__aeabi_dcmplt>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <StartRecieve+0x2b8>
	  			valid_entry = 0;														// if not make command invalid
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4935      	ldr	r1, [pc, #212]	; (80022e0 <StartRecieve+0x370>)
 800220c:	4618      	mov	r0, r3
 800220e:	f008 fe21 	bl	800ae54 <siprintf>
 8002212:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002216:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800221a:	b29a      	uxth	r2, r3
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	2364      	movs	r3, #100	; 0x64
 8002222:	4826      	ldr	r0, [pc, #152]	; (80022bc <StartRecieve+0x34c>)
 8002224:	f003 fcb6 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <StartRecieve+0x360>)
 800222a:	681c      	ldr	r4, [r3, #0]
 800222c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002230:	f7fe fcda 	bl	8000be8 <__aeabi_d2f>
 8002234:	4603      	mov	r3, r0
 8002236:	60a3      	str	r3, [r4, #8]

	  		word = strtok(NULL, " ");
 8002238:	4923      	ldr	r1, [pc, #140]	; (80022c8 <StartRecieve+0x358>)
 800223a:	2000      	movs	r0, #0
 800223c:	f009 fdac 	bl	800bd98 <strtok>
 8002240:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8002244:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002248:	f007 feb8 	bl	8009fbc <atof>
 800224c:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 8002250:	a317      	add	r3, pc, #92	; (adr r3, 80022b0 <StartRecieve+0x340>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800225a:	f7fe fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <StartRecieve+0x30a>
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002270:	f7fe fc34 	bl	8000adc <__aeabi_dcmplt>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d036      	beq.n	80022e8 <StartRecieve+0x378>
	  			valid_entry = 0;														// if not make command invalid
 800227a:	2300      	movs	r3, #0
 800227c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	4917      	ldr	r1, [pc, #92]	; (80022e4 <StartRecieve+0x374>)
 8002286:	4618      	mov	r0, r3
 8002288:	f008 fde4 	bl	800ae54 <siprintf>
 800228c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002290:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002294:	b29a      	uxth	r2, r3
 8002296:	f107 010c 	add.w	r1, r7, #12
 800229a:	2364      	movs	r3, #100	; 0x64
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <StartRecieve+0x34c>)
 800229e:	f003 fc79 	bl	8005b94 <HAL_UART_Transmit>
 80022a2:	e044      	b.n	800232e <StartRecieve+0x3be>
 80022a4:	f3af 8000 	nop.w
 80022a8:	00000000 	.word	0x00000000
 80022ac:	40c38800 	.word	0x40c38800
 80022b0:	66666666 	.word	0x66666666
 80022b4:	400a6666 	.word	0x400a6666
 80022b8:	0800fa90 	.word	0x0800fa90
 80022bc:	20000f44 	.word	0x20000f44
 80022c0:	20000fd8 	.word	0x20000fd8
 80022c4:	0800fb18 	.word	0x0800fb18
 80022c8:	0800fb1c 	.word	0x0800fb1c
 80022cc:	0800fb20 	.word	0x0800fb20
 80022d0:	20000fdc 	.word	0x20000fdc
 80022d4:	0800fb40 	.word	0x0800fb40
 80022d8:	3fe00000 	.word	0x3fe00000
 80022dc:	0800fb90 	.word	0x0800fb90
 80022e0:	0800fbcc 	.word	0x0800fbcc
 80022e4:	0800fbf8 	.word	0x0800fbf8
	  		} else if (fvalue <= command->minv){										// check if max voltage value is less than min voltage
 80022e8:	4b8e      	ldr	r3, [pc, #568]	; (8002524 <StartRecieve+0x5b4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f92a 	bl	8000548 <__aeabi_f2d>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80022fc:	f7fe fbf8 	bl	8000af0 <__aeabi_dcmple>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <StartRecieve+0x3be>
	  			valid_entry = 0;														// if not make command invalid
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4985      	ldr	r1, [pc, #532]	; (8002528 <StartRecieve+0x5b8>)
 8002312:	4618      	mov	r0, r3
 8002314:	f008 fd9e 	bl	800ae54 <siprintf>
 8002318:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800231c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002320:	b29a      	uxth	r2, r3
 8002322:	f107 010c 	add.w	r1, r7, #12
 8002326:	2364      	movs	r3, #100	; 0x64
 8002328:	4880      	ldr	r0, [pc, #512]	; (800252c <StartRecieve+0x5bc>)
 800232a:	f003 fc33 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <StartRecieve+0x5b4>)
 8002330:	681c      	ldr	r4, [r3, #0]
 8002332:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002336:	f7fe fc57 	bl	8000be8 <__aeabi_d2f>
 800233a:	4603      	mov	r3, r0
 800233c:	60e3      	str	r3, [r4, #12]

	  		word = strtok(NULL, " ");
 800233e:	497c      	ldr	r1, [pc, #496]	; (8002530 <StartRecieve+0x5c0>)
 8002340:	2000      	movs	r0, #0
 8002342:	f009 fd29 	bl	800bd98 <strtok>
 8002346:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 800234a:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 800234e:	f007 fe38 	bl	8009fc2 <atoi>
 8002352:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 8002356:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800235a:	2b0c      	cmp	r3, #12
 800235c:	dc03      	bgt.n	8002366 <StartRecieve+0x3f6>
 800235e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002362:	2b00      	cmp	r3, #0
 8002364:	da13      	bge.n	800238e <StartRecieve+0x41e>
	  			valid_entry = 0;														// if not make command invalid
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4970      	ldr	r1, [pc, #448]	; (8002534 <StartRecieve+0x5c4>)
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fd6e 	bl	800ae54 <siprintf>
 8002378:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800237c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002380:	b29a      	uxth	r2, r3
 8002382:	f107 010c 	add.w	r1, r7, #12
 8002386:	2364      	movs	r3, #100	; 0x64
 8002388:	4868      	ldr	r0, [pc, #416]	; (800252c <StartRecieve+0x5bc>)
 800238a:	f003 fc03 	bl	8005b94 <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 800238e:	4b65      	ldr	r3, [pc, #404]	; (8002524 <StartRecieve+0x5b4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002396:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 8002398:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800239c:	2b00      	cmp	r3, #0
 800239e:	d045      	beq.n	800242c <StartRecieve+0x4bc>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 80023a0:	4b65      	ldr	r3, [pc, #404]	; (8002538 <StartRecieve+0x5c8>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	2300      	movs	r3, #0
 80023a6:	2200      	movs	r2, #0
 80023a8:	495e      	ldr	r1, [pc, #376]	; (8002524 <StartRecieve+0x5b4>)
 80023aa:	f004 fcc9 	bl	8006d40 <osMessageQueuePut>
				valid_entry = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
				print_size = sprintf(print_buffer, "Generating signal with:\r\nChannel: %d\r\nType: %c\r\nFrequency: %f\r\nMin Voltage: %f\r\nMax Voltage: %f\r\nNoise: %d\r\n", command->channel, command->wave, command->frequency, command->maxv, command->minv, command->noise);
 80023b4:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <StartRecieve+0x5b4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681e      	ldr	r6, [r3, #0]
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <StartRecieve+0x5b4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	7d1b      	ldrb	r3, [r3, #20]
 80023c0:	469a      	mov	sl, r3
 80023c2:	4b58      	ldr	r3, [pc, #352]	; (8002524 <StartRecieve+0x5b4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8bd 	bl	8000548 <__aeabi_f2d>
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	4b54      	ldr	r3, [pc, #336]	; (8002524 <StartRecieve+0x5b4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f8b5 	bl	8000548 <__aeabi_f2d>
 80023de:	4680      	mov	r8, r0
 80023e0:	4689      	mov	r9, r1
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <StartRecieve+0x5b4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8ad 	bl	8000548 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	494c      	ldr	r1, [pc, #304]	; (8002524 <StartRecieve+0x5b4>)
 80023f4:	6809      	ldr	r1, [r1, #0]
 80023f6:	6909      	ldr	r1, [r1, #16]
 80023f8:	f107 000c 	add.w	r0, r7, #12
 80023fc:	9106      	str	r1, [sp, #24]
 80023fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002402:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002406:	e9cd 4500 	strd	r4, r5, [sp]
 800240a:	4653      	mov	r3, sl
 800240c:	4632      	mov	r2, r6
 800240e:	494b      	ldr	r1, [pc, #300]	; (800253c <StartRecieve+0x5cc>)
 8002410:	f008 fd20 	bl	800ae54 <siprintf>
 8002414:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002418:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800241c:	b29a      	uxth	r2, r3
 800241e:	f107 010c 	add.w	r1, r7, #12
 8002422:	2364      	movs	r3, #100	; 0x64
 8002424:	4841      	ldr	r0, [pc, #260]	; (800252c <StartRecieve+0x5bc>)
 8002426:	f003 fbb5 	bl	8005b94 <HAL_UART_Transmit>
 800242a:	e072      	b.n	8002512 <StartRecieve+0x5a2>
  			} else {
  				print_size = sprintf(print_buffer, "At least one parameter is missing, please try again and verify your parameters:\r\n");
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4943      	ldr	r1, [pc, #268]	; (8002540 <StartRecieve+0x5d0>)
 8002432:	4618      	mov	r0, r3
 8002434:	f008 fd0e 	bl	800ae54 <siprintf>
 8002438:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800243c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002440:	b29a      	uxth	r2, r3
 8002442:	f107 010c 	add.w	r1, r7, #12
 8002446:	2364      	movs	r3, #100	; 0x64
 8002448:	4838      	ldr	r0, [pc, #224]	; (800252c <StartRecieve+0x5bc>)
 800244a:	f003 fba3 	bl	8005b94 <HAL_UART_Transmit>
  				print_size = sprintf(print_buffer, "<gen> <channel> <type> <frequency> <min v> <max v> <noise>\r\n");
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	493c      	ldr	r1, [pc, #240]	; (8002544 <StartRecieve+0x5d4>)
 8002454:	4618      	mov	r0, r3
 8002456:	f008 fcfd 	bl	800ae54 <siprintf>
 800245a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 800245e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002462:	b29a      	uxth	r2, r3
 8002464:	f107 010c 	add.w	r1, r7, #12
 8002468:	2364      	movs	r3, #100	; 0x64
 800246a:	4830      	ldr	r0, [pc, #192]	; (800252c <StartRecieve+0x5bc>)
 800246c:	f003 fb92 	bl	8005b94 <HAL_UART_Transmit>
 8002470:	e04f      	b.n	8002512 <StartRecieve+0x5a2>
  			}

	  	} else if ((c == 8 || c == 127) && (i >= 1)){
 8002472:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002476:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d006      	beq.n	800248e <StartRecieve+0x51e>
 8002480:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002484:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b7f      	cmp	r3, #127	; 0x7f
 800248c:	d122      	bne.n	80024d4 <StartRecieve+0x564>
 800248e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002492:	2b00      	cmp	r3, #0
 8002494:	dd1e      	ble.n	80024d4 <StartRecieve+0x564>
	  		command_buffer[--i] = '\0';
 8002496:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800249a:	3b01      	subs	r3, #1
 800249c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80024a0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80024a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024a8:	4413      	add	r3, r2
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
	  		print_size = sprintf(print_buffer, "%c %c", 8, 8);
 80024ae:	f107 000c 	add.w	r0, r7, #12
 80024b2:	2308      	movs	r3, #8
 80024b4:	2208      	movs	r2, #8
 80024b6:	4924      	ldr	r1, [pc, #144]	; (8002548 <StartRecieve+0x5d8>)
 80024b8:	f008 fccc 	bl	800ae54 <siprintf>
 80024bc:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80024c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f107 010c 	add.w	r1, r7, #12
 80024ca:	2364      	movs	r3, #100	; 0x64
 80024cc:	4817      	ldr	r0, [pc, #92]	; (800252c <StartRecieve+0x5bc>)
 80024ce:	f003 fb61 	bl	8005b94 <HAL_UART_Transmit>
 80024d2:	e01e      	b.n	8002512 <StartRecieve+0x5a2>
	  	} else if (c != 0){						// if character is valid and not enter key
 80024d4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024d8:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d017      	beq.n	8002512 <StartRecieve+0x5a2>
	  		HAL_UART_Transmit(&huart2, &c, 1, 100);
 80024e2:	f107 010b 	add.w	r1, r7, #11
 80024e6:	2364      	movs	r3, #100	; 0x64
 80024e8:	2201      	movs	r2, #1
 80024ea:	4810      	ldr	r0, [pc, #64]	; (800252c <StartRecieve+0x5bc>)
 80024ec:	f003 fb52 	bl	8005b94 <HAL_UART_Transmit>
	  		command_buffer[i] = c;				// add to buffer to save
 80024f0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024f4:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80024fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002502:	4413      	add	r3, r2
 8002504:	460a      	mov	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]
	  		i++;
 8002508:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800250c:	3301      	adds	r3, #1
 800250e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  	}
	  	osMutexRelease(MUTEXHandle);
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <StartRecieve+0x5dc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f004 fb61 	bl	8006bde <osMutexRelease>
	  	osThreadYield();
 800251c:	f004 fa6e 	bl	80069fc <osThreadYield>
  {
 8002520:	e549      	b.n	8001fb6 <StartRecieve+0x46>
 8002522:	bf00      	nop
 8002524:	20000fdc 	.word	0x20000fdc
 8002528:	0800fc24 	.word	0x0800fc24
 800252c:	20000f44 	.word	0x20000f44
 8002530:	0800fb1c 	.word	0x0800fb1c
 8002534:	0800fc58 	.word	0x0800fc58
 8002538:	20000fd4 	.word	0x20000fd4
 800253c:	0800fc8c 	.word	0x0800fc8c
 8002540:	0800fcfc 	.word	0x0800fcfc
 8002544:	0800fd50 	.word	0x0800fd50
 8002548:	0800fd90 	.word	0x0800fd90
 800254c:	20000fd8 	.word	0x20000fd8

08002550 <StartProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcess */
void StartProcess(void *argument)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0c4      	sub	sp, #272	; 0x110
 8002554:	af00      	add	r7, sp, #0
 8002556:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800255a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800255e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartProcess */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8002560:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <StartProcess+0xa8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	4618      	mov	r0, r3
 800256a:	f004 faed 	bl	8006b48 <osMutexAcquire>
	 			  if(osMessageQueueGetCount(CommandQueueHandle) != 0){
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <StartProcess+0xac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fca2 	bl	8006ebc <osMessageQueueGetCount>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d033      	beq.n	80025e6 <StartProcess+0x96>
	 				  char buf[256];
	 				  struct user_command *cmd = (struct user_command *)malloc(sizeof(struct user_command));
 800257e:	2018      	movs	r0, #24
 8002580:	f008 f80c 	bl	800a59c <malloc>
 8002584:	4603      	mov	r3, r0
 8002586:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	 				  if(cmd == NULL){
 800258a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <StartProcess+0x48>
	 					  exit(98);
 8002592:	2062      	movs	r0, #98	; 0x62
 8002594:	f007 fd1a 	bl	8009fcc <exit>
	 				  }
	 				  osMessageQueueGet(CommandQueueHandle, &cmd, 0, 0);
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <StartProcess+0xac>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80025a0:	2300      	movs	r3, #0
 80025a2:	2200      	movs	r2, #0
 80025a4:	f004 fc2c 	bl	8006e00 <osMessageQueueGet>
	 				  sig_gen(cmd, &hrng, &hdac1);
 80025a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <StartProcess+0xb0>)
 80025ae:	4915      	ldr	r1, [pc, #84]	; (8002604 <StartProcess+0xb4>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff f995 	bl	80018e0 <sig_gen>
	 				  sprintf(buf,"\r\n Enter another wave generation! \r\n");
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	4913      	ldr	r1, [pc, #76]	; (8002608 <StartProcess+0xb8>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f008 fc49 	bl	800ae54 <siprintf>
	 				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fe52 	bl	8000270 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f107 010c 	add.w	r1, r7, #12
 80025d4:	2364      	movs	r3, #100	; 0x64
 80025d6:	480d      	ldr	r0, [pc, #52]	; (800260c <StartProcess+0xbc>)
 80025d8:	f003 fadc 	bl	8005b94 <HAL_UART_Transmit>
	 				  free(cmd);
 80025dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025e0:	4618      	mov	r0, r3
 80025e2:	f007 ffe3 	bl	800a5ac <free>

	 		  }

	 			  osMutexRelease(MUTEXHandle);
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <StartProcess+0xa8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 faf7 	bl	8006bde <osMutexRelease>
	 		   vTaskDelay(100);
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	f005 fedf 	bl	80083b4 <vTaskDelay>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 80025f6:	e7b3      	b.n	8002560 <StartProcess+0x10>
 80025f8:	20000fd8 	.word	0x20000fd8
 80025fc:	20000fd4 	.word	0x20000fd4
 8002600:	20000df8 	.word	0x20000df8
 8002604:	20000e9c 	.word	0x20000e9c
 8002608:	0800fd98 	.word	0x0800fd98
 800260c:	20000f44 	.word	0x20000f44

08002610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002618:	e7fe      	b.n	8002618 <Error_Handler+0x8>
	...

0800261c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_MspInit+0x4c>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <HAL_MspInit+0x4c>)
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	6613      	str	r3, [r2, #96]	; 0x60
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_MspInit+0x4c>)
 8002630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_MspInit+0x4c>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a0a      	ldr	r2, [pc, #40]	; (8002668 <HAL_MspInit+0x4c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_MspInit+0x4c>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	210f      	movs	r1, #15
 8002656:	f06f 0001 	mvn.w	r0, #1
 800265a:	f000 fc22 	bl	8002ea2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_DAC_MspInit+0x120>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d17a      	bne.n	8002784 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800268e:	4b40      	ldr	r3, [pc, #256]	; (8002790 <HAL_DAC_MspInit+0x124>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <HAL_DAC_MspInit+0x124>)
 8002694:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	4b3d      	ldr	r3, [pc, #244]	; (8002790 <HAL_DAC_MspInit+0x124>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_DAC_MspInit+0x124>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a39      	ldr	r2, [pc, #228]	; (8002790 <HAL_DAC_MspInit+0x124>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_DAC_MspInit+0x124>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026be:	2330      	movs	r3, #48	; 0x30
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c2:	2303      	movs	r3, #3
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d4:	f001 f954 	bl	8003980 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <HAL_DAC_MspInit+0x12c>)
 80026dc:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 80026de:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026e0:	2206      	movs	r2, #6
 80026e2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026e6:	2210      	movs	r2, #16
 80026e8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ea:	4b2a      	ldr	r3, [pc, #168]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_DAC_MspInit+0x128>)
 80026f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fc:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_DAC_MspInit+0x128>)
 8002700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002704:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_DAC_MspInit+0x128>)
 8002708:	2220      	movs	r2, #32
 800270a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_DAC_MspInit+0x128>)
 800270e:	2200      	movs	r2, #0
 8002710:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002712:	4820      	ldr	r0, [pc, #128]	; (8002794 <HAL_DAC_MspInit+0x128>)
 8002714:	f000 fefe 	bl	8003514 <HAL_DMA_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800271e:	f7ff ff77 	bl	8002610 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_DAC_MspInit+0x128>)
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_DAC_MspInit+0x128>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002730:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_DAC_MspInit+0x134>)
 8002732:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002736:	2205      	movs	r2, #5
 8002738:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_DAC_MspInit+0x130>)
 800273c:	2210      	movs	r2, #16
 800273e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_DAC_MspInit+0x130>)
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800275a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_DAC_MspInit+0x130>)
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002764:	2200      	movs	r2, #0
 8002766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002768:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_DAC_MspInit+0x130>)
 800276a:	f000 fed3 	bl	8003514 <HAL_DMA_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002774:	f7ff ff4c 	bl	8002610 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a08      	ldr	r2, [pc, #32]	; (800279c <HAL_DAC_MspInit+0x130>)
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_DAC_MspInit+0x130>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002784:	bf00      	nop
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40007400 	.word	0x40007400
 8002790:	40021000 	.word	0x40021000
 8002794:	20000e0c 	.word	0x20000e0c
 8002798:	40020030 	.word	0x40020030
 800279c:	20000e54 	.word	0x20000e54
 80027a0:	40020044 	.word	0x40020044

080027a4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0a6      	sub	sp, #152	; 0x98
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	2288      	movs	r2, #136	; 0x88
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f009 fb4b 	bl	800be50 <memset>
  if(hrng->Instance==RNG)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a19      	ldr	r2, [pc, #100]	; (8002824 <HAL_RNG_MspInit+0x80>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d12b      	bne.n	800281c <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80027c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80027ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80027d2:	2301      	movs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80027da:	2310      	movs	r3, #16
 80027dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80027de:	2307      	movs	r3, #7
 80027e0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	f107 0310 	add.w	r3, r7, #16
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 f8d1 	bl	800499c <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002800:	f7ff ff06 	bl	8002610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_RNG_MspInit+0x84>)
 8002806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_RNG_MspInit+0x84>)
 800280a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RNG_MspInit+0x84>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3798      	adds	r7, #152	; 0x98
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	50060800 	.word	0x50060800
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d10c      	bne.n	8002858 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a11      	ldr	r2, [pc, #68]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002856:	e010      	b.n	800287a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0b      	ldr	r2, [pc, #44]	; (800288c <HAL_TIM_Base_MspInit+0x60>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10b      	bne.n	800287a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_TIM_Base_MspInit+0x5c>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	40000c00 	.word	0x40000c00

08002890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0ac      	sub	sp, #176	; 0xb0
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2288      	movs	r2, #136	; 0x88
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 facd 	bl	800be50 <memset>
  if(huart->Instance==USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a21      	ldr	r2, [pc, #132]	; (8002940 <HAL_UART_MspInit+0xb0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d13b      	bne.n	8002938 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028c0:	2302      	movs	r3, #2
 80028c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4618      	mov	r0, r3
 80028ce:	f002 f865 	bl	800499c <HAL_RCCEx_PeriphCLKConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028d8:	f7ff fe9a 	bl	8002610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_UART_MspInit+0xb4>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_UART_MspInit+0xb4>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_UART_MspInit+0xb4>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_UART_MspInit+0xb4>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_UART_MspInit+0xb4>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <HAL_UART_MspInit+0xb4>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800290c:	230c      	movs	r3, #12
 800290e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002912:	2302      	movs	r3, #2
 8002914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002924:	2307      	movs	r3, #7
 8002926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f001 f824 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	37b0      	adds	r7, #176	; 0xb0
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40004400 	.word	0x40004400
 8002944:	40021000 	.word	0x40021000

08002948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800294c:	e7fe      	b.n	800294c <NMI_Handler+0x4>

0800294e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002952:	e7fe      	b.n	8002952 <HardFault_Handler+0x4>

08002954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <MemManage_Handler+0x4>

0800295a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <BusFault_Handler+0x4>

08002960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <UsageFault_Handler+0x4>

08002966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002978:	f000 f974 	bl	8002c64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800297c:	f006 f9ba 	bl	8008cf4 <xTaskGetSchedulerState>
 8002980:	4603      	mov	r3, r0
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002986:	f007 f89f 	bl	8009ac8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Channel3_IRQHandler+0x10>)
 8002996:	f000 ff13 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000e0c 	.word	0x20000e0c

080029a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Channel4_IRQHandler+0x10>)
 80029aa:	f000 ff09 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000e54 	.word	0x20000e54

080029b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return 1;
 80029bc:	2301      	movs	r3, #1
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_kill>:

int _kill(int pid, int sig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029d2:	f009 faaf 	bl	800bf34 <__errno>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2216      	movs	r2, #22
 80029da:	601a      	str	r2, [r3, #0]
  return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_exit>:

void _exit (int status)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe7 	bl	80029c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029fa:	e7fe      	b.n	80029fa <_exit+0x12>

080029fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
  }

  return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
  }
  return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
  return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f009 fa14 	bl	800bf34 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20018000 	.word	0x20018000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	20000fe0 	.word	0x20000fe0
 8002b40:	20004848 	.word	0x20004848

08002b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b6c:	f7ff ffea 	bl	8002b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b70:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b72:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <LoopForever+0xe>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b78:	e002      	b.n	8002b80 <LoopCopyDataInit>

08002b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b7e:	3304      	adds	r3, #4

08002b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b84:	d3f9      	bcc.n	8002b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b88:	4c0a      	ldr	r4, [pc, #40]	; (8002bb4 <LoopForever+0x16>)
  movs r3, #0
 8002b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b8c:	e001      	b.n	8002b92 <LoopFillZerobss>

08002b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b90:	3204      	adds	r2, #4

08002b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b94:	d3fb      	bcc.n	8002b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b96:	f009 f9d3 	bl	800bf40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b9a:	f7fe ffb9 	bl	8001b10 <main>

08002b9e <LoopForever>:

LoopForever:
    b LoopForever
 8002b9e:	e7fe      	b.n	8002b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba8:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8002bac:	08010500 	.word	0x08010500
  ldr r2, =_sbss
 8002bb0:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8002bb4:	20004844 	.word	0x20004844

08002bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bb8:	e7fe      	b.n	8002bb8 <ADC1_2_IRQHandler>

08002bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f000 f961 	bl	8002e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bca:	200f      	movs	r0, #15
 8002bcc:	f000 f80e 	bl	8002bec <HAL_InitTick>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	e001      	b.n	8002be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bdc:	f7ff fd1e 	bl	800261c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002be0:	79fb      	ldrb	r3, [r7, #7]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_InitTick+0x6c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_InitTick+0x70>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <HAL_InitTick+0x6c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f96d 	bl	8002ef6 <HAL_SYSTICK_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0f      	cmp	r3, #15
 8002c26:	d809      	bhi.n	8002c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c28:	2200      	movs	r2, #0
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c30:	f000 f937 	bl	8002ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_InitTick+0x74>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e004      	b.n	8002c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e001      	b.n	8002c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000040c 	.word	0x2000040c
 8002c5c:	20000404 	.word	0x20000404
 8002c60:	20000408 	.word	0x20000408

08002c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_IncTick+0x20>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_IncTick+0x24>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_IncTick+0x24>)
 8002c76:	6013      	str	r3, [r2, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	2000040c 	.word	0x2000040c
 8002c88:	20000fe4 	.word	0x20000fe4

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <HAL_GetTick+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	20000fe4 	.word	0x20000fe4

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff ffee 	bl	8002c8c <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000040c 	.word	0x2000040c

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4907      	ldr	r1, [pc, #28]	; (8002d88 <__NVIC_EnableIRQ+0x38>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000e100 	.word	0xe000e100

08002d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	6039      	str	r1, [r7, #0]
 8002d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	db0a      	blt.n	8002db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <__NVIC_SetPriority+0x4c>)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	0112      	lsls	r2, r2, #4
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	440b      	add	r3, r1
 8002db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db4:	e00a      	b.n	8002dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <__NVIC_SetPriority+0x50>)
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	0112      	lsls	r2, r2, #4
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	440b      	add	r3, r1
 8002dca:	761a      	strb	r2, [r3, #24]
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	; 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f1c3 0307 	rsb	r3, r3, #7
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	bf28      	it	cs
 8002dfe:	2304      	movcs	r3, #4
 8002e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2b06      	cmp	r3, #6
 8002e08:	d902      	bls.n	8002e10 <NVIC_EncodePriority+0x30>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3b03      	subs	r3, #3
 8002e0e:	e000      	b.n	8002e12 <NVIC_EncodePriority+0x32>
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	401a      	ands	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e32:	43d9      	mvns	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	4313      	orrs	r3, r2
         );
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e58:	d301      	bcc.n	8002e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e00f      	b.n	8002e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <SysTick_Config+0x40>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e66:	210f      	movs	r1, #15
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e6c:	f7ff ff8e 	bl	8002d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <SysTick_Config+0x40>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e76:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <SysTick_Config+0x40>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	e000e010 	.word	0xe000e010

08002e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff29 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb4:	f7ff ff3e 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f7ff ff8e 	bl	8002de0 <NVIC_EncodePriority>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff5d 	bl	8002d8c <__NVIC_SetPriority>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff31 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ffa2 	bl	8002e48 <SysTick_Config>
 8002f04:	4603      	mov	r3, r0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e014      	b.n	8002f4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fb9b 	bl	800266c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	795b      	ldrb	r3, [r3, #5]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_DAC_Start_DMA+0x1e>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e0ab      	b.n	80030ca <HAL_DAC_Start_DMA+0x176>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d12f      	bne.n	8002fe4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_DAC_Start_DMA+0x180>)
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4a51      	ldr	r2, [pc, #324]	; (80030d8 <HAL_DAC_Start_DMA+0x184>)
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_DAC_Start_DMA+0x188>)
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002faa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d013      	beq.n	8002fda <HAL_DAC_Start_DMA+0x86>
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d845      	bhi.n	8003044 <HAL_DAC_Start_DMA+0xf0>
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_DAC_Start_DMA+0x72>
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d005      	beq.n	8002fd0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002fc4:	e03e      	b.n	8003044 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3308      	adds	r3, #8
 8002fcc:	613b      	str	r3, [r7, #16]
        break;
 8002fce:	e03c      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	613b      	str	r3, [r7, #16]
        break;
 8002fd8:	e037      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3310      	adds	r3, #16
 8002fe0:	613b      	str	r3, [r7, #16]
        break;
 8002fe2:	e032      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a3d      	ldr	r2, [pc, #244]	; (80030e0 <HAL_DAC_Start_DMA+0x18c>)
 8002fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <HAL_DAC_Start_DMA+0x190>)
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4a3b      	ldr	r2, [pc, #236]	; (80030e8 <HAL_DAC_Start_DMA+0x194>)
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800300a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d013      	beq.n	800303a <HAL_DAC_Start_DMA+0xe6>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d817      	bhi.n	8003048 <HAL_DAC_Start_DMA+0xf4>
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_DAC_Start_DMA+0xd2>
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d005      	beq.n	8003030 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003024:	e010      	b.n	8003048 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3314      	adds	r3, #20
 800302c:	613b      	str	r3, [r7, #16]
        break;
 800302e:	e00c      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3318      	adds	r3, #24
 8003036:	613b      	str	r3, [r7, #16]
        break;
 8003038:	e007      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	331c      	adds	r3, #28
 8003040:	613b      	str	r3, [r7, #16]
        break;
 8003042:	e002      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_DAC_Start_DMA+0xf6>
        break;
 8003048:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	f000 fb0b 	bl	8003684 <HAL_DMA_Start_IT>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	e010      	b.n	8003096 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003082:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68d8      	ldr	r0, [r3, #12]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	f000 faf9 	bl	8003684 <HAL_DMA_Start_IT>
 8003092:	4603      	mov	r3, r0
 8003094:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6819      	ldr	r1, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0310 	and.w	r3, r3, #16
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e005      	b.n	80030c8 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f043 0204 	orr.w	r2, r3, #4
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08003401 	.word	0x08003401
 80030d8:	08003423 	.word	0x08003423
 80030dc:	0800343f 	.word	0x0800343f
 80030e0:	080034a9 	.word	0x080034a9
 80030e4:	080034cb 	.word	0x080034cb
 80030e8:	080034e7 	.word	0x080034e7

080030ec <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43da      	mvns	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	400a      	ands	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2201      	movs	r2, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	400a      	ands	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fb02 	bl	8003744 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e00c      	b.n	800316c <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 faf4 	bl	8003744 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800316a:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	795b      	ldrb	r3, [r3, #5]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_DAC_ConfigChannel+0x1c>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e114      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x246>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2202      	movs	r2, #2
 80031d8:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	f040 8081 	bne.w	80032e6 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031e4:	f7ff fd52 	bl	8002c8c <HAL_GetTick>
 80031e8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d140      	bne.n	8003272 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031f0:	e018      	b.n	8003224 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031f2:	f7ff fd4b 	bl	8002c8c <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d911      	bls.n	8003224 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2203      	movs	r2, #3
 800321e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0e9      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1df      	bne.n	80031f2 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f7ff fd36 	bl	8002ca4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	6992      	ldr	r2, [r2, #24]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
 8003242:	e023      	b.n	800328c <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003244:	f7ff fd22 	bl	8002c8c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d90f      	bls.n	8003272 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	2b00      	cmp	r3, #0
 800325a:	da0a      	bge.n	8003272 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f043 0208 	orr.w	r2, r3, #8
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2203      	movs	r2, #3
 800326c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0c2      	b.n	80033f8 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	2b00      	cmp	r3, #0
 800327a:	dbe3      	blt.n	8003244 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800327c:	2001      	movs	r0, #1
 800327e:	f7ff fd11 	bl	8002ca4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	6992      	ldr	r2, [r2, #24]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800329c:	fa01 f303 	lsl.w	r3, r1, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	ea02 0103 	and.w	r1, r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	409a      	lsls	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	21ff      	movs	r1, #255	; 0xff
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	ea02 0103 	and.w	r1, r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	409a      	lsls	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d11d      	bne.n	800332a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	221f      	movs	r2, #31
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2207      	movs	r2, #7
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	431a      	orrs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	400a      	ands	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	f640 72fc 	movw	r2, #4092	; 0xffc
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	22c0      	movs	r2, #192	; 0xc0
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	400a      	ands	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff feb1 	bl	8003176 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	711a      	strb	r2, [r3, #4]
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff feaa 	bl	800318a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f043 0204 	orr.w	r2, r3, #4
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff fea0 	bl	800319e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	711a      	strb	r2, [r3, #4]
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ffd8 	bl	800346c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	711a      	strb	r2, [r3, #4]
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ffd1 	bl	8003480 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff ffc7 	bl	8003494 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	711a      	strb	r2, [r3, #4]
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e098      	b.n	8003658 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <HAL_DMA_Init+0x150>)
 800352e:	429a      	cmp	r2, r3
 8003530:	d80f      	bhi.n	8003552 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_DMA_Init+0x154>)
 800353a:	4413      	add	r3, r2
 800353c:	4a4b      	ldr	r2, [pc, #300]	; (800366c <HAL_DMA_Init+0x158>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	009a      	lsls	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a48      	ldr	r2, [pc, #288]	; (8003670 <HAL_DMA_Init+0x15c>)
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
 8003550:	e00e      	b.n	8003570 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b46      	ldr	r3, [pc, #280]	; (8003674 <HAL_DMA_Init+0x160>)
 800355a:	4413      	add	r3, r2
 800355c:	4a43      	ldr	r2, [pc, #268]	; (800366c <HAL_DMA_Init+0x158>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	009a      	lsls	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a42      	ldr	r2, [pc, #264]	; (8003678 <HAL_DMA_Init+0x164>)
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ca:	d039      	beq.n	8003640 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <HAL_DMA_Init+0x15c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d11a      	bne.n	800360c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_DMA_Init+0x168>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f003 031c 	and.w	r3, r3, #28
 80035e2:	210f      	movs	r1, #15
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	4924      	ldr	r1, [pc, #144]	; (800367c <HAL_DMA_Init+0x168>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <HAL_DMA_Init+0x168>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f003 031c 	and.w	r3, r3, #28
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	491d      	ldr	r1, [pc, #116]	; (800367c <HAL_DMA_Init+0x168>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
 800360a:	e019      	b.n	8003640 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800360c:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <HAL_DMA_Init+0x16c>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f003 031c 	and.w	r3, r3, #28
 8003618:	210f      	movs	r1, #15
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	4917      	ldr	r1, [pc, #92]	; (8003680 <HAL_DMA_Init+0x16c>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <HAL_DMA_Init+0x16c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	f003 031c 	and.w	r3, r3, #28
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	4911      	ldr	r1, [pc, #68]	; (8003680 <HAL_DMA_Init+0x16c>)
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40020407 	.word	0x40020407
 8003668:	bffdfff8 	.word	0xbffdfff8
 800366c:	cccccccd 	.word	0xcccccccd
 8003670:	40020000 	.word	0x40020000
 8003674:	bffdfbf8 	.word	0xbffdfbf8
 8003678:	40020400 	.word	0x40020400
 800367c:	400200a8 	.word	0x400200a8
 8003680:	400204a8 	.word	0x400204a8

08003684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_DMA_Start_IT+0x20>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e04b      	b.n	800373c <HAL_DMA_Start_IT+0xb8>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d13a      	bne.n	800372e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f91e 	bl	800391e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f042 020e 	orr.w	r2, r2, #14
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e00f      	b.n	800371c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 020a 	orr.w	r2, r2, #10
 800371a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e005      	b.n	800373a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800373a:	7dfb      	ldrb	r3, [r7, #23]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d008      	beq.n	800376e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2204      	movs	r2, #4
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 020e 	bic.w	r2, r2, #14
 800377c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f003 021c 	and.w	r2, r3, #28
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f202 	lsl.w	r2, r1, r2
 80037a0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f003 031c 	and.w	r3, r3, #28
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d026      	beq.n	800383a <HAL_DMA_IRQHandler+0x7a>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f003 021c 	and.w	r2, r3, #28
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2104      	movs	r1, #4
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	d071      	beq.n	8003914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003838:	e06c      	b.n	8003914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f003 031c 	and.w	r3, r3, #28
 8003842:	2202      	movs	r2, #2
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02e      	beq.n	80038ac <HAL_DMA_IRQHandler+0xec>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d029      	beq.n	80038ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 020a 	bic.w	r2, r2, #10
 8003874:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f003 021c 	and.w	r2, r3, #28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2102      	movs	r1, #2
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d038      	beq.n	8003914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038aa:	e033      	b.n	8003914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b0:	f003 031c 	and.w	r3, r3, #28
 80038b4:	2208      	movs	r2, #8
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02a      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d025      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 020e 	bic.w	r2, r2, #14
 80038d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f003 021c 	and.w	r2, r3, #28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003914:	bf00      	nop
 8003916:	bf00      	nop
}
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 021c 	and.w	r2, r3, #28
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b10      	cmp	r3, #16
 800394e:	d108      	bne.n	8003962 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003960:	e007      	b.n	8003972 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e17f      	b.n	8003c90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	2101      	movs	r1, #1
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8171 	beq.w	8003c8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d005      	beq.n	80039c0 <HAL_GPIO_Init+0x40>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d130      	bne.n	8003a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039f6:	2201      	movs	r2, #1
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0201 	and.w	r2, r3, #1
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d118      	bne.n	8003a60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a34:	2201      	movs	r2, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	f003 0201 	and.w	r2, r3, #1
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d017      	beq.n	8003a9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	2203      	movs	r2, #3
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d123      	bne.n	8003af0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	08da      	lsrs	r2, r3, #3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3208      	adds	r2, #8
 8003ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	08da      	lsrs	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3208      	adds	r2, #8
 8003aea:	6939      	ldr	r1, [r7, #16]
 8003aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 0203 	and.w	r2, r3, #3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 80ac 	beq.w	8003c8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b32:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b4a:	4a5a      	ldr	r2, [pc, #360]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	3302      	adds	r3, #2
 8003b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	220f      	movs	r2, #15
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b74:	d025      	beq.n	8003bc2 <HAL_GPIO_Init+0x242>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4f      	ldr	r2, [pc, #316]	; (8003cb8 <HAL_GPIO_Init+0x338>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01f      	beq.n	8003bbe <HAL_GPIO_Init+0x23e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <HAL_GPIO_Init+0x33c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d019      	beq.n	8003bba <HAL_GPIO_Init+0x23a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4d      	ldr	r2, [pc, #308]	; (8003cc0 <HAL_GPIO_Init+0x340>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_GPIO_Init+0x236>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4c      	ldr	r2, [pc, #304]	; (8003cc4 <HAL_GPIO_Init+0x344>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00d      	beq.n	8003bb2 <HAL_GPIO_Init+0x232>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4b      	ldr	r2, [pc, #300]	; (8003cc8 <HAL_GPIO_Init+0x348>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <HAL_GPIO_Init+0x22e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <HAL_GPIO_Init+0x34c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_GPIO_Init+0x22a>
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	e00c      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003baa:	2307      	movs	r3, #7
 8003bac:	e00a      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e008      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e006      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e004      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_GPIO_Init+0x244>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	f002 0203 	and.w	r2, r2, #3
 8003bca:	0092      	lsls	r2, r2, #2
 8003bcc:	4093      	lsls	r3, r2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bd4:	4937      	ldr	r1, [pc, #220]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c06:	4a32      	ldr	r2, [pc, #200]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c30:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c5a:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <HAL_GPIO_Init+0x350>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f47f ae78 	bne.w	8003990 <HAL_GPIO_Init+0x10>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	48000400 	.word	0x48000400
 8003cbc:	48000800 	.word	0x48000800
 8003cc0:	48000c00 	.word	0x48000c00
 8003cc4:	48001000 	.word	0x48001000
 8003cc8:	48001400 	.word	0x48001400
 8003ccc:	48001800 	.word	0x48001800
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cd8:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_PWREx_GetVoltageRange+0x18>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40007000 	.word	0x40007000

08003cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfe:	d130      	bne.n	8003d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d038      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d16:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d1e:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2232      	movs	r2, #50	; 0x32
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	4a1b      	ldr	r2, [pc, #108]	; (8003d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	0c9b      	lsrs	r3, r3, #18
 8003d30:	3301      	adds	r3, #1
 8003d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d34:	e002      	b.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d3c:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d48:	d102      	bne.n	8003d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f2      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d110      	bne.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e00f      	b.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d007      	beq.n	8003d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40007000 	.word	0x40007000
 8003d94:	20000404 	.word	0x20000404
 8003d98:	431bde83 	.word	0x431bde83

08003d9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e3ca      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dae:	4b97      	ldr	r3, [pc, #604]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db8:	4b94      	ldr	r3, [pc, #592]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80e4 	beq.w	8003f98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d007      	beq.n	8003de6 <HAL_RCC_OscConfig+0x4a>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	f040 808b 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8087 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003de6:	4b89      	ldr	r3, [pc, #548]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e3a2      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCC_OscConfig+0x7c>
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_OscConfig+0x88>
 8003e18:	4b7c      	ldr	r3, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d223      	bcs.n	8003e70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fd55 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e383      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e3c:	4b73      	ldr	r3, [pc, #460]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a72      	ldr	r2, [pc, #456]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e42:	f043 0308 	orr.w	r3, r3, #8
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b70      	ldr	r3, [pc, #448]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	496d      	ldr	r1, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e5a:	4b6c      	ldr	r3, [pc, #432]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	4968      	ldr	r1, [pc, #416]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4960      	ldr	r1, [pc, #384]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e8e:	4b5f      	ldr	r3, [pc, #380]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	495b      	ldr	r1, [pc, #364]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d109      	bne.n	8003ebc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fd15 	bl	80048dc <RCC_SetFlashLatencyFromMSIRange>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e343      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ebc:	f000 fc4a 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	4950      	ldr	r1, [pc, #320]	; (8004010 <HAL_RCC_OscConfig+0x274>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed8:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <HAL_RCC_OscConfig+0x278>)
 8003eda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003edc:	4b4e      	ldr	r3, [pc, #312]	; (8004018 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fe83 	bl	8002bec <HAL_InitTick>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d052      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	e327      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d032      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a42      	ldr	r2, [pc, #264]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f08:	f7fe fec0 	bl	8002c8c <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f10:	f7fe febc 	bl	8002c8c <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e310      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f22:	4b3a      	ldr	r3, [pc, #232]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a36      	ldr	r2, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f34:	f043 0308 	orr.w	r3, r3, #8
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4931      	ldr	r1, [pc, #196]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	492c      	ldr	r1, [pc, #176]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
 8003f60:	e01a      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fe8d 	bl	8002c8c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f76:	f7fe fe89 	bl	8002c8c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e2dd      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f88:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f0      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1da>
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d074      	beq.n	800408e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d005      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x21a>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d10e      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d064      	beq.n	800408c <HAL_RCC_OscConfig+0x2f0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d160      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e2ba      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x24a>
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0b      	ldr	r2, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	e026      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fee:	d115      	bne.n	800401c <HAL_RCC_OscConfig+0x280>
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ff6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a02      	ldr	r2, [pc, #8]	; (800400c <HAL_RCC_OscConfig+0x270>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x298>
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	0800fe48 	.word	0x0800fe48
 8004014:	20000404 	.word	0x20000404
 8004018:	20000408 	.word	0x20000408
 800401c:	4ba0      	ldr	r3, [pc, #640]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a9f      	ldr	r2, [pc, #636]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	4b9d      	ldr	r3, [pc, #628]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9c      	ldr	r2, [pc, #624]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800402e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fe26 	bl	8002c8c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fe fe22 	bl	8002c8c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e276      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004056:	4b92      	ldr	r3, [pc, #584]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2a8>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fe12 	bl	8002c8c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800406c:	f7fe fe0e 	bl	8002c8c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	; 0x64
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e262      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800407e:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x2d0>
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d060      	beq.n	800415c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d005      	beq.n	80040ac <HAL_RCC_OscConfig+0x310>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d119      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d116      	bne.n	80040da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ac:	4b7c      	ldr	r3, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_OscConfig+0x328>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e23f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c4:	4b76      	ldr	r3, [pc, #472]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	4973      	ldr	r1, [pc, #460]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	e040      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d023      	beq.n	800412a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e2:	4b6f      	ldr	r3, [pc, #444]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a6e      	ldr	r2, [pc, #440]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fdcd 	bl	8002c8c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fdc9 	bl	8002c8c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e21d      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004108:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	495f      	ldr	r1, [pc, #380]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
 8004128:	e018      	b.n	800415c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b5d      	ldr	r3, [pc, #372]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a5c      	ldr	r2, [pc, #368]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fe fda9 	bl	8002c8c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413e:	f7fe fda5 	bl	8002c8c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1f9      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f0      	bne.n	800413e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004170:	4b4b      	ldr	r3, [pc, #300]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe fd84 	bl	8002c8c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004188:	f7fe fd80 	bl	8002c8c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1d4      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ef      	beq.n	8004188 <HAL_RCC_OscConfig+0x3ec>
 80041a8:	e01b      	b.n	80041e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041aa:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041b2:	f023 0301 	bic.w	r3, r3, #1
 80041b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fe fd67 	bl	8002c8c <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c2:	f7fe fd63 	bl	8002c8c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1b7      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ef      	bne.n	80041c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a6 	beq.w	800433c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	; 0x58
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d118      	bne.n	800425a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 800422e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004234:	f7fe fd2a 	bl	8002c8c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fe fd26 	bl	8002c8c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e17a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x508>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d108      	bne.n	8004274 <HAL_RCC_OscConfig+0x4d8>
 8004262:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	e029      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b05      	cmp	r3, #5
 800427a:	d115      	bne.n	80042a8 <HAL_RCC_OscConfig+0x50c>
 800427c:	4b08      	ldr	r3, [pc, #32]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	4a07      	ldr	r2, [pc, #28]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	4a03      	ldr	r2, [pc, #12]	; (80042a0 <HAL_RCC_OscConfig+0x504>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800429c:	e014      	b.n	80042c8 <HAL_RCC_OscConfig+0x52c>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	4b9c      	ldr	r3, [pc, #624]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a9b      	ldr	r2, [pc, #620]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b8:	4b98      	ldr	r3, [pc, #608]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a97      	ldr	r2, [pc, #604]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d016      	beq.n	80042fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe fcdc 	bl	8002c8c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe fcd8 	bl	8002c8c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e12a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ee:	4b8b      	ldr	r3, [pc, #556]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ed      	beq.n	80042d8 <HAL_RCC_OscConfig+0x53c>
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fe fcc5 	bl	8002c8c <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fe fcc1 	bl	8002c8c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e113      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431c:	4b7f      	ldr	r3, [pc, #508]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ed      	bne.n	8004306 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b7a      	ldr	r3, [pc, #488]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	4a79      	ldr	r2, [pc, #484]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80fe 	beq.w	8004542 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	2b02      	cmp	r3, #2
 800434c:	f040 80d0 	bne.w	80044f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004350:	4b72      	ldr	r3, [pc, #456]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 0203 	and.w	r2, r3, #3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	429a      	cmp	r2, r3
 8004362:	d130      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	3b01      	subs	r3, #1
 8004370:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d127      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11f      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004390:	2a07      	cmp	r2, #7
 8004392:	bf14      	ite	ne
 8004394:	2201      	movne	r2, #1
 8004396:	2200      	moveq	r2, #0
 8004398:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800439a:	4293      	cmp	r3, r2
 800439c:	d113      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d109      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d06e      	beq.n	80044a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	d069      	beq.n	80044a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0ad      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043e8:	4b4c      	ldr	r3, [pc, #304]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80043ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043f4:	f7fe fc4a 	bl	8002c8c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fe fc46 	bl	8002c8c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e09a      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCC_OscConfig+0x784>)
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800442a:	3a01      	subs	r2, #1
 800442c:	0112      	lsls	r2, r2, #4
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004434:	0212      	lsls	r2, r2, #8
 8004436:	4311      	orrs	r1, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800443c:	0852      	lsrs	r2, r2, #1
 800443e:	3a01      	subs	r2, #1
 8004440:	0552      	lsls	r2, r2, #21
 8004442:	4311      	orrs	r1, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004448:	0852      	lsrs	r2, r2, #1
 800444a:	3a01      	subs	r2, #1
 800444c:	0652      	lsls	r2, r2, #25
 800444e:	4311      	orrs	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004454:	0912      	lsrs	r2, r2, #4
 8004456:	0452      	lsls	r2, r2, #17
 8004458:	430a      	orrs	r2, r1
 800445a:	4930      	ldr	r1, [pc, #192]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800445c:	4313      	orrs	r3, r2
 800445e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800446c:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0x780>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004478:	f7fe fc08 	bl	8002c8c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fe fc04 	bl	8002c8c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e058      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCC_OscConfig+0x780>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800449e:	e050      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04f      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a4:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d148      	bne.n	8004542 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c8:	f7fe fbe0 	bl	8002c8c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fbdc 	bl	8002c8c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e030      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x734>
 80044ee:	e028      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d023      	beq.n	800453e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_RCC_OscConfig+0x780>)
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fe fbc3 	bl	8002c8c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	e00c      	b.n	8004524 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe fbbf 	bl	8002c8c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d905      	bls.n	8004524 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e013      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
 800451c:	40021000 	.word	0x40021000
 8004520:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ec      	bne.n	800450a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	4905      	ldr	r1, [pc, #20]	; (800454c <HAL_RCC_OscConfig+0x7b0>)
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_OscConfig+0x7b4>)
 8004538:	4013      	ands	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
 800453c:	e001      	b.n	8004542 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	feeefffc 	.word	0xfeeefffc

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0e7      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0207 	bic.w	r2, r3, #7
 800457e:	4970      	ldr	r1, [pc, #448]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b6e      	ldr	r3, [pc, #440]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0cf      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4960      	ldr	r1, [pc, #384]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d04c      	beq.n	800466c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d121      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e0a6      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	4b54      	ldr	r3, [pc, #336]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d115      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e09a      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800460a:	4b4e      	ldr	r3, [pc, #312]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e08e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e086      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800462a:	4b46      	ldr	r3, [pc, #280]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4943      	ldr	r1, [pc, #268]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fe fb26 	bl	8002c8c <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7fe fb22 	bl	8002c8c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e06e      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b3a      	ldr	r3, [pc, #232]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	492b      	ldr	r1, [pc, #172]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800469a:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d210      	bcs.n	80046ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	4923      	ldr	r1, [pc, #140]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b8:	4b21      	ldr	r3, [pc, #132]	; (8004740 <HAL_RCC_ClockConfig+0x1ec>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e036      	b.n	8004738 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4918      	ldr	r1, [pc, #96]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0308 	and.w	r3, r3, #8
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	4910      	ldr	r1, [pc, #64]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004708:	f000 f824 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b0d      	ldr	r3, [pc, #52]	; (8004744 <HAL_RCC_ClockConfig+0x1f0>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	490b      	ldr	r1, [pc, #44]	; (8004748 <HAL_RCC_ClockConfig+0x1f4>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	fa22 f303 	lsr.w	r3, r2, r3
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1f8>)
 8004726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004728:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1fc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe fa5d 	bl	8002bec <HAL_InitTick>
 8004732:	4603      	mov	r3, r0
 8004734:	72fb      	strb	r3, [r7, #11]

  return status;
 8004736:	7afb      	ldrb	r3, [r7, #11]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	0800fe48 	.word	0x0800fe48
 800474c:	20000404 	.word	0x20000404
 8004750:	20000408 	.word	0x20000408

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	2300      	movs	r3, #0
 8004760:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004762:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800476c:	4b3b      	ldr	r3, [pc, #236]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d121      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11e      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004788:	4b34      	ldr	r3, [pc, #208]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10d      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047cc:	4b25      	ldr	r3, [pc, #148]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e004      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d8:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 80047da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d134      	bne.n	800484c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d003      	beq.n	80047fa <HAL_RCC_GetSysClockFreq+0xa6>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d003      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0xac>
 80047f8:	e005      	b.n	8004806 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <HAL_RCC_GetSysClockFreq+0x110>)
 80047fc:	617b      	str	r3, [r7, #20]
      break;
 80047fe:	e005      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_GetSysClockFreq+0x114>)
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	e002      	b.n	800480c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	617b      	str	r3, [r7, #20]
      break;
 800480a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	3301      	adds	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	fb03 f202 	mul.w	r2, r3, r2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_RCC_GetSysClockFreq+0x108>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	0e5b      	lsrs	r3, r3, #25
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	3301      	adds	r3, #1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800484c:	69bb      	ldr	r3, [r7, #24]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3724      	adds	r7, #36	; 0x24
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	0800fe60 	.word	0x0800fe60
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000404 	.word	0x20000404

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a1b      	lsrs	r3, r3, #8
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	0800fe58 	.word	0x0800fe58

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048b4:	f7ff ffda 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0adb      	lsrs	r3, r3, #11
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40021000 	.word	0x40021000
 80048d8:	0800fe58 	.word	0x0800fe58

080048dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048e8:	4b2a      	ldr	r3, [pc, #168]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048f4:	f7ff f9ee 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 80048f8:	6178      	str	r0, [r7, #20]
 80048fa:	e014      	b.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048fc:	4b25      	ldr	r3, [pc, #148]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a24      	ldr	r2, [pc, #144]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
 8004908:	4b22      	ldr	r3, [pc, #136]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004914:	f7ff f9de 	bl	8003cd4 <HAL_PWREx_GetVoltageRange>
 8004918:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800491a:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004924:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492c:	d10b      	bne.n	8004946 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d919      	bls.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2ba0      	cmp	r3, #160	; 0xa0
 8004938:	d902      	bls.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800493a:	2302      	movs	r3, #2
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	e013      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004940:	2301      	movs	r3, #1
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e010      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b80      	cmp	r3, #128	; 0x80
 800494a:	d902      	bls.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800494c:	2303      	movs	r3, #3
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e00a      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d102      	bne.n	800495e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004958:	2302      	movs	r3, #2
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	e004      	b.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d101      	bne.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004964:	2301      	movs	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 0207 	bic.w	r2, r3, #7
 8004970:	4909      	ldr	r1, [pc, #36]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	40022000 	.word	0x40022000

0800499c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049a4:	2300      	movs	r3, #0
 80049a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a8:	2300      	movs	r3, #0
 80049aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d041      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049c0:	d02a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049c6:	d824      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049cc:	d008      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d2:	d81e      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049dc:	d010      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049de:	e018      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e0:	4b86      	ldr	r3, [pc, #536]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a85      	ldr	r2, [pc, #532]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ec:	e015      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fabb 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049fe:	e00c      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3320      	adds	r3, #32
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fba6 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a10:	e003      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	74fb      	strb	r3, [r7, #19]
      break;
 8004a16:	e000      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a1a:	7cfb      	ldrb	r3, [r7, #19]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a20:	4b76      	ldr	r3, [pc, #472]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a2e:	4973      	ldr	r1, [pc, #460]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a36:	e001      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d041      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a50:	d02a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a56:	d824      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a62:	d81e      	bhi.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a6c:	d010      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a70:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a61      	ldr	r2, [pc, #388]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a7c:	e015      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fa73 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a8e:	e00c      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3320      	adds	r3, #32
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fb5e 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8004aa6:	e000      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004aa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab0:	4b52      	ldr	r3, [pc, #328]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004abe:	494f      	ldr	r1, [pc, #316]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ac6:	e001      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	7cfb      	ldrb	r3, [r7, #19]
 8004aca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80a0 	beq.w	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ade:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af4:	4b41      	ldr	r3, [pc, #260]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af8:	4a40      	ldr	r2, [pc, #256]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6593      	str	r3, [r2, #88]	; 0x58
 8004b00:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b10:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a3a      	ldr	r2, [pc, #232]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1c:	f7fe f8b6 	bl	8002c8c <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b22:	e009      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fe f8b2 	bl	8002c8c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	74fb      	strb	r3, [r7, #19]
        break;
 8004b36:	e005      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b38:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d15c      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01f      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d019      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b74:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7a:	4a20      	ldr	r2, [pc, #128]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fe f871 	bl	8002c8c <HAL_GetTick>
 8004baa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bae:	f7fe f86d 	bl	8002c8c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d902      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	74fb      	strb	r3, [r7, #19]
            break;
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ec      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bea:	4904      	ldr	r1, [pc, #16]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bf2:	e009      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
 8004bf8:	e006      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c08:	7c7b      	ldrb	r3, [r7, #17]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d105      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c0e:	4b9e      	ldr	r3, [pc, #632]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	4a9d      	ldr	r2, [pc, #628]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c26:	4b98      	ldr	r3, [pc, #608]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2c:	f023 0203 	bic.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	4994      	ldr	r1, [pc, #592]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c48:	4b8f      	ldr	r3, [pc, #572]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4e:	f023 020c 	bic.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	498c      	ldr	r1, [pc, #560]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6a:	4b87      	ldr	r3, [pc, #540]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	4983      	ldr	r1, [pc, #524]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c8c:	4b7e      	ldr	r3, [pc, #504]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	497b      	ldr	r1, [pc, #492]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbc:	4972      	ldr	r1, [pc, #456]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd0:	4b6d      	ldr	r3, [pc, #436]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	496a      	ldr	r1, [pc, #424]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d00:	4961      	ldr	r1, [pc, #388]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d14:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d22:	4959      	ldr	r1, [pc, #356]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	4950      	ldr	r1, [pc, #320]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	4948      	ldr	r1, [pc, #288]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d7a:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	493f      	ldr	r1, [pc, #252]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004daa:	4937      	ldr	r1, [pc, #220]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dba:	d106      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc6:	60d3      	str	r3, [r2, #12]
 8004dc8:	e011      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f8c8 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d028      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e08:	491f      	ldr	r1, [pc, #124]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e24:	60d3      	str	r3, [r2, #12]
 8004e26:	e011      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f899 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02b      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a02      	ldr	r2, [pc, #8]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e014      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f867 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02f      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eca:	4928      	ldr	r1, [pc, #160]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eda:	d10d      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f844 	bl	8004f70 <RCCEx_PLLSAI1_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d014      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ef2:	7cfb      	ldrb	r3, [r7, #19]
 8004ef4:	74bb      	strb	r3, [r7, #18]
 8004ef6:	e011      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3320      	adds	r3, #32
 8004f06:	2102      	movs	r1, #2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 f925 	bl	8005158 <RCCEx_PLLSAI2_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f12:	7cfb      	ldrb	r3, [r7, #19]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f36:	490d      	ldr	r1, [pc, #52]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4a:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5a:	4904      	ldr	r1, [pc, #16]	; (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f62:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000

08004f70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f7e:	4b75      	ldr	r3, [pc, #468]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d018      	beq.n	8004fbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f8a:	4b72      	ldr	r3, [pc, #456]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d10d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d047      	beq.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
 8004fba:	e044      	b.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d018      	beq.n	8004ff6 <RCCEx_PLLSAI1_Config+0x86>
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d825      	bhi.n	8005014 <RCCEx_PLLSAI1_Config+0xa4>
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d002      	beq.n	8004fd2 <RCCEx_PLLSAI1_Config+0x62>
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d009      	beq.n	8004fe4 <RCCEx_PLLSAI1_Config+0x74>
 8004fd0:	e020      	b.n	8005014 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fd2:	4b60      	ldr	r3, [pc, #384]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11d      	bne.n	800501a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe2:	e01a      	b.n	800501a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe4:	4b5b      	ldr	r3, [pc, #364]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d116      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff4:	e013      	b.n	800501e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ff6:	4b57      	ldr	r3, [pc, #348]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005002:	4b54      	ldr	r3, [pc, #336]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005012:	e006      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
      break;
 8005018:	e004      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005022:	bf00      	nop
    }

    if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800502a:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	3b01      	subs	r3, #1
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	430b      	orrs	r3, r1
 8005040:	4944      	ldr	r1, [pc, #272]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d17d      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800504c:	4b41      	ldr	r3, [pc, #260]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a40      	ldr	r2, [pc, #256]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005058:	f7fd fe18 	bl	8002c8c <HAL_GetTick>
 800505c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505e:	e009      	b.n	8005074 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005060:	f7fd fe14 	bl	8002c8c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d902      	bls.n	8005074 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	73fb      	strb	r3, [r7, #15]
        break;
 8005072:	e005      	b.n	8005080 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005074:	4b37      	ldr	r3, [pc, #220]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1ef      	bne.n	8005060 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d160      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d111      	bne.n	80050b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800508c:	4b31      	ldr	r3, [pc, #196]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6892      	ldr	r2, [r2, #8]
 800509c:	0211      	lsls	r1, r2, #8
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68d2      	ldr	r2, [r2, #12]
 80050a2:	0912      	lsrs	r2, r2, #4
 80050a4:	0452      	lsls	r2, r2, #17
 80050a6:	430a      	orrs	r2, r1
 80050a8:	492a      	ldr	r1, [pc, #168]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]
 80050ae:	e027      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d112      	bne.n	80050dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b6:	4b27      	ldr	r3, [pc, #156]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	0211      	lsls	r1, r2, #8
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6912      	ldr	r2, [r2, #16]
 80050cc:	0852      	lsrs	r2, r2, #1
 80050ce:	3a01      	subs	r2, #1
 80050d0:	0552      	lsls	r2, r2, #21
 80050d2:	430a      	orrs	r2, r1
 80050d4:	491f      	ldr	r1, [pc, #124]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
 80050da:	e011      	b.n	8005100 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050dc:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	0211      	lsls	r1, r2, #8
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6952      	ldr	r2, [r2, #20]
 80050f2:	0852      	lsrs	r2, r2, #1
 80050f4:	3a01      	subs	r2, #1
 80050f6:	0652      	lsls	r2, r2, #25
 80050f8:	430a      	orrs	r2, r1
 80050fa:	4916      	ldr	r1, [pc, #88]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800510a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510c:	f7fd fdbe 	bl	8002c8c <HAL_GetTick>
 8005110:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005112:	e009      	b.n	8005128 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005114:	f7fd fdba 	bl	8002c8c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	73fb      	strb	r3, [r7, #15]
          break;
 8005126:	e005      	b.n	8005134 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ef      	beq.n	8005114 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800513a:	4b06      	ldr	r3, [pc, #24]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	4904      	ldr	r1, [pc, #16]	; (8005154 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40021000 	.word	0x40021000

08005158 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005166:	4b6a      	ldr	r3, [pc, #424]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d018      	beq.n	80051a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005172:	4b67      	ldr	r3, [pc, #412]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f003 0203 	and.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d10d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
       ||
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800518a:	4b61      	ldr	r3, [pc, #388]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
       ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d047      	beq.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	73fb      	strb	r3, [r7, #15]
 80051a2:	e044      	b.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d018      	beq.n	80051de <RCCEx_PLLSAI2_Config+0x86>
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d825      	bhi.n	80051fc <RCCEx_PLLSAI2_Config+0xa4>
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d002      	beq.n	80051ba <RCCEx_PLLSAI2_Config+0x62>
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d009      	beq.n	80051cc <RCCEx_PLLSAI2_Config+0x74>
 80051b8:	e020      	b.n	80051fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ba:	4b55      	ldr	r3, [pc, #340]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11d      	bne.n	8005202 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ca:	e01a      	b.n	8005202 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051dc:	e013      	b.n	8005206 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051de:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051ea:	4b49      	ldr	r3, [pc, #292]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051fa:	e006      	b.n	800520a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e004      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005202:	bf00      	nop
 8005204:	e002      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520a:	bf00      	nop
    }

    if(status == HAL_OK)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10d      	bne.n	800522e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005212:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	430b      	orrs	r3, r1
 8005228:	4939      	ldr	r1, [pc, #228]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d167      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a35      	ldr	r2, [pc, #212]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005240:	f7fd fd24 	bl	8002c8c <HAL_GetTick>
 8005244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005246:	e009      	b.n	800525c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005248:	f7fd fd20 	bl	8002c8c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d902      	bls.n	800525c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	73fb      	strb	r3, [r7, #15]
        break;
 800525a:	e005      	b.n	8005268 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800525c:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ef      	bne.n	8005248 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d14a      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d111      	bne.n	8005298 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800527c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	0211      	lsls	r1, r2, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	0912      	lsrs	r2, r2, #4
 800528c:	0452      	lsls	r2, r2, #17
 800528e:	430a      	orrs	r2, r1
 8005290:	491f      	ldr	r1, [pc, #124]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	614b      	str	r3, [r1, #20]
 8005296:	e011      	b.n	80052bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6892      	ldr	r2, [r2, #8]
 80052a8:	0211      	lsls	r1, r2, #8
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6912      	ldr	r2, [r2, #16]
 80052ae:	0852      	lsrs	r2, r2, #1
 80052b0:	3a01      	subs	r2, #1
 80052b2:	0652      	lsls	r2, r2, #25
 80052b4:	430a      	orrs	r2, r1
 80052b6:	4916      	ldr	r1, [pc, #88]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a13      	ldr	r2, [pc, #76]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fd fce0 	bl	8002c8c <HAL_GetTick>
 80052cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ce:	e009      	b.n	80052e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d0:	f7fd fcdc 	bl	8002c8c <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d902      	bls.n	80052e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	73fb      	strb	r3, [r7, #15]
          break;
 80052e2:	e005      	b.n	80052f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4904      	ldr	r1, [pc, #16]	; (8005310 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000

08005314 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	795b      	ldrb	r3, [r3, #5]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fd fa34 	bl	80027a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0204 	orr.w	r2, r2, #4
 8005350:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d104      	bne.n	800536a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2204      	movs	r2, #4
 8005364:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e027      	b.n	80053ba <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800536a:	f7fd fc8f 	bl	8002c8c <HAL_GetTick>
 800536e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005370:	e015      	b.n	800539e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005372:	f7fd fc8b 	bl	8002c8c <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d90e      	bls.n	800539e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2204      	movs	r2, #4
 8005392:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e00d      	b.n	80053ba <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d0e2      	beq.n	8005372 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b084      	sub	sp, #16
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	791b      	ldrb	r3, [r3, #4]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_RNG_GenerateRandomNumber+0x1a>
 80053d8:	2302      	movs	r3, #2
 80053da:	e044      	b.n	8005466 <HAL_RNG_GenerateRandomNumber+0xa4>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	795b      	ldrb	r3, [r3, #5]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d133      	bne.n	8005454 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7fd fc4b 	bl	8002c8c <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053f8:	e018      	b.n	800542c <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80053fa:	f7fd fc47 	bl	8002c8c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d911      	bls.n	800542c <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d00a      	beq.n	800542c <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e01c      	b.n	8005466 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d1df      	bne.n	80053fa <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	715a      	strb	r2, [r3, #5]
 8005452:	e004      	b.n	800545e <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2204      	movs	r2, #4
 8005458:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	711a      	strb	r2, [r3, #4]

  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e049      	b.n	8005514 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fd f9c9 	bl	800282c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f000 f967 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d001      	beq.n	8005534 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e047      	b.n	80055c4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <HAL_TIM_Base_Start+0xb4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01d      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d018      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_TIM_Base_Start+0xb8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_TIM_Base_Start+0xbc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <HAL_TIM_Base_Start+0xc0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_TIM_Base_Start+0xc4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_TIM_Base_Start+0x66>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <HAL_TIM_Base_Start+0xc8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d115      	bne.n	80055ae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	4b17      	ldr	r3, [pc, #92]	; (80055e8 <HAL_TIM_Base_Start+0xcc>)
 800558a:	4013      	ands	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2b06      	cmp	r3, #6
 8005592:	d015      	beq.n	80055c0 <HAL_TIM_Base_Start+0xa4>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559a:	d011      	beq.n	80055c0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ac:	e008      	b.n	80055c0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e000      	b.n	80055c2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40000400 	.word	0x40000400
 80055d8:	40000800 	.word	0x40000800
 80055dc:	40000c00 	.word	0x40000c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	00010007 	.word	0x00010007

080055ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_TIM_ConfigClockSource+0x1c>
 8005604:	2302      	movs	r3, #2
 8005606:	e0b6      	b.n	8005776 <HAL_TIM_ConfigClockSource+0x18a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800562a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005644:	d03e      	beq.n	80056c4 <HAL_TIM_ConfigClockSource+0xd8>
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	f200 8087 	bhi.w	800575c <HAL_TIM_ConfigClockSource+0x170>
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005652:	f000 8086 	beq.w	8005762 <HAL_TIM_ConfigClockSource+0x176>
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d87f      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800565c:	2b70      	cmp	r3, #112	; 0x70
 800565e:	d01a      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xaa>
 8005660:	2b70      	cmp	r3, #112	; 0x70
 8005662:	d87b      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005664:	2b60      	cmp	r3, #96	; 0x60
 8005666:	d050      	beq.n	800570a <HAL_TIM_ConfigClockSource+0x11e>
 8005668:	2b60      	cmp	r3, #96	; 0x60
 800566a:	d877      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800566c:	2b50      	cmp	r3, #80	; 0x50
 800566e:	d03c      	beq.n	80056ea <HAL_TIM_ConfigClockSource+0xfe>
 8005670:	2b50      	cmp	r3, #80	; 0x50
 8005672:	d873      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d058      	beq.n	800572a <HAL_TIM_ConfigClockSource+0x13e>
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d86f      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800567c:	2b30      	cmp	r3, #48	; 0x30
 800567e:	d064      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005680:	2b30      	cmp	r3, #48	; 0x30
 8005682:	d86b      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 8005684:	2b20      	cmp	r3, #32
 8005686:	d060      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d867      	bhi.n	800575c <HAL_TIM_ConfigClockSource+0x170>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d05c      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005690:	2b10      	cmp	r3, #16
 8005692:	d05a      	beq.n	800574a <HAL_TIM_ConfigClockSource+0x15e>
 8005694:	e062      	b.n	800575c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	f000 f97f 	bl	80059a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	609a      	str	r2, [r3, #8]
      break;
 80056c2:	e04f      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056d4:	f000 f968 	bl	80059a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e6:	609a      	str	r2, [r3, #8]
      break;
 80056e8:	e03c      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056f6:	461a      	mov	r2, r3
 80056f8:	f000 f8dc 	bl	80058b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2150      	movs	r1, #80	; 0x50
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f935 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 8005708:	e02c      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005716:	461a      	mov	r2, r3
 8005718:	f000 f8fb 	bl	8005912 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2160      	movs	r1, #96	; 0x60
 8005722:	4618      	mov	r0, r3
 8005724:	f000 f925 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 8005728:	e01c      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005736:	461a      	mov	r2, r3
 8005738:	f000 f8bc 	bl	80058b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2140      	movs	r1, #64	; 0x40
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f915 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 8005748:	e00c      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f000 f90c 	bl	8005972 <TIM_ITRx_SetConfig>
      break;
 800575a:	e003      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	e000      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a40      	ldr	r2, [pc, #256]	; (8005894 <TIM_Base_SetConfig+0x114>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a3d      	ldr	r2, [pc, #244]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3c      	ldr	r2, [pc, #240]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3b      	ldr	r2, [pc, #236]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3a      	ldr	r2, [pc, #232]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <TIM_Base_SetConfig+0x114>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d01b      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <TIM_Base_SetConfig+0x118>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d017      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	; (800589c <TIM_Base_SetConfig+0x11c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <TIM_Base_SetConfig+0x120>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a29      	ldr	r2, [pc, #164]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a28      	ldr	r2, [pc, #160]	; (80058a8 <TIM_Base_SetConfig+0x128>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <TIM_Base_SetConfig+0x12c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <TIM_Base_SetConfig+0x130>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a10      	ldr	r2, [pc, #64]	; (8005894 <TIM_Base_SetConfig+0x114>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <TIM_Base_SetConfig+0x124>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <TIM_Base_SetConfig+0x128>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a10      	ldr	r2, [pc, #64]	; (80058ac <TIM_Base_SetConfig+0x12c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <TIM_Base_SetConfig+0x130>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f023 0201 	bic.w	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f023 030a 	bic.w	r3, r3, #10
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	621a      	str	r2, [r3, #32]
}
 8005906:	bf00      	nop
 8005908:	371c      	adds	r7, #28
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005912:	b480      	push	{r7}
 8005914:	b087      	sub	sp, #28
 8005916:	af00      	add	r7, sp, #0
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f023 0210 	bic.w	r2, r3, #16
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800593c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	031b      	lsls	r3, r3, #12
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800594e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	f043 0307 	orr.w	r3, r3, #7
 8005994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	021a      	lsls	r2, r3, #8
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e068      	b.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a72:	d018      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a14      	ldr	r2, [pc, #80]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40014000 	.word	0x40014000

08005af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e040      	b.n	8005b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc feb8 	bl	8002890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fc34 	bl	80063ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f979 	bl	8005e3c <UART_SetConfig>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e01b      	b.n	8005b8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fcb3 	bl	80064f0 <UART_CheckIdleState>
 8005b8a:	4603      	mov	r3, r0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08a      	sub	sp, #40	; 0x28
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d178      	bne.n	8005c9e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_UART_Transmit+0x24>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e071      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2221      	movs	r2, #33	; 0x21
 8005bc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bca:	f7fd f85f 	bl	8002c8c <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	88fa      	ldrh	r2, [r7, #6]
 8005bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d108      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e003      	b.n	8005c04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c04:	e030      	b.n	8005c68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	; 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fd15 	bl	8006640 <UART_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e03c      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	881a      	ldrh	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	3302      	adds	r3, #2
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e008      	b.n	8005c56 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	b292      	uxth	r2, r2
 8005c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	3301      	adds	r3, #1
 8005c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1c8      	bne.n	8005c06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fcde 	bl	8006640 <UART_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e005      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e000      	b.n	8005ca0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
  }
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	f040 80b6 	bne.w	8005e30 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Receive+0x28>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0ae      	b.n	8005e32 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2222      	movs	r2, #34	; 0x22
 8005ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cea:	f7fc ffcf 	bl	8002c8c <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	88fa      	ldrh	r2, [r7, #6]
 8005cfc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d08:	d10e      	bne.n	8005d28 <HAL_UART_Receive+0x80>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_UART_Receive+0x76>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d1c:	e02d      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d26:	e028      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10d      	bne.n	8005d4c <HAL_UART_Receive+0xa4>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <HAL_UART_Receive+0x9a>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	22ff      	movs	r2, #255	; 0xff
 8005d3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d40:	e01b      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	227f      	movs	r2, #127	; 0x7f
 8005d46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d4a:	e016      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d54:	d10d      	bne.n	8005d72 <HAL_UART_Receive+0xca>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Receive+0xc0>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	227f      	movs	r2, #127	; 0x7f
 8005d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d66:	e008      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	223f      	movs	r2, #63	; 0x3f
 8005d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d70:	e003      	b.n	8005d7a <HAL_UART_Receive+0xd2>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d80:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	d108      	bne.n	8005d9e <HAL_UART_Receive+0xf6>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d104      	bne.n	8005d9e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e003      	b.n	8005da6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005da6:	e037      	b.n	8005e18 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2200      	movs	r2, #0
 8005db0:	2120      	movs	r1, #32
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 fc44 	bl	8006640 <UART_WaitOnFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e033      	b.n	8005e32 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	8a7b      	ldrh	r3, [r7, #18]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	3302      	adds	r3, #2
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	e00d      	b.n	8005e06 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	8a7b      	ldrh	r3, [r7, #18]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	4013      	ands	r3, r2
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	3301      	adds	r3, #1
 8005e04:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1c1      	bne.n	8005da8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b08a      	sub	sp, #40	; 0x28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4ba4      	ldr	r3, [pc, #656]	; (80060fc <UART_SetConfig+0x2c0>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6812      	ldr	r2, [r2, #0]
 8005e72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68da      	ldr	r2, [r3, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a99      	ldr	r2, [pc, #612]	; (8006100 <UART_SetConfig+0x2c4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a90      	ldr	r2, [pc, #576]	; (8006104 <UART_SetConfig+0x2c8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d126      	bne.n	8005f14 <UART_SetConfig+0xd8>
 8005ec6:	4b90      	ldr	r3, [pc, #576]	; (8006108 <UART_SetConfig+0x2cc>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d81b      	bhi.n	8005f0c <UART_SetConfig+0xd0>
 8005ed4:	a201      	add	r2, pc, #4	; (adr r2, 8005edc <UART_SetConfig+0xa0>)
 8005ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eda:	bf00      	nop
 8005edc:	08005eed 	.word	0x08005eed
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef2:	e116      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efa:	e112      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e10e      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e10a      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e106      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a7c      	ldr	r2, [pc, #496]	; (800610c <UART_SetConfig+0x2d0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d138      	bne.n	8005f90 <UART_SetConfig+0x154>
 8005f1e:	4b7a      	ldr	r3, [pc, #488]	; (8006108 <UART_SetConfig+0x2cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f24:	f003 030c 	and.w	r3, r3, #12
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d82d      	bhi.n	8005f88 <UART_SetConfig+0x14c>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <UART_SetConfig+0xf8>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005f89 	.word	0x08005f89
 8005f3c:	08005f89 	.word	0x08005f89
 8005f40:	08005f89 	.word	0x08005f89
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f89 	.word	0x08005f89
 8005f4c:	08005f89 	.word	0x08005f89
 8005f50:	08005f89 	.word	0x08005f89
 8005f54:	08005f71 	.word	0x08005f71
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e0d8      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e0d4      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e0d0      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e0cc      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e0c8      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a5e      	ldr	r2, [pc, #376]	; (8006110 <UART_SetConfig+0x2d4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d125      	bne.n	8005fe6 <UART_SetConfig+0x1aa>
 8005f9a:	4b5b      	ldr	r3, [pc, #364]	; (8006108 <UART_SetConfig+0x2cc>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d016      	beq.n	8005fd6 <UART_SetConfig+0x19a>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d818      	bhi.n	8005fde <UART_SetConfig+0x1a2>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d00a      	beq.n	8005fc6 <UART_SetConfig+0x18a>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d814      	bhi.n	8005fde <UART_SetConfig+0x1a2>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <UART_SetConfig+0x182>
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d008      	beq.n	8005fce <UART_SetConfig+0x192>
 8005fbc:	e00f      	b.n	8005fde <UART_SetConfig+0x1a2>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc4:	e0ad      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fcc:	e0a9      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005fce:	2304      	movs	r3, #4
 8005fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd4:	e0a5      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fdc:	e0a1      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005fde:	2310      	movs	r3, #16
 8005fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe4:	e09d      	b.n	8006122 <UART_SetConfig+0x2e6>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a4a      	ldr	r2, [pc, #296]	; (8006114 <UART_SetConfig+0x2d8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d125      	bne.n	800603c <UART_SetConfig+0x200>
 8005ff0:	4b45      	ldr	r3, [pc, #276]	; (8006108 <UART_SetConfig+0x2cc>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8005ffc:	d016      	beq.n	800602c <UART_SetConfig+0x1f0>
 8005ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8006000:	d818      	bhi.n	8006034 <UART_SetConfig+0x1f8>
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d00a      	beq.n	800601c <UART_SetConfig+0x1e0>
 8006006:	2b80      	cmp	r3, #128	; 0x80
 8006008:	d814      	bhi.n	8006034 <UART_SetConfig+0x1f8>
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <UART_SetConfig+0x1d8>
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d008      	beq.n	8006024 <UART_SetConfig+0x1e8>
 8006012:	e00f      	b.n	8006034 <UART_SetConfig+0x1f8>
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601a:	e082      	b.n	8006122 <UART_SetConfig+0x2e6>
 800601c:	2302      	movs	r3, #2
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006022:	e07e      	b.n	8006122 <UART_SetConfig+0x2e6>
 8006024:	2304      	movs	r3, #4
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602a:	e07a      	b.n	8006122 <UART_SetConfig+0x2e6>
 800602c:	2308      	movs	r3, #8
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e076      	b.n	8006122 <UART_SetConfig+0x2e6>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e072      	b.n	8006122 <UART_SetConfig+0x2e6>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a35      	ldr	r2, [pc, #212]	; (8006118 <UART_SetConfig+0x2dc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d12a      	bne.n	800609c <UART_SetConfig+0x260>
 8006046:	4b30      	ldr	r3, [pc, #192]	; (8006108 <UART_SetConfig+0x2cc>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006054:	d01a      	beq.n	800608c <UART_SetConfig+0x250>
 8006056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605a:	d81b      	bhi.n	8006094 <UART_SetConfig+0x258>
 800605c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006060:	d00c      	beq.n	800607c <UART_SetConfig+0x240>
 8006062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006066:	d815      	bhi.n	8006094 <UART_SetConfig+0x258>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <UART_SetConfig+0x238>
 800606c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006070:	d008      	beq.n	8006084 <UART_SetConfig+0x248>
 8006072:	e00f      	b.n	8006094 <UART_SetConfig+0x258>
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607a:	e052      	b.n	8006122 <UART_SetConfig+0x2e6>
 800607c:	2302      	movs	r3, #2
 800607e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006082:	e04e      	b.n	8006122 <UART_SetConfig+0x2e6>
 8006084:	2304      	movs	r3, #4
 8006086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608a:	e04a      	b.n	8006122 <UART_SetConfig+0x2e6>
 800608c:	2308      	movs	r3, #8
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006092:	e046      	b.n	8006122 <UART_SetConfig+0x2e6>
 8006094:	2310      	movs	r3, #16
 8006096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609a:	e042      	b.n	8006122 <UART_SetConfig+0x2e6>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <UART_SetConfig+0x2c4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d13a      	bne.n	800611c <UART_SetConfig+0x2e0>
 80060a6:	4b18      	ldr	r3, [pc, #96]	; (8006108 <UART_SetConfig+0x2cc>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060b4:	d01a      	beq.n	80060ec <UART_SetConfig+0x2b0>
 80060b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ba:	d81b      	bhi.n	80060f4 <UART_SetConfig+0x2b8>
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	d00c      	beq.n	80060dc <UART_SetConfig+0x2a0>
 80060c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c6:	d815      	bhi.n	80060f4 <UART_SetConfig+0x2b8>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <UART_SetConfig+0x298>
 80060cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d0:	d008      	beq.n	80060e4 <UART_SetConfig+0x2a8>
 80060d2:	e00f      	b.n	80060f4 <UART_SetConfig+0x2b8>
 80060d4:	2300      	movs	r3, #0
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060da:	e022      	b.n	8006122 <UART_SetConfig+0x2e6>
 80060dc:	2302      	movs	r3, #2
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e2:	e01e      	b.n	8006122 <UART_SetConfig+0x2e6>
 80060e4:	2304      	movs	r3, #4
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e01a      	b.n	8006122 <UART_SetConfig+0x2e6>
 80060ec:	2308      	movs	r3, #8
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e016      	b.n	8006122 <UART_SetConfig+0x2e6>
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fa:	e012      	b.n	8006122 <UART_SetConfig+0x2e6>
 80060fc:	efff69f3 	.word	0xefff69f3
 8006100:	40008000 	.word	0x40008000
 8006104:	40013800 	.word	0x40013800
 8006108:	40021000 	.word	0x40021000
 800610c:	40004400 	.word	0x40004400
 8006110:	40004800 	.word	0x40004800
 8006114:	40004c00 	.word	0x40004c00
 8006118:	40005000 	.word	0x40005000
 800611c:	2310      	movs	r3, #16
 800611e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a9f      	ldr	r2, [pc, #636]	; (80063a4 <UART_SetConfig+0x568>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d17a      	bne.n	8006222 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800612c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006130:	2b08      	cmp	r3, #8
 8006132:	d824      	bhi.n	800617e <UART_SetConfig+0x342>
 8006134:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x300>)
 8006136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613a:	bf00      	nop
 800613c:	08006161 	.word	0x08006161
 8006140:	0800617f 	.word	0x0800617f
 8006144:	08006169 	.word	0x08006169
 8006148:	0800617f 	.word	0x0800617f
 800614c:	0800616f 	.word	0x0800616f
 8006150:	0800617f 	.word	0x0800617f
 8006154:	0800617f 	.word	0x0800617f
 8006158:	0800617f 	.word	0x0800617f
 800615c:	08006177 	.word	0x08006177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006160:	f7fe fb90 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006164:	61f8      	str	r0, [r7, #28]
        break;
 8006166:	e010      	b.n	800618a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006168:	4b8f      	ldr	r3, [pc, #572]	; (80063a8 <UART_SetConfig+0x56c>)
 800616a:	61fb      	str	r3, [r7, #28]
        break;
 800616c:	e00d      	b.n	800618a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800616e:	f7fe faf1 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006172:	61f8      	str	r0, [r7, #28]
        break;
 8006174:	e009      	b.n	800618a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617a:	61fb      	str	r3, [r7, #28]
        break;
 800617c:	e005      	b.n	800618a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80fb 	beq.w	8006388 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d305      	bcc.n	80061ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d903      	bls.n	80061b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b4:	e0e8      	b.n	8006388 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	2200      	movs	r2, #0
 80061ba:	461c      	mov	r4, r3
 80061bc:	4615      	mov	r5, r2
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	022b      	lsls	r3, r5, #8
 80061c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061cc:	0222      	lsls	r2, r4, #8
 80061ce:	68f9      	ldr	r1, [r7, #12]
 80061d0:	6849      	ldr	r1, [r1, #4]
 80061d2:	0849      	lsrs	r1, r1, #1
 80061d4:	2000      	movs	r0, #0
 80061d6:	4688      	mov	r8, r1
 80061d8:	4681      	mov	r9, r0
 80061da:	eb12 0a08 	adds.w	sl, r2, r8
 80061de:	eb43 0b09 	adc.w	fp, r3, r9
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f0:	4650      	mov	r0, sl
 80061f2:	4659      	mov	r1, fp
 80061f4:	f7fa fd48 	bl	8000c88 <__aeabi_uldivmod>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4613      	mov	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006206:	d308      	bcc.n	800621a <UART_SetConfig+0x3de>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620e:	d204      	bcs.n	800621a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	e0b6      	b.n	8006388 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006220:	e0b2      	b.n	8006388 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800622a:	d15e      	bne.n	80062ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800622c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006230:	2b08      	cmp	r3, #8
 8006232:	d828      	bhi.n	8006286 <UART_SetConfig+0x44a>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0x400>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	08006287 	.word	0x08006287
 800624c:	08006277 	.word	0x08006277
 8006250:	08006287 	.word	0x08006287
 8006254:	08006287 	.word	0x08006287
 8006258:	08006287 	.word	0x08006287
 800625c:	0800627f 	.word	0x0800627f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006260:	f7fe fb10 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006264:	61f8      	str	r0, [r7, #28]
        break;
 8006266:	e014      	b.n	8006292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006268:	f7fe fb22 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 800626c:	61f8      	str	r0, [r7, #28]
        break;
 800626e:	e010      	b.n	8006292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006270:	4b4d      	ldr	r3, [pc, #308]	; (80063a8 <UART_SetConfig+0x56c>)
 8006272:	61fb      	str	r3, [r7, #28]
        break;
 8006274:	e00d      	b.n	8006292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006276:	f7fe fa6d 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 800627a:	61f8      	str	r0, [r7, #28]
        break;
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	61fb      	str	r3, [r7, #28]
        break;
 8006284:	e005      	b.n	8006292 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d077      	beq.n	8006388 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	005a      	lsls	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	441a      	add	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d916      	bls.n	80062e2 <UART_SetConfig+0x4a6>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ba:	d212      	bcs.n	80062e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f023 030f 	bic.w	r3, r3, #15
 80062c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	8afb      	ldrh	r3, [r7, #22]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	8afa      	ldrh	r2, [r7, #22]
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	e052      	b.n	8006388 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062e8:	e04e      	b.n	8006388 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d827      	bhi.n	8006342 <UART_SetConfig+0x506>
 80062f2:	a201      	add	r2, pc, #4	; (adr r2, 80062f8 <UART_SetConfig+0x4bc>)
 80062f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f8:	0800631d 	.word	0x0800631d
 80062fc:	08006325 	.word	0x08006325
 8006300:	0800632d 	.word	0x0800632d
 8006304:	08006343 	.word	0x08006343
 8006308:	08006333 	.word	0x08006333
 800630c:	08006343 	.word	0x08006343
 8006310:	08006343 	.word	0x08006343
 8006314:	08006343 	.word	0x08006343
 8006318:	0800633b 	.word	0x0800633b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800631c:	f7fe fab2 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006320:	61f8      	str	r0, [r7, #28]
        break;
 8006322:	e014      	b.n	800634e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006324:	f7fe fac4 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8006328:	61f8      	str	r0, [r7, #28]
        break;
 800632a:	e010      	b.n	800634e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800632c:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <UART_SetConfig+0x56c>)
 800632e:	61fb      	str	r3, [r7, #28]
        break;
 8006330:	e00d      	b.n	800634e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006332:	f7fe fa0f 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006336:	61f8      	str	r0, [r7, #28]
        break;
 8006338:	e009      	b.n	800634e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800633a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633e:	61fb      	str	r3, [r7, #28]
        break;
 8006340:	e005      	b.n	800634e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800634c:	bf00      	nop
    }

    if (pclk != 0U)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d019      	beq.n	8006388 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	085a      	lsrs	r2, r3, #1
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	441a      	add	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	fbb2 f3f3 	udiv	r3, r2, r3
 8006366:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b0f      	cmp	r3, #15
 800636c:	d909      	bls.n	8006382 <UART_SetConfig+0x546>
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d205      	bcs.n	8006382 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60da      	str	r2, [r3, #12]
 8006380:	e002      	b.n	8006388 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006394:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006398:	4618      	mov	r0, r3
 800639a:	3728      	adds	r7, #40	; 0x28
 800639c:	46bd      	mov	sp, r7
 800639e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063a2:	bf00      	nop
 80063a4:	40008000 	.word	0x40008000
 80063a8:	00f42400 	.word	0x00f42400

080063ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00a      	beq.n	800645e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01a      	beq.n	80064c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064aa:	d10a      	bne.n	80064c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b098      	sub	sp, #96	; 0x60
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006500:	f7fc fbc4 	bl	8002c8c <HAL_GetTick>
 8006504:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b08      	cmp	r3, #8
 8006512:	d12e      	bne.n	8006572 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800651c:	2200      	movs	r2, #0
 800651e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f88c 	bl	8006640 <UART_WaitOnFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d021      	beq.n	8006572 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006542:	653b      	str	r3, [r7, #80]	; 0x50
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
 800654e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e6      	bne.n	800652e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e062      	b.n	8006638 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d149      	bne.n	8006614 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006588:	2200      	movs	r2, #0
 800658a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f856 	bl	8006640 <UART_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d03c      	beq.n	8006614 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	623b      	str	r3, [r7, #32]
   return(result);
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e6      	bne.n	800659a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	60fb      	str	r3, [r7, #12]
   return(result);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 0301 	bic.w	r3, r3, #1
 80065e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ec:	61fa      	str	r2, [r7, #28]
 80065ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	69b9      	ldr	r1, [r7, #24]
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	617b      	str	r3, [r7, #20]
   return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e5      	bne.n	80065cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e011      	b.n	8006638 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3758      	adds	r7, #88	; 0x58
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	4613      	mov	r3, r2
 800664e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006650:	e049      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006658:	d045      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800665a:	f7fc fb17 	bl	8002c8c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	429a      	cmp	r2, r3
 8006668:	d302      	bcc.n	8006670 <UART_WaitOnFlagUntilTimeout+0x30>
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e048      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d031      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b08      	cmp	r3, #8
 800668e:	d110      	bne.n	80066b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2208      	movs	r2, #8
 8006696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f838 	bl	800670e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2208      	movs	r2, #8
 80066a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e029      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c0:	d111      	bne.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f81e 	bl	800670e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e00f      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d0a6      	beq.n	8006652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800670e:	b480      	push	{r7}
 8006710:	b095      	sub	sp, #84	; 0x54
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006734:	643b      	str	r3, [r7, #64]	; 0x40
 8006736:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	61fb      	str	r3, [r7, #28]
   return(result);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2b01      	cmp	r3, #1
 8006782:	d118      	bne.n	80067b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	60bb      	str	r3, [r7, #8]
   return(result);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f023 0310 	bic.w	r3, r3, #16
 8006798:	647b      	str	r3, [r7, #68]	; 0x44
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6979      	ldr	r1, [r7, #20]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	613b      	str	r3, [r7, #16]
   return(result);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80067ca:	bf00      	nop
 80067cc:	3754      	adds	r7, #84	; 0x54
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <__NVIC_SetPriority>:
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	db0a      	blt.n	8006802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	490c      	ldr	r1, [pc, #48]	; (8006824 <__NVIC_SetPriority+0x4c>)
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	0112      	lsls	r2, r2, #4
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	440b      	add	r3, r1
 80067fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006800:	e00a      	b.n	8006818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	4908      	ldr	r1, [pc, #32]	; (8006828 <__NVIC_SetPriority+0x50>)
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	3b04      	subs	r3, #4
 8006810:	0112      	lsls	r2, r2, #4
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	440b      	add	r3, r1
 8006816:	761a      	strb	r2, [r3, #24]
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	e000e100 	.word	0xe000e100
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006830:	2100      	movs	r1, #0
 8006832:	f06f 0004 	mvn.w	r0, #4
 8006836:	f7ff ffcf 	bl	80067d8 <__NVIC_SetPriority>
#endif
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006846:	f3ef 8305 	mrs	r3, IPSR
 800684a:	603b      	str	r3, [r7, #0]
  return(result);
 800684c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	e00c      	b.n	8006874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800685a:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <osKernelInitialize+0x44>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006862:	4b08      	ldr	r3, [pc, #32]	; (8006884 <osKernelInitialize+0x44>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006868:	2300      	movs	r3, #0
 800686a:	607b      	str	r3, [r7, #4]
 800686c:	e002      	b.n	8006874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800686e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006874:	687b      	ldr	r3, [r7, #4]
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000fe8 	.word	0x20000fe8

08006888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	603b      	str	r3, [r7, #0]
  return(result);
 8006894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800689a:	f06f 0305 	mvn.w	r3, #5
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e010      	b.n	80068c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80068a2:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <osKernelStart+0x48>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d109      	bne.n	80068be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80068aa:	f7ff ffbf 	bl	800682c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80068ae:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <osKernelStart+0x48>)
 80068b0:	2202      	movs	r2, #2
 80068b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068b4:	f001 fdb2 	bl	800841c <vTaskStartScheduler>
      stat = osOK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	e002      	b.n	80068c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068c4:	687b      	ldr	r3, [r7, #4]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000fe8 	.word	0x20000fe8

080068d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08e      	sub	sp, #56	; 0x38
 80068d8:	af04      	add	r7, sp, #16
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e4:	f3ef 8305 	mrs	r3, IPSR
 80068e8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d17f      	bne.n	80069f0 <osThreadNew+0x11c>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d07c      	beq.n	80069f0 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80068f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068fa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068fc:	2318      	movs	r3, #24
 80068fe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006908:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d045      	beq.n	800699c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <osThreadNew+0x4a>
        name = attr->name;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <osThreadNew+0x70>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	2b38      	cmp	r3, #56	; 0x38
 8006936:	d805      	bhi.n	8006944 <osThreadNew+0x70>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <osThreadNew+0x74>
        return (NULL);
 8006944:	2300      	movs	r3, #0
 8006946:	e054      	b.n	80069f2 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	089b      	lsrs	r3, r3, #2
 8006956:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <osThreadNew+0xaa>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2ba7      	cmp	r3, #167	; 0xa7
 8006966:	d90a      	bls.n	800697e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800696c:	2b00      	cmp	r3, #0
 800696e:	d006      	beq.n	800697e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <osThreadNew+0xaa>
        mem = 1;
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e010      	b.n	80069a0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10c      	bne.n	80069a0 <osThreadNew+0xcc>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d108      	bne.n	80069a0 <osThreadNew+0xcc>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <osThreadNew+0xcc>
          mem = 0;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	e001      	b.n	80069a0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d110      	bne.n	80069c8 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80069ae:	9202      	str	r2, [sp, #8]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6a3a      	ldr	r2, [r7, #32]
 80069ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f001 fb41 	bl	8008044 <xTaskCreateStatic>
 80069c2:	4603      	mov	r3, r0
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	e013      	b.n	80069f0 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d110      	bne.n	80069f0 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	f107 0310 	add.w	r3, r7, #16
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f001 fb8c 	bl	80080fe <xTaskCreate>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d001      	beq.n	80069f0 <osThreadNew+0x11c>
            hTask = NULL;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069f0:	693b      	ldr	r3, [r7, #16]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3728      	adds	r7, #40	; 0x28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
	...

080069fc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a02:	f3ef 8305 	mrs	r3, IPSR
 8006a06:	603b      	str	r3, [r7, #0]
  return(result);
 8006a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <osThreadYield+0x1a>
    stat = osErrorISR;
 8006a0e:	f06f 0305 	mvn.w	r3, #5
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	e009      	b.n	8006a2a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <osThreadYield+0x3c>)
 8006a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8006a2a:	687b      	ldr	r3, [r7, #4]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a48:	f3ef 8305 	mrs	r3, IPSR
 8006a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a4e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d174      	bne.n	8006b3e <osMutexNew+0x102>
    if (attr != NULL) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61bb      	str	r3, [r7, #24]
 8006a60:	e001      	b.n	8006a66 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <osMutexNew+0x3a>
      rmtx = 1U;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e001      	b.n	8006a7a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f003 0308 	and.w	r3, r3, #8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d15c      	bne.n	8006b3e <osMutexNew+0x102>
      mem = -1;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a88:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d015      	beq.n	8006abc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <osMutexNew+0x6a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	2b4f      	cmp	r3, #79	; 0x4f
 8006a9e:	d902      	bls.n	8006aa6 <osMutexNew+0x6a>
          mem = 1;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	e00c      	b.n	8006ac0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <osMutexNew+0x84>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d104      	bne.n	8006ac0 <osMutexNew+0x84>
            mem = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	e001      	b.n	8006ac0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d112      	bne.n	8006aec <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d007      	beq.n	8006adc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2004      	movs	r0, #4
 8006ad4:	f000 fc69 	bl	80073aa <xQueueCreateMutexStatic>
 8006ad8:	61f8      	str	r0, [r7, #28]
 8006ada:	e016      	b.n	8006b0a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	f000 fc61 	bl	80073aa <xQueueCreateMutexStatic>
 8006ae8:	61f8      	str	r0, [r7, #28]
 8006aea:	e00e      	b.n	8006b0a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10b      	bne.n	8006b0a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006af8:	2004      	movs	r0, #4
 8006afa:	f000 fc3e 	bl	800737a <xQueueCreateMutex>
 8006afe:	61f8      	str	r0, [r7, #28]
 8006b00:	e003      	b.n	8006b0a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006b02:	2001      	movs	r0, #1
 8006b04:	f000 fc39 	bl	800737a <xQueueCreateMutex>
 8006b08:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00c      	beq.n	8006b2a <osMutexNew+0xee>
        if (attr != NULL) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <osMutexNew+0xe2>
          name = attr->name;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	e001      	b.n	8006b22 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	69f8      	ldr	r0, [r7, #28]
 8006b26:	f001 fa2f 	bl	8007f88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <osMutexNew+0x102>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006b3e:	69fb      	ldr	r3, [r7, #28]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f023 0301 	bic.w	r3, r3, #1
 8006b58:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b66:	f3ef 8305 	mrs	r3, IPSR
 8006b6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b6c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006b72:	f06f 0305 	mvn.w	r3, #5
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e02c      	b.n	8006bd4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006b80:	f06f 0303 	mvn.w	r3, #3
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e025      	b.n	8006bd4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d011      	beq.n	8006bb2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6938      	ldr	r0, [r7, #16]
 8006b92:	f000 fc59 	bl	8007448 <xQueueTakeMutexRecursive>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d01b      	beq.n	8006bd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d003      	beq.n	8006baa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006ba2:	f06f 0301 	mvn.w	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e014      	b.n	8006bd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006baa:	f06f 0302 	mvn.w	r3, #2
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e010      	b.n	8006bd4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6938      	ldr	r0, [r7, #16]
 8006bb6:	f000 fef7 	bl	80079a8 <xQueueSemaphoreTake>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d009      	beq.n	8006bd4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006bc6:	f06f 0301 	mvn.w	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e002      	b.n	8006bd4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006bce:	f06f 0302 	mvn.w	r3, #2
 8006bd2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006bd4:	697b      	ldr	r3, [r7, #20]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bfa:	f3ef 8305 	mrs	r3, IPSR
 8006bfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <osMutexRelease+0x30>
    stat = osErrorISR;
 8006c06:	f06f 0305 	mvn.w	r3, #5
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	e01f      	b.n	8006c4e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d103      	bne.n	8006c1c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006c14:	f06f 0303 	mvn.w	r3, #3
 8006c18:	617b      	str	r3, [r7, #20]
 8006c1a:	e018      	b.n	8006c4e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d009      	beq.n	8006c36 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f000 fbdc 	bl	80073e0 <xQueueGiveMutexRecursive>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d00f      	beq.n	8006c4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c2e:	f06f 0302 	mvn.w	r3, #2
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	e00b      	b.n	8006c4e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006c36:	2300      	movs	r3, #0
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	6938      	ldr	r0, [r7, #16]
 8006c3e:	f000 fc39 	bl	80074b4 <xQueueGenericSend>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d002      	beq.n	8006c4e <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c48:	f06f 0302 	mvn.w	r3, #2
 8006c4c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c4e:	697b      	ldr	r3, [r7, #20]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b08a      	sub	sp, #40	; 0x28
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c68:	f3ef 8305 	mrs	r3, IPSR
 8006c6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d15f      	bne.n	8006d34 <osMessageQueueNew+0xdc>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d05c      	beq.n	8006d34 <osMessageQueueNew+0xdc>
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d059      	beq.n	8006d34 <osMessageQueueNew+0xdc>
    mem = -1;
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d029      	beq.n	8006ce0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d012      	beq.n	8006cba <osMessageQueueNew+0x62>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	2b4f      	cmp	r3, #79	; 0x4f
 8006c9a:	d90e      	bls.n	8006cba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d302      	bcc.n	8006cba <osMessageQueueNew+0x62>
        mem = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e014      	b.n	8006ce4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d110      	bne.n	8006ce4 <osMessageQueueNew+0x8c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10c      	bne.n	8006ce4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d108      	bne.n	8006ce4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d104      	bne.n	8006ce4 <osMessageQueueNew+0x8c>
          mem = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e001      	b.n	8006ce4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d10b      	bne.n	8006d02 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	9100      	str	r1, [sp, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 fa4f 	bl	800719c <xQueueGenericCreateStatic>
 8006cfe:	61f8      	str	r0, [r7, #28]
 8006d00:	e008      	b.n	8006d14 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fabd 	bl	800728c <xQueueGenericCreate>
 8006d12:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00c      	beq.n	8006d34 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e001      	b.n	8006d2c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	69f8      	ldr	r0, [r7, #28]
 8006d30:	f001 f92a 	bl	8007f88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d34:	69fb      	ldr	r3, [r7, #28]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d58:	f3ef 8305 	mrs	r3, IPSR
 8006d5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006d5e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d028      	beq.n	8006db6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <osMessageQueuePut+0x36>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <osMessageQueuePut+0x36>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006d76:	f06f 0303 	mvn.w	r3, #3
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e038      	b.n	8006df0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d82:	f107 0210 	add.w	r2, r7, #16
 8006d86:	2300      	movs	r3, #0
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	69b8      	ldr	r0, [r7, #24]
 8006d8c:	f000 fc90 	bl	80076b0 <xQueueGenericSendFromISR>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d003      	beq.n	8006d9e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006d96:	f06f 0302 	mvn.w	r3, #2
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e028      	b.n	8006df0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d025      	beq.n	8006df0 <osMessageQueuePut+0xb0>
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <osMessageQueuePut+0xbc>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	e01c      	b.n	8006df0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <osMessageQueuePut+0x82>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006dc2:	f06f 0303 	mvn.w	r3, #3
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e012      	b.n	8006df0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006dca:	2300      	movs	r3, #0
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	69b8      	ldr	r0, [r7, #24]
 8006dd2:	f000 fb6f 	bl	80074b4 <xQueueGenericSend>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d009      	beq.n	8006df0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006de2:	f06f 0301 	mvn.w	r3, #1
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	e002      	b.n	8006df0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006dea:	f06f 0302 	mvn.w	r3, #2
 8006dee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006df0:	69fb      	ldr	r3, [r7, #28]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	e000ed04 	.word	0xe000ed04

08006e00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e16:	f3ef 8305 	mrs	r3, IPSR
 8006e1a:	617b      	str	r3, [r7, #20]
  return(result);
 8006e1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d028      	beq.n	8006e74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <osMessageQueueGet+0x34>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <osMessageQueueGet+0x34>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006e34:	f06f 0303 	mvn.w	r3, #3
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e037      	b.n	8006eac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	461a      	mov	r2, r3
 8006e46:	68b9      	ldr	r1, [r7, #8]
 8006e48:	69b8      	ldr	r0, [r7, #24]
 8006e4a:	f000 feb9 	bl	8007bc0 <xQueueReceiveFromISR>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d003      	beq.n	8006e5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006e54:	f06f 0302 	mvn.w	r3, #2
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e027      	b.n	8006eac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d024      	beq.n	8006eac <osMessageQueueGet+0xac>
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <osMessageQueueGet+0xb8>)
 8006e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	e01b      	b.n	8006eac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <osMessageQueueGet+0x80>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006e80:	f06f 0303 	mvn.w	r3, #3
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	e011      	b.n	8006eac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	68b9      	ldr	r1, [r7, #8]
 8006e8c:	69b8      	ldr	r0, [r7, #24]
 8006e8e:	f000 fcab 	bl	80077e8 <xQueueReceive>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d009      	beq.n	8006eac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006e9e:	f06f 0301 	mvn.w	r3, #1
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	e002      	b.n	8006eac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006ea6:	f06f 0302 	mvn.w	r3, #2
 8006eaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006eac:	69fb      	ldr	r3, [r7, #28]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3720      	adds	r7, #32
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e00e      	b.n	8006ef2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed4:	f3ef 8305 	mrs	r3, IPSR
 8006ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006eda:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006ee0:	6938      	ldr	r0, [r7, #16]
 8006ee2:	f000 ff0b 	bl	8007cfc <uxQueueMessagesWaitingFromISR>
 8006ee6:	6178      	str	r0, [r7, #20]
 8006ee8:	e003      	b.n	8006ef2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f000 fee8 	bl	8007cc0 <uxQueueMessagesWaiting>
 8006ef0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006ef2:	697b      	ldr	r3, [r7, #20]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4a06      	ldr	r2, [pc, #24]	; (8006f2c <vApplicationGetIdleTaskMemory+0x30>)
 8006f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f1a:	601a      	str	r2, [r3, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20000fec 	.word	0x20000fec
 8006f2c:	20001094 	.word	0x20001094

08006f30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a07      	ldr	r2, [pc, #28]	; (8006f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4a06      	ldr	r2, [pc, #24]	; (8006f60 <vApplicationGetTimerTaskMemory+0x30>)
 8006f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	20001494 	.word	0x20001494
 8006f60:	2000153c 	.word	0x2000153c

08006f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0208 	add.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f103 0208 	add.w	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f103 0208 	add.w	r2, r3, #8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800701c:	d103      	bne.n	8007026 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e00c      	b.n	8007040 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3308      	adds	r3, #8
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e002      	b.n	8007034 <vListInsert+0x2e>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	429a      	cmp	r2, r3
 800703e:	d2f6      	bcs.n	800702e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6892      	ldr	r2, [r2, #8]
 800708e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6852      	ldr	r2, [r2, #4]
 8007098:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d103      	bne.n	80070ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	1e5a      	subs	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10a      	bne.n	80070f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070f6:	f002 fc55 	bl	80099a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	68f9      	ldr	r1, [r7, #12]
 8007104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007106:	fb01 f303 	mul.w	r3, r1, r3
 800710a:	441a      	add	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	3b01      	subs	r3, #1
 8007128:	68f9      	ldr	r1, [r7, #12]
 800712a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d114      	bne.n	8007176 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01a      	beq.n	800718a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3310      	adds	r3, #16
 8007158:	4618      	mov	r0, r3
 800715a:	f001 fbf9 	bl	8008950 <xTaskRemoveFromEventList>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d012      	beq.n	800718a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <xQueueGenericReset+0xcc>)
 8007166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	e009      	b.n	800718a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3310      	adds	r3, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fef2 	bl	8006f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3324      	adds	r3, #36	; 0x24
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff feed 	bl	8006f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800718a:	f002 fc3b 	bl	8009a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800718e:	2301      	movs	r3, #1
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08e      	sub	sp, #56	; 0x38
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <xQueueGenericCreateStatic+0x52>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <xQueueGenericCreateStatic+0x56>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <xQueueGenericCreateStatic+0x58>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10a      	bne.n	800720e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <xQueueGenericCreateStatic+0x7e>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <xQueueGenericCreateStatic+0x82>
 800721a:	2301      	movs	r3, #1
 800721c:	e000      	b.n	8007220 <xQueueGenericCreateStatic+0x84>
 800721e:	2300      	movs	r3, #0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10a      	bne.n	800723a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	61fb      	str	r3, [r7, #28]
}
 8007236:	bf00      	nop
 8007238:	e7fe      	b.n	8007238 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800723a:	2350      	movs	r3, #80	; 0x50
 800723c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b50      	cmp	r3, #80	; 0x50
 8007242:	d00a      	beq.n	800725a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	61bb      	str	r3, [r7, #24]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800725a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00d      	beq.n	8007282 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800726e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	4613      	mov	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 f83f 	bl	8007300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007284:	4618      	mov	r0, r3
 8007286:	3730      	adds	r7, #48	; 0x30
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	; 0x28
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	613b      	str	r3, [r7, #16]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	3350      	adds	r3, #80	; 0x50
 80072c4:	4618      	mov	r0, r3
 80072c6:	f002 fc8f 	bl	8009be8 <pvPortMalloc>
 80072ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3350      	adds	r3, #80	; 0x50
 80072da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072e4:	79fa      	ldrb	r2, [r7, #7]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	4613      	mov	r3, r2
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f805 	bl	8007300 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072f6:	69bb      	ldr	r3, [r7, #24]
	}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	e002      	b.n	8007322 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800732e:	2101      	movs	r1, #1
 8007330:	69b8      	ldr	r0, [r7, #24]
 8007332:	f7ff fecb 	bl	80070cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00e      	beq.n	8007372 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007366:	2300      	movs	r3, #0
 8007368:	2200      	movs	r2, #0
 800736a:	2100      	movs	r1, #0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8a1 	bl	80074b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	4603      	mov	r3, r0
 8007382:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	461a      	mov	r2, r3
 8007390:	6939      	ldr	r1, [r7, #16]
 8007392:	6978      	ldr	r0, [r7, #20]
 8007394:	f7ff ff7a 	bl	800728c <xQueueGenericCreate>
 8007398:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff ffd3 	bl	8007346 <prvInitialiseMutex>

		return xNewQueue;
 80073a0:	68fb      	ldr	r3, [r7, #12]
	}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b088      	sub	sp, #32
 80073ae:	af02      	add	r7, sp, #8
 80073b0:	4603      	mov	r3, r0
 80073b2:	6039      	str	r1, [r7, #0]
 80073b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2200      	movs	r2, #0
 80073c6:	6939      	ldr	r1, [r7, #16]
 80073c8:	6978      	ldr	r0, [r7, #20]
 80073ca:	f7ff fee7 	bl	800719c <xQueueGenericCreateStatic>
 80073ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7ff ffb8 	bl	8007346 <prvInitialiseMutex>

		return xNewQueue;
 80073d6:	68fb      	ldr	r3, [r7, #12]
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	60fb      	str	r3, [r7, #12]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	689c      	ldr	r4, [r3, #8]
 800740c:	f001 fc62 	bl	8008cd4 <xTaskGetCurrentTaskHandle>
 8007410:	4603      	mov	r3, r0
 8007412:	429c      	cmp	r4, r3
 8007414:	d111      	bne.n	800743a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d105      	bne.n	8007434 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007428:	2300      	movs	r3, #0
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	6938      	ldr	r0, [r7, #16]
 8007430:	f000 f840 	bl	80074b4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007434:	2301      	movs	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e001      	b.n	800743e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
	}
 8007440:	4618      	mov	r0, r3
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	bd90      	pop	{r4, r7, pc}

08007448 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	689c      	ldr	r4, [r3, #8]
 8007476:	f001 fc2d 	bl	8008cd4 <xTaskGetCurrentTaskHandle>
 800747a:	4603      	mov	r3, r0
 800747c:	429c      	cmp	r4, r3
 800747e:	d107      	bne.n	8007490 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800748a:	2301      	movs	r3, #1
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e00c      	b.n	80074aa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6938      	ldr	r0, [r7, #16]
 8007494:	f000 fa88 	bl	80079a8 <xQueueSemaphoreTake>
 8007498:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80074aa:	697b      	ldr	r3, [r7, #20]
	}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd90      	pop	{r4, r7, pc}

080074b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08e      	sub	sp, #56	; 0x38
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xQueueGenericSend+0x32>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <xQueueGenericSend+0x40>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <xQueueGenericSend+0x44>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <xQueueGenericSend+0x46>
 80074f8:	2300      	movs	r3, #0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xQueueGenericSend+0x60>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d103      	bne.n	8007522 <xQueueGenericSend+0x6e>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b01      	cmp	r3, #1
 8007520:	d101      	bne.n	8007526 <xQueueGenericSend+0x72>
 8007522:	2301      	movs	r3, #1
 8007524:	e000      	b.n	8007528 <xQueueGenericSend+0x74>
 8007526:	2300      	movs	r3, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <xQueueGenericSend+0x8e>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	623b      	str	r3, [r7, #32]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007542:	f001 fbd7 	bl	8008cf4 <xTaskGetSchedulerState>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <xQueueGenericSend+0x9e>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <xQueueGenericSend+0xa2>
 8007552:	2301      	movs	r3, #1
 8007554:	e000      	b.n	8007558 <xQueueGenericSend+0xa4>
 8007556:	2300      	movs	r3, #0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xQueueGenericSend+0xbe>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61fb      	str	r3, [r7, #28]
}
 800756e:	bf00      	nop
 8007570:	e7fe      	b.n	8007570 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007572:	f002 fa17 	bl	80099a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xQueueGenericSend+0xd4>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d129      	bne.n	80075dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800758e:	f000 fbeb 	bl	8007d68 <prvCopyDataToQueue>
 8007592:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b00      	cmp	r3, #0
 800759a:	d010      	beq.n	80075be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 f9d5 	bl	8008950 <xTaskRemoveFromEventList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d013      	beq.n	80075d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075ac:	4b3f      	ldr	r3, [pc, #252]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	e00a      	b.n	80075d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075c4:	4b39      	ldr	r3, [pc, #228]	; (80076ac <xQueueGenericSend+0x1f8>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075d4:	f002 fa16 	bl	8009a04 <vPortExitCritical>
				return pdPASS;
 80075d8:	2301      	movs	r3, #1
 80075da:	e063      	b.n	80076a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d103      	bne.n	80075ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075e2:	f002 fa0f 	bl	8009a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	e05c      	b.n	80076a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075f0:	f107 0314 	add.w	r3, r7, #20
 80075f4:	4618      	mov	r0, r3
 80075f6:	f001 fa0f 	bl	8008a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075fe:	f002 fa01 	bl	8009a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007602:	f000 ff7b 	bl	80084fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007606:	f002 f9cd 	bl	80099a4 <vPortEnterCritical>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007610:	b25b      	sxtb	r3, r3
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	d103      	bne.n	8007620 <xQueueGenericSend+0x16c>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007626:	b25b      	sxtb	r3, r3
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800762c:	d103      	bne.n	8007636 <xQueueGenericSend+0x182>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007636:	f002 f9e5 	bl	8009a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800763a:	1d3a      	adds	r2, r7, #4
 800763c:	f107 0314 	add.w	r3, r7, #20
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f9fe 	bl	8008a44 <xTaskCheckForTimeOut>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d124      	bne.n	8007698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800764e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007650:	f000 fc82 	bl	8007f58 <prvIsQueueFull>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d018      	beq.n	800768c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3310      	adds	r3, #16
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4611      	mov	r1, r2
 8007662:	4618      	mov	r0, r3
 8007664:	f001 f924 	bl	80088b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800766a:	f000 fc0d 	bl	8007e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800766e:	f000 ff53 	bl	8008518 <xTaskResumeAll>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	f47f af7c 	bne.w	8007572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <xQueueGenericSend+0x1f8>)
 800767c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	e772      	b.n	8007572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800768c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800768e:	f000 fbfb 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007692:	f000 ff41 	bl	8008518 <xTaskResumeAll>
 8007696:	e76c      	b.n	8007572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769a:	f000 fbf5 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800769e:	f000 ff3b 	bl	8008518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3738      	adds	r7, #56	; 0x38
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	e000ed04 	.word	0xe000ed04

080076b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b090      	sub	sp, #64	; 0x40
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <xQueueGenericSendFromISR+0x3c>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <xQueueGenericSendFromISR+0x40>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <xQueueGenericSendFromISR+0x42>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d103      	bne.n	800771a <xQueueGenericSendFromISR+0x6a>
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <xQueueGenericSendFromISR+0x6e>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueGenericSendFromISR+0x70>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	623b      	str	r3, [r7, #32]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800773a:	f002 fa15 	bl	8009b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800773e:	f3ef 8211 	mrs	r2, BASEPRI
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	61fa      	str	r2, [r7, #28]
 8007754:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007756:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <xQueueGenericSendFromISR+0xbc>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d12f      	bne.n	80077cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007782:	f000 faf1 	bl	8007d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007786:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800778a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800778e:	d112      	bne.n	80077b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	d016      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	4618      	mov	r0, r3
 800779e:	f001 f8d7 	bl	8008950 <xTaskRemoveFromEventList>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00e      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e007      	b.n	80077c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80077ba:	3301      	adds	r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	b25a      	sxtb	r2, r3
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80077c6:	2301      	movs	r3, #1
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80077ca:	e001      	b.n	80077d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80077da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3740      	adds	r7, #64	; 0x40
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08c      	sub	sp, #48	; 0x30
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10a      	bne.n	8007818 <xQueueReceive+0x30>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	623b      	str	r3, [r7, #32]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d103      	bne.n	8007826 <xQueueReceive+0x3e>
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <xQueueReceive+0x42>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <xQueueReceive+0x44>
 800782a:	2300      	movs	r3, #0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xQueueReceive+0x5e>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61fb      	str	r3, [r7, #28]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007846:	f001 fa55 	bl	8008cf4 <xTaskGetSchedulerState>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <xQueueReceive+0x6e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <xQueueReceive+0x72>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueReceive+0x74>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xQueueReceive+0x8e>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	61bb      	str	r3, [r7, #24]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007876:	f002 f895 	bl	80099a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01f      	beq.n	80078c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788a:	f000 fad7 	bl	8007e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00f      	beq.n	80078be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	3310      	adds	r3, #16
 80078a2:	4618      	mov	r0, r3
 80078a4:	f001 f854 	bl	8008950 <xTaskRemoveFromEventList>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d007      	beq.n	80078be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078ae:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <xQueueReceive+0x1bc>)
 80078b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078be:	f002 f8a1 	bl	8009a04 <vPortExitCritical>
				return pdPASS;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e069      	b.n	800799a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078cc:	f002 f89a 	bl	8009a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e062      	b.n	800799a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 f89a 	bl	8008a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e8:	f002 f88c 	bl	8009a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ec:	f000 fe06 	bl	80084fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078f0:	f002 f858 	bl	80099a4 <vPortEnterCritical>
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007900:	d103      	bne.n	800790a <xQueueReceive+0x122>
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007916:	d103      	bne.n	8007920 <xQueueReceive+0x138>
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007920:	f002 f870 	bl	8009a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007924:	1d3a      	adds	r2, r7, #4
 8007926:	f107 0310 	add.w	r3, r7, #16
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f001 f889 	bl	8008a44 <xTaskCheckForTimeOut>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d123      	bne.n	8007980 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793a:	f000 faf7 	bl	8007f2c <prvIsQueueEmpty>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	3324      	adds	r3, #36	; 0x24
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	4611      	mov	r1, r2
 800794c:	4618      	mov	r0, r3
 800794e:	f000 ffaf 	bl	80088b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007954:	f000 fa98 	bl	8007e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007958:	f000 fdde 	bl	8008518 <xTaskResumeAll>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d189      	bne.n	8007876 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007962:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <xQueueReceive+0x1bc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	e780      	b.n	8007876 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007976:	f000 fa87 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800797a:	f000 fdcd 	bl	8008518 <xTaskResumeAll>
 800797e:	e77a      	b.n	8007876 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007982:	f000 fa81 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007986:	f000 fdc7 	bl	8008518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800798a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798c:	f000 face 	bl	8007f2c <prvIsQueueEmpty>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	f43f af6f 	beq.w	8007876 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800799a:	4618      	mov	r0, r3
 800799c:	3730      	adds	r7, #48	; 0x30
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	e000ed04 	.word	0xe000ed04

080079a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08e      	sub	sp, #56	; 0x38
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079ba:	2300      	movs	r3, #0
 80079bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	623b      	str	r3, [r7, #32]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	61fb      	str	r3, [r7, #28]
}
 80079f4:	bf00      	nop
 80079f6:	e7fe      	b.n	80079f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f8:	f001 f97c 	bl	8008cf4 <xTaskGetSchedulerState>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d102      	bne.n	8007a08 <xQueueSemaphoreTake+0x60>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueSemaphoreTake+0x64>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <xQueueSemaphoreTake+0x66>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	61bb      	str	r3, [r7, #24]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a28:	f001 ffbc 	bl	80099a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d024      	beq.n	8007a82 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	1e5a      	subs	r2, r3, #1
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a48:	f001 faca 	bl	8008fe0 <pvTaskIncrementMutexHeldCount>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00f      	beq.n	8007a7a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	3310      	adds	r3, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f000 ff76 	bl	8008950 <xTaskRemoveFromEventList>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a6a:	4b54      	ldr	r3, [pc, #336]	; (8007bbc <xQueueSemaphoreTake+0x214>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a7a:	f001 ffc3 	bl	8009a04 <vPortExitCritical>
				return pdPASS;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e097      	b.n	8007bb2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d111      	bne.n	8007aac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	617b      	str	r3, [r7, #20]
}
 8007aa0:	bf00      	nop
 8007aa2:	e7fe      	b.n	8007aa2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007aa4:	f001 ffae 	bl	8009a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e082      	b.n	8007bb2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ab2:	f107 030c 	add.w	r3, r7, #12
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 ffae 	bl	8008a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ac0:	f001 ffa0 	bl	8009a04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ac4:	f000 fd1a 	bl	80084fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ac8:	f001 ff6c 	bl	80099a4 <vPortEnterCritical>
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ad2:	b25b      	sxtb	r3, r3
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad8:	d103      	bne.n	8007ae2 <xQueueSemaphoreTake+0x13a>
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae8:	b25b      	sxtb	r3, r3
 8007aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aee:	d103      	bne.n	8007af8 <xQueueSemaphoreTake+0x150>
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007af8:	f001 ff84 	bl	8009a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007afc:	463a      	mov	r2, r7
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 ff9d 	bl	8008a44 <xTaskCheckForTimeOut>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d132      	bne.n	8007b76 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b12:	f000 fa0b 	bl	8007f2c <prvIsQueueEmpty>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d026      	beq.n	8007b6a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d109      	bne.n	8007b38 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007b24:	f001 ff3e 	bl	80099a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 f8ff 	bl	8008d30 <xTaskPriorityInherit>
 8007b32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b34:	f001 ff66 	bl	8009a04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	3324      	adds	r3, #36	; 0x24
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 feb5 	bl	80088b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b48:	f000 f99e 	bl	8007e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b4c:	f000 fce4 	bl	8008518 <xTaskResumeAll>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f af68 	bne.w	8007a28 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b58:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <xQueueSemaphoreTake+0x214>)
 8007b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	e75e      	b.n	8007a28 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b6c:	f000 f98c 	bl	8007e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b70:	f000 fcd2 	bl	8008518 <xTaskResumeAll>
 8007b74:	e758      	b.n	8007a28 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b78:	f000 f986 	bl	8007e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b7c:	f000 fccc 	bl	8008518 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b82:	f000 f9d3 	bl	8007f2c <prvIsQueueEmpty>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f43f af4d 	beq.w	8007a28 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00d      	beq.n	8007bb0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b94:	f001 ff06 	bl	80099a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b9a:	f000 f8cd 	bl	8007d38 <prvGetDisinheritPriorityAfterTimeout>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 f998 	bl	8008edc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007bac:	f001 ff2a 	bl	8009a04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3738      	adds	r7, #56	; 0x38
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	623b      	str	r3, [r7, #32]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <xQueueReceiveFromISR+0x3a>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <xQueueReceiveFromISR+0x3e>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <xQueueReceiveFromISR+0x40>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	61fb      	str	r3, [r7, #28]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c1a:	f001 ffa5 	bl	8009b68 <vPortValidateInterruptPriority>
	__asm volatile
 8007c1e:	f3ef 8211 	mrs	r2, BASEPRI
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61ba      	str	r2, [r7, #24]
 8007c34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d02f      	beq.n	8007ca6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c50:	68b9      	ldr	r1, [r7, #8]
 8007c52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c54:	f000 f8f2 	bl	8007e3c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	1e5a      	subs	r2, r3, #1
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c68:	d112      	bne.n	8007c90 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d016      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3310      	adds	r3, #16
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fe6a 	bl	8008950 <xTaskRemoveFromEventList>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00e      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e007      	b.n	8007ca0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c94:	3301      	adds	r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	b25a      	sxtb	r2, r3
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	e001      	b.n	8007caa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f383 8811 	msr	BASEPRI, r3
}
 8007cb4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3738      	adds	r7, #56	; 0x38
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60bb      	str	r3, [r7, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007ce4:	f001 fe5e 	bl	80099a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007cee:	f001 fe89 	bl	8009a04 <vPortExitCritical>

	return uxReturn;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d2a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	371c      	adds	r7, #28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d006      	beq.n	8007d56 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d52:	60fb      	str	r3, [r7, #12]
 8007d54:	e001      	b.n	8007d5a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d14d      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 f834 	bl	8008e00 <xTaskPriorityDisinherit>
 8007d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	609a      	str	r2, [r3, #8]
 8007da0:	e043      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d119      	bne.n	8007ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6858      	ldr	r0, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	461a      	mov	r2, r3
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	f004 f8eb 	bl	800bf8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	441a      	add	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d32b      	bcc.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	605a      	str	r2, [r3, #4]
 8007dda:	e026      	b.n	8007e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68d8      	ldr	r0, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	461a      	mov	r2, r3
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	f004 f8d1 	bl	800bf8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	425b      	negs	r3, r3
 8007df6:	441a      	add	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d207      	bcs.n	8007e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	425b      	negs	r3, r3
 8007e12:	441a      	add	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d105      	bne.n	8007e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e32:	697b      	ldr	r3, [r7, #20]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d018      	beq.n	8007e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d303      	bcc.n	8007e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68d9      	ldr	r1, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6838      	ldr	r0, [r7, #0]
 8007e7c:	f004 f887 	bl	800bf8e <memcpy>
	}
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e90:	f001 fd88 	bl	80099a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e9c:	e011      	b.n	8007ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d012      	beq.n	8007ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3324      	adds	r3, #36	; 0x24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fd50 	bl	8008950 <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007eb6:	f000 fe27 	bl	8008b08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dce9      	bgt.n	8007e9e <prvUnlockQueue+0x16>
 8007eca:	e000      	b.n	8007ece <prvUnlockQueue+0x46>
					break;
 8007ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	22ff      	movs	r2, #255	; 0xff
 8007ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ed6:	f001 fd95 	bl	8009a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eda:	f001 fd63 	bl	80099a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ee6:	e011      	b.n	8007f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3310      	adds	r3, #16
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fd2b 	bl	8008950 <xTaskRemoveFromEventList>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f00:	f000 fe02 	bl	8008b08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dce9      	bgt.n	8007ee8 <prvUnlockQueue+0x60>
 8007f14:	e000      	b.n	8007f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	22ff      	movs	r2, #255	; 0xff
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f20:	f001 fd70 	bl	8009a04 <vPortExitCritical>
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f34:	f001 fd36 	bl	80099a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e001      	b.n	8007f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 fd5b 	bl	8009a04 <vPortExitCritical>

	return xReturn;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f60:	f001 fd20 	bl	80099a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d102      	bne.n	8007f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	e001      	b.n	8007f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f7a:	f001 fd43 	bl	8009a04 <vPortExitCritical>

	return xReturn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e014      	b.n	8007fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f98:	4a0f      	ldr	r2, [pc, #60]	; (8007fd8 <vQueueAddToRegistry+0x50>)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fa4:	490c      	ldr	r1, [pc, #48]	; (8007fd8 <vQueueAddToRegistry+0x50>)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <vQueueAddToRegistry+0x50>)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fba:	e006      	b.n	8007fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b07      	cmp	r3, #7
 8007fc6:	d9e7      	bls.n	8007f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	20001d3c 	.word	0x20001d3c

08007fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fec:	f001 fcda 	bl	80099a4 <vPortEnterCritical>
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ffc:	d103      	bne.n	8008006 <vQueueWaitForMessageRestricted+0x2a>
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d103      	bne.n	800801c <vQueueWaitForMessageRestricted+0x40>
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801c:	f001 fcf2 	bl	8009a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	3324      	adds	r3, #36	; 0x24
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fc61 	bl	80088f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f7ff ff26 	bl	8007e88 <prvUnlockQueue>
	}
 800803c:	bf00      	nop
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08e      	sub	sp, #56	; 0x38
 8008048:	af04      	add	r7, sp, #16
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	623b      	str	r3, [r7, #32]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <xTaskCreateStatic+0x46>
	__asm volatile
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	61fb      	str	r3, [r7, #28]
}
 8008086:	bf00      	nop
 8008088:	e7fe      	b.n	8008088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800808a:	23a8      	movs	r3, #168	; 0xa8
 800808c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2ba8      	cmp	r3, #168	; 0xa8
 8008092:	d00a      	beq.n	80080aa <xTaskCreateStatic+0x66>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	61bb      	str	r3, [r7, #24]
}
 80080a6:	bf00      	nop
 80080a8:	e7fe      	b.n	80080a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01e      	beq.n	80080f0 <xTaskCreateStatic+0xac>
 80080b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01b      	beq.n	80080f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	2202      	movs	r2, #2
 80080c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ca:	2300      	movs	r3, #0
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	9302      	str	r3, [sp, #8]
 80080d2:	f107 0314 	add.w	r3, r7, #20
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f850 	bl	8008188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080ea:	f000 f8f3 	bl	80082d4 <prvAddNewTaskToReadyList>
 80080ee:	e001      	b.n	80080f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080f4:	697b      	ldr	r3, [r7, #20]
	}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3728      	adds	r7, #40	; 0x28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b08c      	sub	sp, #48	; 0x30
 8008102:	af04      	add	r7, sp, #16
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	603b      	str	r3, [r7, #0]
 800810a:	4613      	mov	r3, r2
 800810c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fd68 	bl	8009be8 <pvPortMalloc>
 8008118:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00e      	beq.n	800813e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008120:	20a8      	movs	r0, #168	; 0xa8
 8008122:	f001 fd61 	bl	8009be8 <pvPortMalloc>
 8008126:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
 8008134:	e005      	b.n	8008142 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	f001 fe22 	bl	8009d80 <vPortFree>
 800813c:	e001      	b.n	8008142 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800813e:	2300      	movs	r3, #0
 8008140:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d017      	beq.n	8008178 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	2300      	movs	r3, #0
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68b9      	ldr	r1, [r7, #8]
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 f80e 	bl	8008188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800816c:	69f8      	ldr	r0, [r7, #28]
 800816e:	f000 f8b1 	bl	80082d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008172:	2301      	movs	r3, #1
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e002      	b.n	800817e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800817c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800817e:	69bb      	ldr	r3, [r7, #24]
	}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
 8008194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	461a      	mov	r2, r3
 80081a0:	21a5      	movs	r1, #165	; 0xa5
 80081a2:	f003 fe55 	bl	800be50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081b0:	3b01      	subs	r3, #1
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f023 0307 	bic.w	r3, r3, #7
 80081be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00a      	beq.n	80081e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	617b      	str	r3, [r7, #20]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d01f      	beq.n	8008226 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081e6:	2300      	movs	r3, #0
 80081e8:	61fb      	str	r3, [r7, #28]
 80081ea:	e012      	b.n	8008212 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	4413      	add	r3, r2
 80081f2:	7819      	ldrb	r1, [r3, #0]
 80081f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	3334      	adds	r3, #52	; 0x34
 80081fc:	460a      	mov	r2, r1
 80081fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d006      	beq.n	800821a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	3301      	adds	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b0f      	cmp	r3, #15
 8008216:	d9e9      	bls.n	80081ec <prvInitialiseNewTask+0x64>
 8008218:	e000      	b.n	800821c <prvInitialiseNewTask+0x94>
			{
				break;
 800821a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008224:	e003      	b.n	800822e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	2b37      	cmp	r3, #55	; 0x37
 8008232:	d901      	bls.n	8008238 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008234:	2337      	movs	r3, #55	; 0x37
 8008236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	2200      	movs	r2, #0
 8008248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	3304      	adds	r3, #4
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fea8 	bl	8006fa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	3318      	adds	r3, #24
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fea3 	bl	8006fa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	2200      	movs	r2, #0
 8008278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	2200      	movs	r2, #0
 8008280:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	3354      	adds	r3, #84	; 0x54
 8008288:	224c      	movs	r2, #76	; 0x4c
 800828a:	2100      	movs	r1, #0
 800828c:	4618      	mov	r0, r3
 800828e:	f003 fddf 	bl	800be50 <memset>
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	4a0c      	ldr	r2, [pc, #48]	; (80082c8 <prvInitialiseNewTask+0x140>)
 8008296:	659a      	str	r2, [r3, #88]	; 0x58
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	4a0c      	ldr	r2, [pc, #48]	; (80082cc <prvInitialiseNewTask+0x144>)
 800829c:	65da      	str	r2, [r3, #92]	; 0x5c
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <prvInitialiseNewTask+0x148>)
 80082a2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	68f9      	ldr	r1, [r7, #12]
 80082a8:	69b8      	ldr	r0, [r7, #24]
 80082aa:	f001 fa4f 	bl	800974c <pxPortInitialiseStack>
 80082ae:	4602      	mov	r2, r0
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082c0:	bf00      	nop
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	20004700 	.word	0x20004700
 80082cc:	20004768 	.word	0x20004768
 80082d0:	200047d0 	.word	0x200047d0

080082d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082dc:	f001 fb62 	bl	80099a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082e0:	4b2d      	ldr	r3, [pc, #180]	; (8008398 <prvAddNewTaskToReadyList+0xc4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3301      	adds	r3, #1
 80082e6:	4a2c      	ldr	r2, [pc, #176]	; (8008398 <prvAddNewTaskToReadyList+0xc4>)
 80082e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082ea:	4b2c      	ldr	r3, [pc, #176]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d109      	bne.n	8008306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082f2:	4a2a      	ldr	r2, [pc, #168]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082f8:	4b27      	ldr	r3, [pc, #156]	; (8008398 <prvAddNewTaskToReadyList+0xc4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d110      	bne.n	8008322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008300:	f000 fc26 	bl	8008b50 <prvInitialiseTaskLists>
 8008304:	e00d      	b.n	8008322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008306:	4b26      	ldr	r3, [pc, #152]	; (80083a0 <prvAddNewTaskToReadyList+0xcc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d109      	bne.n	8008322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800830e:	4b23      	ldr	r3, [pc, #140]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	429a      	cmp	r2, r3
 800831a:	d802      	bhi.n	8008322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800831c:	4a1f      	ldr	r2, [pc, #124]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008322:	4b20      	ldr	r3, [pc, #128]	; (80083a4 <prvAddNewTaskToReadyList+0xd0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3301      	adds	r3, #1
 8008328:	4a1e      	ldr	r2, [pc, #120]	; (80083a4 <prvAddNewTaskToReadyList+0xd0>)
 800832a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800832c:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <prvAddNewTaskToReadyList+0xd0>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <prvAddNewTaskToReadyList+0xd4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d903      	bls.n	8008348 <prvAddNewTaskToReadyList+0x74>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <prvAddNewTaskToReadyList+0xd4>)
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <prvAddNewTaskToReadyList+0xd8>)
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fe fe2d 	bl	8006fbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008364:	f001 fb4e 	bl	8009a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <prvAddNewTaskToReadyList+0xcc>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00e      	beq.n	800838e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008370:	4b0a      	ldr	r3, [pc, #40]	; (800839c <prvAddNewTaskToReadyList+0xc8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	429a      	cmp	r2, r3
 800837c:	d207      	bcs.n	800838e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800837e:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <prvAddNewTaskToReadyList+0xdc>)
 8008380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20002250 	.word	0x20002250
 800839c:	20001d7c 	.word	0x20001d7c
 80083a0:	2000225c 	.word	0x2000225c
 80083a4:	2000226c 	.word	0x2000226c
 80083a8:	20002258 	.word	0x20002258
 80083ac:	20001d80 	.word	0x20001d80
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d017      	beq.n	80083f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <vTaskDelay+0x60>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <vTaskDelay+0x30>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60bb      	str	r3, [r7, #8]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80083e4:	f000 f88a 	bl	80084fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fe0c 	bl	8009008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083f0:	f000 f892 	bl	8008518 <xTaskResumeAll>
 80083f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <vTaskDelay+0x64>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20002278 	.word	0x20002278
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800842a:	463a      	mov	r2, r7
 800842c:	1d39      	adds	r1, r7, #4
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fd62 	bl	8006efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	9202      	str	r2, [sp, #8]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	460a      	mov	r2, r1
 800844a:	4924      	ldr	r1, [pc, #144]	; (80084dc <vTaskStartScheduler+0xc0>)
 800844c:	4824      	ldr	r0, [pc, #144]	; (80084e0 <vTaskStartScheduler+0xc4>)
 800844e:	f7ff fdf9 	bl	8008044 <xTaskCreateStatic>
 8008452:	4603      	mov	r3, r0
 8008454:	4a23      	ldr	r2, [pc, #140]	; (80084e4 <vTaskStartScheduler+0xc8>)
 8008456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008458:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <vTaskStartScheduler+0xc8>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e001      	b.n	800846a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d102      	bne.n	8008476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008470:	f000 fe1e 	bl	80090b0 <xTimerCreateTimerTask>
 8008474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d11b      	bne.n	80084b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	613b      	str	r3, [r7, #16]
}
 800848e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008490:	4b15      	ldr	r3, [pc, #84]	; (80084e8 <vTaskStartScheduler+0xcc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3354      	adds	r3, #84	; 0x54
 8008496:	4a15      	ldr	r2, [pc, #84]	; (80084ec <vTaskStartScheduler+0xd0>)
 8008498:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <vTaskStartScheduler+0xd4>)
 800849c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084a2:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <vTaskStartScheduler+0xd8>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084a8:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <vTaskStartScheduler+0xdc>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084ae:	f001 f9d7 	bl	8009860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084b2:	e00e      	b.n	80084d2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ba:	d10a      	bne.n	80084d2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <vTaskStartScheduler+0xb4>
}
 80084d2:	bf00      	nop
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	0800fdc0 	.word	0x0800fdc0
 80084e0:	08008b21 	.word	0x08008b21
 80084e4:	20002274 	.word	0x20002274
 80084e8:	20001d7c 	.word	0x20001d7c
 80084ec:	200005d8 	.word	0x200005d8
 80084f0:	20002270 	.word	0x20002270
 80084f4:	2000225c 	.word	0x2000225c
 80084f8:	20002254 	.word	0x20002254

080084fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <vTaskSuspendAll+0x18>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a03      	ldr	r2, [pc, #12]	; (8008514 <vTaskSuspendAll+0x18>)
 8008508:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800850a:	bf00      	nop
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20002278 	.word	0x20002278

08008518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008526:	4b42      	ldr	r3, [pc, #264]	; (8008630 <xTaskResumeAll+0x118>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <xTaskResumeAll+0x2c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	603b      	str	r3, [r7, #0]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008544:	f001 fa2e 	bl	80099a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008548:	4b39      	ldr	r3, [pc, #228]	; (8008630 <xTaskResumeAll+0x118>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3b01      	subs	r3, #1
 800854e:	4a38      	ldr	r2, [pc, #224]	; (8008630 <xTaskResumeAll+0x118>)
 8008550:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008552:	4b37      	ldr	r3, [pc, #220]	; (8008630 <xTaskResumeAll+0x118>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d162      	bne.n	8008620 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800855a:	4b36      	ldr	r3, [pc, #216]	; (8008634 <xTaskResumeAll+0x11c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d05e      	beq.n	8008620 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008562:	e02f      	b.n	80085c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008564:	4b34      	ldr	r3, [pc, #208]	; (8008638 <xTaskResumeAll+0x120>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3318      	adds	r3, #24
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fd81 	bl	8007078 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3304      	adds	r3, #4
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fd7c 	bl	8007078 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008584:	4b2d      	ldr	r3, [pc, #180]	; (800863c <xTaskResumeAll+0x124>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	429a      	cmp	r2, r3
 800858a:	d903      	bls.n	8008594 <xTaskResumeAll+0x7c>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	4a2a      	ldr	r2, [pc, #168]	; (800863c <xTaskResumeAll+0x124>)
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4a27      	ldr	r2, [pc, #156]	; (8008640 <xTaskResumeAll+0x128>)
 80085a2:	441a      	add	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f7fe fd07 	bl	8006fbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b4:	4b23      	ldr	r3, [pc, #140]	; (8008644 <xTaskResumeAll+0x12c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80085be:	4b22      	ldr	r3, [pc, #136]	; (8008648 <xTaskResumeAll+0x130>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c4:	4b1c      	ldr	r3, [pc, #112]	; (8008638 <xTaskResumeAll+0x120>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1cb      	bne.n	8008564 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085d2:	f000 fb5f 	bl	8008c94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80085d6:	4b1d      	ldr	r3, [pc, #116]	; (800864c <xTaskResumeAll+0x134>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d010      	beq.n	8008604 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085e2:	f000 f847 	bl	8008674 <xTaskIncrementTick>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085ec:	4b16      	ldr	r3, [pc, #88]	; (8008648 <xTaskResumeAll+0x130>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f1      	bne.n	80085e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085fe:	4b13      	ldr	r3, [pc, #76]	; (800864c <xTaskResumeAll+0x134>)
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <xTaskResumeAll+0x130>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800860c:	2301      	movs	r3, #1
 800860e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008610:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <xTaskResumeAll+0x138>)
 8008612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008620:	f001 f9f0 	bl	8009a04 <vPortExitCritical>

	return xAlreadyYielded;
 8008624:	68bb      	ldr	r3, [r7, #8]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20002278 	.word	0x20002278
 8008634:	20002250 	.word	0x20002250
 8008638:	20002210 	.word	0x20002210
 800863c:	20002258 	.word	0x20002258
 8008640:	20001d80 	.word	0x20001d80
 8008644:	20001d7c 	.word	0x20001d7c
 8008648:	20002264 	.word	0x20002264
 800864c:	20002260 	.word	0x20002260
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <xTaskGetTickCount+0x1c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008660:	687b      	ldr	r3, [r7, #4]
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	20002254 	.word	0x20002254

08008674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800867e:	4b4f      	ldr	r3, [pc, #316]	; (80087bc <xTaskIncrementTick+0x148>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 808f 	bne.w	80087a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008688:	4b4d      	ldr	r3, [pc, #308]	; (80087c0 <xTaskIncrementTick+0x14c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008690:	4a4b      	ldr	r2, [pc, #300]	; (80087c0 <xTaskIncrementTick+0x14c>)
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d120      	bne.n	80086de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800869c:	4b49      	ldr	r3, [pc, #292]	; (80087c4 <xTaskIncrementTick+0x150>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <xTaskIncrementTick+0x48>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	f383 8811 	msr	BASEPRI, r3
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	f3bf 8f4f 	dsb	sy
 80086b6:	603b      	str	r3, [r7, #0]
}
 80086b8:	bf00      	nop
 80086ba:	e7fe      	b.n	80086ba <xTaskIncrementTick+0x46>
 80086bc:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <xTaskIncrementTick+0x150>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	4b41      	ldr	r3, [pc, #260]	; (80087c8 <xTaskIncrementTick+0x154>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a3f      	ldr	r2, [pc, #252]	; (80087c4 <xTaskIncrementTick+0x150>)
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	; (80087c8 <xTaskIncrementTick+0x154>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	4b3e      	ldr	r3, [pc, #248]	; (80087cc <xTaskIncrementTick+0x158>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a3d      	ldr	r2, [pc, #244]	; (80087cc <xTaskIncrementTick+0x158>)
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	f000 fadb 	bl	8008c94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086de:	4b3c      	ldr	r3, [pc, #240]	; (80087d0 <xTaskIncrementTick+0x15c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d349      	bcc.n	800877c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e8:	4b36      	ldr	r3, [pc, #216]	; (80087c4 <xTaskIncrementTick+0x150>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d104      	bne.n	80086fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f2:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <xTaskIncrementTick+0x15c>)
 80086f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f8:	601a      	str	r2, [r3, #0]
					break;
 80086fa:	e03f      	b.n	800877c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086fc:	4b31      	ldr	r3, [pc, #196]	; (80087c4 <xTaskIncrementTick+0x150>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68db      	ldr	r3, [r3, #12]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d203      	bcs.n	800871c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008714:	4a2e      	ldr	r2, [pc, #184]	; (80087d0 <xTaskIncrementTick+0x15c>)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800871a:	e02f      	b.n	800877c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	3304      	adds	r3, #4
 8008720:	4618      	mov	r0, r3
 8008722:	f7fe fca9 	bl	8007078 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	3318      	adds	r3, #24
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fca0 	bl	8007078 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873c:	4b25      	ldr	r3, [pc, #148]	; (80087d4 <xTaskIncrementTick+0x160>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	429a      	cmp	r2, r3
 8008742:	d903      	bls.n	800874c <xTaskIncrementTick+0xd8>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	4a22      	ldr	r2, [pc, #136]	; (80087d4 <xTaskIncrementTick+0x160>)
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4613      	mov	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4a1f      	ldr	r2, [pc, #124]	; (80087d8 <xTaskIncrementTick+0x164>)
 800875a:	441a      	add	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe fc2b 	bl	8006fbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800876c:	4b1b      	ldr	r3, [pc, #108]	; (80087dc <xTaskIncrementTick+0x168>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	429a      	cmp	r2, r3
 8008774:	d3b8      	bcc.n	80086e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877a:	e7b5      	b.n	80086e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800877c:	4b17      	ldr	r3, [pc, #92]	; (80087dc <xTaskIncrementTick+0x168>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008782:	4915      	ldr	r1, [pc, #84]	; (80087d8 <xTaskIncrementTick+0x164>)
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d901      	bls.n	8008798 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008794:	2301      	movs	r3, #1
 8008796:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008798:	4b11      	ldr	r3, [pc, #68]	; (80087e0 <xTaskIncrementTick+0x16c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	e004      	b.n	80087b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087a6:	4b0f      	ldr	r3, [pc, #60]	; (80087e4 <xTaskIncrementTick+0x170>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3301      	adds	r3, #1
 80087ac:	4a0d      	ldr	r2, [pc, #52]	; (80087e4 <xTaskIncrementTick+0x170>)
 80087ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087b0:	697b      	ldr	r3, [r7, #20]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20002278 	.word	0x20002278
 80087c0:	20002254 	.word	0x20002254
 80087c4:	20002208 	.word	0x20002208
 80087c8:	2000220c 	.word	0x2000220c
 80087cc:	20002268 	.word	0x20002268
 80087d0:	20002270 	.word	0x20002270
 80087d4:	20002258 	.word	0x20002258
 80087d8:	20001d80 	.word	0x20001d80
 80087dc:	20001d7c 	.word	0x20001d7c
 80087e0:	20002264 	.word	0x20002264
 80087e4:	20002260 	.word	0x20002260

080087e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087ee:	4b2a      	ldr	r3, [pc, #168]	; (8008898 <vTaskSwitchContext+0xb0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087f6:	4b29      	ldr	r3, [pc, #164]	; (800889c <vTaskSwitchContext+0xb4>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087fc:	e046      	b.n	800888c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80087fe:	4b27      	ldr	r3, [pc, #156]	; (800889c <vTaskSwitchContext+0xb4>)
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008804:	4b26      	ldr	r3, [pc, #152]	; (80088a0 <vTaskSwitchContext+0xb8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e010      	b.n	800882e <vTaskSwitchContext+0x46>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <vTaskSwitchContext+0x40>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	607b      	str	r3, [r7, #4]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vTaskSwitchContext+0x3e>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3b01      	subs	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	491d      	ldr	r1, [pc, #116]	; (80088a4 <vTaskSwitchContext+0xbc>)
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0e4      	beq.n	800880c <vTaskSwitchContext+0x24>
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <vTaskSwitchContext+0xbc>)
 800884e:	4413      	add	r3, r2
 8008850:	60bb      	str	r3, [r7, #8]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3308      	adds	r3, #8
 8008864:	429a      	cmp	r2, r3
 8008866:	d104      	bne.n	8008872 <vTaskSwitchContext+0x8a>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	4a0b      	ldr	r2, [pc, #44]	; (80088a8 <vTaskSwitchContext+0xc0>)
 800887a:	6013      	str	r3, [r2, #0]
 800887c:	4a08      	ldr	r2, [pc, #32]	; (80088a0 <vTaskSwitchContext+0xb8>)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <vTaskSwitchContext+0xc0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3354      	adds	r3, #84	; 0x54
 8008888:	4a08      	ldr	r2, [pc, #32]	; (80088ac <vTaskSwitchContext+0xc4>)
 800888a:	6013      	str	r3, [r2, #0]
}
 800888c:	bf00      	nop
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	20002278 	.word	0x20002278
 800889c:	20002264 	.word	0x20002264
 80088a0:	20002258 	.word	0x20002258
 80088a4:	20001d80 	.word	0x20001d80
 80088a8:	20001d7c 	.word	0x20001d7c
 80088ac:	200005d8 	.word	0x200005d8

080088b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	60fb      	str	r3, [r7, #12]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088d6:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <vTaskPlaceOnEventList+0x44>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3318      	adds	r3, #24
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7fe fb91 	bl	8007006 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80088e4:	2101      	movs	r1, #1
 80088e6:	6838      	ldr	r0, [r7, #0]
 80088e8:	f000 fb8e 	bl	8009008 <prvAddCurrentTaskToDelayedList>
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20001d7c 	.word	0x20001d7c

080088f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	617b      	str	r3, [r7, #20]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <vTaskPlaceOnEventListRestricted+0x54>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3318      	adds	r3, #24
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7fe fb48 	bl	8006fbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008938:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	68b8      	ldr	r0, [r7, #8]
 800893e:	f000 fb63 	bl	8009008 <prvAddCurrentTaskToDelayedList>
	}
 8008942:	bf00      	nop
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20001d7c 	.word	0x20001d7c

08008950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10a      	bne.n	800897c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	60fb      	str	r3, [r7, #12]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	3318      	adds	r3, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe fb79 	bl	8007078 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008986:	4b1e      	ldr	r3, [pc, #120]	; (8008a00 <xTaskRemoveFromEventList+0xb0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d11d      	bne.n	80089ca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3304      	adds	r3, #4
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fb70 	bl	8007078 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <xTaskRemoveFromEventList+0xb4>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <xTaskRemoveFromEventList+0x5c>
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	4a16      	ldr	r2, [pc, #88]	; (8008a04 <xTaskRemoveFromEventList+0xb4>)
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	4613      	mov	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4a13      	ldr	r2, [pc, #76]	; (8008a08 <xTaskRemoveFromEventList+0xb8>)
 80089ba:	441a      	add	r2, r3
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	3304      	adds	r3, #4
 80089c0:	4619      	mov	r1, r3
 80089c2:	4610      	mov	r0, r2
 80089c4:	f7fe fafb 	bl	8006fbe <vListInsertEnd>
 80089c8:	e005      	b.n	80089d6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	3318      	adds	r3, #24
 80089ce:	4619      	mov	r1, r3
 80089d0:	480e      	ldr	r0, [pc, #56]	; (8008a0c <xTaskRemoveFromEventList+0xbc>)
 80089d2:	f7fe faf4 	bl	8006fbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <xTaskRemoveFromEventList+0xc0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d905      	bls.n	80089f0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <xTaskRemoveFromEventList+0xc4>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e001      	b.n	80089f4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089f0:	2300      	movs	r3, #0
 80089f2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089f4:	697b      	ldr	r3, [r7, #20]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20002278 	.word	0x20002278
 8008a04:	20002258 	.word	0x20002258
 8008a08:	20001d80 	.word	0x20001d80
 8008a0c:	20002210 	.word	0x20002210
 8008a10:	20001d7c 	.word	0x20001d7c
 8008a14:	20002264 	.word	0x20002264

08008a18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a20:	4b06      	ldr	r3, [pc, #24]	; (8008a3c <vTaskInternalSetTimeOutState+0x24>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <vTaskInternalSetTimeOutState+0x28>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	605a      	str	r2, [r3, #4]
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20002268 	.word	0x20002268
 8008a40:	20002254 	.word	0x20002254

08008a44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	613b      	str	r3, [r7, #16]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a86:	f000 ff8d 	bl	80099a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <xTaskCheckForTimeOut+0xbc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa2:	d102      	bne.n	8008aaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61fb      	str	r3, [r7, #28]
 8008aa8:	e023      	b.n	8008af2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <xTaskCheckForTimeOut+0xc0>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d007      	beq.n	8008ac6 <xTaskCheckForTimeOut+0x82>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d302      	bcc.n	8008ac6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e015      	b.n	8008af2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d20b      	bcs.n	8008ae8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	1ad2      	subs	r2, r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff9b 	bl	8008a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	e004      	b.n	8008af2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008af2:	f000 ff87 	bl	8009a04 <vPortExitCritical>

	return xReturn;
 8008af6:	69fb      	ldr	r3, [r7, #28]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3720      	adds	r7, #32
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20002254 	.word	0x20002254
 8008b04:	20002268 	.word	0x20002268

08008b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b0c:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <vTaskMissedYield+0x14>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
}
 8008b12:	bf00      	nop
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20002264 	.word	0x20002264

08008b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b28:	f000 f852 	bl	8008bd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <prvIdleTask+0x28>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d9f9      	bls.n	8008b28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b34:	4b05      	ldr	r3, [pc, #20]	; (8008b4c <prvIdleTask+0x2c>)
 8008b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b44:	e7f0      	b.n	8008b28 <prvIdleTask+0x8>
 8008b46:	bf00      	nop
 8008b48:	20001d80 	.word	0x20001d80
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b56:	2300      	movs	r3, #0
 8008b58:	607b      	str	r3, [r7, #4]
 8008b5a:	e00c      	b.n	8008b76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a12      	ldr	r2, [pc, #72]	; (8008bb0 <prvInitialiseTaskLists+0x60>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe f9fa 	bl	8006f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	607b      	str	r3, [r7, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b37      	cmp	r3, #55	; 0x37
 8008b7a:	d9ef      	bls.n	8008b5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b7c:	480d      	ldr	r0, [pc, #52]	; (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b7e:	f7fe f9f1 	bl	8006f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b82:	480d      	ldr	r0, [pc, #52]	; (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008b84:	f7fe f9ee 	bl	8006f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b88:	480c      	ldr	r0, [pc, #48]	; (8008bbc <prvInitialiseTaskLists+0x6c>)
 8008b8a:	f7fe f9eb 	bl	8006f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b8e:	480c      	ldr	r0, [pc, #48]	; (8008bc0 <prvInitialiseTaskLists+0x70>)
 8008b90:	f7fe f9e8 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b94:	480b      	ldr	r0, [pc, #44]	; (8008bc4 <prvInitialiseTaskLists+0x74>)
 8008b96:	f7fe f9e5 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <prvInitialiseTaskLists+0x78>)
 8008b9c:	4a05      	ldr	r2, [pc, #20]	; (8008bb4 <prvInitialiseTaskLists+0x64>)
 8008b9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <prvInitialiseTaskLists+0x7c>)
 8008ba2:	4a05      	ldr	r2, [pc, #20]	; (8008bb8 <prvInitialiseTaskLists+0x68>)
 8008ba4:	601a      	str	r2, [r3, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20001d80 	.word	0x20001d80
 8008bb4:	200021e0 	.word	0x200021e0
 8008bb8:	200021f4 	.word	0x200021f4
 8008bbc:	20002210 	.word	0x20002210
 8008bc0:	20002224 	.word	0x20002224
 8008bc4:	2000223c 	.word	0x2000223c
 8008bc8:	20002208 	.word	0x20002208
 8008bcc:	2000220c 	.word	0x2000220c

08008bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bd6:	e019      	b.n	8008c0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008bd8:	f000 fee4 	bl	80099a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <prvCheckTasksWaitingTermination+0x50>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7fe fa45 	bl	8007078 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bee:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	4a0b      	ldr	r2, [pc, #44]	; (8008c24 <prvCheckTasksWaitingTermination+0x54>)
 8008bf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bf8:	4b0b      	ldr	r3, [pc, #44]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a0a      	ldr	r2, [pc, #40]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c02:	f000 feff 	bl	8009a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f810 	bl	8008c2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c0c:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <prvCheckTasksWaitingTermination+0x58>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1e1      	bne.n	8008bd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	20002224 	.word	0x20002224
 8008c24:	20002250 	.word	0x20002250
 8008c28:	20002238 	.word	0x20002238

08008c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3354      	adds	r3, #84	; 0x54
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f003 f915 	bl	800be68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d108      	bne.n	8008c5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 f897 	bl	8009d80 <vPortFree>
				vPortFree( pxTCB );
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 f894 	bl	8009d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c58:	e018      	b.n	8008c8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d103      	bne.n	8008c6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f88b 	bl	8009d80 <vPortFree>
	}
 8008c6a:	e00f      	b.n	8008c8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d00a      	beq.n	8008c8c <prvDeleteTCB+0x60>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	e7fe      	b.n	8008c8a <prvDeleteTCB+0x5e>
	}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <prvResetNextTaskUnblockTime+0x38>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ca4:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008caa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cac:	e008      	b.n	8008cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cae:	4b07      	ldr	r3, [pc, #28]	; (8008ccc <prvResetNextTaskUnblockTime+0x38>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	4a04      	ldr	r2, [pc, #16]	; (8008cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008cbe:	6013      	str	r3, [r2, #0]
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20002208 	.word	0x20002208
 8008cd0:	20002270 	.word	0x20002270

08008cd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <xTaskGetCurrentTaskHandle+0x1c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008ce0:	687b      	ldr	r3, [r7, #4]
	}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	370c      	adds	r7, #12
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20001d7c 	.word	0x20001d7c

08008cf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cfa:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <xTaskGetSchedulerState+0x34>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d02:	2301      	movs	r3, #1
 8008d04:	607b      	str	r3, [r7, #4]
 8008d06:	e008      	b.n	8008d1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d08:	4b08      	ldr	r3, [pc, #32]	; (8008d2c <xTaskGetSchedulerState+0x38>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d10:	2302      	movs	r3, #2
 8008d12:	607b      	str	r3, [r7, #4]
 8008d14:	e001      	b.n	8008d1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d16:	2300      	movs	r3, #0
 8008d18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d1a:	687b      	ldr	r3, [r7, #4]
	}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	2000225c 	.word	0x2000225c
 8008d2c:	20002278 	.word	0x20002278

08008d30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d051      	beq.n	8008dea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	4b2a      	ldr	r3, [pc, #168]	; (8008df4 <xTaskPriorityInherit+0xc4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d241      	bcs.n	8008dd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	db06      	blt.n	8008d6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d5c:	4b25      	ldr	r3, [pc, #148]	; (8008df4 <xTaskPriorityInherit+0xc4>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6959      	ldr	r1, [r3, #20]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4a1f      	ldr	r2, [pc, #124]	; (8008df8 <xTaskPriorityInherit+0xc8>)
 8008d7c:	4413      	add	r3, r2
 8008d7e:	4299      	cmp	r1, r3
 8008d80:	d122      	bne.n	8008dc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	3304      	adds	r3, #4
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fe f976 	bl	8007078 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d8c:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <xTaskPriorityInherit+0xc4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b18      	ldr	r3, [pc, #96]	; (8008dfc <xTaskPriorityInherit+0xcc>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d903      	bls.n	8008daa <xTaskPriorityInherit+0x7a>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	4a15      	ldr	r2, [pc, #84]	; (8008dfc <xTaskPriorityInherit+0xcc>)
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dae:	4613      	mov	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4a10      	ldr	r2, [pc, #64]	; (8008df8 <xTaskPriorityInherit+0xc8>)
 8008db8:	441a      	add	r2, r3
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f7fe f8fc 	bl	8006fbe <vListInsertEnd>
 8008dc6:	e004      	b.n	8008dd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <xTaskPriorityInherit+0xc4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	e008      	b.n	8008dea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <xTaskPriorityInherit+0xc4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d201      	bcs.n	8008dea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008de6:	2301      	movs	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dea:	68fb      	ldr	r3, [r7, #12]
	}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20001d7c 	.word	0x20001d7c
 8008df8:	20001d80 	.word	0x20001d80
 8008dfc:	20002258 	.word	0x20002258

08008e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d056      	beq.n	8008ec4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e16:	4b2e      	ldr	r3, [pc, #184]	; (8008ed0 <xTaskPriorityDisinherit+0xd0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d00a      	beq.n	8008e36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	60fb      	str	r3, [r7, #12]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60bb      	str	r3, [r7, #8]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e58:	1e5a      	subs	r2, r3, #1
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d02c      	beq.n	8008ec4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d128      	bne.n	8008ec4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3304      	adds	r3, #4
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe f8fe 	bl	8007078 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e94:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <xTaskPriorityDisinherit+0xd4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d903      	bls.n	8008ea4 <xTaskPriorityDisinherit+0xa4>
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <xTaskPriorityDisinherit+0xd4>)
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4a09      	ldr	r2, [pc, #36]	; (8008ed8 <xTaskPriorityDisinherit+0xd8>)
 8008eb2:	441a      	add	r2, r3
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f7fe f87f 	bl	8006fbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ec4:	697b      	ldr	r3, [r7, #20]
	}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	20001d7c 	.word	0x20001d7c
 8008ed4:	20002258 	.word	0x20002258
 8008ed8:	20001d80 	.word	0x20001d80

08008edc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008eea:	2301      	movs	r3, #1
 8008eec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d06a      	beq.n	8008fca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d902      	bls.n	8008f22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	e002      	b.n	8008f28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	69fa      	ldr	r2, [r7, #28]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d04b      	beq.n	8008fca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d146      	bne.n	8008fca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008f3c:	4b25      	ldr	r3, [pc, #148]	; (8008fd4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d10a      	bne.n	8008f5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60bb      	str	r3, [r7, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	69fa      	ldr	r2, [r7, #28]
 8008f66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	db04      	blt.n	8008f7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	6959      	ldr	r1, [r3, #20]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4613      	mov	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f8a:	4413      	add	r3, r2
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d11c      	bne.n	8008fca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	3304      	adds	r3, #4
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fe f86f 	bl	8007078 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d903      	bls.n	8008fae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a0c      	ldr	r2, [pc, #48]	; (8008fdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a07      	ldr	r2, [pc, #28]	; (8008fd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008fbc:	441a      	add	r2, r3
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4610      	mov	r0, r2
 8008fc6:	f7fd fffa 	bl	8006fbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fca:	bf00      	nop
 8008fcc:	3720      	adds	r7, #32
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20001d7c 	.word	0x20001d7c
 8008fd8:	20001d80 	.word	0x20001d80
 8008fdc:	20002258 	.word	0x20002258

08008fe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008fe0:	b480      	push	{r7}
 8008fe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008fe4:	4b07      	ldr	r3, [pc, #28]	; (8009004 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fec:	4b05      	ldr	r3, [pc, #20]	; (8009004 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ff2:	3201      	adds	r2, #1
 8008ff4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ff6:	4b03      	ldr	r3, [pc, #12]	; (8009004 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
	}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20001d7c 	.word	0x20001d7c

08009008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <prvAddCurrentTaskToDelayedList+0x90>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009018:	4b20      	ldr	r3, [pc, #128]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3304      	adds	r3, #4
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe f82a 	bl	8007078 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800902a:	d10a      	bne.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d007      	beq.n	8009042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009032:	4b1a      	ldr	r3, [pc, #104]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3304      	adds	r3, #4
 8009038:	4619      	mov	r1, r3
 800903a:	4819      	ldr	r0, [pc, #100]	; (80090a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800903c:	f7fd ffbf 	bl	8006fbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009040:	e026      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4413      	add	r3, r2
 8009048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	429a      	cmp	r2, r3
 8009058:	d209      	bcs.n	800906e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3304      	adds	r3, #4
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f7fd ffcd 	bl	8007006 <vListInsert>
}
 800906c:	e010      	b.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800906e:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b0a      	ldr	r3, [pc, #40]	; (800909c <prvAddCurrentTaskToDelayedList+0x94>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3304      	adds	r3, #4
 8009078:	4619      	mov	r1, r3
 800907a:	4610      	mov	r0, r2
 800907c:	f7fd ffc3 	bl	8007006 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	429a      	cmp	r2, r3
 8009088:	d202      	bcs.n	8009090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800908a:	4a08      	ldr	r2, [pc, #32]	; (80090ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20002254 	.word	0x20002254
 800909c:	20001d7c 	.word	0x20001d7c
 80090a0:	2000223c 	.word	0x2000223c
 80090a4:	2000220c 	.word	0x2000220c
 80090a8:	20002208 	.word	0x20002208
 80090ac:	20002270 	.word	0x20002270

080090b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08a      	sub	sp, #40	; 0x28
 80090b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090ba:	f000 fb07 	bl	80096cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090be:	4b1c      	ldr	r3, [pc, #112]	; (8009130 <xTimerCreateTimerTask+0x80>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d021      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ce:	1d3a      	adds	r2, r7, #4
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	f107 030c 	add.w	r3, r7, #12
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd ff29 	bl	8006f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	9202      	str	r2, [sp, #8]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	2302      	movs	r3, #2
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	460a      	mov	r2, r1
 80090f0:	4910      	ldr	r1, [pc, #64]	; (8009134 <xTimerCreateTimerTask+0x84>)
 80090f2:	4811      	ldr	r0, [pc, #68]	; (8009138 <xTimerCreateTimerTask+0x88>)
 80090f4:	f7fe ffa6 	bl	8008044 <xTaskCreateStatic>
 80090f8:	4603      	mov	r3, r0
 80090fa:	4a10      	ldr	r2, [pc, #64]	; (800913c <xTimerCreateTimerTask+0x8c>)
 80090fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <xTimerCreateTimerTask+0x8c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009106:	2301      	movs	r3, #1
 8009108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	613b      	str	r3, [r7, #16]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009126:	697b      	ldr	r3, [r7, #20]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	200022ac 	.word	0x200022ac
 8009134:	0800fdc8 	.word	0x0800fdc8
 8009138:	08009275 	.word	0x08009275
 800913c:	200022b0 	.word	0x200022b0

08009140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b08a      	sub	sp, #40	; 0x28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800914e:	2300      	movs	r3, #0
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10a      	bne.n	800916e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	623b      	str	r3, [r7, #32]
}
 800916a:	bf00      	nop
 800916c:	e7fe      	b.n	800916c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <xTimerGenericCommand+0x98>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d02a      	beq.n	80091cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b05      	cmp	r3, #5
 8009186:	dc18      	bgt.n	80091ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009188:	f7ff fdb4 	bl	8008cf4 <xTaskGetSchedulerState>
 800918c:	4603      	mov	r3, r0
 800918e:	2b02      	cmp	r3, #2
 8009190:	d109      	bne.n	80091a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009192:	4b11      	ldr	r3, [pc, #68]	; (80091d8 <xTimerGenericCommand+0x98>)
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f107 0110 	add.w	r1, r7, #16
 800919a:	2300      	movs	r3, #0
 800919c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919e:	f7fe f989 	bl	80074b4 <xQueueGenericSend>
 80091a2:	6278      	str	r0, [r7, #36]	; 0x24
 80091a4:	e012      	b.n	80091cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <xTimerGenericCommand+0x98>)
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f107 0110 	add.w	r1, r7, #16
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	f7fe f97f 	bl	80074b4 <xQueueGenericSend>
 80091b6:	6278      	str	r0, [r7, #36]	; 0x24
 80091b8:	e008      	b.n	80091cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <xTimerGenericCommand+0x98>)
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	f107 0110 	add.w	r1, r7, #16
 80091c2:	2300      	movs	r3, #0
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	f7fe fa73 	bl	80076b0 <xQueueGenericSendFromISR>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3728      	adds	r7, #40	; 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200022ac 	.word	0x200022ac

080091dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e6:	4b22      	ldr	r3, [pc, #136]	; (8009270 <prvProcessExpiredTimer+0x94>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fd ff3f 	bl	8007078 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d022      	beq.n	800924e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	699a      	ldr	r2, [r3, #24]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	18d1      	adds	r1, r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	6978      	ldr	r0, [r7, #20]
 8009216:	f000 f8d1 	bl	80093bc <prvInsertTimerInActiveList>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01f      	beq.n	8009260 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009220:	2300      	movs	r3, #0
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	2300      	movs	r3, #0
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	2100      	movs	r1, #0
 800922a:	6978      	ldr	r0, [r7, #20]
 800922c:	f7ff ff88 	bl	8009140 <xTimerGenericCommand>
 8009230:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d113      	bne.n	8009260 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	60fb      	str	r3, [r7, #12]
}
 800924a:	bf00      	nop
 800924c:	e7fe      	b.n	800924c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	b2da      	uxtb	r2, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	6978      	ldr	r0, [r7, #20]
 8009266:	4798      	blx	r3
}
 8009268:	bf00      	nop
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	200022a4 	.word	0x200022a4

08009274 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800927c:	f107 0308 	add.w	r3, r7, #8
 8009280:	4618      	mov	r0, r3
 8009282:	f000 f857 	bl	8009334 <prvGetNextExpireTime>
 8009286:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4619      	mov	r1, r3
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f803 	bl	8009298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009292:	f000 f8d5 	bl	8009440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009296:	e7f1      	b.n	800927c <prvTimerTask+0x8>

08009298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092a2:	f7ff f92b 	bl	80084fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f866 	bl	800937c <prvSampleTimeNow>
 80092b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d130      	bne.n	800931a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <prvProcessTimerOrBlockTask+0x3c>
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d806      	bhi.n	80092d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092c6:	f7ff f927 	bl	8008518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff ff85 	bl	80091dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80092d2:	e024      	b.n	800931e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d008      	beq.n	80092ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80092da:	4b13      	ldr	r3, [pc, #76]	; (8009328 <prvProcessTimerOrBlockTask+0x90>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <prvProcessTimerOrBlockTask+0x50>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <prvProcessTimerOrBlockTask+0x52>
 80092e8:	2300      	movs	r3, #0
 80092ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092ec:	4b0f      	ldr	r3, [pc, #60]	; (800932c <prvProcessTimerOrBlockTask+0x94>)
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7fe fe6f 	bl	8007fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092fe:	f7ff f90b 	bl	8008518 <xTaskResumeAll>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10a      	bne.n	800931e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009308:	4b09      	ldr	r3, [pc, #36]	; (8009330 <prvProcessTimerOrBlockTask+0x98>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
}
 8009318:	e001      	b.n	800931e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800931a:	f7ff f8fd 	bl	8008518 <xTaskResumeAll>
}
 800931e:	bf00      	nop
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
 8009326:	bf00      	nop
 8009328:	200022a8 	.word	0x200022a8
 800932c:	200022ac 	.word	0x200022ac
 8009330:	e000ed04 	.word	0xe000ed04

08009334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800933c:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <prvGetNextExpireTime+0x44>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <prvGetNextExpireTime+0x16>
 8009346:	2201      	movs	r2, #1
 8009348:	e000      	b.n	800934c <prvGetNextExpireTime+0x18>
 800934a:	2200      	movs	r2, #0
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009358:	4b07      	ldr	r3, [pc, #28]	; (8009378 <prvGetNextExpireTime+0x44>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e001      	b.n	8009368 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009368:	68fb      	ldr	r3, [r7, #12]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	200022a4 	.word	0x200022a4

0800937c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009384:	f7ff f966 	bl	8008654 <xTaskGetTickCount>
 8009388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800938a:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <prvSampleTimeNow+0x3c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	429a      	cmp	r2, r3
 8009392:	d205      	bcs.n	80093a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009394:	f000 f936 	bl	8009604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e002      	b.n	80093a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093a6:	4a04      	ldr	r2, [pc, #16]	; (80093b8 <prvSampleTimeNow+0x3c>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093ac:	68fb      	ldr	r3, [r7, #12]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	200022b4 	.word	0x200022b4

080093bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d812      	bhi.n	8009408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	1ad2      	subs	r2, r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d302      	bcc.n	80093f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	e01b      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <prvInsertTimerInActiveList+0x7c>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4619      	mov	r1, r3
 8009400:	4610      	mov	r0, r2
 8009402:	f7fd fe00 	bl	8007006 <vListInsert>
 8009406:	e012      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	429a      	cmp	r2, r3
 800940e:	d206      	bcs.n	800941e <prvInsertTimerInActiveList+0x62>
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	e007      	b.n	800942e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800941e:	4b07      	ldr	r3, [pc, #28]	; (800943c <prvInsertTimerInActiveList+0x80>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fd fdec 	bl	8007006 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800942e:	697b      	ldr	r3, [r7, #20]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	200022a8 	.word	0x200022a8
 800943c:	200022a4 	.word	0x200022a4

08009440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08e      	sub	sp, #56	; 0x38
 8009444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009446:	e0ca      	b.n	80095de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da18      	bge.n	8009480 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800944e:	1d3b      	adds	r3, r7, #4
 8009450:	3304      	adds	r3, #4
 8009452:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	61fb      	str	r3, [r7, #28]
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009476:	6850      	ldr	r0, [r2, #4]
 8009478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800947a:	6892      	ldr	r2, [r2, #8]
 800947c:	4611      	mov	r1, r2
 800947e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f2c0 80ab 	blt.w	80095de <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009496:	3304      	adds	r3, #4
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd fded 	bl	8007078 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800949e:	463b      	mov	r3, r7
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7ff ff6b 	bl	800937c <prvSampleTimeNow>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b09      	cmp	r3, #9
 80094ac:	f200 8096 	bhi.w	80095dc <prvProcessReceivedCommands+0x19c>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <prvProcessReceivedCommands+0x78>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	080094e1 	.word	0x080094e1
 80094bc:	080094e1 	.word	0x080094e1
 80094c0:	080094e1 	.word	0x080094e1
 80094c4:	08009555 	.word	0x08009555
 80094c8:	08009569 	.word	0x08009569
 80094cc:	080095b3 	.word	0x080095b3
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	080094e1 	.word	0x080094e1
 80094d8:	08009555 	.word	0x08009555
 80094dc:	08009569 	.word	0x08009569
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e6:	f043 0301 	orr.w	r3, r3, #1
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	18d1      	adds	r1, r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009500:	f7ff ff5c 	bl	80093bc <prvInsertTimerInActiveList>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d069      	beq.n	80095de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009510:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d05e      	beq.n	80095de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	441a      	add	r2, r3
 8009528:	2300      	movs	r3, #0
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	2300      	movs	r3, #0
 800952e:	2100      	movs	r1, #0
 8009530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009532:	f7ff fe05 	bl	8009140 <xTimerGenericCommand>
 8009536:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d14f      	bne.n	80095de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	61bb      	str	r3, [r7, #24]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800955a:	f023 0301 	bic.w	r3, r3, #1
 800955e:	b2da      	uxtb	r2, r3
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009566:	e03a      	b.n	80095de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800957a:	68ba      	ldr	r2, [r7, #8]
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	617b      	str	r3, [r7, #20]
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	18d1      	adds	r1, r2, r3
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ac:	f7ff ff06 	bl	80093bc <prvInsertTimerInActiveList>
					break;
 80095b0:	e015      	b.n	80095de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d103      	bne.n	80095c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c2:	f000 fbdd 	bl	8009d80 <vPortFree>
 80095c6:	e00a      	b.n	80095de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80095da:	e000      	b.n	80095de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80095dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80095de:	4b08      	ldr	r3, [pc, #32]	; (8009600 <prvProcessReceivedCommands+0x1c0>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1d39      	adds	r1, r7, #4
 80095e4:	2200      	movs	r2, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe f8fe 	bl	80077e8 <xQueueReceive>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f47f af2a 	bne.w	8009448 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	3730      	adds	r7, #48	; 0x30
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	200022ac 	.word	0x200022ac

08009604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800960a:	e048      	b.n	800969e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800960c:	4b2d      	ldr	r3, [pc, #180]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b2b      	ldr	r3, [pc, #172]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3304      	adds	r3, #4
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd fd27 	bl	8007078 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d02e      	beq.n	800969e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4413      	add	r3, r2
 8009648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	429a      	cmp	r2, r3
 8009650:	d90e      	bls.n	8009670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fd fccc 	bl	8007006 <vListInsert>
 800966e:	e016      	b.n	800969e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	2100      	movs	r1, #0
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fd60 	bl	8009140 <xTimerGenericCommand>
 8009680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	603b      	str	r3, [r7, #0]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1b1      	bne.n	800960c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096a8:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <prvSwitchTimerLists+0xc4>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a04      	ldr	r2, [pc, #16]	; (80096c4 <prvSwitchTimerLists+0xc0>)
 80096b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096b6:	4a04      	ldr	r2, [pc, #16]	; (80096c8 <prvSwitchTimerLists+0xc4>)
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	6013      	str	r3, [r2, #0]
}
 80096bc:	bf00      	nop
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200022a4 	.word	0x200022a4
 80096c8:	200022a8 	.word	0x200022a8

080096cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80096d2:	f000 f967 	bl	80099a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80096d6:	4b15      	ldr	r3, [pc, #84]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d120      	bne.n	8009720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80096de:	4814      	ldr	r0, [pc, #80]	; (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096e0:	f7fd fc40 	bl	8006f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80096e4:	4813      	ldr	r0, [pc, #76]	; (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096e6:	f7fd fc3d 	bl	8006f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <prvCheckForValidListAndQueue+0x6c>)
 80096ec:	4a10      	ldr	r2, [pc, #64]	; (8009730 <prvCheckForValidListAndQueue+0x64>)
 80096ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096f0:	4b12      	ldr	r3, [pc, #72]	; (800973c <prvCheckForValidListAndQueue+0x70>)
 80096f2:	4a10      	ldr	r2, [pc, #64]	; (8009734 <prvCheckForValidListAndQueue+0x68>)
 80096f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	4b11      	ldr	r3, [pc, #68]	; (8009740 <prvCheckForValidListAndQueue+0x74>)
 80096fc:	4a11      	ldr	r2, [pc, #68]	; (8009744 <prvCheckForValidListAndQueue+0x78>)
 80096fe:	2110      	movs	r1, #16
 8009700:	200a      	movs	r0, #10
 8009702:	f7fd fd4b 	bl	800719c <xQueueGenericCreateStatic>
 8009706:	4603      	mov	r3, r0
 8009708:	4a08      	ldr	r2, [pc, #32]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 800970a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <prvCheckForValidListAndQueue+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	490b      	ldr	r1, [pc, #44]	; (8009748 <prvCheckForValidListAndQueue+0x7c>)
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fc34 	bl	8007f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009720:	f000 f970 	bl	8009a04 <vPortExitCritical>
}
 8009724:	bf00      	nop
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200022ac 	.word	0x200022ac
 8009730:	2000227c 	.word	0x2000227c
 8009734:	20002290 	.word	0x20002290
 8009738:	200022a4 	.word	0x200022a4
 800973c:	200022a8 	.word	0x200022a8
 8009740:	20002358 	.word	0x20002358
 8009744:	200022b8 	.word	0x200022b8
 8009748:	0800fdd0 	.word	0x0800fdd0

0800974c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3b04      	subs	r3, #4
 800975c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b04      	subs	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f023 0201 	bic.w	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b04      	subs	r3, #4
 800977a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800977c:	4a0c      	ldr	r2, [pc, #48]	; (80097b0 <pxPortInitialiseStack+0x64>)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3b14      	subs	r3, #20
 8009786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b04      	subs	r3, #4
 8009792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f06f 0202 	mvn.w	r2, #2
 800979a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3b20      	subs	r3, #32
 80097a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097a2:	68fb      	ldr	r3, [r7, #12]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr
 80097b0:	080097b5 	.word	0x080097b5

080097b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <prvTaskExitError+0x54>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c6:	d00a      	beq.n	80097de <prvTaskExitError+0x2a>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	60fb      	str	r3, [r7, #12]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <prvTaskExitError+0x28>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60bb      	str	r3, [r7, #8]
}
 80097f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097f2:	bf00      	nop
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d0fc      	beq.n	80097f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	20000410 	.word	0x20000410
 800980c:	00000000 	.word	0x00000000

08009810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <pxCurrentTCBConst2>)
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	6808      	ldr	r0, [r1, #0]
 8009816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f380 8809 	msr	PSP, r0
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8811 	msr	BASEPRI, r0
 800982a:	4770      	bx	lr
 800982c:	f3af 8000 	nop.w

08009830 <pxCurrentTCBConst2>:
 8009830:	20001d7c 	.word	0x20001d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop

08009838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009838:	4808      	ldr	r0, [pc, #32]	; (800985c <prvPortStartFirstTask+0x24>)
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	6800      	ldr	r0, [r0, #0]
 800983e:	f380 8808 	msr	MSP, r0
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8814 	msr	CONTROL, r0
 800984a:	b662      	cpsie	i
 800984c:	b661      	cpsie	f
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	df00      	svc	0
 8009858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800985a:	bf00      	nop
 800985c:	e000ed08 	.word	0xe000ed08

08009860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009866:	4b46      	ldr	r3, [pc, #280]	; (8009980 <xPortStartScheduler+0x120>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a46      	ldr	r2, [pc, #280]	; (8009984 <xPortStartScheduler+0x124>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d10a      	bne.n	8009886 <xPortStartScheduler+0x26>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	613b      	str	r3, [r7, #16]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009886:	4b3e      	ldr	r3, [pc, #248]	; (8009980 <xPortStartScheduler+0x120>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a3f      	ldr	r2, [pc, #252]	; (8009988 <xPortStartScheduler+0x128>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d10a      	bne.n	80098a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60fb      	str	r3, [r7, #12]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098a6:	4b39      	ldr	r3, [pc, #228]	; (800998c <xPortStartScheduler+0x12c>)
 80098a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	22ff      	movs	r2, #255	; 0xff
 80098b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098c8:	b2da      	uxtb	r2, r3
 80098ca:	4b31      	ldr	r3, [pc, #196]	; (8009990 <xPortStartScheduler+0x130>)
 80098cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098ce:	4b31      	ldr	r3, [pc, #196]	; (8009994 <xPortStartScheduler+0x134>)
 80098d0:	2207      	movs	r2, #7
 80098d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098d4:	e009      	b.n	80098ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80098d6:	4b2f      	ldr	r3, [pc, #188]	; (8009994 <xPortStartScheduler+0x134>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3b01      	subs	r3, #1
 80098dc:	4a2d      	ldr	r2, [pc, #180]	; (8009994 <xPortStartScheduler+0x134>)
 80098de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	2b80      	cmp	r3, #128	; 0x80
 80098f4:	d0ef      	beq.n	80098d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098f6:	4b27      	ldr	r3, [pc, #156]	; (8009994 <xPortStartScheduler+0x134>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f1c3 0307 	rsb	r3, r3, #7
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d00a      	beq.n	8009918 <xPortStartScheduler+0xb8>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60bb      	str	r3, [r7, #8]
}
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009918:	4b1e      	ldr	r3, [pc, #120]	; (8009994 <xPortStartScheduler+0x134>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	021b      	lsls	r3, r3, #8
 800991e:	4a1d      	ldr	r2, [pc, #116]	; (8009994 <xPortStartScheduler+0x134>)
 8009920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <xPortStartScheduler+0x134>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800992a:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <xPortStartScheduler+0x134>)
 800992c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	b2da      	uxtb	r2, r3
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009936:	4b18      	ldr	r3, [pc, #96]	; (8009998 <xPortStartScheduler+0x138>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a17      	ldr	r2, [pc, #92]	; (8009998 <xPortStartScheduler+0x138>)
 800993c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009942:	4b15      	ldr	r3, [pc, #84]	; (8009998 <xPortStartScheduler+0x138>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a14      	ldr	r2, [pc, #80]	; (8009998 <xPortStartScheduler+0x138>)
 8009948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800994c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800994e:	f000 f8dd 	bl	8009b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009952:	4b12      	ldr	r3, [pc, #72]	; (800999c <xPortStartScheduler+0x13c>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009958:	f000 f8fc 	bl	8009b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800995c:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <xPortStartScheduler+0x140>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a0f      	ldr	r2, [pc, #60]	; (80099a0 <xPortStartScheduler+0x140>)
 8009962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009968:	f7ff ff66 	bl	8009838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800996c:	f7fe ff3c 	bl	80087e8 <vTaskSwitchContext>
	prvTaskExitError();
 8009970:	f7ff ff20 	bl	80097b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	e000ed00 	.word	0xe000ed00
 8009984:	410fc271 	.word	0x410fc271
 8009988:	410fc270 	.word	0x410fc270
 800998c:	e000e400 	.word	0xe000e400
 8009990:	200023a8 	.word	0x200023a8
 8009994:	200023ac 	.word	0x200023ac
 8009998:	e000ed20 	.word	0xe000ed20
 800999c:	20000410 	.word	0x20000410
 80099a0:	e000ef34 	.word	0xe000ef34

080099a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	607b      	str	r3, [r7, #4]
}
 80099bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099be:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <vPortEnterCritical+0x58>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a0d      	ldr	r2, [pc, #52]	; (80099fc <vPortEnterCritical+0x58>)
 80099c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099c8:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <vPortEnterCritical+0x58>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d10f      	bne.n	80099f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <vPortEnterCritical+0x5c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00a      	beq.n	80099f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	603b      	str	r3, [r7, #0]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <vPortEnterCritical+0x4a>
	}
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000410 	.word	0x20000410
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a0a:	4b12      	ldr	r3, [pc, #72]	; (8009a54 <vPortExitCritical+0x50>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <vPortExitCritical+0x24>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	607b      	str	r3, [r7, #4]
}
 8009a24:	bf00      	nop
 8009a26:	e7fe      	b.n	8009a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <vPortExitCritical+0x50>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <vPortExitCritical+0x50>)
 8009a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a32:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <vPortExitCritical+0x50>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d105      	bne.n	8009a46 <vPortExitCritical+0x42>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	f383 8811 	msr	BASEPRI, r3
}
 8009a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20000410 	.word	0x20000410
	...

08009a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a60:	f3ef 8009 	mrs	r0, PSP
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <pxCurrentTCBConst>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	f01e 0f10 	tst.w	lr, #16
 8009a70:	bf08      	it	eq
 8009a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a84:	f380 8811 	msr	BASEPRI, r0
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f7fe feaa 	bl	80087e8 <vTaskSwitchContext>
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f380 8811 	msr	BASEPRI, r0
 8009a9c:	bc09      	pop	{r0, r3}
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f01e 0f10 	tst.w	lr, #16
 8009aaa:	bf08      	it	eq
 8009aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ab0:	f380 8809 	msr	PSP, r0
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst>:
 8009ac0:	20001d7c 	.word	0x20001d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
}
 8009ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ae2:	f7fe fdc7 	bl	8008674 <xTaskIncrementTick>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <xPortSysTickHandler+0x40>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b10:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <vPortSetupTimerInterrupt+0x38>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	; (8009b48 <vPortSetupTimerInterrupt+0x3c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a0a      	ldr	r2, [pc, #40]	; (8009b4c <vPortSetupTimerInterrupt+0x40>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	099b      	lsrs	r3, r3, #6
 8009b28:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <vPortSetupTimerInterrupt+0x44>)
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b2e:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b30:	2207      	movs	r2, #7
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	e000e010 	.word	0xe000e010
 8009b44:	e000e018 	.word	0xe000e018
 8009b48:	20000404 	.word	0x20000404
 8009b4c:	10624dd3 	.word	0x10624dd3
 8009b50:	e000e014 	.word	0xe000e014

08009b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b64 <vPortEnableVFP+0x10>
 8009b58:	6801      	ldr	r1, [r0, #0]
 8009b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b5e:	6001      	str	r1, [r0, #0]
 8009b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b62:	bf00      	nop
 8009b64:	e000ed88 	.word	0xe000ed88

08009b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b6e:	f3ef 8305 	mrs	r3, IPSR
 8009b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d914      	bls.n	8009ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b7a:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <vPortValidateInterruptPriority+0x70>)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b84:	4b15      	ldr	r3, [pc, #84]	; (8009bdc <vPortValidateInterruptPriority+0x74>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	7afa      	ldrb	r2, [r7, #11]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d20a      	bcs.n	8009ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	607b      	str	r3, [r7, #4]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <vPortValidateInterruptPriority+0x78>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <vPortValidateInterruptPriority+0x7c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d90a      	bls.n	8009bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	603b      	str	r3, [r7, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	e7fe      	b.n	8009bc8 <vPortValidateInterruptPriority+0x60>
	}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	e000e3f0 	.word	0xe000e3f0
 8009bdc:	200023a8 	.word	0x200023a8
 8009be0:	e000ed0c 	.word	0xe000ed0c
 8009be4:	200023ac 	.word	0x200023ac

08009be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bf4:	f7fe fc82 	bl	80084fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bf8:	4b5b      	ldr	r3, [pc, #364]	; (8009d68 <pvPortMalloc+0x180>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c00:	f000 f920 	bl	8009e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c04:	4b59      	ldr	r3, [pc, #356]	; (8009d6c <pvPortMalloc+0x184>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f040 8093 	bne.w	8009d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01d      	beq.n	8009c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c18:	2208      	movs	r2, #8
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f003 0307 	and.w	r3, r3, #7
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d014      	beq.n	8009c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f023 0307 	bic.w	r3, r3, #7
 8009c30:	3308      	adds	r3, #8
 8009c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <pvPortMalloc+0x6c>
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	617b      	str	r3, [r7, #20]
}
 8009c50:	bf00      	nop
 8009c52:	e7fe      	b.n	8009c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d06e      	beq.n	8009d38 <pvPortMalloc+0x150>
 8009c5a:	4b45      	ldr	r3, [pc, #276]	; (8009d70 <pvPortMalloc+0x188>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d869      	bhi.n	8009d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c64:	4b43      	ldr	r3, [pc, #268]	; (8009d74 <pvPortMalloc+0x18c>)
 8009c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c68:	4b42      	ldr	r3, [pc, #264]	; (8009d74 <pvPortMalloc+0x18c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c6e:	e004      	b.n	8009c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d903      	bls.n	8009c8c <pvPortMalloc+0xa4>
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f1      	bne.n	8009c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c8c:	4b36      	ldr	r3, [pc, #216]	; (8009d68 <pvPortMalloc+0x180>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d050      	beq.n	8009d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2208      	movs	r2, #8
 8009c9c:	4413      	add	r3, r2
 8009c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	1ad2      	subs	r2, r2, r3
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d91f      	bls.n	8009cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	613b      	str	r3, [r7, #16]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	1ad2      	subs	r2, r2, r3
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cf2:	69b8      	ldr	r0, [r7, #24]
 8009cf4:	f000 f908 	bl	8009f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cf8:	4b1d      	ldr	r3, [pc, #116]	; (8009d70 <pvPortMalloc+0x188>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	4a1b      	ldr	r2, [pc, #108]	; (8009d70 <pvPortMalloc+0x188>)
 8009d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d06:	4b1a      	ldr	r3, [pc, #104]	; (8009d70 <pvPortMalloc+0x188>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <pvPortMalloc+0x190>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d203      	bcs.n	8009d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d12:	4b17      	ldr	r3, [pc, #92]	; (8009d70 <pvPortMalloc+0x188>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a18      	ldr	r2, [pc, #96]	; (8009d78 <pvPortMalloc+0x190>)
 8009d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <pvPortMalloc+0x184>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	431a      	orrs	r2, r3
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d2e:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <pvPortMalloc+0x194>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3301      	adds	r3, #1
 8009d34:	4a11      	ldr	r2, [pc, #68]	; (8009d7c <pvPortMalloc+0x194>)
 8009d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d38:	f7fe fbee 	bl	8008518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	f003 0307 	and.w	r3, r3, #7
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00a      	beq.n	8009d5c <pvPortMalloc+0x174>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60fb      	str	r3, [r7, #12]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <pvPortMalloc+0x172>
	return pvReturn;
 8009d5c:	69fb      	ldr	r3, [r7, #28]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3728      	adds	r7, #40	; 0x28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	200046e0 	.word	0x200046e0
 8009d6c:	200046f4 	.word	0x200046f4
 8009d70:	200046e4 	.word	0x200046e4
 8009d74:	200046d8 	.word	0x200046d8
 8009d78:	200046e8 	.word	0x200046e8
 8009d7c:	200046ec 	.word	0x200046ec

08009d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d04d      	beq.n	8009e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d92:	2308      	movs	r3, #8
 8009d94:	425b      	negs	r3, r3
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	4413      	add	r3, r2
 8009d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <vPortFree+0xb8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4013      	ands	r3, r2
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10a      	bne.n	8009dc4 <vPortFree+0x44>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	60fb      	str	r3, [r7, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	e7fe      	b.n	8009dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00a      	beq.n	8009de2 <vPortFree+0x62>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	60bb      	str	r3, [r7, #8]
}
 8009dde:	bf00      	nop
 8009de0:	e7fe      	b.n	8009de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	685a      	ldr	r2, [r3, #4]
 8009de6:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <vPortFree+0xb8>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4013      	ands	r3, r2
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01e      	beq.n	8009e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d11a      	bne.n	8009e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <vPortFree+0xb8>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	43db      	mvns	r3, r3
 8009e02:	401a      	ands	r2, r3
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e08:	f7fe fb78 	bl	80084fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <vPortFree+0xbc>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4413      	add	r3, r2
 8009e16:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <vPortFree+0xbc>)
 8009e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e1a:	6938      	ldr	r0, [r7, #16]
 8009e1c:	f000 f874 	bl	8009f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <vPortFree+0xc0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	4a06      	ldr	r2, [pc, #24]	; (8009e40 <vPortFree+0xc0>)
 8009e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e2a:	f7fe fb75 	bl	8008518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e2e:	bf00      	nop
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200046f4 	.word	0x200046f4
 8009e3c:	200046e4 	.word	0x200046e4
 8009e40:	200046f0 	.word	0x200046f0

08009e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e4a:	f242 3328 	movw	r3, #9000	; 0x2328
 8009e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e50:	4b27      	ldr	r3, [pc, #156]	; (8009ef0 <prvHeapInit+0xac>)
 8009e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00c      	beq.n	8009e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3307      	adds	r3, #7
 8009e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	4a1f      	ldr	r2, [pc, #124]	; (8009ef0 <prvHeapInit+0xac>)
 8009e74:	4413      	add	r3, r2
 8009e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e7c:	4a1d      	ldr	r2, [pc, #116]	; (8009ef4 <prvHeapInit+0xb0>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <prvHeapInit+0xb0>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e90:	2208      	movs	r2, #8
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0307 	bic.w	r3, r3, #7
 8009e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <prvHeapInit+0xb4>)
 8009ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ea6:	4b14      	ldr	r3, [pc, #80]	; (8009ef8 <prvHeapInit+0xb4>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eae:	4b12      	ldr	r3, [pc, #72]	; (8009ef8 <prvHeapInit+0xb4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	1ad2      	subs	r2, r2, r3
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ec4:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <prvHeapInit+0xb4>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	4a0a      	ldr	r2, [pc, #40]	; (8009efc <prvHeapInit+0xb8>)
 8009ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	4a09      	ldr	r2, [pc, #36]	; (8009f00 <prvHeapInit+0xbc>)
 8009eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009edc:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <prvHeapInit+0xc0>)
 8009ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ee2:	601a      	str	r2, [r3, #0]
}
 8009ee4:	bf00      	nop
 8009ee6:	3714      	adds	r7, #20
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	200023b0 	.word	0x200023b0
 8009ef4:	200046d8 	.word	0x200046d8
 8009ef8:	200046e0 	.word	0x200046e0
 8009efc:	200046e8 	.word	0x200046e8
 8009f00:	200046e4 	.word	0x200046e4
 8009f04:	200046f4 	.word	0x200046f4

08009f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f10:	4b28      	ldr	r3, [pc, #160]	; (8009fb4 <prvInsertBlockIntoFreeList+0xac>)
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e002      	b.n	8009f1c <prvInsertBlockIntoFreeList+0x14>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d8f7      	bhi.n	8009f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	4413      	add	r3, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d108      	bne.n	8009f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	441a      	add	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d118      	bne.n	8009f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d00d      	beq.n	8009f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	441a      	add	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	e008      	b.n	8009f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f86:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	e003      	b.n	8009f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d002      	beq.n	8009fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fa6:	bf00      	nop
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	200046d8 	.word	0x200046d8
 8009fb8:	200046e0 	.word	0x200046e0

08009fbc <atof>:
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	f001 be21 	b.w	800bc04 <strtod>

08009fc2 <atoi>:
 8009fc2:	220a      	movs	r2, #10
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	f001 bead 	b.w	800bd24 <strtol>
	...

08009fcc <exit>:
 8009fcc:	b508      	push	{r3, lr}
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <exit+0x1c>)
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	b113      	cbz	r3, 8009fda <exit+0xe>
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	f3af 8000 	nop.w
 8009fda:	4b04      	ldr	r3, [pc, #16]	; (8009fec <exit+0x20>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <exit+0x16>
 8009fe0:	4798      	blx	r3
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f7f8 fd00 	bl	80029e8 <_exit>
 8009fe8:	00000000 	.word	0x00000000
 8009fec:	20004838 	.word	0x20004838

08009ff0 <__cvt>:
 8009ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	ec55 4b10 	vmov	r4, r5, d0
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	462b      	mov	r3, r5
 800a000:	bfbb      	ittet	lt
 800a002:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a006:	461d      	movlt	r5, r3
 800a008:	2300      	movge	r3, #0
 800a00a:	232d      	movlt	r3, #45	; 0x2d
 800a00c:	700b      	strb	r3, [r1, #0]
 800a00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a010:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a014:	4691      	mov	r9, r2
 800a016:	f023 0820 	bic.w	r8, r3, #32
 800a01a:	bfbc      	itt	lt
 800a01c:	4622      	movlt	r2, r4
 800a01e:	4614      	movlt	r4, r2
 800a020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a024:	d005      	beq.n	800a032 <__cvt+0x42>
 800a026:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a02a:	d100      	bne.n	800a02e <__cvt+0x3e>
 800a02c:	3601      	adds	r6, #1
 800a02e:	2102      	movs	r1, #2
 800a030:	e000      	b.n	800a034 <__cvt+0x44>
 800a032:	2103      	movs	r1, #3
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	ab02      	add	r3, sp, #8
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	ec45 4b10 	vmov	d0, r4, r5
 800a040:	4653      	mov	r3, sl
 800a042:	4632      	mov	r2, r6
 800a044:	f002 f868 	bl	800c118 <_dtoa_r>
 800a048:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a04c:	4607      	mov	r7, r0
 800a04e:	d102      	bne.n	800a056 <__cvt+0x66>
 800a050:	f019 0f01 	tst.w	r9, #1
 800a054:	d022      	beq.n	800a09c <__cvt+0xac>
 800a056:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a05a:	eb07 0906 	add.w	r9, r7, r6
 800a05e:	d110      	bne.n	800a082 <__cvt+0x92>
 800a060:	783b      	ldrb	r3, [r7, #0]
 800a062:	2b30      	cmp	r3, #48	; 0x30
 800a064:	d10a      	bne.n	800a07c <__cvt+0x8c>
 800a066:	2200      	movs	r2, #0
 800a068:	2300      	movs	r3, #0
 800a06a:	4620      	mov	r0, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	f7f6 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a072:	b918      	cbnz	r0, 800a07c <__cvt+0x8c>
 800a074:	f1c6 0601 	rsb	r6, r6, #1
 800a078:	f8ca 6000 	str.w	r6, [sl]
 800a07c:	f8da 3000 	ldr.w	r3, [sl]
 800a080:	4499      	add	r9, r3
 800a082:	2200      	movs	r2, #0
 800a084:	2300      	movs	r3, #0
 800a086:	4620      	mov	r0, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	f7f6 fd1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a08e:	b108      	cbz	r0, 800a094 <__cvt+0xa4>
 800a090:	f8cd 900c 	str.w	r9, [sp, #12]
 800a094:	2230      	movs	r2, #48	; 0x30
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	454b      	cmp	r3, r9
 800a09a:	d307      	bcc.n	800a0ac <__cvt+0xbc>
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a0:	1bdb      	subs	r3, r3, r7
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	b004      	add	sp, #16
 800a0a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ac:	1c59      	adds	r1, r3, #1
 800a0ae:	9103      	str	r1, [sp, #12]
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	e7f0      	b.n	800a096 <__cvt+0xa6>

0800a0b4 <__exponent>:
 800a0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2900      	cmp	r1, #0
 800a0ba:	bfb8      	it	lt
 800a0bc:	4249      	neglt	r1, r1
 800a0be:	f803 2b02 	strb.w	r2, [r3], #2
 800a0c2:	bfb4      	ite	lt
 800a0c4:	222d      	movlt	r2, #45	; 0x2d
 800a0c6:	222b      	movge	r2, #43	; 0x2b
 800a0c8:	2909      	cmp	r1, #9
 800a0ca:	7042      	strb	r2, [r0, #1]
 800a0cc:	dd2a      	ble.n	800a124 <__exponent+0x70>
 800a0ce:	f10d 0207 	add.w	r2, sp, #7
 800a0d2:	4617      	mov	r7, r2
 800a0d4:	260a      	movs	r6, #10
 800a0d6:	4694      	mov	ip, r2
 800a0d8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a0dc:	fb06 1415 	mls	r4, r6, r5, r1
 800a0e0:	3430      	adds	r4, #48	; 0x30
 800a0e2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	2c63      	cmp	r4, #99	; 0x63
 800a0ea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	dcf1      	bgt.n	800a0d6 <__exponent+0x22>
 800a0f2:	3130      	adds	r1, #48	; 0x30
 800a0f4:	f1ac 0402 	sub.w	r4, ip, #2
 800a0f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a0fc:	1c41      	adds	r1, r0, #1
 800a0fe:	4622      	mov	r2, r4
 800a100:	42ba      	cmp	r2, r7
 800a102:	d30a      	bcc.n	800a11a <__exponent+0x66>
 800a104:	f10d 0209 	add.w	r2, sp, #9
 800a108:	eba2 020c 	sub.w	r2, r2, ip
 800a10c:	42bc      	cmp	r4, r7
 800a10e:	bf88      	it	hi
 800a110:	2200      	movhi	r2, #0
 800a112:	4413      	add	r3, r2
 800a114:	1a18      	subs	r0, r3, r0
 800a116:	b003      	add	sp, #12
 800a118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a11e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a122:	e7ed      	b.n	800a100 <__exponent+0x4c>
 800a124:	2330      	movs	r3, #48	; 0x30
 800a126:	3130      	adds	r1, #48	; 0x30
 800a128:	7083      	strb	r3, [r0, #2]
 800a12a:	70c1      	strb	r1, [r0, #3]
 800a12c:	1d03      	adds	r3, r0, #4
 800a12e:	e7f1      	b.n	800a114 <__exponent+0x60>

0800a130 <_printf_float>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	ed2d 8b02 	vpush	{d8}
 800a138:	b08d      	sub	sp, #52	; 0x34
 800a13a:	460c      	mov	r4, r1
 800a13c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a140:	4616      	mov	r6, r2
 800a142:	461f      	mov	r7, r3
 800a144:	4605      	mov	r5, r0
 800a146:	f001 fe8b 	bl	800be60 <_localeconv_r>
 800a14a:	f8d0 a000 	ldr.w	sl, [r0]
 800a14e:	4650      	mov	r0, sl
 800a150:	f7f6 f88e 	bl	8000270 <strlen>
 800a154:	2300      	movs	r3, #0
 800a156:	930a      	str	r3, [sp, #40]	; 0x28
 800a158:	6823      	ldr	r3, [r4, #0]
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	f8d8 3000 	ldr.w	r3, [r8]
 800a160:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a164:	3307      	adds	r3, #7
 800a166:	f023 0307 	bic.w	r3, r3, #7
 800a16a:	f103 0208 	add.w	r2, r3, #8
 800a16e:	f8c8 2000 	str.w	r2, [r8]
 800a172:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a17a:	9307      	str	r3, [sp, #28]
 800a17c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a180:	ee08 0a10 	vmov	s16, r0
 800a184:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a18c:	4b9e      	ldr	r3, [pc, #632]	; (800a408 <_printf_float+0x2d8>)
 800a18e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a192:	f7f6 fccb 	bl	8000b2c <__aeabi_dcmpun>
 800a196:	bb88      	cbnz	r0, 800a1fc <_printf_float+0xcc>
 800a198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a19c:	4b9a      	ldr	r3, [pc, #616]	; (800a408 <_printf_float+0x2d8>)
 800a19e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1a2:	f7f6 fca5 	bl	8000af0 <__aeabi_dcmple>
 800a1a6:	bb48      	cbnz	r0, 800a1fc <_printf_float+0xcc>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 fc94 	bl	8000adc <__aeabi_dcmplt>
 800a1b4:	b110      	cbz	r0, 800a1bc <_printf_float+0x8c>
 800a1b6:	232d      	movs	r3, #45	; 0x2d
 800a1b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1bc:	4a93      	ldr	r2, [pc, #588]	; (800a40c <_printf_float+0x2dc>)
 800a1be:	4b94      	ldr	r3, [pc, #592]	; (800a410 <_printf_float+0x2e0>)
 800a1c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1c4:	bf94      	ite	ls
 800a1c6:	4690      	movls	r8, r2
 800a1c8:	4698      	movhi	r8, r3
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	6123      	str	r3, [r4, #16]
 800a1ce:	9b05      	ldr	r3, [sp, #20]
 800a1d0:	f023 0304 	bic.w	r3, r3, #4
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	f04f 0900 	mov.w	r9, #0
 800a1da:	9700      	str	r7, [sp, #0]
 800a1dc:	4633      	mov	r3, r6
 800a1de:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	f000 fa8a 	bl	800a6fc <_printf_common>
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	f040 8090 	bne.w	800a30e <_printf_float+0x1de>
 800a1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1f2:	b00d      	add	sp, #52	; 0x34
 800a1f4:	ecbd 8b02 	vpop	{d8}
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	464b      	mov	r3, r9
 800a200:	4640      	mov	r0, r8
 800a202:	4649      	mov	r1, r9
 800a204:	f7f6 fc92 	bl	8000b2c <__aeabi_dcmpun>
 800a208:	b140      	cbz	r0, 800a21c <_printf_float+0xec>
 800a20a:	464b      	mov	r3, r9
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bfbc      	itt	lt
 800a210:	232d      	movlt	r3, #45	; 0x2d
 800a212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a216:	4a7f      	ldr	r2, [pc, #508]	; (800a414 <_printf_float+0x2e4>)
 800a218:	4b7f      	ldr	r3, [pc, #508]	; (800a418 <_printf_float+0x2e8>)
 800a21a:	e7d1      	b.n	800a1c0 <_printf_float+0x90>
 800a21c:	6863      	ldr	r3, [r4, #4]
 800a21e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a222:	9206      	str	r2, [sp, #24]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	d13f      	bne.n	800a2a8 <_printf_float+0x178>
 800a228:	2306      	movs	r3, #6
 800a22a:	6063      	str	r3, [r4, #4]
 800a22c:	9b05      	ldr	r3, [sp, #20]
 800a22e:	6861      	ldr	r1, [r4, #4]
 800a230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a234:	2300      	movs	r3, #0
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	ab0a      	add	r3, sp, #40	; 0x28
 800a23a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a23e:	ab09      	add	r3, sp, #36	; 0x24
 800a240:	ec49 8b10 	vmov	d0, r8, r9
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	6022      	str	r2, [r4, #0]
 800a248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a24c:	4628      	mov	r0, r5
 800a24e:	f7ff fecf 	bl	8009ff0 <__cvt>
 800a252:	9b06      	ldr	r3, [sp, #24]
 800a254:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a256:	2b47      	cmp	r3, #71	; 0x47
 800a258:	4680      	mov	r8, r0
 800a25a:	d108      	bne.n	800a26e <_printf_float+0x13e>
 800a25c:	1cc8      	adds	r0, r1, #3
 800a25e:	db02      	blt.n	800a266 <_printf_float+0x136>
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	4299      	cmp	r1, r3
 800a264:	dd41      	ble.n	800a2ea <_printf_float+0x1ba>
 800a266:	f1ab 0302 	sub.w	r3, fp, #2
 800a26a:	fa5f fb83 	uxtb.w	fp, r3
 800a26e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a272:	d820      	bhi.n	800a2b6 <_printf_float+0x186>
 800a274:	3901      	subs	r1, #1
 800a276:	465a      	mov	r2, fp
 800a278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a27c:	9109      	str	r1, [sp, #36]	; 0x24
 800a27e:	f7ff ff19 	bl	800a0b4 <__exponent>
 800a282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a284:	1813      	adds	r3, r2, r0
 800a286:	2a01      	cmp	r2, #1
 800a288:	4681      	mov	r9, r0
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	dc02      	bgt.n	800a294 <_printf_float+0x164>
 800a28e:	6822      	ldr	r2, [r4, #0]
 800a290:	07d2      	lsls	r2, r2, #31
 800a292:	d501      	bpl.n	800a298 <_printf_float+0x168>
 800a294:	3301      	adds	r3, #1
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d09c      	beq.n	800a1da <_printf_float+0xaa>
 800a2a0:	232d      	movs	r3, #45	; 0x2d
 800a2a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a6:	e798      	b.n	800a1da <_printf_float+0xaa>
 800a2a8:	9a06      	ldr	r2, [sp, #24]
 800a2aa:	2a47      	cmp	r2, #71	; 0x47
 800a2ac:	d1be      	bne.n	800a22c <_printf_float+0xfc>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1bc      	bne.n	800a22c <_printf_float+0xfc>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e7b9      	b.n	800a22a <_printf_float+0xfa>
 800a2b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2ba:	d118      	bne.n	800a2ee <_printf_float+0x1be>
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	dd0b      	ble.n	800a2da <_printf_float+0x1aa>
 800a2c2:	6121      	str	r1, [r4, #16]
 800a2c4:	b913      	cbnz	r3, 800a2cc <_printf_float+0x19c>
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	07d0      	lsls	r0, r2, #31
 800a2ca:	d502      	bpl.n	800a2d2 <_printf_float+0x1a2>
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	440b      	add	r3, r1
 800a2d0:	6123      	str	r3, [r4, #16]
 800a2d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2d4:	f04f 0900 	mov.w	r9, #0
 800a2d8:	e7de      	b.n	800a298 <_printf_float+0x168>
 800a2da:	b913      	cbnz	r3, 800a2e2 <_printf_float+0x1b2>
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	07d2      	lsls	r2, r2, #31
 800a2e0:	d501      	bpl.n	800a2e6 <_printf_float+0x1b6>
 800a2e2:	3302      	adds	r3, #2
 800a2e4:	e7f4      	b.n	800a2d0 <_printf_float+0x1a0>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e7f2      	b.n	800a2d0 <_printf_float+0x1a0>
 800a2ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	db05      	blt.n	800a300 <_printf_float+0x1d0>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	6121      	str	r1, [r4, #16]
 800a2f8:	07d8      	lsls	r0, r3, #31
 800a2fa:	d5ea      	bpl.n	800a2d2 <_printf_float+0x1a2>
 800a2fc:	1c4b      	adds	r3, r1, #1
 800a2fe:	e7e7      	b.n	800a2d0 <_printf_float+0x1a0>
 800a300:	2900      	cmp	r1, #0
 800a302:	bfd4      	ite	le
 800a304:	f1c1 0202 	rsble	r2, r1, #2
 800a308:	2201      	movgt	r2, #1
 800a30a:	4413      	add	r3, r2
 800a30c:	e7e0      	b.n	800a2d0 <_printf_float+0x1a0>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	055a      	lsls	r2, r3, #21
 800a312:	d407      	bmi.n	800a324 <_printf_float+0x1f4>
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	4642      	mov	r2, r8
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	47b8      	blx	r7
 800a31e:	3001      	adds	r0, #1
 800a320:	d12c      	bne.n	800a37c <_printf_float+0x24c>
 800a322:	e764      	b.n	800a1ee <_printf_float+0xbe>
 800a324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a328:	f240 80e0 	bls.w	800a4ec <_printf_float+0x3bc>
 800a32c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a330:	2200      	movs	r2, #0
 800a332:	2300      	movs	r3, #0
 800a334:	f7f6 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d034      	beq.n	800a3a6 <_printf_float+0x276>
 800a33c:	4a37      	ldr	r2, [pc, #220]	; (800a41c <_printf_float+0x2ec>)
 800a33e:	2301      	movs	r3, #1
 800a340:	4631      	mov	r1, r6
 800a342:	4628      	mov	r0, r5
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	f43f af51 	beq.w	800a1ee <_printf_float+0xbe>
 800a34c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a350:	429a      	cmp	r2, r3
 800a352:	db02      	blt.n	800a35a <_printf_float+0x22a>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	07d8      	lsls	r0, r3, #31
 800a358:	d510      	bpl.n	800a37c <_printf_float+0x24c>
 800a35a:	ee18 3a10 	vmov	r3, s16
 800a35e:	4652      	mov	r2, sl
 800a360:	4631      	mov	r1, r6
 800a362:	4628      	mov	r0, r5
 800a364:	47b8      	blx	r7
 800a366:	3001      	adds	r0, #1
 800a368:	f43f af41 	beq.w	800a1ee <_printf_float+0xbe>
 800a36c:	f04f 0800 	mov.w	r8, #0
 800a370:	f104 091a 	add.w	r9, r4, #26
 800a374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a376:	3b01      	subs	r3, #1
 800a378:	4543      	cmp	r3, r8
 800a37a:	dc09      	bgt.n	800a390 <_printf_float+0x260>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	079b      	lsls	r3, r3, #30
 800a380:	f100 8107 	bmi.w	800a592 <_printf_float+0x462>
 800a384:	68e0      	ldr	r0, [r4, #12]
 800a386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a388:	4298      	cmp	r0, r3
 800a38a:	bfb8      	it	lt
 800a38c:	4618      	movlt	r0, r3
 800a38e:	e730      	b.n	800a1f2 <_printf_float+0xc2>
 800a390:	2301      	movs	r3, #1
 800a392:	464a      	mov	r2, r9
 800a394:	4631      	mov	r1, r6
 800a396:	4628      	mov	r0, r5
 800a398:	47b8      	blx	r7
 800a39a:	3001      	adds	r0, #1
 800a39c:	f43f af27 	beq.w	800a1ee <_printf_float+0xbe>
 800a3a0:	f108 0801 	add.w	r8, r8, #1
 800a3a4:	e7e6      	b.n	800a374 <_printf_float+0x244>
 800a3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dc39      	bgt.n	800a420 <_printf_float+0x2f0>
 800a3ac:	4a1b      	ldr	r2, [pc, #108]	; (800a41c <_printf_float+0x2ec>)
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	47b8      	blx	r7
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	f43f af19 	beq.w	800a1ee <_printf_float+0xbe>
 800a3bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d102      	bne.n	800a3ca <_printf_float+0x29a>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	d5d8      	bpl.n	800a37c <_printf_float+0x24c>
 800a3ca:	ee18 3a10 	vmov	r3, s16
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f43f af09 	beq.w	800a1ee <_printf_float+0xbe>
 800a3dc:	f04f 0900 	mov.w	r9, #0
 800a3e0:	f104 0a1a 	add.w	sl, r4, #26
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	425b      	negs	r3, r3
 800a3e8:	454b      	cmp	r3, r9
 800a3ea:	dc01      	bgt.n	800a3f0 <_printf_float+0x2c0>
 800a3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ee:	e792      	b.n	800a316 <_printf_float+0x1e6>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	47b8      	blx	r7
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	f43f aef7 	beq.w	800a1ee <_printf_float+0xbe>
 800a400:	f109 0901 	add.w	r9, r9, #1
 800a404:	e7ee      	b.n	800a3e4 <_printf_float+0x2b4>
 800a406:	bf00      	nop
 800a408:	7fefffff 	.word	0x7fefffff
 800a40c:	0800fe90 	.word	0x0800fe90
 800a410:	0800fe94 	.word	0x0800fe94
 800a414:	0800fe98 	.word	0x0800fe98
 800a418:	0800fe9c 	.word	0x0800fe9c
 800a41c:	0800fea0 	.word	0x0800fea0
 800a420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a424:	429a      	cmp	r2, r3
 800a426:	bfa8      	it	ge
 800a428:	461a      	movge	r2, r3
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	4691      	mov	r9, r2
 800a42e:	dc37      	bgt.n	800a4a0 <_printf_float+0x370>
 800a430:	f04f 0b00 	mov.w	fp, #0
 800a434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a438:	f104 021a 	add.w	r2, r4, #26
 800a43c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a43e:	9305      	str	r3, [sp, #20]
 800a440:	eba3 0309 	sub.w	r3, r3, r9
 800a444:	455b      	cmp	r3, fp
 800a446:	dc33      	bgt.n	800a4b0 <_printf_float+0x380>
 800a448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a44c:	429a      	cmp	r2, r3
 800a44e:	db3b      	blt.n	800a4c8 <_printf_float+0x398>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	07da      	lsls	r2, r3, #31
 800a454:	d438      	bmi.n	800a4c8 <_printf_float+0x398>
 800a456:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a45a:	eba2 0903 	sub.w	r9, r2, r3
 800a45e:	9b05      	ldr	r3, [sp, #20]
 800a460:	1ad2      	subs	r2, r2, r3
 800a462:	4591      	cmp	r9, r2
 800a464:	bfa8      	it	ge
 800a466:	4691      	movge	r9, r2
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	dc35      	bgt.n	800a4da <_printf_float+0x3aa>
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a476:	f104 0a1a 	add.w	sl, r4, #26
 800a47a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	eba3 0309 	sub.w	r3, r3, r9
 800a484:	4543      	cmp	r3, r8
 800a486:	f77f af79 	ble.w	800a37c <_printf_float+0x24c>
 800a48a:	2301      	movs	r3, #1
 800a48c:	4652      	mov	r2, sl
 800a48e:	4631      	mov	r1, r6
 800a490:	4628      	mov	r0, r5
 800a492:	47b8      	blx	r7
 800a494:	3001      	adds	r0, #1
 800a496:	f43f aeaa 	beq.w	800a1ee <_printf_float+0xbe>
 800a49a:	f108 0801 	add.w	r8, r8, #1
 800a49e:	e7ec      	b.n	800a47a <_printf_float+0x34a>
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4642      	mov	r2, r8
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d1c0      	bne.n	800a430 <_printf_float+0x300>
 800a4ae:	e69e      	b.n	800a1ee <_printf_float+0xbe>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	9205      	str	r2, [sp, #20]
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f ae97 	beq.w	800a1ee <_printf_float+0xbe>
 800a4c0:	9a05      	ldr	r2, [sp, #20]
 800a4c2:	f10b 0b01 	add.w	fp, fp, #1
 800a4c6:	e7b9      	b.n	800a43c <_printf_float+0x30c>
 800a4c8:	ee18 3a10 	vmov	r3, s16
 800a4cc:	4652      	mov	r2, sl
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	d1be      	bne.n	800a456 <_printf_float+0x326>
 800a4d8:	e689      	b.n	800a1ee <_printf_float+0xbe>
 800a4da:	9a05      	ldr	r2, [sp, #20]
 800a4dc:	464b      	mov	r3, r9
 800a4de:	4442      	add	r2, r8
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d1c1      	bne.n	800a46e <_printf_float+0x33e>
 800a4ea:	e680      	b.n	800a1ee <_printf_float+0xbe>
 800a4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ee:	2a01      	cmp	r2, #1
 800a4f0:	dc01      	bgt.n	800a4f6 <_printf_float+0x3c6>
 800a4f2:	07db      	lsls	r3, r3, #31
 800a4f4:	d53a      	bpl.n	800a56c <_printf_float+0x43c>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	f43f ae74 	beq.w	800a1ee <_printf_float+0xbe>
 800a506:	ee18 3a10 	vmov	r3, s16
 800a50a:	4652      	mov	r2, sl
 800a50c:	4631      	mov	r1, r6
 800a50e:	4628      	mov	r0, r5
 800a510:	47b8      	blx	r7
 800a512:	3001      	adds	r0, #1
 800a514:	f43f ae6b 	beq.w	800a1ee <_printf_float+0xbe>
 800a518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a524:	f7f6 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a528:	b9d8      	cbnz	r0, 800a562 <_printf_float+0x432>
 800a52a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a52e:	f108 0201 	add.w	r2, r8, #1
 800a532:	4631      	mov	r1, r6
 800a534:	4628      	mov	r0, r5
 800a536:	47b8      	blx	r7
 800a538:	3001      	adds	r0, #1
 800a53a:	d10e      	bne.n	800a55a <_printf_float+0x42a>
 800a53c:	e657      	b.n	800a1ee <_printf_float+0xbe>
 800a53e:	2301      	movs	r3, #1
 800a540:	4652      	mov	r2, sl
 800a542:	4631      	mov	r1, r6
 800a544:	4628      	mov	r0, r5
 800a546:	47b8      	blx	r7
 800a548:	3001      	adds	r0, #1
 800a54a:	f43f ae50 	beq.w	800a1ee <_printf_float+0xbe>
 800a54e:	f108 0801 	add.w	r8, r8, #1
 800a552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a554:	3b01      	subs	r3, #1
 800a556:	4543      	cmp	r3, r8
 800a558:	dcf1      	bgt.n	800a53e <_printf_float+0x40e>
 800a55a:	464b      	mov	r3, r9
 800a55c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a560:	e6da      	b.n	800a318 <_printf_float+0x1e8>
 800a562:	f04f 0800 	mov.w	r8, #0
 800a566:	f104 0a1a 	add.w	sl, r4, #26
 800a56a:	e7f2      	b.n	800a552 <_printf_float+0x422>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4642      	mov	r2, r8
 800a570:	e7df      	b.n	800a532 <_printf_float+0x402>
 800a572:	2301      	movs	r3, #1
 800a574:	464a      	mov	r2, r9
 800a576:	4631      	mov	r1, r6
 800a578:	4628      	mov	r0, r5
 800a57a:	47b8      	blx	r7
 800a57c:	3001      	adds	r0, #1
 800a57e:	f43f ae36 	beq.w	800a1ee <_printf_float+0xbe>
 800a582:	f108 0801 	add.w	r8, r8, #1
 800a586:	68e3      	ldr	r3, [r4, #12]
 800a588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a58a:	1a5b      	subs	r3, r3, r1
 800a58c:	4543      	cmp	r3, r8
 800a58e:	dcf0      	bgt.n	800a572 <_printf_float+0x442>
 800a590:	e6f8      	b.n	800a384 <_printf_float+0x254>
 800a592:	f04f 0800 	mov.w	r8, #0
 800a596:	f104 0919 	add.w	r9, r4, #25
 800a59a:	e7f4      	b.n	800a586 <_printf_float+0x456>

0800a59c <malloc>:
 800a59c:	4b02      	ldr	r3, [pc, #8]	; (800a5a8 <malloc+0xc>)
 800a59e:	4601      	mov	r1, r0
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	f000 b82b 	b.w	800a5fc <_malloc_r>
 800a5a6:	bf00      	nop
 800a5a8:	200005d8 	.word	0x200005d8

0800a5ac <free>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	; (800a5b8 <free+0xc>)
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	f002 bba3 	b.w	800ccfc <_free_r>
 800a5b6:	bf00      	nop
 800a5b8:	200005d8 	.word	0x200005d8

0800a5bc <sbrk_aligned>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4e0e      	ldr	r6, [pc, #56]	; (800a5f8 <sbrk_aligned+0x3c>)
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	6831      	ldr	r1, [r6, #0]
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	b911      	cbnz	r1, 800a5ce <sbrk_aligned+0x12>
 800a5c8:	f001 fca4 	bl	800bf14 <_sbrk_r>
 800a5cc:	6030      	str	r0, [r6, #0]
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f001 fc9f 	bl	800bf14 <_sbrk_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	d00a      	beq.n	800a5f0 <sbrk_aligned+0x34>
 800a5da:	1cc4      	adds	r4, r0, #3
 800a5dc:	f024 0403 	bic.w	r4, r4, #3
 800a5e0:	42a0      	cmp	r0, r4
 800a5e2:	d007      	beq.n	800a5f4 <sbrk_aligned+0x38>
 800a5e4:	1a21      	subs	r1, r4, r0
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f001 fc94 	bl	800bf14 <_sbrk_r>
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d101      	bne.n	800a5f4 <sbrk_aligned+0x38>
 800a5f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	200046fc 	.word	0x200046fc

0800a5fc <_malloc_r>:
 800a5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a600:	1ccd      	adds	r5, r1, #3
 800a602:	f025 0503 	bic.w	r5, r5, #3
 800a606:	3508      	adds	r5, #8
 800a608:	2d0c      	cmp	r5, #12
 800a60a:	bf38      	it	cc
 800a60c:	250c      	movcc	r5, #12
 800a60e:	2d00      	cmp	r5, #0
 800a610:	4607      	mov	r7, r0
 800a612:	db01      	blt.n	800a618 <_malloc_r+0x1c>
 800a614:	42a9      	cmp	r1, r5
 800a616:	d905      	bls.n	800a624 <_malloc_r+0x28>
 800a618:	230c      	movs	r3, #12
 800a61a:	603b      	str	r3, [r7, #0]
 800a61c:	2600      	movs	r6, #0
 800a61e:	4630      	mov	r0, r6
 800a620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a624:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6f8 <_malloc_r+0xfc>
 800a628:	f000 fc08 	bl	800ae3c <__malloc_lock>
 800a62c:	f8d8 3000 	ldr.w	r3, [r8]
 800a630:	461c      	mov	r4, r3
 800a632:	bb5c      	cbnz	r4, 800a68c <_malloc_r+0x90>
 800a634:	4629      	mov	r1, r5
 800a636:	4638      	mov	r0, r7
 800a638:	f7ff ffc0 	bl	800a5bc <sbrk_aligned>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	4604      	mov	r4, r0
 800a640:	d155      	bne.n	800a6ee <_malloc_r+0xf2>
 800a642:	f8d8 4000 	ldr.w	r4, [r8]
 800a646:	4626      	mov	r6, r4
 800a648:	2e00      	cmp	r6, #0
 800a64a:	d145      	bne.n	800a6d8 <_malloc_r+0xdc>
 800a64c:	2c00      	cmp	r4, #0
 800a64e:	d048      	beq.n	800a6e2 <_malloc_r+0xe6>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	4631      	mov	r1, r6
 800a654:	4638      	mov	r0, r7
 800a656:	eb04 0903 	add.w	r9, r4, r3
 800a65a:	f001 fc5b 	bl	800bf14 <_sbrk_r>
 800a65e:	4581      	cmp	r9, r0
 800a660:	d13f      	bne.n	800a6e2 <_malloc_r+0xe6>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	1a6d      	subs	r5, r5, r1
 800a666:	4629      	mov	r1, r5
 800a668:	4638      	mov	r0, r7
 800a66a:	f7ff ffa7 	bl	800a5bc <sbrk_aligned>
 800a66e:	3001      	adds	r0, #1
 800a670:	d037      	beq.n	800a6e2 <_malloc_r+0xe6>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	442b      	add	r3, r5
 800a676:	6023      	str	r3, [r4, #0]
 800a678:	f8d8 3000 	ldr.w	r3, [r8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d038      	beq.n	800a6f2 <_malloc_r+0xf6>
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	42a2      	cmp	r2, r4
 800a684:	d12b      	bne.n	800a6de <_malloc_r+0xe2>
 800a686:	2200      	movs	r2, #0
 800a688:	605a      	str	r2, [r3, #4]
 800a68a:	e00f      	b.n	800a6ac <_malloc_r+0xb0>
 800a68c:	6822      	ldr	r2, [r4, #0]
 800a68e:	1b52      	subs	r2, r2, r5
 800a690:	d41f      	bmi.n	800a6d2 <_malloc_r+0xd6>
 800a692:	2a0b      	cmp	r2, #11
 800a694:	d917      	bls.n	800a6c6 <_malloc_r+0xca>
 800a696:	1961      	adds	r1, r4, r5
 800a698:	42a3      	cmp	r3, r4
 800a69a:	6025      	str	r5, [r4, #0]
 800a69c:	bf18      	it	ne
 800a69e:	6059      	strne	r1, [r3, #4]
 800a6a0:	6863      	ldr	r3, [r4, #4]
 800a6a2:	bf08      	it	eq
 800a6a4:	f8c8 1000 	streq.w	r1, [r8]
 800a6a8:	5162      	str	r2, [r4, r5]
 800a6aa:	604b      	str	r3, [r1, #4]
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f104 060b 	add.w	r6, r4, #11
 800a6b2:	f000 fbc9 	bl	800ae48 <__malloc_unlock>
 800a6b6:	f026 0607 	bic.w	r6, r6, #7
 800a6ba:	1d23      	adds	r3, r4, #4
 800a6bc:	1af2      	subs	r2, r6, r3
 800a6be:	d0ae      	beq.n	800a61e <_malloc_r+0x22>
 800a6c0:	1b9b      	subs	r3, r3, r6
 800a6c2:	50a3      	str	r3, [r4, r2]
 800a6c4:	e7ab      	b.n	800a61e <_malloc_r+0x22>
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	6862      	ldr	r2, [r4, #4]
 800a6ca:	d1dd      	bne.n	800a688 <_malloc_r+0x8c>
 800a6cc:	f8c8 2000 	str.w	r2, [r8]
 800a6d0:	e7ec      	b.n	800a6ac <_malloc_r+0xb0>
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	6864      	ldr	r4, [r4, #4]
 800a6d6:	e7ac      	b.n	800a632 <_malloc_r+0x36>
 800a6d8:	4634      	mov	r4, r6
 800a6da:	6876      	ldr	r6, [r6, #4]
 800a6dc:	e7b4      	b.n	800a648 <_malloc_r+0x4c>
 800a6de:	4613      	mov	r3, r2
 800a6e0:	e7cc      	b.n	800a67c <_malloc_r+0x80>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	603b      	str	r3, [r7, #0]
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	f000 fbae 	bl	800ae48 <__malloc_unlock>
 800a6ec:	e797      	b.n	800a61e <_malloc_r+0x22>
 800a6ee:	6025      	str	r5, [r4, #0]
 800a6f0:	e7dc      	b.n	800a6ac <_malloc_r+0xb0>
 800a6f2:	605b      	str	r3, [r3, #4]
 800a6f4:	deff      	udf	#255	; 0xff
 800a6f6:	bf00      	nop
 800a6f8:	200046f8 	.word	0x200046f8

0800a6fc <_printf_common>:
 800a6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a700:	4616      	mov	r6, r2
 800a702:	4699      	mov	r9, r3
 800a704:	688a      	ldr	r2, [r1, #8]
 800a706:	690b      	ldr	r3, [r1, #16]
 800a708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a70c:	4293      	cmp	r3, r2
 800a70e:	bfb8      	it	lt
 800a710:	4613      	movlt	r3, r2
 800a712:	6033      	str	r3, [r6, #0]
 800a714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a718:	4607      	mov	r7, r0
 800a71a:	460c      	mov	r4, r1
 800a71c:	b10a      	cbz	r2, 800a722 <_printf_common+0x26>
 800a71e:	3301      	adds	r3, #1
 800a720:	6033      	str	r3, [r6, #0]
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	0699      	lsls	r1, r3, #26
 800a726:	bf42      	ittt	mi
 800a728:	6833      	ldrmi	r3, [r6, #0]
 800a72a:	3302      	addmi	r3, #2
 800a72c:	6033      	strmi	r3, [r6, #0]
 800a72e:	6825      	ldr	r5, [r4, #0]
 800a730:	f015 0506 	ands.w	r5, r5, #6
 800a734:	d106      	bne.n	800a744 <_printf_common+0x48>
 800a736:	f104 0a19 	add.w	sl, r4, #25
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	6832      	ldr	r2, [r6, #0]
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	42ab      	cmp	r3, r5
 800a742:	dc26      	bgt.n	800a792 <_printf_common+0x96>
 800a744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a748:	1e13      	subs	r3, r2, #0
 800a74a:	6822      	ldr	r2, [r4, #0]
 800a74c:	bf18      	it	ne
 800a74e:	2301      	movne	r3, #1
 800a750:	0692      	lsls	r2, r2, #26
 800a752:	d42b      	bmi.n	800a7ac <_printf_common+0xb0>
 800a754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a758:	4649      	mov	r1, r9
 800a75a:	4638      	mov	r0, r7
 800a75c:	47c0      	blx	r8
 800a75e:	3001      	adds	r0, #1
 800a760:	d01e      	beq.n	800a7a0 <_printf_common+0xa4>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	6922      	ldr	r2, [r4, #16]
 800a766:	f003 0306 	and.w	r3, r3, #6
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	bf02      	ittt	eq
 800a76e:	68e5      	ldreq	r5, [r4, #12]
 800a770:	6833      	ldreq	r3, [r6, #0]
 800a772:	1aed      	subeq	r5, r5, r3
 800a774:	68a3      	ldr	r3, [r4, #8]
 800a776:	bf0c      	ite	eq
 800a778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a77c:	2500      	movne	r5, #0
 800a77e:	4293      	cmp	r3, r2
 800a780:	bfc4      	itt	gt
 800a782:	1a9b      	subgt	r3, r3, r2
 800a784:	18ed      	addgt	r5, r5, r3
 800a786:	2600      	movs	r6, #0
 800a788:	341a      	adds	r4, #26
 800a78a:	42b5      	cmp	r5, r6
 800a78c:	d11a      	bne.n	800a7c4 <_printf_common+0xc8>
 800a78e:	2000      	movs	r0, #0
 800a790:	e008      	b.n	800a7a4 <_printf_common+0xa8>
 800a792:	2301      	movs	r3, #1
 800a794:	4652      	mov	r2, sl
 800a796:	4649      	mov	r1, r9
 800a798:	4638      	mov	r0, r7
 800a79a:	47c0      	blx	r8
 800a79c:	3001      	adds	r0, #1
 800a79e:	d103      	bne.n	800a7a8 <_printf_common+0xac>
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	e7c6      	b.n	800a73a <_printf_common+0x3e>
 800a7ac:	18e1      	adds	r1, r4, r3
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	2030      	movs	r0, #48	; 0x30
 800a7b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7b6:	4422      	add	r2, r4
 800a7b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	e7c7      	b.n	800a754 <_printf_common+0x58>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	47c0      	blx	r8
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d0e6      	beq.n	800a7a0 <_printf_common+0xa4>
 800a7d2:	3601      	adds	r6, #1
 800a7d4:	e7d9      	b.n	800a78a <_printf_common+0x8e>
	...

0800a7d8 <_printf_i>:
 800a7d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	7e0f      	ldrb	r7, [r1, #24]
 800a7de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7e0:	2f78      	cmp	r7, #120	; 0x78
 800a7e2:	4691      	mov	r9, r2
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	469a      	mov	sl, r3
 800a7ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ee:	d807      	bhi.n	800a800 <_printf_i+0x28>
 800a7f0:	2f62      	cmp	r7, #98	; 0x62
 800a7f2:	d80a      	bhi.n	800a80a <_printf_i+0x32>
 800a7f4:	2f00      	cmp	r7, #0
 800a7f6:	f000 80d4 	beq.w	800a9a2 <_printf_i+0x1ca>
 800a7fa:	2f58      	cmp	r7, #88	; 0x58
 800a7fc:	f000 80c0 	beq.w	800a980 <_printf_i+0x1a8>
 800a800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a808:	e03a      	b.n	800a880 <_printf_i+0xa8>
 800a80a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a80e:	2b15      	cmp	r3, #21
 800a810:	d8f6      	bhi.n	800a800 <_printf_i+0x28>
 800a812:	a101      	add	r1, pc, #4	; (adr r1, 800a818 <_printf_i+0x40>)
 800a814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a818:	0800a871 	.word	0x0800a871
 800a81c:	0800a885 	.word	0x0800a885
 800a820:	0800a801 	.word	0x0800a801
 800a824:	0800a801 	.word	0x0800a801
 800a828:	0800a801 	.word	0x0800a801
 800a82c:	0800a801 	.word	0x0800a801
 800a830:	0800a885 	.word	0x0800a885
 800a834:	0800a801 	.word	0x0800a801
 800a838:	0800a801 	.word	0x0800a801
 800a83c:	0800a801 	.word	0x0800a801
 800a840:	0800a801 	.word	0x0800a801
 800a844:	0800a989 	.word	0x0800a989
 800a848:	0800a8b1 	.word	0x0800a8b1
 800a84c:	0800a943 	.word	0x0800a943
 800a850:	0800a801 	.word	0x0800a801
 800a854:	0800a801 	.word	0x0800a801
 800a858:	0800a9ab 	.word	0x0800a9ab
 800a85c:	0800a801 	.word	0x0800a801
 800a860:	0800a8b1 	.word	0x0800a8b1
 800a864:	0800a801 	.word	0x0800a801
 800a868:	0800a801 	.word	0x0800a801
 800a86c:	0800a94b 	.word	0x0800a94b
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	1d1a      	adds	r2, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	602a      	str	r2, [r5, #0]
 800a878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a87c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a880:	2301      	movs	r3, #1
 800a882:	e09f      	b.n	800a9c4 <_printf_i+0x1ec>
 800a884:	6820      	ldr	r0, [r4, #0]
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	0607      	lsls	r7, r0, #24
 800a88a:	f103 0104 	add.w	r1, r3, #4
 800a88e:	6029      	str	r1, [r5, #0]
 800a890:	d501      	bpl.n	800a896 <_printf_i+0xbe>
 800a892:	681e      	ldr	r6, [r3, #0]
 800a894:	e003      	b.n	800a89e <_printf_i+0xc6>
 800a896:	0646      	lsls	r6, r0, #25
 800a898:	d5fb      	bpl.n	800a892 <_printf_i+0xba>
 800a89a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	da03      	bge.n	800a8aa <_printf_i+0xd2>
 800a8a2:	232d      	movs	r3, #45	; 0x2d
 800a8a4:	4276      	negs	r6, r6
 800a8a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8aa:	485a      	ldr	r0, [pc, #360]	; (800aa14 <_printf_i+0x23c>)
 800a8ac:	230a      	movs	r3, #10
 800a8ae:	e012      	b.n	800a8d6 <_printf_i+0xfe>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	6820      	ldr	r0, [r4, #0]
 800a8b4:	1d19      	adds	r1, r3, #4
 800a8b6:	6029      	str	r1, [r5, #0]
 800a8b8:	0605      	lsls	r5, r0, #24
 800a8ba:	d501      	bpl.n	800a8c0 <_printf_i+0xe8>
 800a8bc:	681e      	ldr	r6, [r3, #0]
 800a8be:	e002      	b.n	800a8c6 <_printf_i+0xee>
 800a8c0:	0641      	lsls	r1, r0, #25
 800a8c2:	d5fb      	bpl.n	800a8bc <_printf_i+0xe4>
 800a8c4:	881e      	ldrh	r6, [r3, #0]
 800a8c6:	4853      	ldr	r0, [pc, #332]	; (800aa14 <_printf_i+0x23c>)
 800a8c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a8ca:	bf0c      	ite	eq
 800a8cc:	2308      	moveq	r3, #8
 800a8ce:	230a      	movne	r3, #10
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8d6:	6865      	ldr	r5, [r4, #4]
 800a8d8:	60a5      	str	r5, [r4, #8]
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	bfa2      	ittt	ge
 800a8de:	6821      	ldrge	r1, [r4, #0]
 800a8e0:	f021 0104 	bicge.w	r1, r1, #4
 800a8e4:	6021      	strge	r1, [r4, #0]
 800a8e6:	b90e      	cbnz	r6, 800a8ec <_printf_i+0x114>
 800a8e8:	2d00      	cmp	r5, #0
 800a8ea:	d04b      	beq.n	800a984 <_printf_i+0x1ac>
 800a8ec:	4615      	mov	r5, r2
 800a8ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8f6:	5dc7      	ldrb	r7, [r0, r7]
 800a8f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8fc:	4637      	mov	r7, r6
 800a8fe:	42bb      	cmp	r3, r7
 800a900:	460e      	mov	r6, r1
 800a902:	d9f4      	bls.n	800a8ee <_printf_i+0x116>
 800a904:	2b08      	cmp	r3, #8
 800a906:	d10b      	bne.n	800a920 <_printf_i+0x148>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07de      	lsls	r6, r3, #31
 800a90c:	d508      	bpl.n	800a920 <_printf_i+0x148>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	6861      	ldr	r1, [r4, #4]
 800a912:	4299      	cmp	r1, r3
 800a914:	bfde      	ittt	le
 800a916:	2330      	movle	r3, #48	; 0x30
 800a918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a91c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a920:	1b52      	subs	r2, r2, r5
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	f8cd a000 	str.w	sl, [sp]
 800a928:	464b      	mov	r3, r9
 800a92a:	aa03      	add	r2, sp, #12
 800a92c:	4621      	mov	r1, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	f7ff fee4 	bl	800a6fc <_printf_common>
 800a934:	3001      	adds	r0, #1
 800a936:	d14a      	bne.n	800a9ce <_printf_i+0x1f6>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a93c:	b004      	add	sp, #16
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	f043 0320 	orr.w	r3, r3, #32
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	4833      	ldr	r0, [pc, #204]	; (800aa18 <_printf_i+0x240>)
 800a94c:	2778      	movs	r7, #120	; 0x78
 800a94e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	6829      	ldr	r1, [r5, #0]
 800a956:	061f      	lsls	r7, r3, #24
 800a958:	f851 6b04 	ldr.w	r6, [r1], #4
 800a95c:	d402      	bmi.n	800a964 <_printf_i+0x18c>
 800a95e:	065f      	lsls	r7, r3, #25
 800a960:	bf48      	it	mi
 800a962:	b2b6      	uxthmi	r6, r6
 800a964:	07df      	lsls	r7, r3, #31
 800a966:	bf48      	it	mi
 800a968:	f043 0320 	orrmi.w	r3, r3, #32
 800a96c:	6029      	str	r1, [r5, #0]
 800a96e:	bf48      	it	mi
 800a970:	6023      	strmi	r3, [r4, #0]
 800a972:	b91e      	cbnz	r6, 800a97c <_printf_i+0x1a4>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	f023 0320 	bic.w	r3, r3, #32
 800a97a:	6023      	str	r3, [r4, #0]
 800a97c:	2310      	movs	r3, #16
 800a97e:	e7a7      	b.n	800a8d0 <_printf_i+0xf8>
 800a980:	4824      	ldr	r0, [pc, #144]	; (800aa14 <_printf_i+0x23c>)
 800a982:	e7e4      	b.n	800a94e <_printf_i+0x176>
 800a984:	4615      	mov	r5, r2
 800a986:	e7bd      	b.n	800a904 <_printf_i+0x12c>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	6826      	ldr	r6, [r4, #0]
 800a98c:	6961      	ldr	r1, [r4, #20]
 800a98e:	1d18      	adds	r0, r3, #4
 800a990:	6028      	str	r0, [r5, #0]
 800a992:	0635      	lsls	r5, r6, #24
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	d501      	bpl.n	800a99c <_printf_i+0x1c4>
 800a998:	6019      	str	r1, [r3, #0]
 800a99a:	e002      	b.n	800a9a2 <_printf_i+0x1ca>
 800a99c:	0670      	lsls	r0, r6, #25
 800a99e:	d5fb      	bpl.n	800a998 <_printf_i+0x1c0>
 800a9a0:	8019      	strh	r1, [r3, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	4615      	mov	r5, r2
 800a9a8:	e7bc      	b.n	800a924 <_printf_i+0x14c>
 800a9aa:	682b      	ldr	r3, [r5, #0]
 800a9ac:	1d1a      	adds	r2, r3, #4
 800a9ae:	602a      	str	r2, [r5, #0]
 800a9b0:	681d      	ldr	r5, [r3, #0]
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f7f5 fc0a 	bl	80001d0 <memchr>
 800a9bc:	b108      	cbz	r0, 800a9c2 <_printf_i+0x1ea>
 800a9be:	1b40      	subs	r0, r0, r5
 800a9c0:	6060      	str	r0, [r4, #4]
 800a9c2:	6863      	ldr	r3, [r4, #4]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9cc:	e7aa      	b.n	800a924 <_printf_i+0x14c>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	462a      	mov	r2, r5
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	47d0      	blx	sl
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d0ad      	beq.n	800a938 <_printf_i+0x160>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	079b      	lsls	r3, r3, #30
 800a9e0:	d413      	bmi.n	800aa0a <_printf_i+0x232>
 800a9e2:	68e0      	ldr	r0, [r4, #12]
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	bfb8      	it	lt
 800a9ea:	4618      	movlt	r0, r3
 800a9ec:	e7a6      	b.n	800a93c <_printf_i+0x164>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	47d0      	blx	sl
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d09d      	beq.n	800a938 <_printf_i+0x160>
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	9903      	ldr	r1, [sp, #12]
 800aa02:	1a5b      	subs	r3, r3, r1
 800aa04:	42ab      	cmp	r3, r5
 800aa06:	dcf2      	bgt.n	800a9ee <_printf_i+0x216>
 800aa08:	e7eb      	b.n	800a9e2 <_printf_i+0x20a>
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	f104 0619 	add.w	r6, r4, #25
 800aa10:	e7f5      	b.n	800a9fe <_printf_i+0x226>
 800aa12:	bf00      	nop
 800aa14:	0800fea2 	.word	0x0800fea2
 800aa18:	0800feb3 	.word	0x0800feb3

0800aa1c <_scanf_float>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	b087      	sub	sp, #28
 800aa22:	4617      	mov	r7, r2
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	688b      	ldr	r3, [r1, #8]
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa2e:	bf83      	ittte	hi
 800aa30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa34:	195b      	addhi	r3, r3, r5
 800aa36:	9302      	strhi	r3, [sp, #8]
 800aa38:	2300      	movls	r3, #0
 800aa3a:	bf86      	itte	hi
 800aa3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa40:	608b      	strhi	r3, [r1, #8]
 800aa42:	9302      	strls	r3, [sp, #8]
 800aa44:	680b      	ldr	r3, [r1, #0]
 800aa46:	468b      	mov	fp, r1
 800aa48:	2500      	movs	r5, #0
 800aa4a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa4e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa56:	4680      	mov	r8, r0
 800aa58:	460c      	mov	r4, r1
 800aa5a:	465e      	mov	r6, fp
 800aa5c:	46aa      	mov	sl, r5
 800aa5e:	46a9      	mov	r9, r5
 800aa60:	9501      	str	r5, [sp, #4]
 800aa62:	68a2      	ldr	r2, [r4, #8]
 800aa64:	b152      	cbz	r2, 800aa7c <_scanf_float+0x60>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b4e      	cmp	r3, #78	; 0x4e
 800aa6c:	d864      	bhi.n	800ab38 <_scanf_float+0x11c>
 800aa6e:	2b40      	cmp	r3, #64	; 0x40
 800aa70:	d83c      	bhi.n	800aaec <_scanf_float+0xd0>
 800aa72:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa76:	b2c8      	uxtb	r0, r1
 800aa78:	280e      	cmp	r0, #14
 800aa7a:	d93a      	bls.n	800aaf2 <_scanf_float+0xd6>
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	d003      	beq.n	800aa8a <_scanf_float+0x6e>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa8e:	f1ba 0f01 	cmp.w	sl, #1
 800aa92:	f200 8113 	bhi.w	800acbc <_scanf_float+0x2a0>
 800aa96:	455e      	cmp	r6, fp
 800aa98:	f200 8105 	bhi.w	800aca6 <_scanf_float+0x28a>
 800aa9c:	2501      	movs	r5, #1
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	b007      	add	sp, #28
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aaaa:	2a0d      	cmp	r2, #13
 800aaac:	d8e6      	bhi.n	800aa7c <_scanf_float+0x60>
 800aaae:	a101      	add	r1, pc, #4	; (adr r1, 800aab4 <_scanf_float+0x98>)
 800aab0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aab4:	0800abf3 	.word	0x0800abf3
 800aab8:	0800aa7d 	.word	0x0800aa7d
 800aabc:	0800aa7d 	.word	0x0800aa7d
 800aac0:	0800aa7d 	.word	0x0800aa7d
 800aac4:	0800ac53 	.word	0x0800ac53
 800aac8:	0800ac2b 	.word	0x0800ac2b
 800aacc:	0800aa7d 	.word	0x0800aa7d
 800aad0:	0800aa7d 	.word	0x0800aa7d
 800aad4:	0800ac01 	.word	0x0800ac01
 800aad8:	0800aa7d 	.word	0x0800aa7d
 800aadc:	0800aa7d 	.word	0x0800aa7d
 800aae0:	0800aa7d 	.word	0x0800aa7d
 800aae4:	0800aa7d 	.word	0x0800aa7d
 800aae8:	0800abb9 	.word	0x0800abb9
 800aaec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aaf0:	e7db      	b.n	800aaaa <_scanf_float+0x8e>
 800aaf2:	290e      	cmp	r1, #14
 800aaf4:	d8c2      	bhi.n	800aa7c <_scanf_float+0x60>
 800aaf6:	a001      	add	r0, pc, #4	; (adr r0, 800aafc <_scanf_float+0xe0>)
 800aaf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aafc:	0800abab 	.word	0x0800abab
 800ab00:	0800aa7d 	.word	0x0800aa7d
 800ab04:	0800abab 	.word	0x0800abab
 800ab08:	0800ac3f 	.word	0x0800ac3f
 800ab0c:	0800aa7d 	.word	0x0800aa7d
 800ab10:	0800ab59 	.word	0x0800ab59
 800ab14:	0800ab95 	.word	0x0800ab95
 800ab18:	0800ab95 	.word	0x0800ab95
 800ab1c:	0800ab95 	.word	0x0800ab95
 800ab20:	0800ab95 	.word	0x0800ab95
 800ab24:	0800ab95 	.word	0x0800ab95
 800ab28:	0800ab95 	.word	0x0800ab95
 800ab2c:	0800ab95 	.word	0x0800ab95
 800ab30:	0800ab95 	.word	0x0800ab95
 800ab34:	0800ab95 	.word	0x0800ab95
 800ab38:	2b6e      	cmp	r3, #110	; 0x6e
 800ab3a:	d809      	bhi.n	800ab50 <_scanf_float+0x134>
 800ab3c:	2b60      	cmp	r3, #96	; 0x60
 800ab3e:	d8b2      	bhi.n	800aaa6 <_scanf_float+0x8a>
 800ab40:	2b54      	cmp	r3, #84	; 0x54
 800ab42:	d077      	beq.n	800ac34 <_scanf_float+0x218>
 800ab44:	2b59      	cmp	r3, #89	; 0x59
 800ab46:	d199      	bne.n	800aa7c <_scanf_float+0x60>
 800ab48:	2d07      	cmp	r5, #7
 800ab4a:	d197      	bne.n	800aa7c <_scanf_float+0x60>
 800ab4c:	2508      	movs	r5, #8
 800ab4e:	e029      	b.n	800aba4 <_scanf_float+0x188>
 800ab50:	2b74      	cmp	r3, #116	; 0x74
 800ab52:	d06f      	beq.n	800ac34 <_scanf_float+0x218>
 800ab54:	2b79      	cmp	r3, #121	; 0x79
 800ab56:	e7f6      	b.n	800ab46 <_scanf_float+0x12a>
 800ab58:	6821      	ldr	r1, [r4, #0]
 800ab5a:	05c8      	lsls	r0, r1, #23
 800ab5c:	d51a      	bpl.n	800ab94 <_scanf_float+0x178>
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab64:	6021      	str	r1, [r4, #0]
 800ab66:	f109 0901 	add.w	r9, r9, #1
 800ab6a:	b11b      	cbz	r3, 800ab74 <_scanf_float+0x158>
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	3201      	adds	r2, #1
 800ab70:	9302      	str	r3, [sp, #8]
 800ab72:	60a2      	str	r2, [r4, #8]
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	3b01      	subs	r3, #1
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6923      	ldr	r3, [r4, #16]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3b01      	subs	r3, #1
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	607b      	str	r3, [r7, #4]
 800ab88:	f340 8084 	ble.w	800ac94 <_scanf_float+0x278>
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	603b      	str	r3, [r7, #0]
 800ab92:	e766      	b.n	800aa62 <_scanf_float+0x46>
 800ab94:	eb1a 0f05 	cmn.w	sl, r5
 800ab98:	f47f af70 	bne.w	800aa7c <_scanf_float+0x60>
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aba2:	6022      	str	r2, [r4, #0]
 800aba4:	f806 3b01 	strb.w	r3, [r6], #1
 800aba8:	e7e4      	b.n	800ab74 <_scanf_float+0x158>
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	0610      	lsls	r0, r2, #24
 800abae:	f57f af65 	bpl.w	800aa7c <_scanf_float+0x60>
 800abb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abb6:	e7f4      	b.n	800aba2 <_scanf_float+0x186>
 800abb8:	f1ba 0f00 	cmp.w	sl, #0
 800abbc:	d10e      	bne.n	800abdc <_scanf_float+0x1c0>
 800abbe:	f1b9 0f00 	cmp.w	r9, #0
 800abc2:	d10e      	bne.n	800abe2 <_scanf_float+0x1c6>
 800abc4:	6822      	ldr	r2, [r4, #0]
 800abc6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abce:	d108      	bne.n	800abe2 <_scanf_float+0x1c6>
 800abd0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	f04f 0a01 	mov.w	sl, #1
 800abda:	e7e3      	b.n	800aba4 <_scanf_float+0x188>
 800abdc:	f1ba 0f02 	cmp.w	sl, #2
 800abe0:	d055      	beq.n	800ac8e <_scanf_float+0x272>
 800abe2:	2d01      	cmp	r5, #1
 800abe4:	d002      	beq.n	800abec <_scanf_float+0x1d0>
 800abe6:	2d04      	cmp	r5, #4
 800abe8:	f47f af48 	bne.w	800aa7c <_scanf_float+0x60>
 800abec:	3501      	adds	r5, #1
 800abee:	b2ed      	uxtb	r5, r5
 800abf0:	e7d8      	b.n	800aba4 <_scanf_float+0x188>
 800abf2:	f1ba 0f01 	cmp.w	sl, #1
 800abf6:	f47f af41 	bne.w	800aa7c <_scanf_float+0x60>
 800abfa:	f04f 0a02 	mov.w	sl, #2
 800abfe:	e7d1      	b.n	800aba4 <_scanf_float+0x188>
 800ac00:	b97d      	cbnz	r5, 800ac22 <_scanf_float+0x206>
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	f47f af3c 	bne.w	800aa82 <_scanf_float+0x66>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac10:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac14:	f47f af39 	bne.w	800aa8a <_scanf_float+0x6e>
 800ac18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac1c:	6022      	str	r2, [r4, #0]
 800ac1e:	2501      	movs	r5, #1
 800ac20:	e7c0      	b.n	800aba4 <_scanf_float+0x188>
 800ac22:	2d03      	cmp	r5, #3
 800ac24:	d0e2      	beq.n	800abec <_scanf_float+0x1d0>
 800ac26:	2d05      	cmp	r5, #5
 800ac28:	e7de      	b.n	800abe8 <_scanf_float+0x1cc>
 800ac2a:	2d02      	cmp	r5, #2
 800ac2c:	f47f af26 	bne.w	800aa7c <_scanf_float+0x60>
 800ac30:	2503      	movs	r5, #3
 800ac32:	e7b7      	b.n	800aba4 <_scanf_float+0x188>
 800ac34:	2d06      	cmp	r5, #6
 800ac36:	f47f af21 	bne.w	800aa7c <_scanf_float+0x60>
 800ac3a:	2507      	movs	r5, #7
 800ac3c:	e7b2      	b.n	800aba4 <_scanf_float+0x188>
 800ac3e:	6822      	ldr	r2, [r4, #0]
 800ac40:	0591      	lsls	r1, r2, #22
 800ac42:	f57f af1b 	bpl.w	800aa7c <_scanf_float+0x60>
 800ac46:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac4a:	6022      	str	r2, [r4, #0]
 800ac4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac50:	e7a8      	b.n	800aba4 <_scanf_float+0x188>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac58:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac5c:	d006      	beq.n	800ac6c <_scanf_float+0x250>
 800ac5e:	0550      	lsls	r0, r2, #21
 800ac60:	f57f af0c 	bpl.w	800aa7c <_scanf_float+0x60>
 800ac64:	f1b9 0f00 	cmp.w	r9, #0
 800ac68:	f43f af0f 	beq.w	800aa8a <_scanf_float+0x6e>
 800ac6c:	0591      	lsls	r1, r2, #22
 800ac6e:	bf58      	it	pl
 800ac70:	9901      	ldrpl	r1, [sp, #4]
 800ac72:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac76:	bf58      	it	pl
 800ac78:	eba9 0101 	subpl.w	r1, r9, r1
 800ac7c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac80:	bf58      	it	pl
 800ac82:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac86:	6022      	str	r2, [r4, #0]
 800ac88:	f04f 0900 	mov.w	r9, #0
 800ac8c:	e78a      	b.n	800aba4 <_scanf_float+0x188>
 800ac8e:	f04f 0a03 	mov.w	sl, #3
 800ac92:	e787      	b.n	800aba4 <_scanf_float+0x188>
 800ac94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	4798      	blx	r3
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f aedf 	beq.w	800aa62 <_scanf_float+0x46>
 800aca4:	e6ea      	b.n	800aa7c <_scanf_float+0x60>
 800aca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acae:	463a      	mov	r2, r7
 800acb0:	4640      	mov	r0, r8
 800acb2:	4798      	blx	r3
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	6123      	str	r3, [r4, #16]
 800acba:	e6ec      	b.n	800aa96 <_scanf_float+0x7a>
 800acbc:	1e6b      	subs	r3, r5, #1
 800acbe:	2b06      	cmp	r3, #6
 800acc0:	d825      	bhi.n	800ad0e <_scanf_float+0x2f2>
 800acc2:	2d02      	cmp	r5, #2
 800acc4:	d836      	bhi.n	800ad34 <_scanf_float+0x318>
 800acc6:	455e      	cmp	r6, fp
 800acc8:	f67f aee8 	bls.w	800aa9c <_scanf_float+0x80>
 800accc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acd4:	463a      	mov	r2, r7
 800acd6:	4640      	mov	r0, r8
 800acd8:	4798      	blx	r3
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	3b01      	subs	r3, #1
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	e7f1      	b.n	800acc6 <_scanf_float+0x2aa>
 800ace2:	9802      	ldr	r0, [sp, #8]
 800ace4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ace8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800acec:	9002      	str	r0, [sp, #8]
 800acee:	463a      	mov	r2, r7
 800acf0:	4640      	mov	r0, r8
 800acf2:	4798      	blx	r3
 800acf4:	6923      	ldr	r3, [r4, #16]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800acfe:	fa5f fa8a 	uxtb.w	sl, sl
 800ad02:	f1ba 0f02 	cmp.w	sl, #2
 800ad06:	d1ec      	bne.n	800ace2 <_scanf_float+0x2c6>
 800ad08:	3d03      	subs	r5, #3
 800ad0a:	b2ed      	uxtb	r5, r5
 800ad0c:	1b76      	subs	r6, r6, r5
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	05da      	lsls	r2, r3, #23
 800ad12:	d52f      	bpl.n	800ad74 <_scanf_float+0x358>
 800ad14:	055b      	lsls	r3, r3, #21
 800ad16:	d510      	bpl.n	800ad3a <_scanf_float+0x31e>
 800ad18:	455e      	cmp	r6, fp
 800ad1a:	f67f aebf 	bls.w	800aa9c <_scanf_float+0x80>
 800ad1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad26:	463a      	mov	r2, r7
 800ad28:	4640      	mov	r0, r8
 800ad2a:	4798      	blx	r3
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	6123      	str	r3, [r4, #16]
 800ad32:	e7f1      	b.n	800ad18 <_scanf_float+0x2fc>
 800ad34:	46aa      	mov	sl, r5
 800ad36:	9602      	str	r6, [sp, #8]
 800ad38:	e7df      	b.n	800acfa <_scanf_float+0x2de>
 800ad3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	2965      	cmp	r1, #101	; 0x65
 800ad42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad46:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	d00c      	beq.n	800ad68 <_scanf_float+0x34c>
 800ad4e:	2945      	cmp	r1, #69	; 0x45
 800ad50:	d00a      	beq.n	800ad68 <_scanf_float+0x34c>
 800ad52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad56:	463a      	mov	r2, r7
 800ad58:	4640      	mov	r0, r8
 800ad5a:	4798      	blx	r3
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	1eb5      	subs	r5, r6, #2
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad6c:	463a      	mov	r2, r7
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4798      	blx	r3
 800ad72:	462e      	mov	r6, r5
 800ad74:	6825      	ldr	r5, [r4, #0]
 800ad76:	f015 0510 	ands.w	r5, r5, #16
 800ad7a:	d158      	bne.n	800ae2e <_scanf_float+0x412>
 800ad7c:	7035      	strb	r5, [r6, #0]
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad88:	d11c      	bne.n	800adc4 <_scanf_float+0x3a8>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	454b      	cmp	r3, r9
 800ad8e:	eba3 0209 	sub.w	r2, r3, r9
 800ad92:	d124      	bne.n	800adde <_scanf_float+0x3c2>
 800ad94:	2200      	movs	r2, #0
 800ad96:	4659      	mov	r1, fp
 800ad98:	4640      	mov	r0, r8
 800ad9a:	f000 ff2d 	bl	800bbf8 <_strtod_r>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	6821      	ldr	r1, [r4, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f011 0f02 	tst.w	r1, #2
 800ada8:	ec57 6b10 	vmov	r6, r7, d0
 800adac:	f103 0204 	add.w	r2, r3, #4
 800adb0:	d020      	beq.n	800adf4 <_scanf_float+0x3d8>
 800adb2:	9903      	ldr	r1, [sp, #12]
 800adb4:	600a      	str	r2, [r1, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	e9c3 6700 	strd	r6, r7, [r3]
 800adbc:	68e3      	ldr	r3, [r4, #12]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60e3      	str	r3, [r4, #12]
 800adc2:	e66c      	b.n	800aa9e <_scanf_float+0x82>
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d0e4      	beq.n	800ad94 <_scanf_float+0x378>
 800adca:	9905      	ldr	r1, [sp, #20]
 800adcc:	230a      	movs	r3, #10
 800adce:	462a      	mov	r2, r5
 800add0:	3101      	adds	r1, #1
 800add2:	4640      	mov	r0, r8
 800add4:	f000 ffa4 	bl	800bd20 <_strtol_r>
 800add8:	9b04      	ldr	r3, [sp, #16]
 800adda:	9e05      	ldr	r6, [sp, #20]
 800addc:	1ac2      	subs	r2, r0, r3
 800adde:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ade2:	429e      	cmp	r6, r3
 800ade4:	bf28      	it	cs
 800ade6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800adea:	4912      	ldr	r1, [pc, #72]	; (800ae34 <_scanf_float+0x418>)
 800adec:	4630      	mov	r0, r6
 800adee:	f000 f831 	bl	800ae54 <siprintf>
 800adf2:	e7cf      	b.n	800ad94 <_scanf_float+0x378>
 800adf4:	f011 0f04 	tst.w	r1, #4
 800adf8:	9903      	ldr	r1, [sp, #12]
 800adfa:	600a      	str	r2, [r1, #0]
 800adfc:	d1db      	bne.n	800adb6 <_scanf_float+0x39a>
 800adfe:	f8d3 8000 	ldr.w	r8, [r3]
 800ae02:	ee10 2a10 	vmov	r2, s0
 800ae06:	ee10 0a10 	vmov	r0, s0
 800ae0a:	463b      	mov	r3, r7
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	f7f5 fe8d 	bl	8000b2c <__aeabi_dcmpun>
 800ae12:	b128      	cbz	r0, 800ae20 <_scanf_float+0x404>
 800ae14:	4808      	ldr	r0, [pc, #32]	; (800ae38 <_scanf_float+0x41c>)
 800ae16:	f001 f8d3 	bl	800bfc0 <nanf>
 800ae1a:	ed88 0a00 	vstr	s0, [r8]
 800ae1e:	e7cd      	b.n	800adbc <_scanf_float+0x3a0>
 800ae20:	4630      	mov	r0, r6
 800ae22:	4639      	mov	r1, r7
 800ae24:	f7f5 fee0 	bl	8000be8 <__aeabi_d2f>
 800ae28:	f8c8 0000 	str.w	r0, [r8]
 800ae2c:	e7c6      	b.n	800adbc <_scanf_float+0x3a0>
 800ae2e:	2500      	movs	r5, #0
 800ae30:	e635      	b.n	800aa9e <_scanf_float+0x82>
 800ae32:	bf00      	nop
 800ae34:	0800fec4 	.word	0x0800fec4
 800ae38:	080100d5 	.word	0x080100d5

0800ae3c <__malloc_lock>:
 800ae3c:	4801      	ldr	r0, [pc, #4]	; (800ae44 <__malloc_lock+0x8>)
 800ae3e:	f001 b8a4 	b.w	800bf8a <__retarget_lock_acquire_recursive>
 800ae42:	bf00      	nop
 800ae44:	20004840 	.word	0x20004840

0800ae48 <__malloc_unlock>:
 800ae48:	4801      	ldr	r0, [pc, #4]	; (800ae50 <__malloc_unlock+0x8>)
 800ae4a:	f001 b89f 	b.w	800bf8c <__retarget_lock_release_recursive>
 800ae4e:	bf00      	nop
 800ae50:	20004840 	.word	0x20004840

0800ae54 <siprintf>:
 800ae54:	b40e      	push	{r1, r2, r3}
 800ae56:	b500      	push	{lr}
 800ae58:	b09c      	sub	sp, #112	; 0x70
 800ae5a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae5c:	9002      	str	r0, [sp, #8]
 800ae5e:	9006      	str	r0, [sp, #24]
 800ae60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae64:	4809      	ldr	r0, [pc, #36]	; (800ae8c <siprintf+0x38>)
 800ae66:	9107      	str	r1, [sp, #28]
 800ae68:	9104      	str	r1, [sp, #16]
 800ae6a:	4909      	ldr	r1, [pc, #36]	; (800ae90 <siprintf+0x3c>)
 800ae6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae70:	9105      	str	r1, [sp, #20]
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	a902      	add	r1, sp, #8
 800ae78:	f002 fb3e 	bl	800d4f8 <_svfiprintf_r>
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	b01c      	add	sp, #112	; 0x70
 800ae84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae88:	b003      	add	sp, #12
 800ae8a:	4770      	bx	lr
 800ae8c:	200005d8 	.word	0x200005d8
 800ae90:	ffff0208 	.word	0xffff0208

0800ae94 <std>:
 800ae94:	2300      	movs	r3, #0
 800ae96:	b510      	push	{r4, lr}
 800ae98:	4604      	mov	r4, r0
 800ae9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aea2:	6083      	str	r3, [r0, #8]
 800aea4:	8181      	strh	r1, [r0, #12]
 800aea6:	6643      	str	r3, [r0, #100]	; 0x64
 800aea8:	81c2      	strh	r2, [r0, #14]
 800aeaa:	6183      	str	r3, [r0, #24]
 800aeac:	4619      	mov	r1, r3
 800aeae:	2208      	movs	r2, #8
 800aeb0:	305c      	adds	r0, #92	; 0x5c
 800aeb2:	f000 ffcd 	bl	800be50 <memset>
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	; (800aeec <std+0x58>)
 800aeb8:	6263      	str	r3, [r4, #36]	; 0x24
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <std+0x5c>)
 800aebc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aebe:	4b0d      	ldr	r3, [pc, #52]	; (800aef4 <std+0x60>)
 800aec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <std+0x64>)
 800aec4:	6323      	str	r3, [r4, #48]	; 0x30
 800aec6:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <std+0x68>)
 800aec8:	6224      	str	r4, [r4, #32]
 800aeca:	429c      	cmp	r4, r3
 800aecc:	d006      	beq.n	800aedc <std+0x48>
 800aece:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aed2:	4294      	cmp	r4, r2
 800aed4:	d002      	beq.n	800aedc <std+0x48>
 800aed6:	33d0      	adds	r3, #208	; 0xd0
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d105      	bne.n	800aee8 <std+0x54>
 800aedc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee4:	f001 b850 	b.w	800bf88 <__retarget_lock_init_recursive>
 800aee8:	bd10      	pop	{r4, pc}
 800aeea:	bf00      	nop
 800aeec:	0800e1cf 	.word	0x0800e1cf
 800aef0:	0800e1f1 	.word	0x0800e1f1
 800aef4:	0800e229 	.word	0x0800e229
 800aef8:	0800e24d 	.word	0x0800e24d
 800aefc:	20004700 	.word	0x20004700

0800af00 <stdio_exit_handler>:
 800af00:	4a02      	ldr	r2, [pc, #8]	; (800af0c <stdio_exit_handler+0xc>)
 800af02:	4903      	ldr	r1, [pc, #12]	; (800af10 <stdio_exit_handler+0x10>)
 800af04:	4803      	ldr	r0, [pc, #12]	; (800af14 <stdio_exit_handler+0x14>)
 800af06:	f000 bf17 	b.w	800bd38 <_fwalk_sglue>
 800af0a:	bf00      	nop
 800af0c:	20000414 	.word	0x20000414
 800af10:	0800d825 	.word	0x0800d825
 800af14:	2000058c 	.word	0x2000058c

0800af18 <cleanup_stdio>:
 800af18:	6841      	ldr	r1, [r0, #4]
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <cleanup_stdio+0x34>)
 800af1c:	4299      	cmp	r1, r3
 800af1e:	b510      	push	{r4, lr}
 800af20:	4604      	mov	r4, r0
 800af22:	d001      	beq.n	800af28 <cleanup_stdio+0x10>
 800af24:	f002 fc7e 	bl	800d824 <_fflush_r>
 800af28:	68a1      	ldr	r1, [r4, #8]
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <cleanup_stdio+0x38>)
 800af2c:	4299      	cmp	r1, r3
 800af2e:	d002      	beq.n	800af36 <cleanup_stdio+0x1e>
 800af30:	4620      	mov	r0, r4
 800af32:	f002 fc77 	bl	800d824 <_fflush_r>
 800af36:	68e1      	ldr	r1, [r4, #12]
 800af38:	4b06      	ldr	r3, [pc, #24]	; (800af54 <cleanup_stdio+0x3c>)
 800af3a:	4299      	cmp	r1, r3
 800af3c:	d004      	beq.n	800af48 <cleanup_stdio+0x30>
 800af3e:	4620      	mov	r0, r4
 800af40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af44:	f002 bc6e 	b.w	800d824 <_fflush_r>
 800af48:	bd10      	pop	{r4, pc}
 800af4a:	bf00      	nop
 800af4c:	20004700 	.word	0x20004700
 800af50:	20004768 	.word	0x20004768
 800af54:	200047d0 	.word	0x200047d0

0800af58 <global_stdio_init.part.0>:
 800af58:	b510      	push	{r4, lr}
 800af5a:	4b0b      	ldr	r3, [pc, #44]	; (800af88 <global_stdio_init.part.0+0x30>)
 800af5c:	4c0b      	ldr	r4, [pc, #44]	; (800af8c <global_stdio_init.part.0+0x34>)
 800af5e:	4a0c      	ldr	r2, [pc, #48]	; (800af90 <global_stdio_init.part.0+0x38>)
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	4620      	mov	r0, r4
 800af64:	2200      	movs	r2, #0
 800af66:	2104      	movs	r1, #4
 800af68:	f7ff ff94 	bl	800ae94 <std>
 800af6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af70:	2201      	movs	r2, #1
 800af72:	2109      	movs	r1, #9
 800af74:	f7ff ff8e 	bl	800ae94 <std>
 800af78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af7c:	2202      	movs	r2, #2
 800af7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af82:	2112      	movs	r1, #18
 800af84:	f7ff bf86 	b.w	800ae94 <std>
 800af88:	20004838 	.word	0x20004838
 800af8c:	20004700 	.word	0x20004700
 800af90:	0800af01 	.word	0x0800af01

0800af94 <__sfp_lock_acquire>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__sfp_lock_acquire+0x8>)
 800af96:	f000 bff8 	b.w	800bf8a <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	20004841 	.word	0x20004841

0800afa0 <__sfp_lock_release>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sfp_lock_release+0x8>)
 800afa2:	f000 bff3 	b.w	800bf8c <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	20004841 	.word	0x20004841

0800afac <__sinit>:
 800afac:	b510      	push	{r4, lr}
 800afae:	4604      	mov	r4, r0
 800afb0:	f7ff fff0 	bl	800af94 <__sfp_lock_acquire>
 800afb4:	6a23      	ldr	r3, [r4, #32]
 800afb6:	b11b      	cbz	r3, 800afc0 <__sinit+0x14>
 800afb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afbc:	f7ff bff0 	b.w	800afa0 <__sfp_lock_release>
 800afc0:	4b04      	ldr	r3, [pc, #16]	; (800afd4 <__sinit+0x28>)
 800afc2:	6223      	str	r3, [r4, #32]
 800afc4:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <__sinit+0x2c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1f5      	bne.n	800afb8 <__sinit+0xc>
 800afcc:	f7ff ffc4 	bl	800af58 <global_stdio_init.part.0>
 800afd0:	e7f2      	b.n	800afb8 <__sinit+0xc>
 800afd2:	bf00      	nop
 800afd4:	0800af19 	.word	0x0800af19
 800afd8:	20004838 	.word	0x20004838

0800afdc <sulp>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4604      	mov	r4, r0
 800afe0:	460d      	mov	r5, r1
 800afe2:	ec45 4b10 	vmov	d0, r4, r5
 800afe6:	4616      	mov	r6, r2
 800afe8:	f002 ffb0 	bl	800df4c <__ulp>
 800afec:	ec51 0b10 	vmov	r0, r1, d0
 800aff0:	b17e      	cbz	r6, 800b012 <sulp+0x36>
 800aff2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aff6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800affa:	2b00      	cmp	r3, #0
 800affc:	dd09      	ble.n	800b012 <sulp+0x36>
 800affe:	051b      	lsls	r3, r3, #20
 800b000:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b004:	2400      	movs	r4, #0
 800b006:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b00a:	4622      	mov	r2, r4
 800b00c:	462b      	mov	r3, r5
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	0000      	movs	r0, r0
	...

0800b018 <_strtod_l>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ed2d 8b02 	vpush	{d8}
 800b020:	b09b      	sub	sp, #108	; 0x6c
 800b022:	4604      	mov	r4, r0
 800b024:	9213      	str	r2, [sp, #76]	; 0x4c
 800b026:	2200      	movs	r2, #0
 800b028:	9216      	str	r2, [sp, #88]	; 0x58
 800b02a:	460d      	mov	r5, r1
 800b02c:	f04f 0800 	mov.w	r8, #0
 800b030:	f04f 0900 	mov.w	r9, #0
 800b034:	460a      	mov	r2, r1
 800b036:	9215      	str	r2, [sp, #84]	; 0x54
 800b038:	7811      	ldrb	r1, [r2, #0]
 800b03a:	292b      	cmp	r1, #43	; 0x2b
 800b03c:	d04c      	beq.n	800b0d8 <_strtod_l+0xc0>
 800b03e:	d83a      	bhi.n	800b0b6 <_strtod_l+0x9e>
 800b040:	290d      	cmp	r1, #13
 800b042:	d834      	bhi.n	800b0ae <_strtod_l+0x96>
 800b044:	2908      	cmp	r1, #8
 800b046:	d834      	bhi.n	800b0b2 <_strtod_l+0x9a>
 800b048:	2900      	cmp	r1, #0
 800b04a:	d03d      	beq.n	800b0c8 <_strtod_l+0xb0>
 800b04c:	2200      	movs	r2, #0
 800b04e:	920a      	str	r2, [sp, #40]	; 0x28
 800b050:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b052:	7832      	ldrb	r2, [r6, #0]
 800b054:	2a30      	cmp	r2, #48	; 0x30
 800b056:	f040 80b4 	bne.w	800b1c2 <_strtod_l+0x1aa>
 800b05a:	7872      	ldrb	r2, [r6, #1]
 800b05c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b060:	2a58      	cmp	r2, #88	; 0x58
 800b062:	d170      	bne.n	800b146 <_strtod_l+0x12e>
 800b064:	9302      	str	r3, [sp, #8]
 800b066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	ab16      	add	r3, sp, #88	; 0x58
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	4a8e      	ldr	r2, [pc, #568]	; (800b2a8 <_strtod_l+0x290>)
 800b070:	ab17      	add	r3, sp, #92	; 0x5c
 800b072:	a915      	add	r1, sp, #84	; 0x54
 800b074:	4620      	mov	r0, r4
 800b076:	f001 fef5 	bl	800ce64 <__gethex>
 800b07a:	f010 070f 	ands.w	r7, r0, #15
 800b07e:	4605      	mov	r5, r0
 800b080:	d005      	beq.n	800b08e <_strtod_l+0x76>
 800b082:	2f06      	cmp	r7, #6
 800b084:	d12a      	bne.n	800b0dc <_strtod_l+0xc4>
 800b086:	3601      	adds	r6, #1
 800b088:	2300      	movs	r3, #0
 800b08a:	9615      	str	r6, [sp, #84]	; 0x54
 800b08c:	930a      	str	r3, [sp, #40]	; 0x28
 800b08e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b090:	2b00      	cmp	r3, #0
 800b092:	f040 857f 	bne.w	800bb94 <_strtod_l+0xb7c>
 800b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b098:	b1db      	cbz	r3, 800b0d2 <_strtod_l+0xba>
 800b09a:	4642      	mov	r2, r8
 800b09c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0a0:	ec43 2b10 	vmov	d0, r2, r3
 800b0a4:	b01b      	add	sp, #108	; 0x6c
 800b0a6:	ecbd 8b02 	vpop	{d8}
 800b0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ae:	2920      	cmp	r1, #32
 800b0b0:	d1cc      	bne.n	800b04c <_strtod_l+0x34>
 800b0b2:	3201      	adds	r2, #1
 800b0b4:	e7bf      	b.n	800b036 <_strtod_l+0x1e>
 800b0b6:	292d      	cmp	r1, #45	; 0x2d
 800b0b8:	d1c8      	bne.n	800b04c <_strtod_l+0x34>
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	910a      	str	r1, [sp, #40]	; 0x28
 800b0be:	1c51      	adds	r1, r2, #1
 800b0c0:	9115      	str	r1, [sp, #84]	; 0x54
 800b0c2:	7852      	ldrb	r2, [r2, #1]
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	d1c3      	bne.n	800b050 <_strtod_l+0x38>
 800b0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0ca:	9515      	str	r5, [sp, #84]	; 0x54
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f040 855f 	bne.w	800bb90 <_strtod_l+0xb78>
 800b0d2:	4642      	mov	r2, r8
 800b0d4:	464b      	mov	r3, r9
 800b0d6:	e7e3      	b.n	800b0a0 <_strtod_l+0x88>
 800b0d8:	2100      	movs	r1, #0
 800b0da:	e7ef      	b.n	800b0bc <_strtod_l+0xa4>
 800b0dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b0de:	b13a      	cbz	r2, 800b0f0 <_strtod_l+0xd8>
 800b0e0:	2135      	movs	r1, #53	; 0x35
 800b0e2:	a818      	add	r0, sp, #96	; 0x60
 800b0e4:	f003 f82f 	bl	800e146 <__copybits>
 800b0e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f002 fc02 	bl	800d8f4 <_Bfree>
 800b0f0:	3f01      	subs	r7, #1
 800b0f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0f4:	2f04      	cmp	r7, #4
 800b0f6:	d806      	bhi.n	800b106 <_strtod_l+0xee>
 800b0f8:	e8df f007 	tbb	[pc, r7]
 800b0fc:	201d0314 	.word	0x201d0314
 800b100:	14          	.byte	0x14
 800b101:	00          	.byte	0x00
 800b102:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b106:	05e9      	lsls	r1, r5, #23
 800b108:	bf48      	it	mi
 800b10a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b10e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b112:	0d1b      	lsrs	r3, r3, #20
 800b114:	051b      	lsls	r3, r3, #20
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1b9      	bne.n	800b08e <_strtod_l+0x76>
 800b11a:	f000 ff0b 	bl	800bf34 <__errno>
 800b11e:	2322      	movs	r3, #34	; 0x22
 800b120:	6003      	str	r3, [r0, #0]
 800b122:	e7b4      	b.n	800b08e <_strtod_l+0x76>
 800b124:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b128:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b12c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b130:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b134:	e7e7      	b.n	800b106 <_strtod_l+0xee>
 800b136:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b2b0 <_strtod_l+0x298>
 800b13a:	e7e4      	b.n	800b106 <_strtod_l+0xee>
 800b13c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b140:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b144:	e7df      	b.n	800b106 <_strtod_l+0xee>
 800b146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	9215      	str	r2, [sp, #84]	; 0x54
 800b14c:	785b      	ldrb	r3, [r3, #1]
 800b14e:	2b30      	cmp	r3, #48	; 0x30
 800b150:	d0f9      	beq.n	800b146 <_strtod_l+0x12e>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d09b      	beq.n	800b08e <_strtod_l+0x76>
 800b156:	2301      	movs	r3, #1
 800b158:	f04f 0a00 	mov.w	sl, #0
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b160:	930b      	str	r3, [sp, #44]	; 0x2c
 800b162:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b166:	46d3      	mov	fp, sl
 800b168:	220a      	movs	r2, #10
 800b16a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b16c:	7806      	ldrb	r6, [r0, #0]
 800b16e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b172:	b2d9      	uxtb	r1, r3
 800b174:	2909      	cmp	r1, #9
 800b176:	d926      	bls.n	800b1c6 <_strtod_l+0x1ae>
 800b178:	494c      	ldr	r1, [pc, #304]	; (800b2ac <_strtod_l+0x294>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	f000 fdfa 	bl	800bd74 <strncmp>
 800b180:	2800      	cmp	r0, #0
 800b182:	d030      	beq.n	800b1e6 <_strtod_l+0x1ce>
 800b184:	2000      	movs	r0, #0
 800b186:	4632      	mov	r2, r6
 800b188:	9005      	str	r0, [sp, #20]
 800b18a:	465e      	mov	r6, fp
 800b18c:	4603      	mov	r3, r0
 800b18e:	2a65      	cmp	r2, #101	; 0x65
 800b190:	d001      	beq.n	800b196 <_strtod_l+0x17e>
 800b192:	2a45      	cmp	r2, #69	; 0x45
 800b194:	d113      	bne.n	800b1be <_strtod_l+0x1a6>
 800b196:	b91e      	cbnz	r6, 800b1a0 <_strtod_l+0x188>
 800b198:	9a04      	ldr	r2, [sp, #16]
 800b19a:	4302      	orrs	r2, r0
 800b19c:	d094      	beq.n	800b0c8 <_strtod_l+0xb0>
 800b19e:	2600      	movs	r6, #0
 800b1a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b1a2:	1c6a      	adds	r2, r5, #1
 800b1a4:	9215      	str	r2, [sp, #84]	; 0x54
 800b1a6:	786a      	ldrb	r2, [r5, #1]
 800b1a8:	2a2b      	cmp	r2, #43	; 0x2b
 800b1aa:	d074      	beq.n	800b296 <_strtod_l+0x27e>
 800b1ac:	2a2d      	cmp	r2, #45	; 0x2d
 800b1ae:	d078      	beq.n	800b2a2 <_strtod_l+0x28a>
 800b1b0:	f04f 0c00 	mov.w	ip, #0
 800b1b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b1b8:	2909      	cmp	r1, #9
 800b1ba:	d97f      	bls.n	800b2bc <_strtod_l+0x2a4>
 800b1bc:	9515      	str	r5, [sp, #84]	; 0x54
 800b1be:	2700      	movs	r7, #0
 800b1c0:	e09e      	b.n	800b300 <_strtod_l+0x2e8>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e7c8      	b.n	800b158 <_strtod_l+0x140>
 800b1c6:	f1bb 0f08 	cmp.w	fp, #8
 800b1ca:	bfd8      	it	le
 800b1cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b1ce:	f100 0001 	add.w	r0, r0, #1
 800b1d2:	bfda      	itte	le
 800b1d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1d8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b1da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b1de:	f10b 0b01 	add.w	fp, fp, #1
 800b1e2:	9015      	str	r0, [sp, #84]	; 0x54
 800b1e4:	e7c1      	b.n	800b16a <_strtod_l+0x152>
 800b1e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	9215      	str	r2, [sp, #84]	; 0x54
 800b1ec:	785a      	ldrb	r2, [r3, #1]
 800b1ee:	f1bb 0f00 	cmp.w	fp, #0
 800b1f2:	d037      	beq.n	800b264 <_strtod_l+0x24c>
 800b1f4:	9005      	str	r0, [sp, #20]
 800b1f6:	465e      	mov	r6, fp
 800b1f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b1fc:	2b09      	cmp	r3, #9
 800b1fe:	d912      	bls.n	800b226 <_strtod_l+0x20e>
 800b200:	2301      	movs	r3, #1
 800b202:	e7c4      	b.n	800b18e <_strtod_l+0x176>
 800b204:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b206:	1c5a      	adds	r2, r3, #1
 800b208:	9215      	str	r2, [sp, #84]	; 0x54
 800b20a:	785a      	ldrb	r2, [r3, #1]
 800b20c:	3001      	adds	r0, #1
 800b20e:	2a30      	cmp	r2, #48	; 0x30
 800b210:	d0f8      	beq.n	800b204 <_strtod_l+0x1ec>
 800b212:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b216:	2b08      	cmp	r3, #8
 800b218:	f200 84c1 	bhi.w	800bb9e <_strtod_l+0xb86>
 800b21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b21e:	9005      	str	r0, [sp, #20]
 800b220:	2000      	movs	r0, #0
 800b222:	930b      	str	r3, [sp, #44]	; 0x2c
 800b224:	4606      	mov	r6, r0
 800b226:	3a30      	subs	r2, #48	; 0x30
 800b228:	f100 0301 	add.w	r3, r0, #1
 800b22c:	d014      	beq.n	800b258 <_strtod_l+0x240>
 800b22e:	9905      	ldr	r1, [sp, #20]
 800b230:	4419      	add	r1, r3
 800b232:	9105      	str	r1, [sp, #20]
 800b234:	4633      	mov	r3, r6
 800b236:	eb00 0c06 	add.w	ip, r0, r6
 800b23a:	210a      	movs	r1, #10
 800b23c:	4563      	cmp	r3, ip
 800b23e:	d113      	bne.n	800b268 <_strtod_l+0x250>
 800b240:	1833      	adds	r3, r6, r0
 800b242:	2b08      	cmp	r3, #8
 800b244:	f106 0601 	add.w	r6, r6, #1
 800b248:	4406      	add	r6, r0
 800b24a:	dc1a      	bgt.n	800b282 <_strtod_l+0x26a>
 800b24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b24e:	230a      	movs	r3, #10
 800b250:	fb03 2301 	mla	r3, r3, r1, r2
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
 800b256:	2300      	movs	r3, #0
 800b258:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b25a:	1c51      	adds	r1, r2, #1
 800b25c:	9115      	str	r1, [sp, #84]	; 0x54
 800b25e:	7852      	ldrb	r2, [r2, #1]
 800b260:	4618      	mov	r0, r3
 800b262:	e7c9      	b.n	800b1f8 <_strtod_l+0x1e0>
 800b264:	4658      	mov	r0, fp
 800b266:	e7d2      	b.n	800b20e <_strtod_l+0x1f6>
 800b268:	2b08      	cmp	r3, #8
 800b26a:	f103 0301 	add.w	r3, r3, #1
 800b26e:	dc03      	bgt.n	800b278 <_strtod_l+0x260>
 800b270:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b272:	434f      	muls	r7, r1
 800b274:	9709      	str	r7, [sp, #36]	; 0x24
 800b276:	e7e1      	b.n	800b23c <_strtod_l+0x224>
 800b278:	2b10      	cmp	r3, #16
 800b27a:	bfd8      	it	le
 800b27c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b280:	e7dc      	b.n	800b23c <_strtod_l+0x224>
 800b282:	2e10      	cmp	r6, #16
 800b284:	bfdc      	itt	le
 800b286:	230a      	movle	r3, #10
 800b288:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b28c:	e7e3      	b.n	800b256 <_strtod_l+0x23e>
 800b28e:	2300      	movs	r3, #0
 800b290:	9305      	str	r3, [sp, #20]
 800b292:	2301      	movs	r3, #1
 800b294:	e780      	b.n	800b198 <_strtod_l+0x180>
 800b296:	f04f 0c00 	mov.w	ip, #0
 800b29a:	1caa      	adds	r2, r5, #2
 800b29c:	9215      	str	r2, [sp, #84]	; 0x54
 800b29e:	78aa      	ldrb	r2, [r5, #2]
 800b2a0:	e788      	b.n	800b1b4 <_strtod_l+0x19c>
 800b2a2:	f04f 0c01 	mov.w	ip, #1
 800b2a6:	e7f8      	b.n	800b29a <_strtod_l+0x282>
 800b2a8:	0800fecc 	.word	0x0800fecc
 800b2ac:	0800fec9 	.word	0x0800fec9
 800b2b0:	7ff00000 	.word	0x7ff00000
 800b2b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2b6:	1c51      	adds	r1, r2, #1
 800b2b8:	9115      	str	r1, [sp, #84]	; 0x54
 800b2ba:	7852      	ldrb	r2, [r2, #1]
 800b2bc:	2a30      	cmp	r2, #48	; 0x30
 800b2be:	d0f9      	beq.n	800b2b4 <_strtod_l+0x29c>
 800b2c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b2c4:	2908      	cmp	r1, #8
 800b2c6:	f63f af7a 	bhi.w	800b1be <_strtod_l+0x1a6>
 800b2ca:	3a30      	subs	r2, #48	; 0x30
 800b2cc:	9208      	str	r2, [sp, #32]
 800b2ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2d0:	920c      	str	r2, [sp, #48]	; 0x30
 800b2d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2d4:	1c57      	adds	r7, r2, #1
 800b2d6:	9715      	str	r7, [sp, #84]	; 0x54
 800b2d8:	7852      	ldrb	r2, [r2, #1]
 800b2da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b2de:	f1be 0f09 	cmp.w	lr, #9
 800b2e2:	d938      	bls.n	800b356 <_strtod_l+0x33e>
 800b2e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2e6:	1a7f      	subs	r7, r7, r1
 800b2e8:	2f08      	cmp	r7, #8
 800b2ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b2ee:	dc03      	bgt.n	800b2f8 <_strtod_l+0x2e0>
 800b2f0:	9908      	ldr	r1, [sp, #32]
 800b2f2:	428f      	cmp	r7, r1
 800b2f4:	bfa8      	it	ge
 800b2f6:	460f      	movge	r7, r1
 800b2f8:	f1bc 0f00 	cmp.w	ip, #0
 800b2fc:	d000      	beq.n	800b300 <_strtod_l+0x2e8>
 800b2fe:	427f      	negs	r7, r7
 800b300:	2e00      	cmp	r6, #0
 800b302:	d14f      	bne.n	800b3a4 <_strtod_l+0x38c>
 800b304:	9904      	ldr	r1, [sp, #16]
 800b306:	4301      	orrs	r1, r0
 800b308:	f47f aec1 	bne.w	800b08e <_strtod_l+0x76>
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f47f aedb 	bne.w	800b0c8 <_strtod_l+0xb0>
 800b312:	2a69      	cmp	r2, #105	; 0x69
 800b314:	d029      	beq.n	800b36a <_strtod_l+0x352>
 800b316:	dc26      	bgt.n	800b366 <_strtod_l+0x34e>
 800b318:	2a49      	cmp	r2, #73	; 0x49
 800b31a:	d026      	beq.n	800b36a <_strtod_l+0x352>
 800b31c:	2a4e      	cmp	r2, #78	; 0x4e
 800b31e:	f47f aed3 	bne.w	800b0c8 <_strtod_l+0xb0>
 800b322:	499b      	ldr	r1, [pc, #620]	; (800b590 <_strtod_l+0x578>)
 800b324:	a815      	add	r0, sp, #84	; 0x54
 800b326:	f001 ffdd 	bl	800d2e4 <__match>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f aecc 	beq.w	800b0c8 <_strtod_l+0xb0>
 800b330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b28      	cmp	r3, #40	; 0x28
 800b336:	d12f      	bne.n	800b398 <_strtod_l+0x380>
 800b338:	4996      	ldr	r1, [pc, #600]	; (800b594 <_strtod_l+0x57c>)
 800b33a:	aa18      	add	r2, sp, #96	; 0x60
 800b33c:	a815      	add	r0, sp, #84	; 0x54
 800b33e:	f001 ffe5 	bl	800d30c <__hexnan>
 800b342:	2805      	cmp	r0, #5
 800b344:	d128      	bne.n	800b398 <_strtod_l+0x380>
 800b346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b34c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b350:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b354:	e69b      	b.n	800b08e <_strtod_l+0x76>
 800b356:	9f08      	ldr	r7, [sp, #32]
 800b358:	210a      	movs	r1, #10
 800b35a:	fb01 2107 	mla	r1, r1, r7, r2
 800b35e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b362:	9208      	str	r2, [sp, #32]
 800b364:	e7b5      	b.n	800b2d2 <_strtod_l+0x2ba>
 800b366:	2a6e      	cmp	r2, #110	; 0x6e
 800b368:	e7d9      	b.n	800b31e <_strtod_l+0x306>
 800b36a:	498b      	ldr	r1, [pc, #556]	; (800b598 <_strtod_l+0x580>)
 800b36c:	a815      	add	r0, sp, #84	; 0x54
 800b36e:	f001 ffb9 	bl	800d2e4 <__match>
 800b372:	2800      	cmp	r0, #0
 800b374:	f43f aea8 	beq.w	800b0c8 <_strtod_l+0xb0>
 800b378:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b37a:	4988      	ldr	r1, [pc, #544]	; (800b59c <_strtod_l+0x584>)
 800b37c:	3b01      	subs	r3, #1
 800b37e:	a815      	add	r0, sp, #84	; 0x54
 800b380:	9315      	str	r3, [sp, #84]	; 0x54
 800b382:	f001 ffaf 	bl	800d2e4 <__match>
 800b386:	b910      	cbnz	r0, 800b38e <_strtod_l+0x376>
 800b388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b38a:	3301      	adds	r3, #1
 800b38c:	9315      	str	r3, [sp, #84]	; 0x54
 800b38e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b5ac <_strtod_l+0x594>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	e67a      	b.n	800b08e <_strtod_l+0x76>
 800b398:	4881      	ldr	r0, [pc, #516]	; (800b5a0 <_strtod_l+0x588>)
 800b39a:	f000 fe09 	bl	800bfb0 <nan>
 800b39e:	ec59 8b10 	vmov	r8, r9, d0
 800b3a2:	e674      	b.n	800b08e <_strtod_l+0x76>
 800b3a4:	9b05      	ldr	r3, [sp, #20]
 800b3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3a8:	1afb      	subs	r3, r7, r3
 800b3aa:	f1bb 0f00 	cmp.w	fp, #0
 800b3ae:	bf08      	it	eq
 800b3b0:	46b3      	moveq	fp, r6
 800b3b2:	2e10      	cmp	r6, #16
 800b3b4:	9308      	str	r3, [sp, #32]
 800b3b6:	4635      	mov	r5, r6
 800b3b8:	bfa8      	it	ge
 800b3ba:	2510      	movge	r5, #16
 800b3bc:	f7f5 f8a2 	bl	8000504 <__aeabi_ui2d>
 800b3c0:	2e09      	cmp	r6, #9
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4689      	mov	r9, r1
 800b3c6:	dd13      	ble.n	800b3f0 <_strtod_l+0x3d8>
 800b3c8:	4b76      	ldr	r3, [pc, #472]	; (800b5a4 <_strtod_l+0x58c>)
 800b3ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b3ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3d2:	f7f5 f911 	bl	80005f8 <__aeabi_dmul>
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4689      	mov	r9, r1
 800b3dc:	f7f5 f892 	bl	8000504 <__aeabi_ui2d>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	f7f4 ff50 	bl	800028c <__adddf3>
 800b3ec:	4680      	mov	r8, r0
 800b3ee:	4689      	mov	r9, r1
 800b3f0:	2e0f      	cmp	r6, #15
 800b3f2:	dc38      	bgt.n	800b466 <_strtod_l+0x44e>
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f43f ae49 	beq.w	800b08e <_strtod_l+0x76>
 800b3fc:	dd24      	ble.n	800b448 <_strtod_l+0x430>
 800b3fe:	2b16      	cmp	r3, #22
 800b400:	dc0b      	bgt.n	800b41a <_strtod_l+0x402>
 800b402:	4968      	ldr	r1, [pc, #416]	; (800b5a4 <_strtod_l+0x58c>)
 800b404:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b40c:	4642      	mov	r2, r8
 800b40e:	464b      	mov	r3, r9
 800b410:	f7f5 f8f2 	bl	80005f8 <__aeabi_dmul>
 800b414:	4680      	mov	r8, r0
 800b416:	4689      	mov	r9, r1
 800b418:	e639      	b.n	800b08e <_strtod_l+0x76>
 800b41a:	9a08      	ldr	r2, [sp, #32]
 800b41c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b420:	4293      	cmp	r3, r2
 800b422:	db20      	blt.n	800b466 <_strtod_l+0x44e>
 800b424:	4c5f      	ldr	r4, [pc, #380]	; (800b5a4 <_strtod_l+0x58c>)
 800b426:	f1c6 060f 	rsb	r6, r6, #15
 800b42a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b42e:	4642      	mov	r2, r8
 800b430:	464b      	mov	r3, r9
 800b432:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	9b08      	ldr	r3, [sp, #32]
 800b43c:	1b9e      	subs	r6, r3, r6
 800b43e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b442:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b446:	e7e3      	b.n	800b410 <_strtod_l+0x3f8>
 800b448:	9b08      	ldr	r3, [sp, #32]
 800b44a:	3316      	adds	r3, #22
 800b44c:	db0b      	blt.n	800b466 <_strtod_l+0x44e>
 800b44e:	9b05      	ldr	r3, [sp, #20]
 800b450:	1bdf      	subs	r7, r3, r7
 800b452:	4b54      	ldr	r3, [pc, #336]	; (800b5a4 <_strtod_l+0x58c>)
 800b454:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b45c:	4640      	mov	r0, r8
 800b45e:	4649      	mov	r1, r9
 800b460:	f7f5 f9f4 	bl	800084c <__aeabi_ddiv>
 800b464:	e7d6      	b.n	800b414 <_strtod_l+0x3fc>
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	1b75      	subs	r5, r6, r5
 800b46a:	441d      	add	r5, r3
 800b46c:	2d00      	cmp	r5, #0
 800b46e:	dd70      	ble.n	800b552 <_strtod_l+0x53a>
 800b470:	f015 030f 	ands.w	r3, r5, #15
 800b474:	d00a      	beq.n	800b48c <_strtod_l+0x474>
 800b476:	494b      	ldr	r1, [pc, #300]	; (800b5a4 <_strtod_l+0x58c>)
 800b478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b47c:	4642      	mov	r2, r8
 800b47e:	464b      	mov	r3, r9
 800b480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b484:	f7f5 f8b8 	bl	80005f8 <__aeabi_dmul>
 800b488:	4680      	mov	r8, r0
 800b48a:	4689      	mov	r9, r1
 800b48c:	f035 050f 	bics.w	r5, r5, #15
 800b490:	d04d      	beq.n	800b52e <_strtod_l+0x516>
 800b492:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b496:	dd22      	ble.n	800b4de <_strtod_l+0x4c6>
 800b498:	2500      	movs	r5, #0
 800b49a:	46ab      	mov	fp, r5
 800b49c:	9509      	str	r5, [sp, #36]	; 0x24
 800b49e:	9505      	str	r5, [sp, #20]
 800b4a0:	2322      	movs	r3, #34	; 0x22
 800b4a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b5ac <_strtod_l+0x594>
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	f04f 0800 	mov.w	r8, #0
 800b4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f43f aded 	beq.w	800b08e <_strtod_l+0x76>
 800b4b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f002 fa1c 	bl	800d8f4 <_Bfree>
 800b4bc:	9905      	ldr	r1, [sp, #20]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f002 fa18 	bl	800d8f4 <_Bfree>
 800b4c4:	4659      	mov	r1, fp
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f002 fa14 	bl	800d8f4 <_Bfree>
 800b4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f002 fa10 	bl	800d8f4 <_Bfree>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f002 fa0c 	bl	800d8f4 <_Bfree>
 800b4dc:	e5d7      	b.n	800b08e <_strtod_l+0x76>
 800b4de:	4b32      	ldr	r3, [pc, #200]	; (800b5a8 <_strtod_l+0x590>)
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	112d      	asrs	r5, r5, #4
 800b4e6:	4640      	mov	r0, r8
 800b4e8:	4649      	mov	r1, r9
 800b4ea:	469a      	mov	sl, r3
 800b4ec:	2d01      	cmp	r5, #1
 800b4ee:	dc21      	bgt.n	800b534 <_strtod_l+0x51c>
 800b4f0:	b10b      	cbz	r3, 800b4f6 <_strtod_l+0x4de>
 800b4f2:	4680      	mov	r8, r0
 800b4f4:	4689      	mov	r9, r1
 800b4f6:	492c      	ldr	r1, [pc, #176]	; (800b5a8 <_strtod_l+0x590>)
 800b4f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b4fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b508:	f7f5 f876 	bl	80005f8 <__aeabi_dmul>
 800b50c:	4b27      	ldr	r3, [pc, #156]	; (800b5ac <_strtod_l+0x594>)
 800b50e:	460a      	mov	r2, r1
 800b510:	400b      	ands	r3, r1
 800b512:	4927      	ldr	r1, [pc, #156]	; (800b5b0 <_strtod_l+0x598>)
 800b514:	428b      	cmp	r3, r1
 800b516:	4680      	mov	r8, r0
 800b518:	d8be      	bhi.n	800b498 <_strtod_l+0x480>
 800b51a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b51e:	428b      	cmp	r3, r1
 800b520:	bf86      	itte	hi
 800b522:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b5b4 <_strtod_l+0x59c>
 800b526:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b52a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b52e:	2300      	movs	r3, #0
 800b530:	9304      	str	r3, [sp, #16]
 800b532:	e07b      	b.n	800b62c <_strtod_l+0x614>
 800b534:	07ea      	lsls	r2, r5, #31
 800b536:	d505      	bpl.n	800b544 <_strtod_l+0x52c>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	2301      	movs	r3, #1
 800b544:	9a04      	ldr	r2, [sp, #16]
 800b546:	3208      	adds	r2, #8
 800b548:	f10a 0a01 	add.w	sl, sl, #1
 800b54c:	106d      	asrs	r5, r5, #1
 800b54e:	9204      	str	r2, [sp, #16]
 800b550:	e7cc      	b.n	800b4ec <_strtod_l+0x4d4>
 800b552:	d0ec      	beq.n	800b52e <_strtod_l+0x516>
 800b554:	426d      	negs	r5, r5
 800b556:	f015 020f 	ands.w	r2, r5, #15
 800b55a:	d00a      	beq.n	800b572 <_strtod_l+0x55a>
 800b55c:	4b11      	ldr	r3, [pc, #68]	; (800b5a4 <_strtod_l+0x58c>)
 800b55e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b562:	4640      	mov	r0, r8
 800b564:	4649      	mov	r1, r9
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f7f5 f96f 	bl	800084c <__aeabi_ddiv>
 800b56e:	4680      	mov	r8, r0
 800b570:	4689      	mov	r9, r1
 800b572:	112d      	asrs	r5, r5, #4
 800b574:	d0db      	beq.n	800b52e <_strtod_l+0x516>
 800b576:	2d1f      	cmp	r5, #31
 800b578:	dd1e      	ble.n	800b5b8 <_strtod_l+0x5a0>
 800b57a:	2500      	movs	r5, #0
 800b57c:	46ab      	mov	fp, r5
 800b57e:	9509      	str	r5, [sp, #36]	; 0x24
 800b580:	9505      	str	r5, [sp, #20]
 800b582:	2322      	movs	r3, #34	; 0x22
 800b584:	f04f 0800 	mov.w	r8, #0
 800b588:	f04f 0900 	mov.w	r9, #0
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	e78d      	b.n	800b4ac <_strtod_l+0x494>
 800b590:	0800fe9d 	.word	0x0800fe9d
 800b594:	0800fee0 	.word	0x0800fee0
 800b598:	0800fe95 	.word	0x0800fe95
 800b59c:	080100d9 	.word	0x080100d9
 800b5a0:	080100d5 	.word	0x080100d5
 800b5a4:	08010240 	.word	0x08010240
 800b5a8:	08010218 	.word	0x08010218
 800b5ac:	7ff00000 	.word	0x7ff00000
 800b5b0:	7ca00000 	.word	0x7ca00000
 800b5b4:	7fefffff 	.word	0x7fefffff
 800b5b8:	f015 0310 	ands.w	r3, r5, #16
 800b5bc:	bf18      	it	ne
 800b5be:	236a      	movne	r3, #106	; 0x6a
 800b5c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b964 <_strtod_l+0x94c>
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4649      	mov	r1, r9
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	07ea      	lsls	r2, r5, #31
 800b5ce:	d504      	bpl.n	800b5da <_strtod_l+0x5c2>
 800b5d0:	e9da 2300 	ldrd	r2, r3, [sl]
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	106d      	asrs	r5, r5, #1
 800b5dc:	f10a 0a08 	add.w	sl, sl, #8
 800b5e0:	d1f4      	bne.n	800b5cc <_strtod_l+0x5b4>
 800b5e2:	b10b      	cbz	r3, 800b5e8 <_strtod_l+0x5d0>
 800b5e4:	4680      	mov	r8, r0
 800b5e6:	4689      	mov	r9, r1
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	b1bb      	cbz	r3, 800b61c <_strtod_l+0x604>
 800b5ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b5f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	dd10      	ble.n	800b61c <_strtod_l+0x604>
 800b5fa:	2b1f      	cmp	r3, #31
 800b5fc:	f340 811e 	ble.w	800b83c <_strtod_l+0x824>
 800b600:	2b34      	cmp	r3, #52	; 0x34
 800b602:	bfde      	ittt	le
 800b604:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b60c:	4093      	lslle	r3, r2
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	bfcc      	ite	gt
 800b614:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b618:	ea03 0901 	andle.w	r9, r3, r1
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	4640      	mov	r0, r8
 800b622:	4649      	mov	r1, r9
 800b624:	f7f5 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d1a6      	bne.n	800b57a <_strtod_l+0x562>
 800b62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b632:	4633      	mov	r3, r6
 800b634:	465a      	mov	r2, fp
 800b636:	4620      	mov	r0, r4
 800b638:	f002 f9c4 	bl	800d9c4 <__s2b>
 800b63c:	9009      	str	r0, [sp, #36]	; 0x24
 800b63e:	2800      	cmp	r0, #0
 800b640:	f43f af2a 	beq.w	800b498 <_strtod_l+0x480>
 800b644:	9a08      	ldr	r2, [sp, #32]
 800b646:	9b05      	ldr	r3, [sp, #20]
 800b648:	2a00      	cmp	r2, #0
 800b64a:	eba3 0307 	sub.w	r3, r3, r7
 800b64e:	bfa8      	it	ge
 800b650:	2300      	movge	r3, #0
 800b652:	930c      	str	r3, [sp, #48]	; 0x30
 800b654:	2500      	movs	r5, #0
 800b656:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b65a:	9312      	str	r3, [sp, #72]	; 0x48
 800b65c:	46ab      	mov	fp, r5
 800b65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b660:	4620      	mov	r0, r4
 800b662:	6859      	ldr	r1, [r3, #4]
 800b664:	f002 f906 	bl	800d874 <_Balloc>
 800b668:	9005      	str	r0, [sp, #20]
 800b66a:	2800      	cmp	r0, #0
 800b66c:	f43f af18 	beq.w	800b4a0 <_strtod_l+0x488>
 800b670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b672:	691a      	ldr	r2, [r3, #16]
 800b674:	3202      	adds	r2, #2
 800b676:	f103 010c 	add.w	r1, r3, #12
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	300c      	adds	r0, #12
 800b67e:	f000 fc86 	bl	800bf8e <memcpy>
 800b682:	ec49 8b10 	vmov	d0, r8, r9
 800b686:	aa18      	add	r2, sp, #96	; 0x60
 800b688:	a917      	add	r1, sp, #92	; 0x5c
 800b68a:	4620      	mov	r0, r4
 800b68c:	f002 fcce 	bl	800e02c <__d2b>
 800b690:	ec49 8b18 	vmov	d8, r8, r9
 800b694:	9016      	str	r0, [sp, #88]	; 0x58
 800b696:	2800      	cmp	r0, #0
 800b698:	f43f af02 	beq.w	800b4a0 <_strtod_l+0x488>
 800b69c:	2101      	movs	r1, #1
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f002 fa28 	bl	800daf4 <__i2b>
 800b6a4:	4683      	mov	fp, r0
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f43f aefa 	beq.w	800b4a0 <_strtod_l+0x488>
 800b6ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b6ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b6b0:	2e00      	cmp	r6, #0
 800b6b2:	bfab      	itete	ge
 800b6b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b6b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b6b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b6ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b6be:	bfac      	ite	ge
 800b6c0:	eb06 0a03 	addge.w	sl, r6, r3
 800b6c4:	1b9f      	sublt	r7, r3, r6
 800b6c6:	9b04      	ldr	r3, [sp, #16]
 800b6c8:	1af6      	subs	r6, r6, r3
 800b6ca:	4416      	add	r6, r2
 800b6cc:	4ba0      	ldr	r3, [pc, #640]	; (800b950 <_strtod_l+0x938>)
 800b6ce:	3e01      	subs	r6, #1
 800b6d0:	429e      	cmp	r6, r3
 800b6d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b6d6:	f280 80c4 	bge.w	800b862 <_strtod_l+0x84a>
 800b6da:	1b9b      	subs	r3, r3, r6
 800b6dc:	2b1f      	cmp	r3, #31
 800b6de:	eba2 0203 	sub.w	r2, r2, r3
 800b6e2:	f04f 0101 	mov.w	r1, #1
 800b6e6:	f300 80b0 	bgt.w	800b84a <_strtod_l+0x832>
 800b6ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ee:	930e      	str	r3, [sp, #56]	; 0x38
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f4:	eb0a 0602 	add.w	r6, sl, r2
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	45b2      	cmp	sl, r6
 800b6fc:	4417      	add	r7, r2
 800b6fe:	441f      	add	r7, r3
 800b700:	4653      	mov	r3, sl
 800b702:	bfa8      	it	ge
 800b704:	4633      	movge	r3, r6
 800b706:	42bb      	cmp	r3, r7
 800b708:	bfa8      	it	ge
 800b70a:	463b      	movge	r3, r7
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	bfc2      	ittt	gt
 800b710:	1af6      	subgt	r6, r6, r3
 800b712:	1aff      	subgt	r7, r7, r3
 800b714:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd17      	ble.n	800b74e <_strtod_l+0x736>
 800b71e:	4659      	mov	r1, fp
 800b720:	461a      	mov	r2, r3
 800b722:	4620      	mov	r0, r4
 800b724:	f002 faa6 	bl	800dc74 <__pow5mult>
 800b728:	4683      	mov	fp, r0
 800b72a:	2800      	cmp	r0, #0
 800b72c:	f43f aeb8 	beq.w	800b4a0 <_strtod_l+0x488>
 800b730:	4601      	mov	r1, r0
 800b732:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b734:	4620      	mov	r0, r4
 800b736:	f002 f9f3 	bl	800db20 <__multiply>
 800b73a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f aeaf 	beq.w	800b4a0 <_strtod_l+0x488>
 800b742:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b744:	4620      	mov	r0, r4
 800b746:	f002 f8d5 	bl	800d8f4 <_Bfree>
 800b74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b74c:	9316      	str	r3, [sp, #88]	; 0x58
 800b74e:	2e00      	cmp	r6, #0
 800b750:	f300 808c 	bgt.w	800b86c <_strtod_l+0x854>
 800b754:	9b08      	ldr	r3, [sp, #32]
 800b756:	2b00      	cmp	r3, #0
 800b758:	dd08      	ble.n	800b76c <_strtod_l+0x754>
 800b75a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b75c:	9905      	ldr	r1, [sp, #20]
 800b75e:	4620      	mov	r0, r4
 800b760:	f002 fa88 	bl	800dc74 <__pow5mult>
 800b764:	9005      	str	r0, [sp, #20]
 800b766:	2800      	cmp	r0, #0
 800b768:	f43f ae9a 	beq.w	800b4a0 <_strtod_l+0x488>
 800b76c:	2f00      	cmp	r7, #0
 800b76e:	dd08      	ble.n	800b782 <_strtod_l+0x76a>
 800b770:	9905      	ldr	r1, [sp, #20]
 800b772:	463a      	mov	r2, r7
 800b774:	4620      	mov	r0, r4
 800b776:	f002 fad7 	bl	800dd28 <__lshift>
 800b77a:	9005      	str	r0, [sp, #20]
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f43f ae8f 	beq.w	800b4a0 <_strtod_l+0x488>
 800b782:	f1ba 0f00 	cmp.w	sl, #0
 800b786:	dd08      	ble.n	800b79a <_strtod_l+0x782>
 800b788:	4659      	mov	r1, fp
 800b78a:	4652      	mov	r2, sl
 800b78c:	4620      	mov	r0, r4
 800b78e:	f002 facb 	bl	800dd28 <__lshift>
 800b792:	4683      	mov	fp, r0
 800b794:	2800      	cmp	r0, #0
 800b796:	f43f ae83 	beq.w	800b4a0 <_strtod_l+0x488>
 800b79a:	9a05      	ldr	r2, [sp, #20]
 800b79c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f002 fb4a 	bl	800de38 <__mdiff>
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f43f ae7a 	beq.w	800b4a0 <_strtod_l+0x488>
 800b7ac:	68c3      	ldr	r3, [r0, #12]
 800b7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60c3      	str	r3, [r0, #12]
 800b7b4:	4659      	mov	r1, fp
 800b7b6:	f002 fb23 	bl	800de00 <__mcmp>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	da60      	bge.n	800b880 <_strtod_l+0x868>
 800b7be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7c0:	ea53 0308 	orrs.w	r3, r3, r8
 800b7c4:	f040 8084 	bne.w	800b8d0 <_strtod_l+0x8b8>
 800b7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d17f      	bne.n	800b8d0 <_strtod_l+0x8b8>
 800b7d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7d4:	0d1b      	lsrs	r3, r3, #20
 800b7d6:	051b      	lsls	r3, r3, #20
 800b7d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b7dc:	d978      	bls.n	800b8d0 <_strtod_l+0x8b8>
 800b7de:	696b      	ldr	r3, [r5, #20]
 800b7e0:	b913      	cbnz	r3, 800b7e8 <_strtod_l+0x7d0>
 800b7e2:	692b      	ldr	r3, [r5, #16]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	dd73      	ble.n	800b8d0 <_strtod_l+0x8b8>
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f002 fa9b 	bl	800dd28 <__lshift>
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	f002 fb03 	bl	800de00 <__mcmp>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	dd68      	ble.n	800b8d0 <_strtod_l+0x8b8>
 800b7fe:	9904      	ldr	r1, [sp, #16]
 800b800:	4a54      	ldr	r2, [pc, #336]	; (800b954 <_strtod_l+0x93c>)
 800b802:	464b      	mov	r3, r9
 800b804:	2900      	cmp	r1, #0
 800b806:	f000 8084 	beq.w	800b912 <_strtod_l+0x8fa>
 800b80a:	ea02 0109 	and.w	r1, r2, r9
 800b80e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b812:	dc7e      	bgt.n	800b912 <_strtod_l+0x8fa>
 800b814:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b818:	f77f aeb3 	ble.w	800b582 <_strtod_l+0x56a>
 800b81c:	4b4e      	ldr	r3, [pc, #312]	; (800b958 <_strtod_l+0x940>)
 800b81e:	4640      	mov	r0, r8
 800b820:	4649      	mov	r1, r9
 800b822:	2200      	movs	r2, #0
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	4b4a      	ldr	r3, [pc, #296]	; (800b954 <_strtod_l+0x93c>)
 800b82a:	400b      	ands	r3, r1
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	2b00      	cmp	r3, #0
 800b832:	f47f ae3f 	bne.w	800b4b4 <_strtod_l+0x49c>
 800b836:	2322      	movs	r3, #34	; 0x22
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	e63b      	b.n	800b4b4 <_strtod_l+0x49c>
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b840:	fa02 f303 	lsl.w	r3, r2, r3
 800b844:	ea03 0808 	and.w	r8, r3, r8
 800b848:	e6e8      	b.n	800b61c <_strtod_l+0x604>
 800b84a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b84e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b852:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b856:	36e2      	adds	r6, #226	; 0xe2
 800b858:	fa01 f306 	lsl.w	r3, r1, r6
 800b85c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b860:	e748      	b.n	800b6f4 <_strtod_l+0x6dc>
 800b862:	2100      	movs	r1, #0
 800b864:	2301      	movs	r3, #1
 800b866:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b86a:	e743      	b.n	800b6f4 <_strtod_l+0x6dc>
 800b86c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b86e:	4632      	mov	r2, r6
 800b870:	4620      	mov	r0, r4
 800b872:	f002 fa59 	bl	800dd28 <__lshift>
 800b876:	9016      	str	r0, [sp, #88]	; 0x58
 800b878:	2800      	cmp	r0, #0
 800b87a:	f47f af6b 	bne.w	800b754 <_strtod_l+0x73c>
 800b87e:	e60f      	b.n	800b4a0 <_strtod_l+0x488>
 800b880:	46ca      	mov	sl, r9
 800b882:	d171      	bne.n	800b968 <_strtod_l+0x950>
 800b884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b88a:	b352      	cbz	r2, 800b8e2 <_strtod_l+0x8ca>
 800b88c:	4a33      	ldr	r2, [pc, #204]	; (800b95c <_strtod_l+0x944>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d12a      	bne.n	800b8e8 <_strtod_l+0x8d0>
 800b892:	9b04      	ldr	r3, [sp, #16]
 800b894:	4641      	mov	r1, r8
 800b896:	b1fb      	cbz	r3, 800b8d8 <_strtod_l+0x8c0>
 800b898:	4b2e      	ldr	r3, [pc, #184]	; (800b954 <_strtod_l+0x93c>)
 800b89a:	ea09 0303 	and.w	r3, r9, r3
 800b89e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8a6:	d81a      	bhi.n	800b8de <_strtod_l+0x8c6>
 800b8a8:	0d1b      	lsrs	r3, r3, #20
 800b8aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	d118      	bne.n	800b8e8 <_strtod_l+0x8d0>
 800b8b6:	4b2a      	ldr	r3, [pc, #168]	; (800b960 <_strtod_l+0x948>)
 800b8b8:	459a      	cmp	sl, r3
 800b8ba:	d102      	bne.n	800b8c2 <_strtod_l+0x8aa>
 800b8bc:	3101      	adds	r1, #1
 800b8be:	f43f adef 	beq.w	800b4a0 <_strtod_l+0x488>
 800b8c2:	4b24      	ldr	r3, [pc, #144]	; (800b954 <_strtod_l+0x93c>)
 800b8c4:	ea0a 0303 	and.w	r3, sl, r3
 800b8c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b8cc:	f04f 0800 	mov.w	r8, #0
 800b8d0:	9b04      	ldr	r3, [sp, #16]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1a2      	bne.n	800b81c <_strtod_l+0x804>
 800b8d6:	e5ed      	b.n	800b4b4 <_strtod_l+0x49c>
 800b8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8dc:	e7e9      	b.n	800b8b2 <_strtod_l+0x89a>
 800b8de:	4613      	mov	r3, r2
 800b8e0:	e7e7      	b.n	800b8b2 <_strtod_l+0x89a>
 800b8e2:	ea53 0308 	orrs.w	r3, r3, r8
 800b8e6:	d08a      	beq.n	800b7fe <_strtod_l+0x7e6>
 800b8e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ea:	b1e3      	cbz	r3, 800b926 <_strtod_l+0x90e>
 800b8ec:	ea13 0f0a 	tst.w	r3, sl
 800b8f0:	d0ee      	beq.n	800b8d0 <_strtod_l+0x8b8>
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f4:	9a04      	ldr	r2, [sp, #16]
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	b1c3      	cbz	r3, 800b92e <_strtod_l+0x916>
 800b8fc:	f7ff fb6e 	bl	800afdc <sulp>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	ec51 0b18 	vmov	r0, r1, d8
 800b908:	f7f4 fcc0 	bl	800028c <__adddf3>
 800b90c:	4680      	mov	r8, r0
 800b90e:	4689      	mov	r9, r1
 800b910:	e7de      	b.n	800b8d0 <_strtod_l+0x8b8>
 800b912:	4013      	ands	r3, r2
 800b914:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b918:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b91c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b920:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b924:	e7d4      	b.n	800b8d0 <_strtod_l+0x8b8>
 800b926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b928:	ea13 0f08 	tst.w	r3, r8
 800b92c:	e7e0      	b.n	800b8f0 <_strtod_l+0x8d8>
 800b92e:	f7ff fb55 	bl	800afdc <sulp>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	ec51 0b18 	vmov	r0, r1, d8
 800b93a:	f7f4 fca5 	bl	8000288 <__aeabi_dsub>
 800b93e:	2200      	movs	r2, #0
 800b940:	2300      	movs	r3, #0
 800b942:	4680      	mov	r8, r0
 800b944:	4689      	mov	r9, r1
 800b946:	f7f5 f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0c0      	beq.n	800b8d0 <_strtod_l+0x8b8>
 800b94e:	e618      	b.n	800b582 <_strtod_l+0x56a>
 800b950:	fffffc02 	.word	0xfffffc02
 800b954:	7ff00000 	.word	0x7ff00000
 800b958:	39500000 	.word	0x39500000
 800b95c:	000fffff 	.word	0x000fffff
 800b960:	7fefffff 	.word	0x7fefffff
 800b964:	0800fef8 	.word	0x0800fef8
 800b968:	4659      	mov	r1, fp
 800b96a:	4628      	mov	r0, r5
 800b96c:	f002 fbb8 	bl	800e0e0 <__ratio>
 800b970:	ec57 6b10 	vmov	r6, r7, d0
 800b974:	ee10 0a10 	vmov	r0, s0
 800b978:	2200      	movs	r2, #0
 800b97a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b97e:	4639      	mov	r1, r7
 800b980:	f7f5 f8b6 	bl	8000af0 <__aeabi_dcmple>
 800b984:	2800      	cmp	r0, #0
 800b986:	d071      	beq.n	800ba6c <_strtod_l+0xa54>
 800b988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d17c      	bne.n	800ba88 <_strtod_l+0xa70>
 800b98e:	f1b8 0f00 	cmp.w	r8, #0
 800b992:	d15a      	bne.n	800ba4a <_strtod_l+0xa32>
 800b994:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d15d      	bne.n	800ba58 <_strtod_l+0xa40>
 800b99c:	4b90      	ldr	r3, [pc, #576]	; (800bbe0 <_strtod_l+0xbc8>)
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	f7f5 f89a 	bl	8000adc <__aeabi_dcmplt>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d15c      	bne.n	800ba66 <_strtod_l+0xa4e>
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	4639      	mov	r1, r7
 800b9b0:	4b8c      	ldr	r3, [pc, #560]	; (800bbe4 <_strtod_l+0xbcc>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f7f4 fe20 	bl	80005f8 <__aeabi_dmul>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	460f      	mov	r7, r1
 800b9bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b9c0:	9606      	str	r6, [sp, #24]
 800b9c2:	9307      	str	r3, [sp, #28]
 800b9c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b9cc:	4b86      	ldr	r3, [pc, #536]	; (800bbe8 <_strtod_l+0xbd0>)
 800b9ce:	ea0a 0303 	and.w	r3, sl, r3
 800b9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b9d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9d6:	4b85      	ldr	r3, [pc, #532]	; (800bbec <_strtod_l+0xbd4>)
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	f040 8090 	bne.w	800bafe <_strtod_l+0xae6>
 800b9de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b9e2:	ec49 8b10 	vmov	d0, r8, r9
 800b9e6:	f002 fab1 	bl	800df4c <__ulp>
 800b9ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9ee:	ec51 0b10 	vmov	r0, r1, d0
 800b9f2:	f7f4 fe01 	bl	80005f8 <__aeabi_dmul>
 800b9f6:	4642      	mov	r2, r8
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	f7f4 fc47 	bl	800028c <__adddf3>
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4979      	ldr	r1, [pc, #484]	; (800bbe8 <_strtod_l+0xbd0>)
 800ba02:	4a7b      	ldr	r2, [pc, #492]	; (800bbf0 <_strtod_l+0xbd8>)
 800ba04:	4019      	ands	r1, r3
 800ba06:	4291      	cmp	r1, r2
 800ba08:	4680      	mov	r8, r0
 800ba0a:	d944      	bls.n	800ba96 <_strtod_l+0xa7e>
 800ba0c:	ee18 2a90 	vmov	r2, s17
 800ba10:	4b78      	ldr	r3, [pc, #480]	; (800bbf4 <_strtod_l+0xbdc>)
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d104      	bne.n	800ba20 <_strtod_l+0xa08>
 800ba16:	ee18 3a10 	vmov	r3, s16
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	f43f ad40 	beq.w	800b4a0 <_strtod_l+0x488>
 800ba20:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bbf4 <_strtod_l+0xbdc>
 800ba24:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ba28:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f001 ff62 	bl	800d8f4 <_Bfree>
 800ba30:	9905      	ldr	r1, [sp, #20]
 800ba32:	4620      	mov	r0, r4
 800ba34:	f001 ff5e 	bl	800d8f4 <_Bfree>
 800ba38:	4659      	mov	r1, fp
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f001 ff5a 	bl	800d8f4 <_Bfree>
 800ba40:	4629      	mov	r1, r5
 800ba42:	4620      	mov	r0, r4
 800ba44:	f001 ff56 	bl	800d8f4 <_Bfree>
 800ba48:	e609      	b.n	800b65e <_strtod_l+0x646>
 800ba4a:	f1b8 0f01 	cmp.w	r8, #1
 800ba4e:	d103      	bne.n	800ba58 <_strtod_l+0xa40>
 800ba50:	f1b9 0f00 	cmp.w	r9, #0
 800ba54:	f43f ad95 	beq.w	800b582 <_strtod_l+0x56a>
 800ba58:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bbb0 <_strtod_l+0xb98>
 800ba5c:	4f60      	ldr	r7, [pc, #384]	; (800bbe0 <_strtod_l+0xbc8>)
 800ba5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba62:	2600      	movs	r6, #0
 800ba64:	e7ae      	b.n	800b9c4 <_strtod_l+0x9ac>
 800ba66:	4f5f      	ldr	r7, [pc, #380]	; (800bbe4 <_strtod_l+0xbcc>)
 800ba68:	2600      	movs	r6, #0
 800ba6a:	e7a7      	b.n	800b9bc <_strtod_l+0x9a4>
 800ba6c:	4b5d      	ldr	r3, [pc, #372]	; (800bbe4 <_strtod_l+0xbcc>)
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	2200      	movs	r2, #0
 800ba74:	f7f4 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ba78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d09c      	beq.n	800b9bc <_strtod_l+0x9a4>
 800ba82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ba86:	e79d      	b.n	800b9c4 <_strtod_l+0x9ac>
 800ba88:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bbb8 <_strtod_l+0xba0>
 800ba8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba90:	ec57 6b17 	vmov	r6, r7, d7
 800ba94:	e796      	b.n	800b9c4 <_strtod_l+0x9ac>
 800ba96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ba9a:	9b04      	ldr	r3, [sp, #16]
 800ba9c:	46ca      	mov	sl, r9
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1c2      	bne.n	800ba28 <_strtod_l+0xa10>
 800baa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800baa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800baa8:	0d1b      	lsrs	r3, r3, #20
 800baaa:	051b      	lsls	r3, r3, #20
 800baac:	429a      	cmp	r2, r3
 800baae:	d1bb      	bne.n	800ba28 <_strtod_l+0xa10>
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f5 f900 	bl	8000cb8 <__aeabi_d2lz>
 800bab8:	f7f4 fd70 	bl	800059c <__aeabi_l2d>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4630      	mov	r0, r6
 800bac2:	4639      	mov	r1, r7
 800bac4:	f7f4 fbe0 	bl	8000288 <__aeabi_dsub>
 800bac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800baca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bace:	ea43 0308 	orr.w	r3, r3, r8
 800bad2:	4313      	orrs	r3, r2
 800bad4:	4606      	mov	r6, r0
 800bad6:	460f      	mov	r7, r1
 800bad8:	d054      	beq.n	800bb84 <_strtod_l+0xb6c>
 800bada:	a339      	add	r3, pc, #228	; (adr r3, 800bbc0 <_strtod_l+0xba8>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fffc 	bl	8000adc <__aeabi_dcmplt>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f47f ace5 	bne.w	800b4b4 <_strtod_l+0x49c>
 800baea:	a337      	add	r3, pc, #220	; (adr r3, 800bbc8 <_strtod_l+0xbb0>)
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	4630      	mov	r0, r6
 800baf2:	4639      	mov	r1, r7
 800baf4:	f7f5 f810 	bl	8000b18 <__aeabi_dcmpgt>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d095      	beq.n	800ba28 <_strtod_l+0xa10>
 800bafc:	e4da      	b.n	800b4b4 <_strtod_l+0x49c>
 800bafe:	9b04      	ldr	r3, [sp, #16]
 800bb00:	b333      	cbz	r3, 800bb50 <_strtod_l+0xb38>
 800bb02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb08:	d822      	bhi.n	800bb50 <_strtod_l+0xb38>
 800bb0a:	a331      	add	r3, pc, #196	; (adr r3, 800bbd0 <_strtod_l+0xbb8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	4630      	mov	r0, r6
 800bb12:	4639      	mov	r1, r7
 800bb14:	f7f4 ffec 	bl	8000af0 <__aeabi_dcmple>
 800bb18:	b1a0      	cbz	r0, 800bb44 <_strtod_l+0xb2c>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7f5 f843 	bl	8000ba8 <__aeabi_d2uiz>
 800bb22:	2801      	cmp	r0, #1
 800bb24:	bf38      	it	cc
 800bb26:	2001      	movcc	r0, #1
 800bb28:	f7f4 fcec 	bl	8000504 <__aeabi_ui2d>
 800bb2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460f      	mov	r7, r1
 800bb32:	bb23      	cbnz	r3, 800bb7e <_strtod_l+0xb66>
 800bb34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb38:	9010      	str	r0, [sp, #64]	; 0x40
 800bb3a:	9311      	str	r3, [sp, #68]	; 0x44
 800bb3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bb44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb54:	eeb0 0a48 	vmov.f32	s0, s16
 800bb58:	eef0 0a68 	vmov.f32	s1, s17
 800bb5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb60:	f002 f9f4 	bl	800df4c <__ulp>
 800bb64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb68:	ec53 2b10 	vmov	r2, r3, d0
 800bb6c:	f7f4 fd44 	bl	80005f8 <__aeabi_dmul>
 800bb70:	ec53 2b18 	vmov	r2, r3, d8
 800bb74:	f7f4 fb8a 	bl	800028c <__adddf3>
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4689      	mov	r9, r1
 800bb7c:	e78d      	b.n	800ba9a <_strtod_l+0xa82>
 800bb7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bb82:	e7db      	b.n	800bb3c <_strtod_l+0xb24>
 800bb84:	a314      	add	r3, pc, #80	; (adr r3, 800bbd8 <_strtod_l+0xbc0>)
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f7f4 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800bb8e:	e7b3      	b.n	800baf8 <_strtod_l+0xae0>
 800bb90:	2300      	movs	r3, #0
 800bb92:	930a      	str	r3, [sp, #40]	; 0x28
 800bb94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb98:	6013      	str	r3, [r2, #0]
 800bb9a:	f7ff ba7c 	b.w	800b096 <_strtod_l+0x7e>
 800bb9e:	2a65      	cmp	r2, #101	; 0x65
 800bba0:	f43f ab75 	beq.w	800b28e <_strtod_l+0x276>
 800bba4:	2a45      	cmp	r2, #69	; 0x45
 800bba6:	f43f ab72 	beq.w	800b28e <_strtod_l+0x276>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	f7ff bbaa 	b.w	800b304 <_strtod_l+0x2ec>
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	bff00000 	.word	0xbff00000
 800bbb8:	00000000 	.word	0x00000000
 800bbbc:	3ff00000 	.word	0x3ff00000
 800bbc0:	94a03595 	.word	0x94a03595
 800bbc4:	3fdfffff 	.word	0x3fdfffff
 800bbc8:	35afe535 	.word	0x35afe535
 800bbcc:	3fe00000 	.word	0x3fe00000
 800bbd0:	ffc00000 	.word	0xffc00000
 800bbd4:	41dfffff 	.word	0x41dfffff
 800bbd8:	94a03595 	.word	0x94a03595
 800bbdc:	3fcfffff 	.word	0x3fcfffff
 800bbe0:	3ff00000 	.word	0x3ff00000
 800bbe4:	3fe00000 	.word	0x3fe00000
 800bbe8:	7ff00000 	.word	0x7ff00000
 800bbec:	7fe00000 	.word	0x7fe00000
 800bbf0:	7c9fffff 	.word	0x7c9fffff
 800bbf4:	7fefffff 	.word	0x7fefffff

0800bbf8 <_strtod_r>:
 800bbf8:	4b01      	ldr	r3, [pc, #4]	; (800bc00 <_strtod_r+0x8>)
 800bbfa:	f7ff ba0d 	b.w	800b018 <_strtod_l>
 800bbfe:	bf00      	nop
 800bc00:	20000420 	.word	0x20000420

0800bc04 <strtod>:
 800bc04:	460a      	mov	r2, r1
 800bc06:	4601      	mov	r1, r0
 800bc08:	4802      	ldr	r0, [pc, #8]	; (800bc14 <strtod+0x10>)
 800bc0a:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <strtod+0x14>)
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f7ff ba03 	b.w	800b018 <_strtod_l>
 800bc12:	bf00      	nop
 800bc14:	200005d8 	.word	0x200005d8
 800bc18:	20000420 	.word	0x20000420

0800bc1c <_strtol_l.constprop.0>:
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc22:	d001      	beq.n	800bc28 <_strtol_l.constprop.0+0xc>
 800bc24:	2b24      	cmp	r3, #36	; 0x24
 800bc26:	d906      	bls.n	800bc36 <_strtol_l.constprop.0+0x1a>
 800bc28:	f000 f984 	bl	800bf34 <__errno>
 800bc2c:	2316      	movs	r3, #22
 800bc2e:	6003      	str	r3, [r0, #0]
 800bc30:	2000      	movs	r0, #0
 800bc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd1c <_strtol_l.constprop.0+0x100>
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	462e      	mov	r6, r5
 800bc3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bc46:	f017 0708 	ands.w	r7, r7, #8
 800bc4a:	d1f7      	bne.n	800bc3c <_strtol_l.constprop.0+0x20>
 800bc4c:	2c2d      	cmp	r4, #45	; 0x2d
 800bc4e:	d132      	bne.n	800bcb6 <_strtol_l.constprop.0+0x9a>
 800bc50:	782c      	ldrb	r4, [r5, #0]
 800bc52:	2701      	movs	r7, #1
 800bc54:	1cb5      	adds	r5, r6, #2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d05b      	beq.n	800bd12 <_strtol_l.constprop.0+0xf6>
 800bc5a:	2b10      	cmp	r3, #16
 800bc5c:	d109      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bc5e:	2c30      	cmp	r4, #48	; 0x30
 800bc60:	d107      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bc62:	782c      	ldrb	r4, [r5, #0]
 800bc64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bc68:	2c58      	cmp	r4, #88	; 0x58
 800bc6a:	d14d      	bne.n	800bd08 <_strtol_l.constprop.0+0xec>
 800bc6c:	786c      	ldrb	r4, [r5, #1]
 800bc6e:	2310      	movs	r3, #16
 800bc70:	3502      	adds	r5, #2
 800bc72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bc76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bc7a:	f04f 0e00 	mov.w	lr, #0
 800bc7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800bc82:	4676      	mov	r6, lr
 800bc84:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc8c:	f1bc 0f09 	cmp.w	ip, #9
 800bc90:	d816      	bhi.n	800bcc0 <_strtol_l.constprop.0+0xa4>
 800bc92:	4664      	mov	r4, ip
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	dd24      	ble.n	800bce2 <_strtol_l.constprop.0+0xc6>
 800bc98:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bc9c:	d008      	beq.n	800bcb0 <_strtol_l.constprop.0+0x94>
 800bc9e:	45b1      	cmp	r9, r6
 800bca0:	d31c      	bcc.n	800bcdc <_strtol_l.constprop.0+0xc0>
 800bca2:	d101      	bne.n	800bca8 <_strtol_l.constprop.0+0x8c>
 800bca4:	45a2      	cmp	sl, r4
 800bca6:	db19      	blt.n	800bcdc <_strtol_l.constprop.0+0xc0>
 800bca8:	fb06 4603 	mla	r6, r6, r3, r4
 800bcac:	f04f 0e01 	mov.w	lr, #1
 800bcb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcb4:	e7e8      	b.n	800bc88 <_strtol_l.constprop.0+0x6c>
 800bcb6:	2c2b      	cmp	r4, #43	; 0x2b
 800bcb8:	bf04      	itt	eq
 800bcba:	782c      	ldrbeq	r4, [r5, #0]
 800bcbc:	1cb5      	addeq	r5, r6, #2
 800bcbe:	e7ca      	b.n	800bc56 <_strtol_l.constprop.0+0x3a>
 800bcc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bcc4:	f1bc 0f19 	cmp.w	ip, #25
 800bcc8:	d801      	bhi.n	800bcce <_strtol_l.constprop.0+0xb2>
 800bcca:	3c37      	subs	r4, #55	; 0x37
 800bccc:	e7e2      	b.n	800bc94 <_strtol_l.constprop.0+0x78>
 800bcce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bcd2:	f1bc 0f19 	cmp.w	ip, #25
 800bcd6:	d804      	bhi.n	800bce2 <_strtol_l.constprop.0+0xc6>
 800bcd8:	3c57      	subs	r4, #87	; 0x57
 800bcda:	e7db      	b.n	800bc94 <_strtol_l.constprop.0+0x78>
 800bcdc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bce0:	e7e6      	b.n	800bcb0 <_strtol_l.constprop.0+0x94>
 800bce2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bce6:	d105      	bne.n	800bcf4 <_strtol_l.constprop.0+0xd8>
 800bce8:	2322      	movs	r3, #34	; 0x22
 800bcea:	6003      	str	r3, [r0, #0]
 800bcec:	4646      	mov	r6, r8
 800bcee:	b942      	cbnz	r2, 800bd02 <_strtol_l.constprop.0+0xe6>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	e79e      	b.n	800bc32 <_strtol_l.constprop.0+0x16>
 800bcf4:	b107      	cbz	r7, 800bcf8 <_strtol_l.constprop.0+0xdc>
 800bcf6:	4276      	negs	r6, r6
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	d0f9      	beq.n	800bcf0 <_strtol_l.constprop.0+0xd4>
 800bcfc:	f1be 0f00 	cmp.w	lr, #0
 800bd00:	d000      	beq.n	800bd04 <_strtol_l.constprop.0+0xe8>
 800bd02:	1e69      	subs	r1, r5, #1
 800bd04:	6011      	str	r1, [r2, #0]
 800bd06:	e7f3      	b.n	800bcf0 <_strtol_l.constprop.0+0xd4>
 800bd08:	2430      	movs	r4, #48	; 0x30
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1b1      	bne.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd0e:	2308      	movs	r3, #8
 800bd10:	e7af      	b.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd12:	2c30      	cmp	r4, #48	; 0x30
 800bd14:	d0a5      	beq.n	800bc62 <_strtol_l.constprop.0+0x46>
 800bd16:	230a      	movs	r3, #10
 800bd18:	e7ab      	b.n	800bc72 <_strtol_l.constprop.0+0x56>
 800bd1a:	bf00      	nop
 800bd1c:	0800ff9a 	.word	0x0800ff9a

0800bd20 <_strtol_r>:
 800bd20:	f7ff bf7c 	b.w	800bc1c <_strtol_l.constprop.0>

0800bd24 <strtol>:
 800bd24:	4613      	mov	r3, r2
 800bd26:	460a      	mov	r2, r1
 800bd28:	4601      	mov	r1, r0
 800bd2a:	4802      	ldr	r0, [pc, #8]	; (800bd34 <strtol+0x10>)
 800bd2c:	6800      	ldr	r0, [r0, #0]
 800bd2e:	f7ff bf75 	b.w	800bc1c <_strtol_l.constprop.0>
 800bd32:	bf00      	nop
 800bd34:	200005d8 	.word	0x200005d8

0800bd38 <_fwalk_sglue>:
 800bd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	4607      	mov	r7, r0
 800bd3e:	4688      	mov	r8, r1
 800bd40:	4614      	mov	r4, r2
 800bd42:	2600      	movs	r6, #0
 800bd44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd48:	f1b9 0901 	subs.w	r9, r9, #1
 800bd4c:	d505      	bpl.n	800bd5a <_fwalk_sglue+0x22>
 800bd4e:	6824      	ldr	r4, [r4, #0]
 800bd50:	2c00      	cmp	r4, #0
 800bd52:	d1f7      	bne.n	800bd44 <_fwalk_sglue+0xc>
 800bd54:	4630      	mov	r0, r6
 800bd56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d907      	bls.n	800bd70 <_fwalk_sglue+0x38>
 800bd60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd64:	3301      	adds	r3, #1
 800bd66:	d003      	beq.n	800bd70 <_fwalk_sglue+0x38>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	47c0      	blx	r8
 800bd6e:	4306      	orrs	r6, r0
 800bd70:	3568      	adds	r5, #104	; 0x68
 800bd72:	e7e9      	b.n	800bd48 <_fwalk_sglue+0x10>

0800bd74 <strncmp>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	b16a      	cbz	r2, 800bd94 <strncmp+0x20>
 800bd78:	3901      	subs	r1, #1
 800bd7a:	1884      	adds	r4, r0, r2
 800bd7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d103      	bne.n	800bd90 <strncmp+0x1c>
 800bd88:	42a0      	cmp	r0, r4
 800bd8a:	d001      	beq.n	800bd90 <strncmp+0x1c>
 800bd8c:	2a00      	cmp	r2, #0
 800bd8e:	d1f5      	bne.n	800bd7c <strncmp+0x8>
 800bd90:	1ad0      	subs	r0, r2, r3
 800bd92:	bd10      	pop	{r4, pc}
 800bd94:	4610      	mov	r0, r2
 800bd96:	e7fc      	b.n	800bd92 <strncmp+0x1e>

0800bd98 <strtok>:
 800bd98:	4b16      	ldr	r3, [pc, #88]	; (800bdf4 <strtok+0x5c>)
 800bd9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd9c:	681e      	ldr	r6, [r3, #0]
 800bd9e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800bda0:	4605      	mov	r5, r0
 800bda2:	b9fc      	cbnz	r4, 800bde4 <strtok+0x4c>
 800bda4:	2050      	movs	r0, #80	; 0x50
 800bda6:	9101      	str	r1, [sp, #4]
 800bda8:	f7fe fbf8 	bl	800a59c <malloc>
 800bdac:	9901      	ldr	r1, [sp, #4]
 800bdae:	6470      	str	r0, [r6, #68]	; 0x44
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	b920      	cbnz	r0, 800bdbe <strtok+0x26>
 800bdb4:	4b10      	ldr	r3, [pc, #64]	; (800bdf8 <strtok+0x60>)
 800bdb6:	4811      	ldr	r0, [pc, #68]	; (800bdfc <strtok+0x64>)
 800bdb8:	215b      	movs	r1, #91	; 0x5b
 800bdba:	f000 f907 	bl	800bfcc <__assert_func>
 800bdbe:	e9c0 4400 	strd	r4, r4, [r0]
 800bdc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bdc6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bdca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bdce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bdd2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bdd6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bdda:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bdde:	6184      	str	r4, [r0, #24]
 800bde0:	7704      	strb	r4, [r0, #28]
 800bde2:	6244      	str	r4, [r0, #36]	; 0x24
 800bde4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800bde6:	2301      	movs	r3, #1
 800bde8:	4628      	mov	r0, r5
 800bdea:	b002      	add	sp, #8
 800bdec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdf0:	f000 b806 	b.w	800be00 <__strtok_r>
 800bdf4:	200005d8 	.word	0x200005d8
 800bdf8:	0800ff20 	.word	0x0800ff20
 800bdfc:	0800ff37 	.word	0x0800ff37

0800be00 <__strtok_r>:
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	b908      	cbnz	r0, 800be08 <__strtok_r+0x8>
 800be04:	6810      	ldr	r0, [r2, #0]
 800be06:	b188      	cbz	r0, 800be2c <__strtok_r+0x2c>
 800be08:	4604      	mov	r4, r0
 800be0a:	4620      	mov	r0, r4
 800be0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800be10:	460f      	mov	r7, r1
 800be12:	f817 6b01 	ldrb.w	r6, [r7], #1
 800be16:	b91e      	cbnz	r6, 800be20 <__strtok_r+0x20>
 800be18:	b965      	cbnz	r5, 800be34 <__strtok_r+0x34>
 800be1a:	6015      	str	r5, [r2, #0]
 800be1c:	4628      	mov	r0, r5
 800be1e:	e005      	b.n	800be2c <__strtok_r+0x2c>
 800be20:	42b5      	cmp	r5, r6
 800be22:	d1f6      	bne.n	800be12 <__strtok_r+0x12>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f0      	bne.n	800be0a <__strtok_r+0xa>
 800be28:	6014      	str	r4, [r2, #0]
 800be2a:	7003      	strb	r3, [r0, #0]
 800be2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2e:	461c      	mov	r4, r3
 800be30:	e00c      	b.n	800be4c <__strtok_r+0x4c>
 800be32:	b915      	cbnz	r5, 800be3a <__strtok_r+0x3a>
 800be34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be38:	460e      	mov	r6, r1
 800be3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800be3e:	42ab      	cmp	r3, r5
 800be40:	d1f7      	bne.n	800be32 <__strtok_r+0x32>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0f3      	beq.n	800be2e <__strtok_r+0x2e>
 800be46:	2300      	movs	r3, #0
 800be48:	f804 3c01 	strb.w	r3, [r4, #-1]
 800be4c:	6014      	str	r4, [r2, #0]
 800be4e:	e7ed      	b.n	800be2c <__strtok_r+0x2c>

0800be50 <memset>:
 800be50:	4402      	add	r2, r0
 800be52:	4603      	mov	r3, r0
 800be54:	4293      	cmp	r3, r2
 800be56:	d100      	bne.n	800be5a <memset+0xa>
 800be58:	4770      	bx	lr
 800be5a:	f803 1b01 	strb.w	r1, [r3], #1
 800be5e:	e7f9      	b.n	800be54 <memset+0x4>

0800be60 <_localeconv_r>:
 800be60:	4800      	ldr	r0, [pc, #0]	; (800be64 <_localeconv_r+0x4>)
 800be62:	4770      	bx	lr
 800be64:	20000510 	.word	0x20000510

0800be68 <_reclaim_reent>:
 800be68:	4b29      	ldr	r3, [pc, #164]	; (800bf10 <_reclaim_reent+0xa8>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4283      	cmp	r3, r0
 800be6e:	b570      	push	{r4, r5, r6, lr}
 800be70:	4604      	mov	r4, r0
 800be72:	d04b      	beq.n	800bf0c <_reclaim_reent+0xa4>
 800be74:	69c3      	ldr	r3, [r0, #28]
 800be76:	b143      	cbz	r3, 800be8a <_reclaim_reent+0x22>
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d144      	bne.n	800bf08 <_reclaim_reent+0xa0>
 800be7e:	69e3      	ldr	r3, [r4, #28]
 800be80:	6819      	ldr	r1, [r3, #0]
 800be82:	b111      	cbz	r1, 800be8a <_reclaim_reent+0x22>
 800be84:	4620      	mov	r0, r4
 800be86:	f000 ff39 	bl	800ccfc <_free_r>
 800be8a:	6961      	ldr	r1, [r4, #20]
 800be8c:	b111      	cbz	r1, 800be94 <_reclaim_reent+0x2c>
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 ff34 	bl	800ccfc <_free_r>
 800be94:	69e1      	ldr	r1, [r4, #28]
 800be96:	b111      	cbz	r1, 800be9e <_reclaim_reent+0x36>
 800be98:	4620      	mov	r0, r4
 800be9a:	f000 ff2f 	bl	800ccfc <_free_r>
 800be9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bea0:	b111      	cbz	r1, 800bea8 <_reclaim_reent+0x40>
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 ff2a 	bl	800ccfc <_free_r>
 800bea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beaa:	b111      	cbz	r1, 800beb2 <_reclaim_reent+0x4a>
 800beac:	4620      	mov	r0, r4
 800beae:	f000 ff25 	bl	800ccfc <_free_r>
 800beb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800beb4:	b111      	cbz	r1, 800bebc <_reclaim_reent+0x54>
 800beb6:	4620      	mov	r0, r4
 800beb8:	f000 ff20 	bl	800ccfc <_free_r>
 800bebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bebe:	b111      	cbz	r1, 800bec6 <_reclaim_reent+0x5e>
 800bec0:	4620      	mov	r0, r4
 800bec2:	f000 ff1b 	bl	800ccfc <_free_r>
 800bec6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bec8:	b111      	cbz	r1, 800bed0 <_reclaim_reent+0x68>
 800beca:	4620      	mov	r0, r4
 800becc:	f000 ff16 	bl	800ccfc <_free_r>
 800bed0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bed2:	b111      	cbz	r1, 800beda <_reclaim_reent+0x72>
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 ff11 	bl	800ccfc <_free_r>
 800beda:	6a23      	ldr	r3, [r4, #32]
 800bedc:	b1b3      	cbz	r3, 800bf0c <_reclaim_reent+0xa4>
 800bede:	4620      	mov	r0, r4
 800bee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bee4:	4718      	bx	r3
 800bee6:	5949      	ldr	r1, [r1, r5]
 800bee8:	b941      	cbnz	r1, 800befc <_reclaim_reent+0x94>
 800beea:	3504      	adds	r5, #4
 800beec:	69e3      	ldr	r3, [r4, #28]
 800beee:	2d80      	cmp	r5, #128	; 0x80
 800bef0:	68d9      	ldr	r1, [r3, #12]
 800bef2:	d1f8      	bne.n	800bee6 <_reclaim_reent+0x7e>
 800bef4:	4620      	mov	r0, r4
 800bef6:	f000 ff01 	bl	800ccfc <_free_r>
 800befa:	e7c0      	b.n	800be7e <_reclaim_reent+0x16>
 800befc:	680e      	ldr	r6, [r1, #0]
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 fefc 	bl	800ccfc <_free_r>
 800bf04:	4631      	mov	r1, r6
 800bf06:	e7ef      	b.n	800bee8 <_reclaim_reent+0x80>
 800bf08:	2500      	movs	r5, #0
 800bf0a:	e7ef      	b.n	800beec <_reclaim_reent+0x84>
 800bf0c:	bd70      	pop	{r4, r5, r6, pc}
 800bf0e:	bf00      	nop
 800bf10:	200005d8 	.word	0x200005d8

0800bf14 <_sbrk_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d06      	ldr	r5, [pc, #24]	; (800bf30 <_sbrk_r+0x1c>)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	f7f6 fdda 	bl	8002ad8 <_sbrk>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_sbrk_r+0x1a>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_sbrk_r+0x1a>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	2000483c 	.word	0x2000483c

0800bf34 <__errno>:
 800bf34:	4b01      	ldr	r3, [pc, #4]	; (800bf3c <__errno+0x8>)
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	200005d8 	.word	0x200005d8

0800bf40 <__libc_init_array>:
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	4d0d      	ldr	r5, [pc, #52]	; (800bf78 <__libc_init_array+0x38>)
 800bf44:	4c0d      	ldr	r4, [pc, #52]	; (800bf7c <__libc_init_array+0x3c>)
 800bf46:	1b64      	subs	r4, r4, r5
 800bf48:	10a4      	asrs	r4, r4, #2
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	42a6      	cmp	r6, r4
 800bf4e:	d109      	bne.n	800bf64 <__libc_init_array+0x24>
 800bf50:	4d0b      	ldr	r5, [pc, #44]	; (800bf80 <__libc_init_array+0x40>)
 800bf52:	4c0c      	ldr	r4, [pc, #48]	; (800bf84 <__libc_init_array+0x44>)
 800bf54:	f003 fd7c 	bl	800fa50 <_init>
 800bf58:	1b64      	subs	r4, r4, r5
 800bf5a:	10a4      	asrs	r4, r4, #2
 800bf5c:	2600      	movs	r6, #0
 800bf5e:	42a6      	cmp	r6, r4
 800bf60:	d105      	bne.n	800bf6e <__libc_init_array+0x2e>
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf68:	4798      	blx	r3
 800bf6a:	3601      	adds	r6, #1
 800bf6c:	e7ee      	b.n	800bf4c <__libc_init_array+0xc>
 800bf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf72:	4798      	blx	r3
 800bf74:	3601      	adds	r6, #1
 800bf76:	e7f2      	b.n	800bf5e <__libc_init_array+0x1e>
 800bf78:	080104f8 	.word	0x080104f8
 800bf7c:	080104f8 	.word	0x080104f8
 800bf80:	080104f8 	.word	0x080104f8
 800bf84:	080104fc 	.word	0x080104fc

0800bf88 <__retarget_lock_init_recursive>:
 800bf88:	4770      	bx	lr

0800bf8a <__retarget_lock_acquire_recursive>:
 800bf8a:	4770      	bx	lr

0800bf8c <__retarget_lock_release_recursive>:
 800bf8c:	4770      	bx	lr

0800bf8e <memcpy>:
 800bf8e:	440a      	add	r2, r1
 800bf90:	4291      	cmp	r1, r2
 800bf92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bf96:	d100      	bne.n	800bf9a <memcpy+0xc>
 800bf98:	4770      	bx	lr
 800bf9a:	b510      	push	{r4, lr}
 800bf9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfa4:	4291      	cmp	r1, r2
 800bfa6:	d1f9      	bne.n	800bf9c <memcpy+0xe>
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	0000      	movs	r0, r0
 800bfac:	0000      	movs	r0, r0
	...

0800bfb0 <nan>:
 800bfb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bfb8 <nan+0x8>
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	7ff80000 	.word	0x7ff80000

0800bfc0 <nanf>:
 800bfc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bfc8 <nanf+0x8>
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	7fc00000 	.word	0x7fc00000

0800bfcc <__assert_func>:
 800bfcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfce:	4614      	mov	r4, r2
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <__assert_func+0x2c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	68d8      	ldr	r0, [r3, #12]
 800bfda:	b14c      	cbz	r4, 800bff0 <__assert_func+0x24>
 800bfdc:	4b07      	ldr	r3, [pc, #28]	; (800bffc <__assert_func+0x30>)
 800bfde:	9100      	str	r1, [sp, #0]
 800bfe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfe4:	4906      	ldr	r1, [pc, #24]	; (800c000 <__assert_func+0x34>)
 800bfe6:	462b      	mov	r3, r5
 800bfe8:	f002 f934 	bl	800e254 <fiprintf>
 800bfec:	f002 f9e0 	bl	800e3b0 <abort>
 800bff0:	4b04      	ldr	r3, [pc, #16]	; (800c004 <__assert_func+0x38>)
 800bff2:	461c      	mov	r4, r3
 800bff4:	e7f3      	b.n	800bfde <__assert_func+0x12>
 800bff6:	bf00      	nop
 800bff8:	200005d8 	.word	0x200005d8
 800bffc:	0801009a 	.word	0x0801009a
 800c000:	080100a7 	.word	0x080100a7
 800c004:	080100d5 	.word	0x080100d5

0800c008 <quorem>:
 800c008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00c:	6903      	ldr	r3, [r0, #16]
 800c00e:	690c      	ldr	r4, [r1, #16]
 800c010:	42a3      	cmp	r3, r4
 800c012:	4607      	mov	r7, r0
 800c014:	db7e      	blt.n	800c114 <quorem+0x10c>
 800c016:	3c01      	subs	r4, #1
 800c018:	f101 0814 	add.w	r8, r1, #20
 800c01c:	f100 0514 	add.w	r5, r0, #20
 800c020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c024:	9301      	str	r3, [sp, #4]
 800c026:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c02e:	3301      	adds	r3, #1
 800c030:	429a      	cmp	r2, r3
 800c032:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c03a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c03e:	d331      	bcc.n	800c0a4 <quorem+0x9c>
 800c040:	f04f 0e00 	mov.w	lr, #0
 800c044:	4640      	mov	r0, r8
 800c046:	46ac      	mov	ip, r5
 800c048:	46f2      	mov	sl, lr
 800c04a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c04e:	b293      	uxth	r3, r2
 800c050:	fb06 e303 	mla	r3, r6, r3, lr
 800c054:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c058:	0c1a      	lsrs	r2, r3, #16
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	ebaa 0303 	sub.w	r3, sl, r3
 800c060:	f8dc a000 	ldr.w	sl, [ip]
 800c064:	fa13 f38a 	uxtah	r3, r3, sl
 800c068:	fb06 220e 	mla	r2, r6, lr, r2
 800c06c:	9300      	str	r3, [sp, #0]
 800c06e:	9b00      	ldr	r3, [sp, #0]
 800c070:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c074:	b292      	uxth	r2, r2
 800c076:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c07a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c07e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c082:	4581      	cmp	r9, r0
 800c084:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c088:	f84c 3b04 	str.w	r3, [ip], #4
 800c08c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c090:	d2db      	bcs.n	800c04a <quorem+0x42>
 800c092:	f855 300b 	ldr.w	r3, [r5, fp]
 800c096:	b92b      	cbnz	r3, 800c0a4 <quorem+0x9c>
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	3b04      	subs	r3, #4
 800c09c:	429d      	cmp	r5, r3
 800c09e:	461a      	mov	r2, r3
 800c0a0:	d32c      	bcc.n	800c0fc <quorem+0xf4>
 800c0a2:	613c      	str	r4, [r7, #16]
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	f001 feab 	bl	800de00 <__mcmp>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	db22      	blt.n	800c0f4 <quorem+0xec>
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0b8:	f8d1 c000 	ldr.w	ip, [r1]
 800c0bc:	b293      	uxth	r3, r2
 800c0be:	1ac3      	subs	r3, r0, r3
 800c0c0:	0c12      	lsrs	r2, r2, #16
 800c0c2:	fa13 f38c 	uxtah	r3, r3, ip
 800c0c6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c0ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0d4:	45c1      	cmp	r9, r8
 800c0d6:	f841 3b04 	str.w	r3, [r1], #4
 800c0da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0de:	d2e9      	bcs.n	800c0b4 <quorem+0xac>
 800c0e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0e8:	b922      	cbnz	r2, 800c0f4 <quorem+0xec>
 800c0ea:	3b04      	subs	r3, #4
 800c0ec:	429d      	cmp	r5, r3
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	d30a      	bcc.n	800c108 <quorem+0x100>
 800c0f2:	613c      	str	r4, [r7, #16]
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	b003      	add	sp, #12
 800c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	3b04      	subs	r3, #4
 800c100:	2a00      	cmp	r2, #0
 800c102:	d1ce      	bne.n	800c0a2 <quorem+0x9a>
 800c104:	3c01      	subs	r4, #1
 800c106:	e7c9      	b.n	800c09c <quorem+0x94>
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	3b04      	subs	r3, #4
 800c10c:	2a00      	cmp	r2, #0
 800c10e:	d1f0      	bne.n	800c0f2 <quorem+0xea>
 800c110:	3c01      	subs	r4, #1
 800c112:	e7eb      	b.n	800c0ec <quorem+0xe4>
 800c114:	2000      	movs	r0, #0
 800c116:	e7ee      	b.n	800c0f6 <quorem+0xee>

0800c118 <_dtoa_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	ed2d 8b04 	vpush	{d8-d9}
 800c120:	69c5      	ldr	r5, [r0, #28]
 800c122:	b093      	sub	sp, #76	; 0x4c
 800c124:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c128:	ec57 6b10 	vmov	r6, r7, d0
 800c12c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c130:	9107      	str	r1, [sp, #28]
 800c132:	4604      	mov	r4, r0
 800c134:	920a      	str	r2, [sp, #40]	; 0x28
 800c136:	930d      	str	r3, [sp, #52]	; 0x34
 800c138:	b975      	cbnz	r5, 800c158 <_dtoa_r+0x40>
 800c13a:	2010      	movs	r0, #16
 800c13c:	f7fe fa2e 	bl	800a59c <malloc>
 800c140:	4602      	mov	r2, r0
 800c142:	61e0      	str	r0, [r4, #28]
 800c144:	b920      	cbnz	r0, 800c150 <_dtoa_r+0x38>
 800c146:	4bae      	ldr	r3, [pc, #696]	; (800c400 <_dtoa_r+0x2e8>)
 800c148:	21ef      	movs	r1, #239	; 0xef
 800c14a:	48ae      	ldr	r0, [pc, #696]	; (800c404 <_dtoa_r+0x2ec>)
 800c14c:	f7ff ff3e 	bl	800bfcc <__assert_func>
 800c150:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c154:	6005      	str	r5, [r0, #0]
 800c156:	60c5      	str	r5, [r0, #12]
 800c158:	69e3      	ldr	r3, [r4, #28]
 800c15a:	6819      	ldr	r1, [r3, #0]
 800c15c:	b151      	cbz	r1, 800c174 <_dtoa_r+0x5c>
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	604a      	str	r2, [r1, #4]
 800c162:	2301      	movs	r3, #1
 800c164:	4093      	lsls	r3, r2
 800c166:	608b      	str	r3, [r1, #8]
 800c168:	4620      	mov	r0, r4
 800c16a:	f001 fbc3 	bl	800d8f4 <_Bfree>
 800c16e:	69e3      	ldr	r3, [r4, #28]
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	1e3b      	subs	r3, r7, #0
 800c176:	bfbb      	ittet	lt
 800c178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c17c:	9303      	strlt	r3, [sp, #12]
 800c17e:	2300      	movge	r3, #0
 800c180:	2201      	movlt	r2, #1
 800c182:	bfac      	ite	ge
 800c184:	f8c8 3000 	strge.w	r3, [r8]
 800c188:	f8c8 2000 	strlt.w	r2, [r8]
 800c18c:	4b9e      	ldr	r3, [pc, #632]	; (800c408 <_dtoa_r+0x2f0>)
 800c18e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c192:	ea33 0308 	bics.w	r3, r3, r8
 800c196:	d11b      	bne.n	800c1d0 <_dtoa_r+0xb8>
 800c198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c19a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c1a4:	4333      	orrs	r3, r6
 800c1a6:	f000 8593 	beq.w	800ccd0 <_dtoa_r+0xbb8>
 800c1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1ac:	b963      	cbnz	r3, 800c1c8 <_dtoa_r+0xb0>
 800c1ae:	4b97      	ldr	r3, [pc, #604]	; (800c40c <_dtoa_r+0x2f4>)
 800c1b0:	e027      	b.n	800c202 <_dtoa_r+0xea>
 800c1b2:	4b97      	ldr	r3, [pc, #604]	; (800c410 <_dtoa_r+0x2f8>)
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	9800      	ldr	r0, [sp, #0]
 800c1be:	b013      	add	sp, #76	; 0x4c
 800c1c0:	ecbd 8b04 	vpop	{d8-d9}
 800c1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c8:	4b90      	ldr	r3, [pc, #576]	; (800c40c <_dtoa_r+0x2f4>)
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	3303      	adds	r3, #3
 800c1ce:	e7f3      	b.n	800c1b8 <_dtoa_r+0xa0>
 800c1d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	ec51 0b17 	vmov	r0, r1, d7
 800c1da:	eeb0 8a47 	vmov.f32	s16, s14
 800c1de:	eef0 8a67 	vmov.f32	s17, s15
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	f7f4 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1e8:	4681      	mov	r9, r0
 800c1ea:	b160      	cbz	r0, 800c206 <_dtoa_r+0xee>
 800c1ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 8568 	beq.w	800ccca <_dtoa_r+0xbb2>
 800c1fa:	4b86      	ldr	r3, [pc, #536]	; (800c414 <_dtoa_r+0x2fc>)
 800c1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	3b01      	subs	r3, #1
 800c202:	9300      	str	r3, [sp, #0]
 800c204:	e7da      	b.n	800c1bc <_dtoa_r+0xa4>
 800c206:	aa10      	add	r2, sp, #64	; 0x40
 800c208:	a911      	add	r1, sp, #68	; 0x44
 800c20a:	4620      	mov	r0, r4
 800c20c:	eeb0 0a48 	vmov.f32	s0, s16
 800c210:	eef0 0a68 	vmov.f32	s1, s17
 800c214:	f001 ff0a 	bl	800e02c <__d2b>
 800c218:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c21c:	4682      	mov	sl, r0
 800c21e:	2d00      	cmp	r5, #0
 800c220:	d07f      	beq.n	800c322 <_dtoa_r+0x20a>
 800c222:	ee18 3a90 	vmov	r3, s17
 800c226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c22a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c22e:	ec51 0b18 	vmov	r0, r1, d8
 800c232:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c23a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c23e:	4619      	mov	r1, r3
 800c240:	2200      	movs	r2, #0
 800c242:	4b75      	ldr	r3, [pc, #468]	; (800c418 <_dtoa_r+0x300>)
 800c244:	f7f4 f820 	bl	8000288 <__aeabi_dsub>
 800c248:	a367      	add	r3, pc, #412	; (adr r3, 800c3e8 <_dtoa_r+0x2d0>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	a367      	add	r3, pc, #412	; (adr r3, 800c3f0 <_dtoa_r+0x2d8>)
 800c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c258:	f7f4 f818 	bl	800028c <__adddf3>
 800c25c:	4606      	mov	r6, r0
 800c25e:	4628      	mov	r0, r5
 800c260:	460f      	mov	r7, r1
 800c262:	f7f4 f95f 	bl	8000524 <__aeabi_i2d>
 800c266:	a364      	add	r3, pc, #400	; (adr r3, 800c3f8 <_dtoa_r+0x2e0>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f7f4 f9c4 	bl	80005f8 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4630      	mov	r0, r6
 800c276:	4639      	mov	r1, r7
 800c278:	f7f4 f808 	bl	800028c <__adddf3>
 800c27c:	4606      	mov	r6, r0
 800c27e:	460f      	mov	r7, r1
 800c280:	f7f4 fc6a 	bl	8000b58 <__aeabi_d2iz>
 800c284:	2200      	movs	r2, #0
 800c286:	4683      	mov	fp, r0
 800c288:	2300      	movs	r3, #0
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7f4 fc25 	bl	8000adc <__aeabi_dcmplt>
 800c292:	b148      	cbz	r0, 800c2a8 <_dtoa_r+0x190>
 800c294:	4658      	mov	r0, fp
 800c296:	f7f4 f945 	bl	8000524 <__aeabi_i2d>
 800c29a:	4632      	mov	r2, r6
 800c29c:	463b      	mov	r3, r7
 800c29e:	f7f4 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2a2:	b908      	cbnz	r0, 800c2a8 <_dtoa_r+0x190>
 800c2a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c2a8:	f1bb 0f16 	cmp.w	fp, #22
 800c2ac:	d857      	bhi.n	800c35e <_dtoa_r+0x246>
 800c2ae:	4b5b      	ldr	r3, [pc, #364]	; (800c41c <_dtoa_r+0x304>)
 800c2b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	ec51 0b18 	vmov	r0, r1, d8
 800c2bc:	f7f4 fc0e 	bl	8000adc <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d04e      	beq.n	800c362 <_dtoa_r+0x24a>
 800c2c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	930c      	str	r3, [sp, #48]	; 0x30
 800c2cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ce:	1b5b      	subs	r3, r3, r5
 800c2d0:	1e5a      	subs	r2, r3, #1
 800c2d2:	bf45      	ittet	mi
 800c2d4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2d8:	9305      	strmi	r3, [sp, #20]
 800c2da:	2300      	movpl	r3, #0
 800c2dc:	2300      	movmi	r3, #0
 800c2de:	9206      	str	r2, [sp, #24]
 800c2e0:	bf54      	ite	pl
 800c2e2:	9305      	strpl	r3, [sp, #20]
 800c2e4:	9306      	strmi	r3, [sp, #24]
 800c2e6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ea:	db3c      	blt.n	800c366 <_dtoa_r+0x24e>
 800c2ec:	9b06      	ldr	r3, [sp, #24]
 800c2ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c2f2:	445b      	add	r3, fp
 800c2f4:	9306      	str	r3, [sp, #24]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	9308      	str	r3, [sp, #32]
 800c2fa:	9b07      	ldr	r3, [sp, #28]
 800c2fc:	2b09      	cmp	r3, #9
 800c2fe:	d868      	bhi.n	800c3d2 <_dtoa_r+0x2ba>
 800c300:	2b05      	cmp	r3, #5
 800c302:	bfc4      	itt	gt
 800c304:	3b04      	subgt	r3, #4
 800c306:	9307      	strgt	r3, [sp, #28]
 800c308:	9b07      	ldr	r3, [sp, #28]
 800c30a:	f1a3 0302 	sub.w	r3, r3, #2
 800c30e:	bfcc      	ite	gt
 800c310:	2500      	movgt	r5, #0
 800c312:	2501      	movle	r5, #1
 800c314:	2b03      	cmp	r3, #3
 800c316:	f200 8085 	bhi.w	800c424 <_dtoa_r+0x30c>
 800c31a:	e8df f003 	tbb	[pc, r3]
 800c31e:	3b2e      	.short	0x3b2e
 800c320:	5839      	.short	0x5839
 800c322:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c326:	441d      	add	r5, r3
 800c328:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	bfc1      	itttt	gt
 800c330:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c334:	fa08 f803 	lslgt.w	r8, r8, r3
 800c338:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c33c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c340:	bfd6      	itet	le
 800c342:	f1c3 0320 	rsble	r3, r3, #32
 800c346:	ea48 0003 	orrgt.w	r0, r8, r3
 800c34a:	fa06 f003 	lslle.w	r0, r6, r3
 800c34e:	f7f4 f8d9 	bl	8000504 <__aeabi_ui2d>
 800c352:	2201      	movs	r2, #1
 800c354:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c358:	3d01      	subs	r5, #1
 800c35a:	920e      	str	r2, [sp, #56]	; 0x38
 800c35c:	e76f      	b.n	800c23e <_dtoa_r+0x126>
 800c35e:	2301      	movs	r3, #1
 800c360:	e7b3      	b.n	800c2ca <_dtoa_r+0x1b2>
 800c362:	900c      	str	r0, [sp, #48]	; 0x30
 800c364:	e7b2      	b.n	800c2cc <_dtoa_r+0x1b4>
 800c366:	9b05      	ldr	r3, [sp, #20]
 800c368:	eba3 030b 	sub.w	r3, r3, fp
 800c36c:	9305      	str	r3, [sp, #20]
 800c36e:	f1cb 0300 	rsb	r3, fp, #0
 800c372:	9308      	str	r3, [sp, #32]
 800c374:	2300      	movs	r3, #0
 800c376:	930b      	str	r3, [sp, #44]	; 0x2c
 800c378:	e7bf      	b.n	800c2fa <_dtoa_r+0x1e2>
 800c37a:	2300      	movs	r3, #0
 800c37c:	9309      	str	r3, [sp, #36]	; 0x24
 800c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c380:	2b00      	cmp	r3, #0
 800c382:	dc52      	bgt.n	800c42a <_dtoa_r+0x312>
 800c384:	2301      	movs	r3, #1
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	9304      	str	r3, [sp, #16]
 800c38a:	461a      	mov	r2, r3
 800c38c:	920a      	str	r2, [sp, #40]	; 0x28
 800c38e:	e00b      	b.n	800c3a8 <_dtoa_r+0x290>
 800c390:	2301      	movs	r3, #1
 800c392:	e7f3      	b.n	800c37c <_dtoa_r+0x264>
 800c394:	2300      	movs	r3, #0
 800c396:	9309      	str	r3, [sp, #36]	; 0x24
 800c398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c39a:	445b      	add	r3, fp
 800c39c:	9301      	str	r3, [sp, #4]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	bfb8      	it	lt
 800c3a6:	2301      	movlt	r3, #1
 800c3a8:	69e0      	ldr	r0, [r4, #28]
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	f102 0614 	add.w	r6, r2, #20
 800c3b2:	429e      	cmp	r6, r3
 800c3b4:	d93d      	bls.n	800c432 <_dtoa_r+0x31a>
 800c3b6:	6041      	str	r1, [r0, #4]
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f001 fa5b 	bl	800d874 <_Balloc>
 800c3be:	9000      	str	r0, [sp, #0]
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d139      	bne.n	800c438 <_dtoa_r+0x320>
 800c3c4:	4b16      	ldr	r3, [pc, #88]	; (800c420 <_dtoa_r+0x308>)
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	f240 11af 	movw	r1, #431	; 0x1af
 800c3cc:	e6bd      	b.n	800c14a <_dtoa_r+0x32>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e7e1      	b.n	800c396 <_dtoa_r+0x27e>
 800c3d2:	2501      	movs	r5, #1
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9307      	str	r3, [sp, #28]
 800c3d8:	9509      	str	r5, [sp, #36]	; 0x24
 800c3da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3de:	9301      	str	r3, [sp, #4]
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	2312      	movs	r3, #18
 800c3e6:	e7d1      	b.n	800c38c <_dtoa_r+0x274>
 800c3e8:	636f4361 	.word	0x636f4361
 800c3ec:	3fd287a7 	.word	0x3fd287a7
 800c3f0:	8b60c8b3 	.word	0x8b60c8b3
 800c3f4:	3fc68a28 	.word	0x3fc68a28
 800c3f8:	509f79fb 	.word	0x509f79fb
 800c3fc:	3fd34413 	.word	0x3fd34413
 800c400:	0800ff20 	.word	0x0800ff20
 800c404:	080100e3 	.word	0x080100e3
 800c408:	7ff00000 	.word	0x7ff00000
 800c40c:	080100df 	.word	0x080100df
 800c410:	080100d6 	.word	0x080100d6
 800c414:	0800fea1 	.word	0x0800fea1
 800c418:	3ff80000 	.word	0x3ff80000
 800c41c:	08010240 	.word	0x08010240
 800c420:	0801013b 	.word	0x0801013b
 800c424:	2301      	movs	r3, #1
 800c426:	9309      	str	r3, [sp, #36]	; 0x24
 800c428:	e7d7      	b.n	800c3da <_dtoa_r+0x2c2>
 800c42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	e7ba      	b.n	800c3a8 <_dtoa_r+0x290>
 800c432:	3101      	adds	r1, #1
 800c434:	0052      	lsls	r2, r2, #1
 800c436:	e7ba      	b.n	800c3ae <_dtoa_r+0x296>
 800c438:	69e3      	ldr	r3, [r4, #28]
 800c43a:	9a00      	ldr	r2, [sp, #0]
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	9b04      	ldr	r3, [sp, #16]
 800c440:	2b0e      	cmp	r3, #14
 800c442:	f200 80a8 	bhi.w	800c596 <_dtoa_r+0x47e>
 800c446:	2d00      	cmp	r5, #0
 800c448:	f000 80a5 	beq.w	800c596 <_dtoa_r+0x47e>
 800c44c:	f1bb 0f00 	cmp.w	fp, #0
 800c450:	dd38      	ble.n	800c4c4 <_dtoa_r+0x3ac>
 800c452:	4bc0      	ldr	r3, [pc, #768]	; (800c754 <_dtoa_r+0x63c>)
 800c454:	f00b 020f 	and.w	r2, fp, #15
 800c458:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c45c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c460:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c464:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c468:	d019      	beq.n	800c49e <_dtoa_r+0x386>
 800c46a:	4bbb      	ldr	r3, [pc, #748]	; (800c758 <_dtoa_r+0x640>)
 800c46c:	ec51 0b18 	vmov	r0, r1, d8
 800c470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c474:	f7f4 f9ea 	bl	800084c <__aeabi_ddiv>
 800c478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c47c:	f008 080f 	and.w	r8, r8, #15
 800c480:	2503      	movs	r5, #3
 800c482:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c758 <_dtoa_r+0x640>
 800c486:	f1b8 0f00 	cmp.w	r8, #0
 800c48a:	d10a      	bne.n	800c4a2 <_dtoa_r+0x38a>
 800c48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	f7f4 f9da 	bl	800084c <__aeabi_ddiv>
 800c498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c49c:	e02b      	b.n	800c4f6 <_dtoa_r+0x3de>
 800c49e:	2502      	movs	r5, #2
 800c4a0:	e7ef      	b.n	800c482 <_dtoa_r+0x36a>
 800c4a2:	f018 0f01 	tst.w	r8, #1
 800c4a6:	d008      	beq.n	800c4ba <_dtoa_r+0x3a2>
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c4b0:	f7f4 f8a2 	bl	80005f8 <__aeabi_dmul>
 800c4b4:	3501      	adds	r5, #1
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4be:	f109 0908 	add.w	r9, r9, #8
 800c4c2:	e7e0      	b.n	800c486 <_dtoa_r+0x36e>
 800c4c4:	f000 809f 	beq.w	800c606 <_dtoa_r+0x4ee>
 800c4c8:	f1cb 0600 	rsb	r6, fp, #0
 800c4cc:	4ba1      	ldr	r3, [pc, #644]	; (800c754 <_dtoa_r+0x63c>)
 800c4ce:	4fa2      	ldr	r7, [pc, #648]	; (800c758 <_dtoa_r+0x640>)
 800c4d0:	f006 020f 	and.w	r2, r6, #15
 800c4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	ec51 0b18 	vmov	r0, r1, d8
 800c4e0:	f7f4 f88a 	bl	80005f8 <__aeabi_dmul>
 800c4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e8:	1136      	asrs	r6, r6, #4
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	2502      	movs	r5, #2
 800c4ee:	2e00      	cmp	r6, #0
 800c4f0:	d17e      	bne.n	800c5f0 <_dtoa_r+0x4d8>
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1d0      	bne.n	800c498 <_dtoa_r+0x380>
 800c4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 8084 	beq.w	800c60a <_dtoa_r+0x4f2>
 800c502:	4b96      	ldr	r3, [pc, #600]	; (800c75c <_dtoa_r+0x644>)
 800c504:	2200      	movs	r2, #0
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	f7f4 fae7 	bl	8000adc <__aeabi_dcmplt>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d07b      	beq.n	800c60a <_dtoa_r+0x4f2>
 800c512:	9b04      	ldr	r3, [sp, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d078      	beq.n	800c60a <_dtoa_r+0x4f2>
 800c518:	9b01      	ldr	r3, [sp, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	dd39      	ble.n	800c592 <_dtoa_r+0x47a>
 800c51e:	4b90      	ldr	r3, [pc, #576]	; (800c760 <_dtoa_r+0x648>)
 800c520:	2200      	movs	r2, #0
 800c522:	4640      	mov	r0, r8
 800c524:	4649      	mov	r1, r9
 800c526:	f7f4 f867 	bl	80005f8 <__aeabi_dmul>
 800c52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c52e:	9e01      	ldr	r6, [sp, #4]
 800c530:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c534:	3501      	adds	r5, #1
 800c536:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c53a:	4628      	mov	r0, r5
 800c53c:	f7f3 fff2 	bl	8000524 <__aeabi_i2d>
 800c540:	4642      	mov	r2, r8
 800c542:	464b      	mov	r3, r9
 800c544:	f7f4 f858 	bl	80005f8 <__aeabi_dmul>
 800c548:	4b86      	ldr	r3, [pc, #536]	; (800c764 <_dtoa_r+0x64c>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	f7f3 fe9e 	bl	800028c <__adddf3>
 800c550:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	d158      	bne.n	800c610 <_dtoa_r+0x4f8>
 800c55e:	4b82      	ldr	r3, [pc, #520]	; (800c768 <_dtoa_r+0x650>)
 800c560:	2200      	movs	r2, #0
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f3 fe8f 	bl	8000288 <__aeabi_dsub>
 800c56a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c56e:	4680      	mov	r8, r0
 800c570:	4689      	mov	r9, r1
 800c572:	f7f4 fad1 	bl	8000b18 <__aeabi_dcmpgt>
 800c576:	2800      	cmp	r0, #0
 800c578:	f040 8296 	bne.w	800caa8 <_dtoa_r+0x990>
 800c57c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c580:	4640      	mov	r0, r8
 800c582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c586:	4649      	mov	r1, r9
 800c588:	f7f4 faa8 	bl	8000adc <__aeabi_dcmplt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	f040 8289 	bne.w	800caa4 <_dtoa_r+0x98c>
 800c592:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c598:	2b00      	cmp	r3, #0
 800c59a:	f2c0 814e 	blt.w	800c83a <_dtoa_r+0x722>
 800c59e:	f1bb 0f0e 	cmp.w	fp, #14
 800c5a2:	f300 814a 	bgt.w	800c83a <_dtoa_r+0x722>
 800c5a6:	4b6b      	ldr	r3, [pc, #428]	; (800c754 <_dtoa_r+0x63c>)
 800c5a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c5ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f280 80dc 	bge.w	800c770 <_dtoa_r+0x658>
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f300 80d8 	bgt.w	800c770 <_dtoa_r+0x658>
 800c5c0:	f040 826f 	bne.w	800caa2 <_dtoa_r+0x98a>
 800c5c4:	4b68      	ldr	r3, [pc, #416]	; (800c768 <_dtoa_r+0x650>)
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	f7f4 f814 	bl	80005f8 <__aeabi_dmul>
 800c5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5d4:	f7f4 fa96 	bl	8000b04 <__aeabi_dcmpge>
 800c5d8:	9e04      	ldr	r6, [sp, #16]
 800c5da:	4637      	mov	r7, r6
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f040 8245 	bne.w	800ca6c <_dtoa_r+0x954>
 800c5e2:	9d00      	ldr	r5, [sp, #0]
 800c5e4:	2331      	movs	r3, #49	; 0x31
 800c5e6:	f805 3b01 	strb.w	r3, [r5], #1
 800c5ea:	f10b 0b01 	add.w	fp, fp, #1
 800c5ee:	e241      	b.n	800ca74 <_dtoa_r+0x95c>
 800c5f0:	07f2      	lsls	r2, r6, #31
 800c5f2:	d505      	bpl.n	800c600 <_dtoa_r+0x4e8>
 800c5f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	3501      	adds	r5, #1
 800c5fe:	2301      	movs	r3, #1
 800c600:	1076      	asrs	r6, r6, #1
 800c602:	3708      	adds	r7, #8
 800c604:	e773      	b.n	800c4ee <_dtoa_r+0x3d6>
 800c606:	2502      	movs	r5, #2
 800c608:	e775      	b.n	800c4f6 <_dtoa_r+0x3de>
 800c60a:	9e04      	ldr	r6, [sp, #16]
 800c60c:	465f      	mov	r7, fp
 800c60e:	e792      	b.n	800c536 <_dtoa_r+0x41e>
 800c610:	9900      	ldr	r1, [sp, #0]
 800c612:	4b50      	ldr	r3, [pc, #320]	; (800c754 <_dtoa_r+0x63c>)
 800c614:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c618:	4431      	add	r1, r6
 800c61a:	9102      	str	r1, [sp, #8]
 800c61c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c61e:	eeb0 9a47 	vmov.f32	s18, s14
 800c622:	eef0 9a67 	vmov.f32	s19, s15
 800c626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c62a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c62e:	2900      	cmp	r1, #0
 800c630:	d044      	beq.n	800c6bc <_dtoa_r+0x5a4>
 800c632:	494e      	ldr	r1, [pc, #312]	; (800c76c <_dtoa_r+0x654>)
 800c634:	2000      	movs	r0, #0
 800c636:	f7f4 f909 	bl	800084c <__aeabi_ddiv>
 800c63a:	ec53 2b19 	vmov	r2, r3, d9
 800c63e:	f7f3 fe23 	bl	8000288 <__aeabi_dsub>
 800c642:	9d00      	ldr	r5, [sp, #0]
 800c644:	ec41 0b19 	vmov	d9, r0, r1
 800c648:	4649      	mov	r1, r9
 800c64a:	4640      	mov	r0, r8
 800c64c:	f7f4 fa84 	bl	8000b58 <__aeabi_d2iz>
 800c650:	4606      	mov	r6, r0
 800c652:	f7f3 ff67 	bl	8000524 <__aeabi_i2d>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4640      	mov	r0, r8
 800c65c:	4649      	mov	r1, r9
 800c65e:	f7f3 fe13 	bl	8000288 <__aeabi_dsub>
 800c662:	3630      	adds	r6, #48	; 0x30
 800c664:	f805 6b01 	strb.w	r6, [r5], #1
 800c668:	ec53 2b19 	vmov	r2, r3, d9
 800c66c:	4680      	mov	r8, r0
 800c66e:	4689      	mov	r9, r1
 800c670:	f7f4 fa34 	bl	8000adc <__aeabi_dcmplt>
 800c674:	2800      	cmp	r0, #0
 800c676:	d164      	bne.n	800c742 <_dtoa_r+0x62a>
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	4937      	ldr	r1, [pc, #220]	; (800c75c <_dtoa_r+0x644>)
 800c67e:	2000      	movs	r0, #0
 800c680:	f7f3 fe02 	bl	8000288 <__aeabi_dsub>
 800c684:	ec53 2b19 	vmov	r2, r3, d9
 800c688:	f7f4 fa28 	bl	8000adc <__aeabi_dcmplt>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f040 80b6 	bne.w	800c7fe <_dtoa_r+0x6e6>
 800c692:	9b02      	ldr	r3, [sp, #8]
 800c694:	429d      	cmp	r5, r3
 800c696:	f43f af7c 	beq.w	800c592 <_dtoa_r+0x47a>
 800c69a:	4b31      	ldr	r3, [pc, #196]	; (800c760 <_dtoa_r+0x648>)
 800c69c:	ec51 0b19 	vmov	r0, r1, d9
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	4b2e      	ldr	r3, [pc, #184]	; (800c760 <_dtoa_r+0x648>)
 800c6a8:	ec41 0b19 	vmov	d9, r0, r1
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	f7f3 ffa1 	bl	80005f8 <__aeabi_dmul>
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	4689      	mov	r9, r1
 800c6ba:	e7c5      	b.n	800c648 <_dtoa_r+0x530>
 800c6bc:	ec51 0b17 	vmov	r0, r1, d7
 800c6c0:	f7f3 ff9a 	bl	80005f8 <__aeabi_dmul>
 800c6c4:	9b02      	ldr	r3, [sp, #8]
 800c6c6:	9d00      	ldr	r5, [sp, #0]
 800c6c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6ca:	ec41 0b19 	vmov	d9, r0, r1
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	f7f4 fa41 	bl	8000b58 <__aeabi_d2iz>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	f7f3 ff24 	bl	8000524 <__aeabi_i2d>
 800c6dc:	3630      	adds	r6, #48	; 0x30
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4640      	mov	r0, r8
 800c6e4:	4649      	mov	r1, r9
 800c6e6:	f7f3 fdcf 	bl	8000288 <__aeabi_dsub>
 800c6ea:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ee:	9b02      	ldr	r3, [sp, #8]
 800c6f0:	429d      	cmp	r5, r3
 800c6f2:	4680      	mov	r8, r0
 800c6f4:	4689      	mov	r9, r1
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	d124      	bne.n	800c746 <_dtoa_r+0x62e>
 800c6fc:	4b1b      	ldr	r3, [pc, #108]	; (800c76c <_dtoa_r+0x654>)
 800c6fe:	ec51 0b19 	vmov	r0, r1, d9
 800c702:	f7f3 fdc3 	bl	800028c <__adddf3>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4640      	mov	r0, r8
 800c70c:	4649      	mov	r1, r9
 800c70e:	f7f4 fa03 	bl	8000b18 <__aeabi_dcmpgt>
 800c712:	2800      	cmp	r0, #0
 800c714:	d173      	bne.n	800c7fe <_dtoa_r+0x6e6>
 800c716:	ec53 2b19 	vmov	r2, r3, d9
 800c71a:	4914      	ldr	r1, [pc, #80]	; (800c76c <_dtoa_r+0x654>)
 800c71c:	2000      	movs	r0, #0
 800c71e:	f7f3 fdb3 	bl	8000288 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	f7f4 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f43f af2f 	beq.w	800c592 <_dtoa_r+0x47a>
 800c734:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c736:	1e6b      	subs	r3, r5, #1
 800c738:	930f      	str	r3, [sp, #60]	; 0x3c
 800c73a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c73e:	2b30      	cmp	r3, #48	; 0x30
 800c740:	d0f8      	beq.n	800c734 <_dtoa_r+0x61c>
 800c742:	46bb      	mov	fp, r7
 800c744:	e04a      	b.n	800c7dc <_dtoa_r+0x6c4>
 800c746:	4b06      	ldr	r3, [pc, #24]	; (800c760 <_dtoa_r+0x648>)
 800c748:	f7f3 ff56 	bl	80005f8 <__aeabi_dmul>
 800c74c:	4680      	mov	r8, r0
 800c74e:	4689      	mov	r9, r1
 800c750:	e7bd      	b.n	800c6ce <_dtoa_r+0x5b6>
 800c752:	bf00      	nop
 800c754:	08010240 	.word	0x08010240
 800c758:	08010218 	.word	0x08010218
 800c75c:	3ff00000 	.word	0x3ff00000
 800c760:	40240000 	.word	0x40240000
 800c764:	401c0000 	.word	0x401c0000
 800c768:	40140000 	.word	0x40140000
 800c76c:	3fe00000 	.word	0x3fe00000
 800c770:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c774:	9d00      	ldr	r5, [sp, #0]
 800c776:	4642      	mov	r2, r8
 800c778:	464b      	mov	r3, r9
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f4 f865 	bl	800084c <__aeabi_ddiv>
 800c782:	f7f4 f9e9 	bl	8000b58 <__aeabi_d2iz>
 800c786:	9001      	str	r0, [sp, #4]
 800c788:	f7f3 fecc 	bl	8000524 <__aeabi_i2d>
 800c78c:	4642      	mov	r2, r8
 800c78e:	464b      	mov	r3, r9
 800c790:	f7f3 ff32 	bl	80005f8 <__aeabi_dmul>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4630      	mov	r0, r6
 800c79a:	4639      	mov	r1, r7
 800c79c:	f7f3 fd74 	bl	8000288 <__aeabi_dsub>
 800c7a0:	9e01      	ldr	r6, [sp, #4]
 800c7a2:	9f04      	ldr	r7, [sp, #16]
 800c7a4:	3630      	adds	r6, #48	; 0x30
 800c7a6:	f805 6b01 	strb.w	r6, [r5], #1
 800c7aa:	9e00      	ldr	r6, [sp, #0]
 800c7ac:	1bae      	subs	r6, r5, r6
 800c7ae:	42b7      	cmp	r7, r6
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	d134      	bne.n	800c820 <_dtoa_r+0x708>
 800c7b6:	f7f3 fd69 	bl	800028c <__adddf3>
 800c7ba:	4642      	mov	r2, r8
 800c7bc:	464b      	mov	r3, r9
 800c7be:	4606      	mov	r6, r0
 800c7c0:	460f      	mov	r7, r1
 800c7c2:	f7f4 f9a9 	bl	8000b18 <__aeabi_dcmpgt>
 800c7c6:	b9c8      	cbnz	r0, 800c7fc <_dtoa_r+0x6e4>
 800c7c8:	4642      	mov	r2, r8
 800c7ca:	464b      	mov	r3, r9
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	f7f4 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7d4:	b110      	cbz	r0, 800c7dc <_dtoa_r+0x6c4>
 800c7d6:	9b01      	ldr	r3, [sp, #4]
 800c7d8:	07db      	lsls	r3, r3, #31
 800c7da:	d40f      	bmi.n	800c7fc <_dtoa_r+0x6e4>
 800c7dc:	4651      	mov	r1, sl
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f001 f888 	bl	800d8f4 <_Bfree>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7e8:	702b      	strb	r3, [r5, #0]
 800c7ea:	f10b 0301 	add.w	r3, fp, #1
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f43f ace2 	beq.w	800c1bc <_dtoa_r+0xa4>
 800c7f8:	601d      	str	r5, [r3, #0]
 800c7fa:	e4df      	b.n	800c1bc <_dtoa_r+0xa4>
 800c7fc:	465f      	mov	r7, fp
 800c7fe:	462b      	mov	r3, r5
 800c800:	461d      	mov	r5, r3
 800c802:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c806:	2a39      	cmp	r2, #57	; 0x39
 800c808:	d106      	bne.n	800c818 <_dtoa_r+0x700>
 800c80a:	9a00      	ldr	r2, [sp, #0]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d1f7      	bne.n	800c800 <_dtoa_r+0x6e8>
 800c810:	9900      	ldr	r1, [sp, #0]
 800c812:	2230      	movs	r2, #48	; 0x30
 800c814:	3701      	adds	r7, #1
 800c816:	700a      	strb	r2, [r1, #0]
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	3201      	adds	r2, #1
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	e790      	b.n	800c742 <_dtoa_r+0x62a>
 800c820:	4ba3      	ldr	r3, [pc, #652]	; (800cab0 <_dtoa_r+0x998>)
 800c822:	2200      	movs	r2, #0
 800c824:	f7f3 fee8 	bl	80005f8 <__aeabi_dmul>
 800c828:	2200      	movs	r2, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	4606      	mov	r6, r0
 800c82e:	460f      	mov	r7, r1
 800c830:	f7f4 f94a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c834:	2800      	cmp	r0, #0
 800c836:	d09e      	beq.n	800c776 <_dtoa_r+0x65e>
 800c838:	e7d0      	b.n	800c7dc <_dtoa_r+0x6c4>
 800c83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	f000 80ca 	beq.w	800c9d6 <_dtoa_r+0x8be>
 800c842:	9a07      	ldr	r2, [sp, #28]
 800c844:	2a01      	cmp	r2, #1
 800c846:	f300 80ad 	bgt.w	800c9a4 <_dtoa_r+0x88c>
 800c84a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	f000 80a5 	beq.w	800c99c <_dtoa_r+0x884>
 800c852:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c856:	9e08      	ldr	r6, [sp, #32]
 800c858:	9d05      	ldr	r5, [sp, #20]
 800c85a:	9a05      	ldr	r2, [sp, #20]
 800c85c:	441a      	add	r2, r3
 800c85e:	9205      	str	r2, [sp, #20]
 800c860:	9a06      	ldr	r2, [sp, #24]
 800c862:	2101      	movs	r1, #1
 800c864:	441a      	add	r2, r3
 800c866:	4620      	mov	r0, r4
 800c868:	9206      	str	r2, [sp, #24]
 800c86a:	f001 f943 	bl	800daf4 <__i2b>
 800c86e:	4607      	mov	r7, r0
 800c870:	b165      	cbz	r5, 800c88c <_dtoa_r+0x774>
 800c872:	9b06      	ldr	r3, [sp, #24]
 800c874:	2b00      	cmp	r3, #0
 800c876:	dd09      	ble.n	800c88c <_dtoa_r+0x774>
 800c878:	42ab      	cmp	r3, r5
 800c87a:	9a05      	ldr	r2, [sp, #20]
 800c87c:	bfa8      	it	ge
 800c87e:	462b      	movge	r3, r5
 800c880:	1ad2      	subs	r2, r2, r3
 800c882:	9205      	str	r2, [sp, #20]
 800c884:	9a06      	ldr	r2, [sp, #24]
 800c886:	1aed      	subs	r5, r5, r3
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	9306      	str	r3, [sp, #24]
 800c88c:	9b08      	ldr	r3, [sp, #32]
 800c88e:	b1f3      	cbz	r3, 800c8ce <_dtoa_r+0x7b6>
 800c890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 80a3 	beq.w	800c9de <_dtoa_r+0x8c6>
 800c898:	2e00      	cmp	r6, #0
 800c89a:	dd10      	ble.n	800c8be <_dtoa_r+0x7a6>
 800c89c:	4639      	mov	r1, r7
 800c89e:	4632      	mov	r2, r6
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f001 f9e7 	bl	800dc74 <__pow5mult>
 800c8a6:	4652      	mov	r2, sl
 800c8a8:	4601      	mov	r1, r0
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f001 f937 	bl	800db20 <__multiply>
 800c8b2:	4651      	mov	r1, sl
 800c8b4:	4680      	mov	r8, r0
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f001 f81c 	bl	800d8f4 <_Bfree>
 800c8bc:	46c2      	mov	sl, r8
 800c8be:	9b08      	ldr	r3, [sp, #32]
 800c8c0:	1b9a      	subs	r2, r3, r6
 800c8c2:	d004      	beq.n	800c8ce <_dtoa_r+0x7b6>
 800c8c4:	4651      	mov	r1, sl
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f001 f9d4 	bl	800dc74 <__pow5mult>
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f001 f90f 	bl	800daf4 <__i2b>
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	4606      	mov	r6, r0
 800c8dc:	f340 8081 	ble.w	800c9e2 <_dtoa_r+0x8ca>
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f001 f9c5 	bl	800dc74 <__pow5mult>
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	4606      	mov	r6, r0
 800c8f0:	dd7a      	ble.n	800c9e8 <_dtoa_r+0x8d0>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	6933      	ldr	r3, [r6, #16]
 800c8f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8fc:	6918      	ldr	r0, [r3, #16]
 800c8fe:	f001 f8ab 	bl	800da58 <__hi0bits>
 800c902:	f1c0 0020 	rsb	r0, r0, #32
 800c906:	9b06      	ldr	r3, [sp, #24]
 800c908:	4418      	add	r0, r3
 800c90a:	f010 001f 	ands.w	r0, r0, #31
 800c90e:	f000 8094 	beq.w	800ca3a <_dtoa_r+0x922>
 800c912:	f1c0 0320 	rsb	r3, r0, #32
 800c916:	2b04      	cmp	r3, #4
 800c918:	f340 8085 	ble.w	800ca26 <_dtoa_r+0x90e>
 800c91c:	9b05      	ldr	r3, [sp, #20]
 800c91e:	f1c0 001c 	rsb	r0, r0, #28
 800c922:	4403      	add	r3, r0
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	9b06      	ldr	r3, [sp, #24]
 800c928:	4403      	add	r3, r0
 800c92a:	4405      	add	r5, r0
 800c92c:	9306      	str	r3, [sp, #24]
 800c92e:	9b05      	ldr	r3, [sp, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	dd05      	ble.n	800c940 <_dtoa_r+0x828>
 800c934:	4651      	mov	r1, sl
 800c936:	461a      	mov	r2, r3
 800c938:	4620      	mov	r0, r4
 800c93a:	f001 f9f5 	bl	800dd28 <__lshift>
 800c93e:	4682      	mov	sl, r0
 800c940:	9b06      	ldr	r3, [sp, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd05      	ble.n	800c952 <_dtoa_r+0x83a>
 800c946:	4631      	mov	r1, r6
 800c948:	461a      	mov	r2, r3
 800c94a:	4620      	mov	r0, r4
 800c94c:	f001 f9ec 	bl	800dd28 <__lshift>
 800c950:	4606      	mov	r6, r0
 800c952:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c954:	2b00      	cmp	r3, #0
 800c956:	d072      	beq.n	800ca3e <_dtoa_r+0x926>
 800c958:	4631      	mov	r1, r6
 800c95a:	4650      	mov	r0, sl
 800c95c:	f001 fa50 	bl	800de00 <__mcmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	da6c      	bge.n	800ca3e <_dtoa_r+0x926>
 800c964:	2300      	movs	r3, #0
 800c966:	4651      	mov	r1, sl
 800c968:	220a      	movs	r2, #10
 800c96a:	4620      	mov	r0, r4
 800c96c:	f000 ffe4 	bl	800d938 <__multadd>
 800c970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c972:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c976:	4682      	mov	sl, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 81b0 	beq.w	800ccde <_dtoa_r+0xbc6>
 800c97e:	2300      	movs	r3, #0
 800c980:	4639      	mov	r1, r7
 800c982:	220a      	movs	r2, #10
 800c984:	4620      	mov	r0, r4
 800c986:	f000 ffd7 	bl	800d938 <__multadd>
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	4607      	mov	r7, r0
 800c990:	f300 8096 	bgt.w	800cac0 <_dtoa_r+0x9a8>
 800c994:	9b07      	ldr	r3, [sp, #28]
 800c996:	2b02      	cmp	r3, #2
 800c998:	dc59      	bgt.n	800ca4e <_dtoa_r+0x936>
 800c99a:	e091      	b.n	800cac0 <_dtoa_r+0x9a8>
 800c99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c99e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9a2:	e758      	b.n	800c856 <_dtoa_r+0x73e>
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	1e5e      	subs	r6, r3, #1
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	42b3      	cmp	r3, r6
 800c9ac:	bfbf      	itttt	lt
 800c9ae:	9b08      	ldrlt	r3, [sp, #32]
 800c9b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c9b2:	9608      	strlt	r6, [sp, #32]
 800c9b4:	1af3      	sublt	r3, r6, r3
 800c9b6:	bfb4      	ite	lt
 800c9b8:	18d2      	addlt	r2, r2, r3
 800c9ba:	1b9e      	subge	r6, r3, r6
 800c9bc:	9b04      	ldr	r3, [sp, #16]
 800c9be:	bfbc      	itt	lt
 800c9c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c9c2:	2600      	movlt	r6, #0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	bfb7      	itett	lt
 800c9c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c9cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c9d0:	1a9d      	sublt	r5, r3, r2
 800c9d2:	2300      	movlt	r3, #0
 800c9d4:	e741      	b.n	800c85a <_dtoa_r+0x742>
 800c9d6:	9e08      	ldr	r6, [sp, #32]
 800c9d8:	9d05      	ldr	r5, [sp, #20]
 800c9da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9dc:	e748      	b.n	800c870 <_dtoa_r+0x758>
 800c9de:	9a08      	ldr	r2, [sp, #32]
 800c9e0:	e770      	b.n	800c8c4 <_dtoa_r+0x7ac>
 800c9e2:	9b07      	ldr	r3, [sp, #28]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	dc19      	bgt.n	800ca1c <_dtoa_r+0x904>
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	b9bb      	cbnz	r3, 800ca1c <_dtoa_r+0x904>
 800c9ec:	9b03      	ldr	r3, [sp, #12]
 800c9ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9f2:	b99b      	cbnz	r3, 800ca1c <_dtoa_r+0x904>
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9fa:	0d1b      	lsrs	r3, r3, #20
 800c9fc:	051b      	lsls	r3, r3, #20
 800c9fe:	b183      	cbz	r3, 800ca22 <_dtoa_r+0x90a>
 800ca00:	9b05      	ldr	r3, [sp, #20]
 800ca02:	3301      	adds	r3, #1
 800ca04:	9305      	str	r3, [sp, #20]
 800ca06:	9b06      	ldr	r3, [sp, #24]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	9306      	str	r3, [sp, #24]
 800ca0c:	f04f 0801 	mov.w	r8, #1
 800ca10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f47f af6f 	bne.w	800c8f6 <_dtoa_r+0x7de>
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e774      	b.n	800c906 <_dtoa_r+0x7ee>
 800ca1c:	f04f 0800 	mov.w	r8, #0
 800ca20:	e7f6      	b.n	800ca10 <_dtoa_r+0x8f8>
 800ca22:	4698      	mov	r8, r3
 800ca24:	e7f4      	b.n	800ca10 <_dtoa_r+0x8f8>
 800ca26:	d082      	beq.n	800c92e <_dtoa_r+0x816>
 800ca28:	9a05      	ldr	r2, [sp, #20]
 800ca2a:	331c      	adds	r3, #28
 800ca2c:	441a      	add	r2, r3
 800ca2e:	9205      	str	r2, [sp, #20]
 800ca30:	9a06      	ldr	r2, [sp, #24]
 800ca32:	441a      	add	r2, r3
 800ca34:	441d      	add	r5, r3
 800ca36:	9206      	str	r2, [sp, #24]
 800ca38:	e779      	b.n	800c92e <_dtoa_r+0x816>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	e7f4      	b.n	800ca28 <_dtoa_r+0x910>
 800ca3e:	9b04      	ldr	r3, [sp, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dc37      	bgt.n	800cab4 <_dtoa_r+0x99c>
 800ca44:	9b07      	ldr	r3, [sp, #28]
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	dd34      	ble.n	800cab4 <_dtoa_r+0x99c>
 800ca4a:	9b04      	ldr	r3, [sp, #16]
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	9b01      	ldr	r3, [sp, #4]
 800ca50:	b963      	cbnz	r3, 800ca6c <_dtoa_r+0x954>
 800ca52:	4631      	mov	r1, r6
 800ca54:	2205      	movs	r2, #5
 800ca56:	4620      	mov	r0, r4
 800ca58:	f000 ff6e 	bl	800d938 <__multadd>
 800ca5c:	4601      	mov	r1, r0
 800ca5e:	4606      	mov	r6, r0
 800ca60:	4650      	mov	r0, sl
 800ca62:	f001 f9cd 	bl	800de00 <__mcmp>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f73f adbb 	bgt.w	800c5e2 <_dtoa_r+0x4ca>
 800ca6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca6e:	9d00      	ldr	r5, [sp, #0]
 800ca70:	ea6f 0b03 	mvn.w	fp, r3
 800ca74:	f04f 0800 	mov.w	r8, #0
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f000 ff3a 	bl	800d8f4 <_Bfree>
 800ca80:	2f00      	cmp	r7, #0
 800ca82:	f43f aeab 	beq.w	800c7dc <_dtoa_r+0x6c4>
 800ca86:	f1b8 0f00 	cmp.w	r8, #0
 800ca8a:	d005      	beq.n	800ca98 <_dtoa_r+0x980>
 800ca8c:	45b8      	cmp	r8, r7
 800ca8e:	d003      	beq.n	800ca98 <_dtoa_r+0x980>
 800ca90:	4641      	mov	r1, r8
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 ff2e 	bl	800d8f4 <_Bfree>
 800ca98:	4639      	mov	r1, r7
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 ff2a 	bl	800d8f4 <_Bfree>
 800caa0:	e69c      	b.n	800c7dc <_dtoa_r+0x6c4>
 800caa2:	2600      	movs	r6, #0
 800caa4:	4637      	mov	r7, r6
 800caa6:	e7e1      	b.n	800ca6c <_dtoa_r+0x954>
 800caa8:	46bb      	mov	fp, r7
 800caaa:	4637      	mov	r7, r6
 800caac:	e599      	b.n	800c5e2 <_dtoa_r+0x4ca>
 800caae:	bf00      	nop
 800cab0:	40240000 	.word	0x40240000
 800cab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 80c8 	beq.w	800cc4c <_dtoa_r+0xb34>
 800cabc:	9b04      	ldr	r3, [sp, #16]
 800cabe:	9301      	str	r3, [sp, #4]
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	dd05      	ble.n	800cad0 <_dtoa_r+0x9b8>
 800cac4:	4639      	mov	r1, r7
 800cac6:	462a      	mov	r2, r5
 800cac8:	4620      	mov	r0, r4
 800caca:	f001 f92d 	bl	800dd28 <__lshift>
 800cace:	4607      	mov	r7, r0
 800cad0:	f1b8 0f00 	cmp.w	r8, #0
 800cad4:	d05b      	beq.n	800cb8e <_dtoa_r+0xa76>
 800cad6:	6879      	ldr	r1, [r7, #4]
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fecb 	bl	800d874 <_Balloc>
 800cade:	4605      	mov	r5, r0
 800cae0:	b928      	cbnz	r0, 800caee <_dtoa_r+0x9d6>
 800cae2:	4b83      	ldr	r3, [pc, #524]	; (800ccf0 <_dtoa_r+0xbd8>)
 800cae4:	4602      	mov	r2, r0
 800cae6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800caea:	f7ff bb2e 	b.w	800c14a <_dtoa_r+0x32>
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	3202      	adds	r2, #2
 800caf2:	0092      	lsls	r2, r2, #2
 800caf4:	f107 010c 	add.w	r1, r7, #12
 800caf8:	300c      	adds	r0, #12
 800cafa:	f7ff fa48 	bl	800bf8e <memcpy>
 800cafe:	2201      	movs	r2, #1
 800cb00:	4629      	mov	r1, r5
 800cb02:	4620      	mov	r0, r4
 800cb04:	f001 f910 	bl	800dd28 <__lshift>
 800cb08:	9b00      	ldr	r3, [sp, #0]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	9304      	str	r3, [sp, #16]
 800cb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb12:	4413      	add	r3, r2
 800cb14:	9308      	str	r3, [sp, #32]
 800cb16:	9b02      	ldr	r3, [sp, #8]
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	46b8      	mov	r8, r7
 800cb1e:	9306      	str	r3, [sp, #24]
 800cb20:	4607      	mov	r7, r0
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	4631      	mov	r1, r6
 800cb26:	3b01      	subs	r3, #1
 800cb28:	4650      	mov	r0, sl
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	f7ff fa6c 	bl	800c008 <quorem>
 800cb30:	4641      	mov	r1, r8
 800cb32:	9002      	str	r0, [sp, #8]
 800cb34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb38:	4650      	mov	r0, sl
 800cb3a:	f001 f961 	bl	800de00 <__mcmp>
 800cb3e:	463a      	mov	r2, r7
 800cb40:	9005      	str	r0, [sp, #20]
 800cb42:	4631      	mov	r1, r6
 800cb44:	4620      	mov	r0, r4
 800cb46:	f001 f977 	bl	800de38 <__mdiff>
 800cb4a:	68c2      	ldr	r2, [r0, #12]
 800cb4c:	4605      	mov	r5, r0
 800cb4e:	bb02      	cbnz	r2, 800cb92 <_dtoa_r+0xa7a>
 800cb50:	4601      	mov	r1, r0
 800cb52:	4650      	mov	r0, sl
 800cb54:	f001 f954 	bl	800de00 <__mcmp>
 800cb58:	4602      	mov	r2, r0
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb60:	f000 fec8 	bl	800d8f4 <_Bfree>
 800cb64:	9b07      	ldr	r3, [sp, #28]
 800cb66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb68:	9d04      	ldr	r5, [sp, #16]
 800cb6a:	ea43 0102 	orr.w	r1, r3, r2
 800cb6e:	9b06      	ldr	r3, [sp, #24]
 800cb70:	4319      	orrs	r1, r3
 800cb72:	d110      	bne.n	800cb96 <_dtoa_r+0xa7e>
 800cb74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb78:	d029      	beq.n	800cbce <_dtoa_r+0xab6>
 800cb7a:	9b05      	ldr	r3, [sp, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dd02      	ble.n	800cb86 <_dtoa_r+0xa6e>
 800cb80:	9b02      	ldr	r3, [sp, #8]
 800cb82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cb86:	9b01      	ldr	r3, [sp, #4]
 800cb88:	f883 9000 	strb.w	r9, [r3]
 800cb8c:	e774      	b.n	800ca78 <_dtoa_r+0x960>
 800cb8e:	4638      	mov	r0, r7
 800cb90:	e7ba      	b.n	800cb08 <_dtoa_r+0x9f0>
 800cb92:	2201      	movs	r2, #1
 800cb94:	e7e1      	b.n	800cb5a <_dtoa_r+0xa42>
 800cb96:	9b05      	ldr	r3, [sp, #20]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	db04      	blt.n	800cba6 <_dtoa_r+0xa8e>
 800cb9c:	9907      	ldr	r1, [sp, #28]
 800cb9e:	430b      	orrs	r3, r1
 800cba0:	9906      	ldr	r1, [sp, #24]
 800cba2:	430b      	orrs	r3, r1
 800cba4:	d120      	bne.n	800cbe8 <_dtoa_r+0xad0>
 800cba6:	2a00      	cmp	r2, #0
 800cba8:	dded      	ble.n	800cb86 <_dtoa_r+0xa6e>
 800cbaa:	4651      	mov	r1, sl
 800cbac:	2201      	movs	r2, #1
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f001 f8ba 	bl	800dd28 <__lshift>
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	4682      	mov	sl, r0
 800cbb8:	f001 f922 	bl	800de00 <__mcmp>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	dc03      	bgt.n	800cbc8 <_dtoa_r+0xab0>
 800cbc0:	d1e1      	bne.n	800cb86 <_dtoa_r+0xa6e>
 800cbc2:	f019 0f01 	tst.w	r9, #1
 800cbc6:	d0de      	beq.n	800cb86 <_dtoa_r+0xa6e>
 800cbc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbcc:	d1d8      	bne.n	800cb80 <_dtoa_r+0xa68>
 800cbce:	9a01      	ldr	r2, [sp, #4]
 800cbd0:	2339      	movs	r3, #57	; 0x39
 800cbd2:	7013      	strb	r3, [r2, #0]
 800cbd4:	462b      	mov	r3, r5
 800cbd6:	461d      	mov	r5, r3
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbde:	2a39      	cmp	r2, #57	; 0x39
 800cbe0:	d06c      	beq.n	800ccbc <_dtoa_r+0xba4>
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	e747      	b.n	800ca78 <_dtoa_r+0x960>
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	dd07      	ble.n	800cbfc <_dtoa_r+0xae4>
 800cbec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbf0:	d0ed      	beq.n	800cbce <_dtoa_r+0xab6>
 800cbf2:	9a01      	ldr	r2, [sp, #4]
 800cbf4:	f109 0301 	add.w	r3, r9, #1
 800cbf8:	7013      	strb	r3, [r2, #0]
 800cbfa:	e73d      	b.n	800ca78 <_dtoa_r+0x960>
 800cbfc:	9b04      	ldr	r3, [sp, #16]
 800cbfe:	9a08      	ldr	r2, [sp, #32]
 800cc00:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d043      	beq.n	800cc90 <_dtoa_r+0xb78>
 800cc08:	4651      	mov	r1, sl
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	220a      	movs	r2, #10
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f000 fe92 	bl	800d938 <__multadd>
 800cc14:	45b8      	cmp	r8, r7
 800cc16:	4682      	mov	sl, r0
 800cc18:	f04f 0300 	mov.w	r3, #0
 800cc1c:	f04f 020a 	mov.w	r2, #10
 800cc20:	4641      	mov	r1, r8
 800cc22:	4620      	mov	r0, r4
 800cc24:	d107      	bne.n	800cc36 <_dtoa_r+0xb1e>
 800cc26:	f000 fe87 	bl	800d938 <__multadd>
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	9b04      	ldr	r3, [sp, #16]
 800cc30:	3301      	adds	r3, #1
 800cc32:	9304      	str	r3, [sp, #16]
 800cc34:	e775      	b.n	800cb22 <_dtoa_r+0xa0a>
 800cc36:	f000 fe7f 	bl	800d938 <__multadd>
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	2300      	movs	r3, #0
 800cc40:	220a      	movs	r2, #10
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fe78 	bl	800d938 <__multadd>
 800cc48:	4607      	mov	r7, r0
 800cc4a:	e7f0      	b.n	800cc2e <_dtoa_r+0xb16>
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	9d00      	ldr	r5, [sp, #0]
 800cc52:	4631      	mov	r1, r6
 800cc54:	4650      	mov	r0, sl
 800cc56:	f7ff f9d7 	bl	800c008 <quorem>
 800cc5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc5e:	9b00      	ldr	r3, [sp, #0]
 800cc60:	f805 9b01 	strb.w	r9, [r5], #1
 800cc64:	1aea      	subs	r2, r5, r3
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	dd07      	ble.n	800cc7c <_dtoa_r+0xb64>
 800cc6c:	4651      	mov	r1, sl
 800cc6e:	2300      	movs	r3, #0
 800cc70:	220a      	movs	r2, #10
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 fe60 	bl	800d938 <__multadd>
 800cc78:	4682      	mov	sl, r0
 800cc7a:	e7ea      	b.n	800cc52 <_dtoa_r+0xb3a>
 800cc7c:	9b01      	ldr	r3, [sp, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	bfc8      	it	gt
 800cc82:	461d      	movgt	r5, r3
 800cc84:	9b00      	ldr	r3, [sp, #0]
 800cc86:	bfd8      	it	le
 800cc88:	2501      	movle	r5, #1
 800cc8a:	441d      	add	r5, r3
 800cc8c:	f04f 0800 	mov.w	r8, #0
 800cc90:	4651      	mov	r1, sl
 800cc92:	2201      	movs	r2, #1
 800cc94:	4620      	mov	r0, r4
 800cc96:	f001 f847 	bl	800dd28 <__lshift>
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	4682      	mov	sl, r0
 800cc9e:	f001 f8af 	bl	800de00 <__mcmp>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	dc96      	bgt.n	800cbd4 <_dtoa_r+0xabc>
 800cca6:	d102      	bne.n	800ccae <_dtoa_r+0xb96>
 800cca8:	f019 0f01 	tst.w	r9, #1
 800ccac:	d192      	bne.n	800cbd4 <_dtoa_r+0xabc>
 800ccae:	462b      	mov	r3, r5
 800ccb0:	461d      	mov	r5, r3
 800ccb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccb6:	2a30      	cmp	r2, #48	; 0x30
 800ccb8:	d0fa      	beq.n	800ccb0 <_dtoa_r+0xb98>
 800ccba:	e6dd      	b.n	800ca78 <_dtoa_r+0x960>
 800ccbc:	9a00      	ldr	r2, [sp, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d189      	bne.n	800cbd6 <_dtoa_r+0xabe>
 800ccc2:	f10b 0b01 	add.w	fp, fp, #1
 800ccc6:	2331      	movs	r3, #49	; 0x31
 800ccc8:	e796      	b.n	800cbf8 <_dtoa_r+0xae0>
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <_dtoa_r+0xbdc>)
 800cccc:	f7ff ba99 	b.w	800c202 <_dtoa_r+0xea>
 800ccd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f47f aa6d 	bne.w	800c1b2 <_dtoa_r+0x9a>
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <_dtoa_r+0xbe0>)
 800ccda:	f7ff ba92 	b.w	800c202 <_dtoa_r+0xea>
 800ccde:	9b01      	ldr	r3, [sp, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	dcb5      	bgt.n	800cc50 <_dtoa_r+0xb38>
 800cce4:	9b07      	ldr	r3, [sp, #28]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	f73f aeb1 	bgt.w	800ca4e <_dtoa_r+0x936>
 800ccec:	e7b0      	b.n	800cc50 <_dtoa_r+0xb38>
 800ccee:	bf00      	nop
 800ccf0:	0801013b 	.word	0x0801013b
 800ccf4:	0800fea0 	.word	0x0800fea0
 800ccf8:	080100d6 	.word	0x080100d6

0800ccfc <_free_r>:
 800ccfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccfe:	2900      	cmp	r1, #0
 800cd00:	d044      	beq.n	800cd8c <_free_r+0x90>
 800cd02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd06:	9001      	str	r0, [sp, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd0e:	bfb8      	it	lt
 800cd10:	18e4      	addlt	r4, r4, r3
 800cd12:	f7fe f893 	bl	800ae3c <__malloc_lock>
 800cd16:	4a1e      	ldr	r2, [pc, #120]	; (800cd90 <_free_r+0x94>)
 800cd18:	9801      	ldr	r0, [sp, #4]
 800cd1a:	6813      	ldr	r3, [r2, #0]
 800cd1c:	b933      	cbnz	r3, 800cd2c <_free_r+0x30>
 800cd1e:	6063      	str	r3, [r4, #4]
 800cd20:	6014      	str	r4, [r2, #0]
 800cd22:	b003      	add	sp, #12
 800cd24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd28:	f7fe b88e 	b.w	800ae48 <__malloc_unlock>
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	d908      	bls.n	800cd42 <_free_r+0x46>
 800cd30:	6825      	ldr	r5, [r4, #0]
 800cd32:	1961      	adds	r1, r4, r5
 800cd34:	428b      	cmp	r3, r1
 800cd36:	bf01      	itttt	eq
 800cd38:	6819      	ldreq	r1, [r3, #0]
 800cd3a:	685b      	ldreq	r3, [r3, #4]
 800cd3c:	1949      	addeq	r1, r1, r5
 800cd3e:	6021      	streq	r1, [r4, #0]
 800cd40:	e7ed      	b.n	800cd1e <_free_r+0x22>
 800cd42:	461a      	mov	r2, r3
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	b10b      	cbz	r3, 800cd4c <_free_r+0x50>
 800cd48:	42a3      	cmp	r3, r4
 800cd4a:	d9fa      	bls.n	800cd42 <_free_r+0x46>
 800cd4c:	6811      	ldr	r1, [r2, #0]
 800cd4e:	1855      	adds	r5, r2, r1
 800cd50:	42a5      	cmp	r5, r4
 800cd52:	d10b      	bne.n	800cd6c <_free_r+0x70>
 800cd54:	6824      	ldr	r4, [r4, #0]
 800cd56:	4421      	add	r1, r4
 800cd58:	1854      	adds	r4, r2, r1
 800cd5a:	42a3      	cmp	r3, r4
 800cd5c:	6011      	str	r1, [r2, #0]
 800cd5e:	d1e0      	bne.n	800cd22 <_free_r+0x26>
 800cd60:	681c      	ldr	r4, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	6053      	str	r3, [r2, #4]
 800cd66:	440c      	add	r4, r1
 800cd68:	6014      	str	r4, [r2, #0]
 800cd6a:	e7da      	b.n	800cd22 <_free_r+0x26>
 800cd6c:	d902      	bls.n	800cd74 <_free_r+0x78>
 800cd6e:	230c      	movs	r3, #12
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	e7d6      	b.n	800cd22 <_free_r+0x26>
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	1961      	adds	r1, r4, r5
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf04      	itt	eq
 800cd7c:	6819      	ldreq	r1, [r3, #0]
 800cd7e:	685b      	ldreq	r3, [r3, #4]
 800cd80:	6063      	str	r3, [r4, #4]
 800cd82:	bf04      	itt	eq
 800cd84:	1949      	addeq	r1, r1, r5
 800cd86:	6021      	streq	r1, [r4, #0]
 800cd88:	6054      	str	r4, [r2, #4]
 800cd8a:	e7ca      	b.n	800cd22 <_free_r+0x26>
 800cd8c:	b003      	add	sp, #12
 800cd8e:	bd30      	pop	{r4, r5, pc}
 800cd90:	200046f8 	.word	0x200046f8

0800cd94 <rshift>:
 800cd94:	6903      	ldr	r3, [r0, #16]
 800cd96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cda2:	f100 0414 	add.w	r4, r0, #20
 800cda6:	dd45      	ble.n	800ce34 <rshift+0xa0>
 800cda8:	f011 011f 	ands.w	r1, r1, #31
 800cdac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cdb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdb4:	d10c      	bne.n	800cdd0 <rshift+0x3c>
 800cdb6:	f100 0710 	add.w	r7, r0, #16
 800cdba:	4629      	mov	r1, r5
 800cdbc:	42b1      	cmp	r1, r6
 800cdbe:	d334      	bcc.n	800ce2a <rshift+0x96>
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	1eea      	subs	r2, r5, #3
 800cdc6:	4296      	cmp	r6, r2
 800cdc8:	bf38      	it	cc
 800cdca:	2300      	movcc	r3, #0
 800cdcc:	4423      	add	r3, r4
 800cdce:	e015      	b.n	800cdfc <rshift+0x68>
 800cdd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdd4:	f1c1 0820 	rsb	r8, r1, #32
 800cdd8:	40cf      	lsrs	r7, r1
 800cdda:	f105 0e04 	add.w	lr, r5, #4
 800cdde:	46a1      	mov	r9, r4
 800cde0:	4576      	cmp	r6, lr
 800cde2:	46f4      	mov	ip, lr
 800cde4:	d815      	bhi.n	800ce12 <rshift+0x7e>
 800cde6:	1a9a      	subs	r2, r3, r2
 800cde8:	0092      	lsls	r2, r2, #2
 800cdea:	3a04      	subs	r2, #4
 800cdec:	3501      	adds	r5, #1
 800cdee:	42ae      	cmp	r6, r5
 800cdf0:	bf38      	it	cc
 800cdf2:	2200      	movcc	r2, #0
 800cdf4:	18a3      	adds	r3, r4, r2
 800cdf6:	50a7      	str	r7, [r4, r2]
 800cdf8:	b107      	cbz	r7, 800cdfc <rshift+0x68>
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	1b1a      	subs	r2, r3, r4
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce04:	bf08      	it	eq
 800ce06:	2300      	moveq	r3, #0
 800ce08:	6102      	str	r2, [r0, #16]
 800ce0a:	bf08      	it	eq
 800ce0c:	6143      	streq	r3, [r0, #20]
 800ce0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce12:	f8dc c000 	ldr.w	ip, [ip]
 800ce16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ce1e:	f849 7b04 	str.w	r7, [r9], #4
 800ce22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce26:	40cf      	lsrs	r7, r1
 800ce28:	e7da      	b.n	800cde0 <rshift+0x4c>
 800ce2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce32:	e7c3      	b.n	800cdbc <rshift+0x28>
 800ce34:	4623      	mov	r3, r4
 800ce36:	e7e1      	b.n	800cdfc <rshift+0x68>

0800ce38 <__hexdig_fun>:
 800ce38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce3c:	2b09      	cmp	r3, #9
 800ce3e:	d802      	bhi.n	800ce46 <__hexdig_fun+0xe>
 800ce40:	3820      	subs	r0, #32
 800ce42:	b2c0      	uxtb	r0, r0
 800ce44:	4770      	bx	lr
 800ce46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce4a:	2b05      	cmp	r3, #5
 800ce4c:	d801      	bhi.n	800ce52 <__hexdig_fun+0x1a>
 800ce4e:	3847      	subs	r0, #71	; 0x47
 800ce50:	e7f7      	b.n	800ce42 <__hexdig_fun+0xa>
 800ce52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce56:	2b05      	cmp	r3, #5
 800ce58:	d801      	bhi.n	800ce5e <__hexdig_fun+0x26>
 800ce5a:	3827      	subs	r0, #39	; 0x27
 800ce5c:	e7f1      	b.n	800ce42 <__hexdig_fun+0xa>
 800ce5e:	2000      	movs	r0, #0
 800ce60:	4770      	bx	lr
	...

0800ce64 <__gethex>:
 800ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce68:	4617      	mov	r7, r2
 800ce6a:	680a      	ldr	r2, [r1, #0]
 800ce6c:	b085      	sub	sp, #20
 800ce6e:	f102 0b02 	add.w	fp, r2, #2
 800ce72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce7a:	4681      	mov	r9, r0
 800ce7c:	468a      	mov	sl, r1
 800ce7e:	9302      	str	r3, [sp, #8]
 800ce80:	32fe      	adds	r2, #254	; 0xfe
 800ce82:	eb02 030b 	add.w	r3, r2, fp
 800ce86:	46d8      	mov	r8, fp
 800ce88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	2830      	cmp	r0, #48	; 0x30
 800ce90:	d0f7      	beq.n	800ce82 <__gethex+0x1e>
 800ce92:	f7ff ffd1 	bl	800ce38 <__hexdig_fun>
 800ce96:	4604      	mov	r4, r0
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d138      	bne.n	800cf0e <__gethex+0xaa>
 800ce9c:	49a7      	ldr	r1, [pc, #668]	; (800d13c <__gethex+0x2d8>)
 800ce9e:	2201      	movs	r2, #1
 800cea0:	4640      	mov	r0, r8
 800cea2:	f7fe ff67 	bl	800bd74 <strncmp>
 800cea6:	4606      	mov	r6, r0
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d169      	bne.n	800cf80 <__gethex+0x11c>
 800ceac:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ceb0:	465d      	mov	r5, fp
 800ceb2:	f7ff ffc1 	bl	800ce38 <__hexdig_fun>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d064      	beq.n	800cf84 <__gethex+0x120>
 800ceba:	465a      	mov	r2, fp
 800cebc:	7810      	ldrb	r0, [r2, #0]
 800cebe:	2830      	cmp	r0, #48	; 0x30
 800cec0:	4690      	mov	r8, r2
 800cec2:	f102 0201 	add.w	r2, r2, #1
 800cec6:	d0f9      	beq.n	800cebc <__gethex+0x58>
 800cec8:	f7ff ffb6 	bl	800ce38 <__hexdig_fun>
 800cecc:	2301      	movs	r3, #1
 800cece:	fab0 f480 	clz	r4, r0
 800ced2:	0964      	lsrs	r4, r4, #5
 800ced4:	465e      	mov	r6, fp
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	4642      	mov	r2, r8
 800ceda:	4615      	mov	r5, r2
 800cedc:	3201      	adds	r2, #1
 800cede:	7828      	ldrb	r0, [r5, #0]
 800cee0:	f7ff ffaa 	bl	800ce38 <__hexdig_fun>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d1f8      	bne.n	800ceda <__gethex+0x76>
 800cee8:	4994      	ldr	r1, [pc, #592]	; (800d13c <__gethex+0x2d8>)
 800ceea:	2201      	movs	r2, #1
 800ceec:	4628      	mov	r0, r5
 800ceee:	f7fe ff41 	bl	800bd74 <strncmp>
 800cef2:	b978      	cbnz	r0, 800cf14 <__gethex+0xb0>
 800cef4:	b946      	cbnz	r6, 800cf08 <__gethex+0xa4>
 800cef6:	1c6e      	adds	r6, r5, #1
 800cef8:	4632      	mov	r2, r6
 800cefa:	4615      	mov	r5, r2
 800cefc:	3201      	adds	r2, #1
 800cefe:	7828      	ldrb	r0, [r5, #0]
 800cf00:	f7ff ff9a 	bl	800ce38 <__hexdig_fun>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	d1f8      	bne.n	800cefa <__gethex+0x96>
 800cf08:	1b73      	subs	r3, r6, r5
 800cf0a:	009e      	lsls	r6, r3, #2
 800cf0c:	e004      	b.n	800cf18 <__gethex+0xb4>
 800cf0e:	2400      	movs	r4, #0
 800cf10:	4626      	mov	r6, r4
 800cf12:	e7e1      	b.n	800ced8 <__gethex+0x74>
 800cf14:	2e00      	cmp	r6, #0
 800cf16:	d1f7      	bne.n	800cf08 <__gethex+0xa4>
 800cf18:	782b      	ldrb	r3, [r5, #0]
 800cf1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf1e:	2b50      	cmp	r3, #80	; 0x50
 800cf20:	d13d      	bne.n	800cf9e <__gethex+0x13a>
 800cf22:	786b      	ldrb	r3, [r5, #1]
 800cf24:	2b2b      	cmp	r3, #43	; 0x2b
 800cf26:	d02f      	beq.n	800cf88 <__gethex+0x124>
 800cf28:	2b2d      	cmp	r3, #45	; 0x2d
 800cf2a:	d031      	beq.n	800cf90 <__gethex+0x12c>
 800cf2c:	1c69      	adds	r1, r5, #1
 800cf2e:	f04f 0b00 	mov.w	fp, #0
 800cf32:	7808      	ldrb	r0, [r1, #0]
 800cf34:	f7ff ff80 	bl	800ce38 <__hexdig_fun>
 800cf38:	1e42      	subs	r2, r0, #1
 800cf3a:	b2d2      	uxtb	r2, r2
 800cf3c:	2a18      	cmp	r2, #24
 800cf3e:	d82e      	bhi.n	800cf9e <__gethex+0x13a>
 800cf40:	f1a0 0210 	sub.w	r2, r0, #16
 800cf44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf48:	f7ff ff76 	bl	800ce38 <__hexdig_fun>
 800cf4c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800cf50:	fa5f fc8c 	uxtb.w	ip, ip
 800cf54:	f1bc 0f18 	cmp.w	ip, #24
 800cf58:	d91d      	bls.n	800cf96 <__gethex+0x132>
 800cf5a:	f1bb 0f00 	cmp.w	fp, #0
 800cf5e:	d000      	beq.n	800cf62 <__gethex+0xfe>
 800cf60:	4252      	negs	r2, r2
 800cf62:	4416      	add	r6, r2
 800cf64:	f8ca 1000 	str.w	r1, [sl]
 800cf68:	b1dc      	cbz	r4, 800cfa2 <__gethex+0x13e>
 800cf6a:	9b01      	ldr	r3, [sp, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bf14      	ite	ne
 800cf70:	f04f 0800 	movne.w	r8, #0
 800cf74:	f04f 0806 	moveq.w	r8, #6
 800cf78:	4640      	mov	r0, r8
 800cf7a:	b005      	add	sp, #20
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf80:	4645      	mov	r5, r8
 800cf82:	4626      	mov	r6, r4
 800cf84:	2401      	movs	r4, #1
 800cf86:	e7c7      	b.n	800cf18 <__gethex+0xb4>
 800cf88:	f04f 0b00 	mov.w	fp, #0
 800cf8c:	1ca9      	adds	r1, r5, #2
 800cf8e:	e7d0      	b.n	800cf32 <__gethex+0xce>
 800cf90:	f04f 0b01 	mov.w	fp, #1
 800cf94:	e7fa      	b.n	800cf8c <__gethex+0x128>
 800cf96:	230a      	movs	r3, #10
 800cf98:	fb03 0002 	mla	r0, r3, r2, r0
 800cf9c:	e7d0      	b.n	800cf40 <__gethex+0xdc>
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	e7e0      	b.n	800cf64 <__gethex+0x100>
 800cfa2:	eba5 0308 	sub.w	r3, r5, r8
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	2b07      	cmp	r3, #7
 800cfac:	dc0a      	bgt.n	800cfc4 <__gethex+0x160>
 800cfae:	4648      	mov	r0, r9
 800cfb0:	f000 fc60 	bl	800d874 <_Balloc>
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	b940      	cbnz	r0, 800cfca <__gethex+0x166>
 800cfb8:	4b61      	ldr	r3, [pc, #388]	; (800d140 <__gethex+0x2dc>)
 800cfba:	4602      	mov	r2, r0
 800cfbc:	21e4      	movs	r1, #228	; 0xe4
 800cfbe:	4861      	ldr	r0, [pc, #388]	; (800d144 <__gethex+0x2e0>)
 800cfc0:	f7ff f804 	bl	800bfcc <__assert_func>
 800cfc4:	3101      	adds	r1, #1
 800cfc6:	105b      	asrs	r3, r3, #1
 800cfc8:	e7ef      	b.n	800cfaa <__gethex+0x146>
 800cfca:	f100 0a14 	add.w	sl, r0, #20
 800cfce:	2300      	movs	r3, #0
 800cfd0:	495a      	ldr	r1, [pc, #360]	; (800d13c <__gethex+0x2d8>)
 800cfd2:	f8cd a004 	str.w	sl, [sp, #4]
 800cfd6:	469b      	mov	fp, r3
 800cfd8:	45a8      	cmp	r8, r5
 800cfda:	d342      	bcc.n	800d062 <__gethex+0x1fe>
 800cfdc:	9801      	ldr	r0, [sp, #4]
 800cfde:	f840 bb04 	str.w	fp, [r0], #4
 800cfe2:	eba0 000a 	sub.w	r0, r0, sl
 800cfe6:	1080      	asrs	r0, r0, #2
 800cfe8:	6120      	str	r0, [r4, #16]
 800cfea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cfee:	4658      	mov	r0, fp
 800cff0:	f000 fd32 	bl	800da58 <__hi0bits>
 800cff4:	683d      	ldr	r5, [r7, #0]
 800cff6:	eba8 0000 	sub.w	r0, r8, r0
 800cffa:	42a8      	cmp	r0, r5
 800cffc:	dd59      	ble.n	800d0b2 <__gethex+0x24e>
 800cffe:	eba0 0805 	sub.w	r8, r0, r5
 800d002:	4641      	mov	r1, r8
 800d004:	4620      	mov	r0, r4
 800d006:	f001 f8c1 	bl	800e18c <__any_on>
 800d00a:	4683      	mov	fp, r0
 800d00c:	b1b8      	cbz	r0, 800d03e <__gethex+0x1da>
 800d00e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d012:	1159      	asrs	r1, r3, #5
 800d014:	f003 021f 	and.w	r2, r3, #31
 800d018:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d01c:	f04f 0b01 	mov.w	fp, #1
 800d020:	fa0b f202 	lsl.w	r2, fp, r2
 800d024:	420a      	tst	r2, r1
 800d026:	d00a      	beq.n	800d03e <__gethex+0x1da>
 800d028:	455b      	cmp	r3, fp
 800d02a:	dd06      	ble.n	800d03a <__gethex+0x1d6>
 800d02c:	f1a8 0102 	sub.w	r1, r8, #2
 800d030:	4620      	mov	r0, r4
 800d032:	f001 f8ab 	bl	800e18c <__any_on>
 800d036:	2800      	cmp	r0, #0
 800d038:	d138      	bne.n	800d0ac <__gethex+0x248>
 800d03a:	f04f 0b02 	mov.w	fp, #2
 800d03e:	4641      	mov	r1, r8
 800d040:	4620      	mov	r0, r4
 800d042:	f7ff fea7 	bl	800cd94 <rshift>
 800d046:	4446      	add	r6, r8
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	42b3      	cmp	r3, r6
 800d04c:	da41      	bge.n	800d0d2 <__gethex+0x26e>
 800d04e:	4621      	mov	r1, r4
 800d050:	4648      	mov	r0, r9
 800d052:	f000 fc4f 	bl	800d8f4 <_Bfree>
 800d056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d058:	2300      	movs	r3, #0
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d060:	e78a      	b.n	800cf78 <__gethex+0x114>
 800d062:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d066:	2a2e      	cmp	r2, #46	; 0x2e
 800d068:	d014      	beq.n	800d094 <__gethex+0x230>
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d106      	bne.n	800d07c <__gethex+0x218>
 800d06e:	9b01      	ldr	r3, [sp, #4]
 800d070:	f843 bb04 	str.w	fp, [r3], #4
 800d074:	f04f 0b00 	mov.w	fp, #0
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	465b      	mov	r3, fp
 800d07c:	7828      	ldrb	r0, [r5, #0]
 800d07e:	9303      	str	r3, [sp, #12]
 800d080:	f7ff feda 	bl	800ce38 <__hexdig_fun>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	f000 000f 	and.w	r0, r0, #15
 800d08a:	4098      	lsls	r0, r3
 800d08c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d090:	3304      	adds	r3, #4
 800d092:	e7a1      	b.n	800cfd8 <__gethex+0x174>
 800d094:	45a8      	cmp	r8, r5
 800d096:	d8e8      	bhi.n	800d06a <__gethex+0x206>
 800d098:	2201      	movs	r2, #1
 800d09a:	4628      	mov	r0, r5
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	f7fe fe69 	bl	800bd74 <strncmp>
 800d0a2:	4926      	ldr	r1, [pc, #152]	; (800d13c <__gethex+0x2d8>)
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d1df      	bne.n	800d06a <__gethex+0x206>
 800d0aa:	e795      	b.n	800cfd8 <__gethex+0x174>
 800d0ac:	f04f 0b03 	mov.w	fp, #3
 800d0b0:	e7c5      	b.n	800d03e <__gethex+0x1da>
 800d0b2:	da0b      	bge.n	800d0cc <__gethex+0x268>
 800d0b4:	eba5 0800 	sub.w	r8, r5, r0
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	4648      	mov	r0, r9
 800d0be:	f000 fe33 	bl	800dd28 <__lshift>
 800d0c2:	eba6 0608 	sub.w	r6, r6, r8
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	f100 0a14 	add.w	sl, r0, #20
 800d0cc:	f04f 0b00 	mov.w	fp, #0
 800d0d0:	e7ba      	b.n	800d048 <__gethex+0x1e4>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	42b3      	cmp	r3, r6
 800d0d6:	dd73      	ble.n	800d1c0 <__gethex+0x35c>
 800d0d8:	1b9e      	subs	r6, r3, r6
 800d0da:	42b5      	cmp	r5, r6
 800d0dc:	dc34      	bgt.n	800d148 <__gethex+0x2e4>
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d023      	beq.n	800d12c <__gethex+0x2c8>
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d025      	beq.n	800d134 <__gethex+0x2d0>
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d115      	bne.n	800d118 <__gethex+0x2b4>
 800d0ec:	42b5      	cmp	r5, r6
 800d0ee:	d113      	bne.n	800d118 <__gethex+0x2b4>
 800d0f0:	2d01      	cmp	r5, #1
 800d0f2:	d10b      	bne.n	800d10c <__gethex+0x2a8>
 800d0f4:	9a02      	ldr	r2, [sp, #8]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	6123      	str	r3, [r4, #16]
 800d0fe:	f8ca 3000 	str.w	r3, [sl]
 800d102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d104:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d108:	601c      	str	r4, [r3, #0]
 800d10a:	e735      	b.n	800cf78 <__gethex+0x114>
 800d10c:	1e69      	subs	r1, r5, #1
 800d10e:	4620      	mov	r0, r4
 800d110:	f001 f83c 	bl	800e18c <__any_on>
 800d114:	2800      	cmp	r0, #0
 800d116:	d1ed      	bne.n	800d0f4 <__gethex+0x290>
 800d118:	4621      	mov	r1, r4
 800d11a:	4648      	mov	r0, r9
 800d11c:	f000 fbea 	bl	800d8f4 <_Bfree>
 800d120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d122:	2300      	movs	r3, #0
 800d124:	6013      	str	r3, [r2, #0]
 800d126:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d12a:	e725      	b.n	800cf78 <__gethex+0x114>
 800d12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f2      	bne.n	800d118 <__gethex+0x2b4>
 800d132:	e7df      	b.n	800d0f4 <__gethex+0x290>
 800d134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1dc      	bne.n	800d0f4 <__gethex+0x290>
 800d13a:	e7ed      	b.n	800d118 <__gethex+0x2b4>
 800d13c:	0800fec9 	.word	0x0800fec9
 800d140:	0801013b 	.word	0x0801013b
 800d144:	0801014c 	.word	0x0801014c
 800d148:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d14c:	f1bb 0f00 	cmp.w	fp, #0
 800d150:	d133      	bne.n	800d1ba <__gethex+0x356>
 800d152:	f1b8 0f00 	cmp.w	r8, #0
 800d156:	d004      	beq.n	800d162 <__gethex+0x2fe>
 800d158:	4641      	mov	r1, r8
 800d15a:	4620      	mov	r0, r4
 800d15c:	f001 f816 	bl	800e18c <__any_on>
 800d160:	4683      	mov	fp, r0
 800d162:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d166:	2301      	movs	r3, #1
 800d168:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d16c:	f008 081f 	and.w	r8, r8, #31
 800d170:	fa03 f308 	lsl.w	r3, r3, r8
 800d174:	4213      	tst	r3, r2
 800d176:	4631      	mov	r1, r6
 800d178:	4620      	mov	r0, r4
 800d17a:	bf18      	it	ne
 800d17c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d180:	1bad      	subs	r5, r5, r6
 800d182:	f7ff fe07 	bl	800cd94 <rshift>
 800d186:	687e      	ldr	r6, [r7, #4]
 800d188:	f04f 0802 	mov.w	r8, #2
 800d18c:	f1bb 0f00 	cmp.w	fp, #0
 800d190:	d04a      	beq.n	800d228 <__gethex+0x3c4>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2b02      	cmp	r3, #2
 800d196:	d016      	beq.n	800d1c6 <__gethex+0x362>
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d018      	beq.n	800d1ce <__gethex+0x36a>
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d109      	bne.n	800d1b4 <__gethex+0x350>
 800d1a0:	f01b 0f02 	tst.w	fp, #2
 800d1a4:	d006      	beq.n	800d1b4 <__gethex+0x350>
 800d1a6:	f8da 3000 	ldr.w	r3, [sl]
 800d1aa:	ea4b 0b03 	orr.w	fp, fp, r3
 800d1ae:	f01b 0f01 	tst.w	fp, #1
 800d1b2:	d10f      	bne.n	800d1d4 <__gethex+0x370>
 800d1b4:	f048 0810 	orr.w	r8, r8, #16
 800d1b8:	e036      	b.n	800d228 <__gethex+0x3c4>
 800d1ba:	f04f 0b01 	mov.w	fp, #1
 800d1be:	e7d0      	b.n	800d162 <__gethex+0x2fe>
 800d1c0:	f04f 0801 	mov.w	r8, #1
 800d1c4:	e7e2      	b.n	800d18c <__gethex+0x328>
 800d1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c8:	f1c3 0301 	rsb	r3, r3, #1
 800d1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d0ef      	beq.n	800d1b4 <__gethex+0x350>
 800d1d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1d8:	f104 0214 	add.w	r2, r4, #20
 800d1dc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4694      	mov	ip, r2
 800d1ea:	f852 1b04 	ldr.w	r1, [r2], #4
 800d1ee:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d1f2:	d01e      	beq.n	800d232 <__gethex+0x3ce>
 800d1f4:	3101      	adds	r1, #1
 800d1f6:	f8cc 1000 	str.w	r1, [ip]
 800d1fa:	f1b8 0f02 	cmp.w	r8, #2
 800d1fe:	f104 0214 	add.w	r2, r4, #20
 800d202:	d13d      	bne.n	800d280 <__gethex+0x41c>
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	3b01      	subs	r3, #1
 800d208:	42ab      	cmp	r3, r5
 800d20a:	d10b      	bne.n	800d224 <__gethex+0x3c0>
 800d20c:	1169      	asrs	r1, r5, #5
 800d20e:	2301      	movs	r3, #1
 800d210:	f005 051f 	and.w	r5, r5, #31
 800d214:	fa03 f505 	lsl.w	r5, r3, r5
 800d218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d21c:	421d      	tst	r5, r3
 800d21e:	bf18      	it	ne
 800d220:	f04f 0801 	movne.w	r8, #1
 800d224:	f048 0820 	orr.w	r8, r8, #32
 800d228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d22a:	601c      	str	r4, [r3, #0]
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	601e      	str	r6, [r3, #0]
 800d230:	e6a2      	b.n	800cf78 <__gethex+0x114>
 800d232:	4290      	cmp	r0, r2
 800d234:	f842 3c04 	str.w	r3, [r2, #-4]
 800d238:	d8d6      	bhi.n	800d1e8 <__gethex+0x384>
 800d23a:	68a2      	ldr	r2, [r4, #8]
 800d23c:	4593      	cmp	fp, r2
 800d23e:	db17      	blt.n	800d270 <__gethex+0x40c>
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	4648      	mov	r0, r9
 800d244:	3101      	adds	r1, #1
 800d246:	f000 fb15 	bl	800d874 <_Balloc>
 800d24a:	4682      	mov	sl, r0
 800d24c:	b918      	cbnz	r0, 800d256 <__gethex+0x3f2>
 800d24e:	4b1b      	ldr	r3, [pc, #108]	; (800d2bc <__gethex+0x458>)
 800d250:	4602      	mov	r2, r0
 800d252:	2184      	movs	r1, #132	; 0x84
 800d254:	e6b3      	b.n	800cfbe <__gethex+0x15a>
 800d256:	6922      	ldr	r2, [r4, #16]
 800d258:	3202      	adds	r2, #2
 800d25a:	f104 010c 	add.w	r1, r4, #12
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	300c      	adds	r0, #12
 800d262:	f7fe fe94 	bl	800bf8e <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	4648      	mov	r0, r9
 800d26a:	f000 fb43 	bl	800d8f4 <_Bfree>
 800d26e:	4654      	mov	r4, sl
 800d270:	6922      	ldr	r2, [r4, #16]
 800d272:	1c51      	adds	r1, r2, #1
 800d274:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d278:	6121      	str	r1, [r4, #16]
 800d27a:	2101      	movs	r1, #1
 800d27c:	6151      	str	r1, [r2, #20]
 800d27e:	e7bc      	b.n	800d1fa <__gethex+0x396>
 800d280:	6921      	ldr	r1, [r4, #16]
 800d282:	4559      	cmp	r1, fp
 800d284:	dd0b      	ble.n	800d29e <__gethex+0x43a>
 800d286:	2101      	movs	r1, #1
 800d288:	4620      	mov	r0, r4
 800d28a:	f7ff fd83 	bl	800cd94 <rshift>
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	3601      	adds	r6, #1
 800d292:	42b3      	cmp	r3, r6
 800d294:	f6ff aedb 	blt.w	800d04e <__gethex+0x1ea>
 800d298:	f04f 0801 	mov.w	r8, #1
 800d29c:	e7c2      	b.n	800d224 <__gethex+0x3c0>
 800d29e:	f015 051f 	ands.w	r5, r5, #31
 800d2a2:	d0f9      	beq.n	800d298 <__gethex+0x434>
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	441a      	add	r2, r3
 800d2a8:	f1c5 0520 	rsb	r5, r5, #32
 800d2ac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d2b0:	f000 fbd2 	bl	800da58 <__hi0bits>
 800d2b4:	42a8      	cmp	r0, r5
 800d2b6:	dbe6      	blt.n	800d286 <__gethex+0x422>
 800d2b8:	e7ee      	b.n	800d298 <__gethex+0x434>
 800d2ba:	bf00      	nop
 800d2bc:	0801013b 	.word	0x0801013b

0800d2c0 <L_shift>:
 800d2c0:	f1c2 0208 	rsb	r2, r2, #8
 800d2c4:	0092      	lsls	r2, r2, #2
 800d2c6:	b570      	push	{r4, r5, r6, lr}
 800d2c8:	f1c2 0620 	rsb	r6, r2, #32
 800d2cc:	6843      	ldr	r3, [r0, #4]
 800d2ce:	6804      	ldr	r4, [r0, #0]
 800d2d0:	fa03 f506 	lsl.w	r5, r3, r6
 800d2d4:	432c      	orrs	r4, r5
 800d2d6:	40d3      	lsrs	r3, r2
 800d2d8:	6004      	str	r4, [r0, #0]
 800d2da:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2de:	4288      	cmp	r0, r1
 800d2e0:	d3f4      	bcc.n	800d2cc <L_shift+0xc>
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}

0800d2e4 <__match>:
 800d2e4:	b530      	push	{r4, r5, lr}
 800d2e6:	6803      	ldr	r3, [r0, #0]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ee:	b914      	cbnz	r4, 800d2f6 <__match+0x12>
 800d2f0:	6003      	str	r3, [r0, #0]
 800d2f2:	2001      	movs	r0, #1
 800d2f4:	bd30      	pop	{r4, r5, pc}
 800d2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2fe:	2d19      	cmp	r5, #25
 800d300:	bf98      	it	ls
 800d302:	3220      	addls	r2, #32
 800d304:	42a2      	cmp	r2, r4
 800d306:	d0f0      	beq.n	800d2ea <__match+0x6>
 800d308:	2000      	movs	r0, #0
 800d30a:	e7f3      	b.n	800d2f4 <__match+0x10>

0800d30c <__hexnan>:
 800d30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	680b      	ldr	r3, [r1, #0]
 800d312:	6801      	ldr	r1, [r0, #0]
 800d314:	115e      	asrs	r6, r3, #5
 800d316:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d31a:	f013 031f 	ands.w	r3, r3, #31
 800d31e:	b087      	sub	sp, #28
 800d320:	bf18      	it	ne
 800d322:	3604      	addne	r6, #4
 800d324:	2500      	movs	r5, #0
 800d326:	1f37      	subs	r7, r6, #4
 800d328:	4682      	mov	sl, r0
 800d32a:	4690      	mov	r8, r2
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d332:	46b9      	mov	r9, r7
 800d334:	463c      	mov	r4, r7
 800d336:	9502      	str	r5, [sp, #8]
 800d338:	46ab      	mov	fp, r5
 800d33a:	784a      	ldrb	r2, [r1, #1]
 800d33c:	1c4b      	adds	r3, r1, #1
 800d33e:	9303      	str	r3, [sp, #12]
 800d340:	b342      	cbz	r2, 800d394 <__hexnan+0x88>
 800d342:	4610      	mov	r0, r2
 800d344:	9105      	str	r1, [sp, #20]
 800d346:	9204      	str	r2, [sp, #16]
 800d348:	f7ff fd76 	bl	800ce38 <__hexdig_fun>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d14f      	bne.n	800d3f0 <__hexnan+0xe4>
 800d350:	9a04      	ldr	r2, [sp, #16]
 800d352:	9905      	ldr	r1, [sp, #20]
 800d354:	2a20      	cmp	r2, #32
 800d356:	d818      	bhi.n	800d38a <__hexnan+0x7e>
 800d358:	9b02      	ldr	r3, [sp, #8]
 800d35a:	459b      	cmp	fp, r3
 800d35c:	dd13      	ble.n	800d386 <__hexnan+0x7a>
 800d35e:	454c      	cmp	r4, r9
 800d360:	d206      	bcs.n	800d370 <__hexnan+0x64>
 800d362:	2d07      	cmp	r5, #7
 800d364:	dc04      	bgt.n	800d370 <__hexnan+0x64>
 800d366:	462a      	mov	r2, r5
 800d368:	4649      	mov	r1, r9
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff ffa8 	bl	800d2c0 <L_shift>
 800d370:	4544      	cmp	r4, r8
 800d372:	d950      	bls.n	800d416 <__hexnan+0x10a>
 800d374:	2300      	movs	r3, #0
 800d376:	f1a4 0904 	sub.w	r9, r4, #4
 800d37a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d37e:	f8cd b008 	str.w	fp, [sp, #8]
 800d382:	464c      	mov	r4, r9
 800d384:	461d      	mov	r5, r3
 800d386:	9903      	ldr	r1, [sp, #12]
 800d388:	e7d7      	b.n	800d33a <__hexnan+0x2e>
 800d38a:	2a29      	cmp	r2, #41	; 0x29
 800d38c:	d155      	bne.n	800d43a <__hexnan+0x12e>
 800d38e:	3102      	adds	r1, #2
 800d390:	f8ca 1000 	str.w	r1, [sl]
 800d394:	f1bb 0f00 	cmp.w	fp, #0
 800d398:	d04f      	beq.n	800d43a <__hexnan+0x12e>
 800d39a:	454c      	cmp	r4, r9
 800d39c:	d206      	bcs.n	800d3ac <__hexnan+0xa0>
 800d39e:	2d07      	cmp	r5, #7
 800d3a0:	dc04      	bgt.n	800d3ac <__hexnan+0xa0>
 800d3a2:	462a      	mov	r2, r5
 800d3a4:	4649      	mov	r1, r9
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f7ff ff8a 	bl	800d2c0 <L_shift>
 800d3ac:	4544      	cmp	r4, r8
 800d3ae:	d934      	bls.n	800d41a <__hexnan+0x10e>
 800d3b0:	f1a8 0204 	sub.w	r2, r8, #4
 800d3b4:	4623      	mov	r3, r4
 800d3b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3be:	429f      	cmp	r7, r3
 800d3c0:	d2f9      	bcs.n	800d3b6 <__hexnan+0xaa>
 800d3c2:	1b3b      	subs	r3, r7, r4
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	3e03      	subs	r6, #3
 800d3cc:	3401      	adds	r4, #1
 800d3ce:	42a6      	cmp	r6, r4
 800d3d0:	bf38      	it	cc
 800d3d2:	2304      	movcc	r3, #4
 800d3d4:	4443      	add	r3, r8
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f843 2b04 	str.w	r2, [r3], #4
 800d3dc:	429f      	cmp	r7, r3
 800d3de:	d2fb      	bcs.n	800d3d8 <__hexnan+0xcc>
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	b91b      	cbnz	r3, 800d3ec <__hexnan+0xe0>
 800d3e4:	4547      	cmp	r7, r8
 800d3e6:	d126      	bne.n	800d436 <__hexnan+0x12a>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	2005      	movs	r0, #5
 800d3ee:	e025      	b.n	800d43c <__hexnan+0x130>
 800d3f0:	3501      	adds	r5, #1
 800d3f2:	2d08      	cmp	r5, #8
 800d3f4:	f10b 0b01 	add.w	fp, fp, #1
 800d3f8:	dd06      	ble.n	800d408 <__hexnan+0xfc>
 800d3fa:	4544      	cmp	r4, r8
 800d3fc:	d9c3      	bls.n	800d386 <__hexnan+0x7a>
 800d3fe:	2300      	movs	r3, #0
 800d400:	f844 3c04 	str.w	r3, [r4, #-4]
 800d404:	2501      	movs	r5, #1
 800d406:	3c04      	subs	r4, #4
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	f000 000f 	and.w	r0, r0, #15
 800d40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d412:	6020      	str	r0, [r4, #0]
 800d414:	e7b7      	b.n	800d386 <__hexnan+0x7a>
 800d416:	2508      	movs	r5, #8
 800d418:	e7b5      	b.n	800d386 <__hexnan+0x7a>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0df      	beq.n	800d3e0 <__hexnan+0xd4>
 800d420:	f1c3 0320 	rsb	r3, r3, #32
 800d424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d428:	40da      	lsrs	r2, r3
 800d42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d42e:	4013      	ands	r3, r2
 800d430:	f846 3c04 	str.w	r3, [r6, #-4]
 800d434:	e7d4      	b.n	800d3e0 <__hexnan+0xd4>
 800d436:	3f04      	subs	r7, #4
 800d438:	e7d2      	b.n	800d3e0 <__hexnan+0xd4>
 800d43a:	2004      	movs	r0, #4
 800d43c:	b007      	add	sp, #28
 800d43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d442 <__ssputs_r>:
 800d442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d446:	688e      	ldr	r6, [r1, #8]
 800d448:	461f      	mov	r7, r3
 800d44a:	42be      	cmp	r6, r7
 800d44c:	680b      	ldr	r3, [r1, #0]
 800d44e:	4682      	mov	sl, r0
 800d450:	460c      	mov	r4, r1
 800d452:	4690      	mov	r8, r2
 800d454:	d82c      	bhi.n	800d4b0 <__ssputs_r+0x6e>
 800d456:	898a      	ldrh	r2, [r1, #12]
 800d458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d45c:	d026      	beq.n	800d4ac <__ssputs_r+0x6a>
 800d45e:	6965      	ldr	r5, [r4, #20]
 800d460:	6909      	ldr	r1, [r1, #16]
 800d462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d466:	eba3 0901 	sub.w	r9, r3, r1
 800d46a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d46e:	1c7b      	adds	r3, r7, #1
 800d470:	444b      	add	r3, r9
 800d472:	106d      	asrs	r5, r5, #1
 800d474:	429d      	cmp	r5, r3
 800d476:	bf38      	it	cc
 800d478:	461d      	movcc	r5, r3
 800d47a:	0553      	lsls	r3, r2, #21
 800d47c:	d527      	bpl.n	800d4ce <__ssputs_r+0x8c>
 800d47e:	4629      	mov	r1, r5
 800d480:	f7fd f8bc 	bl	800a5fc <_malloc_r>
 800d484:	4606      	mov	r6, r0
 800d486:	b360      	cbz	r0, 800d4e2 <__ssputs_r+0xa0>
 800d488:	6921      	ldr	r1, [r4, #16]
 800d48a:	464a      	mov	r2, r9
 800d48c:	f7fe fd7f 	bl	800bf8e <memcpy>
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	6126      	str	r6, [r4, #16]
 800d49e:	6165      	str	r5, [r4, #20]
 800d4a0:	444e      	add	r6, r9
 800d4a2:	eba5 0509 	sub.w	r5, r5, r9
 800d4a6:	6026      	str	r6, [r4, #0]
 800d4a8:	60a5      	str	r5, [r4, #8]
 800d4aa:	463e      	mov	r6, r7
 800d4ac:	42be      	cmp	r6, r7
 800d4ae:	d900      	bls.n	800d4b2 <__ssputs_r+0x70>
 800d4b0:	463e      	mov	r6, r7
 800d4b2:	6820      	ldr	r0, [r4, #0]
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	4641      	mov	r1, r8
 800d4b8:	f000 ff1a 	bl	800e2f0 <memmove>
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	1b9b      	subs	r3, r3, r6
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	4433      	add	r3, r6
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	f000 fed2 	bl	800e278 <_realloc_r>
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d1e0      	bne.n	800d49c <__ssputs_r+0x5a>
 800d4da:	6921      	ldr	r1, [r4, #16]
 800d4dc:	4650      	mov	r0, sl
 800d4de:	f7ff fc0d 	bl	800ccfc <_free_r>
 800d4e2:	230c      	movs	r3, #12
 800d4e4:	f8ca 3000 	str.w	r3, [sl]
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ee:	81a3      	strh	r3, [r4, #12]
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4f4:	e7e9      	b.n	800d4ca <__ssputs_r+0x88>
	...

0800d4f8 <_svfiprintf_r>:
 800d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fc:	4698      	mov	r8, r3
 800d4fe:	898b      	ldrh	r3, [r1, #12]
 800d500:	061b      	lsls	r3, r3, #24
 800d502:	b09d      	sub	sp, #116	; 0x74
 800d504:	4607      	mov	r7, r0
 800d506:	460d      	mov	r5, r1
 800d508:	4614      	mov	r4, r2
 800d50a:	d50e      	bpl.n	800d52a <_svfiprintf_r+0x32>
 800d50c:	690b      	ldr	r3, [r1, #16]
 800d50e:	b963      	cbnz	r3, 800d52a <_svfiprintf_r+0x32>
 800d510:	2140      	movs	r1, #64	; 0x40
 800d512:	f7fd f873 	bl	800a5fc <_malloc_r>
 800d516:	6028      	str	r0, [r5, #0]
 800d518:	6128      	str	r0, [r5, #16]
 800d51a:	b920      	cbnz	r0, 800d526 <_svfiprintf_r+0x2e>
 800d51c:	230c      	movs	r3, #12
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d524:	e0d0      	b.n	800d6c8 <_svfiprintf_r+0x1d0>
 800d526:	2340      	movs	r3, #64	; 0x40
 800d528:	616b      	str	r3, [r5, #20]
 800d52a:	2300      	movs	r3, #0
 800d52c:	9309      	str	r3, [sp, #36]	; 0x24
 800d52e:	2320      	movs	r3, #32
 800d530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d534:	f8cd 800c 	str.w	r8, [sp, #12]
 800d538:	2330      	movs	r3, #48	; 0x30
 800d53a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6e0 <_svfiprintf_r+0x1e8>
 800d53e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d542:	f04f 0901 	mov.w	r9, #1
 800d546:	4623      	mov	r3, r4
 800d548:	469a      	mov	sl, r3
 800d54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d54e:	b10a      	cbz	r2, 800d554 <_svfiprintf_r+0x5c>
 800d550:	2a25      	cmp	r2, #37	; 0x25
 800d552:	d1f9      	bne.n	800d548 <_svfiprintf_r+0x50>
 800d554:	ebba 0b04 	subs.w	fp, sl, r4
 800d558:	d00b      	beq.n	800d572 <_svfiprintf_r+0x7a>
 800d55a:	465b      	mov	r3, fp
 800d55c:	4622      	mov	r2, r4
 800d55e:	4629      	mov	r1, r5
 800d560:	4638      	mov	r0, r7
 800d562:	f7ff ff6e 	bl	800d442 <__ssputs_r>
 800d566:	3001      	adds	r0, #1
 800d568:	f000 80a9 	beq.w	800d6be <_svfiprintf_r+0x1c6>
 800d56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d56e:	445a      	add	r2, fp
 800d570:	9209      	str	r2, [sp, #36]	; 0x24
 800d572:	f89a 3000 	ldrb.w	r3, [sl]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f000 80a1 	beq.w	800d6be <_svfiprintf_r+0x1c6>
 800d57c:	2300      	movs	r3, #0
 800d57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d586:	f10a 0a01 	add.w	sl, sl, #1
 800d58a:	9304      	str	r3, [sp, #16]
 800d58c:	9307      	str	r3, [sp, #28]
 800d58e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d592:	931a      	str	r3, [sp, #104]	; 0x68
 800d594:	4654      	mov	r4, sl
 800d596:	2205      	movs	r2, #5
 800d598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d59c:	4850      	ldr	r0, [pc, #320]	; (800d6e0 <_svfiprintf_r+0x1e8>)
 800d59e:	f7f2 fe17 	bl	80001d0 <memchr>
 800d5a2:	9a04      	ldr	r2, [sp, #16]
 800d5a4:	b9d8      	cbnz	r0, 800d5de <_svfiprintf_r+0xe6>
 800d5a6:	06d0      	lsls	r0, r2, #27
 800d5a8:	bf44      	itt	mi
 800d5aa:	2320      	movmi	r3, #32
 800d5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5b0:	0711      	lsls	r1, r2, #28
 800d5b2:	bf44      	itt	mi
 800d5b4:	232b      	movmi	r3, #43	; 0x2b
 800d5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d5be:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c0:	d015      	beq.n	800d5ee <_svfiprintf_r+0xf6>
 800d5c2:	9a07      	ldr	r2, [sp, #28]
 800d5c4:	4654      	mov	r4, sl
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	f04f 0c0a 	mov.w	ip, #10
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5d2:	3b30      	subs	r3, #48	; 0x30
 800d5d4:	2b09      	cmp	r3, #9
 800d5d6:	d94d      	bls.n	800d674 <_svfiprintf_r+0x17c>
 800d5d8:	b1b0      	cbz	r0, 800d608 <_svfiprintf_r+0x110>
 800d5da:	9207      	str	r2, [sp, #28]
 800d5dc:	e014      	b.n	800d608 <_svfiprintf_r+0x110>
 800d5de:	eba0 0308 	sub.w	r3, r0, r8
 800d5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	46a2      	mov	sl, r4
 800d5ec:	e7d2      	b.n	800d594 <_svfiprintf_r+0x9c>
 800d5ee:	9b03      	ldr	r3, [sp, #12]
 800d5f0:	1d19      	adds	r1, r3, #4
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	9103      	str	r1, [sp, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	bfbb      	ittet	lt
 800d5fa:	425b      	neglt	r3, r3
 800d5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800d600:	9307      	strge	r3, [sp, #28]
 800d602:	9307      	strlt	r3, [sp, #28]
 800d604:	bfb8      	it	lt
 800d606:	9204      	strlt	r2, [sp, #16]
 800d608:	7823      	ldrb	r3, [r4, #0]
 800d60a:	2b2e      	cmp	r3, #46	; 0x2e
 800d60c:	d10c      	bne.n	800d628 <_svfiprintf_r+0x130>
 800d60e:	7863      	ldrb	r3, [r4, #1]
 800d610:	2b2a      	cmp	r3, #42	; 0x2a
 800d612:	d134      	bne.n	800d67e <_svfiprintf_r+0x186>
 800d614:	9b03      	ldr	r3, [sp, #12]
 800d616:	1d1a      	adds	r2, r3, #4
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	9203      	str	r2, [sp, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bfb8      	it	lt
 800d620:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d624:	3402      	adds	r4, #2
 800d626:	9305      	str	r3, [sp, #20]
 800d628:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d6f0 <_svfiprintf_r+0x1f8>
 800d62c:	7821      	ldrb	r1, [r4, #0]
 800d62e:	2203      	movs	r2, #3
 800d630:	4650      	mov	r0, sl
 800d632:	f7f2 fdcd 	bl	80001d0 <memchr>
 800d636:	b138      	cbz	r0, 800d648 <_svfiprintf_r+0x150>
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	eba0 000a 	sub.w	r0, r0, sl
 800d63e:	2240      	movs	r2, #64	; 0x40
 800d640:	4082      	lsls	r2, r0
 800d642:	4313      	orrs	r3, r2
 800d644:	3401      	adds	r4, #1
 800d646:	9304      	str	r3, [sp, #16]
 800d648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d64c:	4825      	ldr	r0, [pc, #148]	; (800d6e4 <_svfiprintf_r+0x1ec>)
 800d64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d652:	2206      	movs	r2, #6
 800d654:	f7f2 fdbc 	bl	80001d0 <memchr>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d038      	beq.n	800d6ce <_svfiprintf_r+0x1d6>
 800d65c:	4b22      	ldr	r3, [pc, #136]	; (800d6e8 <_svfiprintf_r+0x1f0>)
 800d65e:	bb1b      	cbnz	r3, 800d6a8 <_svfiprintf_r+0x1b0>
 800d660:	9b03      	ldr	r3, [sp, #12]
 800d662:	3307      	adds	r3, #7
 800d664:	f023 0307 	bic.w	r3, r3, #7
 800d668:	3308      	adds	r3, #8
 800d66a:	9303      	str	r3, [sp, #12]
 800d66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d66e:	4433      	add	r3, r6
 800d670:	9309      	str	r3, [sp, #36]	; 0x24
 800d672:	e768      	b.n	800d546 <_svfiprintf_r+0x4e>
 800d674:	fb0c 3202 	mla	r2, ip, r2, r3
 800d678:	460c      	mov	r4, r1
 800d67a:	2001      	movs	r0, #1
 800d67c:	e7a6      	b.n	800d5cc <_svfiprintf_r+0xd4>
 800d67e:	2300      	movs	r3, #0
 800d680:	3401      	adds	r4, #1
 800d682:	9305      	str	r3, [sp, #20]
 800d684:	4619      	mov	r1, r3
 800d686:	f04f 0c0a 	mov.w	ip, #10
 800d68a:	4620      	mov	r0, r4
 800d68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d690:	3a30      	subs	r2, #48	; 0x30
 800d692:	2a09      	cmp	r2, #9
 800d694:	d903      	bls.n	800d69e <_svfiprintf_r+0x1a6>
 800d696:	2b00      	cmp	r3, #0
 800d698:	d0c6      	beq.n	800d628 <_svfiprintf_r+0x130>
 800d69a:	9105      	str	r1, [sp, #20]
 800d69c:	e7c4      	b.n	800d628 <_svfiprintf_r+0x130>
 800d69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e7f0      	b.n	800d68a <_svfiprintf_r+0x192>
 800d6a8:	ab03      	add	r3, sp, #12
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	; (800d6ec <_svfiprintf_r+0x1f4>)
 800d6b0:	a904      	add	r1, sp, #16
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	f7fc fd3c 	bl	800a130 <_printf_float>
 800d6b8:	1c42      	adds	r2, r0, #1
 800d6ba:	4606      	mov	r6, r0
 800d6bc:	d1d6      	bne.n	800d66c <_svfiprintf_r+0x174>
 800d6be:	89ab      	ldrh	r3, [r5, #12]
 800d6c0:	065b      	lsls	r3, r3, #25
 800d6c2:	f53f af2d 	bmi.w	800d520 <_svfiprintf_r+0x28>
 800d6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6c8:	b01d      	add	sp, #116	; 0x74
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ce:	ab03      	add	r3, sp, #12
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	462a      	mov	r2, r5
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <_svfiprintf_r+0x1f4>)
 800d6d6:	a904      	add	r1, sp, #16
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7fd f87d 	bl	800a7d8 <_printf_i>
 800d6de:	e7eb      	b.n	800d6b8 <_svfiprintf_r+0x1c0>
 800d6e0:	080101ac 	.word	0x080101ac
 800d6e4:	080101b6 	.word	0x080101b6
 800d6e8:	0800a131 	.word	0x0800a131
 800d6ec:	0800d443 	.word	0x0800d443
 800d6f0:	080101b2 	.word	0x080101b2

0800d6f4 <__ascii_mbtowc>:
 800d6f4:	b082      	sub	sp, #8
 800d6f6:	b901      	cbnz	r1, 800d6fa <__ascii_mbtowc+0x6>
 800d6f8:	a901      	add	r1, sp, #4
 800d6fa:	b142      	cbz	r2, 800d70e <__ascii_mbtowc+0x1a>
 800d6fc:	b14b      	cbz	r3, 800d712 <__ascii_mbtowc+0x1e>
 800d6fe:	7813      	ldrb	r3, [r2, #0]
 800d700:	600b      	str	r3, [r1, #0]
 800d702:	7812      	ldrb	r2, [r2, #0]
 800d704:	1e10      	subs	r0, r2, #0
 800d706:	bf18      	it	ne
 800d708:	2001      	movne	r0, #1
 800d70a:	b002      	add	sp, #8
 800d70c:	4770      	bx	lr
 800d70e:	4610      	mov	r0, r2
 800d710:	e7fb      	b.n	800d70a <__ascii_mbtowc+0x16>
 800d712:	f06f 0001 	mvn.w	r0, #1
 800d716:	e7f8      	b.n	800d70a <__ascii_mbtowc+0x16>

0800d718 <__sflush_r>:
 800d718:	898a      	ldrh	r2, [r1, #12]
 800d71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71e:	4605      	mov	r5, r0
 800d720:	0710      	lsls	r0, r2, #28
 800d722:	460c      	mov	r4, r1
 800d724:	d458      	bmi.n	800d7d8 <__sflush_r+0xc0>
 800d726:	684b      	ldr	r3, [r1, #4]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dc05      	bgt.n	800d738 <__sflush_r+0x20>
 800d72c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d72e:	2b00      	cmp	r3, #0
 800d730:	dc02      	bgt.n	800d738 <__sflush_r+0x20>
 800d732:	2000      	movs	r0, #0
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d73a:	2e00      	cmp	r6, #0
 800d73c:	d0f9      	beq.n	800d732 <__sflush_r+0x1a>
 800d73e:	2300      	movs	r3, #0
 800d740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d744:	682f      	ldr	r7, [r5, #0]
 800d746:	6a21      	ldr	r1, [r4, #32]
 800d748:	602b      	str	r3, [r5, #0]
 800d74a:	d032      	beq.n	800d7b2 <__sflush_r+0x9a>
 800d74c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	075a      	lsls	r2, r3, #29
 800d752:	d505      	bpl.n	800d760 <__sflush_r+0x48>
 800d754:	6863      	ldr	r3, [r4, #4]
 800d756:	1ac0      	subs	r0, r0, r3
 800d758:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d75a:	b10b      	cbz	r3, 800d760 <__sflush_r+0x48>
 800d75c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d75e:	1ac0      	subs	r0, r0, r3
 800d760:	2300      	movs	r3, #0
 800d762:	4602      	mov	r2, r0
 800d764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d766:	6a21      	ldr	r1, [r4, #32]
 800d768:	4628      	mov	r0, r5
 800d76a:	47b0      	blx	r6
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	d106      	bne.n	800d780 <__sflush_r+0x68>
 800d772:	6829      	ldr	r1, [r5, #0]
 800d774:	291d      	cmp	r1, #29
 800d776:	d82b      	bhi.n	800d7d0 <__sflush_r+0xb8>
 800d778:	4a29      	ldr	r2, [pc, #164]	; (800d820 <__sflush_r+0x108>)
 800d77a:	410a      	asrs	r2, r1
 800d77c:	07d6      	lsls	r6, r2, #31
 800d77e:	d427      	bmi.n	800d7d0 <__sflush_r+0xb8>
 800d780:	2200      	movs	r2, #0
 800d782:	6062      	str	r2, [r4, #4]
 800d784:	04d9      	lsls	r1, r3, #19
 800d786:	6922      	ldr	r2, [r4, #16]
 800d788:	6022      	str	r2, [r4, #0]
 800d78a:	d504      	bpl.n	800d796 <__sflush_r+0x7e>
 800d78c:	1c42      	adds	r2, r0, #1
 800d78e:	d101      	bne.n	800d794 <__sflush_r+0x7c>
 800d790:	682b      	ldr	r3, [r5, #0]
 800d792:	b903      	cbnz	r3, 800d796 <__sflush_r+0x7e>
 800d794:	6560      	str	r0, [r4, #84]	; 0x54
 800d796:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d798:	602f      	str	r7, [r5, #0]
 800d79a:	2900      	cmp	r1, #0
 800d79c:	d0c9      	beq.n	800d732 <__sflush_r+0x1a>
 800d79e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	d002      	beq.n	800d7ac <__sflush_r+0x94>
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f7ff faa8 	bl	800ccfc <_free_r>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	6360      	str	r0, [r4, #52]	; 0x34
 800d7b0:	e7c0      	b.n	800d734 <__sflush_r+0x1c>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	47b0      	blx	r6
 800d7b8:	1c41      	adds	r1, r0, #1
 800d7ba:	d1c8      	bne.n	800d74e <__sflush_r+0x36>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0c5      	beq.n	800d74e <__sflush_r+0x36>
 800d7c2:	2b1d      	cmp	r3, #29
 800d7c4:	d001      	beq.n	800d7ca <__sflush_r+0xb2>
 800d7c6:	2b16      	cmp	r3, #22
 800d7c8:	d101      	bne.n	800d7ce <__sflush_r+0xb6>
 800d7ca:	602f      	str	r7, [r5, #0]
 800d7cc:	e7b1      	b.n	800d732 <__sflush_r+0x1a>
 800d7ce:	89a3      	ldrh	r3, [r4, #12]
 800d7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7d4:	81a3      	strh	r3, [r4, #12]
 800d7d6:	e7ad      	b.n	800d734 <__sflush_r+0x1c>
 800d7d8:	690f      	ldr	r7, [r1, #16]
 800d7da:	2f00      	cmp	r7, #0
 800d7dc:	d0a9      	beq.n	800d732 <__sflush_r+0x1a>
 800d7de:	0793      	lsls	r3, r2, #30
 800d7e0:	680e      	ldr	r6, [r1, #0]
 800d7e2:	bf08      	it	eq
 800d7e4:	694b      	ldreq	r3, [r1, #20]
 800d7e6:	600f      	str	r7, [r1, #0]
 800d7e8:	bf18      	it	ne
 800d7ea:	2300      	movne	r3, #0
 800d7ec:	eba6 0807 	sub.w	r8, r6, r7
 800d7f0:	608b      	str	r3, [r1, #8]
 800d7f2:	f1b8 0f00 	cmp.w	r8, #0
 800d7f6:	dd9c      	ble.n	800d732 <__sflush_r+0x1a>
 800d7f8:	6a21      	ldr	r1, [r4, #32]
 800d7fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7fc:	4643      	mov	r3, r8
 800d7fe:	463a      	mov	r2, r7
 800d800:	4628      	mov	r0, r5
 800d802:	47b0      	blx	r6
 800d804:	2800      	cmp	r0, #0
 800d806:	dc06      	bgt.n	800d816 <__sflush_r+0xfe>
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d80e:	81a3      	strh	r3, [r4, #12]
 800d810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d814:	e78e      	b.n	800d734 <__sflush_r+0x1c>
 800d816:	4407      	add	r7, r0
 800d818:	eba8 0800 	sub.w	r8, r8, r0
 800d81c:	e7e9      	b.n	800d7f2 <__sflush_r+0xda>
 800d81e:	bf00      	nop
 800d820:	dfbffffe 	.word	0xdfbffffe

0800d824 <_fflush_r>:
 800d824:	b538      	push	{r3, r4, r5, lr}
 800d826:	690b      	ldr	r3, [r1, #16]
 800d828:	4605      	mov	r5, r0
 800d82a:	460c      	mov	r4, r1
 800d82c:	b913      	cbnz	r3, 800d834 <_fflush_r+0x10>
 800d82e:	2500      	movs	r5, #0
 800d830:	4628      	mov	r0, r5
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	b118      	cbz	r0, 800d83e <_fflush_r+0x1a>
 800d836:	6a03      	ldr	r3, [r0, #32]
 800d838:	b90b      	cbnz	r3, 800d83e <_fflush_r+0x1a>
 800d83a:	f7fd fbb7 	bl	800afac <__sinit>
 800d83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0f3      	beq.n	800d82e <_fflush_r+0xa>
 800d846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d848:	07d0      	lsls	r0, r2, #31
 800d84a:	d404      	bmi.n	800d856 <_fflush_r+0x32>
 800d84c:	0599      	lsls	r1, r3, #22
 800d84e:	d402      	bmi.n	800d856 <_fflush_r+0x32>
 800d850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d852:	f7fe fb9a 	bl	800bf8a <__retarget_lock_acquire_recursive>
 800d856:	4628      	mov	r0, r5
 800d858:	4621      	mov	r1, r4
 800d85a:	f7ff ff5d 	bl	800d718 <__sflush_r>
 800d85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d860:	07da      	lsls	r2, r3, #31
 800d862:	4605      	mov	r5, r0
 800d864:	d4e4      	bmi.n	800d830 <_fflush_r+0xc>
 800d866:	89a3      	ldrh	r3, [r4, #12]
 800d868:	059b      	lsls	r3, r3, #22
 800d86a:	d4e1      	bmi.n	800d830 <_fflush_r+0xc>
 800d86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d86e:	f7fe fb8d 	bl	800bf8c <__retarget_lock_release_recursive>
 800d872:	e7dd      	b.n	800d830 <_fflush_r+0xc>

0800d874 <_Balloc>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	69c6      	ldr	r6, [r0, #28]
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	b976      	cbnz	r6, 800d89c <_Balloc+0x28>
 800d87e:	2010      	movs	r0, #16
 800d880:	f7fc fe8c 	bl	800a59c <malloc>
 800d884:	4602      	mov	r2, r0
 800d886:	61e0      	str	r0, [r4, #28]
 800d888:	b920      	cbnz	r0, 800d894 <_Balloc+0x20>
 800d88a:	4b18      	ldr	r3, [pc, #96]	; (800d8ec <_Balloc+0x78>)
 800d88c:	4818      	ldr	r0, [pc, #96]	; (800d8f0 <_Balloc+0x7c>)
 800d88e:	216b      	movs	r1, #107	; 0x6b
 800d890:	f7fe fb9c 	bl	800bfcc <__assert_func>
 800d894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d898:	6006      	str	r6, [r0, #0]
 800d89a:	60c6      	str	r6, [r0, #12]
 800d89c:	69e6      	ldr	r6, [r4, #28]
 800d89e:	68f3      	ldr	r3, [r6, #12]
 800d8a0:	b183      	cbz	r3, 800d8c4 <_Balloc+0x50>
 800d8a2:	69e3      	ldr	r3, [r4, #28]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8aa:	b9b8      	cbnz	r0, 800d8dc <_Balloc+0x68>
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d8b2:	1d72      	adds	r2, r6, #5
 800d8b4:	0092      	lsls	r2, r2, #2
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f000 fd81 	bl	800e3be <_calloc_r>
 800d8bc:	b160      	cbz	r0, 800d8d8 <_Balloc+0x64>
 800d8be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8c2:	e00e      	b.n	800d8e2 <_Balloc+0x6e>
 800d8c4:	2221      	movs	r2, #33	; 0x21
 800d8c6:	2104      	movs	r1, #4
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f000 fd78 	bl	800e3be <_calloc_r>
 800d8ce:	69e3      	ldr	r3, [r4, #28]
 800d8d0:	60f0      	str	r0, [r6, #12]
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e4      	bne.n	800d8a2 <_Balloc+0x2e>
 800d8d8:	2000      	movs	r0, #0
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	6802      	ldr	r2, [r0, #0]
 800d8de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8e8:	e7f7      	b.n	800d8da <_Balloc+0x66>
 800d8ea:	bf00      	nop
 800d8ec:	0800ff20 	.word	0x0800ff20
 800d8f0:	080101bd 	.word	0x080101bd

0800d8f4 <_Bfree>:
 800d8f4:	b570      	push	{r4, r5, r6, lr}
 800d8f6:	69c6      	ldr	r6, [r0, #28]
 800d8f8:	4605      	mov	r5, r0
 800d8fa:	460c      	mov	r4, r1
 800d8fc:	b976      	cbnz	r6, 800d91c <_Bfree+0x28>
 800d8fe:	2010      	movs	r0, #16
 800d900:	f7fc fe4c 	bl	800a59c <malloc>
 800d904:	4602      	mov	r2, r0
 800d906:	61e8      	str	r0, [r5, #28]
 800d908:	b920      	cbnz	r0, 800d914 <_Bfree+0x20>
 800d90a:	4b09      	ldr	r3, [pc, #36]	; (800d930 <_Bfree+0x3c>)
 800d90c:	4809      	ldr	r0, [pc, #36]	; (800d934 <_Bfree+0x40>)
 800d90e:	218f      	movs	r1, #143	; 0x8f
 800d910:	f7fe fb5c 	bl	800bfcc <__assert_func>
 800d914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d918:	6006      	str	r6, [r0, #0]
 800d91a:	60c6      	str	r6, [r0, #12]
 800d91c:	b13c      	cbz	r4, 800d92e <_Bfree+0x3a>
 800d91e:	69eb      	ldr	r3, [r5, #28]
 800d920:	6862      	ldr	r2, [r4, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d928:	6021      	str	r1, [r4, #0]
 800d92a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	0800ff20 	.word	0x0800ff20
 800d934:	080101bd 	.word	0x080101bd

0800d938 <__multadd>:
 800d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93c:	690d      	ldr	r5, [r1, #16]
 800d93e:	4607      	mov	r7, r0
 800d940:	460c      	mov	r4, r1
 800d942:	461e      	mov	r6, r3
 800d944:	f101 0c14 	add.w	ip, r1, #20
 800d948:	2000      	movs	r0, #0
 800d94a:	f8dc 3000 	ldr.w	r3, [ip]
 800d94e:	b299      	uxth	r1, r3
 800d950:	fb02 6101 	mla	r1, r2, r1, r6
 800d954:	0c1e      	lsrs	r6, r3, #16
 800d956:	0c0b      	lsrs	r3, r1, #16
 800d958:	fb02 3306 	mla	r3, r2, r6, r3
 800d95c:	b289      	uxth	r1, r1
 800d95e:	3001      	adds	r0, #1
 800d960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d964:	4285      	cmp	r5, r0
 800d966:	f84c 1b04 	str.w	r1, [ip], #4
 800d96a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d96e:	dcec      	bgt.n	800d94a <__multadd+0x12>
 800d970:	b30e      	cbz	r6, 800d9b6 <__multadd+0x7e>
 800d972:	68a3      	ldr	r3, [r4, #8]
 800d974:	42ab      	cmp	r3, r5
 800d976:	dc19      	bgt.n	800d9ac <__multadd+0x74>
 800d978:	6861      	ldr	r1, [r4, #4]
 800d97a:	4638      	mov	r0, r7
 800d97c:	3101      	adds	r1, #1
 800d97e:	f7ff ff79 	bl	800d874 <_Balloc>
 800d982:	4680      	mov	r8, r0
 800d984:	b928      	cbnz	r0, 800d992 <__multadd+0x5a>
 800d986:	4602      	mov	r2, r0
 800d988:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <__multadd+0x84>)
 800d98a:	480d      	ldr	r0, [pc, #52]	; (800d9c0 <__multadd+0x88>)
 800d98c:	21ba      	movs	r1, #186	; 0xba
 800d98e:	f7fe fb1d 	bl	800bfcc <__assert_func>
 800d992:	6922      	ldr	r2, [r4, #16]
 800d994:	3202      	adds	r2, #2
 800d996:	f104 010c 	add.w	r1, r4, #12
 800d99a:	0092      	lsls	r2, r2, #2
 800d99c:	300c      	adds	r0, #12
 800d99e:	f7fe faf6 	bl	800bf8e <memcpy>
 800d9a2:	4621      	mov	r1, r4
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f7ff ffa5 	bl	800d8f4 <_Bfree>
 800d9aa:	4644      	mov	r4, r8
 800d9ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9b0:	3501      	adds	r5, #1
 800d9b2:	615e      	str	r6, [r3, #20]
 800d9b4:	6125      	str	r5, [r4, #16]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9bc:	0801013b 	.word	0x0801013b
 800d9c0:	080101bd 	.word	0x080101bd

0800d9c4 <__s2b>:
 800d9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c8:	460c      	mov	r4, r1
 800d9ca:	4615      	mov	r5, r2
 800d9cc:	461f      	mov	r7, r3
 800d9ce:	2209      	movs	r2, #9
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	4606      	mov	r6, r0
 800d9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9d8:	2100      	movs	r1, #0
 800d9da:	2201      	movs	r2, #1
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	db09      	blt.n	800d9f4 <__s2b+0x30>
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f7ff ff47 	bl	800d874 <_Balloc>
 800d9e6:	b940      	cbnz	r0, 800d9fa <__s2b+0x36>
 800d9e8:	4602      	mov	r2, r0
 800d9ea:	4b19      	ldr	r3, [pc, #100]	; (800da50 <__s2b+0x8c>)
 800d9ec:	4819      	ldr	r0, [pc, #100]	; (800da54 <__s2b+0x90>)
 800d9ee:	21d3      	movs	r1, #211	; 0xd3
 800d9f0:	f7fe faec 	bl	800bfcc <__assert_func>
 800d9f4:	0052      	lsls	r2, r2, #1
 800d9f6:	3101      	adds	r1, #1
 800d9f8:	e7f0      	b.n	800d9dc <__s2b+0x18>
 800d9fa:	9b08      	ldr	r3, [sp, #32]
 800d9fc:	6143      	str	r3, [r0, #20]
 800d9fe:	2d09      	cmp	r5, #9
 800da00:	f04f 0301 	mov.w	r3, #1
 800da04:	6103      	str	r3, [r0, #16]
 800da06:	dd16      	ble.n	800da36 <__s2b+0x72>
 800da08:	f104 0909 	add.w	r9, r4, #9
 800da0c:	46c8      	mov	r8, r9
 800da0e:	442c      	add	r4, r5
 800da10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da14:	4601      	mov	r1, r0
 800da16:	3b30      	subs	r3, #48	; 0x30
 800da18:	220a      	movs	r2, #10
 800da1a:	4630      	mov	r0, r6
 800da1c:	f7ff ff8c 	bl	800d938 <__multadd>
 800da20:	45a0      	cmp	r8, r4
 800da22:	d1f5      	bne.n	800da10 <__s2b+0x4c>
 800da24:	f1a5 0408 	sub.w	r4, r5, #8
 800da28:	444c      	add	r4, r9
 800da2a:	1b2d      	subs	r5, r5, r4
 800da2c:	1963      	adds	r3, r4, r5
 800da2e:	42bb      	cmp	r3, r7
 800da30:	db04      	blt.n	800da3c <__s2b+0x78>
 800da32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da36:	340a      	adds	r4, #10
 800da38:	2509      	movs	r5, #9
 800da3a:	e7f6      	b.n	800da2a <__s2b+0x66>
 800da3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da40:	4601      	mov	r1, r0
 800da42:	3b30      	subs	r3, #48	; 0x30
 800da44:	220a      	movs	r2, #10
 800da46:	4630      	mov	r0, r6
 800da48:	f7ff ff76 	bl	800d938 <__multadd>
 800da4c:	e7ee      	b.n	800da2c <__s2b+0x68>
 800da4e:	bf00      	nop
 800da50:	0801013b 	.word	0x0801013b
 800da54:	080101bd 	.word	0x080101bd

0800da58 <__hi0bits>:
 800da58:	0c03      	lsrs	r3, r0, #16
 800da5a:	041b      	lsls	r3, r3, #16
 800da5c:	b9d3      	cbnz	r3, 800da94 <__hi0bits+0x3c>
 800da5e:	0400      	lsls	r0, r0, #16
 800da60:	2310      	movs	r3, #16
 800da62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da66:	bf04      	itt	eq
 800da68:	0200      	lsleq	r0, r0, #8
 800da6a:	3308      	addeq	r3, #8
 800da6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da70:	bf04      	itt	eq
 800da72:	0100      	lsleq	r0, r0, #4
 800da74:	3304      	addeq	r3, #4
 800da76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da7a:	bf04      	itt	eq
 800da7c:	0080      	lsleq	r0, r0, #2
 800da7e:	3302      	addeq	r3, #2
 800da80:	2800      	cmp	r0, #0
 800da82:	db05      	blt.n	800da90 <__hi0bits+0x38>
 800da84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da88:	f103 0301 	add.w	r3, r3, #1
 800da8c:	bf08      	it	eq
 800da8e:	2320      	moveq	r3, #32
 800da90:	4618      	mov	r0, r3
 800da92:	4770      	bx	lr
 800da94:	2300      	movs	r3, #0
 800da96:	e7e4      	b.n	800da62 <__hi0bits+0xa>

0800da98 <__lo0bits>:
 800da98:	6803      	ldr	r3, [r0, #0]
 800da9a:	f013 0207 	ands.w	r2, r3, #7
 800da9e:	d00c      	beq.n	800daba <__lo0bits+0x22>
 800daa0:	07d9      	lsls	r1, r3, #31
 800daa2:	d422      	bmi.n	800daea <__lo0bits+0x52>
 800daa4:	079a      	lsls	r2, r3, #30
 800daa6:	bf49      	itett	mi
 800daa8:	085b      	lsrmi	r3, r3, #1
 800daaa:	089b      	lsrpl	r3, r3, #2
 800daac:	6003      	strmi	r3, [r0, #0]
 800daae:	2201      	movmi	r2, #1
 800dab0:	bf5c      	itt	pl
 800dab2:	6003      	strpl	r3, [r0, #0]
 800dab4:	2202      	movpl	r2, #2
 800dab6:	4610      	mov	r0, r2
 800dab8:	4770      	bx	lr
 800daba:	b299      	uxth	r1, r3
 800dabc:	b909      	cbnz	r1, 800dac2 <__lo0bits+0x2a>
 800dabe:	0c1b      	lsrs	r3, r3, #16
 800dac0:	2210      	movs	r2, #16
 800dac2:	b2d9      	uxtb	r1, r3
 800dac4:	b909      	cbnz	r1, 800daca <__lo0bits+0x32>
 800dac6:	3208      	adds	r2, #8
 800dac8:	0a1b      	lsrs	r3, r3, #8
 800daca:	0719      	lsls	r1, r3, #28
 800dacc:	bf04      	itt	eq
 800dace:	091b      	lsreq	r3, r3, #4
 800dad0:	3204      	addeq	r2, #4
 800dad2:	0799      	lsls	r1, r3, #30
 800dad4:	bf04      	itt	eq
 800dad6:	089b      	lsreq	r3, r3, #2
 800dad8:	3202      	addeq	r2, #2
 800dada:	07d9      	lsls	r1, r3, #31
 800dadc:	d403      	bmi.n	800dae6 <__lo0bits+0x4e>
 800dade:	085b      	lsrs	r3, r3, #1
 800dae0:	f102 0201 	add.w	r2, r2, #1
 800dae4:	d003      	beq.n	800daee <__lo0bits+0x56>
 800dae6:	6003      	str	r3, [r0, #0]
 800dae8:	e7e5      	b.n	800dab6 <__lo0bits+0x1e>
 800daea:	2200      	movs	r2, #0
 800daec:	e7e3      	b.n	800dab6 <__lo0bits+0x1e>
 800daee:	2220      	movs	r2, #32
 800daf0:	e7e1      	b.n	800dab6 <__lo0bits+0x1e>
	...

0800daf4 <__i2b>:
 800daf4:	b510      	push	{r4, lr}
 800daf6:	460c      	mov	r4, r1
 800daf8:	2101      	movs	r1, #1
 800dafa:	f7ff febb 	bl	800d874 <_Balloc>
 800dafe:	4602      	mov	r2, r0
 800db00:	b928      	cbnz	r0, 800db0e <__i2b+0x1a>
 800db02:	4b05      	ldr	r3, [pc, #20]	; (800db18 <__i2b+0x24>)
 800db04:	4805      	ldr	r0, [pc, #20]	; (800db1c <__i2b+0x28>)
 800db06:	f240 1145 	movw	r1, #325	; 0x145
 800db0a:	f7fe fa5f 	bl	800bfcc <__assert_func>
 800db0e:	2301      	movs	r3, #1
 800db10:	6144      	str	r4, [r0, #20]
 800db12:	6103      	str	r3, [r0, #16]
 800db14:	bd10      	pop	{r4, pc}
 800db16:	bf00      	nop
 800db18:	0801013b 	.word	0x0801013b
 800db1c:	080101bd 	.word	0x080101bd

0800db20 <__multiply>:
 800db20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	4691      	mov	r9, r2
 800db26:	690a      	ldr	r2, [r1, #16]
 800db28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	bfb8      	it	lt
 800db30:	460b      	movlt	r3, r1
 800db32:	460c      	mov	r4, r1
 800db34:	bfbc      	itt	lt
 800db36:	464c      	movlt	r4, r9
 800db38:	4699      	movlt	r9, r3
 800db3a:	6927      	ldr	r7, [r4, #16]
 800db3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db40:	68a3      	ldr	r3, [r4, #8]
 800db42:	6861      	ldr	r1, [r4, #4]
 800db44:	eb07 060a 	add.w	r6, r7, sl
 800db48:	42b3      	cmp	r3, r6
 800db4a:	b085      	sub	sp, #20
 800db4c:	bfb8      	it	lt
 800db4e:	3101      	addlt	r1, #1
 800db50:	f7ff fe90 	bl	800d874 <_Balloc>
 800db54:	b930      	cbnz	r0, 800db64 <__multiply+0x44>
 800db56:	4602      	mov	r2, r0
 800db58:	4b44      	ldr	r3, [pc, #272]	; (800dc6c <__multiply+0x14c>)
 800db5a:	4845      	ldr	r0, [pc, #276]	; (800dc70 <__multiply+0x150>)
 800db5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db60:	f7fe fa34 	bl	800bfcc <__assert_func>
 800db64:	f100 0514 	add.w	r5, r0, #20
 800db68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db6c:	462b      	mov	r3, r5
 800db6e:	2200      	movs	r2, #0
 800db70:	4543      	cmp	r3, r8
 800db72:	d321      	bcc.n	800dbb8 <__multiply+0x98>
 800db74:	f104 0314 	add.w	r3, r4, #20
 800db78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db7c:	f109 0314 	add.w	r3, r9, #20
 800db80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db84:	9202      	str	r2, [sp, #8]
 800db86:	1b3a      	subs	r2, r7, r4
 800db88:	3a15      	subs	r2, #21
 800db8a:	f022 0203 	bic.w	r2, r2, #3
 800db8e:	3204      	adds	r2, #4
 800db90:	f104 0115 	add.w	r1, r4, #21
 800db94:	428f      	cmp	r7, r1
 800db96:	bf38      	it	cc
 800db98:	2204      	movcc	r2, #4
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	9a02      	ldr	r2, [sp, #8]
 800db9e:	9303      	str	r3, [sp, #12]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d80c      	bhi.n	800dbbe <__multiply+0x9e>
 800dba4:	2e00      	cmp	r6, #0
 800dba6:	dd03      	ble.n	800dbb0 <__multiply+0x90>
 800dba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d05b      	beq.n	800dc68 <__multiply+0x148>
 800dbb0:	6106      	str	r6, [r0, #16]
 800dbb2:	b005      	add	sp, #20
 800dbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb8:	f843 2b04 	str.w	r2, [r3], #4
 800dbbc:	e7d8      	b.n	800db70 <__multiply+0x50>
 800dbbe:	f8b3 a000 	ldrh.w	sl, [r3]
 800dbc2:	f1ba 0f00 	cmp.w	sl, #0
 800dbc6:	d024      	beq.n	800dc12 <__multiply+0xf2>
 800dbc8:	f104 0e14 	add.w	lr, r4, #20
 800dbcc:	46a9      	mov	r9, r5
 800dbce:	f04f 0c00 	mov.w	ip, #0
 800dbd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dbd6:	f8d9 1000 	ldr.w	r1, [r9]
 800dbda:	fa1f fb82 	uxth.w	fp, r2
 800dbde:	b289      	uxth	r1, r1
 800dbe0:	fb0a 110b 	mla	r1, sl, fp, r1
 800dbe4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dbe8:	f8d9 2000 	ldr.w	r2, [r9]
 800dbec:	4461      	add	r1, ip
 800dbee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbf2:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbfa:	b289      	uxth	r1, r1
 800dbfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc00:	4577      	cmp	r7, lr
 800dc02:	f849 1b04 	str.w	r1, [r9], #4
 800dc06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dc0a:	d8e2      	bhi.n	800dbd2 <__multiply+0xb2>
 800dc0c:	9a01      	ldr	r2, [sp, #4]
 800dc0e:	f845 c002 	str.w	ip, [r5, r2]
 800dc12:	9a03      	ldr	r2, [sp, #12]
 800dc14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	f1b9 0f00 	cmp.w	r9, #0
 800dc1e:	d021      	beq.n	800dc64 <__multiply+0x144>
 800dc20:	6829      	ldr	r1, [r5, #0]
 800dc22:	f104 0c14 	add.w	ip, r4, #20
 800dc26:	46ae      	mov	lr, r5
 800dc28:	f04f 0a00 	mov.w	sl, #0
 800dc2c:	f8bc b000 	ldrh.w	fp, [ip]
 800dc30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dc34:	fb09 220b 	mla	r2, r9, fp, r2
 800dc38:	4452      	add	r2, sl
 800dc3a:	b289      	uxth	r1, r1
 800dc3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc40:	f84e 1b04 	str.w	r1, [lr], #4
 800dc44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc4c:	f8be 1000 	ldrh.w	r1, [lr]
 800dc50:	fb09 110a 	mla	r1, r9, sl, r1
 800dc54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc58:	4567      	cmp	r7, ip
 800dc5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc5e:	d8e5      	bhi.n	800dc2c <__multiply+0x10c>
 800dc60:	9a01      	ldr	r2, [sp, #4]
 800dc62:	50a9      	str	r1, [r5, r2]
 800dc64:	3504      	adds	r5, #4
 800dc66:	e799      	b.n	800db9c <__multiply+0x7c>
 800dc68:	3e01      	subs	r6, #1
 800dc6a:	e79b      	b.n	800dba4 <__multiply+0x84>
 800dc6c:	0801013b 	.word	0x0801013b
 800dc70:	080101bd 	.word	0x080101bd

0800dc74 <__pow5mult>:
 800dc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc78:	4615      	mov	r5, r2
 800dc7a:	f012 0203 	ands.w	r2, r2, #3
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460f      	mov	r7, r1
 800dc82:	d007      	beq.n	800dc94 <__pow5mult+0x20>
 800dc84:	4c25      	ldr	r4, [pc, #148]	; (800dd1c <__pow5mult+0xa8>)
 800dc86:	3a01      	subs	r2, #1
 800dc88:	2300      	movs	r3, #0
 800dc8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc8e:	f7ff fe53 	bl	800d938 <__multadd>
 800dc92:	4607      	mov	r7, r0
 800dc94:	10ad      	asrs	r5, r5, #2
 800dc96:	d03d      	beq.n	800dd14 <__pow5mult+0xa0>
 800dc98:	69f4      	ldr	r4, [r6, #28]
 800dc9a:	b97c      	cbnz	r4, 800dcbc <__pow5mult+0x48>
 800dc9c:	2010      	movs	r0, #16
 800dc9e:	f7fc fc7d 	bl	800a59c <malloc>
 800dca2:	4602      	mov	r2, r0
 800dca4:	61f0      	str	r0, [r6, #28]
 800dca6:	b928      	cbnz	r0, 800dcb4 <__pow5mult+0x40>
 800dca8:	4b1d      	ldr	r3, [pc, #116]	; (800dd20 <__pow5mult+0xac>)
 800dcaa:	481e      	ldr	r0, [pc, #120]	; (800dd24 <__pow5mult+0xb0>)
 800dcac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dcb0:	f7fe f98c 	bl	800bfcc <__assert_func>
 800dcb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcb8:	6004      	str	r4, [r0, #0]
 800dcba:	60c4      	str	r4, [r0, #12]
 800dcbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dcc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dcc4:	b94c      	cbnz	r4, 800dcda <__pow5mult+0x66>
 800dcc6:	f240 2171 	movw	r1, #625	; 0x271
 800dcca:	4630      	mov	r0, r6
 800dccc:	f7ff ff12 	bl	800daf4 <__i2b>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	6003      	str	r3, [r0, #0]
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	07eb      	lsls	r3, r5, #31
 800dce0:	d50a      	bpl.n	800dcf8 <__pow5mult+0x84>
 800dce2:	4639      	mov	r1, r7
 800dce4:	4622      	mov	r2, r4
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7ff ff1a 	bl	800db20 <__multiply>
 800dcec:	4639      	mov	r1, r7
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff fdff 	bl	800d8f4 <_Bfree>
 800dcf6:	4647      	mov	r7, r8
 800dcf8:	106d      	asrs	r5, r5, #1
 800dcfa:	d00b      	beq.n	800dd14 <__pow5mult+0xa0>
 800dcfc:	6820      	ldr	r0, [r4, #0]
 800dcfe:	b938      	cbnz	r0, 800dd10 <__pow5mult+0x9c>
 800dd00:	4622      	mov	r2, r4
 800dd02:	4621      	mov	r1, r4
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7ff ff0b 	bl	800db20 <__multiply>
 800dd0a:	6020      	str	r0, [r4, #0]
 800dd0c:	f8c0 9000 	str.w	r9, [r0]
 800dd10:	4604      	mov	r4, r0
 800dd12:	e7e4      	b.n	800dcde <__pow5mult+0x6a>
 800dd14:	4638      	mov	r0, r7
 800dd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd1a:	bf00      	nop
 800dd1c:	08010308 	.word	0x08010308
 800dd20:	0800ff20 	.word	0x0800ff20
 800dd24:	080101bd 	.word	0x080101bd

0800dd28 <__lshift>:
 800dd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	6849      	ldr	r1, [r1, #4]
 800dd30:	6923      	ldr	r3, [r4, #16]
 800dd32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd36:	68a3      	ldr	r3, [r4, #8]
 800dd38:	4607      	mov	r7, r0
 800dd3a:	4691      	mov	r9, r2
 800dd3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd40:	f108 0601 	add.w	r6, r8, #1
 800dd44:	42b3      	cmp	r3, r6
 800dd46:	db0b      	blt.n	800dd60 <__lshift+0x38>
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7ff fd93 	bl	800d874 <_Balloc>
 800dd4e:	4605      	mov	r5, r0
 800dd50:	b948      	cbnz	r0, 800dd66 <__lshift+0x3e>
 800dd52:	4602      	mov	r2, r0
 800dd54:	4b28      	ldr	r3, [pc, #160]	; (800ddf8 <__lshift+0xd0>)
 800dd56:	4829      	ldr	r0, [pc, #164]	; (800ddfc <__lshift+0xd4>)
 800dd58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd5c:	f7fe f936 	bl	800bfcc <__assert_func>
 800dd60:	3101      	adds	r1, #1
 800dd62:	005b      	lsls	r3, r3, #1
 800dd64:	e7ee      	b.n	800dd44 <__lshift+0x1c>
 800dd66:	2300      	movs	r3, #0
 800dd68:	f100 0114 	add.w	r1, r0, #20
 800dd6c:	f100 0210 	add.w	r2, r0, #16
 800dd70:	4618      	mov	r0, r3
 800dd72:	4553      	cmp	r3, sl
 800dd74:	db33      	blt.n	800ddde <__lshift+0xb6>
 800dd76:	6920      	ldr	r0, [r4, #16]
 800dd78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd7c:	f104 0314 	add.w	r3, r4, #20
 800dd80:	f019 091f 	ands.w	r9, r9, #31
 800dd84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd8c:	d02b      	beq.n	800dde6 <__lshift+0xbe>
 800dd8e:	f1c9 0e20 	rsb	lr, r9, #32
 800dd92:	468a      	mov	sl, r1
 800dd94:	2200      	movs	r2, #0
 800dd96:	6818      	ldr	r0, [r3, #0]
 800dd98:	fa00 f009 	lsl.w	r0, r0, r9
 800dd9c:	4310      	orrs	r0, r2
 800dd9e:	f84a 0b04 	str.w	r0, [sl], #4
 800dda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda6:	459c      	cmp	ip, r3
 800dda8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ddac:	d8f3      	bhi.n	800dd96 <__lshift+0x6e>
 800ddae:	ebac 0304 	sub.w	r3, ip, r4
 800ddb2:	3b15      	subs	r3, #21
 800ddb4:	f023 0303 	bic.w	r3, r3, #3
 800ddb8:	3304      	adds	r3, #4
 800ddba:	f104 0015 	add.w	r0, r4, #21
 800ddbe:	4584      	cmp	ip, r0
 800ddc0:	bf38      	it	cc
 800ddc2:	2304      	movcc	r3, #4
 800ddc4:	50ca      	str	r2, [r1, r3]
 800ddc6:	b10a      	cbz	r2, 800ddcc <__lshift+0xa4>
 800ddc8:	f108 0602 	add.w	r6, r8, #2
 800ddcc:	3e01      	subs	r6, #1
 800ddce:	4638      	mov	r0, r7
 800ddd0:	612e      	str	r6, [r5, #16]
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	f7ff fd8e 	bl	800d8f4 <_Bfree>
 800ddd8:	4628      	mov	r0, r5
 800ddda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddde:	f842 0f04 	str.w	r0, [r2, #4]!
 800dde2:	3301      	adds	r3, #1
 800dde4:	e7c5      	b.n	800dd72 <__lshift+0x4a>
 800dde6:	3904      	subs	r1, #4
 800dde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddec:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddf0:	459c      	cmp	ip, r3
 800ddf2:	d8f9      	bhi.n	800dde8 <__lshift+0xc0>
 800ddf4:	e7ea      	b.n	800ddcc <__lshift+0xa4>
 800ddf6:	bf00      	nop
 800ddf8:	0801013b 	.word	0x0801013b
 800ddfc:	080101bd 	.word	0x080101bd

0800de00 <__mcmp>:
 800de00:	b530      	push	{r4, r5, lr}
 800de02:	6902      	ldr	r2, [r0, #16]
 800de04:	690c      	ldr	r4, [r1, #16]
 800de06:	1b12      	subs	r2, r2, r4
 800de08:	d10e      	bne.n	800de28 <__mcmp+0x28>
 800de0a:	f100 0314 	add.w	r3, r0, #20
 800de0e:	3114      	adds	r1, #20
 800de10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800de14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800de1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800de20:	42a5      	cmp	r5, r4
 800de22:	d003      	beq.n	800de2c <__mcmp+0x2c>
 800de24:	d305      	bcc.n	800de32 <__mcmp+0x32>
 800de26:	2201      	movs	r2, #1
 800de28:	4610      	mov	r0, r2
 800de2a:	bd30      	pop	{r4, r5, pc}
 800de2c:	4283      	cmp	r3, r0
 800de2e:	d3f3      	bcc.n	800de18 <__mcmp+0x18>
 800de30:	e7fa      	b.n	800de28 <__mcmp+0x28>
 800de32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de36:	e7f7      	b.n	800de28 <__mcmp+0x28>

0800de38 <__mdiff>:
 800de38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	4606      	mov	r6, r0
 800de40:	4611      	mov	r1, r2
 800de42:	4620      	mov	r0, r4
 800de44:	4690      	mov	r8, r2
 800de46:	f7ff ffdb 	bl	800de00 <__mcmp>
 800de4a:	1e05      	subs	r5, r0, #0
 800de4c:	d110      	bne.n	800de70 <__mdiff+0x38>
 800de4e:	4629      	mov	r1, r5
 800de50:	4630      	mov	r0, r6
 800de52:	f7ff fd0f 	bl	800d874 <_Balloc>
 800de56:	b930      	cbnz	r0, 800de66 <__mdiff+0x2e>
 800de58:	4b3a      	ldr	r3, [pc, #232]	; (800df44 <__mdiff+0x10c>)
 800de5a:	4602      	mov	r2, r0
 800de5c:	f240 2137 	movw	r1, #567	; 0x237
 800de60:	4839      	ldr	r0, [pc, #228]	; (800df48 <__mdiff+0x110>)
 800de62:	f7fe f8b3 	bl	800bfcc <__assert_func>
 800de66:	2301      	movs	r3, #1
 800de68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de70:	bfa4      	itt	ge
 800de72:	4643      	movge	r3, r8
 800de74:	46a0      	movge	r8, r4
 800de76:	4630      	mov	r0, r6
 800de78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de7c:	bfa6      	itte	ge
 800de7e:	461c      	movge	r4, r3
 800de80:	2500      	movge	r5, #0
 800de82:	2501      	movlt	r5, #1
 800de84:	f7ff fcf6 	bl	800d874 <_Balloc>
 800de88:	b920      	cbnz	r0, 800de94 <__mdiff+0x5c>
 800de8a:	4b2e      	ldr	r3, [pc, #184]	; (800df44 <__mdiff+0x10c>)
 800de8c:	4602      	mov	r2, r0
 800de8e:	f240 2145 	movw	r1, #581	; 0x245
 800de92:	e7e5      	b.n	800de60 <__mdiff+0x28>
 800de94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de98:	6926      	ldr	r6, [r4, #16]
 800de9a:	60c5      	str	r5, [r0, #12]
 800de9c:	f104 0914 	add.w	r9, r4, #20
 800dea0:	f108 0514 	add.w	r5, r8, #20
 800dea4:	f100 0e14 	add.w	lr, r0, #20
 800dea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800deac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800deb0:	f108 0210 	add.w	r2, r8, #16
 800deb4:	46f2      	mov	sl, lr
 800deb6:	2100      	movs	r1, #0
 800deb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800debc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dec0:	fa11 f88b 	uxtah	r8, r1, fp
 800dec4:	b299      	uxth	r1, r3
 800dec6:	0c1b      	lsrs	r3, r3, #16
 800dec8:	eba8 0801 	sub.w	r8, r8, r1
 800decc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ded0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ded4:	fa1f f888 	uxth.w	r8, r8
 800ded8:	1419      	asrs	r1, r3, #16
 800deda:	454e      	cmp	r6, r9
 800dedc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dee0:	f84a 3b04 	str.w	r3, [sl], #4
 800dee4:	d8e8      	bhi.n	800deb8 <__mdiff+0x80>
 800dee6:	1b33      	subs	r3, r6, r4
 800dee8:	3b15      	subs	r3, #21
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	3304      	adds	r3, #4
 800def0:	3415      	adds	r4, #21
 800def2:	42a6      	cmp	r6, r4
 800def4:	bf38      	it	cc
 800def6:	2304      	movcc	r3, #4
 800def8:	441d      	add	r5, r3
 800defa:	4473      	add	r3, lr
 800defc:	469e      	mov	lr, r3
 800defe:	462e      	mov	r6, r5
 800df00:	4566      	cmp	r6, ip
 800df02:	d30e      	bcc.n	800df22 <__mdiff+0xea>
 800df04:	f10c 0203 	add.w	r2, ip, #3
 800df08:	1b52      	subs	r2, r2, r5
 800df0a:	f022 0203 	bic.w	r2, r2, #3
 800df0e:	3d03      	subs	r5, #3
 800df10:	45ac      	cmp	ip, r5
 800df12:	bf38      	it	cc
 800df14:	2200      	movcc	r2, #0
 800df16:	4413      	add	r3, r2
 800df18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800df1c:	b17a      	cbz	r2, 800df3e <__mdiff+0x106>
 800df1e:	6107      	str	r7, [r0, #16]
 800df20:	e7a4      	b.n	800de6c <__mdiff+0x34>
 800df22:	f856 8b04 	ldr.w	r8, [r6], #4
 800df26:	fa11 f288 	uxtah	r2, r1, r8
 800df2a:	1414      	asrs	r4, r2, #16
 800df2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800df30:	b292      	uxth	r2, r2
 800df32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800df36:	f84e 2b04 	str.w	r2, [lr], #4
 800df3a:	1421      	asrs	r1, r4, #16
 800df3c:	e7e0      	b.n	800df00 <__mdiff+0xc8>
 800df3e:	3f01      	subs	r7, #1
 800df40:	e7ea      	b.n	800df18 <__mdiff+0xe0>
 800df42:	bf00      	nop
 800df44:	0801013b 	.word	0x0801013b
 800df48:	080101bd 	.word	0x080101bd

0800df4c <__ulp>:
 800df4c:	b082      	sub	sp, #8
 800df4e:	ed8d 0b00 	vstr	d0, [sp]
 800df52:	9a01      	ldr	r2, [sp, #4]
 800df54:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <__ulp+0x48>)
 800df56:	4013      	ands	r3, r2
 800df58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dc08      	bgt.n	800df72 <__ulp+0x26>
 800df60:	425b      	negs	r3, r3
 800df62:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800df66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df6a:	da04      	bge.n	800df76 <__ulp+0x2a>
 800df6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df70:	4113      	asrs	r3, r2
 800df72:	2200      	movs	r2, #0
 800df74:	e008      	b.n	800df88 <__ulp+0x3c>
 800df76:	f1a2 0314 	sub.w	r3, r2, #20
 800df7a:	2b1e      	cmp	r3, #30
 800df7c:	bfda      	itte	le
 800df7e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800df82:	40da      	lsrle	r2, r3
 800df84:	2201      	movgt	r2, #1
 800df86:	2300      	movs	r3, #0
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	ec41 0b10 	vmov	d0, r0, r1
 800df90:	b002      	add	sp, #8
 800df92:	4770      	bx	lr
 800df94:	7ff00000 	.word	0x7ff00000

0800df98 <__b2d>:
 800df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	6906      	ldr	r6, [r0, #16]
 800df9e:	f100 0814 	add.w	r8, r0, #20
 800dfa2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dfa6:	1f37      	subs	r7, r6, #4
 800dfa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfac:	4610      	mov	r0, r2
 800dfae:	f7ff fd53 	bl	800da58 <__hi0bits>
 800dfb2:	f1c0 0320 	rsb	r3, r0, #32
 800dfb6:	280a      	cmp	r0, #10
 800dfb8:	600b      	str	r3, [r1, #0]
 800dfba:	491b      	ldr	r1, [pc, #108]	; (800e028 <__b2d+0x90>)
 800dfbc:	dc15      	bgt.n	800dfea <__b2d+0x52>
 800dfbe:	f1c0 0c0b 	rsb	ip, r0, #11
 800dfc2:	fa22 f30c 	lsr.w	r3, r2, ip
 800dfc6:	45b8      	cmp	r8, r7
 800dfc8:	ea43 0501 	orr.w	r5, r3, r1
 800dfcc:	bf34      	ite	cc
 800dfce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfd2:	2300      	movcs	r3, #0
 800dfd4:	3015      	adds	r0, #21
 800dfd6:	fa02 f000 	lsl.w	r0, r2, r0
 800dfda:	fa23 f30c 	lsr.w	r3, r3, ip
 800dfde:	4303      	orrs	r3, r0
 800dfe0:	461c      	mov	r4, r3
 800dfe2:	ec45 4b10 	vmov	d0, r4, r5
 800dfe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfea:	45b8      	cmp	r8, r7
 800dfec:	bf3a      	itte	cc
 800dfee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dff2:	f1a6 0708 	subcc.w	r7, r6, #8
 800dff6:	2300      	movcs	r3, #0
 800dff8:	380b      	subs	r0, #11
 800dffa:	d012      	beq.n	800e022 <__b2d+0x8a>
 800dffc:	f1c0 0120 	rsb	r1, r0, #32
 800e000:	fa23 f401 	lsr.w	r4, r3, r1
 800e004:	4082      	lsls	r2, r0
 800e006:	4322      	orrs	r2, r4
 800e008:	4547      	cmp	r7, r8
 800e00a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e00e:	bf8c      	ite	hi
 800e010:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e014:	2200      	movls	r2, #0
 800e016:	4083      	lsls	r3, r0
 800e018:	40ca      	lsrs	r2, r1
 800e01a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e01e:	4313      	orrs	r3, r2
 800e020:	e7de      	b.n	800dfe0 <__b2d+0x48>
 800e022:	ea42 0501 	orr.w	r5, r2, r1
 800e026:	e7db      	b.n	800dfe0 <__b2d+0x48>
 800e028:	3ff00000 	.word	0x3ff00000

0800e02c <__d2b>:
 800e02c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e030:	460f      	mov	r7, r1
 800e032:	2101      	movs	r1, #1
 800e034:	ec59 8b10 	vmov	r8, r9, d0
 800e038:	4616      	mov	r6, r2
 800e03a:	f7ff fc1b 	bl	800d874 <_Balloc>
 800e03e:	4604      	mov	r4, r0
 800e040:	b930      	cbnz	r0, 800e050 <__d2b+0x24>
 800e042:	4602      	mov	r2, r0
 800e044:	4b24      	ldr	r3, [pc, #144]	; (800e0d8 <__d2b+0xac>)
 800e046:	4825      	ldr	r0, [pc, #148]	; (800e0dc <__d2b+0xb0>)
 800e048:	f240 310f 	movw	r1, #783	; 0x30f
 800e04c:	f7fd ffbe 	bl	800bfcc <__assert_func>
 800e050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e058:	bb2d      	cbnz	r5, 800e0a6 <__d2b+0x7a>
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	f1b8 0300 	subs.w	r3, r8, #0
 800e060:	d026      	beq.n	800e0b0 <__d2b+0x84>
 800e062:	4668      	mov	r0, sp
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	f7ff fd17 	bl	800da98 <__lo0bits>
 800e06a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e06e:	b1e8      	cbz	r0, 800e0ac <__d2b+0x80>
 800e070:	f1c0 0320 	rsb	r3, r0, #32
 800e074:	fa02 f303 	lsl.w	r3, r2, r3
 800e078:	430b      	orrs	r3, r1
 800e07a:	40c2      	lsrs	r2, r0
 800e07c:	6163      	str	r3, [r4, #20]
 800e07e:	9201      	str	r2, [sp, #4]
 800e080:	9b01      	ldr	r3, [sp, #4]
 800e082:	61a3      	str	r3, [r4, #24]
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2202      	movne	r2, #2
 800e08a:	2201      	moveq	r2, #1
 800e08c:	6122      	str	r2, [r4, #16]
 800e08e:	b1bd      	cbz	r5, 800e0c0 <__d2b+0x94>
 800e090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e094:	4405      	add	r5, r0
 800e096:	603d      	str	r5, [r7, #0]
 800e098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e09c:	6030      	str	r0, [r6, #0]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	b003      	add	sp, #12
 800e0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0aa:	e7d6      	b.n	800e05a <__d2b+0x2e>
 800e0ac:	6161      	str	r1, [r4, #20]
 800e0ae:	e7e7      	b.n	800e080 <__d2b+0x54>
 800e0b0:	a801      	add	r0, sp, #4
 800e0b2:	f7ff fcf1 	bl	800da98 <__lo0bits>
 800e0b6:	9b01      	ldr	r3, [sp, #4]
 800e0b8:	6163      	str	r3, [r4, #20]
 800e0ba:	3020      	adds	r0, #32
 800e0bc:	2201      	movs	r2, #1
 800e0be:	e7e5      	b.n	800e08c <__d2b+0x60>
 800e0c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0c8:	6038      	str	r0, [r7, #0]
 800e0ca:	6918      	ldr	r0, [r3, #16]
 800e0cc:	f7ff fcc4 	bl	800da58 <__hi0bits>
 800e0d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0d4:	e7e2      	b.n	800e09c <__d2b+0x70>
 800e0d6:	bf00      	nop
 800e0d8:	0801013b 	.word	0x0801013b
 800e0dc:	080101bd 	.word	0x080101bd

0800e0e0 <__ratio>:
 800e0e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4688      	mov	r8, r1
 800e0e6:	4669      	mov	r1, sp
 800e0e8:	4681      	mov	r9, r0
 800e0ea:	f7ff ff55 	bl	800df98 <__b2d>
 800e0ee:	a901      	add	r1, sp, #4
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	ec55 4b10 	vmov	r4, r5, d0
 800e0f6:	f7ff ff4f 	bl	800df98 <__b2d>
 800e0fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e102:	eba3 0c02 	sub.w	ip, r3, r2
 800e106:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e10a:	1a9b      	subs	r3, r3, r2
 800e10c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e110:	ec51 0b10 	vmov	r0, r1, d0
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfd6      	itet	le
 800e118:	460a      	movle	r2, r1
 800e11a:	462a      	movgt	r2, r5
 800e11c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e120:	468b      	mov	fp, r1
 800e122:	462f      	mov	r7, r5
 800e124:	bfd4      	ite	le
 800e126:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e12a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e12e:	4620      	mov	r0, r4
 800e130:	ee10 2a10 	vmov	r2, s0
 800e134:	465b      	mov	r3, fp
 800e136:	4639      	mov	r1, r7
 800e138:	f7f2 fb88 	bl	800084c <__aeabi_ddiv>
 800e13c:	ec41 0b10 	vmov	d0, r0, r1
 800e140:	b003      	add	sp, #12
 800e142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e146 <__copybits>:
 800e146:	3901      	subs	r1, #1
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	1149      	asrs	r1, r1, #5
 800e14c:	6914      	ldr	r4, [r2, #16]
 800e14e:	3101      	adds	r1, #1
 800e150:	f102 0314 	add.w	r3, r2, #20
 800e154:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e158:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e15c:	1f05      	subs	r5, r0, #4
 800e15e:	42a3      	cmp	r3, r4
 800e160:	d30c      	bcc.n	800e17c <__copybits+0x36>
 800e162:	1aa3      	subs	r3, r4, r2
 800e164:	3b11      	subs	r3, #17
 800e166:	f023 0303 	bic.w	r3, r3, #3
 800e16a:	3211      	adds	r2, #17
 800e16c:	42a2      	cmp	r2, r4
 800e16e:	bf88      	it	hi
 800e170:	2300      	movhi	r3, #0
 800e172:	4418      	add	r0, r3
 800e174:	2300      	movs	r3, #0
 800e176:	4288      	cmp	r0, r1
 800e178:	d305      	bcc.n	800e186 <__copybits+0x40>
 800e17a:	bd70      	pop	{r4, r5, r6, pc}
 800e17c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e180:	f845 6f04 	str.w	r6, [r5, #4]!
 800e184:	e7eb      	b.n	800e15e <__copybits+0x18>
 800e186:	f840 3b04 	str.w	r3, [r0], #4
 800e18a:	e7f4      	b.n	800e176 <__copybits+0x30>

0800e18c <__any_on>:
 800e18c:	f100 0214 	add.w	r2, r0, #20
 800e190:	6900      	ldr	r0, [r0, #16]
 800e192:	114b      	asrs	r3, r1, #5
 800e194:	4298      	cmp	r0, r3
 800e196:	b510      	push	{r4, lr}
 800e198:	db11      	blt.n	800e1be <__any_on+0x32>
 800e19a:	dd0a      	ble.n	800e1b2 <__any_on+0x26>
 800e19c:	f011 011f 	ands.w	r1, r1, #31
 800e1a0:	d007      	beq.n	800e1b2 <__any_on+0x26>
 800e1a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1a6:	fa24 f001 	lsr.w	r0, r4, r1
 800e1aa:	fa00 f101 	lsl.w	r1, r0, r1
 800e1ae:	428c      	cmp	r4, r1
 800e1b0:	d10b      	bne.n	800e1ca <__any_on+0x3e>
 800e1b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d803      	bhi.n	800e1c2 <__any_on+0x36>
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	bd10      	pop	{r4, pc}
 800e1be:	4603      	mov	r3, r0
 800e1c0:	e7f7      	b.n	800e1b2 <__any_on+0x26>
 800e1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1c6:	2900      	cmp	r1, #0
 800e1c8:	d0f5      	beq.n	800e1b6 <__any_on+0x2a>
 800e1ca:	2001      	movs	r0, #1
 800e1cc:	e7f6      	b.n	800e1bc <__any_on+0x30>

0800e1ce <__sread>:
 800e1ce:	b510      	push	{r4, lr}
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d6:	f000 f8c7 	bl	800e368 <_read_r>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	bfab      	itete	ge
 800e1de:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1e0:	89a3      	ldrhlt	r3, [r4, #12]
 800e1e2:	181b      	addge	r3, r3, r0
 800e1e4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1e8:	bfac      	ite	ge
 800e1ea:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1ec:	81a3      	strhlt	r3, [r4, #12]
 800e1ee:	bd10      	pop	{r4, pc}

0800e1f0 <__swrite>:
 800e1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1f4:	461f      	mov	r7, r3
 800e1f6:	898b      	ldrh	r3, [r1, #12]
 800e1f8:	05db      	lsls	r3, r3, #23
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	460c      	mov	r4, r1
 800e1fe:	4616      	mov	r6, r2
 800e200:	d505      	bpl.n	800e20e <__swrite+0x1e>
 800e202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e206:	2302      	movs	r3, #2
 800e208:	2200      	movs	r2, #0
 800e20a:	f000 f89b 	bl	800e344 <_lseek_r>
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e218:	81a3      	strh	r3, [r4, #12]
 800e21a:	4632      	mov	r2, r6
 800e21c:	463b      	mov	r3, r7
 800e21e:	4628      	mov	r0, r5
 800e220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e224:	f000 b8b2 	b.w	800e38c <_write_r>

0800e228 <__sseek>:
 800e228:	b510      	push	{r4, lr}
 800e22a:	460c      	mov	r4, r1
 800e22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e230:	f000 f888 	bl	800e344 <_lseek_r>
 800e234:	1c43      	adds	r3, r0, #1
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	bf15      	itete	ne
 800e23a:	6560      	strne	r0, [r4, #84]	; 0x54
 800e23c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e240:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e244:	81a3      	strheq	r3, [r4, #12]
 800e246:	bf18      	it	ne
 800e248:	81a3      	strhne	r3, [r4, #12]
 800e24a:	bd10      	pop	{r4, pc}

0800e24c <__sclose>:
 800e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e250:	f000 b868 	b.w	800e324 <_close_r>

0800e254 <fiprintf>:
 800e254:	b40e      	push	{r1, r2, r3}
 800e256:	b503      	push	{r0, r1, lr}
 800e258:	4601      	mov	r1, r0
 800e25a:	ab03      	add	r3, sp, #12
 800e25c:	4805      	ldr	r0, [pc, #20]	; (800e274 <fiprintf+0x20>)
 800e25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e262:	6800      	ldr	r0, [r0, #0]
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	f000 f8e9 	bl	800e43c <_vfiprintf_r>
 800e26a:	b002      	add	sp, #8
 800e26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e270:	b003      	add	sp, #12
 800e272:	4770      	bx	lr
 800e274:	200005d8 	.word	0x200005d8

0800e278 <_realloc_r>:
 800e278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e27c:	4680      	mov	r8, r0
 800e27e:	4614      	mov	r4, r2
 800e280:	460e      	mov	r6, r1
 800e282:	b921      	cbnz	r1, 800e28e <_realloc_r+0x16>
 800e284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	4611      	mov	r1, r2
 800e28a:	f7fc b9b7 	b.w	800a5fc <_malloc_r>
 800e28e:	b92a      	cbnz	r2, 800e29c <_realloc_r+0x24>
 800e290:	f7fe fd34 	bl	800ccfc <_free_r>
 800e294:	4625      	mov	r5, r4
 800e296:	4628      	mov	r0, r5
 800e298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29c:	f000 f9e8 	bl	800e670 <_malloc_usable_size_r>
 800e2a0:	4284      	cmp	r4, r0
 800e2a2:	4607      	mov	r7, r0
 800e2a4:	d802      	bhi.n	800e2ac <_realloc_r+0x34>
 800e2a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2aa:	d812      	bhi.n	800e2d2 <_realloc_r+0x5a>
 800e2ac:	4621      	mov	r1, r4
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	f7fc f9a4 	bl	800a5fc <_malloc_r>
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	2800      	cmp	r0, #0
 800e2b8:	d0ed      	beq.n	800e296 <_realloc_r+0x1e>
 800e2ba:	42bc      	cmp	r4, r7
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4631      	mov	r1, r6
 800e2c0:	bf28      	it	cs
 800e2c2:	463a      	movcs	r2, r7
 800e2c4:	f7fd fe63 	bl	800bf8e <memcpy>
 800e2c8:	4631      	mov	r1, r6
 800e2ca:	4640      	mov	r0, r8
 800e2cc:	f7fe fd16 	bl	800ccfc <_free_r>
 800e2d0:	e7e1      	b.n	800e296 <_realloc_r+0x1e>
 800e2d2:	4635      	mov	r5, r6
 800e2d4:	e7df      	b.n	800e296 <_realloc_r+0x1e>

0800e2d6 <__ascii_wctomb>:
 800e2d6:	b149      	cbz	r1, 800e2ec <__ascii_wctomb+0x16>
 800e2d8:	2aff      	cmp	r2, #255	; 0xff
 800e2da:	bf85      	ittet	hi
 800e2dc:	238a      	movhi	r3, #138	; 0x8a
 800e2de:	6003      	strhi	r3, [r0, #0]
 800e2e0:	700a      	strbls	r2, [r1, #0]
 800e2e2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e2e6:	bf98      	it	ls
 800e2e8:	2001      	movls	r0, #1
 800e2ea:	4770      	bx	lr
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	4770      	bx	lr

0800e2f0 <memmove>:
 800e2f0:	4288      	cmp	r0, r1
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	eb01 0402 	add.w	r4, r1, r2
 800e2f8:	d902      	bls.n	800e300 <memmove+0x10>
 800e2fa:	4284      	cmp	r4, r0
 800e2fc:	4623      	mov	r3, r4
 800e2fe:	d807      	bhi.n	800e310 <memmove+0x20>
 800e300:	1e43      	subs	r3, r0, #1
 800e302:	42a1      	cmp	r1, r4
 800e304:	d008      	beq.n	800e318 <memmove+0x28>
 800e306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e30e:	e7f8      	b.n	800e302 <memmove+0x12>
 800e310:	4402      	add	r2, r0
 800e312:	4601      	mov	r1, r0
 800e314:	428a      	cmp	r2, r1
 800e316:	d100      	bne.n	800e31a <memmove+0x2a>
 800e318:	bd10      	pop	{r4, pc}
 800e31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e322:	e7f7      	b.n	800e314 <memmove+0x24>

0800e324 <_close_r>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4d06      	ldr	r5, [pc, #24]	; (800e340 <_close_r+0x1c>)
 800e328:	2300      	movs	r3, #0
 800e32a:	4604      	mov	r4, r0
 800e32c:	4608      	mov	r0, r1
 800e32e:	602b      	str	r3, [r5, #0]
 800e330:	f7f4 fb9d 	bl	8002a6e <_close>
 800e334:	1c43      	adds	r3, r0, #1
 800e336:	d102      	bne.n	800e33e <_close_r+0x1a>
 800e338:	682b      	ldr	r3, [r5, #0]
 800e33a:	b103      	cbz	r3, 800e33e <_close_r+0x1a>
 800e33c:	6023      	str	r3, [r4, #0]
 800e33e:	bd38      	pop	{r3, r4, r5, pc}
 800e340:	2000483c 	.word	0x2000483c

0800e344 <_lseek_r>:
 800e344:	b538      	push	{r3, r4, r5, lr}
 800e346:	4d07      	ldr	r5, [pc, #28]	; (800e364 <_lseek_r+0x20>)
 800e348:	4604      	mov	r4, r0
 800e34a:	4608      	mov	r0, r1
 800e34c:	4611      	mov	r1, r2
 800e34e:	2200      	movs	r2, #0
 800e350:	602a      	str	r2, [r5, #0]
 800e352:	461a      	mov	r2, r3
 800e354:	f7f4 fbb2 	bl	8002abc <_lseek>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_lseek_r+0x1e>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_lseek_r+0x1e>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	2000483c 	.word	0x2000483c

0800e368 <_read_r>:
 800e368:	b538      	push	{r3, r4, r5, lr}
 800e36a:	4d07      	ldr	r5, [pc, #28]	; (800e388 <_read_r+0x20>)
 800e36c:	4604      	mov	r4, r0
 800e36e:	4608      	mov	r0, r1
 800e370:	4611      	mov	r1, r2
 800e372:	2200      	movs	r2, #0
 800e374:	602a      	str	r2, [r5, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	f7f4 fb40 	bl	80029fc <_read>
 800e37c:	1c43      	adds	r3, r0, #1
 800e37e:	d102      	bne.n	800e386 <_read_r+0x1e>
 800e380:	682b      	ldr	r3, [r5, #0]
 800e382:	b103      	cbz	r3, 800e386 <_read_r+0x1e>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	bd38      	pop	{r3, r4, r5, pc}
 800e388:	2000483c 	.word	0x2000483c

0800e38c <_write_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d07      	ldr	r5, [pc, #28]	; (800e3ac <_write_r+0x20>)
 800e390:	4604      	mov	r4, r0
 800e392:	4608      	mov	r0, r1
 800e394:	4611      	mov	r1, r2
 800e396:	2200      	movs	r2, #0
 800e398:	602a      	str	r2, [r5, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	f7f4 fb4b 	bl	8002a36 <_write>
 800e3a0:	1c43      	adds	r3, r0, #1
 800e3a2:	d102      	bne.n	800e3aa <_write_r+0x1e>
 800e3a4:	682b      	ldr	r3, [r5, #0]
 800e3a6:	b103      	cbz	r3, 800e3aa <_write_r+0x1e>
 800e3a8:	6023      	str	r3, [r4, #0]
 800e3aa:	bd38      	pop	{r3, r4, r5, pc}
 800e3ac:	2000483c 	.word	0x2000483c

0800e3b0 <abort>:
 800e3b0:	b508      	push	{r3, lr}
 800e3b2:	2006      	movs	r0, #6
 800e3b4:	f000 faa6 	bl	800e904 <raise>
 800e3b8:	2001      	movs	r0, #1
 800e3ba:	f7f4 fb15 	bl	80029e8 <_exit>

0800e3be <_calloc_r>:
 800e3be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3c0:	fba1 2402 	umull	r2, r4, r1, r2
 800e3c4:	b94c      	cbnz	r4, 800e3da <_calloc_r+0x1c>
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	9201      	str	r2, [sp, #4]
 800e3ca:	f7fc f917 	bl	800a5fc <_malloc_r>
 800e3ce:	9a01      	ldr	r2, [sp, #4]
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	b930      	cbnz	r0, 800e3e2 <_calloc_r+0x24>
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	b003      	add	sp, #12
 800e3d8:	bd30      	pop	{r4, r5, pc}
 800e3da:	220c      	movs	r2, #12
 800e3dc:	6002      	str	r2, [r0, #0]
 800e3de:	2500      	movs	r5, #0
 800e3e0:	e7f8      	b.n	800e3d4 <_calloc_r+0x16>
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	f7fd fd34 	bl	800be50 <memset>
 800e3e8:	e7f4      	b.n	800e3d4 <_calloc_r+0x16>

0800e3ea <__sfputc_r>:
 800e3ea:	6893      	ldr	r3, [r2, #8]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	b410      	push	{r4}
 800e3f2:	6093      	str	r3, [r2, #8]
 800e3f4:	da08      	bge.n	800e408 <__sfputc_r+0x1e>
 800e3f6:	6994      	ldr	r4, [r2, #24]
 800e3f8:	42a3      	cmp	r3, r4
 800e3fa:	db01      	blt.n	800e400 <__sfputc_r+0x16>
 800e3fc:	290a      	cmp	r1, #10
 800e3fe:	d103      	bne.n	800e408 <__sfputc_r+0x1e>
 800e400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e404:	f000 b93c 	b.w	800e680 <__swbuf_r>
 800e408:	6813      	ldr	r3, [r2, #0]
 800e40a:	1c58      	adds	r0, r3, #1
 800e40c:	6010      	str	r0, [r2, #0]
 800e40e:	7019      	strb	r1, [r3, #0]
 800e410:	4608      	mov	r0, r1
 800e412:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <__sfputs_r>:
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	4606      	mov	r6, r0
 800e41c:	460f      	mov	r7, r1
 800e41e:	4614      	mov	r4, r2
 800e420:	18d5      	adds	r5, r2, r3
 800e422:	42ac      	cmp	r4, r5
 800e424:	d101      	bne.n	800e42a <__sfputs_r+0x12>
 800e426:	2000      	movs	r0, #0
 800e428:	e007      	b.n	800e43a <__sfputs_r+0x22>
 800e42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e42e:	463a      	mov	r2, r7
 800e430:	4630      	mov	r0, r6
 800e432:	f7ff ffda 	bl	800e3ea <__sfputc_r>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	d1f3      	bne.n	800e422 <__sfputs_r+0xa>
 800e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e43c <_vfiprintf_r>:
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	460d      	mov	r5, r1
 800e442:	b09d      	sub	sp, #116	; 0x74
 800e444:	4614      	mov	r4, r2
 800e446:	4698      	mov	r8, r3
 800e448:	4606      	mov	r6, r0
 800e44a:	b118      	cbz	r0, 800e454 <_vfiprintf_r+0x18>
 800e44c:	6a03      	ldr	r3, [r0, #32]
 800e44e:	b90b      	cbnz	r3, 800e454 <_vfiprintf_r+0x18>
 800e450:	f7fc fdac 	bl	800afac <__sinit>
 800e454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e456:	07d9      	lsls	r1, r3, #31
 800e458:	d405      	bmi.n	800e466 <_vfiprintf_r+0x2a>
 800e45a:	89ab      	ldrh	r3, [r5, #12]
 800e45c:	059a      	lsls	r2, r3, #22
 800e45e:	d402      	bmi.n	800e466 <_vfiprintf_r+0x2a>
 800e460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e462:	f7fd fd92 	bl	800bf8a <__retarget_lock_acquire_recursive>
 800e466:	89ab      	ldrh	r3, [r5, #12]
 800e468:	071b      	lsls	r3, r3, #28
 800e46a:	d501      	bpl.n	800e470 <_vfiprintf_r+0x34>
 800e46c:	692b      	ldr	r3, [r5, #16]
 800e46e:	b99b      	cbnz	r3, 800e498 <_vfiprintf_r+0x5c>
 800e470:	4629      	mov	r1, r5
 800e472:	4630      	mov	r0, r6
 800e474:	f000 f942 	bl	800e6fc <__swsetup_r>
 800e478:	b170      	cbz	r0, 800e498 <_vfiprintf_r+0x5c>
 800e47a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e47c:	07dc      	lsls	r4, r3, #31
 800e47e:	d504      	bpl.n	800e48a <_vfiprintf_r+0x4e>
 800e480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e484:	b01d      	add	sp, #116	; 0x74
 800e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48a:	89ab      	ldrh	r3, [r5, #12]
 800e48c:	0598      	lsls	r0, r3, #22
 800e48e:	d4f7      	bmi.n	800e480 <_vfiprintf_r+0x44>
 800e490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e492:	f7fd fd7b 	bl	800bf8c <__retarget_lock_release_recursive>
 800e496:	e7f3      	b.n	800e480 <_vfiprintf_r+0x44>
 800e498:	2300      	movs	r3, #0
 800e49a:	9309      	str	r3, [sp, #36]	; 0x24
 800e49c:	2320      	movs	r3, #32
 800e49e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4a6:	2330      	movs	r3, #48	; 0x30
 800e4a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e65c <_vfiprintf_r+0x220>
 800e4ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4b0:	f04f 0901 	mov.w	r9, #1
 800e4b4:	4623      	mov	r3, r4
 800e4b6:	469a      	mov	sl, r3
 800e4b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4bc:	b10a      	cbz	r2, 800e4c2 <_vfiprintf_r+0x86>
 800e4be:	2a25      	cmp	r2, #37	; 0x25
 800e4c0:	d1f9      	bne.n	800e4b6 <_vfiprintf_r+0x7a>
 800e4c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e4c6:	d00b      	beq.n	800e4e0 <_vfiprintf_r+0xa4>
 800e4c8:	465b      	mov	r3, fp
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f7ff ffa2 	bl	800e418 <__sfputs_r>
 800e4d4:	3001      	adds	r0, #1
 800e4d6:	f000 80a9 	beq.w	800e62c <_vfiprintf_r+0x1f0>
 800e4da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4dc:	445a      	add	r2, fp
 800e4de:	9209      	str	r2, [sp, #36]	; 0x24
 800e4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	f000 80a1 	beq.w	800e62c <_vfiprintf_r+0x1f0>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f4:	f10a 0a01 	add.w	sl, sl, #1
 800e4f8:	9304      	str	r3, [sp, #16]
 800e4fa:	9307      	str	r3, [sp, #28]
 800e4fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e500:	931a      	str	r3, [sp, #104]	; 0x68
 800e502:	4654      	mov	r4, sl
 800e504:	2205      	movs	r2, #5
 800e506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50a:	4854      	ldr	r0, [pc, #336]	; (800e65c <_vfiprintf_r+0x220>)
 800e50c:	f7f1 fe60 	bl	80001d0 <memchr>
 800e510:	9a04      	ldr	r2, [sp, #16]
 800e512:	b9d8      	cbnz	r0, 800e54c <_vfiprintf_r+0x110>
 800e514:	06d1      	lsls	r1, r2, #27
 800e516:	bf44      	itt	mi
 800e518:	2320      	movmi	r3, #32
 800e51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e51e:	0713      	lsls	r3, r2, #28
 800e520:	bf44      	itt	mi
 800e522:	232b      	movmi	r3, #43	; 0x2b
 800e524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e528:	f89a 3000 	ldrb.w	r3, [sl]
 800e52c:	2b2a      	cmp	r3, #42	; 0x2a
 800e52e:	d015      	beq.n	800e55c <_vfiprintf_r+0x120>
 800e530:	9a07      	ldr	r2, [sp, #28]
 800e532:	4654      	mov	r4, sl
 800e534:	2000      	movs	r0, #0
 800e536:	f04f 0c0a 	mov.w	ip, #10
 800e53a:	4621      	mov	r1, r4
 800e53c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e540:	3b30      	subs	r3, #48	; 0x30
 800e542:	2b09      	cmp	r3, #9
 800e544:	d94d      	bls.n	800e5e2 <_vfiprintf_r+0x1a6>
 800e546:	b1b0      	cbz	r0, 800e576 <_vfiprintf_r+0x13a>
 800e548:	9207      	str	r2, [sp, #28]
 800e54a:	e014      	b.n	800e576 <_vfiprintf_r+0x13a>
 800e54c:	eba0 0308 	sub.w	r3, r0, r8
 800e550:	fa09 f303 	lsl.w	r3, r9, r3
 800e554:	4313      	orrs	r3, r2
 800e556:	9304      	str	r3, [sp, #16]
 800e558:	46a2      	mov	sl, r4
 800e55a:	e7d2      	b.n	800e502 <_vfiprintf_r+0xc6>
 800e55c:	9b03      	ldr	r3, [sp, #12]
 800e55e:	1d19      	adds	r1, r3, #4
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	9103      	str	r1, [sp, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	bfbb      	ittet	lt
 800e568:	425b      	neglt	r3, r3
 800e56a:	f042 0202 	orrlt.w	r2, r2, #2
 800e56e:	9307      	strge	r3, [sp, #28]
 800e570:	9307      	strlt	r3, [sp, #28]
 800e572:	bfb8      	it	lt
 800e574:	9204      	strlt	r2, [sp, #16]
 800e576:	7823      	ldrb	r3, [r4, #0]
 800e578:	2b2e      	cmp	r3, #46	; 0x2e
 800e57a:	d10c      	bne.n	800e596 <_vfiprintf_r+0x15a>
 800e57c:	7863      	ldrb	r3, [r4, #1]
 800e57e:	2b2a      	cmp	r3, #42	; 0x2a
 800e580:	d134      	bne.n	800e5ec <_vfiprintf_r+0x1b0>
 800e582:	9b03      	ldr	r3, [sp, #12]
 800e584:	1d1a      	adds	r2, r3, #4
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	9203      	str	r2, [sp, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	bfb8      	it	lt
 800e58e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e592:	3402      	adds	r4, #2
 800e594:	9305      	str	r3, [sp, #20]
 800e596:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e66c <_vfiprintf_r+0x230>
 800e59a:	7821      	ldrb	r1, [r4, #0]
 800e59c:	2203      	movs	r2, #3
 800e59e:	4650      	mov	r0, sl
 800e5a0:	f7f1 fe16 	bl	80001d0 <memchr>
 800e5a4:	b138      	cbz	r0, 800e5b6 <_vfiprintf_r+0x17a>
 800e5a6:	9b04      	ldr	r3, [sp, #16]
 800e5a8:	eba0 000a 	sub.w	r0, r0, sl
 800e5ac:	2240      	movs	r2, #64	; 0x40
 800e5ae:	4082      	lsls	r2, r0
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	3401      	adds	r4, #1
 800e5b4:	9304      	str	r3, [sp, #16]
 800e5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ba:	4829      	ldr	r0, [pc, #164]	; (800e660 <_vfiprintf_r+0x224>)
 800e5bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5c0:	2206      	movs	r2, #6
 800e5c2:	f7f1 fe05 	bl	80001d0 <memchr>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d03f      	beq.n	800e64a <_vfiprintf_r+0x20e>
 800e5ca:	4b26      	ldr	r3, [pc, #152]	; (800e664 <_vfiprintf_r+0x228>)
 800e5cc:	bb1b      	cbnz	r3, 800e616 <_vfiprintf_r+0x1da>
 800e5ce:	9b03      	ldr	r3, [sp, #12]
 800e5d0:	3307      	adds	r3, #7
 800e5d2:	f023 0307 	bic.w	r3, r3, #7
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	9303      	str	r3, [sp, #12]
 800e5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5dc:	443b      	add	r3, r7
 800e5de:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e0:	e768      	b.n	800e4b4 <_vfiprintf_r+0x78>
 800e5e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5e6:	460c      	mov	r4, r1
 800e5e8:	2001      	movs	r0, #1
 800e5ea:	e7a6      	b.n	800e53a <_vfiprintf_r+0xfe>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	3401      	adds	r4, #1
 800e5f0:	9305      	str	r3, [sp, #20]
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	f04f 0c0a 	mov.w	ip, #10
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5fe:	3a30      	subs	r2, #48	; 0x30
 800e600:	2a09      	cmp	r2, #9
 800e602:	d903      	bls.n	800e60c <_vfiprintf_r+0x1d0>
 800e604:	2b00      	cmp	r3, #0
 800e606:	d0c6      	beq.n	800e596 <_vfiprintf_r+0x15a>
 800e608:	9105      	str	r1, [sp, #20]
 800e60a:	e7c4      	b.n	800e596 <_vfiprintf_r+0x15a>
 800e60c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e610:	4604      	mov	r4, r0
 800e612:	2301      	movs	r3, #1
 800e614:	e7f0      	b.n	800e5f8 <_vfiprintf_r+0x1bc>
 800e616:	ab03      	add	r3, sp, #12
 800e618:	9300      	str	r3, [sp, #0]
 800e61a:	462a      	mov	r2, r5
 800e61c:	4b12      	ldr	r3, [pc, #72]	; (800e668 <_vfiprintf_r+0x22c>)
 800e61e:	a904      	add	r1, sp, #16
 800e620:	4630      	mov	r0, r6
 800e622:	f7fb fd85 	bl	800a130 <_printf_float>
 800e626:	4607      	mov	r7, r0
 800e628:	1c78      	adds	r0, r7, #1
 800e62a:	d1d6      	bne.n	800e5da <_vfiprintf_r+0x19e>
 800e62c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e62e:	07d9      	lsls	r1, r3, #31
 800e630:	d405      	bmi.n	800e63e <_vfiprintf_r+0x202>
 800e632:	89ab      	ldrh	r3, [r5, #12]
 800e634:	059a      	lsls	r2, r3, #22
 800e636:	d402      	bmi.n	800e63e <_vfiprintf_r+0x202>
 800e638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e63a:	f7fd fca7 	bl	800bf8c <__retarget_lock_release_recursive>
 800e63e:	89ab      	ldrh	r3, [r5, #12]
 800e640:	065b      	lsls	r3, r3, #25
 800e642:	f53f af1d 	bmi.w	800e480 <_vfiprintf_r+0x44>
 800e646:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e648:	e71c      	b.n	800e484 <_vfiprintf_r+0x48>
 800e64a:	ab03      	add	r3, sp, #12
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	462a      	mov	r2, r5
 800e650:	4b05      	ldr	r3, [pc, #20]	; (800e668 <_vfiprintf_r+0x22c>)
 800e652:	a904      	add	r1, sp, #16
 800e654:	4630      	mov	r0, r6
 800e656:	f7fc f8bf 	bl	800a7d8 <_printf_i>
 800e65a:	e7e4      	b.n	800e626 <_vfiprintf_r+0x1ea>
 800e65c:	080101ac 	.word	0x080101ac
 800e660:	080101b6 	.word	0x080101b6
 800e664:	0800a131 	.word	0x0800a131
 800e668:	0800e419 	.word	0x0800e419
 800e66c:	080101b2 	.word	0x080101b2

0800e670 <_malloc_usable_size_r>:
 800e670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e674:	1f18      	subs	r0, r3, #4
 800e676:	2b00      	cmp	r3, #0
 800e678:	bfbc      	itt	lt
 800e67a:	580b      	ldrlt	r3, [r1, r0]
 800e67c:	18c0      	addlt	r0, r0, r3
 800e67e:	4770      	bx	lr

0800e680 <__swbuf_r>:
 800e680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e682:	460e      	mov	r6, r1
 800e684:	4614      	mov	r4, r2
 800e686:	4605      	mov	r5, r0
 800e688:	b118      	cbz	r0, 800e692 <__swbuf_r+0x12>
 800e68a:	6a03      	ldr	r3, [r0, #32]
 800e68c:	b90b      	cbnz	r3, 800e692 <__swbuf_r+0x12>
 800e68e:	f7fc fc8d 	bl	800afac <__sinit>
 800e692:	69a3      	ldr	r3, [r4, #24]
 800e694:	60a3      	str	r3, [r4, #8]
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	071a      	lsls	r2, r3, #28
 800e69a:	d525      	bpl.n	800e6e8 <__swbuf_r+0x68>
 800e69c:	6923      	ldr	r3, [r4, #16]
 800e69e:	b31b      	cbz	r3, 800e6e8 <__swbuf_r+0x68>
 800e6a0:	6823      	ldr	r3, [r4, #0]
 800e6a2:	6922      	ldr	r2, [r4, #16]
 800e6a4:	1a98      	subs	r0, r3, r2
 800e6a6:	6963      	ldr	r3, [r4, #20]
 800e6a8:	b2f6      	uxtb	r6, r6
 800e6aa:	4283      	cmp	r3, r0
 800e6ac:	4637      	mov	r7, r6
 800e6ae:	dc04      	bgt.n	800e6ba <__swbuf_r+0x3a>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7ff f8b6 	bl	800d824 <_fflush_r>
 800e6b8:	b9e0      	cbnz	r0, 800e6f4 <__swbuf_r+0x74>
 800e6ba:	68a3      	ldr	r3, [r4, #8]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	60a3      	str	r3, [r4, #8]
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	6022      	str	r2, [r4, #0]
 800e6c6:	701e      	strb	r6, [r3, #0]
 800e6c8:	6962      	ldr	r2, [r4, #20]
 800e6ca:	1c43      	adds	r3, r0, #1
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d004      	beq.n	800e6da <__swbuf_r+0x5a>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	07db      	lsls	r3, r3, #31
 800e6d4:	d506      	bpl.n	800e6e4 <__swbuf_r+0x64>
 800e6d6:	2e0a      	cmp	r6, #10
 800e6d8:	d104      	bne.n	800e6e4 <__swbuf_r+0x64>
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7ff f8a1 	bl	800d824 <_fflush_r>
 800e6e2:	b938      	cbnz	r0, 800e6f4 <__swbuf_r+0x74>
 800e6e4:	4638      	mov	r0, r7
 800e6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f000 f806 	bl	800e6fc <__swsetup_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d0d5      	beq.n	800e6a0 <__swbuf_r+0x20>
 800e6f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6f8:	e7f4      	b.n	800e6e4 <__swbuf_r+0x64>
	...

0800e6fc <__swsetup_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4b2a      	ldr	r3, [pc, #168]	; (800e7a8 <__swsetup_r+0xac>)
 800e700:	4605      	mov	r5, r0
 800e702:	6818      	ldr	r0, [r3, #0]
 800e704:	460c      	mov	r4, r1
 800e706:	b118      	cbz	r0, 800e710 <__swsetup_r+0x14>
 800e708:	6a03      	ldr	r3, [r0, #32]
 800e70a:	b90b      	cbnz	r3, 800e710 <__swsetup_r+0x14>
 800e70c:	f7fc fc4e 	bl	800afac <__sinit>
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e716:	0718      	lsls	r0, r3, #28
 800e718:	d422      	bmi.n	800e760 <__swsetup_r+0x64>
 800e71a:	06d9      	lsls	r1, r3, #27
 800e71c:	d407      	bmi.n	800e72e <__swsetup_r+0x32>
 800e71e:	2309      	movs	r3, #9
 800e720:	602b      	str	r3, [r5, #0]
 800e722:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e726:	81a3      	strh	r3, [r4, #12]
 800e728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e72c:	e034      	b.n	800e798 <__swsetup_r+0x9c>
 800e72e:	0758      	lsls	r0, r3, #29
 800e730:	d512      	bpl.n	800e758 <__swsetup_r+0x5c>
 800e732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e734:	b141      	cbz	r1, 800e748 <__swsetup_r+0x4c>
 800e736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e73a:	4299      	cmp	r1, r3
 800e73c:	d002      	beq.n	800e744 <__swsetup_r+0x48>
 800e73e:	4628      	mov	r0, r5
 800e740:	f7fe fadc 	bl	800ccfc <_free_r>
 800e744:	2300      	movs	r3, #0
 800e746:	6363      	str	r3, [r4, #52]	; 0x34
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e74e:	81a3      	strh	r3, [r4, #12]
 800e750:	2300      	movs	r3, #0
 800e752:	6063      	str	r3, [r4, #4]
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	6023      	str	r3, [r4, #0]
 800e758:	89a3      	ldrh	r3, [r4, #12]
 800e75a:	f043 0308 	orr.w	r3, r3, #8
 800e75e:	81a3      	strh	r3, [r4, #12]
 800e760:	6923      	ldr	r3, [r4, #16]
 800e762:	b94b      	cbnz	r3, 800e778 <__swsetup_r+0x7c>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e76a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e76e:	d003      	beq.n	800e778 <__swsetup_r+0x7c>
 800e770:	4621      	mov	r1, r4
 800e772:	4628      	mov	r0, r5
 800e774:	f000 f840 	bl	800e7f8 <__smakebuf_r>
 800e778:	89a0      	ldrh	r0, [r4, #12]
 800e77a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e77e:	f010 0301 	ands.w	r3, r0, #1
 800e782:	d00a      	beq.n	800e79a <__swsetup_r+0x9e>
 800e784:	2300      	movs	r3, #0
 800e786:	60a3      	str	r3, [r4, #8]
 800e788:	6963      	ldr	r3, [r4, #20]
 800e78a:	425b      	negs	r3, r3
 800e78c:	61a3      	str	r3, [r4, #24]
 800e78e:	6923      	ldr	r3, [r4, #16]
 800e790:	b943      	cbnz	r3, 800e7a4 <__swsetup_r+0xa8>
 800e792:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e796:	d1c4      	bne.n	800e722 <__swsetup_r+0x26>
 800e798:	bd38      	pop	{r3, r4, r5, pc}
 800e79a:	0781      	lsls	r1, r0, #30
 800e79c:	bf58      	it	pl
 800e79e:	6963      	ldrpl	r3, [r4, #20]
 800e7a0:	60a3      	str	r3, [r4, #8]
 800e7a2:	e7f4      	b.n	800e78e <__swsetup_r+0x92>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e7f7      	b.n	800e798 <__swsetup_r+0x9c>
 800e7a8:	200005d8 	.word	0x200005d8

0800e7ac <__swhatbuf_r>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b4:	2900      	cmp	r1, #0
 800e7b6:	b096      	sub	sp, #88	; 0x58
 800e7b8:	4615      	mov	r5, r2
 800e7ba:	461e      	mov	r6, r3
 800e7bc:	da0d      	bge.n	800e7da <__swhatbuf_r+0x2e>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7c4:	f04f 0100 	mov.w	r1, #0
 800e7c8:	bf0c      	ite	eq
 800e7ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7ce:	2340      	movne	r3, #64	; 0x40
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	6031      	str	r1, [r6, #0]
 800e7d4:	602b      	str	r3, [r5, #0]
 800e7d6:	b016      	add	sp, #88	; 0x58
 800e7d8:	bd70      	pop	{r4, r5, r6, pc}
 800e7da:	466a      	mov	r2, sp
 800e7dc:	f000 f848 	bl	800e870 <_fstat_r>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	dbec      	blt.n	800e7be <__swhatbuf_r+0x12>
 800e7e4:	9901      	ldr	r1, [sp, #4]
 800e7e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7ee:	4259      	negs	r1, r3
 800e7f0:	4159      	adcs	r1, r3
 800e7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f6:	e7eb      	b.n	800e7d0 <__swhatbuf_r+0x24>

0800e7f8 <__smakebuf_r>:
 800e7f8:	898b      	ldrh	r3, [r1, #12]
 800e7fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7fc:	079d      	lsls	r5, r3, #30
 800e7fe:	4606      	mov	r6, r0
 800e800:	460c      	mov	r4, r1
 800e802:	d507      	bpl.n	800e814 <__smakebuf_r+0x1c>
 800e804:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	2301      	movs	r3, #1
 800e80e:	6163      	str	r3, [r4, #20]
 800e810:	b002      	add	sp, #8
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	ab01      	add	r3, sp, #4
 800e816:	466a      	mov	r2, sp
 800e818:	f7ff ffc8 	bl	800e7ac <__swhatbuf_r>
 800e81c:	9900      	ldr	r1, [sp, #0]
 800e81e:	4605      	mov	r5, r0
 800e820:	4630      	mov	r0, r6
 800e822:	f7fb feeb 	bl	800a5fc <_malloc_r>
 800e826:	b948      	cbnz	r0, 800e83c <__smakebuf_r+0x44>
 800e828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82c:	059a      	lsls	r2, r3, #22
 800e82e:	d4ef      	bmi.n	800e810 <__smakebuf_r+0x18>
 800e830:	f023 0303 	bic.w	r3, r3, #3
 800e834:	f043 0302 	orr.w	r3, r3, #2
 800e838:	81a3      	strh	r3, [r4, #12]
 800e83a:	e7e3      	b.n	800e804 <__smakebuf_r+0xc>
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	6020      	str	r0, [r4, #0]
 800e840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	9b00      	ldr	r3, [sp, #0]
 800e848:	6163      	str	r3, [r4, #20]
 800e84a:	9b01      	ldr	r3, [sp, #4]
 800e84c:	6120      	str	r0, [r4, #16]
 800e84e:	b15b      	cbz	r3, 800e868 <__smakebuf_r+0x70>
 800e850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e854:	4630      	mov	r0, r6
 800e856:	f000 f81d 	bl	800e894 <_isatty_r>
 800e85a:	b128      	cbz	r0, 800e868 <__smakebuf_r+0x70>
 800e85c:	89a3      	ldrh	r3, [r4, #12]
 800e85e:	f023 0303 	bic.w	r3, r3, #3
 800e862:	f043 0301 	orr.w	r3, r3, #1
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	431d      	orrs	r5, r3
 800e86c:	81a5      	strh	r5, [r4, #12]
 800e86e:	e7cf      	b.n	800e810 <__smakebuf_r+0x18>

0800e870 <_fstat_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d07      	ldr	r5, [pc, #28]	; (800e890 <_fstat_r+0x20>)
 800e874:	2300      	movs	r3, #0
 800e876:	4604      	mov	r4, r0
 800e878:	4608      	mov	r0, r1
 800e87a:	4611      	mov	r1, r2
 800e87c:	602b      	str	r3, [r5, #0]
 800e87e:	f7f4 f902 	bl	8002a86 <_fstat>
 800e882:	1c43      	adds	r3, r0, #1
 800e884:	d102      	bne.n	800e88c <_fstat_r+0x1c>
 800e886:	682b      	ldr	r3, [r5, #0]
 800e888:	b103      	cbz	r3, 800e88c <_fstat_r+0x1c>
 800e88a:	6023      	str	r3, [r4, #0]
 800e88c:	bd38      	pop	{r3, r4, r5, pc}
 800e88e:	bf00      	nop
 800e890:	2000483c 	.word	0x2000483c

0800e894 <_isatty_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	4d06      	ldr	r5, [pc, #24]	; (800e8b0 <_isatty_r+0x1c>)
 800e898:	2300      	movs	r3, #0
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	602b      	str	r3, [r5, #0]
 800e8a0:	f7f4 f901 	bl	8002aa6 <_isatty>
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	d102      	bne.n	800e8ae <_isatty_r+0x1a>
 800e8a8:	682b      	ldr	r3, [r5, #0]
 800e8aa:	b103      	cbz	r3, 800e8ae <_isatty_r+0x1a>
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	bd38      	pop	{r3, r4, r5, pc}
 800e8b0:	2000483c 	.word	0x2000483c

0800e8b4 <_raise_r>:
 800e8b4:	291f      	cmp	r1, #31
 800e8b6:	b538      	push	{r3, r4, r5, lr}
 800e8b8:	4604      	mov	r4, r0
 800e8ba:	460d      	mov	r5, r1
 800e8bc:	d904      	bls.n	800e8c8 <_raise_r+0x14>
 800e8be:	2316      	movs	r3, #22
 800e8c0:	6003      	str	r3, [r0, #0]
 800e8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8c6:	bd38      	pop	{r3, r4, r5, pc}
 800e8c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e8ca:	b112      	cbz	r2, 800e8d2 <_raise_r+0x1e>
 800e8cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8d0:	b94b      	cbnz	r3, 800e8e6 <_raise_r+0x32>
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f000 f830 	bl	800e938 <_getpid_r>
 800e8d8:	462a      	mov	r2, r5
 800e8da:	4601      	mov	r1, r0
 800e8dc:	4620      	mov	r0, r4
 800e8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8e2:	f000 b817 	b.w	800e914 <_kill_r>
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d00a      	beq.n	800e900 <_raise_r+0x4c>
 800e8ea:	1c59      	adds	r1, r3, #1
 800e8ec:	d103      	bne.n	800e8f6 <_raise_r+0x42>
 800e8ee:	2316      	movs	r3, #22
 800e8f0:	6003      	str	r3, [r0, #0]
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	e7e7      	b.n	800e8c6 <_raise_r+0x12>
 800e8f6:	2400      	movs	r4, #0
 800e8f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	4798      	blx	r3
 800e900:	2000      	movs	r0, #0
 800e902:	e7e0      	b.n	800e8c6 <_raise_r+0x12>

0800e904 <raise>:
 800e904:	4b02      	ldr	r3, [pc, #8]	; (800e910 <raise+0xc>)
 800e906:	4601      	mov	r1, r0
 800e908:	6818      	ldr	r0, [r3, #0]
 800e90a:	f7ff bfd3 	b.w	800e8b4 <_raise_r>
 800e90e:	bf00      	nop
 800e910:	200005d8 	.word	0x200005d8

0800e914 <_kill_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4d07      	ldr	r5, [pc, #28]	; (800e934 <_kill_r+0x20>)
 800e918:	2300      	movs	r3, #0
 800e91a:	4604      	mov	r4, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	4611      	mov	r1, r2
 800e920:	602b      	str	r3, [r5, #0]
 800e922:	f7f4 f851 	bl	80029c8 <_kill>
 800e926:	1c43      	adds	r3, r0, #1
 800e928:	d102      	bne.n	800e930 <_kill_r+0x1c>
 800e92a:	682b      	ldr	r3, [r5, #0]
 800e92c:	b103      	cbz	r3, 800e930 <_kill_r+0x1c>
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	bd38      	pop	{r3, r4, r5, pc}
 800e932:	bf00      	nop
 800e934:	2000483c 	.word	0x2000483c

0800e938 <_getpid_r>:
 800e938:	f7f4 b83e 	b.w	80029b8 <_getpid>
 800e93c:	0000      	movs	r0, r0
	...

0800e940 <sin>:
 800e940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e942:	ec53 2b10 	vmov	r2, r3, d0
 800e946:	4828      	ldr	r0, [pc, #160]	; (800e9e8 <sin+0xa8>)
 800e948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e94c:	4281      	cmp	r1, r0
 800e94e:	dc07      	bgt.n	800e960 <sin+0x20>
 800e950:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e9e0 <sin+0xa0>
 800e954:	2000      	movs	r0, #0
 800e956:	b005      	add	sp, #20
 800e958:	f85d eb04 	ldr.w	lr, [sp], #4
 800e95c:	f000 beb0 	b.w	800f6c0 <__kernel_sin>
 800e960:	4822      	ldr	r0, [pc, #136]	; (800e9ec <sin+0xac>)
 800e962:	4281      	cmp	r1, r0
 800e964:	dd09      	ble.n	800e97a <sin+0x3a>
 800e966:	ee10 0a10 	vmov	r0, s0
 800e96a:	4619      	mov	r1, r3
 800e96c:	f7f1 fc8c 	bl	8000288 <__aeabi_dsub>
 800e970:	ec41 0b10 	vmov	d0, r0, r1
 800e974:	b005      	add	sp, #20
 800e976:	f85d fb04 	ldr.w	pc, [sp], #4
 800e97a:	4668      	mov	r0, sp
 800e97c:	f000 f880 	bl	800ea80 <__ieee754_rem_pio2>
 800e980:	f000 0003 	and.w	r0, r0, #3
 800e984:	2801      	cmp	r0, #1
 800e986:	d00c      	beq.n	800e9a2 <sin+0x62>
 800e988:	2802      	cmp	r0, #2
 800e98a:	d011      	beq.n	800e9b0 <sin+0x70>
 800e98c:	b9f0      	cbnz	r0, 800e9cc <sin+0x8c>
 800e98e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e992:	ed9d 0b00 	vldr	d0, [sp]
 800e996:	2001      	movs	r0, #1
 800e998:	f000 fe92 	bl	800f6c0 <__kernel_sin>
 800e99c:	ec51 0b10 	vmov	r0, r1, d0
 800e9a0:	e7e6      	b.n	800e970 <sin+0x30>
 800e9a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9a6:	ed9d 0b00 	vldr	d0, [sp]
 800e9aa:	f000 fdc1 	bl	800f530 <__kernel_cos>
 800e9ae:	e7f5      	b.n	800e99c <sin+0x5c>
 800e9b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9b4:	ed9d 0b00 	vldr	d0, [sp]
 800e9b8:	2001      	movs	r0, #1
 800e9ba:	f000 fe81 	bl	800f6c0 <__kernel_sin>
 800e9be:	ec53 2b10 	vmov	r2, r3, d0
 800e9c2:	ee10 0a10 	vmov	r0, s0
 800e9c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e9ca:	e7d1      	b.n	800e970 <sin+0x30>
 800e9cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9d0:	ed9d 0b00 	vldr	d0, [sp]
 800e9d4:	f000 fdac 	bl	800f530 <__kernel_cos>
 800e9d8:	e7f1      	b.n	800e9be <sin+0x7e>
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w
	...
 800e9e8:	3fe921fb 	.word	0x3fe921fb
 800e9ec:	7fefffff 	.word	0x7fefffff

0800e9f0 <round>:
 800e9f0:	ec53 2b10 	vmov	r2, r3, d0
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e9fa:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e9fe:	2813      	cmp	r0, #19
 800ea00:	ee10 5a10 	vmov	r5, s0
 800ea04:	4619      	mov	r1, r3
 800ea06:	dc18      	bgt.n	800ea3a <round+0x4a>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	da09      	bge.n	800ea20 <round+0x30>
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800ea12:	d103      	bne.n	800ea1c <round+0x2c>
 800ea14:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800ea18:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	e02a      	b.n	800ea76 <round+0x86>
 800ea20:	4c16      	ldr	r4, [pc, #88]	; (800ea7c <round+0x8c>)
 800ea22:	4104      	asrs	r4, r0
 800ea24:	ea03 0604 	and.w	r6, r3, r4
 800ea28:	4316      	orrs	r6, r2
 800ea2a:	d011      	beq.n	800ea50 <round+0x60>
 800ea2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea30:	4103      	asrs	r3, r0
 800ea32:	440b      	add	r3, r1
 800ea34:	ea23 0104 	bic.w	r1, r3, r4
 800ea38:	e7f0      	b.n	800ea1c <round+0x2c>
 800ea3a:	2833      	cmp	r0, #51	; 0x33
 800ea3c:	dd0b      	ble.n	800ea56 <round+0x66>
 800ea3e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ea42:	d105      	bne.n	800ea50 <round+0x60>
 800ea44:	ee10 0a10 	vmov	r0, s0
 800ea48:	f7f1 fc20 	bl	800028c <__adddf3>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	460b      	mov	r3, r1
 800ea50:	ec43 2b10 	vmov	d0, r2, r3
 800ea54:	bd70      	pop	{r4, r5, r6, pc}
 800ea56:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ea5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ea5e:	40f4      	lsrs	r4, r6
 800ea60:	4214      	tst	r4, r2
 800ea62:	d0f5      	beq.n	800ea50 <round+0x60>
 800ea64:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ea68:	2301      	movs	r3, #1
 800ea6a:	4083      	lsls	r3, r0
 800ea6c:	195b      	adds	r3, r3, r5
 800ea6e:	bf28      	it	cs
 800ea70:	3101      	addcs	r1, #1
 800ea72:	ea23 0304 	bic.w	r3, r3, r4
 800ea76:	461a      	mov	r2, r3
 800ea78:	460b      	mov	r3, r1
 800ea7a:	e7e9      	b.n	800ea50 <round+0x60>
 800ea7c:	000fffff 	.word	0x000fffff

0800ea80 <__ieee754_rem_pio2>:
 800ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea84:	ed2d 8b02 	vpush	{d8}
 800ea88:	ec55 4b10 	vmov	r4, r5, d0
 800ea8c:	4bca      	ldr	r3, [pc, #808]	; (800edb8 <__ieee754_rem_pio2+0x338>)
 800ea8e:	b08b      	sub	sp, #44	; 0x2c
 800ea90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ea94:	4598      	cmp	r8, r3
 800ea96:	4682      	mov	sl, r0
 800ea98:	9502      	str	r5, [sp, #8]
 800ea9a:	dc08      	bgt.n	800eaae <__ieee754_rem_pio2+0x2e>
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	ed80 0b00 	vstr	d0, [r0]
 800eaa4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eaa8:	f04f 0b00 	mov.w	fp, #0
 800eaac:	e028      	b.n	800eb00 <__ieee754_rem_pio2+0x80>
 800eaae:	4bc3      	ldr	r3, [pc, #780]	; (800edbc <__ieee754_rem_pio2+0x33c>)
 800eab0:	4598      	cmp	r8, r3
 800eab2:	dc78      	bgt.n	800eba6 <__ieee754_rem_pio2+0x126>
 800eab4:	9b02      	ldr	r3, [sp, #8]
 800eab6:	4ec2      	ldr	r6, [pc, #776]	; (800edc0 <__ieee754_rem_pio2+0x340>)
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	ee10 0a10 	vmov	r0, s0
 800eabe:	a3b0      	add	r3, pc, #704	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x300>)
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	4629      	mov	r1, r5
 800eac6:	dd39      	ble.n	800eb3c <__ieee754_rem_pio2+0xbc>
 800eac8:	f7f1 fbde 	bl	8000288 <__aeabi_dsub>
 800eacc:	45b0      	cmp	r8, r6
 800eace:	4604      	mov	r4, r0
 800ead0:	460d      	mov	r5, r1
 800ead2:	d01b      	beq.n	800eb0c <__ieee754_rem_pio2+0x8c>
 800ead4:	a3ac      	add	r3, pc, #688	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x308>)
 800ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eada:	f7f1 fbd5 	bl	8000288 <__aeabi_dsub>
 800eade:	4602      	mov	r2, r0
 800eae0:	460b      	mov	r3, r1
 800eae2:	e9ca 2300 	strd	r2, r3, [sl]
 800eae6:	4620      	mov	r0, r4
 800eae8:	4629      	mov	r1, r5
 800eaea:	f7f1 fbcd 	bl	8000288 <__aeabi_dsub>
 800eaee:	a3a6      	add	r3, pc, #664	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x308>)
 800eaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf4:	f7f1 fbc8 	bl	8000288 <__aeabi_dsub>
 800eaf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eafc:	f04f 0b01 	mov.w	fp, #1
 800eb00:	4658      	mov	r0, fp
 800eb02:	b00b      	add	sp, #44	; 0x2c
 800eb04:	ecbd 8b02 	vpop	{d8}
 800eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x310>)
 800eb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb12:	f7f1 fbb9 	bl	8000288 <__aeabi_dsub>
 800eb16:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x318>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	460d      	mov	r5, r1
 800eb20:	f7f1 fbb2 	bl	8000288 <__aeabi_dsub>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	e9ca 2300 	strd	r2, r3, [sl]
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	4629      	mov	r1, r5
 800eb30:	f7f1 fbaa 	bl	8000288 <__aeabi_dsub>
 800eb34:	a398      	add	r3, pc, #608	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x318>)
 800eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3a:	e7db      	b.n	800eaf4 <__ieee754_rem_pio2+0x74>
 800eb3c:	f7f1 fba6 	bl	800028c <__adddf3>
 800eb40:	45b0      	cmp	r8, r6
 800eb42:	4604      	mov	r4, r0
 800eb44:	460d      	mov	r5, r1
 800eb46:	d016      	beq.n	800eb76 <__ieee754_rem_pio2+0xf6>
 800eb48:	a38f      	add	r3, pc, #572	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x308>)
 800eb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4e:	f7f1 fb9d 	bl	800028c <__adddf3>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	e9ca 2300 	strd	r2, r3, [sl]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	f7f1 fb93 	bl	8000288 <__aeabi_dsub>
 800eb62:	a389      	add	r3, pc, #548	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x308>)
 800eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb68:	f7f1 fb90 	bl	800028c <__adddf3>
 800eb6c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800eb70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb74:	e7c4      	b.n	800eb00 <__ieee754_rem_pio2+0x80>
 800eb76:	a386      	add	r3, pc, #536	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x310>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	f7f1 fb86 	bl	800028c <__adddf3>
 800eb80:	a385      	add	r3, pc, #532	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x318>)
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	4604      	mov	r4, r0
 800eb88:	460d      	mov	r5, r1
 800eb8a:	f7f1 fb7f 	bl	800028c <__adddf3>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e9ca 2300 	strd	r2, r3, [sl]
 800eb96:	4620      	mov	r0, r4
 800eb98:	4629      	mov	r1, r5
 800eb9a:	f7f1 fb75 	bl	8000288 <__aeabi_dsub>
 800eb9e:	a37e      	add	r3, pc, #504	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x318>)
 800eba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba4:	e7e0      	b.n	800eb68 <__ieee754_rem_pio2+0xe8>
 800eba6:	4b87      	ldr	r3, [pc, #540]	; (800edc4 <__ieee754_rem_pio2+0x344>)
 800eba8:	4598      	cmp	r8, r3
 800ebaa:	f300 80d8 	bgt.w	800ed5e <__ieee754_rem_pio2+0x2de>
 800ebae:	f000 fe45 	bl	800f83c <fabs>
 800ebb2:	ec55 4b10 	vmov	r4, r5, d0
 800ebb6:	ee10 0a10 	vmov	r0, s0
 800ebba:	a379      	add	r3, pc, #484	; (adr r3, 800eda0 <__ieee754_rem_pio2+0x320>)
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	f7f1 fd19 	bl	80005f8 <__aeabi_dmul>
 800ebc6:	4b80      	ldr	r3, [pc, #512]	; (800edc8 <__ieee754_rem_pio2+0x348>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f7f1 fb5f 	bl	800028c <__adddf3>
 800ebce:	f7f1 ffc3 	bl	8000b58 <__aeabi_d2iz>
 800ebd2:	4683      	mov	fp, r0
 800ebd4:	f7f1 fca6 	bl	8000524 <__aeabi_i2d>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	460b      	mov	r3, r1
 800ebdc:	ec43 2b18 	vmov	d8, r2, r3
 800ebe0:	a367      	add	r3, pc, #412	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x300>)
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	f7f1 fd07 	bl	80005f8 <__aeabi_dmul>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 fb49 	bl	8000288 <__aeabi_dsub>
 800ebf6:	a364      	add	r3, pc, #400	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x308>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	460f      	mov	r7, r1
 800ec00:	ec51 0b18 	vmov	r0, r1, d8
 800ec04:	f7f1 fcf8 	bl	80005f8 <__aeabi_dmul>
 800ec08:	f1bb 0f1f 	cmp.w	fp, #31
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	460d      	mov	r5, r1
 800ec10:	dc0d      	bgt.n	800ec2e <__ieee754_rem_pio2+0x1ae>
 800ec12:	4b6e      	ldr	r3, [pc, #440]	; (800edcc <__ieee754_rem_pio2+0x34c>)
 800ec14:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ec18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1c:	4543      	cmp	r3, r8
 800ec1e:	d006      	beq.n	800ec2e <__ieee754_rem_pio2+0x1ae>
 800ec20:	4622      	mov	r2, r4
 800ec22:	462b      	mov	r3, r5
 800ec24:	4630      	mov	r0, r6
 800ec26:	4639      	mov	r1, r7
 800ec28:	f7f1 fb2e 	bl	8000288 <__aeabi_dsub>
 800ec2c:	e00e      	b.n	800ec4c <__ieee754_rem_pio2+0x1cc>
 800ec2e:	462b      	mov	r3, r5
 800ec30:	4622      	mov	r2, r4
 800ec32:	4630      	mov	r0, r6
 800ec34:	4639      	mov	r1, r7
 800ec36:	f7f1 fb27 	bl	8000288 <__aeabi_dsub>
 800ec3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec3e:	9303      	str	r3, [sp, #12]
 800ec40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec44:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ec48:	2b10      	cmp	r3, #16
 800ec4a:	dc02      	bgt.n	800ec52 <__ieee754_rem_pio2+0x1d2>
 800ec4c:	e9ca 0100 	strd	r0, r1, [sl]
 800ec50:	e039      	b.n	800ecc6 <__ieee754_rem_pio2+0x246>
 800ec52:	a34f      	add	r3, pc, #316	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x310>)
 800ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec58:	ec51 0b18 	vmov	r0, r1, d8
 800ec5c:	f7f1 fccc 	bl	80005f8 <__aeabi_dmul>
 800ec60:	4604      	mov	r4, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 fb0c 	bl	8000288 <__aeabi_dsub>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4680      	mov	r8, r0
 800ec76:	4689      	mov	r9, r1
 800ec78:	4630      	mov	r0, r6
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	f7f1 fb04 	bl	8000288 <__aeabi_dsub>
 800ec80:	4622      	mov	r2, r4
 800ec82:	462b      	mov	r3, r5
 800ec84:	f7f1 fb00 	bl	8000288 <__aeabi_dsub>
 800ec88:	a343      	add	r3, pc, #268	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x318>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	4604      	mov	r4, r0
 800ec90:	460d      	mov	r5, r1
 800ec92:	ec51 0b18 	vmov	r0, r1, d8
 800ec96:	f7f1 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	4604      	mov	r4, r0
 800eca8:	460d      	mov	r5, r1
 800ecaa:	4640      	mov	r0, r8
 800ecac:	4649      	mov	r1, r9
 800ecae:	f7f1 faeb 	bl	8000288 <__aeabi_dsub>
 800ecb2:	9a03      	ldr	r2, [sp, #12]
 800ecb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ecb8:	1ad3      	subs	r3, r2, r3
 800ecba:	2b31      	cmp	r3, #49	; 0x31
 800ecbc:	dc24      	bgt.n	800ed08 <__ieee754_rem_pio2+0x288>
 800ecbe:	e9ca 0100 	strd	r0, r1, [sl]
 800ecc2:	4646      	mov	r6, r8
 800ecc4:	464f      	mov	r7, r9
 800ecc6:	e9da 8900 	ldrd	r8, r9, [sl]
 800ecca:	4630      	mov	r0, r6
 800eccc:	4642      	mov	r2, r8
 800ecce:	464b      	mov	r3, r9
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	f7f1 fad9 	bl	8000288 <__aeabi_dsub>
 800ecd6:	462b      	mov	r3, r5
 800ecd8:	4622      	mov	r2, r4
 800ecda:	f7f1 fad5 	bl	8000288 <__aeabi_dsub>
 800ecde:	9b02      	ldr	r3, [sp, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ece6:	f6bf af0b 	bge.w	800eb00 <__ieee754_rem_pio2+0x80>
 800ecea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecee:	f8ca 3004 	str.w	r3, [sl, #4]
 800ecf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf6:	f8ca 8000 	str.w	r8, [sl]
 800ecfa:	f8ca 0008 	str.w	r0, [sl, #8]
 800ecfe:	f8ca 300c 	str.w	r3, [sl, #12]
 800ed02:	f1cb 0b00 	rsb	fp, fp, #0
 800ed06:	e6fb      	b.n	800eb00 <__ieee754_rem_pio2+0x80>
 800ed08:	a327      	add	r3, pc, #156	; (adr r3, 800eda8 <__ieee754_rem_pio2+0x328>)
 800ed0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0e:	ec51 0b18 	vmov	r0, r1, d8
 800ed12:	f7f1 fc71 	bl	80005f8 <__aeabi_dmul>
 800ed16:	4604      	mov	r4, r0
 800ed18:	460d      	mov	r5, r1
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	4640      	mov	r0, r8
 800ed20:	4649      	mov	r1, r9
 800ed22:	f7f1 fab1 	bl	8000288 <__aeabi_dsub>
 800ed26:	4602      	mov	r2, r0
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4606      	mov	r6, r0
 800ed2c:	460f      	mov	r7, r1
 800ed2e:	4640      	mov	r0, r8
 800ed30:	4649      	mov	r1, r9
 800ed32:	f7f1 faa9 	bl	8000288 <__aeabi_dsub>
 800ed36:	4622      	mov	r2, r4
 800ed38:	462b      	mov	r3, r5
 800ed3a:	f7f1 faa5 	bl	8000288 <__aeabi_dsub>
 800ed3e:	a31c      	add	r3, pc, #112	; (adr r3, 800edb0 <__ieee754_rem_pio2+0x330>)
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4604      	mov	r4, r0
 800ed46:	460d      	mov	r5, r1
 800ed48:	ec51 0b18 	vmov	r0, r1, d8
 800ed4c:	f7f1 fc54 	bl	80005f8 <__aeabi_dmul>
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	f7f1 fa98 	bl	8000288 <__aeabi_dsub>
 800ed58:	4604      	mov	r4, r0
 800ed5a:	460d      	mov	r5, r1
 800ed5c:	e760      	b.n	800ec20 <__ieee754_rem_pio2+0x1a0>
 800ed5e:	4b1c      	ldr	r3, [pc, #112]	; (800edd0 <__ieee754_rem_pio2+0x350>)
 800ed60:	4598      	cmp	r8, r3
 800ed62:	dd37      	ble.n	800edd4 <__ieee754_rem_pio2+0x354>
 800ed64:	ee10 2a10 	vmov	r2, s0
 800ed68:	462b      	mov	r3, r5
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	4629      	mov	r1, r5
 800ed6e:	f7f1 fa8b 	bl	8000288 <__aeabi_dsub>
 800ed72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed76:	e9ca 0100 	strd	r0, r1, [sl]
 800ed7a:	e695      	b.n	800eaa8 <__ieee754_rem_pio2+0x28>
 800ed7c:	f3af 8000 	nop.w
 800ed80:	54400000 	.word	0x54400000
 800ed84:	3ff921fb 	.word	0x3ff921fb
 800ed88:	1a626331 	.word	0x1a626331
 800ed8c:	3dd0b461 	.word	0x3dd0b461
 800ed90:	1a600000 	.word	0x1a600000
 800ed94:	3dd0b461 	.word	0x3dd0b461
 800ed98:	2e037073 	.word	0x2e037073
 800ed9c:	3ba3198a 	.word	0x3ba3198a
 800eda0:	6dc9c883 	.word	0x6dc9c883
 800eda4:	3fe45f30 	.word	0x3fe45f30
 800eda8:	2e000000 	.word	0x2e000000
 800edac:	3ba3198a 	.word	0x3ba3198a
 800edb0:	252049c1 	.word	0x252049c1
 800edb4:	397b839a 	.word	0x397b839a
 800edb8:	3fe921fb 	.word	0x3fe921fb
 800edbc:	4002d97b 	.word	0x4002d97b
 800edc0:	3ff921fb 	.word	0x3ff921fb
 800edc4:	413921fb 	.word	0x413921fb
 800edc8:	3fe00000 	.word	0x3fe00000
 800edcc:	08010314 	.word	0x08010314
 800edd0:	7fefffff 	.word	0x7fefffff
 800edd4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800edd8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800eddc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800ede0:	4620      	mov	r0, r4
 800ede2:	460d      	mov	r5, r1
 800ede4:	f7f1 feb8 	bl	8000b58 <__aeabi_d2iz>
 800ede8:	f7f1 fb9c 	bl	8000524 <__aeabi_i2d>
 800edec:	4602      	mov	r2, r0
 800edee:	460b      	mov	r3, r1
 800edf0:	4620      	mov	r0, r4
 800edf2:	4629      	mov	r1, r5
 800edf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800edf8:	f7f1 fa46 	bl	8000288 <__aeabi_dsub>
 800edfc:	4b21      	ldr	r3, [pc, #132]	; (800ee84 <__ieee754_rem_pio2+0x404>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	f7f1 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ee04:	460d      	mov	r5, r1
 800ee06:	4604      	mov	r4, r0
 800ee08:	f7f1 fea6 	bl	8000b58 <__aeabi_d2iz>
 800ee0c:	f7f1 fb8a 	bl	8000524 <__aeabi_i2d>
 800ee10:	4602      	mov	r2, r0
 800ee12:	460b      	mov	r3, r1
 800ee14:	4620      	mov	r0, r4
 800ee16:	4629      	mov	r1, r5
 800ee18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee1c:	f7f1 fa34 	bl	8000288 <__aeabi_dsub>
 800ee20:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <__ieee754_rem_pio2+0x404>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	f7f1 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ee28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee2c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ee30:	2703      	movs	r7, #3
 800ee32:	2400      	movs	r4, #0
 800ee34:	2500      	movs	r5, #0
 800ee36:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	46b9      	mov	r9, r7
 800ee40:	3f01      	subs	r7, #1
 800ee42:	f7f1 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d1f5      	bne.n	800ee36 <__ieee754_rem_pio2+0x3b6>
 800ee4a:	4b0f      	ldr	r3, [pc, #60]	; (800ee88 <__ieee754_rem_pio2+0x408>)
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	2302      	movs	r3, #2
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	4632      	mov	r2, r6
 800ee54:	464b      	mov	r3, r9
 800ee56:	4651      	mov	r1, sl
 800ee58:	a804      	add	r0, sp, #16
 800ee5a:	f000 f819 	bl	800ee90 <__kernel_rem_pio2>
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	4683      	mov	fp, r0
 800ee64:	f6bf ae4c 	bge.w	800eb00 <__ieee754_rem_pio2+0x80>
 800ee68:	e9da 2100 	ldrd	r2, r1, [sl]
 800ee6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee70:	e9ca 2300 	strd	r2, r3, [sl]
 800ee74:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ee78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee7c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ee80:	e73f      	b.n	800ed02 <__ieee754_rem_pio2+0x282>
 800ee82:	bf00      	nop
 800ee84:	41700000 	.word	0x41700000
 800ee88:	08010394 	.word	0x08010394
 800ee8c:	00000000 	.word	0x00000000

0800ee90 <__kernel_rem_pio2>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	ed2d 8b02 	vpush	{d8}
 800ee98:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ee9c:	f112 0f14 	cmn.w	r2, #20
 800eea0:	9306      	str	r3, [sp, #24]
 800eea2:	9104      	str	r1, [sp, #16]
 800eea4:	4bc2      	ldr	r3, [pc, #776]	; (800f1b0 <__kernel_rem_pio2+0x320>)
 800eea6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800eea8:	9009      	str	r0, [sp, #36]	; 0x24
 800eeaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	9b06      	ldr	r3, [sp, #24]
 800eeb2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800eeb6:	bfa8      	it	ge
 800eeb8:	1ed4      	subge	r4, r2, #3
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	bfb2      	itee	lt
 800eebe:	2400      	movlt	r4, #0
 800eec0:	2318      	movge	r3, #24
 800eec2:	fb94 f4f3 	sdivge	r4, r4, r3
 800eec6:	f06f 0317 	mvn.w	r3, #23
 800eeca:	fb04 3303 	mla	r3, r4, r3, r3
 800eece:	eb03 0a02 	add.w	sl, r3, r2
 800eed2:	9b00      	ldr	r3, [sp, #0]
 800eed4:	9a05      	ldr	r2, [sp, #20]
 800eed6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f1a0 <__kernel_rem_pio2+0x310>
 800eeda:	eb03 0802 	add.w	r8, r3, r2
 800eede:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eee0:	1aa7      	subs	r7, r4, r2
 800eee2:	ae20      	add	r6, sp, #128	; 0x80
 800eee4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eee8:	2500      	movs	r5, #0
 800eeea:	4545      	cmp	r5, r8
 800eeec:	dd13      	ble.n	800ef16 <__kernel_rem_pio2+0x86>
 800eeee:	9b06      	ldr	r3, [sp, #24]
 800eef0:	aa20      	add	r2, sp, #128	; 0x80
 800eef2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800eef6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800eefa:	f04f 0800 	mov.w	r8, #0
 800eefe:	9b00      	ldr	r3, [sp, #0]
 800ef00:	4598      	cmp	r8, r3
 800ef02:	dc31      	bgt.n	800ef68 <__kernel_rem_pio2+0xd8>
 800ef04:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f1a0 <__kernel_rem_pio2+0x310>
 800ef08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ef0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef10:	462f      	mov	r7, r5
 800ef12:	2600      	movs	r6, #0
 800ef14:	e01b      	b.n	800ef4e <__kernel_rem_pio2+0xbe>
 800ef16:	42ef      	cmn	r7, r5
 800ef18:	d407      	bmi.n	800ef2a <__kernel_rem_pio2+0x9a>
 800ef1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef1e:	f7f1 fb01 	bl	8000524 <__aeabi_i2d>
 800ef22:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef26:	3501      	adds	r5, #1
 800ef28:	e7df      	b.n	800eeea <__kernel_rem_pio2+0x5a>
 800ef2a:	ec51 0b18 	vmov	r0, r1, d8
 800ef2e:	e7f8      	b.n	800ef22 <__kernel_rem_pio2+0x92>
 800ef30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ef38:	f7f1 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef44:	f7f1 f9a2 	bl	800028c <__adddf3>
 800ef48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef4c:	3601      	adds	r6, #1
 800ef4e:	9b05      	ldr	r3, [sp, #20]
 800ef50:	429e      	cmp	r6, r3
 800ef52:	f1a7 0708 	sub.w	r7, r7, #8
 800ef56:	ddeb      	ble.n	800ef30 <__kernel_rem_pio2+0xa0>
 800ef58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef5c:	f108 0801 	add.w	r8, r8, #1
 800ef60:	ecab 7b02 	vstmia	fp!, {d7}
 800ef64:	3508      	adds	r5, #8
 800ef66:	e7ca      	b.n	800eefe <__kernel_rem_pio2+0x6e>
 800ef68:	9b00      	ldr	r3, [sp, #0]
 800ef6a:	aa0c      	add	r2, sp, #48	; 0x30
 800ef6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef72:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ef74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ef78:	9c00      	ldr	r4, [sp, #0]
 800ef7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ef7c:	00e3      	lsls	r3, r4, #3
 800ef7e:	9308      	str	r3, [sp, #32]
 800ef80:	ab98      	add	r3, sp, #608	; 0x260
 800ef82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ef8a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ef8e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ef94:	46c3      	mov	fp, r8
 800ef96:	46a1      	mov	r9, r4
 800ef98:	f1b9 0f00 	cmp.w	r9, #0
 800ef9c:	f1a5 0508 	sub.w	r5, r5, #8
 800efa0:	dc77      	bgt.n	800f092 <__kernel_rem_pio2+0x202>
 800efa2:	ec47 6b10 	vmov	d0, r6, r7
 800efa6:	4650      	mov	r0, sl
 800efa8:	f000 fc52 	bl	800f850 <scalbn>
 800efac:	ec57 6b10 	vmov	r6, r7, d0
 800efb0:	2200      	movs	r2, #0
 800efb2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800efb6:	ee10 0a10 	vmov	r0, s0
 800efba:	4639      	mov	r1, r7
 800efbc:	f7f1 fb1c 	bl	80005f8 <__aeabi_dmul>
 800efc0:	ec41 0b10 	vmov	d0, r0, r1
 800efc4:	f000 fcc4 	bl	800f950 <floor>
 800efc8:	4b7a      	ldr	r3, [pc, #488]	; (800f1b4 <__kernel_rem_pio2+0x324>)
 800efca:	ec51 0b10 	vmov	r0, r1, d0
 800efce:	2200      	movs	r2, #0
 800efd0:	f7f1 fb12 	bl	80005f8 <__aeabi_dmul>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	4630      	mov	r0, r6
 800efda:	4639      	mov	r1, r7
 800efdc:	f7f1 f954 	bl	8000288 <__aeabi_dsub>
 800efe0:	460f      	mov	r7, r1
 800efe2:	4606      	mov	r6, r0
 800efe4:	f7f1 fdb8 	bl	8000b58 <__aeabi_d2iz>
 800efe8:	9002      	str	r0, [sp, #8]
 800efea:	f7f1 fa9b 	bl	8000524 <__aeabi_i2d>
 800efee:	4602      	mov	r2, r0
 800eff0:	460b      	mov	r3, r1
 800eff2:	4630      	mov	r0, r6
 800eff4:	4639      	mov	r1, r7
 800eff6:	f7f1 f947 	bl	8000288 <__aeabi_dsub>
 800effa:	f1ba 0f00 	cmp.w	sl, #0
 800effe:	4606      	mov	r6, r0
 800f000:	460f      	mov	r7, r1
 800f002:	dd6d      	ble.n	800f0e0 <__kernel_rem_pio2+0x250>
 800f004:	1e61      	subs	r1, r4, #1
 800f006:	ab0c      	add	r3, sp, #48	; 0x30
 800f008:	9d02      	ldr	r5, [sp, #8]
 800f00a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f00e:	f1ca 0018 	rsb	r0, sl, #24
 800f012:	fa43 f200 	asr.w	r2, r3, r0
 800f016:	4415      	add	r5, r2
 800f018:	4082      	lsls	r2, r0
 800f01a:	1a9b      	subs	r3, r3, r2
 800f01c:	aa0c      	add	r2, sp, #48	; 0x30
 800f01e:	9502      	str	r5, [sp, #8]
 800f020:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f024:	f1ca 0217 	rsb	r2, sl, #23
 800f028:	fa43 fb02 	asr.w	fp, r3, r2
 800f02c:	f1bb 0f00 	cmp.w	fp, #0
 800f030:	dd65      	ble.n	800f0fe <__kernel_rem_pio2+0x26e>
 800f032:	9b02      	ldr	r3, [sp, #8]
 800f034:	2200      	movs	r2, #0
 800f036:	3301      	adds	r3, #1
 800f038:	9302      	str	r3, [sp, #8]
 800f03a:	4615      	mov	r5, r2
 800f03c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f040:	4294      	cmp	r4, r2
 800f042:	f300 809f 	bgt.w	800f184 <__kernel_rem_pio2+0x2f4>
 800f046:	f1ba 0f00 	cmp.w	sl, #0
 800f04a:	dd07      	ble.n	800f05c <__kernel_rem_pio2+0x1cc>
 800f04c:	f1ba 0f01 	cmp.w	sl, #1
 800f050:	f000 80c1 	beq.w	800f1d6 <__kernel_rem_pio2+0x346>
 800f054:	f1ba 0f02 	cmp.w	sl, #2
 800f058:	f000 80c7 	beq.w	800f1ea <__kernel_rem_pio2+0x35a>
 800f05c:	f1bb 0f02 	cmp.w	fp, #2
 800f060:	d14d      	bne.n	800f0fe <__kernel_rem_pio2+0x26e>
 800f062:	4632      	mov	r2, r6
 800f064:	463b      	mov	r3, r7
 800f066:	4954      	ldr	r1, [pc, #336]	; (800f1b8 <__kernel_rem_pio2+0x328>)
 800f068:	2000      	movs	r0, #0
 800f06a:	f7f1 f90d 	bl	8000288 <__aeabi_dsub>
 800f06e:	4606      	mov	r6, r0
 800f070:	460f      	mov	r7, r1
 800f072:	2d00      	cmp	r5, #0
 800f074:	d043      	beq.n	800f0fe <__kernel_rem_pio2+0x26e>
 800f076:	4650      	mov	r0, sl
 800f078:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f1a8 <__kernel_rem_pio2+0x318>
 800f07c:	f000 fbe8 	bl	800f850 <scalbn>
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	ec53 2b10 	vmov	r2, r3, d0
 800f088:	f7f1 f8fe 	bl	8000288 <__aeabi_dsub>
 800f08c:	4606      	mov	r6, r0
 800f08e:	460f      	mov	r7, r1
 800f090:	e035      	b.n	800f0fe <__kernel_rem_pio2+0x26e>
 800f092:	4b4a      	ldr	r3, [pc, #296]	; (800f1bc <__kernel_rem_pio2+0x32c>)
 800f094:	2200      	movs	r2, #0
 800f096:	4630      	mov	r0, r6
 800f098:	4639      	mov	r1, r7
 800f09a:	f7f1 faad 	bl	80005f8 <__aeabi_dmul>
 800f09e:	f7f1 fd5b 	bl	8000b58 <__aeabi_d2iz>
 800f0a2:	f7f1 fa3f 	bl	8000524 <__aeabi_i2d>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	ec43 2b18 	vmov	d8, r2, r3
 800f0ae:	4b44      	ldr	r3, [pc, #272]	; (800f1c0 <__kernel_rem_pio2+0x330>)
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f7f1 faa1 	bl	80005f8 <__aeabi_dmul>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	4639      	mov	r1, r7
 800f0be:	f7f1 f8e3 	bl	8000288 <__aeabi_dsub>
 800f0c2:	f7f1 fd49 	bl	8000b58 <__aeabi_d2iz>
 800f0c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0ca:	f84b 0b04 	str.w	r0, [fp], #4
 800f0ce:	ec51 0b18 	vmov	r0, r1, d8
 800f0d2:	f7f1 f8db 	bl	800028c <__adddf3>
 800f0d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f0da:	4606      	mov	r6, r0
 800f0dc:	460f      	mov	r7, r1
 800f0de:	e75b      	b.n	800ef98 <__kernel_rem_pio2+0x108>
 800f0e0:	d106      	bne.n	800f0f0 <__kernel_rem_pio2+0x260>
 800f0e2:	1e63      	subs	r3, r4, #1
 800f0e4:	aa0c      	add	r2, sp, #48	; 0x30
 800f0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f0ee:	e79d      	b.n	800f02c <__kernel_rem_pio2+0x19c>
 800f0f0:	4b34      	ldr	r3, [pc, #208]	; (800f1c4 <__kernel_rem_pio2+0x334>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f7f1 fd06 	bl	8000b04 <__aeabi_dcmpge>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d140      	bne.n	800f17e <__kernel_rem_pio2+0x2ee>
 800f0fc:	4683      	mov	fp, r0
 800f0fe:	2200      	movs	r2, #0
 800f100:	2300      	movs	r3, #0
 800f102:	4630      	mov	r0, r6
 800f104:	4639      	mov	r1, r7
 800f106:	f7f1 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	f000 80c1 	beq.w	800f292 <__kernel_rem_pio2+0x402>
 800f110:	1e65      	subs	r5, r4, #1
 800f112:	462b      	mov	r3, r5
 800f114:	2200      	movs	r2, #0
 800f116:	9900      	ldr	r1, [sp, #0]
 800f118:	428b      	cmp	r3, r1
 800f11a:	da6d      	bge.n	800f1f8 <__kernel_rem_pio2+0x368>
 800f11c:	2a00      	cmp	r2, #0
 800f11e:	f000 808a 	beq.w	800f236 <__kernel_rem_pio2+0x3a6>
 800f122:	ab0c      	add	r3, sp, #48	; 0x30
 800f124:	f1aa 0a18 	sub.w	sl, sl, #24
 800f128:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f000 80ae 	beq.w	800f28e <__kernel_rem_pio2+0x3fe>
 800f132:	4650      	mov	r0, sl
 800f134:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f1a8 <__kernel_rem_pio2+0x318>
 800f138:	f000 fb8a 	bl	800f850 <scalbn>
 800f13c:	1c6b      	adds	r3, r5, #1
 800f13e:	00da      	lsls	r2, r3, #3
 800f140:	9205      	str	r2, [sp, #20]
 800f142:	ec57 6b10 	vmov	r6, r7, d0
 800f146:	aa70      	add	r2, sp, #448	; 0x1c0
 800f148:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f1bc <__kernel_rem_pio2+0x32c>
 800f14c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f150:	462c      	mov	r4, r5
 800f152:	f04f 0800 	mov.w	r8, #0
 800f156:	2c00      	cmp	r4, #0
 800f158:	f280 80d4 	bge.w	800f304 <__kernel_rem_pio2+0x474>
 800f15c:	462c      	mov	r4, r5
 800f15e:	2c00      	cmp	r4, #0
 800f160:	f2c0 8102 	blt.w	800f368 <__kernel_rem_pio2+0x4d8>
 800f164:	4b18      	ldr	r3, [pc, #96]	; (800f1c8 <__kernel_rem_pio2+0x338>)
 800f166:	461e      	mov	r6, r3
 800f168:	ab70      	add	r3, sp, #448	; 0x1c0
 800f16a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f16e:	1b2b      	subs	r3, r5, r4
 800f170:	f04f 0900 	mov.w	r9, #0
 800f174:	f04f 0a00 	mov.w	sl, #0
 800f178:	2700      	movs	r7, #0
 800f17a:	9306      	str	r3, [sp, #24]
 800f17c:	e0e6      	b.n	800f34c <__kernel_rem_pio2+0x4bc>
 800f17e:	f04f 0b02 	mov.w	fp, #2
 800f182:	e756      	b.n	800f032 <__kernel_rem_pio2+0x1a2>
 800f184:	f8d8 3000 	ldr.w	r3, [r8]
 800f188:	bb05      	cbnz	r5, 800f1cc <__kernel_rem_pio2+0x33c>
 800f18a:	b123      	cbz	r3, 800f196 <__kernel_rem_pio2+0x306>
 800f18c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f190:	f8c8 3000 	str.w	r3, [r8]
 800f194:	2301      	movs	r3, #1
 800f196:	3201      	adds	r2, #1
 800f198:	f108 0804 	add.w	r8, r8, #4
 800f19c:	461d      	mov	r5, r3
 800f19e:	e74f      	b.n	800f040 <__kernel_rem_pio2+0x1b0>
	...
 800f1ac:	3ff00000 	.word	0x3ff00000
 800f1b0:	080104e0 	.word	0x080104e0
 800f1b4:	40200000 	.word	0x40200000
 800f1b8:	3ff00000 	.word	0x3ff00000
 800f1bc:	3e700000 	.word	0x3e700000
 800f1c0:	41700000 	.word	0x41700000
 800f1c4:	3fe00000 	.word	0x3fe00000
 800f1c8:	080104a0 	.word	0x080104a0
 800f1cc:	1acb      	subs	r3, r1, r3
 800f1ce:	f8c8 3000 	str.w	r3, [r8]
 800f1d2:	462b      	mov	r3, r5
 800f1d4:	e7df      	b.n	800f196 <__kernel_rem_pio2+0x306>
 800f1d6:	1e62      	subs	r2, r4, #1
 800f1d8:	ab0c      	add	r3, sp, #48	; 0x30
 800f1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1e2:	a90c      	add	r1, sp, #48	; 0x30
 800f1e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f1e8:	e738      	b.n	800f05c <__kernel_rem_pio2+0x1cc>
 800f1ea:	1e62      	subs	r2, r4, #1
 800f1ec:	ab0c      	add	r3, sp, #48	; 0x30
 800f1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f1f6:	e7f4      	b.n	800f1e2 <__kernel_rem_pio2+0x352>
 800f1f8:	a90c      	add	r1, sp, #48	; 0x30
 800f1fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f1fe:	3b01      	subs	r3, #1
 800f200:	430a      	orrs	r2, r1
 800f202:	e788      	b.n	800f116 <__kernel_rem_pio2+0x286>
 800f204:	3301      	adds	r3, #1
 800f206:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f20a:	2900      	cmp	r1, #0
 800f20c:	d0fa      	beq.n	800f204 <__kernel_rem_pio2+0x374>
 800f20e:	9a08      	ldr	r2, [sp, #32]
 800f210:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f214:	446a      	add	r2, sp
 800f216:	3a98      	subs	r2, #152	; 0x98
 800f218:	9208      	str	r2, [sp, #32]
 800f21a:	9a06      	ldr	r2, [sp, #24]
 800f21c:	a920      	add	r1, sp, #128	; 0x80
 800f21e:	18a2      	adds	r2, r4, r2
 800f220:	18e3      	adds	r3, r4, r3
 800f222:	f104 0801 	add.w	r8, r4, #1
 800f226:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f22a:	9302      	str	r3, [sp, #8]
 800f22c:	9b02      	ldr	r3, [sp, #8]
 800f22e:	4543      	cmp	r3, r8
 800f230:	da04      	bge.n	800f23c <__kernel_rem_pio2+0x3ac>
 800f232:	461c      	mov	r4, r3
 800f234:	e6a2      	b.n	800ef7c <__kernel_rem_pio2+0xec>
 800f236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f238:	2301      	movs	r3, #1
 800f23a:	e7e4      	b.n	800f206 <__kernel_rem_pio2+0x376>
 800f23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f23e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f242:	f7f1 f96f 	bl	8000524 <__aeabi_i2d>
 800f246:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f24c:	46ab      	mov	fp, r5
 800f24e:	461c      	mov	r4, r3
 800f250:	f04f 0900 	mov.w	r9, #0
 800f254:	2600      	movs	r6, #0
 800f256:	2700      	movs	r7, #0
 800f258:	9b05      	ldr	r3, [sp, #20]
 800f25a:	4599      	cmp	r9, r3
 800f25c:	dd06      	ble.n	800f26c <__kernel_rem_pio2+0x3dc>
 800f25e:	9b08      	ldr	r3, [sp, #32]
 800f260:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f264:	f108 0801 	add.w	r8, r8, #1
 800f268:	9308      	str	r3, [sp, #32]
 800f26a:	e7df      	b.n	800f22c <__kernel_rem_pio2+0x39c>
 800f26c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f270:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f274:	f7f1 f9c0 	bl	80005f8 <__aeabi_dmul>
 800f278:	4602      	mov	r2, r0
 800f27a:	460b      	mov	r3, r1
 800f27c:	4630      	mov	r0, r6
 800f27e:	4639      	mov	r1, r7
 800f280:	f7f1 f804 	bl	800028c <__adddf3>
 800f284:	f109 0901 	add.w	r9, r9, #1
 800f288:	4606      	mov	r6, r0
 800f28a:	460f      	mov	r7, r1
 800f28c:	e7e4      	b.n	800f258 <__kernel_rem_pio2+0x3c8>
 800f28e:	3d01      	subs	r5, #1
 800f290:	e747      	b.n	800f122 <__kernel_rem_pio2+0x292>
 800f292:	ec47 6b10 	vmov	d0, r6, r7
 800f296:	f1ca 0000 	rsb	r0, sl, #0
 800f29a:	f000 fad9 	bl	800f850 <scalbn>
 800f29e:	ec57 6b10 	vmov	r6, r7, d0
 800f2a2:	4ba0      	ldr	r3, [pc, #640]	; (800f524 <__kernel_rem_pio2+0x694>)
 800f2a4:	ee10 0a10 	vmov	r0, s0
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	f7f1 fc2a 	bl	8000b04 <__aeabi_dcmpge>
 800f2b0:	b1f8      	cbz	r0, 800f2f2 <__kernel_rem_pio2+0x462>
 800f2b2:	4b9d      	ldr	r3, [pc, #628]	; (800f528 <__kernel_rem_pio2+0x698>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	4639      	mov	r1, r7
 800f2ba:	f7f1 f99d 	bl	80005f8 <__aeabi_dmul>
 800f2be:	f7f1 fc4b 	bl	8000b58 <__aeabi_d2iz>
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	f7f1 f92e 	bl	8000524 <__aeabi_i2d>
 800f2c8:	4b96      	ldr	r3, [pc, #600]	; (800f524 <__kernel_rem_pio2+0x694>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f7f1 f994 	bl	80005f8 <__aeabi_dmul>
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7f0 ffd6 	bl	8000288 <__aeabi_dsub>
 800f2dc:	f7f1 fc3c 	bl	8000b58 <__aeabi_d2iz>
 800f2e0:	1c65      	adds	r5, r4, #1
 800f2e2:	ab0c      	add	r3, sp, #48	; 0x30
 800f2e4:	f10a 0a18 	add.w	sl, sl, #24
 800f2e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f2ec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f2f0:	e71f      	b.n	800f132 <__kernel_rem_pio2+0x2a2>
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	4639      	mov	r1, r7
 800f2f6:	f7f1 fc2f 	bl	8000b58 <__aeabi_d2iz>
 800f2fa:	ab0c      	add	r3, sp, #48	; 0x30
 800f2fc:	4625      	mov	r5, r4
 800f2fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f302:	e716      	b.n	800f132 <__kernel_rem_pio2+0x2a2>
 800f304:	ab0c      	add	r3, sp, #48	; 0x30
 800f306:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f30a:	f7f1 f90b 	bl	8000524 <__aeabi_i2d>
 800f30e:	4632      	mov	r2, r6
 800f310:	463b      	mov	r3, r7
 800f312:	f7f1 f971 	bl	80005f8 <__aeabi_dmul>
 800f316:	4642      	mov	r2, r8
 800f318:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f31c:	464b      	mov	r3, r9
 800f31e:	4630      	mov	r0, r6
 800f320:	4639      	mov	r1, r7
 800f322:	f7f1 f969 	bl	80005f8 <__aeabi_dmul>
 800f326:	3c01      	subs	r4, #1
 800f328:	4606      	mov	r6, r0
 800f32a:	460f      	mov	r7, r1
 800f32c:	e713      	b.n	800f156 <__kernel_rem_pio2+0x2c6>
 800f32e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f332:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f336:	f7f1 f95f 	bl	80005f8 <__aeabi_dmul>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4648      	mov	r0, r9
 800f340:	4651      	mov	r1, sl
 800f342:	f7f0 ffa3 	bl	800028c <__adddf3>
 800f346:	3701      	adds	r7, #1
 800f348:	4681      	mov	r9, r0
 800f34a:	468a      	mov	sl, r1
 800f34c:	9b00      	ldr	r3, [sp, #0]
 800f34e:	429f      	cmp	r7, r3
 800f350:	dc02      	bgt.n	800f358 <__kernel_rem_pio2+0x4c8>
 800f352:	9b06      	ldr	r3, [sp, #24]
 800f354:	429f      	cmp	r7, r3
 800f356:	ddea      	ble.n	800f32e <__kernel_rem_pio2+0x49e>
 800f358:	9a06      	ldr	r2, [sp, #24]
 800f35a:	ab48      	add	r3, sp, #288	; 0x120
 800f35c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f360:	e9c6 9a00 	strd	r9, sl, [r6]
 800f364:	3c01      	subs	r4, #1
 800f366:	e6fa      	b.n	800f15e <__kernel_rem_pio2+0x2ce>
 800f368:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	dc0b      	bgt.n	800f386 <__kernel_rem_pio2+0x4f6>
 800f36e:	2b00      	cmp	r3, #0
 800f370:	dc39      	bgt.n	800f3e6 <__kernel_rem_pio2+0x556>
 800f372:	d05d      	beq.n	800f430 <__kernel_rem_pio2+0x5a0>
 800f374:	9b02      	ldr	r3, [sp, #8]
 800f376:	f003 0007 	and.w	r0, r3, #7
 800f37a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f37e:	ecbd 8b02 	vpop	{d8}
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d1f3      	bne.n	800f374 <__kernel_rem_pio2+0x4e4>
 800f38c:	9b05      	ldr	r3, [sp, #20]
 800f38e:	9500      	str	r5, [sp, #0]
 800f390:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f394:	eb0d 0403 	add.w	r4, sp, r3
 800f398:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f39c:	46a2      	mov	sl, r4
 800f39e:	9b00      	ldr	r3, [sp, #0]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f1aa 0a08 	sub.w	sl, sl, #8
 800f3a6:	dc69      	bgt.n	800f47c <__kernel_rem_pio2+0x5ec>
 800f3a8:	46aa      	mov	sl, r5
 800f3aa:	f1ba 0f01 	cmp.w	sl, #1
 800f3ae:	f1a4 0408 	sub.w	r4, r4, #8
 800f3b2:	f300 8083 	bgt.w	800f4bc <__kernel_rem_pio2+0x62c>
 800f3b6:	9c05      	ldr	r4, [sp, #20]
 800f3b8:	ab48      	add	r3, sp, #288	; 0x120
 800f3ba:	441c      	add	r4, r3
 800f3bc:	2000      	movs	r0, #0
 800f3be:	2100      	movs	r1, #0
 800f3c0:	2d01      	cmp	r5, #1
 800f3c2:	f300 809a 	bgt.w	800f4fa <__kernel_rem_pio2+0x66a>
 800f3c6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f3ca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f3ce:	f1bb 0f00 	cmp.w	fp, #0
 800f3d2:	f040 8098 	bne.w	800f506 <__kernel_rem_pio2+0x676>
 800f3d6:	9b04      	ldr	r3, [sp, #16]
 800f3d8:	e9c3 7800 	strd	r7, r8, [r3]
 800f3dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f3e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f3e4:	e7c6      	b.n	800f374 <__kernel_rem_pio2+0x4e4>
 800f3e6:	9e05      	ldr	r6, [sp, #20]
 800f3e8:	ab48      	add	r3, sp, #288	; 0x120
 800f3ea:	441e      	add	r6, r3
 800f3ec:	462c      	mov	r4, r5
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	2100      	movs	r1, #0
 800f3f2:	2c00      	cmp	r4, #0
 800f3f4:	da33      	bge.n	800f45e <__kernel_rem_pio2+0x5ce>
 800f3f6:	f1bb 0f00 	cmp.w	fp, #0
 800f3fa:	d036      	beq.n	800f46a <__kernel_rem_pio2+0x5da>
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f402:	9c04      	ldr	r4, [sp, #16]
 800f404:	e9c4 2300 	strd	r2, r3, [r4]
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f410:	f7f0 ff3a 	bl	8000288 <__aeabi_dsub>
 800f414:	ae4a      	add	r6, sp, #296	; 0x128
 800f416:	2401      	movs	r4, #1
 800f418:	42a5      	cmp	r5, r4
 800f41a:	da29      	bge.n	800f470 <__kernel_rem_pio2+0x5e0>
 800f41c:	f1bb 0f00 	cmp.w	fp, #0
 800f420:	d002      	beq.n	800f428 <__kernel_rem_pio2+0x598>
 800f422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f426:	4619      	mov	r1, r3
 800f428:	9b04      	ldr	r3, [sp, #16]
 800f42a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f42e:	e7a1      	b.n	800f374 <__kernel_rem_pio2+0x4e4>
 800f430:	9c05      	ldr	r4, [sp, #20]
 800f432:	ab48      	add	r3, sp, #288	; 0x120
 800f434:	441c      	add	r4, r3
 800f436:	2000      	movs	r0, #0
 800f438:	2100      	movs	r1, #0
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	da09      	bge.n	800f452 <__kernel_rem_pio2+0x5c2>
 800f43e:	f1bb 0f00 	cmp.w	fp, #0
 800f442:	d002      	beq.n	800f44a <__kernel_rem_pio2+0x5ba>
 800f444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f448:	4619      	mov	r1, r3
 800f44a:	9b04      	ldr	r3, [sp, #16]
 800f44c:	e9c3 0100 	strd	r0, r1, [r3]
 800f450:	e790      	b.n	800f374 <__kernel_rem_pio2+0x4e4>
 800f452:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f456:	f7f0 ff19 	bl	800028c <__adddf3>
 800f45a:	3d01      	subs	r5, #1
 800f45c:	e7ed      	b.n	800f43a <__kernel_rem_pio2+0x5aa>
 800f45e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f462:	f7f0 ff13 	bl	800028c <__adddf3>
 800f466:	3c01      	subs	r4, #1
 800f468:	e7c3      	b.n	800f3f2 <__kernel_rem_pio2+0x562>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	e7c8      	b.n	800f402 <__kernel_rem_pio2+0x572>
 800f470:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f474:	f7f0 ff0a 	bl	800028c <__adddf3>
 800f478:	3401      	adds	r4, #1
 800f47a:	e7cd      	b.n	800f418 <__kernel_rem_pio2+0x588>
 800f47c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f480:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f484:	9b00      	ldr	r3, [sp, #0]
 800f486:	3b01      	subs	r3, #1
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	4632      	mov	r2, r6
 800f48c:	463b      	mov	r3, r7
 800f48e:	4640      	mov	r0, r8
 800f490:	4649      	mov	r1, r9
 800f492:	f7f0 fefb 	bl	800028c <__adddf3>
 800f496:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f49a:	4602      	mov	r2, r0
 800f49c:	460b      	mov	r3, r1
 800f49e:	4640      	mov	r0, r8
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	f7f0 fef1 	bl	8000288 <__aeabi_dsub>
 800f4a6:	4632      	mov	r2, r6
 800f4a8:	463b      	mov	r3, r7
 800f4aa:	f7f0 feef 	bl	800028c <__adddf3>
 800f4ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f4b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f4b6:	ed8a 7b00 	vstr	d7, [sl]
 800f4ba:	e770      	b.n	800f39e <__kernel_rem_pio2+0x50e>
 800f4bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f4c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	4632      	mov	r2, r6
 800f4c8:	463b      	mov	r3, r7
 800f4ca:	4649      	mov	r1, r9
 800f4cc:	f7f0 fede 	bl	800028c <__adddf3>
 800f4d0:	e9cd 0100 	strd	r0, r1, [sp]
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4640      	mov	r0, r8
 800f4da:	4649      	mov	r1, r9
 800f4dc:	f7f0 fed4 	bl	8000288 <__aeabi_dsub>
 800f4e0:	4632      	mov	r2, r6
 800f4e2:	463b      	mov	r3, r7
 800f4e4:	f7f0 fed2 	bl	800028c <__adddf3>
 800f4e8:	ed9d 7b00 	vldr	d7, [sp]
 800f4ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f4f0:	ed84 7b00 	vstr	d7, [r4]
 800f4f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f4f8:	e757      	b.n	800f3aa <__kernel_rem_pio2+0x51a>
 800f4fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f4fe:	f7f0 fec5 	bl	800028c <__adddf3>
 800f502:	3d01      	subs	r5, #1
 800f504:	e75c      	b.n	800f3c0 <__kernel_rem_pio2+0x530>
 800f506:	9b04      	ldr	r3, [sp, #16]
 800f508:	9a04      	ldr	r2, [sp, #16]
 800f50a:	601f      	str	r7, [r3, #0]
 800f50c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f510:	605c      	str	r4, [r3, #4]
 800f512:	609d      	str	r5, [r3, #8]
 800f514:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f518:	60d3      	str	r3, [r2, #12]
 800f51a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f51e:	6110      	str	r0, [r2, #16]
 800f520:	6153      	str	r3, [r2, #20]
 800f522:	e727      	b.n	800f374 <__kernel_rem_pio2+0x4e4>
 800f524:	41700000 	.word	0x41700000
 800f528:	3e700000 	.word	0x3e700000
 800f52c:	00000000 	.word	0x00000000

0800f530 <__kernel_cos>:
 800f530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	ec57 6b10 	vmov	r6, r7, d0
 800f538:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f53c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f540:	ed8d 1b00 	vstr	d1, [sp]
 800f544:	da07      	bge.n	800f556 <__kernel_cos+0x26>
 800f546:	ee10 0a10 	vmov	r0, s0
 800f54a:	4639      	mov	r1, r7
 800f54c:	f7f1 fb04 	bl	8000b58 <__aeabi_d2iz>
 800f550:	2800      	cmp	r0, #0
 800f552:	f000 8088 	beq.w	800f666 <__kernel_cos+0x136>
 800f556:	4632      	mov	r2, r6
 800f558:	463b      	mov	r3, r7
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	4b51      	ldr	r3, [pc, #324]	; (800f6a8 <__kernel_cos+0x178>)
 800f564:	2200      	movs	r2, #0
 800f566:	4604      	mov	r4, r0
 800f568:	460d      	mov	r5, r1
 800f56a:	f7f1 f845 	bl	80005f8 <__aeabi_dmul>
 800f56e:	a340      	add	r3, pc, #256	; (adr r3, 800f670 <__kernel_cos+0x140>)
 800f570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f574:	4682      	mov	sl, r0
 800f576:	468b      	mov	fp, r1
 800f578:	4620      	mov	r0, r4
 800f57a:	4629      	mov	r1, r5
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	a33d      	add	r3, pc, #244	; (adr r3, 800f678 <__kernel_cos+0x148>)
 800f582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f586:	f7f0 fe81 	bl	800028c <__adddf3>
 800f58a:	4622      	mov	r2, r4
 800f58c:	462b      	mov	r3, r5
 800f58e:	f7f1 f833 	bl	80005f8 <__aeabi_dmul>
 800f592:	a33b      	add	r3, pc, #236	; (adr r3, 800f680 <__kernel_cos+0x150>)
 800f594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f598:	f7f0 fe76 	bl	8000288 <__aeabi_dsub>
 800f59c:	4622      	mov	r2, r4
 800f59e:	462b      	mov	r3, r5
 800f5a0:	f7f1 f82a 	bl	80005f8 <__aeabi_dmul>
 800f5a4:	a338      	add	r3, pc, #224	; (adr r3, 800f688 <__kernel_cos+0x158>)
 800f5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5aa:	f7f0 fe6f 	bl	800028c <__adddf3>
 800f5ae:	4622      	mov	r2, r4
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	f7f1 f821 	bl	80005f8 <__aeabi_dmul>
 800f5b6:	a336      	add	r3, pc, #216	; (adr r3, 800f690 <__kernel_cos+0x160>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f0 fe64 	bl	8000288 <__aeabi_dsub>
 800f5c0:	4622      	mov	r2, r4
 800f5c2:	462b      	mov	r3, r5
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	a333      	add	r3, pc, #204	; (adr r3, 800f698 <__kernel_cos+0x168>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f0 fe5d 	bl	800028c <__adddf3>
 800f5d2:	4622      	mov	r2, r4
 800f5d4:	462b      	mov	r3, r5
 800f5d6:	f7f1 f80f 	bl	80005f8 <__aeabi_dmul>
 800f5da:	4622      	mov	r2, r4
 800f5dc:	462b      	mov	r3, r5
 800f5de:	f7f1 f80b 	bl	80005f8 <__aeabi_dmul>
 800f5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	460d      	mov	r5, r1
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	f7f1 f803 	bl	80005f8 <__aeabi_dmul>
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	4629      	mov	r1, r5
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	f7f0 fe45 	bl	8000288 <__aeabi_dsub>
 800f5fe:	4b2b      	ldr	r3, [pc, #172]	; (800f6ac <__kernel_cos+0x17c>)
 800f600:	4598      	cmp	r8, r3
 800f602:	4606      	mov	r6, r0
 800f604:	460f      	mov	r7, r1
 800f606:	dc10      	bgt.n	800f62a <__kernel_cos+0xfa>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4650      	mov	r0, sl
 800f60e:	4659      	mov	r1, fp
 800f610:	f7f0 fe3a 	bl	8000288 <__aeabi_dsub>
 800f614:	460b      	mov	r3, r1
 800f616:	4926      	ldr	r1, [pc, #152]	; (800f6b0 <__kernel_cos+0x180>)
 800f618:	4602      	mov	r2, r0
 800f61a:	2000      	movs	r0, #0
 800f61c:	f7f0 fe34 	bl	8000288 <__aeabi_dsub>
 800f620:	ec41 0b10 	vmov	d0, r0, r1
 800f624:	b003      	add	sp, #12
 800f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62a:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <__kernel_cos+0x184>)
 800f62c:	4920      	ldr	r1, [pc, #128]	; (800f6b0 <__kernel_cos+0x180>)
 800f62e:	4598      	cmp	r8, r3
 800f630:	bfcc      	ite	gt
 800f632:	4d21      	ldrgt	r5, [pc, #132]	; (800f6b8 <__kernel_cos+0x188>)
 800f634:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f638:	2400      	movs	r4, #0
 800f63a:	4622      	mov	r2, r4
 800f63c:	462b      	mov	r3, r5
 800f63e:	2000      	movs	r0, #0
 800f640:	f7f0 fe22 	bl	8000288 <__aeabi_dsub>
 800f644:	4622      	mov	r2, r4
 800f646:	4680      	mov	r8, r0
 800f648:	4689      	mov	r9, r1
 800f64a:	462b      	mov	r3, r5
 800f64c:	4650      	mov	r0, sl
 800f64e:	4659      	mov	r1, fp
 800f650:	f7f0 fe1a 	bl	8000288 <__aeabi_dsub>
 800f654:	4632      	mov	r2, r6
 800f656:	463b      	mov	r3, r7
 800f658:	f7f0 fe16 	bl	8000288 <__aeabi_dsub>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	4640      	mov	r0, r8
 800f662:	4649      	mov	r1, r9
 800f664:	e7da      	b.n	800f61c <__kernel_cos+0xec>
 800f666:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f6a0 <__kernel_cos+0x170>
 800f66a:	e7db      	b.n	800f624 <__kernel_cos+0xf4>
 800f66c:	f3af 8000 	nop.w
 800f670:	be8838d4 	.word	0xbe8838d4
 800f674:	bda8fae9 	.word	0xbda8fae9
 800f678:	bdb4b1c4 	.word	0xbdb4b1c4
 800f67c:	3e21ee9e 	.word	0x3e21ee9e
 800f680:	809c52ad 	.word	0x809c52ad
 800f684:	3e927e4f 	.word	0x3e927e4f
 800f688:	19cb1590 	.word	0x19cb1590
 800f68c:	3efa01a0 	.word	0x3efa01a0
 800f690:	16c15177 	.word	0x16c15177
 800f694:	3f56c16c 	.word	0x3f56c16c
 800f698:	5555554c 	.word	0x5555554c
 800f69c:	3fa55555 	.word	0x3fa55555
 800f6a0:	00000000 	.word	0x00000000
 800f6a4:	3ff00000 	.word	0x3ff00000
 800f6a8:	3fe00000 	.word	0x3fe00000
 800f6ac:	3fd33332 	.word	0x3fd33332
 800f6b0:	3ff00000 	.word	0x3ff00000
 800f6b4:	3fe90000 	.word	0x3fe90000
 800f6b8:	3fd20000 	.word	0x3fd20000
 800f6bc:	00000000 	.word	0x00000000

0800f6c0 <__kernel_sin>:
 800f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c4:	ed2d 8b04 	vpush	{d8-d9}
 800f6c8:	eeb0 8a41 	vmov.f32	s16, s2
 800f6cc:	eef0 8a61 	vmov.f32	s17, s3
 800f6d0:	ec55 4b10 	vmov	r4, r5, d0
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f6da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f6de:	9001      	str	r0, [sp, #4]
 800f6e0:	da06      	bge.n	800f6f0 <__kernel_sin+0x30>
 800f6e2:	ee10 0a10 	vmov	r0, s0
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	f7f1 fa36 	bl	8000b58 <__aeabi_d2iz>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d051      	beq.n	800f794 <__kernel_sin+0xd4>
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	462b      	mov	r3, r5
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	4682      	mov	sl, r0
 800f6fe:	468b      	mov	fp, r1
 800f700:	4602      	mov	r2, r0
 800f702:	460b      	mov	r3, r1
 800f704:	4620      	mov	r0, r4
 800f706:	4629      	mov	r1, r5
 800f708:	f7f0 ff76 	bl	80005f8 <__aeabi_dmul>
 800f70c:	a341      	add	r3, pc, #260	; (adr r3, 800f814 <__kernel_sin+0x154>)
 800f70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f712:	4680      	mov	r8, r0
 800f714:	4689      	mov	r9, r1
 800f716:	4650      	mov	r0, sl
 800f718:	4659      	mov	r1, fp
 800f71a:	f7f0 ff6d 	bl	80005f8 <__aeabi_dmul>
 800f71e:	a33f      	add	r3, pc, #252	; (adr r3, 800f81c <__kernel_sin+0x15c>)
 800f720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f724:	f7f0 fdb0 	bl	8000288 <__aeabi_dsub>
 800f728:	4652      	mov	r2, sl
 800f72a:	465b      	mov	r3, fp
 800f72c:	f7f0 ff64 	bl	80005f8 <__aeabi_dmul>
 800f730:	a33c      	add	r3, pc, #240	; (adr r3, 800f824 <__kernel_sin+0x164>)
 800f732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f736:	f7f0 fda9 	bl	800028c <__adddf3>
 800f73a:	4652      	mov	r2, sl
 800f73c:	465b      	mov	r3, fp
 800f73e:	f7f0 ff5b 	bl	80005f8 <__aeabi_dmul>
 800f742:	a33a      	add	r3, pc, #232	; (adr r3, 800f82c <__kernel_sin+0x16c>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	f7f0 fd9e 	bl	8000288 <__aeabi_dsub>
 800f74c:	4652      	mov	r2, sl
 800f74e:	465b      	mov	r3, fp
 800f750:	f7f0 ff52 	bl	80005f8 <__aeabi_dmul>
 800f754:	a337      	add	r3, pc, #220	; (adr r3, 800f834 <__kernel_sin+0x174>)
 800f756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75a:	f7f0 fd97 	bl	800028c <__adddf3>
 800f75e:	9b01      	ldr	r3, [sp, #4]
 800f760:	4606      	mov	r6, r0
 800f762:	460f      	mov	r7, r1
 800f764:	b9eb      	cbnz	r3, 800f7a2 <__kernel_sin+0xe2>
 800f766:	4602      	mov	r2, r0
 800f768:	460b      	mov	r3, r1
 800f76a:	4650      	mov	r0, sl
 800f76c:	4659      	mov	r1, fp
 800f76e:	f7f0 ff43 	bl	80005f8 <__aeabi_dmul>
 800f772:	a325      	add	r3, pc, #148	; (adr r3, 800f808 <__kernel_sin+0x148>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f7f0 fd86 	bl	8000288 <__aeabi_dsub>
 800f77c:	4642      	mov	r2, r8
 800f77e:	464b      	mov	r3, r9
 800f780:	f7f0 ff3a 	bl	80005f8 <__aeabi_dmul>
 800f784:	4602      	mov	r2, r0
 800f786:	460b      	mov	r3, r1
 800f788:	4620      	mov	r0, r4
 800f78a:	4629      	mov	r1, r5
 800f78c:	f7f0 fd7e 	bl	800028c <__adddf3>
 800f790:	4604      	mov	r4, r0
 800f792:	460d      	mov	r5, r1
 800f794:	ec45 4b10 	vmov	d0, r4, r5
 800f798:	b003      	add	sp, #12
 800f79a:	ecbd 8b04 	vpop	{d8-d9}
 800f79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a2:	4b1b      	ldr	r3, [pc, #108]	; (800f810 <__kernel_sin+0x150>)
 800f7a4:	ec51 0b18 	vmov	r0, r1, d8
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f7f0 ff25 	bl	80005f8 <__aeabi_dmul>
 800f7ae:	4632      	mov	r2, r6
 800f7b0:	ec41 0b19 	vmov	d9, r0, r1
 800f7b4:	463b      	mov	r3, r7
 800f7b6:	4640      	mov	r0, r8
 800f7b8:	4649      	mov	r1, r9
 800f7ba:	f7f0 ff1d 	bl	80005f8 <__aeabi_dmul>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	ec51 0b19 	vmov	r0, r1, d9
 800f7c6:	f7f0 fd5f 	bl	8000288 <__aeabi_dsub>
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	465b      	mov	r3, fp
 800f7ce:	f7f0 ff13 	bl	80005f8 <__aeabi_dmul>
 800f7d2:	ec53 2b18 	vmov	r2, r3, d8
 800f7d6:	f7f0 fd57 	bl	8000288 <__aeabi_dsub>
 800f7da:	a30b      	add	r3, pc, #44	; (adr r3, 800f808 <__kernel_sin+0x148>)
 800f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e0:	4606      	mov	r6, r0
 800f7e2:	460f      	mov	r7, r1
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	4649      	mov	r1, r9
 800f7e8:	f7f0 ff06 	bl	80005f8 <__aeabi_dmul>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	4639      	mov	r1, r7
 800f7f4:	f7f0 fd4a 	bl	800028c <__adddf3>
 800f7f8:	4602      	mov	r2, r0
 800f7fa:	460b      	mov	r3, r1
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	4629      	mov	r1, r5
 800f800:	f7f0 fd42 	bl	8000288 <__aeabi_dsub>
 800f804:	e7c4      	b.n	800f790 <__kernel_sin+0xd0>
 800f806:	bf00      	nop
 800f808:	55555549 	.word	0x55555549
 800f80c:	3fc55555 	.word	0x3fc55555
 800f810:	3fe00000 	.word	0x3fe00000
 800f814:	5acfd57c 	.word	0x5acfd57c
 800f818:	3de5d93a 	.word	0x3de5d93a
 800f81c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f820:	3e5ae5e6 	.word	0x3e5ae5e6
 800f824:	57b1fe7d 	.word	0x57b1fe7d
 800f828:	3ec71de3 	.word	0x3ec71de3
 800f82c:	19c161d5 	.word	0x19c161d5
 800f830:	3f2a01a0 	.word	0x3f2a01a0
 800f834:	1110f8a6 	.word	0x1110f8a6
 800f838:	3f811111 	.word	0x3f811111

0800f83c <fabs>:
 800f83c:	ec51 0b10 	vmov	r0, r1, d0
 800f840:	ee10 2a10 	vmov	r2, s0
 800f844:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f848:	ec43 2b10 	vmov	d0, r2, r3
 800f84c:	4770      	bx	lr
	...

0800f850 <scalbn>:
 800f850:	b570      	push	{r4, r5, r6, lr}
 800f852:	ec55 4b10 	vmov	r4, r5, d0
 800f856:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f85a:	4606      	mov	r6, r0
 800f85c:	462b      	mov	r3, r5
 800f85e:	b999      	cbnz	r1, 800f888 <scalbn+0x38>
 800f860:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f864:	4323      	orrs	r3, r4
 800f866:	d03f      	beq.n	800f8e8 <scalbn+0x98>
 800f868:	4b35      	ldr	r3, [pc, #212]	; (800f940 <scalbn+0xf0>)
 800f86a:	4629      	mov	r1, r5
 800f86c:	ee10 0a10 	vmov	r0, s0
 800f870:	2200      	movs	r2, #0
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	4b33      	ldr	r3, [pc, #204]	; (800f944 <scalbn+0xf4>)
 800f878:	429e      	cmp	r6, r3
 800f87a:	4604      	mov	r4, r0
 800f87c:	460d      	mov	r5, r1
 800f87e:	da10      	bge.n	800f8a2 <scalbn+0x52>
 800f880:	a327      	add	r3, pc, #156	; (adr r3, 800f920 <scalbn+0xd0>)
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	e01f      	b.n	800f8c8 <scalbn+0x78>
 800f888:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f88c:	4291      	cmp	r1, r2
 800f88e:	d10c      	bne.n	800f8aa <scalbn+0x5a>
 800f890:	ee10 2a10 	vmov	r2, s0
 800f894:	4620      	mov	r0, r4
 800f896:	4629      	mov	r1, r5
 800f898:	f7f0 fcf8 	bl	800028c <__adddf3>
 800f89c:	4604      	mov	r4, r0
 800f89e:	460d      	mov	r5, r1
 800f8a0:	e022      	b.n	800f8e8 <scalbn+0x98>
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f8a8:	3936      	subs	r1, #54	; 0x36
 800f8aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f8ae:	4296      	cmp	r6, r2
 800f8b0:	dd0d      	ble.n	800f8ce <scalbn+0x7e>
 800f8b2:	2d00      	cmp	r5, #0
 800f8b4:	a11c      	add	r1, pc, #112	; (adr r1, 800f928 <scalbn+0xd8>)
 800f8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8ba:	da02      	bge.n	800f8c2 <scalbn+0x72>
 800f8bc:	a11c      	add	r1, pc, #112	; (adr r1, 800f930 <scalbn+0xe0>)
 800f8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c2:	a319      	add	r3, pc, #100	; (adr r3, 800f928 <scalbn+0xd8>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f7f0 fe96 	bl	80005f8 <__aeabi_dmul>
 800f8cc:	e7e6      	b.n	800f89c <scalbn+0x4c>
 800f8ce:	1872      	adds	r2, r6, r1
 800f8d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f8d4:	428a      	cmp	r2, r1
 800f8d6:	dcec      	bgt.n	800f8b2 <scalbn+0x62>
 800f8d8:	2a00      	cmp	r2, #0
 800f8da:	dd08      	ble.n	800f8ee <scalbn+0x9e>
 800f8dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8e8:	ec45 4b10 	vmov	d0, r4, r5
 800f8ec:	bd70      	pop	{r4, r5, r6, pc}
 800f8ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f8f2:	da08      	bge.n	800f906 <scalbn+0xb6>
 800f8f4:	2d00      	cmp	r5, #0
 800f8f6:	a10a      	add	r1, pc, #40	; (adr r1, 800f920 <scalbn+0xd0>)
 800f8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8fc:	dac0      	bge.n	800f880 <scalbn+0x30>
 800f8fe:	a10e      	add	r1, pc, #56	; (adr r1, 800f938 <scalbn+0xe8>)
 800f900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f904:	e7bc      	b.n	800f880 <scalbn+0x30>
 800f906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f90a:	3236      	adds	r2, #54	; 0x36
 800f90c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f910:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f914:	4620      	mov	r0, r4
 800f916:	4b0c      	ldr	r3, [pc, #48]	; (800f948 <scalbn+0xf8>)
 800f918:	2200      	movs	r2, #0
 800f91a:	e7d5      	b.n	800f8c8 <scalbn+0x78>
 800f91c:	f3af 8000 	nop.w
 800f920:	c2f8f359 	.word	0xc2f8f359
 800f924:	01a56e1f 	.word	0x01a56e1f
 800f928:	8800759c 	.word	0x8800759c
 800f92c:	7e37e43c 	.word	0x7e37e43c
 800f930:	8800759c 	.word	0x8800759c
 800f934:	fe37e43c 	.word	0xfe37e43c
 800f938:	c2f8f359 	.word	0xc2f8f359
 800f93c:	81a56e1f 	.word	0x81a56e1f
 800f940:	43500000 	.word	0x43500000
 800f944:	ffff3cb0 	.word	0xffff3cb0
 800f948:	3c900000 	.word	0x3c900000
 800f94c:	00000000 	.word	0x00000000

0800f950 <floor>:
 800f950:	ec51 0b10 	vmov	r0, r1, d0
 800f954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f960:	2e13      	cmp	r6, #19
 800f962:	ee10 5a10 	vmov	r5, s0
 800f966:	ee10 8a10 	vmov	r8, s0
 800f96a:	460c      	mov	r4, r1
 800f96c:	dc31      	bgt.n	800f9d2 <floor+0x82>
 800f96e:	2e00      	cmp	r6, #0
 800f970:	da14      	bge.n	800f99c <floor+0x4c>
 800f972:	a333      	add	r3, pc, #204	; (adr r3, 800fa40 <floor+0xf0>)
 800f974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f978:	f7f0 fc88 	bl	800028c <__adddf3>
 800f97c:	2200      	movs	r2, #0
 800f97e:	2300      	movs	r3, #0
 800f980:	f7f1 f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 800f984:	b138      	cbz	r0, 800f996 <floor+0x46>
 800f986:	2c00      	cmp	r4, #0
 800f988:	da53      	bge.n	800fa32 <floor+0xe2>
 800f98a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f98e:	4325      	orrs	r5, r4
 800f990:	d052      	beq.n	800fa38 <floor+0xe8>
 800f992:	4c2d      	ldr	r4, [pc, #180]	; (800fa48 <floor+0xf8>)
 800f994:	2500      	movs	r5, #0
 800f996:	4621      	mov	r1, r4
 800f998:	4628      	mov	r0, r5
 800f99a:	e024      	b.n	800f9e6 <floor+0x96>
 800f99c:	4f2b      	ldr	r7, [pc, #172]	; (800fa4c <floor+0xfc>)
 800f99e:	4137      	asrs	r7, r6
 800f9a0:	ea01 0307 	and.w	r3, r1, r7
 800f9a4:	4303      	orrs	r3, r0
 800f9a6:	d01e      	beq.n	800f9e6 <floor+0x96>
 800f9a8:	a325      	add	r3, pc, #148	; (adr r3, 800fa40 <floor+0xf0>)
 800f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ae:	f7f0 fc6d 	bl	800028c <__adddf3>
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f7f1 f8af 	bl	8000b18 <__aeabi_dcmpgt>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d0eb      	beq.n	800f996 <floor+0x46>
 800f9be:	2c00      	cmp	r4, #0
 800f9c0:	bfbe      	ittt	lt
 800f9c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f9c6:	4133      	asrlt	r3, r6
 800f9c8:	18e4      	addlt	r4, r4, r3
 800f9ca:	ea24 0407 	bic.w	r4, r4, r7
 800f9ce:	2500      	movs	r5, #0
 800f9d0:	e7e1      	b.n	800f996 <floor+0x46>
 800f9d2:	2e33      	cmp	r6, #51	; 0x33
 800f9d4:	dd0b      	ble.n	800f9ee <floor+0x9e>
 800f9d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f9da:	d104      	bne.n	800f9e6 <floor+0x96>
 800f9dc:	ee10 2a10 	vmov	r2, s0
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	f7f0 fc53 	bl	800028c <__adddf3>
 800f9e6:	ec41 0b10 	vmov	d0, r0, r1
 800f9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f9f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f9f6:	40df      	lsrs	r7, r3
 800f9f8:	4238      	tst	r0, r7
 800f9fa:	d0f4      	beq.n	800f9e6 <floor+0x96>
 800f9fc:	a310      	add	r3, pc, #64	; (adr r3, 800fa40 <floor+0xf0>)
 800f9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa02:	f7f0 fc43 	bl	800028c <__adddf3>
 800fa06:	2200      	movs	r2, #0
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f7f1 f885 	bl	8000b18 <__aeabi_dcmpgt>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0c1      	beq.n	800f996 <floor+0x46>
 800fa12:	2c00      	cmp	r4, #0
 800fa14:	da0a      	bge.n	800fa2c <floor+0xdc>
 800fa16:	2e14      	cmp	r6, #20
 800fa18:	d101      	bne.n	800fa1e <floor+0xce>
 800fa1a:	3401      	adds	r4, #1
 800fa1c:	e006      	b.n	800fa2c <floor+0xdc>
 800fa1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fa22:	2301      	movs	r3, #1
 800fa24:	40b3      	lsls	r3, r6
 800fa26:	441d      	add	r5, r3
 800fa28:	45a8      	cmp	r8, r5
 800fa2a:	d8f6      	bhi.n	800fa1a <floor+0xca>
 800fa2c:	ea25 0507 	bic.w	r5, r5, r7
 800fa30:	e7b1      	b.n	800f996 <floor+0x46>
 800fa32:	2500      	movs	r5, #0
 800fa34:	462c      	mov	r4, r5
 800fa36:	e7ae      	b.n	800f996 <floor+0x46>
 800fa38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fa3c:	e7ab      	b.n	800f996 <floor+0x46>
 800fa3e:	bf00      	nop
 800fa40:	8800759c 	.word	0x8800759c
 800fa44:	7e37e43c 	.word	0x7e37e43c
 800fa48:	bff00000 	.word	0xbff00000
 800fa4c:	000fffff 	.word	0x000fffff

0800fa50 <_init>:
 800fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa52:	bf00      	nop
 800fa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa56:	bc08      	pop	{r3}
 800fa58:	469e      	mov	lr, r3
 800fa5a:	4770      	bx	lr

0800fa5c <_fini>:
 800fa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa5e:	bf00      	nop
 800fa60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa62:	bc08      	pop	{r3}
 800fa64:	469e      	mov	lr, r3
 800fa66:	4770      	bx	lr
