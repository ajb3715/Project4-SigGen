
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800b110  0800b110  0001b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b450  0800b450  00020464  2**0
                  CONTENTS
  4 .ARM          00000008  0800b450  0800b450  0001b450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b458  0800b458  00020464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000464  20000000  0800b460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000245c  20000464  0800b8c4  00020464  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028c0  0800b8c4  000228c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce6c  00000000  00000000  000204d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000400e  00000000  00000000  0003d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00041358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001409  00000000  00000000  00042d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029f83  00000000  00000000  00044141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d9f0  00000000  00000000  0006e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101771  00000000  00000000  0008bab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000768c  00000000  00000000  0018d228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001948b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000464 	.word	0x20000464
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0f8 	.word	0x0800b0f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000468 	.word	0x20000468
 80001cc:	0800b0f8 	.word	0x0800b0f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <get_noise>:
    1701, 1690, 1690, 1701, 1690, 1690, 1701, 1701, 1701, 1701, 1722, 1722, 1712, 1722, 1722, 1733,
    1733, 1733, 1733, 1712, 1712, 1712, 1733, 1733, 1733, 1733, 1733, 1733, 1744, 1744, 1744, 1744,
    1744, 1744, 1733, 1733, 1722, 1722, 1722, 1722, 1722, 1722, 1733, 1722, 1722, 1722, 1722, 1722,
    1701, 1669, 1669, 1680, 1690, 1690, 1690, 1701, 1701, 1712, 1712, 1712, 1690, 1669, 1669, 1680
};
uint16_t get_noise(int noise){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	switch(noise){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	d83a      	bhi.n	8000f3c <get_noise+0x84>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <get_noise+0x14>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000f01 	.word	0x08000f01
 8000ed0:	08000f05 	.word	0x08000f05
 8000ed4:	08000f09 	.word	0x08000f09
 8000ed8:	08000f0d 	.word	0x08000f0d
 8000edc:	08000f11 	.word	0x08000f11
 8000ee0:	08000f15 	.word	0x08000f15
 8000ee4:	08000f19 	.word	0x08000f19
 8000ee8:	08000f1d 	.word	0x08000f1d
 8000eec:	08000f21 	.word	0x08000f21
 8000ef0:	08000f25 	.word	0x08000f25
 8000ef4:	08000f2b 	.word	0x08000f2b
 8000ef8:	08000f31 	.word	0x08000f31
 8000efc:	08000f37 	.word	0x08000f37
		case(0):
			return (uint16_t)0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e01c      	b.n	8000f3e <get_noise+0x86>
			break;
		case(1):
			return (uint16_t)0x01;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e01a      	b.n	8000f3e <get_noise+0x86>
			break;
		case(2):
			return (uint16_t)0x03;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e018      	b.n	8000f3e <get_noise+0x86>
			break;
		case(3):
			return (uint16_t)0x07;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	e016      	b.n	8000f3e <get_noise+0x86>
			break;
		case(4):
			return (uint16_t)0x0F;
 8000f10:	230f      	movs	r3, #15
 8000f12:	e014      	b.n	8000f3e <get_noise+0x86>
			break;
		case(5):
			return (uint16_t)0x1F;
 8000f14:	231f      	movs	r3, #31
 8000f16:	e012      	b.n	8000f3e <get_noise+0x86>
			break;
		case(6):
			return (uint16_t)0x3F;
 8000f18:	233f      	movs	r3, #63	; 0x3f
 8000f1a:	e010      	b.n	8000f3e <get_noise+0x86>
			break;
		case(7):
			return (uint16_t)0x7F;
 8000f1c:	237f      	movs	r3, #127	; 0x7f
 8000f1e:	e00e      	b.n	8000f3e <get_noise+0x86>
			break;
		case(8):
			return (uint16_t)0xFF;
 8000f20:	23ff      	movs	r3, #255	; 0xff
 8000f22:	e00c      	b.n	8000f3e <get_noise+0x86>
			break;
		case(9):
			return (uint16_t)0x1FF;
 8000f24:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000f28:	e009      	b.n	8000f3e <get_noise+0x86>
			break;
		case(10):
			return (uint16_t)0x3FF;
 8000f2a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000f2e:	e006      	b.n	8000f3e <get_noise+0x86>
			break;
		case(11):
			return (uint16_t)0x7FF;
 8000f30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f34:	e003      	b.n	8000f3e <get_noise+0x86>
			break;
		case(12):
			return (uint16_t)0xFFF;
 8000f36:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f3a:	e000      	b.n	8000f3e <get_noise+0x86>
			break;
		default:
			return (uint16_t) 0;
 8000f3c:	2300      	movs	r3, #0

	}

}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <init_DC>:
void init_DC(float maxv, float minv, int noise, RNG_HandleTypeDef *hrng,int channel){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	ed87 0a05 	vstr	s0, [r7, #20]
 8000f5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff ffa7 	bl	8000eb8 <get_noise>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d13c      	bne.n	8000fee <init_DC+0x9e>
	for(int i = 0; i < NUM_SAMPLES; i++){
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f78:	e033      	b.n	8000fe2 <init_DC+0x92>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f003 fe4c 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (minv*4096/3.3);
 8000f90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f94:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001078 <init_DC+0x128>
 8000f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9c:	ee17 0a90 	vmov	r0, s15
 8000fa0:	f7ff fad2 	bl	8000548 <__aeabi_f2d>
 8000fa4:	a332      	add	r3, pc, #200	; (adr r3, 8001070 <init_DC+0x120>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fc4f 	bl	800084c <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fde1 	bl	8000b7c <__aeabi_d2uiz>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <init_DC+0x12c>)
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		waveform[i] |= new_noise;
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	; (800107c <init_DC+0x12c>)
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	4929      	ldr	r1, [pc, #164]	; (800107c <init_DC+0x12c>)
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	3301      	adds	r3, #1
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <init_DC+0x130>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbc6      	blt.n	8000f7a <init_DC+0x2a>
			waveform2[i] = (uint16_t) (minv*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}

}
 8000fec:	e03b      	b.n	8001066 <init_DC+0x116>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff2:	e033      	b.n	800105c <init_DC+0x10c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f003 fe0f 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	b29a      	uxth	r2, r3
 8001004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001006:	4013      	ands	r3, r2
 8001008:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (minv*4096/3.3);
 800100a:	edd7 7a04 	vldr	s15, [r7, #16]
 800100e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001078 <init_DC+0x128>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	ee17 0a90 	vmov	r0, s15
 800101a:	f7ff fa95 	bl	8000548 <__aeabi_f2d>
 800101e:	a314      	add	r3, pc, #80	; (adr r3, 8001070 <init_DC+0x120>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fc12 	bl	800084c <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f7ff fda4 	bl	8000b7c <__aeabi_d2uiz>
 8001034:	4603      	mov	r3, r0
 8001036:	b29b      	uxth	r3, r3
 8001038:	4619      	mov	r1, r3
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <init_DC+0x134>)
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <init_DC+0x134>)
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800104a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104c:	431a      	orrs	r2, r3
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <init_DC+0x134>)
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	3301      	adds	r3, #1
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <init_DC+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001062:	429a      	cmp	r2, r3
 8001064:	dbc6      	blt.n	8000ff4 <init_DC+0xa4>
}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	; 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	45800000 	.word	0x45800000
 800107c:	20000480 	.word	0x20000480
 8001080:	20000000 	.word	0x20000000
 8001084:	20000880 	.word	0x20000880

08001088 <init_generator>:

void init_generator(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel) {
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001092:	edc7 0a04 	vstr	s1, [r7, #16]
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ff0b 	bl	8000eb8 <get_noise>
 80010a2:	4603      	mov	r3, r0
 80010a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 8091 	bne.w	80011d0 <init_generator+0x148>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b2:	e086      	b.n	80011c2 <init_generator+0x13a>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	68b8      	ldr	r0, [r7, #8]
 80010bc:	f003 fdaf 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010c6:	4013      	ands	r3, r2
 80010c8:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 80010ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010cc:	f7ff fa2a 	bl	8000524 <__aeabi_i2d>
 80010d0:	a38b      	add	r3, pc, #556	; (adr r3, 8001300 <init_generator+0x278>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fa8f 	bl	80005f8 <__aeabi_dmul>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4614      	mov	r4, r2
 80010e0:	461d      	mov	r5, r3
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <init_generator+0x280>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa1b 	bl	8000524 <__aeabi_i2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4620      	mov	r0, r4
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fba9 	bl	800084c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ec43 2b17 	vmov	d7, r2, r3
 8001102:	eeb0 0a47 	vmov.f32	s0, s14
 8001106:	eef0 0a67 	vmov.f32	s1, s15
 800110a:	f008 ff6d 	bl	8009fe8 <sin>
 800110e:	ec55 4b10 	vmov	r4, r5, d0
 8001112:	ed97 7a05 	vldr	s14, [r7, #20]
 8001116:	edd7 7a04 	vldr	s15, [r7, #16]
 800111a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800111e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001122:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001126:	ee16 0a90 	vmov	r0, s13
 800112a:	f7ff fa0d 	bl	8000548 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4614      	mov	r4, r2
 8001140:	461d      	mov	r5, r3
 8001142:	ed97 7a05 	vldr	s14, [r7, #20]
 8001146:	edd7 7a04 	vldr	s15, [r7, #16]
 800114a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001152:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001156:	ee16 0a90 	vmov	r0, s13
 800115a:	f7ff f9f5 	bl	8000548 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff f891 	bl	800028c <__adddf3>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <init_generator+0x284>)
 8001178:	f7ff fa3e 	bl	80005f8 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	a35c      	add	r3, pc, #368	; (adr r3, 80012f8 <init_generator+0x270>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff fb5f 	bl	800084c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fcf1 	bl	8000b7c <__aeabi_d2uiz>
 800119a:	4603      	mov	r3, r0
 800119c:	b29b      	uxth	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	4a5b      	ldr	r2, [pc, #364]	; (8001310 <init_generator+0x288>)
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//waveform[i] = round(((sin(i*2*M_PI / 256) + 1)*((4096 / 3.3*(maxv - minv)) / 2)) + 4096 / 3.3 * minv);
		waveform[i] |= new_noise;
 80011a8:	4a59      	ldr	r2, [pc, #356]	; (8001310 <init_generator+0x288>)
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4956      	ldr	r1, [pc, #344]	; (8001310 <init_generator+0x288>)
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 80011bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011be:	3301      	adds	r3, #1
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c2:	4b51      	ldr	r3, [pc, #324]	; (8001308 <init_generator+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f6ff af73 	blt.w	80010b4 <init_generator+0x2c>
			uint16_t new_noise = (uint16_t)(random & bits);
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}
}
 80011ce:	e08f      	b.n	80012f0 <init_generator+0x268>
		for(int i = 0; i < NUM_SAMPLES; i++){
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d4:	e086      	b.n	80012e4 <init_generator+0x25c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	68b8      	ldr	r0, [r7, #8]
 80011de:	f003 fd1e 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e8:	4013      	ands	r3, r2
 80011ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 80011ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011ee:	f7ff f999 	bl	8000524 <__aeabi_i2d>
 80011f2:	a343      	add	r3, pc, #268	; (adr r3, 8001300 <init_generator+0x278>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9fe 	bl	80005f8 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4614      	mov	r4, r2
 8001202:	461d      	mov	r5, r3
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <init_generator+0x280>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f98a 	bl	8000524 <__aeabi_i2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ec43 2b17 	vmov	d7, r2, r3
 8001224:	eeb0 0a47 	vmov.f32	s0, s14
 8001228:	eef0 0a67 	vmov.f32	s1, s15
 800122c:	f008 fedc 	bl	8009fe8 <sin>
 8001230:	ec55 4b10 	vmov	r4, r5, d0
 8001234:	ed97 7a05 	vldr	s14, [r7, #20]
 8001238:	edd7 7a04 	vldr	s15, [r7, #16]
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001248:	ee16 0a90 	vmov	r0, s13
 800124c:	f7ff f97c 	bl	8000548 <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9ce 	bl	80005f8 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	ed97 7a05 	vldr	s14, [r7, #20]
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001274:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001278:	ee16 0a90 	vmov	r0, s13
 800127c:	f7ff f964 	bl	8000548 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff f800 	bl	800028c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <init_generator+0x284>)
 800129a:	f7ff f9ad 	bl	80005f8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a314      	add	r3, pc, #80	; (adr r3, 80012f8 <init_generator+0x270>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff face 	bl	800084c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc60 	bl	8000b7c <__aeabi_d2uiz>
 80012bc:	4603      	mov	r3, r0
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <init_generator+0x28c>)
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <init_generator+0x28c>)
 80012cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d4:	431a      	orrs	r2, r3
 80012d6:	490f      	ldr	r1, [pc, #60]	; (8001314 <init_generator+0x28c>)
 80012d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	3301      	adds	r3, #1
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <init_generator+0x280>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ea:	429a      	cmp	r2, r3
 80012ec:	f6ff af73 	blt.w	80011d6 <init_generator+0x14e>
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}
 80012f8:	66666666 	.word	0x66666666
 80012fc:	400a6666 	.word	0x400a6666
 8001300:	54442d18 	.word	0x54442d18
 8001304:	401921fb 	.word	0x401921fb
 8001308:	20000000 	.word	0x20000000
 800130c:	40b00000 	.word	0x40b00000
 8001310:	20000480 	.word	0x20000480
 8001314:	20000880 	.word	0x20000880

08001318 <init_triangle>:

void init_triangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel){
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001322:	edc7 0a04 	vstr	s1, [r7, #16]
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff fdc3 	bl	8000eb8 <get_noise>
 8001332:	4603      	mov	r3, r0
 8001334:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 809a 	bne.w	8001472 <init_triangle+0x15a>
    for(int i = 0; i < NUM_SAMPLES; i++){
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001342:	e08f      	b.n	8001464 <init_triangle+0x14c>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f003 fc67 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	b29a      	uxth	r2, r3
 8001354:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001356:	4013      	ands	r3, r2
 8001358:	847b      	strh	r3, [r7, #34]	; 0x22
        if(i < NUM_SAMPLES/2){
 800135a:	4b97      	ldr	r3, [pc, #604]	; (80015b8 <init_triangle+0x2a0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	0fda      	lsrs	r2, r3, #31
 8001360:	4413      	add	r3, r2
 8001362:	105b      	asrs	r3, r3, #1
 8001364:	461a      	mov	r2, r3
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	4293      	cmp	r3, r2
 800136a:	da35      	bge.n	80013d8 <init_triangle+0xc0>
        	waveform[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001378:	4b8f      	ldr	r3, [pc, #572]	; (80015b8 <init_triangle+0x2a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b01      	subs	r3, #1
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800138a:	edd7 6a05 	vldr	s13, [r7, #20]
 800138e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001392:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139a:	edd7 7a04 	vldr	s15, [r7, #16]
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80015bc <init_triangle+0x2a4>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	ee17 0a90 	vmov	r0, s15
 80013ae:	f7ff f8cb 	bl	8000548 <__aeabi_f2d>
 80013b2:	a37f      	add	r3, pc, #508	; (adr r3, 80015b0 <init_triangle+0x298>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff fa48 	bl	800084c <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fbda 	bl	8000b7c <__aeabi_d2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <init_triangle+0x2a8>)
 80013d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80013d6:	e038      	b.n	800144a <init_triangle+0x132>
        }else{
        	waveform[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 80013d8:	4b77      	ldr	r3, [pc, #476]	; (80015b8 <init_triangle+0x2a0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1e5a      	subs	r2, r3, #1
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	ee07 3a90 	vmov	s15, r3
 80013e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013ec:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <init_triangle+0x2a0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013fe:	edd7 6a05 	vldr	s13, [r7, #20]
 8001402:	edd7 7a04 	vldr	s15, [r7, #16]
 8001406:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001416:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80015bc <init_triangle+0x2a4>
 800141a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	a362      	add	r3, pc, #392	; (adr r3, 80015b0 <init_triangle+0x298>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fa0e 	bl	800084c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fba0 	bl	8000b7c <__aeabi_d2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	b29b      	uxth	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <init_triangle+0x2a8>)
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    	waveform[i] |= noise;
 800144a:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <init_triangle+0x2a8>)
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001454:	431a      	orrs	r2, r3
 8001456:	495a      	ldr	r1, [pc, #360]	; (80015c0 <init_triangle+0x2a8>)
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	3301      	adds	r3, #1
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001464:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <init_triangle+0x2a0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800146a:	429a      	cmp	r2, r3
 800146c:	f6ff af6a 	blt.w	8001344 <init_triangle+0x2c>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
	        }
	    	waveform2[i] |= noise;
	    }
	}
}
 8001470:	e098      	b.n	80015a4 <init_triangle+0x28c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
 8001476:	e08f      	b.n	8001598 <init_triangle+0x280>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f003 fbcd 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	b29a      	uxth	r2, r3
 8001488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148a:	4013      	ands	r3, r2
 800148c:	84bb      	strh	r3, [r7, #36]	; 0x24
	        if(i < NUM_SAMPLES/2){
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <init_triangle+0x2a0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0fda      	lsrs	r2, r3, #31
 8001494:	4413      	add	r3, r2
 8001496:	105b      	asrs	r3, r3, #1
 8001498:	461a      	mov	r2, r3
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	4293      	cmp	r3, r2
 800149e:	da35      	bge.n	800150c <init_triangle+0x1f4>
	        	waveform2[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <init_triangle+0x2a0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014be:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80015bc <init_triangle+0x2a4>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	ee17 0a90 	vmov	r0, s15
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	a332      	add	r3, pc, #200	; (adr r3, 80015b0 <init_triangle+0x298>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9ae 	bl	800084c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb40 	bl	8000b7c <__aeabi_d2uiz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <init_triangle+0x2ac>)
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800150a:	e038      	b.n	800157e <init_triangle+0x266>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <init_triangle+0x2a0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	1e5a      	subs	r2, r3, #1
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <init_triangle+0x2a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001532:	edd7 6a05 	vldr	s13, [r7, #20]
 8001536:	edd7 7a04 	vldr	s15, [r7, #16]
 800153a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001542:	edd7 7a05 	vldr	s15, [r7, #20]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80015bc <init_triangle+0x2a4>
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	a315      	add	r3, pc, #84	; (adr r3, 80015b0 <init_triangle+0x298>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f974 	bl	800084c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb06 	bl	8000b7c <__aeabi_d2uiz>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <init_triangle+0x2ac>)
 8001578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 800157e:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <init_triangle+0x2ac>)
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001588:	431a      	orrs	r2, r3
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <init_triangle+0x2ac>)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	3301      	adds	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <init_triangle+0x2a0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800159e:	429a      	cmp	r2, r3
 80015a0:	f6ff af6a 	blt.w	8001478 <init_triangle+0x160>
}
 80015a4:	bf00      	nop
 80015a6:	3730      	adds	r7, #48	; 0x30
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	66666666 	.word	0x66666666
 80015b4:	400a6666 	.word	0x400a6666
 80015b8:	20000000 	.word	0x20000000
 80015bc:	45800000 	.word	0x45800000
 80015c0:	20000480 	.word	0x20000480
 80015c4:	20000880 	.word	0x20000880

080015c8 <init_rectangle>:


void init_rectangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng,int channel){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	; 0x30
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80015d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff fc6b 	bl	8000eb8 <get_noise>
 80015e2:	4603      	mov	r3, r0
 80015e4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d148      	bne.n	800167e <init_rectangle+0xb6>
    for(int i = 0; i < NUM_SAMPLES; i++){
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f0:	e03f      	b.n	8001672 <init_rectangle+0xaa>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f003 fb10 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	b29a      	uxth	r2, r3
 8001602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001604:	4013      	ands	r3, r2
 8001606:	847b      	strh	r3, [r7, #34]	; 0x22
    	waveform[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <init_rectangle+0x158>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0fda      	lsrs	r2, r3, #31
 800160e:	4413      	add	r3, r2
 8001610:	105b      	asrs	r3, r3, #1
 8001612:	461a      	mov	r2, r3
 8001614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001616:	4293      	cmp	r3, r2
 8001618:	da02      	bge.n	8001620 <init_rectangle+0x58>
 800161a:	edd7 7a04 	vldr	s15, [r7, #16]
 800161e:	e001      	b.n	8001624 <init_rectangle+0x5c>
 8001620:	edd7 7a05 	vldr	s15, [r7, #20]
 8001624:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001724 <init_rectangle+0x15c>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	ee17 0a90 	vmov	r0, s15
 8001630:	f7fe ff8a 	bl	8000548 <__aeabi_f2d>
 8001634:	a338      	add	r3, pc, #224	; (adr r3, 8001718 <init_rectangle+0x150>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f907 	bl	800084c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa99 	bl	8000b7c <__aeabi_d2uiz>
 800164a:	4603      	mov	r3, r0
 800164c:	b29b      	uxth	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	4a35      	ldr	r2, [pc, #212]	; (8001728 <init_rectangle+0x160>)
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	waveform[i] |= noise;
 8001658:	4a33      	ldr	r2, [pc, #204]	; (8001728 <init_rectangle+0x160>)
 800165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001662:	431a      	orrs	r2, r3
 8001664:	4930      	ldr	r1, [pc, #192]	; (8001728 <init_rectangle+0x160>)
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	3301      	adds	r3, #1
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <init_rectangle+0x158>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001678:	429a      	cmp	r2, r3
 800167a:	dbba      	blt.n	80015f2 <init_rectangle+0x2a>
			uint16_t noise = (uint16_t)(random & bits);
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
	    	waveform2[i] |= noise;
	    }
	}
}
 800167c:	e047      	b.n	800170e <init_rectangle+0x146>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	62bb      	str	r3, [r7, #40]	; 0x28
 8001682:	e03f      	b.n	8001704 <init_rectangle+0x13c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	68b8      	ldr	r0, [r7, #8]
 800168c:	f003 fac7 	bl	8004c1e <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	b29a      	uxth	r2, r3
 8001694:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001696:	4013      	ands	r3, r2
 8001698:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <init_rectangle+0x158>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0fda      	lsrs	r2, r3, #31
 80016a0:	4413      	add	r3, r2
 80016a2:	105b      	asrs	r3, r3, #1
 80016a4:	461a      	mov	r2, r3
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	4293      	cmp	r3, r2
 80016aa:	da02      	bge.n	80016b2 <init_rectangle+0xea>
 80016ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b0:	e001      	b.n	80016b6 <init_rectangle+0xee>
 80016b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001724 <init_rectangle+0x15c>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	ee17 0a90 	vmov	r0, s15
 80016c2:	f7fe ff41 	bl	8000548 <__aeabi_f2d>
 80016c6:	a314      	add	r3, pc, #80	; (adr r3, 8001718 <init_rectangle+0x150>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7ff f8be 	bl	800084c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fa50 	bl	8000b7c <__aeabi_d2uiz>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <init_rectangle+0x164>)
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 80016ea:	4a10      	ldr	r2, [pc, #64]	; (800172c <init_rectangle+0x164>)
 80016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016f4:	431a      	orrs	r2, r3
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <init_rectangle+0x164>)
 80016f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	3301      	adds	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <init_rectangle+0x158>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170a:	429a      	cmp	r2, r3
 800170c:	dbba      	blt.n	8001684 <init_rectangle+0xbc>
}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	; 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	66666666 	.word	0x66666666
 800171c:	400a6666 	.word	0x400a6666
 8001720:	20000000 	.word	0x20000000
 8001724:	45800000 	.word	0x45800000
 8001728:	20000480 	.word	0x20000480
 800172c:	20000880 	.word	0x20000880

08001730 <init_ekg>:

void init_ekg(int channel){
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	if(channel == 1){
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d113      	bne.n	8001766 <init_ekg+0x36>
		for(int i = 0; i < NUM_SAMPLES; i++){
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e00a      	b.n	800175a <init_ekg+0x2a>
			waveform[i] = ekg[i];
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <init_ekg+0x68>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800174c:	4913      	ldr	r1, [pc, #76]	; (800179c <init_ekg+0x6c>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3301      	adds	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <init_ekg+0x70>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbef      	blt.n	8001744 <init_ekg+0x14>
	else{
	    for(int i = 0; i < NUM_SAMPLES; i++){
	        waveform2[i] = ekg[i];
	    }
	}
}
 8001764:	e012      	b.n	800178c <init_ekg+0x5c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	e00a      	b.n	8001782 <init_ekg+0x52>
	        waveform2[i] = ekg[i];
 800176c:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <init_ekg+0x68>)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001774:	490b      	ldr	r1, [pc, #44]	; (80017a4 <init_ekg+0x74>)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <init_ekg+0x70>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbef      	blt.n	800176c <init_ekg+0x3c>
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	20000004 	.word	0x20000004
 800179c:	20000480 	.word	0x20000480
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000880 	.word	0x20000880

080017a8 <sig_gen>:

void sig_gen(struct user_command *cmd, RNG_HandleTypeDef *hrng,DAC_HandleTypeDef *dac ){
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
	//Process user input
	if(cmd->channel == 1){
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d104      	bne.n	80017c6 <sig_gen+0x1e>
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f001 f8c2 	bl	8002948 <HAL_DAC_Stop_DMA>
 80017c4:	e003      	b.n	80017ce <sig_gen+0x26>
	}
	else{
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_2);
 80017c6:	2110      	movs	r1, #16
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f001 f8bd 	bl	8002948 <HAL_DAC_Stop_DMA>
	}
	switch(cmd->wave){
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7d1b      	ldrb	r3, [r3, #20]
 80017d2:	3b41      	subs	r3, #65	; 0x41
 80017d4:	2b13      	cmp	r3, #19
 80017d6:	f200 8085 	bhi.w	80018e4 <sig_gen+0x13c>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <sig_gen+0x38>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080018d9 	.word	0x080018d9
 80017e4:	080018e5 	.word	0x080018e5
 80017e8:	080018e5 	.word	0x080018e5
 80017ec:	080018e5 	.word	0x080018e5
 80017f0:	080018e5 	.word	0x080018e5
 80017f4:	080018e5 	.word	0x080018e5
 80017f8:	080018e5 	.word	0x080018e5
 80017fc:	080018e5 	.word	0x080018e5
 8001800:	080018e5 	.word	0x080018e5
 8001804:	080018e5 	.word	0x080018e5
 8001808:	080018e5 	.word	0x080018e5
 800180c:	080018e5 	.word	0x080018e5
 8001810:	080018e5 	.word	0x080018e5
 8001814:	080018e5 	.word	0x080018e5
 8001818:	080018e5 	.word	0x080018e5
 800181c:	080018e5 	.word	0x080018e5
 8001820:	080018e5 	.word	0x080018e5
 8001824:	08001831 	.word	0x08001831
 8001828:	08001857 	.word	0x08001857
 800182c:	080018b3 	.word	0x080018b3
	case('R'):
		//Change to Rectangle wave
		init_rectangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	edd3 7a03 	vldr	s15, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	ed93 7a02 	vldr	s14, [r3, #8]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6918      	ldr	r0, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	eef0 0a47 	vmov.f32	s1, s14
 800184c:	eeb0 0a67 	vmov.f32	s0, s15
 8001850:	f7ff feba 	bl	80015c8 <init_rectangle>
		break;
 8001854:	e047      	b.n	80018e6 <sig_gen+0x13e>
	case('S'):
		// Change to Sine wave

		if(cmd->frequency != 0.0){
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	edd3 7a01 	vldr	s15, [r3, #4]
 800185c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	d012      	beq.n	800188c <sig_gen+0xe4>
			init_generator(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	edd3 7a03 	vldr	s15, [r3, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6918      	ldr	r0, [r3, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	eef0 0a47 	vmov.f32	s1, s14
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	f7ff fbff 	bl	8001088 <init_generator>
		}
		else{
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
		}
		break;
 800188a:	e02c      	b.n	80018e6 <sig_gen+0x13e>
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	ed93 7a02 	vldr	s14, [r3, #8]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6918      	ldr	r0, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	eef0 0a47 	vmov.f32	s1, s14
 80018a8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ac:	f7ff fb50 	bl	8000f50 <init_DC>
		break;
 80018b0:	e019      	b.n	80018e6 <sig_gen+0x13e>
	case('T'):
		//Change to Triangle
		init_triangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6918      	ldr	r0, [r3, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	eef0 0a47 	vmov.f32	s1, s14
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f7ff fd21 	bl	8001318 <init_triangle>
		break;
 80018d6:	e006      	b.n	80018e6 <sig_gen+0x13e>
	case('A'):
		//Change to ekg
		init_ekg(cmd->channel);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff27 	bl	8001730 <init_ekg>
		break;
 80018e2:	e000      	b.n	80018e6 <sig_gen+0x13e>
	default:
		break;
 80018e4:	bf00      	nop
	}

	if(cmd->channel == 1){
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d137      	bne.n	800195e <sig_gen+0x1b6>
		TIM2->ARR = round(80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <sig_gen+0x220>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	a12b      	add	r1, pc, #172	; (adr r1, 80019c0 <sig_gen+0x218>)
 8001912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001916:	f7fe ff99 	bl	800084c <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b17 	vmov	d7, r2, r3
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	eef0 0a67 	vmov.f32	s1, s15
 800192a:	f008 fbb5 	bl	800a098 <round>
 800192e:	ec53 2b10 	vmov	r2, r3, d0
 8001932:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f91f 	bl	8000b7c <__aeabi_d2uiz>
 800193e:	4603      	mov	r3, r0
 8001940:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->EGR = TIM_EGR_UG;
 8001942:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001946:	2201      	movs	r2, #1
 8001948:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_1, (uint32_t*)waveform, SAMPLES, DAC_ALIGN_12B_R);
 800194a:	2300      	movs	r3, #0
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <sig_gen+0x224>)
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 ff2a 	bl	80027b0 <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
	}



}
 800195c:	e02a      	b.n	80019b4 <sig_gen+0x20c>
		TIM5->ARR = (80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <sig_gen+0x220>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	ee17 0a90 	vmov	r0, s15
 8001978:	f7fe fde6 	bl	8000548 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	a10f      	add	r1, pc, #60	; (adr r1, 80019c0 <sig_gen+0x218>)
 8001982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001986:	f7fe ff61 	bl	800084c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4c10      	ldr	r4, [pc, #64]	; (80019d0 <sig_gen+0x228>)
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f8f2 	bl	8000b7c <__aeabi_d2uiz>
 8001998:	4603      	mov	r3, r0
 800199a:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM5->EGR = TIM_EGR_UG;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <sig_gen+0x228>)
 800199e:	2201      	movs	r2, #1
 80019a0:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <sig_gen+0x22c>)
 80019ac:	2110      	movs	r1, #16
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fefe 	bl	80027b0 <HAL_DAC_Start_DMA>
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	f3af 8000 	nop.w
 80019c0:	00000000 	.word	0x00000000
 80019c4:	419312d0 	.word	0x419312d0
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000480 	.word	0x20000480
 80019d0:	40000c00 	.word	0x40000c00
 80019d4:	20000880 	.word	0x20000880

080019d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019dc:	f000 fd14 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e0:	f000 f850 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019e4:	f000 f9e4 	bl	8001db0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e8:	f000 f9bc 	bl	8001d64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80019ec:	f000 f98a 	bl	8001d04 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80019f0:	f000 f89a 	bl	8001b28 <MX_DAC1_Init>
  MX_TIM2_Init();
 80019f4:	f000 f8ea 	bl	8001bcc <MX_TIM2_Init>
  MX_TIM5_Init();
 80019f8:	f000 f936 	bl	8001c68 <MX_TIM5_Init>
  MX_RNG_Init();
 80019fc:	f000 f8d2 	bl	8001ba4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001a00:	4814      	ldr	r0, [pc, #80]	; (8001a54 <main+0x7c>)
 8001a02:	f003 fa39 	bl	8004e78 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <main+0x80>)
 8001a08:	f003 fa36 	bl	8004e78 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a0c:	f004 fafc 	bl	8006008 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <main+0x84>)
 8001a12:	f004 fbf0 	bl	80061f6 <osMutexNew>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <main+0x88>)
 8001a1a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandQueue_attributes);
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <main+0x8c>)
 8001a1e:	2102      	movs	r1, #2
 8001a20:	2010      	movs	r0, #16
 8001a22:	f004 fcf6 	bl	8006412 <osMessageQueueNew>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <main+0x90>)
 8001a2a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ProcessCommand */
  ProcessCommandHandle = osThreadNew(StartProcessCommand, NULL, &ProcessCommand_attributes);
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <main+0x94>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	480f      	ldr	r0, [pc, #60]	; (8001a70 <main+0x98>)
 8001a32:	f004 fb33 	bl	800609c <osThreadNew>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <main+0x9c>)
 8001a3a:	6013      	str	r3, [r2, #0]

  /* creation of RecieveCommand */
  RecieveCommandHandle = osThreadNew(StartRecieveCommand, NULL, &RecieveCommand_attributes);
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <main+0xa0>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	480e      	ldr	r0, [pc, #56]	; (8001a7c <main+0xa4>)
 8001a42:	f004 fb2b 	bl	800609c <osThreadNew>
 8001a46:	4603      	mov	r3, r0
 8001a48:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <main+0xa8>)
 8001a4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a4c:	f004 fb00 	bl	8006050 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <main+0x78>
 8001a52:	bf00      	nop
 8001a54:	20000d34 	.word	0x20000d34
 8001a58:	20000d80 	.word	0x20000d80
 8001a5c:	0800b1e8 	.word	0x0800b1e8
 8001a60:	20000e60 	.word	0x20000e60
 8001a64:	0800b1d0 	.word	0x0800b1d0
 8001a68:	20000e5c 	.word	0x20000e5c
 8001a6c:	0800b188 	.word	0x0800b188
 8001a70:	08001e55 	.word	0x08001e55
 8001a74:	20000e54 	.word	0x20000e54
 8001a78:	0800b1ac 	.word	0x0800b1ac
 8001a7c:	08001e65 	.word	0x08001e65
 8001a80:	20000e58 	.word	0x20000e58

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	; 0x58
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2244      	movs	r2, #68	; 0x44
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f007 fed0 	bl	8009838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001aa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001aaa:	f001 fd4f 	bl	800354c <HAL_PWREx_ControlVoltageScaling>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ab4:	f000 fa36 	bl	8001f24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac2:	2310      	movs	r3, #16
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aca:	2302      	movs	r3, #2
 8001acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fd86 	bl	80035f8 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001af2:	f000 fa17 	bl	8001f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2303      	movs	r3, #3
 8001afc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 f94e 	bl	8003db0 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b1a:	f000 fa03 	bl	8001f24 <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3758      	adds	r7, #88	; 0x58
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2224      	movs	r2, #36	; 0x24
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f007 fe7f 	bl	8009838 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_DAC1_Init+0x74>)
 8001b3c:	4a18      	ldr	r2, [pc, #96]	; (8001ba0 <MX_DAC1_Init+0x78>)
 8001b3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001b40:	4816      	ldr	r0, [pc, #88]	; (8001b9c <MX_DAC1_Init+0x74>)
 8001b42:	f000 fe12 	bl	800276a <HAL_DAC_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001b4c:	f000 f9ea 	bl	8001f24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001b54:	2324      	movs	r3, #36	; 0x24
 8001b56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_DAC1_Init+0x74>)
 8001b6c:	f000 ff4f 	bl	8002a0e <HAL_DAC_ConfigChannel>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001b76:	f000 f9d5 	bl	8001f24 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001b7a:	231c      	movs	r3, #28
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2210      	movs	r2, #16
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_DAC1_Init+0x74>)
 8001b86:	f000 ff42 	bl	8002a0e <HAL_DAC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001b90:	f000 f9c8 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	; 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000c80 	.word	0x20000c80
 8001ba0:	40007400 	.word	0x40007400

08001ba4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_RNG_Init+0x20>)
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <MX_RNG_Init+0x24>)
 8001bac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_RNG_Init+0x20>)
 8001bb0:	f002 ffde 	bl	8004b70 <HAL_RNG_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bba:	f000 f9b3 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000d24 	.word	0x20000d24
 8001bc8:	50060800 	.word	0x50060800

08001bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c12:	4814      	ldr	r0, [pc, #80]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c14:	f003 f8d8 	bl	8004dc8 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c1e:	f000 f981 	bl	8001f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c30:	f003 f98a 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c3a:	f000 f973 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_TIM2_Init+0x98>)
 8001c4c:	f003 fb7a 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c56:	f000 f965 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000d34 	.word	0x20000d34

08001c68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c9e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cac:	4813      	ldr	r0, [pc, #76]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001cae:	f003 f88b 	bl	8004dc8 <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001cb8:	f000 f934 	bl	8001f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001cca:	f003 f93d 	bl	8004f48 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001cd4:	f000 f926 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_TIM5_Init+0x94>)
 8001ce6:	f003 fb2d 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001cf0:	f000 f918 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000d80 	.word	0x20000d80
 8001d00:	40000c00 	.word	0x40000c00

08001d04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d0a:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_USART2_UART_Init+0x5c>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_USART2_UART_Init+0x58>)
 8001d48:	f003 fb84 	bl	8005454 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d52:	f000 f8e7 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000dcc 	.word	0x20000dcc
 8001d60:	40004400 	.word	0x40004400

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_DMA_Init+0x48>)
 8001d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <MX_DMA_Init+0x48>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6493      	str	r3, [r2, #72]	; 0x48
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <MX_DMA_Init+0x48>)
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2105      	movs	r1, #5
 8001d86:	200d      	movs	r0, #13
 8001d88:	f000 fcb9 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001d8c:	200d      	movs	r0, #13
 8001d8e:	f000 fcd2 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2105      	movs	r1, #5
 8001d96:	200e      	movs	r0, #14
 8001d98:	f000 fcb1 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001d9c:	200e      	movs	r0, #14
 8001d9e:	f000 fcca 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a14      	ldr	r2, [pc, #80]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_GPIO_Init+0x9c>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 0314 	add.w	r3, r7, #20
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_GPIO_Init+0xa0>)
 8001e3e:	f001 f9cd 	bl	80031dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	48000800 	.word	0x48000800

08001e54 <StartProcessCommand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartProcessCommand */
void StartProcessCommand(void *argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f004 f9af 	bl	80061c0 <osDelay>
 8001e62:	e7fb      	b.n	8001e5c <StartProcessCommand+0x8>

08001e64 <StartRecieveCommand>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecieveCommand */
void StartRecieveCommand(void *argument)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0c4      	sub	sp, #272	; 0x110
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001e6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e72:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRecieveCommand */
  /* Infinite loop */
  for(;;)
  {
  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001e74:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <StartRecieveCommand+0xa8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f004 fa40 	bl	8006302 <osMutexAcquire>
			  if(osMessageQueueGetCount(CommandQueueHandle) != 0){
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <StartRecieveCommand+0xac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fb94 	bl	80065b4 <osMessageQueueGetCount>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d033      	beq.n	8001efa <StartRecieveCommand+0x96>
				  char buf[256];
				  struct user_command *cmd = (struct user_command *)malloc(sizeof(struct user_command));
 8001e92:	2018      	movs	r0, #24
 8001e94:	f007 fbf4 	bl	8009680 <malloc>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				  if(cmd == NULL){
 8001e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <StartRecieveCommand+0x48>
					  exit(98);
 8001ea6:	2062      	movs	r0, #98	; 0x62
 8001ea8:	f007 fbd8 	bl	800965c <exit>
				  }
				  osMessageQueueGet(CommandQueueHandle, &cmd, 0, 0);
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <StartRecieveCommand+0xac>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f004 fb1e 	bl	80064f8 <osMessageQueueGet>
				  sig_gen(cmd, &hrng, &hdac1);
 8001ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <StartRecieveCommand+0xb0>)
 8001ec2:	4915      	ldr	r1, [pc, #84]	; (8001f18 <StartRecieveCommand+0xb4>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fc6f 	bl	80017a8 <sig_gen>
				  sprintf(buf,"\r\n Enter another wave generation! \r\n");
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4913      	ldr	r1, [pc, #76]	; (8001f1c <StartRecieveCommand+0xb8>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 fc91 	bl	80097f8 <siprintf>
				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe f978 	bl	80001d0 <strlen>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	f107 010c 	add.w	r1, r7, #12
 8001ee8:	2364      	movs	r3, #100	; 0x64
 8001eea:	480d      	ldr	r0, [pc, #52]	; (8001f20 <StartRecieveCommand+0xbc>)
 8001eec:	f003 fb00 	bl	80054f0 <HAL_UART_Transmit>
				  free(cmd);
 8001ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f007 fbcb 	bl	8009690 <free>

		  }

			  osMutexRelease(MUTEXHandle);
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <StartRecieveCommand+0xa8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fa4a 	bl	8006398 <osMutexRelease>
		   vTaskDelay(100);
 8001f04:	2064      	movs	r0, #100	; 0x64
 8001f06:	f005 fdbb 	bl	8007a80 <vTaskDelay>
  osMutexAcquire(MUTEXHandle, osWaitForever);
 8001f0a:	e7b3      	b.n	8001e74 <StartRecieveCommand+0x10>
 8001f0c:	20000e60 	.word	0x20000e60
 8001f10:	20000e5c 	.word	0x20000e5c
 8001f14:	20000c80 	.word	0x20000c80
 8001f18:	20000d24 	.word	0x20000d24
 8001f1c:	0800b148 	.word	0x0800b148
 8001f20:	20000dcc 	.word	0x20000dcc

08001f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <Error_Handler+0x8>
	...

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6613      	str	r3, [r2, #96]	; 0x60
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_MspInit+0x4c>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	210f      	movs	r1, #15
 8001f6a:	f06f 0001 	mvn.w	r0, #1
 8001f6e:	f000 fbc6 	bl	80026fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a40      	ldr	r2, [pc, #256]	; (80020a0 <HAL_DAC_MspInit+0x120>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d17a      	bne.n	8002098 <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc6:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_DAC_MspInit+0x124>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001fd2:	2330      	movs	r3, #48	; 0x30
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f001 f8f8 	bl	80031dc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_DAC_MspInit+0x12c>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8002014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002018:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 800201c:	2200      	movs	r2, #0
 800201e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b21      	ldr	r3, [pc, #132]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002026:	4820      	ldr	r0, [pc, #128]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 8002028:	f000 fea2 	bl	8002d70 <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002032:	f7ff ff77 	bl	8001f24 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	4a1a      	ldr	r2, [pc, #104]	; (80020a8 <HAL_DAC_MspInit+0x128>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002044:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_DAC_MspInit+0x134>)
 8002046:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 800204a:	2205      	movs	r2, #5
 800204c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002050:	2210      	movs	r2, #16
 8002052:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002066:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 800206a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_NORMAL;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002078:	2200      	movs	r2, #0
 800207a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 800207e:	f000 fe77 	bl	8002d70 <HAL_DMA_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8002088:	f7ff ff4c 	bl	8001f24 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_DAC_MspInit+0x130>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002098:	bf00      	nop
 800209a:	3728      	adds	r7, #40	; 0x28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40007400 	.word	0x40007400
 80020a4:	40021000 	.word	0x40021000
 80020a8:	20000c94 	.word	0x20000c94
 80020ac:	40020030 	.word	0x40020030
 80020b0:	20000cdc 	.word	0x20000cdc
 80020b4:	40020044 	.word	0x40020044

080020b8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b0a6      	sub	sp, #152	; 0x98
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2288      	movs	r2, #136	; 0x88
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fbb5 	bl	8009838 <memset>
  if(hrng->Instance==RNG)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_RNG_MspInit+0x90>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d133      	bne.n	8002140 <HAL_RNG_MspInit+0x88>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80020d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 80020de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80020e6:	2302      	movs	r3, #2
 80020e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80020ee:	2310      	movs	r3, #16
 80020f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80020f2:	2307      	movs	r3, #7
 80020f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV8;
 80020f6:	2308      	movs	r3, #8
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80020fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f002 f875 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8002114:	f7ff ff06 	bl	8001f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RNG_MspInit+0x94>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	4a0b      	ldr	r2, [pc, #44]	; (800214c <HAL_RNG_MspInit+0x94>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RNG_MspInit+0x94>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 5, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2105      	movs	r1, #5
 8002134:	2050      	movs	r0, #80	; 0x50
 8002136:	f000 fae2 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800213a:	2050      	movs	r0, #80	; 0x50
 800213c:	f000 fafb 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002140:	bf00      	nop
 8002142:	3798      	adds	r7, #152	; 0x98
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	50060800 	.word	0x50060800
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d10c      	bne.n	800217c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800217a:	e010      	b.n	800219e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_TIM_Base_MspInit+0x60>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10b      	bne.n	800219e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6593      	str	r3, [r2, #88]	; 0x58
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_TIM_Base_MspInit+0x5c>)
 8002194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40000c00 	.word	0x40000c00

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ac      	sub	sp, #176	; 0xb0
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2288      	movs	r2, #136	; 0x88
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f007 fb2f 	bl	8009838 <memset>
  if(huart->Instance==USART2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_UART_MspInit+0xb0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d13b      	bne.n	800225c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 f801 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021fc:	f7ff fe92 	bl	8001f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_MspInit+0xb4>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_UART_MspInit+0xb4>)
 8002206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_UART_MspInit+0xb4>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_UART_MspInit+0xb4>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_UART_MspInit+0xb4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_UART_MspInit+0xb4>)
 8002226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002230:	230c      	movs	r3, #12
 8002232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002248:	2307      	movs	r3, #7
 800224a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002252:	4619      	mov	r1, r3
 8002254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002258:	f000 ffc0 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	37b0      	adds	r7, #176	; 0xb0
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40004400 	.word	0x40004400
 8002268:	40021000 	.word	0x40021000

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f910 	bl	80024c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022a0:	f006 f87a 	bl	8008398 <xTaskGetSchedulerState>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d001      	beq.n	80022ae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022aa:	f006 ff5d 	bl	8009168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA1_Channel3_IRQHandler+0x10>)
 80022ba:	f000 feaf 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000c94 	.word	0x20000c94

080022c8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel4_IRQHandler+0x10>)
 80022ce:	f000 fea5 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000cdc 	.word	0x20000cdc

080022dc <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <RNG_IRQHandler+0x10>)
 80022e2:	f002 fcf2 	bl	8004cca <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000d24 	.word	0x20000d24

080022f0 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fa:	f007 fab5 	bl	8009868 <__errno>
 80022fe:	4603      	mov	r3, r0
 8002300:	2216      	movs	r2, #22
 8002302:	601a      	str	r2, [r3, #0]
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_exit>:

void _exit (int status)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ffe7 	bl	80022f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002322:	e7fe      	b.n	8002322 <_exit+0x12>

08002324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <_sbrk+0x5c>)
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <_sbrk+0x60>)
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002338:	4b13      	ldr	r3, [pc, #76]	; (8002388 <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002340:	4b11      	ldr	r3, [pc, #68]	; (8002388 <_sbrk+0x64>)
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <_sbrk+0x68>)
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	429a      	cmp	r2, r3
 8002352:	d207      	bcs.n	8002364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002354:	f007 fa88 	bl	8009868 <__errno>
 8002358:	4603      	mov	r3, r0
 800235a:	220c      	movs	r2, #12
 800235c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
 8002362:	e009      	b.n	8002378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <_sbrk+0x64>)
 8002374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002376:	68fb      	ldr	r3, [r7, #12]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20018000 	.word	0x20018000
 8002384:	00000400 	.word	0x00000400
 8002388:	20000e64 	.word	0x20000e64
 800238c:	200028c0 	.word	0x200028c0

08002390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <SystemInit+0x20>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <SystemInit+0x20>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b8:	f7ff ffea 	bl	8002390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480c      	ldr	r0, [pc, #48]	; (80023f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80023be:	490d      	ldr	r1, [pc, #52]	; (80023f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <LoopForever+0xe>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d4:	4c0a      	ldr	r4, [pc, #40]	; (8002400 <LoopForever+0x16>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e2:	f007 fa47 	bl	8009874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023e6:	f7ff faf7 	bl	80019d8 <main>

080023ea <LoopForever>:

LoopForever:
    b LoopForever
 80023ea:	e7fe      	b.n	80023ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000464 	.word	0x20000464
  ldr r2, =_sidata
 80023f8:	0800b460 	.word	0x0800b460
  ldr r2, =_sbss
 80023fc:	20000464 	.word	0x20000464
  ldr r4, =_ebss
 8002400:	200028c0 	.word	0x200028c0

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_Init+0x3c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_Init+0x3c>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241e:	2003      	movs	r0, #3
 8002420:	f000 f962 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002424:	200f      	movs	r0, #15
 8002426:	f000 f80f 	bl	8002448 <HAL_InitTick>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	e001      	b.n	800243a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002436:	f7ff fd7b 	bl	8001f30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800243a:	79fb      	ldrb	r3, [r7, #7]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <HAL_InitTick+0x6c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d023      	beq.n	80024a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <HAL_InitTick+0x70>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_InitTick+0x6c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f96d 	bl	8002752 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d809      	bhi.n	8002498 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f937 	bl	80026fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_InitTick+0x74>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e007      	b.n	80024a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e004      	b.n	80024a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e001      	b.n	80024a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000040c 	.word	0x2000040c
 80024b8:	20000404 	.word	0x20000404
 80024bc:	20000408 	.word	0x20000408

080024c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x20>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x24>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_IncTick+0x24>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	2000040c 	.word	0x2000040c
 80024e4:	20000e68 	.word	0x20000e68

080024e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return uwTick;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <HAL_GetTick+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000e68 	.word	0x20000e68

08002500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff ffee 	bl	80024e8 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002518:	d005      	beq.n	8002526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_Delay+0x44>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4413      	add	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002526:	bf00      	nop
 8002528:	f7ff ffde 	bl	80024e8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	429a      	cmp	r2, r3
 8002536:	d8f7      	bhi.n	8002528 <HAL_Delay+0x28>
  {
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000040c 	.word	0x2000040c

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e014      	b.n	80027a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff fbf7 	bl	8001f80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	795b      	ldrb	r3, [r3, #5]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_DAC_Start_DMA+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0ab      	b.n	8002926 <HAL_DAC_Start_DMA+0x176>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2202      	movs	r2, #2
 80027d8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12f      	bne.n	8002840 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a52      	ldr	r2, [pc, #328]	; (8002930 <HAL_DAC_Start_DMA+0x180>)
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a51      	ldr	r2, [pc, #324]	; (8002934 <HAL_DAC_Start_DMA+0x184>)
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a50      	ldr	r2, [pc, #320]	; (8002938 <HAL_DAC_Start_DMA+0x188>)
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002806:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b08      	cmp	r3, #8
 800280c:	d013      	beq.n	8002836 <HAL_DAC_Start_DMA+0x86>
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d845      	bhi.n	80028a0 <HAL_DAC_Start_DMA+0xf0>
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_DAC_Start_DMA+0x72>
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d005      	beq.n	800282c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002820:	e03e      	b.n	80028a0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3308      	adds	r3, #8
 8002828:	613b      	str	r3, [r7, #16]
        break;
 800282a:	e03c      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	613b      	str	r3, [r7, #16]
        break;
 8002834:	e037      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3310      	adds	r3, #16
 800283c:	613b      	str	r3, [r7, #16]
        break;
 800283e:	e032      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a3d      	ldr	r2, [pc, #244]	; (800293c <HAL_DAC_Start_DMA+0x18c>)
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_DAC_Start_DMA+0x190>)
 800284e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a3b      	ldr	r2, [pc, #236]	; (8002944 <HAL_DAC_Start_DMA+0x194>)
 8002856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002866:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d013      	beq.n	8002896 <HAL_DAC_Start_DMA+0xe6>
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d817      	bhi.n	80028a4 <HAL_DAC_Start_DMA+0xf4>
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_DAC_Start_DMA+0xd2>
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d005      	beq.n	800288c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002880:	e010      	b.n	80028a4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	613b      	str	r3, [r7, #16]
        break;
 800288a:	e00c      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3318      	adds	r3, #24
 8002892:	613b      	str	r3, [r7, #16]
        break;
 8002894:	e007      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	331c      	adds	r3, #28
 800289c:	613b      	str	r3, [r7, #16]
        break;
 800289e:	e002      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80028a4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6898      	ldr	r0, [r3, #8]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	f000 fb0b 	bl	8002ee0 <HAL_DMA_Start_IT>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
 80028ce:	e010      	b.n	80028f2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68d8      	ldr	r0, [r3, #12]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	f000 faf9 	bl	8002ee0 <HAL_DMA_Start_IT>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2201      	movs	r2, #1
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e005      	b.n	8002924 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	f043 0204 	orr.w	r2, r3, #4
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	08002c5d 	.word	0x08002c5d
 8002934:	08002c7f 	.word	0x08002c7f
 8002938:	08002c9b 	.word	0x08002c9b
 800293c:	08002d05 	.word	0x08002d05
 8002940:	08002d27 	.word	0x08002d27
 8002944:	08002d43 	.word	0x08002d43

08002948 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2201      	movs	r2, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43da      	mvns	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	400a      	ands	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fb02 	bl	8002fa0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e00c      	b.n	80029c8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 faf4 	bl	8002fa0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80029c6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b088      	sub	sp, #32
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	795b      	ldrb	r3, [r3, #5]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_DAC_ConfigChannel+0x1c>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e114      	b.n	8002c54 <HAL_DAC_ConfigChannel+0x246>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	f040 8081 	bne.w	8002b42 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002a40:	f7ff fd52 	bl	80024e8 <HAL_GetTick>
 8002a44:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d140      	bne.n	8002ace <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a4c:	e018      	b.n	8002a80 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002a4e:	f7ff fd4b 	bl	80024e8 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d911      	bls.n	8002a80 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f043 0208 	orr.w	r2, r3, #8
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0e9      	b.n	8002c54 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1df      	bne.n	8002a4e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7ff fd36 	bl	8002500 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	6992      	ldr	r2, [r2, #24]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a9e:	e023      	b.n	8002ae8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002aa0:	f7ff fd22 	bl	80024e8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d90f      	bls.n	8002ace <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da0a      	bge.n	8002ace <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f043 0208 	orr.w	r2, r3, #8
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e0c2      	b.n	8002c54 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	dbe3      	blt.n	8002aa0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7ff fd11 	bl	8002500 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	6992      	ldr	r2, [r2, #24]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	ea02 0103 	and.w	r1, r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	21ff      	movs	r1, #255	; 0xff
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	ea02 0103 	and.w	r1, r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11d      	bne.n	8002b86 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2207      	movs	r2, #7
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	400a      	ands	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	22c0      	movs	r2, #192	; 0xc0
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43da      	mvns	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	400a      	ands	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff feb1 	bl	80029d2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff feaa 	bl	80029e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f043 0204 	orr.w	r2, r3, #4
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fea0 	bl	80029fa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	711a      	strb	r2, [r3, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ffd8 	bl	8002cc8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	711a      	strb	r2, [r3, #4]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff ffd1 	bl	8002cdc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ffc7 	bl	8002cf0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	711a      	strb	r2, [r3, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e098      	b.n	8002eb4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_DMA_Init+0x150>)
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d80f      	bhi.n	8002dae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	4b4b      	ldr	r3, [pc, #300]	; (8002ec4 <HAL_DMA_Init+0x154>)
 8002d96:	4413      	add	r3, r2
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_DMA_Init+0x158>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	009a      	lsls	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a48      	ldr	r2, [pc, #288]	; (8002ecc <HAL_DMA_Init+0x15c>)
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_DMA_Init+0x160>)
 8002db6:	4413      	add	r3, r2
 8002db8:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_DMA_Init+0x158>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	009a      	lsls	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a42      	ldr	r2, [pc, #264]	; (8002ed4 <HAL_DMA_Init+0x164>)
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e26:	d039      	beq.n	8002e9c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4a27      	ldr	r2, [pc, #156]	; (8002ecc <HAL_DMA_Init+0x15c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11a      	bne.n	8002e68 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_DMA_Init+0x168>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f003 031c 	and.w	r3, r3, #28
 8002e3e:	210f      	movs	r1, #15
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4924      	ldr	r1, [pc, #144]	; (8002ed8 <HAL_DMA_Init+0x168>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <HAL_DMA_Init+0x168>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 031c 	and.w	r3, r3, #28
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	491d      	ldr	r1, [pc, #116]	; (8002ed8 <HAL_DMA_Init+0x168>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
 8002e66:	e019      	b.n	8002e9c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_DMA_Init+0x16c>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f003 031c 	and.w	r3, r3, #28
 8002e74:	210f      	movs	r1, #15
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	4917      	ldr	r1, [pc, #92]	; (8002edc <HAL_DMA_Init+0x16c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e82:	4b16      	ldr	r3, [pc, #88]	; (8002edc <HAL_DMA_Init+0x16c>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f003 031c 	and.w	r3, r3, #28
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	4911      	ldr	r1, [pc, #68]	; (8002edc <HAL_DMA_Init+0x16c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40020407 	.word	0x40020407
 8002ec4:	bffdfff8 	.word	0xbffdfff8
 8002ec8:	cccccccd 	.word	0xcccccccd
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	bffdfbf8 	.word	0xbffdfbf8
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	400200a8 	.word	0x400200a8
 8002edc:	400204a8 	.word	0x400204a8

08002ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_DMA_Start_IT+0x20>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e04b      	b.n	8002f98 <HAL_DMA_Start_IT+0xb8>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d13a      	bne.n	8002f8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f91e 	bl	800317a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 020e 	orr.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e00f      	b.n	8002f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 020a 	orr.w	r2, r2, #10
 8002f76:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e005      	b.n	8002f96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e022      	b.n	8003010 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 020e 	bic.w	r2, r2, #14
 8002fd8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f003 021c 	and.w	r2, r3, #28
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f003 031c 	and.w	r3, r3, #28
 800303c:	2204      	movs	r2, #4
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d026      	beq.n	8003096 <HAL_DMA_IRQHandler+0x7a>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d021      	beq.n	8003096 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f003 021c 	and.w	r2, r3, #28
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2104      	movs	r1, #4
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	2b00      	cmp	r3, #0
 800308a:	d071      	beq.n	8003170 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003094:	e06c      	b.n	8003170 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	f003 031c 	and.w	r3, r3, #28
 800309e:	2202      	movs	r2, #2
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02e      	beq.n	8003108 <HAL_DMA_IRQHandler+0xec>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d029      	beq.n	8003108 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 020a 	bic.w	r2, r2, #10
 80030d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f003 021c 	and.w	r2, r3, #28
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2102      	movs	r1, #2
 80030e8:	fa01 f202 	lsl.w	r2, r1, r2
 80030ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d038      	beq.n	8003170 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003106:	e033      	b.n	8003170 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	f003 031c 	and.w	r3, r3, #28
 8003110:	2208      	movs	r2, #8
 8003112:	409a      	lsls	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02a      	beq.n	8003172 <HAL_DMA_IRQHandler+0x156>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 020e 	bic.w	r2, r2, #14
 8003134:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	f003 021c 	and.w	r2, r3, #28
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f202 	lsl.w	r2, r1, r2
 8003148:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003170:	bf00      	nop
 8003172:	bf00      	nop
}
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	f003 021c 	and.w	r2, r3, #28
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d108      	bne.n	80031be <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031bc:	e007      	b.n	80031ce <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	60da      	str	r2, [r3, #12]
}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e17f      	b.n	80034ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8171 	beq.w	80034e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d005      	beq.n	800321c <HAL_GPIO_Init+0x40>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0201 	and.w	r2, r3, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b03      	cmp	r3, #3
 8003288:	d118      	bne.n	80032bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003290:	2201      	movs	r2, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0201 	and.w	r2, r3, #1
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d017      	beq.n	80032f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	2203      	movs	r2, #3
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d123      	bne.n	800334c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	08da      	lsrs	r2, r3, #3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3208      	adds	r2, #8
 800330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	220f      	movs	r2, #15
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	08da      	lsrs	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3208      	adds	r2, #8
 8003346:	6939      	ldr	r1, [r7, #16]
 8003348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0203 	and.w	r2, r3, #3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80ac 	beq.w	80034e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_GPIO_Init+0x330>)
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_GPIO_Init+0x330>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6613      	str	r3, [r2, #96]	; 0x60
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_GPIO_Init+0x330>)
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033a6:	4a5a      	ldr	r2, [pc, #360]	; (8003510 <HAL_GPIO_Init+0x334>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	089b      	lsrs	r3, r3, #2
 80033ac:	3302      	adds	r3, #2
 80033ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	220f      	movs	r2, #15
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033d0:	d025      	beq.n	800341e <HAL_GPIO_Init+0x242>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4f      	ldr	r2, [pc, #316]	; (8003514 <HAL_GPIO_Init+0x338>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <HAL_GPIO_Init+0x23e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4e      	ldr	r2, [pc, #312]	; (8003518 <HAL_GPIO_Init+0x33c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d019      	beq.n	8003416 <HAL_GPIO_Init+0x23a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4d      	ldr	r2, [pc, #308]	; (800351c <HAL_GPIO_Init+0x340>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_GPIO_Init+0x236>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4c      	ldr	r2, [pc, #304]	; (8003520 <HAL_GPIO_Init+0x344>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00d      	beq.n	800340e <HAL_GPIO_Init+0x232>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <HAL_GPIO_Init+0x348>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <HAL_GPIO_Init+0x22e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a4a      	ldr	r2, [pc, #296]	; (8003528 <HAL_GPIO_Init+0x34c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_GPIO_Init+0x22a>
 8003402:	2306      	movs	r3, #6
 8003404:	e00c      	b.n	8003420 <HAL_GPIO_Init+0x244>
 8003406:	2307      	movs	r3, #7
 8003408:	e00a      	b.n	8003420 <HAL_GPIO_Init+0x244>
 800340a:	2305      	movs	r3, #5
 800340c:	e008      	b.n	8003420 <HAL_GPIO_Init+0x244>
 800340e:	2304      	movs	r3, #4
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x244>
 8003412:	2303      	movs	r3, #3
 8003414:	e004      	b.n	8003420 <HAL_GPIO_Init+0x244>
 8003416:	2302      	movs	r3, #2
 8003418:	e002      	b.n	8003420 <HAL_GPIO_Init+0x244>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_GPIO_Init+0x244>
 800341e:	2300      	movs	r3, #0
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	f002 0203 	and.w	r2, r2, #3
 8003426:	0092      	lsls	r2, r2, #2
 8003428:	4093      	lsls	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003430:	4937      	ldr	r1, [pc, #220]	; (8003510 <HAL_GPIO_Init+0x334>)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_GPIO_Init+0x350>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003462:	4a32      	ldr	r2, [pc, #200]	; (800352c <HAL_GPIO_Init+0x350>)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003468:	4b30      	ldr	r3, [pc, #192]	; (800352c <HAL_GPIO_Init+0x350>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_GPIO_Init+0x350>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <HAL_GPIO_Init+0x350>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_GPIO_Init+0x350>)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_GPIO_Init+0x350>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_GPIO_Init+0x350>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3301      	adds	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f47f ae78 	bne.w	80031ec <HAL_GPIO_Init+0x10>
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	40010000 	.word	0x40010000
 8003514:	48000400 	.word	0x48000400
 8003518:	48000800 	.word	0x48000800
 800351c:	48000c00 	.word	0x48000c00
 8003520:	48001000 	.word	0x48001000
 8003524:	48001400 	.word	0x48001400
 8003528:	48001800 	.word	0x48001800
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_PWREx_GetVoltageRange+0x18>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40007000 	.word	0x40007000

0800354c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355a:	d130      	bne.n	80035be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003568:	d038      	beq.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2232      	movs	r2, #50	; 0x32
 8003580:	fb02 f303 	mul.w	r3, r2, r3
 8003584:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003590:	e002      	b.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	3b01      	subs	r3, #1
 8003596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a4:	d102      	bne.n	80035ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f2      	bne.n	8003592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d110      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00f      	b.n	80035de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d007      	beq.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035d4:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40007000 	.word	0x40007000
 80035f0:	20000404 	.word	0x20000404
 80035f4:	431bde83 	.word	0x431bde83

080035f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e3ca      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	4b97      	ldr	r3, [pc, #604]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003614:	4b94      	ldr	r3, [pc, #592]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80e4 	beq.w	80037f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_RCC_OscConfig+0x4a>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	f040 808b 	bne.w	8003750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b01      	cmp	r3, #1
 800363e:	f040 8087 	bne.w	8003750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003642:	4b89      	ldr	r3, [pc, #548]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_RCC_OscConfig+0x62>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e3a2      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	4b82      	ldr	r3, [pc, #520]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_RCC_OscConfig+0x7c>
 800366a:	4b7f      	ldr	r3, [pc, #508]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003672:	e005      	b.n	8003680 <HAL_RCC_OscConfig+0x88>
 8003674:	4b7c      	ldr	r3, [pc, #496]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003680:	4293      	cmp	r3, r2
 8003682:	d223      	bcs.n	80036cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fd55 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e383      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003698:	4b73      	ldr	r3, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a72      	ldr	r2, [pc, #456]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800369e:	f043 0308 	orr.w	r3, r3, #8
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	496d      	ldr	r1, [pc, #436]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b6:	4b6c      	ldr	r3, [pc, #432]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4968      	ldr	r1, [pc, #416]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	604b      	str	r3, [r1, #4]
 80036ca:	e025      	b.n	8003718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036cc:	4b66      	ldr	r3, [pc, #408]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a65      	ldr	r2, [pc, #404]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b63      	ldr	r3, [pc, #396]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4960      	ldr	r1, [pc, #384]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ea:	4b5f      	ldr	r3, [pc, #380]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	495b      	ldr	r1, [pc, #364]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4618      	mov	r0, r3
 800370a:	f000 fd15 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e343      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003718:	f000 fc4a 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b52      	ldr	r3, [pc, #328]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	4950      	ldr	r1, [pc, #320]	; (800386c <HAL_RCC_OscConfig+0x274>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
 8003734:	4a4e      	ldr	r2, [pc, #312]	; (8003870 <HAL_RCC_OscConfig+0x278>)
 8003736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003738:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <HAL_RCC_OscConfig+0x27c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fe83 	bl	8002448 <HAL_InitTick>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d052      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	e327      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d032      	beq.n	80037be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003758:	4b43      	ldr	r3, [pc, #268]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a42      	ldr	r2, [pc, #264]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003764:	f7fe fec0 	bl	80024e8 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376c:	f7fe febc 	bl	80024e8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e310      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800377e:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4931      	ldr	r1, [pc, #196]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a8:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	492c      	ldr	r1, [pc, #176]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
 80037bc:	e01a      	b.n	80037f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037ca:	f7fe fe8d 	bl	80024e8 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037d2:	f7fe fe89 	bl	80024e8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e2dd      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x1da>
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d074      	beq.n	80038ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x21a>
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d10e      	bne.n	800382a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d10b      	bne.n	800382a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d064      	beq.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d160      	bne.n	80038e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e2ba      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x24a>
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e026      	b.n	8003890 <HAL_RCC_OscConfig+0x298>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384a:	d115      	bne.n	8003878 <HAL_RCC_OscConfig+0x280>
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a05      	ldr	r2, [pc, #20]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 8003852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a02      	ldr	r2, [pc, #8]	; (8003868 <HAL_RCC_OscConfig+0x270>)
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x298>
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	0800b1f8 	.word	0x0800b1f8
 8003870:	20000404 	.word	0x20000404
 8003874:	20000408 	.word	0x20000408
 8003878:	4ba0      	ldr	r3, [pc, #640]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a9f      	ldr	r2, [pc, #636]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b9d      	ldr	r3, [pc, #628]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a9c      	ldr	r2, [pc, #624]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800388a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d013      	beq.n	80038c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fe26 	bl	80024e8 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe fe22 	bl	80024e8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e276      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b2:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x2a8>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7fe fe12 	bl	80024e8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7fe fe0e 	bl	80024e8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e262      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038da:	4b88      	ldr	r3, [pc, #544]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCC_OscConfig+0x2d0>
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d060      	beq.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x310>
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	2b0c      	cmp	r3, #12
 8003900:	d119      	bne.n	8003936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d116      	bne.n	8003936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003908:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_OscConfig+0x328>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e23f      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b76      	ldr	r3, [pc, #472]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	4973      	ldr	r1, [pc, #460]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003934:	e040      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d023      	beq.n	8003986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393e:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe fdcd 	bl	80024e8 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe fdc9 	bl	80024e8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e21d      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003964:	4b65      	ldr	r3, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b62      	ldr	r3, [pc, #392]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	495f      	ldr	r1, [pc, #380]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
 8003984:	e018      	b.n	80039b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b5d      	ldr	r3, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a5c      	ldr	r2, [pc, #368]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fe fda9 	bl	80024e8 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399a:	f7fe fda5 	bl	80024e8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e1f9      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03c      	beq.n	8003a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d01c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe fd84 	bl	80024e8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe fd80 	bl	80024e8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1d4      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f6:	4b41      	ldr	r3, [pc, #260]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ef      	beq.n	80039e4 <HAL_RCC_OscConfig+0x3ec>
 8003a04:	e01b      	b.n	8003a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0c:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe fd67 	bl	80024e8 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fd63 	bl	80024e8 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e1b7      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ef      	bne.n	8003a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a6 	beq.w	8003b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a50:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	4a26      	ldr	r2, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6593      	str	r3, [r2, #88]	; 0x58
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a78:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d118      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fd2a 	bl	80024e8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fe fd26 	bl	80024e8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e17a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x508>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d108      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4d8>
 8003abe:	4b0f      	ldr	r3, [pc, #60]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ace:	e029      	b.n	8003b24 <HAL_RCC_OscConfig+0x52c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d115      	bne.n	8003b04 <HAL_RCC_OscConfig+0x50c>
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ade:	4a07      	ldr	r2, [pc, #28]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae8:	4b04      	ldr	r3, [pc, #16]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a03      	ldr	r2, [pc, #12]	; (8003afc <HAL_RCC_OscConfig+0x504>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af8:	e014      	b.n	8003b24 <HAL_RCC_OscConfig+0x52c>
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40007000 	.word	0x40007000
 8003b04:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a9b      	ldr	r2, [pc, #620]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b14:	4b98      	ldr	r3, [pc, #608]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a97      	ldr	r2, [pc, #604]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fcdc 	bl	80024e8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe fcd8 	bl	80024e8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e12a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	4b8b      	ldr	r3, [pc, #556]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ed      	beq.n	8003b34 <HAL_RCC_OscConfig+0x53c>
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fcc5 	bl	80024e8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fcc1 	bl	80024e8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e113      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b78:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ed      	bne.n	8003b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b86:	7ffb      	ldrb	r3, [r7, #31]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a79      	ldr	r2, [pc, #484]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80fe 	beq.w	8003d9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	f040 80d0 	bne.w	8003d4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bac:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0203 	and.w	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d130      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d127      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11f      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bec:	2a07      	cmp	r2, #7
 8003bee:	bf14      	ite	ne
 8003bf0:	2201      	movne	r2, #1
 8003bf2:	2200      	moveq	r2, #0
 8003bf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d113      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d06e      	beq.n	8003d00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d069      	beq.n	8003cfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c34:	4b50      	ldr	r3, [pc, #320]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0ad      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c44:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a4b      	ldr	r2, [pc, #300]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c50:	f7fe fc4a 	bl	80024e8 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fc46 	bl	80024e8 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e09a      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	4b40      	ldr	r3, [pc, #256]	; (8003d7c <HAL_RCC_OscConfig+0x784>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	4311      	orrs	r1, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c90:	0212      	lsls	r2, r2, #8
 8003c92:	4311      	orrs	r1, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c98:	0852      	lsrs	r2, r2, #1
 8003c9a:	3a01      	subs	r2, #1
 8003c9c:	0552      	lsls	r2, r2, #21
 8003c9e:	4311      	orrs	r1, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ca4:	0852      	lsrs	r2, r2, #1
 8003ca6:	3a01      	subs	r2, #1
 8003ca8:	0652      	lsls	r2, r2, #25
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cb0:	0912      	lsrs	r2, r2, #4
 8003cb2:	0452      	lsls	r2, r2, #17
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	4930      	ldr	r1, [pc, #192]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cd4:	f7fe fc08 	bl	80024e8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fe fc04 	bl	80024e8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e058      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfa:	e050      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e04f      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d00:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d148      	bne.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d24:	f7fe fbe0 	bl	80024e8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fbdc 	bl	80024e8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e030      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x734>
 8003d4a:	e028      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d023      	beq.n	8003d9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <HAL_RCC_OscConfig+0x780>)
 8003d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fbc3 	bl	80024e8 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d64:	e00c      	b.n	8003d80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d66:	f7fe fbbf 	bl	80024e8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d905      	bls.n	8003d80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e013      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ec      	bne.n	8003d66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	4905      	ldr	r1, [pc, #20]	; (8003da8 <HAL_RCC_OscConfig+0x7b0>)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x7b4>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	60cb      	str	r3, [r1, #12]
 8003d98:	e001      	b.n	8003d9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	feeefffc 	.word	0xfeeefffc

08003db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0e7      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b75      	ldr	r3, [pc, #468]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d910      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b72      	ldr	r3, [pc, #456]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0207 	bic.w	r2, r3, #7
 8003dda:	4970      	ldr	r1, [pc, #448]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cf      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d010      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d908      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e10:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4960      	ldr	r1, [pc, #384]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04c      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	4b5a      	ldr	r3, [pc, #360]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d121      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e0a6      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d115      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e09a      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e66:	4b4e      	ldr	r3, [pc, #312]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e08e      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e76:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e086      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f023 0203 	bic.w	r2, r3, #3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4943      	ldr	r1, [pc, #268]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7fe fb26 	bl	80024e8 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7fe fb22 	bl	80024e8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e06e      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 020c 	and.w	r2, r3, #12
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d1eb      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d208      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	492b      	ldr	r1, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d210      	bcs.n	8003f26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 0207 	bic.w	r2, r3, #7
 8003f0c:	4923      	ldr	r1, [pc, #140]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCC_ClockConfig+0x1ec>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e036      	b.n	8003f94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4918      	ldr	r1, [pc, #96]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f64:	f000 f824 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	490b      	ldr	r1, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1f4>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1f8>)
 8003f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1fc>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe fa5d 	bl	8002448 <HAL_InitTick>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	0800b1f8 	.word	0x0800b1f8
 8003fa8:	20000404 	.word	0x20000404
 8003fac:	20000408 	.word	0x20000408

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbe:	4b3e      	ldr	r3, [pc, #248]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d121      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d11e      	bne.n	8004022 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe4:	4b34      	ldr	r3, [pc, #208]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff0:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	e005      	b.n	800400c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004000:	4b2d      	ldr	r3, [pc, #180]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800400c:	4a2b      	ldr	r2, [pc, #172]	; (80040bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10d      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004020:	e00a      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d102      	bne.n	800402e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e004      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d101      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004034:	4b23      	ldr	r3, [pc, #140]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004036:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d134      	bne.n	80040a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0xa6>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d003      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0xac>
 8004054:	e005      	b.n	8004062 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004058:	617b      	str	r3, [r7, #20]
      break;
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800405e:	617b      	str	r3, [r7, #20]
      break;
 8004060:	e002      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	617b      	str	r3, [r7, #20]
      break;
 8004066:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004068:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	3301      	adds	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	fb03 f202 	mul.w	r2, r3, r2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	0e5b      	lsrs	r3, r3, #25
 8004094:	f003 0303 	and.w	r3, r3, #3
 8004098:	3301      	adds	r3, #1
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040a8:	69bb      	ldr	r3, [r7, #24]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800b210 	.word	0x0800b210
 80040c0:	00f42400 	.word	0x00f42400
 80040c4:	007a1200 	.word	0x007a1200

080040c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040cc:	4b03      	ldr	r3, [pc, #12]	; (80040dc <HAL_RCC_GetHCLKFreq+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000404 	.word	0x20000404

080040e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e4:	f7ff fff0 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40021000 	.word	0x40021000
 8004108:	0800b208 	.word	0x0800b208

0800410c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004110:	f7ff ffda 	bl	80040c8 <HAL_RCC_GetHCLKFreq>
 8004114:	4602      	mov	r2, r0
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0adb      	lsrs	r3, r3, #11
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004122:	5ccb      	ldrb	r3, [r1, r3]
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000
 8004134:	0800b208 	.word	0x0800b208

08004138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004144:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004150:	f7ff f9ee 	bl	8003530 <HAL_PWREx_GetVoltageRange>
 8004154:	6178      	str	r0, [r7, #20]
 8004156:	e014      	b.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004158:	4b25      	ldr	r3, [pc, #148]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415c:	4a24      	ldr	r2, [pc, #144]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004162:	6593      	str	r3, [r2, #88]	; 0x58
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004170:	f7ff f9de 	bl	8003530 <HAL_PWREx_GetVoltageRange>
 8004174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b1e      	ldr	r3, [pc, #120]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d10b      	bne.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d919      	bls.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2ba0      	cmp	r3, #160	; 0xa0
 8004194:	d902      	bls.n	800419c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004196:	2302      	movs	r3, #2
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e013      	b.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800419c:	2301      	movs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	e010      	b.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d902      	bls.n	80041ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041a8:	2303      	movs	r3, #3
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e00a      	b.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d102      	bne.n	80041ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041b4:	2302      	movs	r3, #2
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e004      	b.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b70      	cmp	r3, #112	; 0x70
 80041be:	d101      	bne.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 0207 	bic.w	r2, r3, #7
 80041cc:	4909      	ldr	r1, [pc, #36]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d001      	beq.n	80041e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40022000 	.word	0x40022000

080041f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004200:	2300      	movs	r3, #0
 8004202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004204:	2300      	movs	r3, #0
 8004206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004210:	2b00      	cmp	r3, #0
 8004212:	d041      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004218:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800421c:	d02a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800421e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004222:	d824      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004228:	d008      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800422a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800422e:	d81e      	bhi.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004238:	d010      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800423a:	e018      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800423c:	4b86      	ldr	r3, [pc, #536]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a85      	ldr	r2, [pc, #532]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004246:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004248:	e015      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fabb 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800425a:	e00c      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3320      	adds	r3, #32
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fba6 	bl	80049b4 <RCCEx_PLLSAI2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	74fb      	strb	r3, [r7, #19]
      break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800427c:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428a:	4973      	ldr	r1, [pc, #460]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004292:	e001      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d041      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ac:	d02a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042b2:	d824      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b8:	d008      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042be:	d81e      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c8:	d010      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042ca:	e018      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042cc:	4b62      	ldr	r3, [pc, #392]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d8:	e015      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fa73 	bl	80047cc <RCCEx_PLLSAI1_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042ea:	e00c      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3320      	adds	r3, #32
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb5e 	bl	80049b4 <RCCEx_PLLSAI2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	74fb      	strb	r3, [r7, #19]
      break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10b      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800430c:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431a:	494f      	ldr	r1, [pc, #316]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004322:	e001      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a0 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800433a:	4b47      	ldr	r3, [pc, #284]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b41      	ldr	r3, [pc, #260]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	4a40      	ldr	r2, [pc, #256]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	; 0x58
 800435c:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004368:	2301      	movs	r3, #1
 800436a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004376:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004378:	f7fe f8b6 	bl	80024e8 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800437e:	e009      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004380:	f7fe f8b2 	bl	80024e8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d902      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	74fb      	strb	r3, [r7, #19]
        break;
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004394:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d15c      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043a6:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01f      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d019      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043d0:	4b21      	ldr	r3, [pc, #132]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	4a20      	ldr	r2, [pc, #128]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043e0:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe f871 	bl	80024e8 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004408:	e00b      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe f86d 	bl	80024e8 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d902      	bls.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	74fb      	strb	r3, [r7, #19]
            break;
 8004420:	e006      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ec      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004430:	7cfb      	ldrb	r3, [r7, #19]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004446:	4904      	ldr	r1, [pc, #16]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800444e:	e009      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	74bb      	strb	r3, [r7, #18]
 8004454:	e006      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	7c7b      	ldrb	r3, [r7, #17]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b9e      	ldr	r3, [pc, #632]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	4a9d      	ldr	r2, [pc, #628]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004482:	4b98      	ldr	r3, [pc, #608]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f023 0203 	bic.w	r2, r3, #3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	4994      	ldr	r1, [pc, #592]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044a4:	4b8f      	ldr	r3, [pc, #572]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	f023 020c 	bic.w	r2, r3, #12
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	498c      	ldr	r1, [pc, #560]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044c6:	4b87      	ldr	r3, [pc, #540]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	4983      	ldr	r1, [pc, #524]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e8:	4b7e      	ldr	r3, [pc, #504]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	497b      	ldr	r1, [pc, #492]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800450a:	4b76      	ldr	r3, [pc, #472]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	4972      	ldr	r1, [pc, #456]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800452c:	4b6d      	ldr	r3, [pc, #436]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	496a      	ldr	r1, [pc, #424]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800454e:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	4961      	ldr	r1, [pc, #388]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004570:	4b5c      	ldr	r3, [pc, #368]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	4959      	ldr	r1, [pc, #356]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004592:	4b54      	ldr	r3, [pc, #336]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	4950      	ldr	r1, [pc, #320]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b4:	4b4b      	ldr	r3, [pc, #300]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c2:	4948      	ldr	r1, [pc, #288]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d6:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	493f      	ldr	r1, [pc, #252]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d028      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f8:	4b3a      	ldr	r3, [pc, #232]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004606:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004616:	d106      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a31      	ldr	r2, [pc, #196]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004622:	60d3      	str	r3, [r2, #12]
 8004624:	e011      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462e:	d10c      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f8c8 	bl	80047cc <RCCEx_PLLSAI1_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004646:	7cfb      	ldrb	r3, [r7, #19]
 8004648:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d028      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	491f      	ldr	r1, [pc, #124]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004674:	d106      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004680:	60d3      	str	r3, [r2, #12]
 8004682:	e011      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f899 	bl	80047cc <RCCEx_PLLSAI1_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02b      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c2:	4908      	ldr	r1, [pc, #32]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d2:	d109      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b03      	ldr	r3, [pc, #12]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a02      	ldr	r2, [pc, #8]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
 80046e0:	e014      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80046e2:	bf00      	nop
 80046e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046f0:	d10c      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 f867 	bl	80047cc <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004726:	4928      	ldr	r1, [pc, #160]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004736:	d10d      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3304      	adds	r3, #4
 800473c:	2102      	movs	r1, #2
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f844 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d014      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	74bb      	strb	r3, [r7, #18]
 8004752:	e011      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800475c:	d10c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3320      	adds	r3, #32
 8004762:	2102      	movs	r1, #2
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f925 	bl	80049b4 <RCCEx_PLLSAI2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a6:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b6:	4904      	ldr	r1, [pc, #16]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047be:	7cbb      	ldrb	r3, [r7, #18]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000

080047cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047da:	4b75      	ldr	r3, [pc, #468]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047e6:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
       ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047fe:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
       ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d047      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e044      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d018      	beq.n	8004852 <RCCEx_PLLSAI1_Config+0x86>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d825      	bhi.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x62>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d009      	beq.n	8004840 <RCCEx_PLLSAI1_Config+0x74>
 800482c:	e020      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482e:	4b60      	ldr	r3, [pc, #384]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483e:	e01a      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004840:	4b5b      	ldr	r3, [pc, #364]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e013      	b.n	800487a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004852:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485e:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486e:	e006      	b.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e004      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	430b      	orrs	r3, r1
 800489c:	4944      	ldr	r1, [pc, #272]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d17d      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a8:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd fe18 	bl	80024e8 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ba:	e009      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048bc:	f7fd fe14 	bl	80024e8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d902      	bls.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
        break;
 80048ce:	e005      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d0:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ef      	bne.n	80048bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d160      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d111      	bne.n	800490c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	0211      	lsls	r1, r2, #8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	0912      	lsrs	r2, r2, #4
 8004900:	0452      	lsls	r2, r2, #17
 8004902:	430a      	orrs	r2, r1
 8004904:	492a      	ldr	r1, [pc, #168]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	610b      	str	r3, [r1, #16]
 800490a:	e027      	b.n	800495c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d112      	bne.n	8004938 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004912:	4b27      	ldr	r3, [pc, #156]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800491a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6892      	ldr	r2, [r2, #8]
 8004922:	0211      	lsls	r1, r2, #8
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6912      	ldr	r2, [r2, #16]
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	3a01      	subs	r2, #1
 800492c:	0552      	lsls	r2, r2, #21
 800492e:	430a      	orrs	r2, r1
 8004930:	491f      	ldr	r1, [pc, #124]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	610b      	str	r3, [r1, #16]
 8004936:	e011      	b.n	800495c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	0211      	lsls	r1, r2, #8
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6952      	ldr	r2, [r2, #20]
 800494e:	0852      	lsrs	r2, r2, #1
 8004950:	3a01      	subs	r2, #1
 8004952:	0652      	lsls	r2, r2, #25
 8004954:	430a      	orrs	r2, r1
 8004956:	4916      	ldr	r1, [pc, #88]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fd fdbe 	bl	80024e8 <HAL_GetTick>
 800496c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496e:	e009      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004970:	f7fd fdba 	bl	80024e8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d902      	bls.n	8004984 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	73fb      	strb	r3, [r7, #15]
          break;
 8004982:	e005      	b.n	8004990 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004984:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	4904      	ldr	r1, [pc, #16]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000

080049b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049c2:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d018      	beq.n	8004a00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d10d      	bne.n	80049fa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
       ||
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049e6:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	091b      	lsrs	r3, r3, #4
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
       ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d047      	beq.n	8004a8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
 80049fe:	e044      	b.n	8004a8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d018      	beq.n	8004a3a <RCCEx_PLLSAI2_Config+0x86>
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d825      	bhi.n	8004a58 <RCCEx_PLLSAI2_Config+0xa4>
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d002      	beq.n	8004a16 <RCCEx_PLLSAI2_Config+0x62>
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d009      	beq.n	8004a28 <RCCEx_PLLSAI2_Config+0x74>
 8004a14:	e020      	b.n	8004a58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a16:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d11d      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a26:	e01a      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a28:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d116      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a38:	e013      	b.n	8004a62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a46:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a56:	e006      	b.n	8004a66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a5c:	e004      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a66:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10d      	bne.n	8004a8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	430b      	orrs	r3, r1
 8004a84:	4939      	ldr	r1, [pc, #228]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d167      	bne.n	8004b60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a90:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a35      	ldr	r2, [pc, #212]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fd24 	bl	80024e8 <HAL_GetTick>
 8004aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa2:	e009      	b.n	8004ab8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa4:	f7fd fd20 	bl	80024e8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d902      	bls.n	8004ab8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ab6:	e005      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1ef      	bne.n	8004aa4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d14a      	bne.n	8004b60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d111      	bne.n	8004af4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ad0:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6892      	ldr	r2, [r2, #8]
 8004ae0:	0211      	lsls	r1, r2, #8
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	0912      	lsrs	r2, r2, #4
 8004ae8:	0452      	lsls	r2, r2, #17
 8004aea:	430a      	orrs	r2, r1
 8004aec:	491f      	ldr	r1, [pc, #124]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	614b      	str	r3, [r1, #20]
 8004af2:	e011      	b.n	8004b18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004afc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6892      	ldr	r2, [r2, #8]
 8004b04:	0211      	lsls	r1, r2, #8
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6912      	ldr	r2, [r2, #16]
 8004b0a:	0852      	lsrs	r2, r2, #1
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	0652      	lsls	r2, r2, #25
 8004b10:	430a      	orrs	r2, r1
 8004b12:	4916      	ldr	r1, [pc, #88]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd fce0 	bl	80024e8 <HAL_GetTick>
 8004b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b2a:	e009      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b2c:	f7fd fcdc 	bl	80024e8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b3e:	e005      	b.n	8004b4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	4904      	ldr	r1, [pc, #16]	; (8004b6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000

08004b70 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e049      	b.n	8004c16 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	795b      	ldrb	r3, [r3, #5]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd fa90 	bl	80020b8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0204 	orr.w	r2, r2, #4
 8004bac:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d104      	bne.n	8004bc6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e027      	b.n	8004c16 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc6:	f7fd fc8f 	bl	80024e8 <HAL_GetTick>
 8004bca:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004bcc:	e015      	b.n	8004bfa <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004bce:	f7fd fc8b 	bl	80024e8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d90e      	bls.n	8004bfa <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d107      	bne.n	8004bfa <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e00d      	b.n	8004c16 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d0e2      	beq.n	8004bce <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	791b      	ldrb	r3, [r3, #4]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e044      	b.n	8004cc2 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	795b      	ldrb	r3, [r3, #5]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d133      	bne.n	8004cb0 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fc4b 	bl	80024e8 <HAL_GetTick>
 8004c52:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004c54:	e018      	b.n	8004c88 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004c56:	f7fd fc47 	bl	80024e8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d911      	bls.n	8004c88 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d00a      	beq.n	8004c88 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e01c      	b.n	8004cc2 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d1df      	bne.n	8004c56 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	715a      	strb	r2, [r3, #5]
 8004cae:	e004      	b.n	8004cba <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2204      	movs	r2, #4
 8004cb4:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	711a      	strb	r2, [r3, #4]

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2210      	movs	r2, #16
 8004cec:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e01f      	b.n	8004d34 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01a      	beq.n	8004d34 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d108      	bne.n	8004d1a <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	e00c      	b.n	8004d34 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	609a      	str	r2, [r3, #8]
      rngclockerror = 1U;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0208 	bic.w	r2, r2, #8
 8004d32:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10b      	bne.n	8004d52 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f837 	bl	8004db4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

    return;
 8004d50:	e022      	b.n	8004d98 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01d      	beq.n	8004d98 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0208 	bic.w	r2, r2, #8
 8004d6a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	795b      	ldrb	r3, [r3, #5]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d00b      	beq.n	8004d98 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f803 	bl	8004d9e <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e049      	b.n	8004e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fd f9ae 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3304      	adds	r3, #4
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f000 f968 	bl	80050dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d001      	beq.n	8004e90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e047      	b.n	8004f20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a23      	ldr	r2, [pc, #140]	; (8004f2c <HAL_TIM_Base_Start+0xb4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d01d      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eaa:	d018      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <HAL_TIM_Base_Start+0xb8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d013      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <HAL_TIM_Base_Start+0xbc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1c      	ldr	r2, [pc, #112]	; (8004f38 <HAL_TIM_Base_Start+0xc0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1b      	ldr	r2, [pc, #108]	; (8004f3c <HAL_TIM_Base_Start+0xc4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIM_Base_Start+0x66>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_Base_Start+0xc8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d115      	bne.n	8004f0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <HAL_TIM_Base_Start+0xcc>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b06      	cmp	r3, #6
 8004eee:	d015      	beq.n	8004f1c <HAL_TIM_Base_Start+0xa4>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef6:	d011      	beq.n	8004f1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f08:	e008      	b.n	8004f1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e000      	b.n	8004f1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	00010007 	.word	0x00010007

08004f48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_ConfigClockSource+0x1c>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e0b6      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x18a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d03e      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0xd8>
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	f200 8087 	bhi.w	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	f000 8086 	beq.w	80050be <HAL_TIM_ConfigClockSource+0x176>
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d87f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d01a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xaa>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d87b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d050      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x11e>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d877      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fc8:	2b50      	cmp	r3, #80	; 0x50
 8004fca:	d03c      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xfe>
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d873      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d058      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x13e>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d86f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d064      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15e>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d86b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d060      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15e>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d867      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05c      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15e>
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d05a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15e>
 8004ff0:	e062      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005002:	f000 f97f 	bl	8005304 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
      break;
 800501e:	e04f      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005030:	f000 f968 	bl	8005304 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	609a      	str	r2, [r3, #8]
      break;
 8005044:	e03c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	461a      	mov	r2, r3
 8005054:	f000 f8dc 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2150      	movs	r1, #80	; 0x50
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f935 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 8005064:	e02c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f8fb 	bl	800526e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2160      	movs	r1, #96	; 0x60
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f925 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 8005084:	e01c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f8bc 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f915 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 f90c 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 80050b6:	e003      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a40      	ldr	r2, [pc, #256]	; (80051f0 <TIM_Base_SetConfig+0x114>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3d      	ldr	r2, [pc, #244]	; (80051f4 <TIM_Base_SetConfig+0x118>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <TIM_Base_SetConfig+0x11c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3b      	ldr	r2, [pc, #236]	; (80051fc <TIM_Base_SetConfig+0x120>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3a      	ldr	r2, [pc, #232]	; (8005200 <TIM_Base_SetConfig+0x124>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d108      	bne.n	800512e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <TIM_Base_SetConfig+0x114>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d01f      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d01b      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <TIM_Base_SetConfig+0x118>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d017      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <TIM_Base_SetConfig+0x11c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <TIM_Base_SetConfig+0x120>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a29      	ldr	r2, [pc, #164]	; (8005200 <TIM_Base_SetConfig+0x124>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a28      	ldr	r2, [pc, #160]	; (8005204 <TIM_Base_SetConfig+0x128>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a27      	ldr	r2, [pc, #156]	; (8005208 <TIM_Base_SetConfig+0x12c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0x9a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a26      	ldr	r2, [pc, #152]	; (800520c <TIM_Base_SetConfig+0x130>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d108      	bne.n	8005188 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <TIM_Base_SetConfig+0x114>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00f      	beq.n	80051d4 <TIM_Base_SetConfig+0xf8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <TIM_Base_SetConfig+0x124>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00b      	beq.n	80051d4 <TIM_Base_SetConfig+0xf8>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <TIM_Base_SetConfig+0x128>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d007      	beq.n	80051d4 <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <TIM_Base_SetConfig+0x12c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d003      	beq.n	80051d4 <TIM_Base_SetConfig+0xf8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a0f      	ldr	r2, [pc, #60]	; (800520c <TIM_Base_SetConfig+0x130>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d103      	bne.n	80051dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	615a      	str	r2, [r3, #20]
}
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40000400 	.word	0x40000400
 80051f8:	40000800 	.word	0x40000800
 80051fc:	40000c00 	.word	0x40000c00
 8005200:	40013400 	.word	0x40013400
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 030a 	bic.w	r3, r3, #10
 800524c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0210 	bic.w	r2, r3, #16
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	031b      	lsls	r3, r3, #12
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f043 0307 	orr.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e068      	b.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2e      	ldr	r2, [pc, #184]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2d      	ldr	r2, [pc, #180]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d108      	bne.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005396:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01d      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d018      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d013      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d00e      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a13      	ldr	r2, [pc, #76]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a14      	ldr	r2, [pc, #80]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10c      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40014000 	.word	0x40014000

08005454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e040      	b.n	80054e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fc fe9c 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	; 0x24
 8005480:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb6a 	bl	8005b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8af 	bl	8005604 <UART_SetConfig>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e01b      	b.n	80054e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fbe9 	bl	8005cb8 <UART_CheckIdleState>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4613      	mov	r3, r2
 80054fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005504:	2b20      	cmp	r3, #32
 8005506:	d178      	bne.n	80055fa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_UART_Transmit+0x24>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e071      	b.n	80055fc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2221      	movs	r2, #33	; 0x21
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005526:	f7fc ffdf 	bl	80024e8 <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d108      	bne.n	8005558 <HAL_UART_Transmit+0x68>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e003      	b.n	8005560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005560:	e030      	b.n	80055c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	2180      	movs	r1, #128	; 0x80
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fc4b 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e03c      	b.n	80055fc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005594:	b292      	uxth	r2, r2
 8005596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	3302      	adds	r3, #2
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e008      	b.n	80055b2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781a      	ldrb	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	b292      	uxth	r2, r2
 80055aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1c8      	bne.n	8005562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fc14 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e005      	b.n	80055fc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e000      	b.n	80055fc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055fa:	2302      	movs	r3, #2
  }
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005608:	b08a      	sub	sp, #40	; 0x28
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	431a      	orrs	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	4313      	orrs	r3, r2
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4ba4      	ldr	r3, [pc, #656]	; (80058c4 <UART_SetConfig+0x2c0>)
 8005634:	4013      	ands	r3, r2
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800563c:	430b      	orrs	r3, r1
 800563e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a99      	ldr	r2, [pc, #612]	; (80058c8 <UART_SetConfig+0x2c4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	4313      	orrs	r3, r2
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	430a      	orrs	r2, r1
 8005682:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a90      	ldr	r2, [pc, #576]	; (80058cc <UART_SetConfig+0x2c8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d126      	bne.n	80056dc <UART_SetConfig+0xd8>
 800568e:	4b90      	ldr	r3, [pc, #576]	; (80058d0 <UART_SetConfig+0x2cc>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b03      	cmp	r3, #3
 800569a:	d81b      	bhi.n	80056d4 <UART_SetConfig+0xd0>
 800569c:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0xa0>)
 800569e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a2:	bf00      	nop
 80056a4:	080056b5 	.word	0x080056b5
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056bd 	.word	0x080056bd
 80056b0:	080056cd 	.word	0x080056cd
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e116      	b.n	80058ea <UART_SetConfig+0x2e6>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e112      	b.n	80058ea <UART_SetConfig+0x2e6>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e10e      	b.n	80058ea <UART_SetConfig+0x2e6>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e10a      	b.n	80058ea <UART_SetConfig+0x2e6>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e106      	b.n	80058ea <UART_SetConfig+0x2e6>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7c      	ldr	r2, [pc, #496]	; (80058d4 <UART_SetConfig+0x2d0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d138      	bne.n	8005758 <UART_SetConfig+0x154>
 80056e6:	4b7a      	ldr	r3, [pc, #488]	; (80058d0 <UART_SetConfig+0x2cc>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f003 030c 	and.w	r3, r3, #12
 80056f0:	2b0c      	cmp	r3, #12
 80056f2:	d82d      	bhi.n	8005750 <UART_SetConfig+0x14c>
 80056f4:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0xf8>)
 80056f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fa:	bf00      	nop
 80056fc:	08005731 	.word	0x08005731
 8005700:	08005751 	.word	0x08005751
 8005704:	08005751 	.word	0x08005751
 8005708:	08005751 	.word	0x08005751
 800570c:	08005741 	.word	0x08005741
 8005710:	08005751 	.word	0x08005751
 8005714:	08005751 	.word	0x08005751
 8005718:	08005751 	.word	0x08005751
 800571c:	08005739 	.word	0x08005739
 8005720:	08005751 	.word	0x08005751
 8005724:	08005751 	.word	0x08005751
 8005728:	08005751 	.word	0x08005751
 800572c:	08005749 	.word	0x08005749
 8005730:	2300      	movs	r3, #0
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e0d8      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005738:	2302      	movs	r3, #2
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e0d4      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e0d0      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574e:	e0cc      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005756:	e0c8      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5e      	ldr	r2, [pc, #376]	; (80058d8 <UART_SetConfig+0x2d4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d125      	bne.n	80057ae <UART_SetConfig+0x1aa>
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <UART_SetConfig+0x2cc>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800576c:	2b30      	cmp	r3, #48	; 0x30
 800576e:	d016      	beq.n	800579e <UART_SetConfig+0x19a>
 8005770:	2b30      	cmp	r3, #48	; 0x30
 8005772:	d818      	bhi.n	80057a6 <UART_SetConfig+0x1a2>
 8005774:	2b20      	cmp	r3, #32
 8005776:	d00a      	beq.n	800578e <UART_SetConfig+0x18a>
 8005778:	2b20      	cmp	r3, #32
 800577a:	d814      	bhi.n	80057a6 <UART_SetConfig+0x1a2>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <UART_SetConfig+0x182>
 8005780:	2b10      	cmp	r3, #16
 8005782:	d008      	beq.n	8005796 <UART_SetConfig+0x192>
 8005784:	e00f      	b.n	80057a6 <UART_SetConfig+0x1a2>
 8005786:	2300      	movs	r3, #0
 8005788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578c:	e0ad      	b.n	80058ea <UART_SetConfig+0x2e6>
 800578e:	2302      	movs	r3, #2
 8005790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005794:	e0a9      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005796:	2304      	movs	r3, #4
 8005798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579c:	e0a5      	b.n	80058ea <UART_SetConfig+0x2e6>
 800579e:	2308      	movs	r3, #8
 80057a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a4:	e0a1      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057a6:	2310      	movs	r3, #16
 80057a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ac:	e09d      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <UART_SetConfig+0x2d8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d125      	bne.n	8005804 <UART_SetConfig+0x200>
 80057b8:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <UART_SetConfig+0x2cc>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057c2:	2bc0      	cmp	r3, #192	; 0xc0
 80057c4:	d016      	beq.n	80057f4 <UART_SetConfig+0x1f0>
 80057c6:	2bc0      	cmp	r3, #192	; 0xc0
 80057c8:	d818      	bhi.n	80057fc <UART_SetConfig+0x1f8>
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d00a      	beq.n	80057e4 <UART_SetConfig+0x1e0>
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d814      	bhi.n	80057fc <UART_SetConfig+0x1f8>
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <UART_SetConfig+0x1d8>
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d008      	beq.n	80057ec <UART_SetConfig+0x1e8>
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x1f8>
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e082      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e07e      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e07a      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e076      	b.n	80058ea <UART_SetConfig+0x2e6>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005802:	e072      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a35      	ldr	r2, [pc, #212]	; (80058e0 <UART_SetConfig+0x2dc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d12a      	bne.n	8005864 <UART_SetConfig+0x260>
 800580e:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <UART_SetConfig+0x2cc>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800581c:	d01a      	beq.n	8005854 <UART_SetConfig+0x250>
 800581e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005822:	d81b      	bhi.n	800585c <UART_SetConfig+0x258>
 8005824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005828:	d00c      	beq.n	8005844 <UART_SetConfig+0x240>
 800582a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582e:	d815      	bhi.n	800585c <UART_SetConfig+0x258>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <UART_SetConfig+0x238>
 8005834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005838:	d008      	beq.n	800584c <UART_SetConfig+0x248>
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x258>
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005842:	e052      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800584a:	e04e      	b.n	80058ea <UART_SetConfig+0x2e6>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005852:	e04a      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585a:	e046      	b.n	80058ea <UART_SetConfig+0x2e6>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005862:	e042      	b.n	80058ea <UART_SetConfig+0x2e6>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <UART_SetConfig+0x2c4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d13a      	bne.n	80058e4 <UART_SetConfig+0x2e0>
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <UART_SetConfig+0x2cc>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800587c:	d01a      	beq.n	80058b4 <UART_SetConfig+0x2b0>
 800587e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005882:	d81b      	bhi.n	80058bc <UART_SetConfig+0x2b8>
 8005884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005888:	d00c      	beq.n	80058a4 <UART_SetConfig+0x2a0>
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d815      	bhi.n	80058bc <UART_SetConfig+0x2b8>
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <UART_SetConfig+0x298>
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005898:	d008      	beq.n	80058ac <UART_SetConfig+0x2a8>
 800589a:	e00f      	b.n	80058bc <UART_SetConfig+0x2b8>
 800589c:	2300      	movs	r3, #0
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058a2:	e022      	b.n	80058ea <UART_SetConfig+0x2e6>
 80058a4:	2302      	movs	r3, #2
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058aa:	e01e      	b.n	80058ea <UART_SetConfig+0x2e6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b2:	e01a      	b.n	80058ea <UART_SetConfig+0x2e6>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ba:	e016      	b.n	80058ea <UART_SetConfig+0x2e6>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c2:	e012      	b.n	80058ea <UART_SetConfig+0x2e6>
 80058c4:	efff69f3 	.word	0xefff69f3
 80058c8:	40008000 	.word	0x40008000
 80058cc:	40013800 	.word	0x40013800
 80058d0:	40021000 	.word	0x40021000
 80058d4:	40004400 	.word	0x40004400
 80058d8:	40004800 	.word	0x40004800
 80058dc:	40004c00 	.word	0x40004c00
 80058e0:	40005000 	.word	0x40005000
 80058e4:	2310      	movs	r3, #16
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a9f      	ldr	r2, [pc, #636]	; (8005b6c <UART_SetConfig+0x568>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d17a      	bne.n	80059ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d824      	bhi.n	8005946 <UART_SetConfig+0x342>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <UART_SetConfig+0x300>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005929 	.word	0x08005929
 8005908:	08005947 	.word	0x08005947
 800590c:	08005931 	.word	0x08005931
 8005910:	08005947 	.word	0x08005947
 8005914:	08005937 	.word	0x08005937
 8005918:	08005947 	.word	0x08005947
 800591c:	08005947 	.word	0x08005947
 8005920:	08005947 	.word	0x08005947
 8005924:	0800593f 	.word	0x0800593f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe fbda 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 800592c:	61f8      	str	r0, [r7, #28]
        break;
 800592e:	e010      	b.n	8005952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005930:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <UART_SetConfig+0x56c>)
 8005932:	61fb      	str	r3, [r7, #28]
        break;
 8005934:	e00d      	b.n	8005952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005936:	f7fe fb3b 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 800593a:	61f8      	str	r0, [r7, #28]
        break;
 800593c:	e009      	b.n	8005952 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005942:	61fb      	str	r3, [r7, #28]
        break;
 8005944:	e005      	b.n	8005952 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80fb 	beq.w	8005b50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4413      	add	r3, r2
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	429a      	cmp	r2, r3
 8005968:	d305      	bcc.n	8005976 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	429a      	cmp	r2, r3
 8005974:	d903      	bls.n	800597e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800597c:	e0e8      	b.n	8005b50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2200      	movs	r2, #0
 8005982:	461c      	mov	r4, r3
 8005984:	4615      	mov	r5, r2
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	022b      	lsls	r3, r5, #8
 8005990:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005994:	0222      	lsls	r2, r4, #8
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	6849      	ldr	r1, [r1, #4]
 800599a:	0849      	lsrs	r1, r1, #1
 800599c:	2000      	movs	r0, #0
 800599e:	4688      	mov	r8, r1
 80059a0:	4681      	mov	r9, r0
 80059a2:	eb12 0a08 	adds.w	sl, r2, r8
 80059a6:	eb43 0b09 	adc.w	fp, r3, r9
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b8:	4650      	mov	r0, sl
 80059ba:	4659      	mov	r1, fp
 80059bc:	f7fb f8fe 	bl	8000bbc <__aeabi_uldivmod>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4613      	mov	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ce:	d308      	bcc.n	80059e2 <UART_SetConfig+0x3de>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d6:	d204      	bcs.n	80059e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	60da      	str	r2, [r3, #12]
 80059e0:	e0b6      	b.n	8005b50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059e8:	e0b2      	b.n	8005b50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059f2:	d15e      	bne.n	8005ab2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d828      	bhi.n	8005a4e <UART_SetConfig+0x44a>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0x400>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a3f 	.word	0x08005a3f
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a28:	f7fe fb5a 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005a2c:	61f8      	str	r0, [r7, #28]
        break;
 8005a2e:	e014      	b.n	8005a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7fe fb6c 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005a34:	61f8      	str	r0, [r7, #28]
        break;
 8005a36:	e010      	b.n	8005a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <UART_SetConfig+0x56c>)
 8005a3a:	61fb      	str	r3, [r7, #28]
        break;
 8005a3c:	e00d      	b.n	8005a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fe fab7 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005a42:	61f8      	str	r0, [r7, #28]
        break;
 8005a44:	e009      	b.n	8005a5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	61fb      	str	r3, [r7, #28]
        break;
 8005a4c:	e005      	b.n	8005a5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d077      	beq.n	8005b50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	005a      	lsls	r2, r3, #1
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	085b      	lsrs	r3, r3, #1
 8005a6a:	441a      	add	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b0f      	cmp	r3, #15
 8005a7a:	d916      	bls.n	8005aaa <UART_SetConfig+0x4a6>
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a82:	d212      	bcs.n	8005aaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f023 030f 	bic.w	r3, r3, #15
 8005a8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	8afb      	ldrh	r3, [r7, #22]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	8afa      	ldrh	r2, [r7, #22]
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	e052      	b.n	8005b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ab0:	e04e      	b.n	8005b50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d827      	bhi.n	8005b0a <UART_SetConfig+0x506>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <UART_SetConfig+0x4bc>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005b0b 	.word	0x08005b0b
 8005ad0:	08005afb 	.word	0x08005afb
 8005ad4:	08005b0b 	.word	0x08005b0b
 8005ad8:	08005b0b 	.word	0x08005b0b
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b03 	.word	0x08005b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae4:	f7fe fafc 	bl	80040e0 <HAL_RCC_GetPCLK1Freq>
 8005ae8:	61f8      	str	r0, [r7, #28]
        break;
 8005aea:	e014      	b.n	8005b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aec:	f7fe fb0e 	bl	800410c <HAL_RCC_GetPCLK2Freq>
 8005af0:	61f8      	str	r0, [r7, #28]
        break;
 8005af2:	e010      	b.n	8005b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af4:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <UART_SetConfig+0x56c>)
 8005af6:	61fb      	str	r3, [r7, #28]
        break;
 8005af8:	e00d      	b.n	8005b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afa:	f7fe fa59 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8005afe:	61f8      	str	r0, [r7, #28]
        break;
 8005b00:	e009      	b.n	8005b16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b06:	61fb      	str	r3, [r7, #28]
        break;
 8005b08:	e005      	b.n	8005b16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b14:	bf00      	nop
    }

    if (pclk != 0U)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085a      	lsrs	r2, r3, #1
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b0f      	cmp	r3, #15
 8005b34:	d909      	bls.n	8005b4a <UART_SetConfig+0x546>
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3c:	d205      	bcs.n	8005b4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60da      	str	r2, [r3, #12]
 8005b48:	e002      	b.n	8005b50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3728      	adds	r7, #40	; 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40008000 	.word	0x40008000
 8005b70:	00f42400 	.word	0x00f42400

08005b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00a      	beq.n	8005c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01a      	beq.n	8005c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d10a      	bne.n	8005c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
  }
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b098      	sub	sp, #96	; 0x60
 8005cbc:	af02      	add	r7, sp, #8
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cc8:	f7fc fc0e 	bl	80024e8 <HAL_GetTick>
 8005ccc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d12e      	bne.n	8005d3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f88c 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d021      	beq.n	8005d3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d14:	647b      	str	r3, [r7, #68]	; 0x44
 8005d16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e6      	bne.n	8005cf6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e062      	b.n	8005e00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d149      	bne.n	8005ddc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	2200      	movs	r2, #0
 8005d52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f856 	bl	8005e08 <UART_WaitOnFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d03c      	beq.n	8005ddc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
 8005d82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e6      	bne.n	8005d62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0301 	bic.w	r3, r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3308      	adds	r3, #8
 8005db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005db4:	61fa      	str	r2, [r7, #28]
 8005db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	69b9      	ldr	r1, [r7, #24]
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e011      	b.n	8005e00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3758      	adds	r7, #88	; 0x58
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e18:	e049      	b.n	8005eae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d045      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fc fb61 	bl	80024e8 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e048      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d031      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d110      	bne.n	8005e7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f838 	bl	8005ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2208      	movs	r2, #8
 8005e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e029      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e88:	d111      	bne.n	8005eae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f81e 	bl	8005ed6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e00f      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d0a6      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b095      	sub	sp, #84	; 0x54
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	643b      	str	r3, [r7, #64]	; 0x40
 8005efe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e6      	bne.n	8005ede <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d118      	bne.n	8005f7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 0310 	bic.w	r3, r3, #16
 8005f60:	647b      	str	r3, [r7, #68]	; 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	613b      	str	r3, [r7, #16]
   return(result);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e6      	bne.n	8005f4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f92:	bf00      	nop
 8005f94:	3754      	adds	r7, #84	; 0x54
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <__NVIC_SetPriority>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	db0a      	blt.n	8005fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	490c      	ldr	r1, [pc, #48]	; (8005fec <__NVIC_SetPriority+0x4c>)
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	0112      	lsls	r2, r2, #4
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	440b      	add	r3, r1
 8005fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005fc8:	e00a      	b.n	8005fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	4908      	ldr	r1, [pc, #32]	; (8005ff0 <__NVIC_SetPriority+0x50>)
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	3b04      	subs	r3, #4
 8005fd8:	0112      	lsls	r2, r2, #4
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	440b      	add	r3, r1
 8005fde:	761a      	strb	r2, [r3, #24]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	e000e100 	.word	0xe000e100
 8005ff0:	e000ed00 	.word	0xe000ed00

08005ff4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	f06f 0004 	mvn.w	r0, #4
 8005ffe:	f7ff ffcf 	bl	8005fa0 <__NVIC_SetPriority>
#endif
}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800600e:	f3ef 8305 	mrs	r3, IPSR
 8006012:	603b      	str	r3, [r7, #0]
  return(result);
 8006014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800601a:	f06f 0305 	mvn.w	r3, #5
 800601e:	607b      	str	r3, [r7, #4]
 8006020:	e00c      	b.n	800603c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <osKernelInitialize+0x44>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <osKernelInitialize+0x44>)
 800602c:	2201      	movs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006030:	2300      	movs	r3, #0
 8006032:	607b      	str	r3, [r7, #4]
 8006034:	e002      	b.n	800603c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800603c:	687b      	ldr	r3, [r7, #4]
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000e6c 	.word	0x20000e6c

08006050 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006056:	f3ef 8305 	mrs	r3, IPSR
 800605a:	603b      	str	r3, [r7, #0]
  return(result);
 800605c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006062:	f06f 0305 	mvn.w	r3, #5
 8006066:	607b      	str	r3, [r7, #4]
 8006068:	e010      	b.n	800608c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <osKernelStart+0x48>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d109      	bne.n	8006086 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006072:	f7ff ffbf 	bl	8005ff4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <osKernelStart+0x48>)
 8006078:	2202      	movs	r2, #2
 800607a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800607c:	f001 fd34 	bl	8007ae8 <vTaskStartScheduler>
      stat = osOK;
 8006080:	2300      	movs	r3, #0
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	e002      	b.n	800608c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006086:	f04f 33ff 	mov.w	r3, #4294967295
 800608a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800608c:	687b      	ldr	r3, [r7, #4]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000e6c 	.word	0x20000e6c

0800609c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b08e      	sub	sp, #56	; 0x38
 80060a0:	af04      	add	r7, sp, #16
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ac:	f3ef 8305 	mrs	r3, IPSR
 80060b0:	617b      	str	r3, [r7, #20]
  return(result);
 80060b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d17e      	bne.n	80061b6 <osThreadNew+0x11a>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d07b      	beq.n	80061b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80060be:	2380      	movs	r3, #128	; 0x80
 80060c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80060c2:	2318      	movs	r3, #24
 80060c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d045      	beq.n	8006162 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <osThreadNew+0x48>
        name = attr->name;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <osThreadNew+0x6e>
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b38      	cmp	r3, #56	; 0x38
 80060fc:	d805      	bhi.n	800610a <osThreadNew+0x6e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <osThreadNew+0x72>
        return (NULL);
 800610a:	2300      	movs	r3, #0
 800610c:	e054      	b.n	80061b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	089b      	lsrs	r3, r3, #2
 800611c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00e      	beq.n	8006144 <osThreadNew+0xa8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	2b5b      	cmp	r3, #91	; 0x5b
 800612c:	d90a      	bls.n	8006144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <osThreadNew+0xa8>
        mem = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	e010      	b.n	8006166 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10c      	bne.n	8006166 <osThreadNew+0xca>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d108      	bne.n	8006166 <osThreadNew+0xca>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <osThreadNew+0xca>
          mem = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	e001      	b.n	8006166 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d110      	bne.n	800618e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006174:	9202      	str	r2, [sp, #8]
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	6a3a      	ldr	r2, [r7, #32]
 8006180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f001 fada 	bl	800773c <xTaskCreateStatic>
 8006188:	4603      	mov	r3, r0
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	e013      	b.n	80061b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d110      	bne.n	80061b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	b29a      	uxth	r2, r3
 8006198:	f107 0310 	add.w	r3, r7, #16
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 fb25 	bl	80077f6 <xTaskCreate>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d001      	beq.n	80061b6 <osThreadNew+0x11a>
            hTask = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061b6:	693b      	ldr	r3, [r7, #16]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c8:	f3ef 8305 	mrs	r3, IPSR
 80061cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80061ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <osDelay+0x1c>
    stat = osErrorISR;
 80061d4:	f06f 0305 	mvn.w	r3, #5
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e007      	b.n	80061ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fc4a 	bl	8007a80 <vTaskDelay>
    }
  }

  return (stat);
 80061ec:	68fb      	ldr	r3, [r7, #12]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b088      	sub	sp, #32
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006202:	f3ef 8305 	mrs	r3, IPSR
 8006206:	60bb      	str	r3, [r7, #8]
  return(result);
 8006208:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800620a:	2b00      	cmp	r3, #0
 800620c:	d174      	bne.n	80062f8 <osMutexNew+0x102>
    if (attr != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <osMutexNew+0x26>
      type = attr->attr_bits;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e001      	b.n	8006220 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <osMutexNew+0x3a>
      rmtx = 1U;
 800622a:	2301      	movs	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e001      	b.n	8006234 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d15c      	bne.n	80062f8 <osMutexNew+0x102>
      mem = -1;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d015      	beq.n	8006276 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d006      	beq.n	8006260 <osMutexNew+0x6a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b4f      	cmp	r3, #79	; 0x4f
 8006258:	d902      	bls.n	8006260 <osMutexNew+0x6a>
          mem = 1;
 800625a:	2301      	movs	r3, #1
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	e00c      	b.n	800627a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d108      	bne.n	800627a <osMutexNew+0x84>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <osMutexNew+0x84>
            mem = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	613b      	str	r3, [r7, #16]
 8006274:	e001      	b.n	800627a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d112      	bne.n	80062a6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d007      	beq.n	8006296 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4619      	mov	r1, r3
 800628c:	2004      	movs	r0, #4
 800628e:	f000 fc08 	bl	8006aa2 <xQueueCreateMutexStatic>
 8006292:	61f8      	str	r0, [r7, #28]
 8006294:	e016      	b.n	80062c4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4619      	mov	r1, r3
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fc00 	bl	8006aa2 <xQueueCreateMutexStatic>
 80062a2:	61f8      	str	r0, [r7, #28]
 80062a4:	e00e      	b.n	80062c4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10b      	bne.n	80062c4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80062b2:	2004      	movs	r0, #4
 80062b4:	f000 fbdd 	bl	8006a72 <xQueueCreateMutex>
 80062b8:	61f8      	str	r0, [r7, #28]
 80062ba:	e003      	b.n	80062c4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80062bc:	2001      	movs	r0, #1
 80062be:	f000 fbd8 	bl	8006a72 <xQueueCreateMutex>
 80062c2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <osMutexNew+0xee>
        if (attr != NULL) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <osMutexNew+0xe2>
          name = attr->name;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e001      	b.n	80062dc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80062dc:	68f9      	ldr	r1, [r7, #12]
 80062de:	69f8      	ldr	r0, [r7, #28]
 80062e0:	f001 f9ce 	bl	8007680 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <osMutexNew+0x102>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80062f8:	69fb      	ldr	r3, [r7, #28]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006320:	f3ef 8305 	mrs	r3, IPSR
 8006324:	60bb      	str	r3, [r7, #8]
  return(result);
 8006326:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800632c:	f06f 0305 	mvn.w	r3, #5
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e02c      	b.n	800638e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d103      	bne.n	8006342 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800633a:	f06f 0303 	mvn.w	r3, #3
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e025      	b.n	800638e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d011      	beq.n	800636c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f000 fbf8 	bl	8006b40 <xQueueTakeMutexRecursive>
 8006350:	4603      	mov	r3, r0
 8006352:	2b01      	cmp	r3, #1
 8006354:	d01b      	beq.n	800638e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800635c:	f06f 0301 	mvn.w	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e014      	b.n	800638e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006364:	f06f 0302 	mvn.w	r3, #2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	e010      	b.n	800638e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6938      	ldr	r0, [r7, #16]
 8006370:	f000 fe96 	bl	80070a0 <xQueueSemaphoreTake>
 8006374:	4603      	mov	r3, r0
 8006376:	2b01      	cmp	r3, #1
 8006378:	d009      	beq.n	800638e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006380:	f06f 0301 	mvn.w	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	e002      	b.n	800638e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006388:	f06f 0302 	mvn.w	r3, #2
 800638c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800638e:	697b      	ldr	r3, [r7, #20]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b4:	f3ef 8305 	mrs	r3, IPSR
 80063b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d003      	beq.n	80063c8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80063c0:	f06f 0305 	mvn.w	r3, #5
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e01f      	b.n	8006408 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80063ce:	f06f 0303 	mvn.w	r3, #3
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	e018      	b.n	8006408 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80063dc:	6938      	ldr	r0, [r7, #16]
 80063de:	f000 fb7b 	bl	8006ad8 <xQueueGiveMutexRecursive>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d00f      	beq.n	8006408 <osMutexRelease+0x70>
        stat = osErrorResource;
 80063e8:	f06f 0302 	mvn.w	r3, #2
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e00b      	b.n	8006408 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80063f0:	2300      	movs	r3, #0
 80063f2:	2200      	movs	r2, #0
 80063f4:	2100      	movs	r1, #0
 80063f6:	6938      	ldr	r0, [r7, #16]
 80063f8:	f000 fbd8 	bl	8006bac <xQueueGenericSend>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d002      	beq.n	8006408 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006402:	f06f 0302 	mvn.w	r3, #2
 8006406:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006408:	697b      	ldr	r3, [r7, #20]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006412:	b580      	push	{r7, lr}
 8006414:	b08a      	sub	sp, #40	; 0x28
 8006416:	af02      	add	r7, sp, #8
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	613b      	str	r3, [r7, #16]
  return(result);
 8006428:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d15f      	bne.n	80064ee <osMessageQueueNew+0xdc>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d05c      	beq.n	80064ee <osMessageQueueNew+0xdc>
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d059      	beq.n	80064ee <osMessageQueueNew+0xdc>
    mem = -1;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d029      	beq.n	800649a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d012      	beq.n	8006474 <osMessageQueueNew+0x62>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	2b4f      	cmp	r3, #79	; 0x4f
 8006454:	d90e      	bls.n	8006474 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695a      	ldr	r2, [r3, #20]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	429a      	cmp	r2, r3
 800646c:	d302      	bcc.n	8006474 <osMessageQueueNew+0x62>
        mem = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e014      	b.n	800649e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d110      	bne.n	800649e <osMessageQueueNew+0x8c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10c      	bne.n	800649e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006488:	2b00      	cmp	r3, #0
 800648a:	d108      	bne.n	800649e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <osMessageQueueNew+0x8c>
          mem = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e001      	b.n	800649e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10b      	bne.n	80064bc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2100      	movs	r1, #0
 80064ae:	9100      	str	r1, [sp, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f9ee 	bl	8006894 <xQueueGenericCreateStatic>
 80064b8:	61f8      	str	r0, [r7, #28]
 80064ba:	e008      	b.n	80064ce <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80064c2:	2200      	movs	r2, #0
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fa5c 	bl	8006984 <xQueueGenericCreate>
 80064cc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00c      	beq.n	80064ee <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e001      	b.n	80064e6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80064e6:	6979      	ldr	r1, [r7, #20]
 80064e8:	69f8      	ldr	r0, [r7, #28]
 80064ea:	f001 f8c9 	bl	8007680 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80064ee:	69fb      	ldr	r3, [r7, #28]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	617b      	str	r3, [r7, #20]
  return(result);
 8006514:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006516:	2b00      	cmp	r3, #0
 8006518:	d028      	beq.n	800656c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <osMessageQueueGet+0x34>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <osMessageQueueGet+0x34>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800652c:	f06f 0303 	mvn.w	r3, #3
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	e037      	b.n	80065a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006534:	2300      	movs	r3, #0
 8006536:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006538:	f107 0310 	add.w	r3, r7, #16
 800653c:	461a      	mov	r2, r3
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	69b8      	ldr	r0, [r7, #24]
 8006542:	f000 feb9 	bl	80072b8 <xQueueReceiveFromISR>
 8006546:	4603      	mov	r3, r0
 8006548:	2b01      	cmp	r3, #1
 800654a:	d003      	beq.n	8006554 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800654c:	f06f 0302 	mvn.w	r3, #2
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	e027      	b.n	80065a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d024      	beq.n	80065a4 <osMessageQueueGet+0xac>
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <osMessageQueueGet+0xb8>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	e01b      	b.n	80065a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <osMessageQueueGet+0x80>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d103      	bne.n	8006580 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006578:	f06f 0303 	mvn.w	r3, #3
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e011      	b.n	80065a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	69b8      	ldr	r0, [r7, #24]
 8006586:	f000 fcab 	bl	8006ee0 <xQueueReceive>
 800658a:	4603      	mov	r3, r0
 800658c:	2b01      	cmp	r3, #1
 800658e:	d009      	beq.n	80065a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006596:	f06f 0301 	mvn.w	r3, #1
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	e002      	b.n	80065a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800659e:	f06f 0302 	mvn.w	r3, #2
 80065a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80065a4:	69fb      	ldr	r3, [r7, #28]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <osMessageQueueGetCount+0x18>
    count = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e00e      	b.n	80065ea <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065cc:	f3ef 8305 	mrs	r3, IPSR
 80065d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d004      	beq.n	80065e2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f000 ff0b 	bl	80073f4 <uxQueueMessagesWaitingFromISR>
 80065de:	6178      	str	r0, [r7, #20]
 80065e0:	e003      	b.n	80065ea <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80065e2:	6938      	ldr	r0, [r7, #16]
 80065e4:	f000 fee8 	bl	80073b8 <uxQueueMessagesWaiting>
 80065e8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80065ea:	697b      	ldr	r3, [r7, #20]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a07      	ldr	r2, [pc, #28]	; (8006620 <vApplicationGetIdleTaskMemory+0x2c>)
 8006604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a06      	ldr	r2, [pc, #24]	; (8006624 <vApplicationGetIdleTaskMemory+0x30>)
 800660a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2280      	movs	r2, #128	; 0x80
 8006610:	601a      	str	r2, [r3, #0]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000e70 	.word	0x20000e70
 8006624:	20000ecc 	.word	0x20000ecc

08006628 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <vApplicationGetTimerTaskMemory+0x2c>)
 8006638:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4a06      	ldr	r2, [pc, #24]	; (8006658 <vApplicationGetTimerTaskMemory+0x30>)
 800663e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006646:	601a      	str	r2, [r3, #0]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	200010cc 	.word	0x200010cc
 8006658:	20001128 	.word	0x20001128

0800665c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f103 0208 	add.w	r2, r3, #8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f103 0208 	add.w	r2, r3, #8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f103 0208 	add.w	r2, r3, #8
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d103      	bne.n	800671e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e00c      	b.n	8006738 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3308      	adds	r3, #8
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e002      	b.n	800672c <vListInsert+0x2e>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d2f6      	bcs.n	8006726 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	601a      	str	r2, [r3, #0]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6892      	ldr	r2, [r2, #8]
 8006786:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6852      	ldr	r2, [r2, #4]
 8006790:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	d103      	bne.n	80067a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	1e5a      	subs	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067ee:	f002 fc29 	bl	8009044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067fe:	fb01 f303 	mul.w	r3, r1, r3
 8006802:	441a      	add	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	3b01      	subs	r3, #1
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006824:	fb01 f303 	mul.w	r3, r1, r3
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	22ff      	movs	r2, #255	; 0xff
 800683a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d114      	bne.n	800686e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3310      	adds	r3, #16
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fbd3 	bl	8007ffc <xTaskRemoveFromEventList>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d012      	beq.n	8006882 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <xQueueGenericReset+0xcc>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	e009      	b.n	8006882 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3310      	adds	r3, #16
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fef2 	bl	800665c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff feed 	bl	800665c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006882:	f002 fc0f 	bl	80090a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006886:	2301      	movs	r3, #1
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	e000ed04 	.word	0xe000ed04

08006894 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af02      	add	r7, sp, #8
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068ba:	bf00      	nop
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <xQueueGenericCreateStatic+0x52>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <xQueueGenericCreateStatic+0x56>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueGenericCreateStatic+0x58>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	623b      	str	r3, [r7, #32]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <xQueueGenericCreateStatic+0x7e>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <xQueueGenericCreateStatic+0x82>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <xQueueGenericCreateStatic+0x84>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61fb      	str	r3, [r7, #28]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006932:	2350      	movs	r3, #80	; 0x50
 8006934:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b50      	cmp	r3, #80	; 0x50
 800693a:	d00a      	beq.n	8006952 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	61bb      	str	r3, [r7, #24]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006952:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00d      	beq.n	800697a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006966:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f83f 	bl	80069f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3730      	adds	r7, #48	; 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08a      	sub	sp, #40	; 0x28
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xQueueGenericCreate+0x2a>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	613b      	str	r3, [r7, #16]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	fb02 f303 	mul.w	r3, r2, r3
 80069b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	3350      	adds	r3, #80	; 0x50
 80069bc:	4618      	mov	r0, r3
 80069be:	f002 fc63 	bl	8009288 <pvPortMalloc>
 80069c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d011      	beq.n	80069ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	3350      	adds	r3, #80	; 0x50
 80069d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069dc:	79fa      	ldrb	r2, [r7, #7]
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	4613      	mov	r3, r2
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f805 	bl	80069f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069ee:	69bb      	ldr	r3, [r7, #24]
	}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d103      	bne.n	8006a14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	e002      	b.n	8006a1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a26:	2101      	movs	r1, #1
 8006a28:	69b8      	ldr	r0, [r7, #24]
 8006a2a:	f7ff fecb 	bl	80067c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	78fa      	ldrb	r2, [r7, #3]
 8006a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00e      	beq.n	8006a6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8a1 	bl	8006bac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	4603      	mov	r3, r0
 8006a7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	2300      	movs	r3, #0
 8006a82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6939      	ldr	r1, [r7, #16]
 8006a8a:	6978      	ldr	r0, [r7, #20]
 8006a8c:	f7ff ff7a 	bl	8006984 <xQueueGenericCreate>
 8006a90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f7ff ffd3 	bl	8006a3e <prvInitialiseMutex>

		return xNewQueue;
 8006a98:	68fb      	ldr	r3, [r7, #12]
	}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b088      	sub	sp, #32
 8006aa6:	af02      	add	r7, sp, #8
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	6039      	str	r1, [r7, #0]
 8006aac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2200      	movs	r2, #0
 8006abe:	6939      	ldr	r1, [r7, #16]
 8006ac0:	6978      	ldr	r0, [r7, #20]
 8006ac2:	f7ff fee7 	bl	8006894 <xQueueGenericCreateStatic>
 8006ac6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ffb8 	bl	8006a3e <prvInitialiseMutex>

		return xNewQueue;
 8006ace:	68fb      	ldr	r3, [r7, #12]
	}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006ad8:	b590      	push	{r4, r7, lr}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10a      	bne.n	8006b00 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	60fb      	str	r3, [r7, #12]
}
 8006afc:	bf00      	nop
 8006afe:	e7fe      	b.n	8006afe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	689c      	ldr	r4, [r3, #8]
 8006b04:	f001 fc38 	bl	8008378 <xTaskGetCurrentTaskHandle>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d111      	bne.n	8006b32 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	1e5a      	subs	r2, r3, #1
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006b20:	2300      	movs	r3, #0
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	6938      	ldr	r0, [r7, #16]
 8006b28:	f000 f840 	bl	8006bac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e001      	b.n	8006b36 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006b36:	697b      	ldr	r3, [r7, #20]
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006b40:	b590      	push	{r4, r7, lr}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	689c      	ldr	r4, [r3, #8]
 8006b6e:	f001 fc03 	bl	8008378 <xTaskGetCurrentTaskHandle>
 8006b72:	4603      	mov	r3, r0
 8006b74:	429c      	cmp	r4, r3
 8006b76:	d107      	bne.n	8006b88 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006b82:	2301      	movs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e00c      	b.n	8006ba2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6938      	ldr	r0, [r7, #16]
 8006b8c:	f000 fa88 	bl	80070a0 <xQueueSemaphoreTake>
 8006b90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006ba2:	697b      	ldr	r3, [r7, #20]
	}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd90      	pop	{r4, r7, pc}

08006bac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08e      	sub	sp, #56	; 0x38
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericSend+0x32>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <xQueueGenericSend+0x40>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <xQueueGenericSend+0x44>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <xQueueGenericSend+0x46>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10a      	bne.n	8006c0c <xQueueGenericSend+0x60>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <xQueueGenericSend+0x6e>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <xQueueGenericSend+0x72>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <xQueueGenericSend+0x74>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <xQueueGenericSend+0x8e>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	623b      	str	r3, [r7, #32]
}
 8006c36:	bf00      	nop
 8006c38:	e7fe      	b.n	8006c38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c3a:	f001 fbad 	bl	8008398 <xTaskGetSchedulerState>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueGenericSend+0x9e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericSend+0xa2>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericSend+0xa4>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericSend+0xbe>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61fb      	str	r3, [r7, #28]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c6a:	f002 f9eb 	bl	8009044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <xQueueGenericSend+0xd4>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d129      	bne.n	8006cd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c86:	f000 fbeb 	bl	8007460 <prvCopyDataToQueue>
 8006c8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	3324      	adds	r3, #36	; 0x24
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f9af 	bl	8007ffc <xTaskRemoveFromEventList>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d013      	beq.n	8006ccc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	e00a      	b.n	8006ccc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006cbc:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ccc:	f002 f9ea 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e063      	b.n	8006d9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cda:	f002 f9e3 	bl	80090a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e05c      	b.n	8006d9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d106      	bne.n	8006cf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f9e9 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cf6:	f002 f9d5 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cfa:	f000 ff5b 	bl	8007bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cfe:	f002 f9a1 	bl	8009044 <vPortEnterCritical>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d103      	bne.n	8006d18 <xQueueGenericSend+0x16c>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d1e:	b25b      	sxtb	r3, r3
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d103      	bne.n	8006d2e <xQueueGenericSend+0x182>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d2e:	f002 f9b9 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d32:	1d3a      	adds	r2, r7, #4
 8006d34:	f107 0314 	add.w	r3, r7, #20
 8006d38:	4611      	mov	r1, r2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 f9d8 	bl	80080f0 <xTaskCheckForTimeOut>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d124      	bne.n	8006d90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d48:	f000 fc82 	bl	8007650 <prvIsQueueFull>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d018      	beq.n	8006d84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	3310      	adds	r3, #16
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 f8fe 	bl	8007f5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d62:	f000 fc0d 	bl	8007580 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d66:	f000 ff33 	bl	8007bd0 <xTaskResumeAll>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f47f af7c 	bne.w	8006c6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <xQueueGenericSend+0x1f8>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	e772      	b.n	8006c6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d86:	f000 fbfb 	bl	8007580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d8a:	f000 ff21 	bl	8007bd0 <xTaskResumeAll>
 8006d8e:	e76c      	b.n	8006c6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d92:	f000 fbf5 	bl	8007580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d96:	f000 ff1b 	bl	8007bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3738      	adds	r7, #56	; 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b090      	sub	sp, #64	; 0x40
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10a      	bne.n	8006dd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <xQueueGenericSendFromISR+0x3c>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <xQueueGenericSendFromISR+0x40>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <xQueueGenericSendFromISR+0x42>
 8006de8:	2300      	movs	r3, #0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d103      	bne.n	8006e12 <xQueueGenericSendFromISR+0x6a>
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <xQueueGenericSendFromISR+0x6e>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <xQueueGenericSendFromISR+0x70>
 8006e16:	2300      	movs	r3, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	623b      	str	r3, [r7, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e32:	f002 f9e9 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e36:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	61fa      	str	r2, [r7, #28]
 8006e4c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e50:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d302      	bcc.n	8006e64 <xQueueGenericSendFromISR+0xbc>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d12f      	bne.n	8006ec4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e7a:	f000 faf1 	bl	8007460 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e7e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e86:	d112      	bne.n	8006eae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d016      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	3324      	adds	r3, #36	; 0x24
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 f8b1 	bl	8007ffc <xTaskRemoveFromEventList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00b      	beq.n	8006ebe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	e007      	b.n	8006ebe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	b25a      	sxtb	r2, r3
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ec2:	e001      	b.n	8006ec8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ed2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3740      	adds	r7, #64	; 0x40
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	; 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <xQueueReceive+0x30>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	623b      	str	r3, [r7, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <xQueueReceive+0x3e>
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <xQueueReceive+0x42>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueReceive+0x44>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueReceive+0x5e>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	61fb      	str	r3, [r7, #28]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f3e:	f001 fa2b 	bl	8008398 <xTaskGetSchedulerState>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <xQueueReceive+0x6e>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <xQueueReceive+0x72>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <xQueueReceive+0x74>
 8006f52:	2300      	movs	r3, #0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10a      	bne.n	8006f6e <xQueueReceive+0x8e>
	__asm volatile
 8006f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5c:	f383 8811 	msr	BASEPRI, r3
 8006f60:	f3bf 8f6f 	isb	sy
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	61bb      	str	r3, [r7, #24]
}
 8006f6a:	bf00      	nop
 8006f6c:	e7fe      	b.n	8006f6c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f6e:	f002 f869 	bl	8009044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01f      	beq.n	8006fbe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f000 fad7 	bl	8007534 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	1e5a      	subs	r2, r3, #1
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	3310      	adds	r3, #16
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f82e 	bl	8007ffc <xTaskRemoveFromEventList>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fa6:	4b3d      	ldr	r3, [pc, #244]	; (800709c <xQueueReceive+0x1bc>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fb6:	f002 f875 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e069      	b.n	8007092 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fc4:	f002 f86e 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e062      	b.n	8007092 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fd2:	f107 0310 	add.w	r3, r7, #16
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f874 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fe0:	f002 f860 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fe4:	f000 fde6 	bl	8007bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fe8:	f002 f82c 	bl	8009044 <vPortEnterCritical>
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff2:	b25b      	sxtb	r3, r3
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d103      	bne.n	8007002 <xQueueReceive+0x122>
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <xQueueReceive+0x138>
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007018:	f002 f844 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800701c:	1d3a      	adds	r2, r7, #4
 800701e:	f107 0310 	add.w	r3, r7, #16
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f001 f863 	bl	80080f0 <xTaskCheckForTimeOut>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d123      	bne.n	8007078 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007032:	f000 faf7 	bl	8007624 <prvIsQueueEmpty>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4611      	mov	r1, r2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 ff89 	bl	8007f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800704a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704c:	f000 fa98 	bl	8007580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007050:	f000 fdbe 	bl	8007bd0 <xTaskResumeAll>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d189      	bne.n	8006f6e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <xQueueReceive+0x1bc>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	e780      	b.n	8006f6e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800706c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800706e:	f000 fa87 	bl	8007580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007072:	f000 fdad 	bl	8007bd0 <xTaskResumeAll>
 8007076:	e77a      	b.n	8006f6e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800707a:	f000 fa81 	bl	8007580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800707e:	f000 fda7 	bl	8007bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007084:	f000 face 	bl	8007624 <prvIsQueueEmpty>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	f43f af6f 	beq.w	8006f6e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007090:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	; 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	; 0x38
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	623b      	str	r3, [r7, #32]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61fb      	str	r3, [r7, #28]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070f0:	f001 f952 	bl	8008398 <xTaskGetSchedulerState>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <xQueueSemaphoreTake+0x60>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <xQueueSemaphoreTake+0x64>
 8007100:	2301      	movs	r3, #1
 8007102:	e000      	b.n	8007106 <xQueueSemaphoreTake+0x66>
 8007104:	2300      	movs	r3, #0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61bb      	str	r3, [r7, #24]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007120:	f001 ff90 	bl	8009044 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d024      	beq.n	800717a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	1e5a      	subs	r2, r3, #1
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007140:	f001 faa0 	bl	8008684 <pvTaskIncrementMutexHeldCount>
 8007144:	4602      	mov	r2, r0
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00f      	beq.n	8007172 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	3310      	adds	r3, #16
 8007156:	4618      	mov	r0, r3
 8007158:	f000 ff50 	bl	8007ffc <xTaskRemoveFromEventList>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007162:	4b54      	ldr	r3, [pc, #336]	; (80072b4 <xQueueSemaphoreTake+0x214>)
 8007164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007172:	f001 ff97 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8007176:	2301      	movs	r3, #1
 8007178:	e097      	b.n	80072aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d111      	bne.n	80071a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	617b      	str	r3, [r7, #20]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800719c:	f001 ff82 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e082      	b.n	80072aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071aa:	f107 030c 	add.w	r3, r7, #12
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 ff88 	bl	80080c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071b8:	f001 ff74 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071bc:	f000 fcfa 	bl	8007bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071c0:	f001 ff40 	bl	8009044 <vPortEnterCritical>
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d103      	bne.n	80071da <xQueueSemaphoreTake+0x13a>
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d103      	bne.n	80071f0 <xQueueSemaphoreTake+0x150>
 80071e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f0:	f001 ff58 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f4:	463a      	mov	r2, r7
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 ff77 	bl	80080f0 <xTaskCheckForTimeOut>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d132      	bne.n	800726e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800720a:	f000 fa0b 	bl	8007624 <prvIsQueueEmpty>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d026      	beq.n	8007262 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800721c:	f001 ff12 	bl	8009044 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f001 f8d5 	bl	80083d4 <xTaskPriorityInherit>
 800722a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800722c:	f001 ff3a 	bl	80090a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	3324      	adds	r3, #36	; 0x24
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	4611      	mov	r1, r2
 8007238:	4618      	mov	r0, r3
 800723a:	f000 fe8f 	bl	8007f5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800723e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007240:	f000 f99e 	bl	8007580 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007244:	f000 fcc4 	bl	8007bd0 <xTaskResumeAll>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f47f af68 	bne.w	8007120 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <xQueueSemaphoreTake+0x214>)
 8007252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	e75e      	b.n	8007120 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007264:	f000 f98c 	bl	8007580 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007268:	f000 fcb2 	bl	8007bd0 <xTaskResumeAll>
 800726c:	e758      	b.n	8007120 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800726e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007270:	f000 f986 	bl	8007580 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007274:	f000 fcac 	bl	8007bd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800727a:	f000 f9d3 	bl	8007624 <prvIsQueueEmpty>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	f43f af4d 	beq.w	8007120 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800728c:	f001 feda 	bl	8009044 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007292:	f000 f8cd 	bl	8007430 <prvGetDisinheritPriorityAfterTimeout>
 8007296:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 f96e 	bl	8008580 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80072a4:	f001 fefe 	bl	80090a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3738      	adds	r7, #56	; 0x38
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08e      	sub	sp, #56	; 0x38
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	623b      	str	r3, [r7, #32]
}
 80072e0:	bf00      	nop
 80072e2:	e7fe      	b.n	80072e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d103      	bne.n	80072f2 <xQueueReceiveFromISR+0x3a>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <xQueueReceiveFromISR+0x3e>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <xQueueReceiveFromISR+0x40>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	61fb      	str	r3, [r7, #28]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007312:	f001 ff79 	bl	8009208 <vPortValidateInterruptPriority>
	__asm volatile
 8007316:	f3ef 8211 	mrs	r2, BASEPRI
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	61ba      	str	r2, [r7, #24]
 800732c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800732e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	d02f      	beq.n	800739e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800734c:	f000 f8f2 	bl	8007534 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	1e5a      	subs	r2, r3, #1
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800735c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007360:	d112      	bne.n	8007388 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d016      	beq.n	8007398 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	3310      	adds	r3, #16
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fe44 	bl	8007ffc <xTaskRemoveFromEventList>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e007      	b.n	8007398 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800738c:	3301      	adds	r3, #1
 800738e:	b2db      	uxtb	r3, r3
 8007390:	b25a      	sxtb	r2, r3
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007398:	2301      	movs	r3, #1
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
 800739c:	e001      	b.n	80073a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800739e:	2300      	movs	r3, #0
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f383 8811 	msr	BASEPRI, r3
}
 80073ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3738      	adds	r7, #56	; 0x38
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80073dc:	f001 fe32 	bl	8009044 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80073e6:	f001 fe5d 	bl	80090a4 <vPortExitCritical>

	return uxReturn;
 80073ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60fb      	str	r3, [r7, #12]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007422:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b00      	cmp	r3, #0
 800743e:	d006      	beq.n	800744e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e001      	b.n	8007452 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007452:	68fb      	ldr	r3, [r7, #12]
	}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d14d      	bne.n	8007522 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	4618      	mov	r0, r3
 800748c:	f001 f80a 	bl	80084a4 <xTaskPriorityDisinherit>
 8007490:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	609a      	str	r2, [r3, #8]
 8007498:	e043      	b.n	8007522 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d119      	bne.n	80074d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6858      	ldr	r0, [r3, #4]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	461a      	mov	r2, r3
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	f002 fa08 	bl	80098c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	441a      	add	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d32b      	bcc.n	8007522 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
 80074d2:	e026      	b.n	8007522 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68d8      	ldr	r0, [r3, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074dc:	461a      	mov	r2, r3
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	f002 f9ee 	bl	80098c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	425b      	negs	r3, r3
 80074ee:	441a      	add	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d207      	bcs.n	8007510 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	425b      	negs	r3, r3
 800750a:	441a      	add	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d105      	bne.n	8007522 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3b01      	subs	r3, #1
 8007520:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800752a:	697b      	ldr	r3, [r7, #20]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	441a      	add	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	d303      	bcc.n	8007568 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68d9      	ldr	r1, [r3, #12]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007570:	461a      	mov	r2, r3
 8007572:	6838      	ldr	r0, [r7, #0]
 8007574:	f002 f9a4 	bl	80098c0 <memcpy>
	}
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007588:	f001 fd5c 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007592:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007594:	e011      	b.n	80075ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d012      	beq.n	80075c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3324      	adds	r3, #36	; 0x24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fd2a 	bl	8007ffc <xTaskRemoveFromEventList>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80075ae:	f000 fe01 	bl	80081b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dce9      	bgt.n	8007596 <prvUnlockQueue+0x16>
 80075c2:	e000      	b.n	80075c6 <prvUnlockQueue+0x46>
					break;
 80075c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	22ff      	movs	r2, #255	; 0xff
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80075ce:	f001 fd69 	bl	80090a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075d2:	f001 fd37 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075de:	e011      	b.n	8007604 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3310      	adds	r3, #16
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 fd05 	bl	8007ffc <xTaskRemoveFromEventList>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075f8:	f000 fddc 	bl	80081b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	3b01      	subs	r3, #1
 8007600:	b2db      	uxtb	r3, r3
 8007602:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007604:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007608:	2b00      	cmp	r3, #0
 800760a:	dce9      	bgt.n	80075e0 <prvUnlockQueue+0x60>
 800760c:	e000      	b.n	8007610 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800760e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	22ff      	movs	r2, #255	; 0xff
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007618:	f001 fd44 	bl	80090a4 <vPortExitCritical>
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800762c:	f001 fd0a 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007638:	2301      	movs	r3, #1
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e001      	b.n	8007642 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007642:	f001 fd2f 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007658:	f001 fcf4 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007664:	429a      	cmp	r2, r3
 8007666:	d102      	bne.n	800766e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e001      	b.n	8007672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007672:	f001 fd17 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e014      	b.n	80076ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007690:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <vQueueAddToRegistry+0x50>)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10b      	bne.n	80076b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800769c:	490c      	ldr	r1, [pc, #48]	; (80076d0 <vQueueAddToRegistry+0x50>)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076a6:	4a0a      	ldr	r2, [pc, #40]	; (80076d0 <vQueueAddToRegistry+0x50>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80076b2:	e006      	b.n	80076c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b07      	cmp	r3, #7
 80076be:	d9e7      	bls.n	8007690 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20001528 	.word	0x20001528

080076d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076e4:	f001 fcae 	bl	8009044 <vPortEnterCritical>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d103      	bne.n	80076fe <vQueueWaitForMessageRestricted+0x2a>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007704:	b25b      	sxtb	r3, r3
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d103      	bne.n	8007714 <vQueueWaitForMessageRestricted+0x40>
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007714:	f001 fcc6 	bl	80090a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3324      	adds	r3, #36	; 0x24
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fc3b 	bl	8007fa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800772e:	6978      	ldr	r0, [r7, #20]
 8007730:	f7ff ff26 	bl	8007580 <prvUnlockQueue>
	}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08e      	sub	sp, #56	; 0x38
 8007740:	af04      	add	r7, sp, #16
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <xTaskCreateStatic+0x46>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	61fb      	str	r3, [r7, #28]
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007782:	235c      	movs	r3, #92	; 0x5c
 8007784:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b5c      	cmp	r3, #92	; 0x5c
 800778a:	d00a      	beq.n	80077a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	61bb      	str	r3, [r7, #24]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01e      	beq.n	80077e8 <xTaskCreateStatic+0xac>
 80077aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01b      	beq.n	80077e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077c2:	2300      	movs	r3, #0
 80077c4:	9303      	str	r3, [sp, #12]
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	9302      	str	r3, [sp, #8]
 80077ca:	f107 0314 	add.w	r3, r7, #20
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f850 	bl	8007880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077e2:	f000 f8dd 	bl	80079a0 <prvAddNewTaskToReadyList>
 80077e6:	e001      	b.n	80077ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077ec:	697b      	ldr	r3, [r7, #20]
	}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b08c      	sub	sp, #48	; 0x30
 80077fa:	af04      	add	r7, sp, #16
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	603b      	str	r3, [r7, #0]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 fd3c 	bl	8009288 <pvPortMalloc>
 8007810:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00e      	beq.n	8007836 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007818:	205c      	movs	r0, #92	; 0x5c
 800781a:	f001 fd35 	bl	8009288 <pvPortMalloc>
 800781e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
 800782c:	e005      	b.n	800783a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800782e:	6978      	ldr	r0, [r7, #20]
 8007830:	f001 fdf6 	bl	8009420 <vPortFree>
 8007834:	e001      	b.n	800783a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	2300      	movs	r3, #0
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	9302      	str	r3, [sp, #8]
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f80e 	bl	8007880 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007864:	69f8      	ldr	r0, [r7, #28]
 8007866:	f000 f89b 	bl	80079a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800786a:	2301      	movs	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	e002      	b.n	8007876 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007870:	f04f 33ff 	mov.w	r3, #4294967295
 8007874:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007876:	69bb      	ldr	r3, [r7, #24]
	}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
 800788c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	461a      	mov	r2, r3
 8007898:	21a5      	movs	r1, #165	; 0xa5
 800789a:	f001 ffcd 	bl	8009838 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078a8:	3b01      	subs	r3, #1
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	617b      	str	r3, [r7, #20]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01f      	beq.n	800791e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]
 80078e2:	e012      	b.n	800790a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	4413      	add	r3, r2
 80078ea:	7819      	ldrb	r1, [r3, #0]
 80078ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	4413      	add	r3, r2
 80078f2:	3334      	adds	r3, #52	; 0x34
 80078f4:	460a      	mov	r2, r1
 80078f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	3301      	adds	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b0f      	cmp	r3, #15
 800790e:	d9e9      	bls.n	80078e4 <prvInitialiseNewTask+0x64>
 8007910:	e000      	b.n	8007914 <prvInitialiseNewTask+0x94>
			{
				break;
 8007912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800791c:	e003      	b.n	8007926 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	2b37      	cmp	r3, #55	; 0x37
 800792a:	d901      	bls.n	8007930 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800792c:	2337      	movs	r3, #55	; 0x37
 800792e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	2200      	movs	r2, #0
 8007940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	3304      	adds	r3, #4
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fea8 	bl	800669c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	3318      	adds	r3, #24
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fea3 	bl	800669c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2200      	movs	r2, #0
 8007970:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	68f9      	ldr	r1, [r7, #12]
 800797e:	69b8      	ldr	r0, [r7, #24]
 8007980:	f001 fa36 	bl	8008df0 <pxPortInitialiseStack>
 8007984:	4602      	mov	r2, r0
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007996:	bf00      	nop
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079a8:	f001 fb4c 	bl	8009044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079ac:	4b2d      	ldr	r3, [pc, #180]	; (8007a64 <prvAddNewTaskToReadyList+0xc4>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	4a2c      	ldr	r2, [pc, #176]	; (8007a64 <prvAddNewTaskToReadyList+0xc4>)
 80079b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079b6:	4b2c      	ldr	r3, [pc, #176]	; (8007a68 <prvAddNewTaskToReadyList+0xc8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079be:	4a2a      	ldr	r2, [pc, #168]	; (8007a68 <prvAddNewTaskToReadyList+0xc8>)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079c4:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <prvAddNewTaskToReadyList+0xc4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d110      	bne.n	80079ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079cc:	f000 fc16 	bl	80081fc <prvInitialiseTaskLists>
 80079d0:	e00d      	b.n	80079ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <prvAddNewTaskToReadyList+0xcc>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079da:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <prvAddNewTaskToReadyList+0xc8>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d802      	bhi.n	80079ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079e8:	4a1f      	ldr	r2, [pc, #124]	; (8007a68 <prvAddNewTaskToReadyList+0xc8>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079ee:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <prvAddNewTaskToReadyList+0xd0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a1e      	ldr	r2, [pc, #120]	; (8007a70 <prvAddNewTaskToReadyList+0xd0>)
 80079f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079f8:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <prvAddNewTaskToReadyList+0xd0>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <prvAddNewTaskToReadyList+0xd4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d903      	bls.n	8007a14 <prvAddNewTaskToReadyList+0x74>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <prvAddNewTaskToReadyList+0xd4>)
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <prvAddNewTaskToReadyList+0xd8>)
 8007a22:	441a      	add	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f7fe fe43 	bl	80066b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a30:	f001 fb38 	bl	80090a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a34:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <prvAddNewTaskToReadyList+0xcc>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00e      	beq.n	8007a5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <prvAddNewTaskToReadyList+0xc8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d207      	bcs.n	8007a5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a4a:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <prvAddNewTaskToReadyList+0xdc>)
 8007a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20001a3c 	.word	0x20001a3c
 8007a68:	20001568 	.word	0x20001568
 8007a6c:	20001a48 	.word	0x20001a48
 8007a70:	20001a58 	.word	0x20001a58
 8007a74:	20001a44 	.word	0x20001a44
 8007a78:	2000156c 	.word	0x2000156c
 8007a7c:	e000ed04 	.word	0xe000ed04

08007a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d017      	beq.n	8007ac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <vTaskDelay+0x60>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <vTaskDelay+0x30>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	e7fe      	b.n	8007aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ab0:	f000 f880 	bl	8007bb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fdf8 	bl	80086ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007abc:	f000 f888 	bl	8007bd0 <xTaskResumeAll>
 8007ac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <vTaskDelay+0x64>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20001a64 	.word	0x20001a64
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b08a      	sub	sp, #40	; 0x28
 8007aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007af6:	463a      	mov	r2, r7
 8007af8:	1d39      	adds	r1, r7, #4
 8007afa:	f107 0308 	add.w	r3, r7, #8
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fd78 	bl	80065f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	9202      	str	r2, [sp, #8]
 8007b0c:	9301      	str	r3, [sp, #4]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	460a      	mov	r2, r1
 8007b16:	4921      	ldr	r1, [pc, #132]	; (8007b9c <vTaskStartScheduler+0xb4>)
 8007b18:	4821      	ldr	r0, [pc, #132]	; (8007ba0 <vTaskStartScheduler+0xb8>)
 8007b1a:	f7ff fe0f 	bl	800773c <xTaskCreateStatic>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4a20      	ldr	r2, [pc, #128]	; (8007ba4 <vTaskStartScheduler+0xbc>)
 8007b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b24:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <vTaskStartScheduler+0xbc>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e001      	b.n	8007b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d102      	bne.n	8007b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b3c:	f000 fe0a 	bl	8008754 <xTimerCreateTimerTask>
 8007b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d116      	bne.n	8007b76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	613b      	str	r3, [r7, #16]
}
 8007b5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b5c:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <vTaskStartScheduler+0xc0>)
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b64:	4b11      	ldr	r3, [pc, #68]	; (8007bac <vTaskStartScheduler+0xc4>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b6a:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <vTaskStartScheduler+0xc8>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b70:	f001 f9c6 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b74:	e00e      	b.n	8007b94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d10a      	bne.n	8007b94 <vTaskStartScheduler+0xac>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <vTaskStartScheduler+0xaa>
}
 8007b94:	bf00      	nop
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	0800b170 	.word	0x0800b170
 8007ba0:	080081cd 	.word	0x080081cd
 8007ba4:	20001a60 	.word	0x20001a60
 8007ba8:	20001a5c 	.word	0x20001a5c
 8007bac:	20001a48 	.word	0x20001a48
 8007bb0:	20001a40 	.word	0x20001a40

08007bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <vTaskSuspendAll+0x18>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4a03      	ldr	r2, [pc, #12]	; (8007bcc <vTaskSuspendAll+0x18>)
 8007bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20001a64 	.word	0x20001a64

08007bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bde:	4b42      	ldr	r3, [pc, #264]	; (8007ce8 <xTaskResumeAll+0x118>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10a      	bne.n	8007bfc <xTaskResumeAll+0x2c>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	603b      	str	r3, [r7, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bfc:	f001 fa22 	bl	8009044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c00:	4b39      	ldr	r3, [pc, #228]	; (8007ce8 <xTaskResumeAll+0x118>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	4a38      	ldr	r2, [pc, #224]	; (8007ce8 <xTaskResumeAll+0x118>)
 8007c08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0a:	4b37      	ldr	r3, [pc, #220]	; (8007ce8 <xTaskResumeAll+0x118>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d162      	bne.n	8007cd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c12:	4b36      	ldr	r3, [pc, #216]	; (8007cec <xTaskResumeAll+0x11c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d05e      	beq.n	8007cd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c1a:	e02f      	b.n	8007c7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1c:	4b34      	ldr	r3, [pc, #208]	; (8007cf0 <xTaskResumeAll+0x120>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3318      	adds	r3, #24
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fda1 	bl	8006770 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3304      	adds	r3, #4
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fd9c 	bl	8006770 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4b2d      	ldr	r3, [pc, #180]	; (8007cf4 <xTaskResumeAll+0x124>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <xTaskResumeAll+0x7c>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4a2a      	ldr	r2, [pc, #168]	; (8007cf4 <xTaskResumeAll+0x124>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a27      	ldr	r2, [pc, #156]	; (8007cf8 <xTaskResumeAll+0x128>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe fd27 	bl	80066b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6c:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <xTaskResumeAll+0x12c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d302      	bcc.n	8007c7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c76:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <xTaskResumeAll+0x130>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c7c:	4b1c      	ldr	r3, [pc, #112]	; (8007cf0 <xTaskResumeAll+0x120>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1cb      	bne.n	8007c1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c8a:	f000 fb55 	bl	8008338 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <xTaskResumeAll+0x134>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d010      	beq.n	8007cbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c9a:	f000 f847 	bl	8007d2c <xTaskIncrementTick>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ca4:	4b16      	ldr	r3, [pc, #88]	; (8007d00 <xTaskResumeAll+0x130>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f1      	bne.n	8007c9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	; (8007d04 <xTaskResumeAll+0x134>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cbc:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <xTaskResumeAll+0x130>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <xTaskResumeAll+0x138>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cd8:	f001 f9e4 	bl	80090a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20001a64 	.word	0x20001a64
 8007cec:	20001a3c 	.word	0x20001a3c
 8007cf0:	200019fc 	.word	0x200019fc
 8007cf4:	20001a44 	.word	0x20001a44
 8007cf8:	2000156c 	.word	0x2000156c
 8007cfc:	20001568 	.word	0x20001568
 8007d00:	20001a50 	.word	0x20001a50
 8007d04:	20001a4c 	.word	0x20001a4c
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <xTaskGetTickCount+0x1c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d18:	687b      	ldr	r3, [r7, #4]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20001a40 	.word	0x20001a40

08007d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d36:	4b4f      	ldr	r3, [pc, #316]	; (8007e74 <xTaskIncrementTick+0x148>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f040 808f 	bne.w	8007e5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d40:	4b4d      	ldr	r3, [pc, #308]	; (8007e78 <xTaskIncrementTick+0x14c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d48:	4a4b      	ldr	r2, [pc, #300]	; (8007e78 <xTaskIncrementTick+0x14c>)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d120      	bne.n	8007d96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d54:	4b49      	ldr	r3, [pc, #292]	; (8007e7c <xTaskIncrementTick+0x150>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <xTaskIncrementTick+0x48>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	603b      	str	r3, [r7, #0]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskIncrementTick+0x46>
 8007d74:	4b41      	ldr	r3, [pc, #260]	; (8007e7c <xTaskIncrementTick+0x150>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60fb      	str	r3, [r7, #12]
 8007d7a:	4b41      	ldr	r3, [pc, #260]	; (8007e80 <xTaskIncrementTick+0x154>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a3f      	ldr	r2, [pc, #252]	; (8007e7c <xTaskIncrementTick+0x150>)
 8007d80:	6013      	str	r3, [r2, #0]
 8007d82:	4a3f      	ldr	r2, [pc, #252]	; (8007e80 <xTaskIncrementTick+0x154>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	4b3e      	ldr	r3, [pc, #248]	; (8007e84 <xTaskIncrementTick+0x158>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	4a3d      	ldr	r2, [pc, #244]	; (8007e84 <xTaskIncrementTick+0x158>)
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	f000 fad1 	bl	8008338 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d96:	4b3c      	ldr	r3, [pc, #240]	; (8007e88 <xTaskIncrementTick+0x15c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d349      	bcc.n	8007e34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da0:	4b36      	ldr	r3, [pc, #216]	; (8007e7c <xTaskIncrementTick+0x150>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007daa:	4b37      	ldr	r3, [pc, #220]	; (8007e88 <xTaskIncrementTick+0x15c>)
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295
 8007db0:	601a      	str	r2, [r3, #0]
					break;
 8007db2:	e03f      	b.n	8007e34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db4:	4b31      	ldr	r3, [pc, #196]	; (8007e7c <xTaskIncrementTick+0x150>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d203      	bcs.n	8007dd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dcc:	4a2e      	ldr	r2, [pc, #184]	; (8007e88 <xTaskIncrementTick+0x15c>)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dd2:	e02f      	b.n	8007e34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fcc9 	bl	8006770 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	3318      	adds	r3, #24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fcc0 	bl	8006770 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4b25      	ldr	r3, [pc, #148]	; (8007e8c <xTaskIncrementTick+0x160>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d903      	bls.n	8007e04 <xTaskIncrementTick+0xd8>
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a22      	ldr	r2, [pc, #136]	; (8007e8c <xTaskIncrementTick+0x160>)
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <xTaskIncrementTick+0x164>)
 8007e12:	441a      	add	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7fe fc4b 	bl	80066b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <xTaskIncrementTick+0x168>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d3b8      	bcc.n	8007da0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e32:	e7b5      	b.n	8007da0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e34:	4b17      	ldr	r3, [pc, #92]	; (8007e94 <xTaskIncrementTick+0x168>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4915      	ldr	r1, [pc, #84]	; (8007e90 <xTaskIncrementTick+0x164>)
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	440b      	add	r3, r1
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d901      	bls.n	8007e50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e50:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <xTaskIncrementTick+0x16c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d007      	beq.n	8007e68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e004      	b.n	8007e68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <xTaskIncrementTick+0x170>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	4a0d      	ldr	r2, [pc, #52]	; (8007e9c <xTaskIncrementTick+0x170>)
 8007e66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e68:	697b      	ldr	r3, [r7, #20]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20001a64 	.word	0x20001a64
 8007e78:	20001a40 	.word	0x20001a40
 8007e7c:	200019f4 	.word	0x200019f4
 8007e80:	200019f8 	.word	0x200019f8
 8007e84:	20001a54 	.word	0x20001a54
 8007e88:	20001a5c 	.word	0x20001a5c
 8007e8c:	20001a44 	.word	0x20001a44
 8007e90:	2000156c 	.word	0x2000156c
 8007e94:	20001568 	.word	0x20001568
 8007e98:	20001a50 	.word	0x20001a50
 8007e9c:	20001a4c 	.word	0x20001a4c

08007ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ea6:	4b28      	ldr	r3, [pc, #160]	; (8007f48 <vTaskSwitchContext+0xa8>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007eae:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <vTaskSwitchContext+0xac>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007eb4:	e041      	b.n	8007f3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007eb6:	4b25      	ldr	r3, [pc, #148]	; (8007f4c <vTaskSwitchContext+0xac>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebc:	4b24      	ldr	r3, [pc, #144]	; (8007f50 <vTaskSwitchContext+0xb0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e010      	b.n	8007ee6 <vTaskSwitchContext+0x46>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	607b      	str	r3, [r7, #4]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <vTaskSwitchContext+0x3e>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	491b      	ldr	r1, [pc, #108]	; (8007f54 <vTaskSwitchContext+0xb4>)
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	440b      	add	r3, r1
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0e4      	beq.n	8007ec4 <vTaskSwitchContext+0x24>
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <vTaskSwitchContext+0xb4>)
 8007f06:	4413      	add	r3, r2
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d104      	bne.n	8007f2a <vTaskSwitchContext+0x8a>
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	605a      	str	r2, [r3, #4]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <vTaskSwitchContext+0xb8>)
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	4a06      	ldr	r2, [pc, #24]	; (8007f50 <vTaskSwitchContext+0xb0>)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6013      	str	r3, [r2, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20001a64 	.word	0x20001a64
 8007f4c:	20001a50 	.word	0x20001a50
 8007f50:	20001a44 	.word	0x20001a44
 8007f54:	2000156c 	.word	0x2000156c
 8007f58:	20001568 	.word	0x20001568

08007f5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60fb      	str	r3, [r7, #12]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <vTaskPlaceOnEventList+0x44>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3318      	adds	r3, #24
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fe fbb7 	bl	80066fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f90:	2101      	movs	r1, #1
 8007f92:	6838      	ldr	r0, [r7, #0]
 8007f94:	f000 fb8a 	bl	80086ac <prvAddCurrentTaskToDelayedList>
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20001568 	.word	0x20001568

08007fa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10a      	bne.n	8007fcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	617b      	str	r3, [r7, #20]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3318      	adds	r3, #24
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f7fe fb6e 	bl	80066b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	68b8      	ldr	r0, [r7, #8]
 8007fea:	f000 fb5f 	bl	80086ac <prvAddCurrentTaskToDelayedList>
	}
 8007fee:	bf00      	nop
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20001568 	.word	0x20001568

08007ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10a      	bne.n	8008028 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60fb      	str	r3, [r7, #12]
}
 8008024:	bf00      	nop
 8008026:	e7fe      	b.n	8008026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	3318      	adds	r3, #24
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fb9f 	bl	8006770 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008032:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <xTaskRemoveFromEventList+0xb0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d11d      	bne.n	8008076 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3304      	adds	r3, #4
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fb96 	bl	8006770 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008048:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <xTaskRemoveFromEventList+0xb4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d903      	bls.n	8008058 <xTaskRemoveFromEventList+0x5c>
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4a16      	ldr	r2, [pc, #88]	; (80080b0 <xTaskRemoveFromEventList+0xb4>)
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <xTaskRemoveFromEventList+0xb8>)
 8008066:	441a      	add	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fb21 	bl	80066b6 <vListInsertEnd>
 8008074:	e005      	b.n	8008082 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3318      	adds	r3, #24
 800807a:	4619      	mov	r1, r3
 800807c:	480e      	ldr	r0, [pc, #56]	; (80080b8 <xTaskRemoveFromEventList+0xbc>)
 800807e:	f7fe fb1a 	bl	80066b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008086:	4b0d      	ldr	r3, [pc, #52]	; (80080bc <xTaskRemoveFromEventList+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	429a      	cmp	r2, r3
 800808e:	d905      	bls.n	800809c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <xTaskRemoveFromEventList+0xc4>)
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e001      	b.n	80080a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080a0:	697b      	ldr	r3, [r7, #20]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20001a64 	.word	0x20001a64
 80080b0:	20001a44 	.word	0x20001a44
 80080b4:	2000156c 	.word	0x2000156c
 80080b8:	200019fc 	.word	0x200019fc
 80080bc:	20001568 	.word	0x20001568
 80080c0:	20001a50 	.word	0x20001a50

080080c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80080cc:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <vTaskInternalSetTimeOutState+0x24>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <vTaskInternalSetTimeOutState+0x28>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	605a      	str	r2, [r3, #4]
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	20001a54 	.word	0x20001a54
 80080ec:	20001a40 	.word	0x20001a40

080080f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	613b      	str	r3, [r7, #16]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008132:	f000 ff87 	bl	8009044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008136:	4b1d      	ldr	r3, [pc, #116]	; (80081ac <xTaskCheckForTimeOut+0xbc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d102      	bne.n	8008156 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	e023      	b.n	800819e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <xTaskCheckForTimeOut+0xc0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d007      	beq.n	8008172 <xTaskCheckForTimeOut+0x82>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	429a      	cmp	r2, r3
 800816a:	d302      	bcc.n	8008172 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800816c:	2301      	movs	r3, #1
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e015      	b.n	800819e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	429a      	cmp	r2, r3
 800817a:	d20b      	bcs.n	8008194 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff ff9b 	bl	80080c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
 8008192:	e004      	b.n	800819e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800819a:	2301      	movs	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800819e:	f000 ff81 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 80081a2:	69fb      	ldr	r3, [r7, #28]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3720      	adds	r7, #32
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20001a40 	.word	0x20001a40
 80081b0:	20001a54 	.word	0x20001a54

080081b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80081b8:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <vTaskMissedYield+0x14>)
 80081ba:	2201      	movs	r2, #1
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	bf00      	nop
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	20001a50 	.word	0x20001a50

080081cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80081d4:	f000 f852 	bl	800827c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <prvIdleTask+0x28>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d9f9      	bls.n	80081d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <prvIdleTask+0x2c>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80081f0:	e7f0      	b.n	80081d4 <prvIdleTask+0x8>
 80081f2:	bf00      	nop
 80081f4:	2000156c 	.word	0x2000156c
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e00c      	b.n	8008222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4a12      	ldr	r2, [pc, #72]	; (800825c <prvInitialiseTaskLists+0x60>)
 8008214:	4413      	add	r3, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fa20 	bl	800665c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3301      	adds	r3, #1
 8008220:	607b      	str	r3, [r7, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b37      	cmp	r3, #55	; 0x37
 8008226:	d9ef      	bls.n	8008208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008228:	480d      	ldr	r0, [pc, #52]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800822a:	f7fe fa17 	bl	800665c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008230:	f7fe fa14 	bl	800665c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008234:	480c      	ldr	r0, [pc, #48]	; (8008268 <prvInitialiseTaskLists+0x6c>)
 8008236:	f7fe fa11 	bl	800665c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800823a:	480c      	ldr	r0, [pc, #48]	; (800826c <prvInitialiseTaskLists+0x70>)
 800823c:	f7fe fa0e 	bl	800665c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008240:	480b      	ldr	r0, [pc, #44]	; (8008270 <prvInitialiseTaskLists+0x74>)
 8008242:	f7fe fa0b 	bl	800665c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <prvInitialiseTaskLists+0x78>)
 8008248:	4a05      	ldr	r2, [pc, #20]	; (8008260 <prvInitialiseTaskLists+0x64>)
 800824a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <prvInitialiseTaskLists+0x7c>)
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <prvInitialiseTaskLists+0x68>)
 8008250:	601a      	str	r2, [r3, #0]
}
 8008252:	bf00      	nop
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	2000156c 	.word	0x2000156c
 8008260:	200019cc 	.word	0x200019cc
 8008264:	200019e0 	.word	0x200019e0
 8008268:	200019fc 	.word	0x200019fc
 800826c:	20001a10 	.word	0x20001a10
 8008270:	20001a28 	.word	0x20001a28
 8008274:	200019f4 	.word	0x200019f4
 8008278:	200019f8 	.word	0x200019f8

0800827c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008282:	e019      	b.n	80082b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008284:	f000 fede 	bl	8009044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <prvCheckTasksWaitingTermination+0x50>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fa6b 	bl	8006770 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <prvCheckTasksWaitingTermination+0x54>)
 80082a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082ae:	f000 fef9 	bl	80090a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f810 	bl	80082d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082b8:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <prvCheckTasksWaitingTermination+0x58>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e1      	bne.n	8008284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20001a10 	.word	0x20001a10
 80082d0:	20001a3c 	.word	0x20001a3c
 80082d4:	20001a24 	.word	0x20001a24

080082d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d108      	bne.n	80082fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 f896 	bl	8009420 <vPortFree>
				vPortFree( pxTCB );
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f893 	bl	8009420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082fa:	e018      	b.n	800832e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008302:	2b01      	cmp	r3, #1
 8008304:	d103      	bne.n	800830e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 f88a 	bl	8009420 <vPortFree>
	}
 800830c:	e00f      	b.n	800832e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008314:	2b02      	cmp	r3, #2
 8008316:	d00a      	beq.n	800832e <prvDeleteTCB+0x56>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	60fb      	str	r3, [r7, #12]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <prvDeleteTCB+0x54>
	}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800833e:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <prvResetNextTaskUnblockTime+0x38>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d104      	bne.n	8008352 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008348:	4b0a      	ldr	r3, [pc, #40]	; (8008374 <prvResetNextTaskUnblockTime+0x3c>)
 800834a:	f04f 32ff 	mov.w	r2, #4294967295
 800834e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008350:	e008      	b.n	8008364 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <prvResetNextTaskUnblockTime+0x38>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4a04      	ldr	r2, [pc, #16]	; (8008374 <prvResetNextTaskUnblockTime+0x3c>)
 8008362:	6013      	str	r3, [r2, #0]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	200019f4 	.word	0x200019f4
 8008374:	20001a5c 	.word	0x20001a5c

08008378 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <xTaskGetCurrentTaskHandle+0x1c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008384:	687b      	ldr	r3, [r7, #4]
	}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	20001568 	.word	0x20001568

08008398 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800839e:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <xTaskGetSchedulerState+0x34>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d102      	bne.n	80083ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083a6:	2301      	movs	r3, #1
 80083a8:	607b      	str	r3, [r7, #4]
 80083aa:	e008      	b.n	80083be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ac:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <xTaskGetSchedulerState+0x38>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083b4:	2302      	movs	r3, #2
 80083b6:	607b      	str	r3, [r7, #4]
 80083b8:	e001      	b.n	80083be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ba:	2300      	movs	r3, #0
 80083bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083be:	687b      	ldr	r3, [r7, #4]
	}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	20001a48 	.word	0x20001a48
 80083d0:	20001a64 	.word	0x20001a64

080083d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d051      	beq.n	800848e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4b2a      	ldr	r3, [pc, #168]	; (8008498 <xTaskPriorityInherit+0xc4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d241      	bcs.n	800847c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	db06      	blt.n	800840e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008400:	4b25      	ldr	r3, [pc, #148]	; (8008498 <xTaskPriorityInherit+0xc4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6959      	ldr	r1, [r3, #20]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4a1f      	ldr	r2, [pc, #124]	; (800849c <xTaskPriorityInherit+0xc8>)
 8008420:	4413      	add	r3, r2
 8008422:	4299      	cmp	r1, r3
 8008424:	d122      	bne.n	800846c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	3304      	adds	r3, #4
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe f9a0 	bl	8006770 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008430:	4b19      	ldr	r3, [pc, #100]	; (8008498 <xTaskPriorityInherit+0xc4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <xTaskPriorityInherit+0xcc>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d903      	bls.n	800844e <xTaskPriorityInherit+0x7a>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <xTaskPriorityInherit+0xcc>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4a10      	ldr	r2, [pc, #64]	; (800849c <xTaskPriorityInherit+0xc8>)
 800845c:	441a      	add	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe f926 	bl	80066b6 <vListInsertEnd>
 800846a:	e004      	b.n	8008476 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <xTaskPriorityInherit+0xc4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e008      	b.n	800848e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008480:	4b05      	ldr	r3, [pc, #20]	; (8008498 <xTaskPriorityInherit+0xc4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	429a      	cmp	r2, r3
 8008488:	d201      	bcs.n	800848e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800848e:	68fb      	ldr	r3, [r7, #12]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	20001568 	.word	0x20001568
 800849c:	2000156c 	.word	0x2000156c
 80084a0:	20001a44 	.word	0x20001a44

080084a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d056      	beq.n	8008568 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80084ba:	4b2e      	ldr	r3, [pc, #184]	; (8008574 <xTaskPriorityDisinherit+0xd0>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d00a      	beq.n	80084da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	60fb      	str	r3, [r7, #12]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	60bb      	str	r3, [r7, #8]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fc:	1e5a      	subs	r2, r3, #1
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850a:	429a      	cmp	r2, r3
 800850c:	d02c      	beq.n	8008568 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	2b00      	cmp	r3, #0
 8008514:	d128      	bne.n	8008568 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	3304      	adds	r3, #4
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe f928 	bl	8006770 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	4b0f      	ldr	r3, [pc, #60]	; (8008578 <xTaskPriorityDisinherit+0xd4>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <xTaskPriorityDisinherit+0xa4>
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	4a0c      	ldr	r2, [pc, #48]	; (8008578 <xTaskPriorityDisinherit+0xd4>)
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a09      	ldr	r2, [pc, #36]	; (800857c <xTaskPriorityDisinherit+0xd8>)
 8008556:	441a      	add	r2, r3
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	3304      	adds	r3, #4
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7fe f8a9 	bl	80066b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008564:	2301      	movs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008568:	697b      	ldr	r3, [r7, #20]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20001568 	.word	0x20001568
 8008578:	20001a44 	.word	0x20001a44
 800857c:	2000156c 	.word	0x2000156c

08008580 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800858e:	2301      	movs	r3, #1
 8008590:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d06a      	beq.n	800866e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10a      	bne.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60fb      	str	r3, [r7, #12]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d902      	bls.n	80085c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	61fb      	str	r3, [r7, #28]
 80085c4:	e002      	b.n	80085cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d04b      	beq.n	800866e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d146      	bne.n	800866e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d10a      	bne.n	8008600 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	60bb      	str	r3, [r7, #8]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	db04      	blt.n	800861e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	6959      	ldr	r1, [r3, #20]
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4a13      	ldr	r2, [pc, #76]	; (800867c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800862e:	4413      	add	r3, r2
 8008630:	4299      	cmp	r1, r3
 8008632:	d11c      	bne.n	800866e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	3304      	adds	r3, #4
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe f899 	bl	8006770 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d903      	bls.n	8008652 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008650:	6013      	str	r3, [r2, #0]
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4a07      	ldr	r2, [pc, #28]	; (800867c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008660:	441a      	add	r2, r3
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f7fe f824 	bl	80066b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800866e:	bf00      	nop
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20001568 	.word	0x20001568
 800867c:	2000156c 	.word	0x2000156c
 8008680:	20001a44 	.word	0x20001a44

08008684 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008688:	4b07      	ldr	r3, [pc, #28]	; (80086a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008696:	3201      	adds	r2, #1
 8008698:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800869a:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800869c:	681b      	ldr	r3, [r3, #0]
	}
 800869e:	4618      	mov	r0, r3
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	20001568 	.word	0x20001568

080086ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086b6:	4b21      	ldr	r3, [pc, #132]	; (800873c <prvAddCurrentTaskToDelayedList+0x90>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086bc:	4b20      	ldr	r3, [pc, #128]	; (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe f854 	bl	8006770 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d10a      	bne.n	80086e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4819      	ldr	r0, [pc, #100]	; (8008744 <prvAddCurrentTaskToDelayedList+0x98>)
 80086e0:	f7fd ffe9 	bl	80066b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086e4:	e026      	b.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086ee:	4b14      	ldr	r3, [pc, #80]	; (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d209      	bcs.n	8008712 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086fe:	4b12      	ldr	r3, [pc, #72]	; (8008748 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	4b0f      	ldr	r3, [pc, #60]	; (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3304      	adds	r3, #4
 8008708:	4619      	mov	r1, r3
 800870a:	4610      	mov	r0, r2
 800870c:	f7fd fff7 	bl	80066fe <vListInsert>
}
 8008710:	e010      	b.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008712:	4b0e      	ldr	r3, [pc, #56]	; (800874c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <prvAddCurrentTaskToDelayedList+0x94>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fd ffed 	bl	80066fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	429a      	cmp	r2, r3
 800872c:	d202      	bcs.n	8008734 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800872e:	4a08      	ldr	r2, [pc, #32]	; (8008750 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6013      	str	r3, [r2, #0]
}
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20001a40 	.word	0x20001a40
 8008740:	20001568 	.word	0x20001568
 8008744:	20001a28 	.word	0x20001a28
 8008748:	200019f8 	.word	0x200019f8
 800874c:	200019f4 	.word	0x200019f4
 8008750:	20001a5c 	.word	0x20001a5c

08008754 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800875e:	f000 fb07 	bl	8008d70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008762:	4b1c      	ldr	r3, [pc, #112]	; (80087d4 <xTimerCreateTimerTask+0x80>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d021      	beq.n	80087ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008772:	1d3a      	adds	r2, r7, #4
 8008774:	f107 0108 	add.w	r1, r7, #8
 8008778:	f107 030c 	add.w	r3, r7, #12
 800877c:	4618      	mov	r0, r3
 800877e:	f7fd ff53 	bl	8006628 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	9202      	str	r2, [sp, #8]
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	2302      	movs	r3, #2
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	2300      	movs	r3, #0
 8008792:	460a      	mov	r2, r1
 8008794:	4910      	ldr	r1, [pc, #64]	; (80087d8 <xTimerCreateTimerTask+0x84>)
 8008796:	4811      	ldr	r0, [pc, #68]	; (80087dc <xTimerCreateTimerTask+0x88>)
 8008798:	f7fe ffd0 	bl	800773c <xTaskCreateStatic>
 800879c:	4603      	mov	r3, r0
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <xTimerCreateTimerTask+0x8c>)
 80087a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087a2:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <xTimerCreateTimerTask+0x8c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087aa:	2301      	movs	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	613b      	str	r3, [r7, #16]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80087ca:	697b      	ldr	r3, [r7, #20]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	20001a98 	.word	0x20001a98
 80087d8:	0800b178 	.word	0x0800b178
 80087dc:	08008919 	.word	0x08008919
 80087e0:	20001a9c 	.word	0x20001a9c

080087e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08a      	sub	sp, #40	; 0x28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	623b      	str	r3, [r7, #32]
}
 800880e:	bf00      	nop
 8008810:	e7fe      	b.n	8008810 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <xTimerGenericCommand+0x98>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d02a      	beq.n	8008870 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b05      	cmp	r3, #5
 800882a:	dc18      	bgt.n	800885e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800882c:	f7ff fdb4 	bl	8008398 <xTaskGetSchedulerState>
 8008830:	4603      	mov	r3, r0
 8008832:	2b02      	cmp	r3, #2
 8008834:	d109      	bne.n	800884a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <xTimerGenericCommand+0x98>)
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	f107 0110 	add.w	r1, r7, #16
 800883e:	2300      	movs	r3, #0
 8008840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008842:	f7fe f9b3 	bl	8006bac <xQueueGenericSend>
 8008846:	6278      	str	r0, [r7, #36]	; 0x24
 8008848:	e012      	b.n	8008870 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <xTimerGenericCommand+0x98>)
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f107 0110 	add.w	r1, r7, #16
 8008852:	2300      	movs	r3, #0
 8008854:	2200      	movs	r2, #0
 8008856:	f7fe f9a9 	bl	8006bac <xQueueGenericSend>
 800885a:	6278      	str	r0, [r7, #36]	; 0x24
 800885c:	e008      	b.n	8008870 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <xTimerGenericCommand+0x98>)
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f107 0110 	add.w	r1, r7, #16
 8008866:	2300      	movs	r3, #0
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	f7fe fa9d 	bl	8006da8 <xQueueGenericSendFromISR>
 800886e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008872:	4618      	mov	r0, r3
 8008874:	3728      	adds	r7, #40	; 0x28
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20001a98 	.word	0x20001a98

08008880 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af02      	add	r7, sp, #8
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888a:	4b22      	ldr	r3, [pc, #136]	; (8008914 <prvProcessExpiredTimer+0x94>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fd ff69 	bl	8006770 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d022      	beq.n	80088f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	18d1      	adds	r1, r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	f000 f8d1 	bl	8008a60 <prvInsertTimerInActiveList>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d01f      	beq.n	8008904 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c4:	2300      	movs	r3, #0
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	2100      	movs	r1, #0
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7ff ff88 	bl	80087e4 <xTimerGenericCommand>
 80088d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d113      	bne.n	8008904 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60fb      	str	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f8:	f023 0301 	bic.w	r3, r3, #1
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	6978      	ldr	r0, [r7, #20]
 800890a:	4798      	blx	r3
}
 800890c:	bf00      	nop
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20001a90 	.word	0x20001a90

08008918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008920:	f107 0308 	add.w	r3, r7, #8
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f857 	bl	80089d8 <prvGetNextExpireTime>
 800892a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4619      	mov	r1, r3
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 f803 	bl	800893c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008936:	f000 f8d5 	bl	8008ae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800893a:	e7f1      	b.n	8008920 <prvTimerTask+0x8>

0800893c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008946:	f7ff f935 	bl	8007bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800894a:	f107 0308 	add.w	r3, r7, #8
 800894e:	4618      	mov	r0, r3
 8008950:	f000 f866 	bl	8008a20 <prvSampleTimeNow>
 8008954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d130      	bne.n	80089be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <prvProcessTimerOrBlockTask+0x3c>
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	429a      	cmp	r2, r3
 8008968:	d806      	bhi.n	8008978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800896a:	f7ff f931 	bl	8007bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff85 	bl	8008880 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008976:	e024      	b.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800897e:	4b13      	ldr	r3, [pc, #76]	; (80089cc <prvProcessTimerOrBlockTask+0x90>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <prvProcessTimerOrBlockTask+0x50>
 8008988:	2301      	movs	r3, #1
 800898a:	e000      	b.n	800898e <prvProcessTimerOrBlockTask+0x52>
 800898c:	2300      	movs	r3, #0
 800898e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <prvProcessTimerOrBlockTask+0x94>)
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	f7fe fe99 	bl	80076d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089a2:	f7ff f915 	bl	8007bd0 <xTaskResumeAll>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10a      	bne.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvProcessTimerOrBlockTask+0x98>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
}
 80089bc:	e001      	b.n	80089c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089be:	f7ff f907 	bl	8007bd0 <xTaskResumeAll>
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	20001a94 	.word	0x20001a94
 80089d0:	20001a98 	.word	0x20001a98
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089e0:	4b0e      	ldr	r3, [pc, #56]	; (8008a1c <prvGetNextExpireTime+0x44>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <prvGetNextExpireTime+0x16>
 80089ea:	2201      	movs	r2, #1
 80089ec:	e000      	b.n	80089f0 <prvGetNextExpireTime+0x18>
 80089ee:	2200      	movs	r2, #0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d105      	bne.n	8008a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089fc:	4b07      	ldr	r3, [pc, #28]	; (8008a1c <prvGetNextExpireTime+0x44>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e001      	b.n	8008a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20001a90 	.word	0x20001a90

08008a20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a28:	f7ff f970 	bl	8007d0c <xTaskGetTickCount>
 8008a2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a2e:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <prvSampleTimeNow+0x3c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d205      	bcs.n	8008a44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a38:	f000 f936 	bl	8008ca8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	e002      	b.n	8008a4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <prvSampleTimeNow+0x3c>)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a50:	68fb      	ldr	r3, [r7, #12]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001aa0 	.word	0x20001aa0

08008a60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d812      	bhi.n	8008aac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d302      	bcc.n	8008a9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a94:	2301      	movs	r3, #1
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e01b      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <prvInsertTimerInActiveList+0x7c>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f7fd fe2a 	bl	80066fe <vListInsert>
 8008aaa:	e012      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d206      	bcs.n	8008ac2 <prvInsertTimerInActiveList+0x62>
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d302      	bcc.n	8008ac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008abc:	2301      	movs	r3, #1
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	e007      	b.n	8008ad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac2:	4b07      	ldr	r3, [pc, #28]	; (8008ae0 <prvInsertTimerInActiveList+0x80>)
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f7fd fe16 	bl	80066fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ad2:	697b      	ldr	r3, [r7, #20]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	20001a94 	.word	0x20001a94
 8008ae0:	20001a90 	.word	0x20001a90

08008ae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08e      	sub	sp, #56	; 0x38
 8008ae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aea:	e0ca      	b.n	8008c82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da18      	bge.n	8008b24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008af2:	1d3b      	adds	r3, r7, #4
 8008af4:	3304      	adds	r3, #4
 8008af6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	61fb      	str	r3, [r7, #28]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1a:	6850      	ldr	r0, [r2, #4]
 8008b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b1e:	6892      	ldr	r2, [r2, #8]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f2c0 80ab 	blt.w	8008c82 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd fe17 	bl	8006770 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b42:	463b      	mov	r3, r7
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ff6b 	bl	8008a20 <prvSampleTimeNow>
 8008b4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b09      	cmp	r3, #9
 8008b50:	f200 8096 	bhi.w	8008c80 <prvProcessReceivedCommands+0x19c>
 8008b54:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <prvProcessReceivedCommands+0x78>)
 8008b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5a:	bf00      	nop
 8008b5c:	08008b85 	.word	0x08008b85
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b85 	.word	0x08008b85
 8008b68:	08008bf9 	.word	0x08008bf9
 8008b6c:	08008c0d 	.word	0x08008c0d
 8008b70:	08008c57 	.word	0x08008c57
 8008b74:	08008b85 	.word	0x08008b85
 8008b78:	08008b85 	.word	0x08008b85
 8008b7c:	08008bf9 	.word	0x08008bf9
 8008b80:	08008c0d 	.word	0x08008c0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	18d1      	adds	r1, r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ba4:	f7ff ff5c 	bl	8008a60 <prvInsertTimerInActiveList>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d069      	beq.n	8008c82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bbc:	f003 0304 	and.w	r3, r3, #4
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d05e      	beq.n	8008c82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	441a      	add	r2, r3
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd6:	f7ff fe05 	bl	80087e4 <xTimerGenericCommand>
 8008bda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d14f      	bne.n	8008c82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	61bb      	str	r3, [r7, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c0a:	e03a      	b.n	8008c82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c12:	f043 0301 	orr.w	r3, r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	617b      	str	r3, [r7, #20]
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	18d1      	adds	r1, r2, r3
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c50:	f7ff ff06 	bl	8008a60 <prvInsertTimerInActiveList>
					break;
 8008c54:	e015      	b.n	8008c82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c66:	f000 fbdb 	bl	8009420 <vPortFree>
 8008c6a:	e00a      	b.n	8008c82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c72:	f023 0301 	bic.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c7e:	e000      	b.n	8008c82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <prvProcessReceivedCommands+0x1c0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	1d39      	adds	r1, r7, #4
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe f928 	bl	8006ee0 <xQueueReceive>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f47f af2a 	bne.w	8008aec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	3730      	adds	r7, #48	; 0x30
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20001a98 	.word	0x20001a98

08008ca8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cae:	e048      	b.n	8008d42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cb0:	4b2d      	ldr	r3, [pc, #180]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cba:	4b2b      	ldr	r3, [pc, #172]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fd fd51 	bl	8006770 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d02e      	beq.n	8008d42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4413      	add	r3, r2
 8008cec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d90e      	bls.n	8008d14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d02:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7fd fcf6 	bl	80066fe <vListInsert>
 8008d12:	e016      	b.n	8008d42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d14:	2300      	movs	r3, #0
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7ff fd60 	bl	80087e4 <xTimerGenericCommand>
 8008d24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10a      	bne.n	8008d42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	603b      	str	r3, [r7, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	e7fe      	b.n	8008d40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d42:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1b1      	bne.n	8008cb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <prvSwitchTimerLists+0xc4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a04      	ldr	r2, [pc, #16]	; (8008d68 <prvSwitchTimerLists+0xc0>)
 8008d58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d5a:	4a04      	ldr	r2, [pc, #16]	; (8008d6c <prvSwitchTimerLists+0xc4>)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	6013      	str	r3, [r2, #0]
}
 8008d60:	bf00      	nop
 8008d62:	3718      	adds	r7, #24
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20001a90 	.word	0x20001a90
 8008d6c:	20001a94 	.word	0x20001a94

08008d70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d76:	f000 f965 	bl	8009044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <prvCheckForValidListAndQueue+0x60>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d120      	bne.n	8008dc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d82:	4814      	ldr	r0, [pc, #80]	; (8008dd4 <prvCheckForValidListAndQueue+0x64>)
 8008d84:	f7fd fc6a 	bl	800665c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d88:	4813      	ldr	r0, [pc, #76]	; (8008dd8 <prvCheckForValidListAndQueue+0x68>)
 8008d8a:	f7fd fc67 	bl	800665c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d8e:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <prvCheckForValidListAndQueue+0x6c>)
 8008d90:	4a10      	ldr	r2, [pc, #64]	; (8008dd4 <prvCheckForValidListAndQueue+0x64>)
 8008d92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d94:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <prvCheckForValidListAndQueue+0x70>)
 8008d96:	4a10      	ldr	r2, [pc, #64]	; (8008dd8 <prvCheckForValidListAndQueue+0x68>)
 8008d98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4b11      	ldr	r3, [pc, #68]	; (8008de4 <prvCheckForValidListAndQueue+0x74>)
 8008da0:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <prvCheckForValidListAndQueue+0x78>)
 8008da2:	2110      	movs	r1, #16
 8008da4:	200a      	movs	r0, #10
 8008da6:	f7fd fd75 	bl	8006894 <xQueueGenericCreateStatic>
 8008daa:	4603      	mov	r3, r0
 8008dac:	4a08      	ldr	r2, [pc, #32]	; (8008dd0 <prvCheckForValidListAndQueue+0x60>)
 8008dae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <prvCheckForValidListAndQueue+0x60>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <prvCheckForValidListAndQueue+0x60>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	490b      	ldr	r1, [pc, #44]	; (8008dec <prvCheckForValidListAndQueue+0x7c>)
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fe fc5e 	bl	8007680 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dc4:	f000 f96e 	bl	80090a4 <vPortExitCritical>
}
 8008dc8:	bf00      	nop
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20001a98 	.word	0x20001a98
 8008dd4:	20001a68 	.word	0x20001a68
 8008dd8:	20001a7c 	.word	0x20001a7c
 8008ddc:	20001a90 	.word	0x20001a90
 8008de0:	20001a94 	.word	0x20001a94
 8008de4:	20001b44 	.word	0x20001b44
 8008de8:	20001aa4 	.word	0x20001aa4
 8008dec:	0800b180 	.word	0x0800b180

08008df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3b04      	subs	r3, #4
 8008e00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3b04      	subs	r3, #4
 8008e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f023 0201 	bic.w	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	3b04      	subs	r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e20:	4a0c      	ldr	r2, [pc, #48]	; (8008e54 <pxPortInitialiseStack+0x64>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3b14      	subs	r3, #20
 8008e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3b04      	subs	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f06f 0202 	mvn.w	r2, #2
 8008e3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3b20      	subs	r3, #32
 8008e44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e46:	68fb      	ldr	r3, [r7, #12]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	08008e59 	.word	0x08008e59

08008e58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <prvTaskExitError+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d00a      	beq.n	8008e82 <prvTaskExitError+0x2a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <prvTaskExitError+0x28>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e96:	bf00      	nop
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0fc      	beq.n	8008e98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20000410 	.word	0x20000410

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	20001568 	.word	0x20001568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b46      	ldr	r3, [pc, #280]	; (8009020 <xPortStartScheduler+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	; (8009024 <xPortStartScheduler+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10a      	bne.n	8008f26 <xPortStartScheduler+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <xPortStartScheduler+0x120>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3f      	ldr	r2, [pc, #252]	; (8009028 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10a      	bne.n	8008f46 <xPortStartScheduler+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xPortStartScheduler+0x12c>)
 8008f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b31      	ldr	r3, [pc, #196]	; (8009030 <xPortStartScheduler+0x130>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xPortStartScheduler+0x134>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <xPortStartScheduler+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <xPortStartScheduler+0x134>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <xPortStartScheduler+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00a      	beq.n	8008fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <xPortStartScheduler+0x134>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <xPortStartScheduler+0x134>)
 8008fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <xPortStartScheduler+0x138>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fee:	f000 f8dd 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <xPortStartScheduler+0x13c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ff8:	f000 f8fc 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <xPortStartScheduler+0x140>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <xPortStartScheduler+0x140>)
 8009002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009008:	f7ff ff66 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900c:	f7fe ff48 	bl	8007ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8009010:	f7ff ff22 	bl	8008e58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	410fc271 	.word	0x410fc271
 8009028:	410fc270 	.word	0x410fc270
 800902c:	e000e400 	.word	0xe000e400
 8009030:	20001b94 	.word	0x20001b94
 8009034:	20001b98 	.word	0x20001b98
 8009038:	e000ed20 	.word	0xe000ed20
 800903c:	20000410 	.word	0x20000410
 8009040:	e000ef34 	.word	0xe000ef34

08009044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <vPortEnterCritical+0x58>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a0d      	ldr	r2, [pc, #52]	; (800909c <vPortEnterCritical+0x58>)
 8009066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <vPortEnterCritical+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d10f      	bne.n	8009090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortEnterCritical+0x5c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <vPortEnterCritical+0x4c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vPortEnterCritical+0x4a>
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000410 	.word	0x20000410
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <vPortExitCritical+0x50>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vPortExitCritical+0x24>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vPortExitCritical+0x50>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <vPortExitCritical+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <vPortExitCritical+0x42>
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000410 	.word	0x20000410
	...

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7fe feb6 	bl	8007ea0 <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	20001568 	.word	0x20001568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7fe fdd3 	bl	8007d2c <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <xPortSysTickHandler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000404 	.word	0x20000404
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d914      	bls.n	8009244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x70>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vPortValidateInterruptPriority+0x74>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20a      	bcs.n	8009244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d90a      	bls.n	800926a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <vPortValidateInterruptPriority+0x60>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	20001b94 	.word	0x20001b94
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	20001b98 	.word	0x20001b98

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7fe fc8e 	bl	8007bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <pvPortMalloc+0x180>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <pvPortMalloc+0x184>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8093 	bne.w	80093d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0x6c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <pvPortMalloc+0x150>
 80092fa:	4b45      	ldr	r3, [pc, #276]	; (8009410 <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d869      	bhi.n	80093d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b43      	ldr	r3, [pc, #268]	; (8009414 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa4>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d050      	beq.n	80093d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d91f      	bls.n	8009398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <pvPortMalloc+0xf8>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f000 f908 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <pvPortMalloc+0x188>)
 80093a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <pvPortMalloc+0x188>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <pvPortMalloc+0x190>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <pvPortMalloc+0x188>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x190>)
 80093b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <pvPortMalloc+0x194>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <pvPortMalloc+0x194>)
 80093d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d8:	f7fe fbfa 	bl	8007bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <pvPortMalloc+0x174>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <pvPortMalloc+0x172>
	return pvReturn;
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3728      	adds	r7, #40	; 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	2000275c 	.word	0x2000275c
 800940c:	20002770 	.word	0x20002770
 8009410:	20002760 	.word	0x20002760
 8009414:	20002754 	.word	0x20002754
 8009418:	20002764 	.word	0x20002764
 800941c:	20002768 	.word	0x20002768

08009420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009432:	2308      	movs	r3, #8
 8009434:	425b      	negs	r3, r3
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <vPortFree+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vPortFree+0x44>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <vPortFree+0x62>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <vPortFree+0xb8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11a      	bne.n	80094ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fb84 	bl	8007bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortFree+0xbc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <vPortFree+0xbc>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f874 	bl	80095a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vPortFree+0xc0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <vPortFree+0xc0>)
 80094c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094ca:	f7fe fb81 	bl	8007bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20002770 	.word	0x20002770
 80094dc:	20002760 	.word	0x20002760
 80094e0:	2000276c 	.word	0x2000276c

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	; (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20001b9c 	.word	0x20001b9c
 8009594:	20002754 	.word	0x20002754
 8009598:	2000275c 	.word	0x2000275c
 800959c:	20002764 	.word	0x20002764
 80095a0:	20002760 	.word	0x20002760
 80095a4:	20002770 	.word	0x20002770

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20002754 	.word	0x20002754
 8009658:	2000275c 	.word	0x2000275c

0800965c <exit>:
 800965c:	b508      	push	{r3, lr}
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <exit+0x1c>)
 8009660:	4604      	mov	r4, r0
 8009662:	b113      	cbz	r3, 800966a <exit+0xe>
 8009664:	2100      	movs	r1, #0
 8009666:	f3af 8000 	nop.w
 800966a:	4b04      	ldr	r3, [pc, #16]	; (800967c <exit+0x20>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	b103      	cbz	r3, 8009672 <exit+0x16>
 8009670:	4798      	blx	r3
 8009672:	4620      	mov	r0, r4
 8009674:	f7f8 fe4c 	bl	8002310 <_exit>
 8009678:	00000000 	.word	0x00000000
 800967c:	200028b4 	.word	0x200028b4

08009680 <malloc>:
 8009680:	4b02      	ldr	r3, [pc, #8]	; (800968c <malloc+0xc>)
 8009682:	4601      	mov	r1, r0
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f000 b82b 	b.w	80096e0 <_malloc_r>
 800968a:	bf00      	nop
 800968c:	20000460 	.word	0x20000460

08009690 <free>:
 8009690:	4b02      	ldr	r3, [pc, #8]	; (800969c <free+0xc>)
 8009692:	4601      	mov	r1, r0
 8009694:	6818      	ldr	r0, [r3, #0]
 8009696:	f000 b921 	b.w	80098dc <_free_r>
 800969a:	bf00      	nop
 800969c:	20000460 	.word	0x20000460

080096a0 <sbrk_aligned>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4e0e      	ldr	r6, [pc, #56]	; (80096dc <sbrk_aligned+0x3c>)
 80096a4:	460c      	mov	r4, r1
 80096a6:	6831      	ldr	r1, [r6, #0]
 80096a8:	4605      	mov	r5, r0
 80096aa:	b911      	cbnz	r1, 80096b2 <sbrk_aligned+0x12>
 80096ac:	f000 f8cc 	bl	8009848 <_sbrk_r>
 80096b0:	6030      	str	r0, [r6, #0]
 80096b2:	4621      	mov	r1, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	f000 f8c7 	bl	8009848 <_sbrk_r>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	d00a      	beq.n	80096d4 <sbrk_aligned+0x34>
 80096be:	1cc4      	adds	r4, r0, #3
 80096c0:	f024 0403 	bic.w	r4, r4, #3
 80096c4:	42a0      	cmp	r0, r4
 80096c6:	d007      	beq.n	80096d8 <sbrk_aligned+0x38>
 80096c8:	1a21      	subs	r1, r4, r0
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f8bc 	bl	8009848 <_sbrk_r>
 80096d0:	3001      	adds	r0, #1
 80096d2:	d101      	bne.n	80096d8 <sbrk_aligned+0x38>
 80096d4:	f04f 34ff 	mov.w	r4, #4294967295
 80096d8:	4620      	mov	r0, r4
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	20002778 	.word	0x20002778

080096e0 <_malloc_r>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	1ccd      	adds	r5, r1, #3
 80096e6:	f025 0503 	bic.w	r5, r5, #3
 80096ea:	3508      	adds	r5, #8
 80096ec:	2d0c      	cmp	r5, #12
 80096ee:	bf38      	it	cc
 80096f0:	250c      	movcc	r5, #12
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	4607      	mov	r7, r0
 80096f6:	db01      	blt.n	80096fc <_malloc_r+0x1c>
 80096f8:	42a9      	cmp	r1, r5
 80096fa:	d905      	bls.n	8009708 <_malloc_r+0x28>
 80096fc:	230c      	movs	r3, #12
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	2600      	movs	r6, #0
 8009702:	4630      	mov	r0, r6
 8009704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009708:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097dc <_malloc_r+0xfc>
 800970c:	f000 f868 	bl	80097e0 <__malloc_lock>
 8009710:	f8d8 3000 	ldr.w	r3, [r8]
 8009714:	461c      	mov	r4, r3
 8009716:	bb5c      	cbnz	r4, 8009770 <_malloc_r+0x90>
 8009718:	4629      	mov	r1, r5
 800971a:	4638      	mov	r0, r7
 800971c:	f7ff ffc0 	bl	80096a0 <sbrk_aligned>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	4604      	mov	r4, r0
 8009724:	d155      	bne.n	80097d2 <_malloc_r+0xf2>
 8009726:	f8d8 4000 	ldr.w	r4, [r8]
 800972a:	4626      	mov	r6, r4
 800972c:	2e00      	cmp	r6, #0
 800972e:	d145      	bne.n	80097bc <_malloc_r+0xdc>
 8009730:	2c00      	cmp	r4, #0
 8009732:	d048      	beq.n	80097c6 <_malloc_r+0xe6>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	4631      	mov	r1, r6
 8009738:	4638      	mov	r0, r7
 800973a:	eb04 0903 	add.w	r9, r4, r3
 800973e:	f000 f883 	bl	8009848 <_sbrk_r>
 8009742:	4581      	cmp	r9, r0
 8009744:	d13f      	bne.n	80097c6 <_malloc_r+0xe6>
 8009746:	6821      	ldr	r1, [r4, #0]
 8009748:	1a6d      	subs	r5, r5, r1
 800974a:	4629      	mov	r1, r5
 800974c:	4638      	mov	r0, r7
 800974e:	f7ff ffa7 	bl	80096a0 <sbrk_aligned>
 8009752:	3001      	adds	r0, #1
 8009754:	d037      	beq.n	80097c6 <_malloc_r+0xe6>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	442b      	add	r3, r5
 800975a:	6023      	str	r3, [r4, #0]
 800975c:	f8d8 3000 	ldr.w	r3, [r8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d038      	beq.n	80097d6 <_malloc_r+0xf6>
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	42a2      	cmp	r2, r4
 8009768:	d12b      	bne.n	80097c2 <_malloc_r+0xe2>
 800976a:	2200      	movs	r2, #0
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	e00f      	b.n	8009790 <_malloc_r+0xb0>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	1b52      	subs	r2, r2, r5
 8009774:	d41f      	bmi.n	80097b6 <_malloc_r+0xd6>
 8009776:	2a0b      	cmp	r2, #11
 8009778:	d917      	bls.n	80097aa <_malloc_r+0xca>
 800977a:	1961      	adds	r1, r4, r5
 800977c:	42a3      	cmp	r3, r4
 800977e:	6025      	str	r5, [r4, #0]
 8009780:	bf18      	it	ne
 8009782:	6059      	strne	r1, [r3, #4]
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	bf08      	it	eq
 8009788:	f8c8 1000 	streq.w	r1, [r8]
 800978c:	5162      	str	r2, [r4, r5]
 800978e:	604b      	str	r3, [r1, #4]
 8009790:	4638      	mov	r0, r7
 8009792:	f104 060b 	add.w	r6, r4, #11
 8009796:	f000 f829 	bl	80097ec <__malloc_unlock>
 800979a:	f026 0607 	bic.w	r6, r6, #7
 800979e:	1d23      	adds	r3, r4, #4
 80097a0:	1af2      	subs	r2, r6, r3
 80097a2:	d0ae      	beq.n	8009702 <_malloc_r+0x22>
 80097a4:	1b9b      	subs	r3, r3, r6
 80097a6:	50a3      	str	r3, [r4, r2]
 80097a8:	e7ab      	b.n	8009702 <_malloc_r+0x22>
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	d1dd      	bne.n	800976c <_malloc_r+0x8c>
 80097b0:	f8c8 2000 	str.w	r2, [r8]
 80097b4:	e7ec      	b.n	8009790 <_malloc_r+0xb0>
 80097b6:	4623      	mov	r3, r4
 80097b8:	6864      	ldr	r4, [r4, #4]
 80097ba:	e7ac      	b.n	8009716 <_malloc_r+0x36>
 80097bc:	4634      	mov	r4, r6
 80097be:	6876      	ldr	r6, [r6, #4]
 80097c0:	e7b4      	b.n	800972c <_malloc_r+0x4c>
 80097c2:	4613      	mov	r3, r2
 80097c4:	e7cc      	b.n	8009760 <_malloc_r+0x80>
 80097c6:	230c      	movs	r3, #12
 80097c8:	603b      	str	r3, [r7, #0]
 80097ca:	4638      	mov	r0, r7
 80097cc:	f000 f80e 	bl	80097ec <__malloc_unlock>
 80097d0:	e797      	b.n	8009702 <_malloc_r+0x22>
 80097d2:	6025      	str	r5, [r4, #0]
 80097d4:	e7dc      	b.n	8009790 <_malloc_r+0xb0>
 80097d6:	605b      	str	r3, [r3, #4]
 80097d8:	deff      	udf	#255	; 0xff
 80097da:	bf00      	nop
 80097dc:	20002774 	.word	0x20002774

080097e0 <__malloc_lock>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__malloc_lock+0x8>)
 80097e2:	f000 b86b 	b.w	80098bc <__retarget_lock_acquire_recursive>
 80097e6:	bf00      	nop
 80097e8:	200028bc 	.word	0x200028bc

080097ec <__malloc_unlock>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__malloc_unlock+0x8>)
 80097ee:	f000 b866 	b.w	80098be <__retarget_lock_release_recursive>
 80097f2:	bf00      	nop
 80097f4:	200028bc 	.word	0x200028bc

080097f8 <siprintf>:
 80097f8:	b40e      	push	{r1, r2, r3}
 80097fa:	b500      	push	{lr}
 80097fc:	b09c      	sub	sp, #112	; 0x70
 80097fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009800:	9002      	str	r0, [sp, #8]
 8009802:	9006      	str	r0, [sp, #24]
 8009804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009808:	4809      	ldr	r0, [pc, #36]	; (8009830 <siprintf+0x38>)
 800980a:	9107      	str	r1, [sp, #28]
 800980c:	9104      	str	r1, [sp, #16]
 800980e:	4909      	ldr	r1, [pc, #36]	; (8009834 <siprintf+0x3c>)
 8009810:	f853 2b04 	ldr.w	r2, [r3], #4
 8009814:	9105      	str	r1, [sp, #20]
 8009816:	6800      	ldr	r0, [r0, #0]
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	a902      	add	r1, sp, #8
 800981c:	f000 f904 	bl	8009a28 <_svfiprintf_r>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	b01c      	add	sp, #112	; 0x70
 8009828:	f85d eb04 	ldr.w	lr, [sp], #4
 800982c:	b003      	add	sp, #12
 800982e:	4770      	bx	lr
 8009830:	20000460 	.word	0x20000460
 8009834:	ffff0208 	.word	0xffff0208

08009838 <memset>:
 8009838:	4402      	add	r2, r0
 800983a:	4603      	mov	r3, r0
 800983c:	4293      	cmp	r3, r2
 800983e:	d100      	bne.n	8009842 <memset+0xa>
 8009840:	4770      	bx	lr
 8009842:	f803 1b01 	strb.w	r1, [r3], #1
 8009846:	e7f9      	b.n	800983c <memset+0x4>

08009848 <_sbrk_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d06      	ldr	r5, [pc, #24]	; (8009864 <_sbrk_r+0x1c>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	f7f8 fd66 	bl	8002324 <_sbrk>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_sbrk_r+0x1a>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_sbrk_r+0x1a>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	200028b8 	.word	0x200028b8

08009868 <__errno>:
 8009868:	4b01      	ldr	r3, [pc, #4]	; (8009870 <__errno+0x8>)
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	20000460 	.word	0x20000460

08009874 <__libc_init_array>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	4d0d      	ldr	r5, [pc, #52]	; (80098ac <__libc_init_array+0x38>)
 8009878:	4c0d      	ldr	r4, [pc, #52]	; (80098b0 <__libc_init_array+0x3c>)
 800987a:	1b64      	subs	r4, r4, r5
 800987c:	10a4      	asrs	r4, r4, #2
 800987e:	2600      	movs	r6, #0
 8009880:	42a6      	cmp	r6, r4
 8009882:	d109      	bne.n	8009898 <__libc_init_array+0x24>
 8009884:	4d0b      	ldr	r5, [pc, #44]	; (80098b4 <__libc_init_array+0x40>)
 8009886:	4c0c      	ldr	r4, [pc, #48]	; (80098b8 <__libc_init_array+0x44>)
 8009888:	f001 fc36 	bl	800b0f8 <_init>
 800988c:	1b64      	subs	r4, r4, r5
 800988e:	10a4      	asrs	r4, r4, #2
 8009890:	2600      	movs	r6, #0
 8009892:	42a6      	cmp	r6, r4
 8009894:	d105      	bne.n	80098a2 <__libc_init_array+0x2e>
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	f855 3b04 	ldr.w	r3, [r5], #4
 800989c:	4798      	blx	r3
 800989e:	3601      	adds	r6, #1
 80098a0:	e7ee      	b.n	8009880 <__libc_init_array+0xc>
 80098a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a6:	4798      	blx	r3
 80098a8:	3601      	adds	r6, #1
 80098aa:	e7f2      	b.n	8009892 <__libc_init_array+0x1e>
 80098ac:	0800b458 	.word	0x0800b458
 80098b0:	0800b458 	.word	0x0800b458
 80098b4:	0800b458 	.word	0x0800b458
 80098b8:	0800b45c 	.word	0x0800b45c

080098bc <__retarget_lock_acquire_recursive>:
 80098bc:	4770      	bx	lr

080098be <__retarget_lock_release_recursive>:
 80098be:	4770      	bx	lr

080098c0 <memcpy>:
 80098c0:	440a      	add	r2, r1
 80098c2:	4291      	cmp	r1, r2
 80098c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c8:	d100      	bne.n	80098cc <memcpy+0xc>
 80098ca:	4770      	bx	lr
 80098cc:	b510      	push	{r4, lr}
 80098ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d6:	4291      	cmp	r1, r2
 80098d8:	d1f9      	bne.n	80098ce <memcpy+0xe>
 80098da:	bd10      	pop	{r4, pc}

080098dc <_free_r>:
 80098dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098de:	2900      	cmp	r1, #0
 80098e0:	d044      	beq.n	800996c <_free_r+0x90>
 80098e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098e6:	9001      	str	r0, [sp, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f1a1 0404 	sub.w	r4, r1, #4
 80098ee:	bfb8      	it	lt
 80098f0:	18e4      	addlt	r4, r4, r3
 80098f2:	f7ff ff75 	bl	80097e0 <__malloc_lock>
 80098f6:	4a1e      	ldr	r2, [pc, #120]	; (8009970 <_free_r+0x94>)
 80098f8:	9801      	ldr	r0, [sp, #4]
 80098fa:	6813      	ldr	r3, [r2, #0]
 80098fc:	b933      	cbnz	r3, 800990c <_free_r+0x30>
 80098fe:	6063      	str	r3, [r4, #4]
 8009900:	6014      	str	r4, [r2, #0]
 8009902:	b003      	add	sp, #12
 8009904:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009908:	f7ff bf70 	b.w	80097ec <__malloc_unlock>
 800990c:	42a3      	cmp	r3, r4
 800990e:	d908      	bls.n	8009922 <_free_r+0x46>
 8009910:	6825      	ldr	r5, [r4, #0]
 8009912:	1961      	adds	r1, r4, r5
 8009914:	428b      	cmp	r3, r1
 8009916:	bf01      	itttt	eq
 8009918:	6819      	ldreq	r1, [r3, #0]
 800991a:	685b      	ldreq	r3, [r3, #4]
 800991c:	1949      	addeq	r1, r1, r5
 800991e:	6021      	streq	r1, [r4, #0]
 8009920:	e7ed      	b.n	80098fe <_free_r+0x22>
 8009922:	461a      	mov	r2, r3
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	b10b      	cbz	r3, 800992c <_free_r+0x50>
 8009928:	42a3      	cmp	r3, r4
 800992a:	d9fa      	bls.n	8009922 <_free_r+0x46>
 800992c:	6811      	ldr	r1, [r2, #0]
 800992e:	1855      	adds	r5, r2, r1
 8009930:	42a5      	cmp	r5, r4
 8009932:	d10b      	bne.n	800994c <_free_r+0x70>
 8009934:	6824      	ldr	r4, [r4, #0]
 8009936:	4421      	add	r1, r4
 8009938:	1854      	adds	r4, r2, r1
 800993a:	42a3      	cmp	r3, r4
 800993c:	6011      	str	r1, [r2, #0]
 800993e:	d1e0      	bne.n	8009902 <_free_r+0x26>
 8009940:	681c      	ldr	r4, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	6053      	str	r3, [r2, #4]
 8009946:	440c      	add	r4, r1
 8009948:	6014      	str	r4, [r2, #0]
 800994a:	e7da      	b.n	8009902 <_free_r+0x26>
 800994c:	d902      	bls.n	8009954 <_free_r+0x78>
 800994e:	230c      	movs	r3, #12
 8009950:	6003      	str	r3, [r0, #0]
 8009952:	e7d6      	b.n	8009902 <_free_r+0x26>
 8009954:	6825      	ldr	r5, [r4, #0]
 8009956:	1961      	adds	r1, r4, r5
 8009958:	428b      	cmp	r3, r1
 800995a:	bf04      	itt	eq
 800995c:	6819      	ldreq	r1, [r3, #0]
 800995e:	685b      	ldreq	r3, [r3, #4]
 8009960:	6063      	str	r3, [r4, #4]
 8009962:	bf04      	itt	eq
 8009964:	1949      	addeq	r1, r1, r5
 8009966:	6021      	streq	r1, [r4, #0]
 8009968:	6054      	str	r4, [r2, #4]
 800996a:	e7ca      	b.n	8009902 <_free_r+0x26>
 800996c:	b003      	add	sp, #12
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	20002774 	.word	0x20002774

08009974 <__ssputs_r>:
 8009974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009978:	688e      	ldr	r6, [r1, #8]
 800997a:	461f      	mov	r7, r3
 800997c:	42be      	cmp	r6, r7
 800997e:	680b      	ldr	r3, [r1, #0]
 8009980:	4682      	mov	sl, r0
 8009982:	460c      	mov	r4, r1
 8009984:	4690      	mov	r8, r2
 8009986:	d82c      	bhi.n	80099e2 <__ssputs_r+0x6e>
 8009988:	898a      	ldrh	r2, [r1, #12]
 800998a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800998e:	d026      	beq.n	80099de <__ssputs_r+0x6a>
 8009990:	6965      	ldr	r5, [r4, #20]
 8009992:	6909      	ldr	r1, [r1, #16]
 8009994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009998:	eba3 0901 	sub.w	r9, r3, r1
 800999c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099a0:	1c7b      	adds	r3, r7, #1
 80099a2:	444b      	add	r3, r9
 80099a4:	106d      	asrs	r5, r5, #1
 80099a6:	429d      	cmp	r5, r3
 80099a8:	bf38      	it	cc
 80099aa:	461d      	movcc	r5, r3
 80099ac:	0553      	lsls	r3, r2, #21
 80099ae:	d527      	bpl.n	8009a00 <__ssputs_r+0x8c>
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7ff fe95 	bl	80096e0 <_malloc_r>
 80099b6:	4606      	mov	r6, r0
 80099b8:	b360      	cbz	r0, 8009a14 <__ssputs_r+0xa0>
 80099ba:	6921      	ldr	r1, [r4, #16]
 80099bc:	464a      	mov	r2, r9
 80099be:	f7ff ff7f 	bl	80098c0 <memcpy>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	6126      	str	r6, [r4, #16]
 80099d0:	6165      	str	r5, [r4, #20]
 80099d2:	444e      	add	r6, r9
 80099d4:	eba5 0509 	sub.w	r5, r5, r9
 80099d8:	6026      	str	r6, [r4, #0]
 80099da:	60a5      	str	r5, [r4, #8]
 80099dc:	463e      	mov	r6, r7
 80099de:	42be      	cmp	r6, r7
 80099e0:	d900      	bls.n	80099e4 <__ssputs_r+0x70>
 80099e2:	463e      	mov	r6, r7
 80099e4:	6820      	ldr	r0, [r4, #0]
 80099e6:	4632      	mov	r2, r6
 80099e8:	4641      	mov	r1, r8
 80099ea:	f000 faab 	bl	8009f44 <memmove>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	1b9b      	subs	r3, r3, r6
 80099f2:	60a3      	str	r3, [r4, #8]
 80099f4:	6823      	ldr	r3, [r4, #0]
 80099f6:	4433      	add	r3, r6
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	2000      	movs	r0, #0
 80099fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a00:	462a      	mov	r2, r5
 8009a02:	f000 fab9 	bl	8009f78 <_realloc_r>
 8009a06:	4606      	mov	r6, r0
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1e0      	bne.n	80099ce <__ssputs_r+0x5a>
 8009a0c:	6921      	ldr	r1, [r4, #16]
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f7ff ff64 	bl	80098dc <_free_r>
 8009a14:	230c      	movs	r3, #12
 8009a16:	f8ca 3000 	str.w	r3, [sl]
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	f04f 30ff 	mov.w	r0, #4294967295
 8009a26:	e7e9      	b.n	80099fc <__ssputs_r+0x88>

08009a28 <_svfiprintf_r>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	4698      	mov	r8, r3
 8009a2e:	898b      	ldrh	r3, [r1, #12]
 8009a30:	061b      	lsls	r3, r3, #24
 8009a32:	b09d      	sub	sp, #116	; 0x74
 8009a34:	4607      	mov	r7, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	d50e      	bpl.n	8009a5a <_svfiprintf_r+0x32>
 8009a3c:	690b      	ldr	r3, [r1, #16]
 8009a3e:	b963      	cbnz	r3, 8009a5a <_svfiprintf_r+0x32>
 8009a40:	2140      	movs	r1, #64	; 0x40
 8009a42:	f7ff fe4d 	bl	80096e0 <_malloc_r>
 8009a46:	6028      	str	r0, [r5, #0]
 8009a48:	6128      	str	r0, [r5, #16]
 8009a4a:	b920      	cbnz	r0, 8009a56 <_svfiprintf_r+0x2e>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	f04f 30ff 	mov.w	r0, #4294967295
 8009a54:	e0d0      	b.n	8009bf8 <_svfiprintf_r+0x1d0>
 8009a56:	2340      	movs	r3, #64	; 0x40
 8009a58:	616b      	str	r3, [r5, #20]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5e:	2320      	movs	r3, #32
 8009a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a68:	2330      	movs	r3, #48	; 0x30
 8009a6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c10 <_svfiprintf_r+0x1e8>
 8009a6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a72:	f04f 0901 	mov.w	r9, #1
 8009a76:	4623      	mov	r3, r4
 8009a78:	469a      	mov	sl, r3
 8009a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a7e:	b10a      	cbz	r2, 8009a84 <_svfiprintf_r+0x5c>
 8009a80:	2a25      	cmp	r2, #37	; 0x25
 8009a82:	d1f9      	bne.n	8009a78 <_svfiprintf_r+0x50>
 8009a84:	ebba 0b04 	subs.w	fp, sl, r4
 8009a88:	d00b      	beq.n	8009aa2 <_svfiprintf_r+0x7a>
 8009a8a:	465b      	mov	r3, fp
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7ff ff6f 	bl	8009974 <__ssputs_r>
 8009a96:	3001      	adds	r0, #1
 8009a98:	f000 80a9 	beq.w	8009bee <_svfiprintf_r+0x1c6>
 8009a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a9e:	445a      	add	r2, fp
 8009aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8009aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 80a1 	beq.w	8009bee <_svfiprintf_r+0x1c6>
 8009aac:	2300      	movs	r3, #0
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ab6:	f10a 0a01 	add.w	sl, sl, #1
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	9307      	str	r3, [sp, #28]
 8009abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ac4:	4654      	mov	r4, sl
 8009ac6:	2205      	movs	r2, #5
 8009ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009acc:	4850      	ldr	r0, [pc, #320]	; (8009c10 <_svfiprintf_r+0x1e8>)
 8009ace:	f7f6 fb87 	bl	80001e0 <memchr>
 8009ad2:	9a04      	ldr	r2, [sp, #16]
 8009ad4:	b9d8      	cbnz	r0, 8009b0e <_svfiprintf_r+0xe6>
 8009ad6:	06d0      	lsls	r0, r2, #27
 8009ad8:	bf44      	itt	mi
 8009ada:	2320      	movmi	r3, #32
 8009adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae0:	0711      	lsls	r1, r2, #28
 8009ae2:	bf44      	itt	mi
 8009ae4:	232b      	movmi	r3, #43	; 0x2b
 8009ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aea:	f89a 3000 	ldrb.w	r3, [sl]
 8009aee:	2b2a      	cmp	r3, #42	; 0x2a
 8009af0:	d015      	beq.n	8009b1e <_svfiprintf_r+0xf6>
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	4654      	mov	r4, sl
 8009af6:	2000      	movs	r0, #0
 8009af8:	f04f 0c0a 	mov.w	ip, #10
 8009afc:	4621      	mov	r1, r4
 8009afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b02:	3b30      	subs	r3, #48	; 0x30
 8009b04:	2b09      	cmp	r3, #9
 8009b06:	d94d      	bls.n	8009ba4 <_svfiprintf_r+0x17c>
 8009b08:	b1b0      	cbz	r0, 8009b38 <_svfiprintf_r+0x110>
 8009b0a:	9207      	str	r2, [sp, #28]
 8009b0c:	e014      	b.n	8009b38 <_svfiprintf_r+0x110>
 8009b0e:	eba0 0308 	sub.w	r3, r0, r8
 8009b12:	fa09 f303 	lsl.w	r3, r9, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	46a2      	mov	sl, r4
 8009b1c:	e7d2      	b.n	8009ac4 <_svfiprintf_r+0x9c>
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	1d19      	adds	r1, r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	9103      	str	r1, [sp, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bfbb      	ittet	lt
 8009b2a:	425b      	neglt	r3, r3
 8009b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b30:	9307      	strge	r3, [sp, #28]
 8009b32:	9307      	strlt	r3, [sp, #28]
 8009b34:	bfb8      	it	lt
 8009b36:	9204      	strlt	r2, [sp, #16]
 8009b38:	7823      	ldrb	r3, [r4, #0]
 8009b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b3c:	d10c      	bne.n	8009b58 <_svfiprintf_r+0x130>
 8009b3e:	7863      	ldrb	r3, [r4, #1]
 8009b40:	2b2a      	cmp	r3, #42	; 0x2a
 8009b42:	d134      	bne.n	8009bae <_svfiprintf_r+0x186>
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	9203      	str	r2, [sp, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bfb8      	it	lt
 8009b50:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b54:	3402      	adds	r4, #2
 8009b56:	9305      	str	r3, [sp, #20]
 8009b58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c20 <_svfiprintf_r+0x1f8>
 8009b5c:	7821      	ldrb	r1, [r4, #0]
 8009b5e:	2203      	movs	r2, #3
 8009b60:	4650      	mov	r0, sl
 8009b62:	f7f6 fb3d 	bl	80001e0 <memchr>
 8009b66:	b138      	cbz	r0, 8009b78 <_svfiprintf_r+0x150>
 8009b68:	9b04      	ldr	r3, [sp, #16]
 8009b6a:	eba0 000a 	sub.w	r0, r0, sl
 8009b6e:	2240      	movs	r2, #64	; 0x40
 8009b70:	4082      	lsls	r2, r0
 8009b72:	4313      	orrs	r3, r2
 8009b74:	3401      	adds	r4, #1
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7c:	4825      	ldr	r0, [pc, #148]	; (8009c14 <_svfiprintf_r+0x1ec>)
 8009b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b82:	2206      	movs	r2, #6
 8009b84:	f7f6 fb2c 	bl	80001e0 <memchr>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d038      	beq.n	8009bfe <_svfiprintf_r+0x1d6>
 8009b8c:	4b22      	ldr	r3, [pc, #136]	; (8009c18 <_svfiprintf_r+0x1f0>)
 8009b8e:	bb1b      	cbnz	r3, 8009bd8 <_svfiprintf_r+0x1b0>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	3307      	adds	r3, #7
 8009b94:	f023 0307 	bic.w	r3, r3, #7
 8009b98:	3308      	adds	r3, #8
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9e:	4433      	add	r3, r6
 8009ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ba2:	e768      	b.n	8009a76 <_svfiprintf_r+0x4e>
 8009ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba8:	460c      	mov	r4, r1
 8009baa:	2001      	movs	r0, #1
 8009bac:	e7a6      	b.n	8009afc <_svfiprintf_r+0xd4>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	3401      	adds	r4, #1
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f04f 0c0a 	mov.w	ip, #10
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bc0:	3a30      	subs	r2, #48	; 0x30
 8009bc2:	2a09      	cmp	r2, #9
 8009bc4:	d903      	bls.n	8009bce <_svfiprintf_r+0x1a6>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0c6      	beq.n	8009b58 <_svfiprintf_r+0x130>
 8009bca:	9105      	str	r1, [sp, #20]
 8009bcc:	e7c4      	b.n	8009b58 <_svfiprintf_r+0x130>
 8009bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e7f0      	b.n	8009bba <_svfiprintf_r+0x192>
 8009bd8:	ab03      	add	r3, sp, #12
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	462a      	mov	r2, r5
 8009bde:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <_svfiprintf_r+0x1f4>)
 8009be0:	a904      	add	r1, sp, #16
 8009be2:	4638      	mov	r0, r7
 8009be4:	f3af 8000 	nop.w
 8009be8:	1c42      	adds	r2, r0, #1
 8009bea:	4606      	mov	r6, r0
 8009bec:	d1d6      	bne.n	8009b9c <_svfiprintf_r+0x174>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	065b      	lsls	r3, r3, #25
 8009bf2:	f53f af2d 	bmi.w	8009a50 <_svfiprintf_r+0x28>
 8009bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf8:	b01d      	add	sp, #116	; 0x74
 8009bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfe:	ab03      	add	r3, sp, #12
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	462a      	mov	r2, r5
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <_svfiprintf_r+0x1f4>)
 8009c06:	a904      	add	r1, sp, #16
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f000 f879 	bl	8009d00 <_printf_i>
 8009c0e:	e7eb      	b.n	8009be8 <_svfiprintf_r+0x1c0>
 8009c10:	0800b240 	.word	0x0800b240
 8009c14:	0800b24a 	.word	0x0800b24a
 8009c18:	00000000 	.word	0x00000000
 8009c1c:	08009975 	.word	0x08009975
 8009c20:	0800b246 	.word	0x0800b246

08009c24 <_printf_common>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	4616      	mov	r6, r2
 8009c2a:	4699      	mov	r9, r3
 8009c2c:	688a      	ldr	r2, [r1, #8]
 8009c2e:	690b      	ldr	r3, [r1, #16]
 8009c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	bfb8      	it	lt
 8009c38:	4613      	movlt	r3, r2
 8009c3a:	6033      	str	r3, [r6, #0]
 8009c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c40:	4607      	mov	r7, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b10a      	cbz	r2, 8009c4a <_printf_common+0x26>
 8009c46:	3301      	adds	r3, #1
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	0699      	lsls	r1, r3, #26
 8009c4e:	bf42      	ittt	mi
 8009c50:	6833      	ldrmi	r3, [r6, #0]
 8009c52:	3302      	addmi	r3, #2
 8009c54:	6033      	strmi	r3, [r6, #0]
 8009c56:	6825      	ldr	r5, [r4, #0]
 8009c58:	f015 0506 	ands.w	r5, r5, #6
 8009c5c:	d106      	bne.n	8009c6c <_printf_common+0x48>
 8009c5e:	f104 0a19 	add.w	sl, r4, #25
 8009c62:	68e3      	ldr	r3, [r4, #12]
 8009c64:	6832      	ldr	r2, [r6, #0]
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dc26      	bgt.n	8009cba <_printf_common+0x96>
 8009c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c70:	1e13      	subs	r3, r2, #0
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	bf18      	it	ne
 8009c76:	2301      	movne	r3, #1
 8009c78:	0692      	lsls	r2, r2, #26
 8009c7a:	d42b      	bmi.n	8009cd4 <_printf_common+0xb0>
 8009c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c80:	4649      	mov	r1, r9
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c0      	blx	r8
 8009c86:	3001      	adds	r0, #1
 8009c88:	d01e      	beq.n	8009cc8 <_printf_common+0xa4>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	6922      	ldr	r2, [r4, #16]
 8009c8e:	f003 0306 	and.w	r3, r3, #6
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	bf02      	ittt	eq
 8009c96:	68e5      	ldreq	r5, [r4, #12]
 8009c98:	6833      	ldreq	r3, [r6, #0]
 8009c9a:	1aed      	subeq	r5, r5, r3
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	bf0c      	ite	eq
 8009ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca4:	2500      	movne	r5, #0
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	bfc4      	itt	gt
 8009caa:	1a9b      	subgt	r3, r3, r2
 8009cac:	18ed      	addgt	r5, r5, r3
 8009cae:	2600      	movs	r6, #0
 8009cb0:	341a      	adds	r4, #26
 8009cb2:	42b5      	cmp	r5, r6
 8009cb4:	d11a      	bne.n	8009cec <_printf_common+0xc8>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e008      	b.n	8009ccc <_printf_common+0xa8>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	47c0      	blx	r8
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d103      	bne.n	8009cd0 <_printf_common+0xac>
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	e7c6      	b.n	8009c62 <_printf_common+0x3e>
 8009cd4:	18e1      	adds	r1, r4, r3
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	2030      	movs	r0, #48	; 0x30
 8009cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cde:	4422      	add	r2, r4
 8009ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ce8:	3302      	adds	r3, #2
 8009cea:	e7c7      	b.n	8009c7c <_printf_common+0x58>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c0      	blx	r8
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d0e6      	beq.n	8009cc8 <_printf_common+0xa4>
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	e7d9      	b.n	8009cb2 <_printf_common+0x8e>
	...

08009d00 <_printf_i>:
 8009d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	7e0f      	ldrb	r7, [r1, #24]
 8009d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d08:	2f78      	cmp	r7, #120	; 0x78
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	469a      	mov	sl, r3
 8009d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d16:	d807      	bhi.n	8009d28 <_printf_i+0x28>
 8009d18:	2f62      	cmp	r7, #98	; 0x62
 8009d1a:	d80a      	bhi.n	8009d32 <_printf_i+0x32>
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	f000 80d4 	beq.w	8009eca <_printf_i+0x1ca>
 8009d22:	2f58      	cmp	r7, #88	; 0x58
 8009d24:	f000 80c0 	beq.w	8009ea8 <_printf_i+0x1a8>
 8009d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d30:	e03a      	b.n	8009da8 <_printf_i+0xa8>
 8009d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d36:	2b15      	cmp	r3, #21
 8009d38:	d8f6      	bhi.n	8009d28 <_printf_i+0x28>
 8009d3a:	a101      	add	r1, pc, #4	; (adr r1, 8009d40 <_printf_i+0x40>)
 8009d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009dad 	.word	0x08009dad
 8009d48:	08009d29 	.word	0x08009d29
 8009d4c:	08009d29 	.word	0x08009d29
 8009d50:	08009d29 	.word	0x08009d29
 8009d54:	08009d29 	.word	0x08009d29
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009d29 	.word	0x08009d29
 8009d60:	08009d29 	.word	0x08009d29
 8009d64:	08009d29 	.word	0x08009d29
 8009d68:	08009d29 	.word	0x08009d29
 8009d6c:	08009eb1 	.word	0x08009eb1
 8009d70:	08009dd9 	.word	0x08009dd9
 8009d74:	08009e6b 	.word	0x08009e6b
 8009d78:	08009d29 	.word	0x08009d29
 8009d7c:	08009d29 	.word	0x08009d29
 8009d80:	08009ed3 	.word	0x08009ed3
 8009d84:	08009d29 	.word	0x08009d29
 8009d88:	08009dd9 	.word	0x08009dd9
 8009d8c:	08009d29 	.word	0x08009d29
 8009d90:	08009d29 	.word	0x08009d29
 8009d94:	08009e73 	.word	0x08009e73
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	1d1a      	adds	r2, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	602a      	str	r2, [r5, #0]
 8009da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009da8:	2301      	movs	r3, #1
 8009daa:	e09f      	b.n	8009eec <_printf_i+0x1ec>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	682b      	ldr	r3, [r5, #0]
 8009db0:	0607      	lsls	r7, r0, #24
 8009db2:	f103 0104 	add.w	r1, r3, #4
 8009db6:	6029      	str	r1, [r5, #0]
 8009db8:	d501      	bpl.n	8009dbe <_printf_i+0xbe>
 8009dba:	681e      	ldr	r6, [r3, #0]
 8009dbc:	e003      	b.n	8009dc6 <_printf_i+0xc6>
 8009dbe:	0646      	lsls	r6, r0, #25
 8009dc0:	d5fb      	bpl.n	8009dba <_printf_i+0xba>
 8009dc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	da03      	bge.n	8009dd2 <_printf_i+0xd2>
 8009dca:	232d      	movs	r3, #45	; 0x2d
 8009dcc:	4276      	negs	r6, r6
 8009dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dd2:	485a      	ldr	r0, [pc, #360]	; (8009f3c <_printf_i+0x23c>)
 8009dd4:	230a      	movs	r3, #10
 8009dd6:	e012      	b.n	8009dfe <_printf_i+0xfe>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	6820      	ldr	r0, [r4, #0]
 8009ddc:	1d19      	adds	r1, r3, #4
 8009dde:	6029      	str	r1, [r5, #0]
 8009de0:	0605      	lsls	r5, r0, #24
 8009de2:	d501      	bpl.n	8009de8 <_printf_i+0xe8>
 8009de4:	681e      	ldr	r6, [r3, #0]
 8009de6:	e002      	b.n	8009dee <_printf_i+0xee>
 8009de8:	0641      	lsls	r1, r0, #25
 8009dea:	d5fb      	bpl.n	8009de4 <_printf_i+0xe4>
 8009dec:	881e      	ldrh	r6, [r3, #0]
 8009dee:	4853      	ldr	r0, [pc, #332]	; (8009f3c <_printf_i+0x23c>)
 8009df0:	2f6f      	cmp	r7, #111	; 0x6f
 8009df2:	bf0c      	ite	eq
 8009df4:	2308      	moveq	r3, #8
 8009df6:	230a      	movne	r3, #10
 8009df8:	2100      	movs	r1, #0
 8009dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dfe:	6865      	ldr	r5, [r4, #4]
 8009e00:	60a5      	str	r5, [r4, #8]
 8009e02:	2d00      	cmp	r5, #0
 8009e04:	bfa2      	ittt	ge
 8009e06:	6821      	ldrge	r1, [r4, #0]
 8009e08:	f021 0104 	bicge.w	r1, r1, #4
 8009e0c:	6021      	strge	r1, [r4, #0]
 8009e0e:	b90e      	cbnz	r6, 8009e14 <_printf_i+0x114>
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	d04b      	beq.n	8009eac <_printf_i+0x1ac>
 8009e14:	4615      	mov	r5, r2
 8009e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8009e1e:	5dc7      	ldrb	r7, [r0, r7]
 8009e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e24:	4637      	mov	r7, r6
 8009e26:	42bb      	cmp	r3, r7
 8009e28:	460e      	mov	r6, r1
 8009e2a:	d9f4      	bls.n	8009e16 <_printf_i+0x116>
 8009e2c:	2b08      	cmp	r3, #8
 8009e2e:	d10b      	bne.n	8009e48 <_printf_i+0x148>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	07de      	lsls	r6, r3, #31
 8009e34:	d508      	bpl.n	8009e48 <_printf_i+0x148>
 8009e36:	6923      	ldr	r3, [r4, #16]
 8009e38:	6861      	ldr	r1, [r4, #4]
 8009e3a:	4299      	cmp	r1, r3
 8009e3c:	bfde      	ittt	le
 8009e3e:	2330      	movle	r3, #48	; 0x30
 8009e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e48:	1b52      	subs	r2, r2, r5
 8009e4a:	6122      	str	r2, [r4, #16]
 8009e4c:	f8cd a000 	str.w	sl, [sp]
 8009e50:	464b      	mov	r3, r9
 8009e52:	aa03      	add	r2, sp, #12
 8009e54:	4621      	mov	r1, r4
 8009e56:	4640      	mov	r0, r8
 8009e58:	f7ff fee4 	bl	8009c24 <_printf_common>
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d14a      	bne.n	8009ef6 <_printf_i+0x1f6>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b004      	add	sp, #16
 8009e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	f043 0320 	orr.w	r3, r3, #32
 8009e70:	6023      	str	r3, [r4, #0]
 8009e72:	4833      	ldr	r0, [pc, #204]	; (8009f40 <_printf_i+0x240>)
 8009e74:	2778      	movs	r7, #120	; 0x78
 8009e76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	6829      	ldr	r1, [r5, #0]
 8009e7e:	061f      	lsls	r7, r3, #24
 8009e80:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e84:	d402      	bmi.n	8009e8c <_printf_i+0x18c>
 8009e86:	065f      	lsls	r7, r3, #25
 8009e88:	bf48      	it	mi
 8009e8a:	b2b6      	uxthmi	r6, r6
 8009e8c:	07df      	lsls	r7, r3, #31
 8009e8e:	bf48      	it	mi
 8009e90:	f043 0320 	orrmi.w	r3, r3, #32
 8009e94:	6029      	str	r1, [r5, #0]
 8009e96:	bf48      	it	mi
 8009e98:	6023      	strmi	r3, [r4, #0]
 8009e9a:	b91e      	cbnz	r6, 8009ea4 <_printf_i+0x1a4>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	e7a7      	b.n	8009df8 <_printf_i+0xf8>
 8009ea8:	4824      	ldr	r0, [pc, #144]	; (8009f3c <_printf_i+0x23c>)
 8009eaa:	e7e4      	b.n	8009e76 <_printf_i+0x176>
 8009eac:	4615      	mov	r5, r2
 8009eae:	e7bd      	b.n	8009e2c <_printf_i+0x12c>
 8009eb0:	682b      	ldr	r3, [r5, #0]
 8009eb2:	6826      	ldr	r6, [r4, #0]
 8009eb4:	6961      	ldr	r1, [r4, #20]
 8009eb6:	1d18      	adds	r0, r3, #4
 8009eb8:	6028      	str	r0, [r5, #0]
 8009eba:	0635      	lsls	r5, r6, #24
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	d501      	bpl.n	8009ec4 <_printf_i+0x1c4>
 8009ec0:	6019      	str	r1, [r3, #0]
 8009ec2:	e002      	b.n	8009eca <_printf_i+0x1ca>
 8009ec4:	0670      	lsls	r0, r6, #25
 8009ec6:	d5fb      	bpl.n	8009ec0 <_printf_i+0x1c0>
 8009ec8:	8019      	strh	r1, [r3, #0]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	6123      	str	r3, [r4, #16]
 8009ece:	4615      	mov	r5, r2
 8009ed0:	e7bc      	b.n	8009e4c <_printf_i+0x14c>
 8009ed2:	682b      	ldr	r3, [r5, #0]
 8009ed4:	1d1a      	adds	r2, r3, #4
 8009ed6:	602a      	str	r2, [r5, #0]
 8009ed8:	681d      	ldr	r5, [r3, #0]
 8009eda:	6862      	ldr	r2, [r4, #4]
 8009edc:	2100      	movs	r1, #0
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7f6 f97e 	bl	80001e0 <memchr>
 8009ee4:	b108      	cbz	r0, 8009eea <_printf_i+0x1ea>
 8009ee6:	1b40      	subs	r0, r0, r5
 8009ee8:	6060      	str	r0, [r4, #4]
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ef4:	e7aa      	b.n	8009e4c <_printf_i+0x14c>
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4649      	mov	r1, r9
 8009efc:	4640      	mov	r0, r8
 8009efe:	47d0      	blx	sl
 8009f00:	3001      	adds	r0, #1
 8009f02:	d0ad      	beq.n	8009e60 <_printf_i+0x160>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	079b      	lsls	r3, r3, #30
 8009f08:	d413      	bmi.n	8009f32 <_printf_i+0x232>
 8009f0a:	68e0      	ldr	r0, [r4, #12]
 8009f0c:	9b03      	ldr	r3, [sp, #12]
 8009f0e:	4298      	cmp	r0, r3
 8009f10:	bfb8      	it	lt
 8009f12:	4618      	movlt	r0, r3
 8009f14:	e7a6      	b.n	8009e64 <_printf_i+0x164>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4632      	mov	r2, r6
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	47d0      	blx	sl
 8009f20:	3001      	adds	r0, #1
 8009f22:	d09d      	beq.n	8009e60 <_printf_i+0x160>
 8009f24:	3501      	adds	r5, #1
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	9903      	ldr	r1, [sp, #12]
 8009f2a:	1a5b      	subs	r3, r3, r1
 8009f2c:	42ab      	cmp	r3, r5
 8009f2e:	dcf2      	bgt.n	8009f16 <_printf_i+0x216>
 8009f30:	e7eb      	b.n	8009f0a <_printf_i+0x20a>
 8009f32:	2500      	movs	r5, #0
 8009f34:	f104 0619 	add.w	r6, r4, #25
 8009f38:	e7f5      	b.n	8009f26 <_printf_i+0x226>
 8009f3a:	bf00      	nop
 8009f3c:	0800b251 	.word	0x0800b251
 8009f40:	0800b262 	.word	0x0800b262

08009f44 <memmove>:
 8009f44:	4288      	cmp	r0, r1
 8009f46:	b510      	push	{r4, lr}
 8009f48:	eb01 0402 	add.w	r4, r1, r2
 8009f4c:	d902      	bls.n	8009f54 <memmove+0x10>
 8009f4e:	4284      	cmp	r4, r0
 8009f50:	4623      	mov	r3, r4
 8009f52:	d807      	bhi.n	8009f64 <memmove+0x20>
 8009f54:	1e43      	subs	r3, r0, #1
 8009f56:	42a1      	cmp	r1, r4
 8009f58:	d008      	beq.n	8009f6c <memmove+0x28>
 8009f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f62:	e7f8      	b.n	8009f56 <memmove+0x12>
 8009f64:	4402      	add	r2, r0
 8009f66:	4601      	mov	r1, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	d100      	bne.n	8009f6e <memmove+0x2a>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f76:	e7f7      	b.n	8009f68 <memmove+0x24>

08009f78 <_realloc_r>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4614      	mov	r4, r2
 8009f80:	460e      	mov	r6, r1
 8009f82:	b921      	cbnz	r1, 8009f8e <_realloc_r+0x16>
 8009f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	4611      	mov	r1, r2
 8009f8a:	f7ff bba9 	b.w	80096e0 <_malloc_r>
 8009f8e:	b92a      	cbnz	r2, 8009f9c <_realloc_r+0x24>
 8009f90:	f7ff fca4 	bl	80098dc <_free_r>
 8009f94:	4625      	mov	r5, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	f000 f81b 	bl	8009fd6 <_malloc_usable_size_r>
 8009fa0:	4284      	cmp	r4, r0
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	d802      	bhi.n	8009fac <_realloc_r+0x34>
 8009fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009faa:	d812      	bhi.n	8009fd2 <_realloc_r+0x5a>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fb96 	bl	80096e0 <_malloc_r>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0ed      	beq.n	8009f96 <_realloc_r+0x1e>
 8009fba:	42bc      	cmp	r4, r7
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	bf28      	it	cs
 8009fc2:	463a      	movcs	r2, r7
 8009fc4:	f7ff fc7c 	bl	80098c0 <memcpy>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff fc86 	bl	80098dc <_free_r>
 8009fd0:	e7e1      	b.n	8009f96 <_realloc_r+0x1e>
 8009fd2:	4635      	mov	r5, r6
 8009fd4:	e7df      	b.n	8009f96 <_realloc_r+0x1e>

08009fd6 <_malloc_usable_size_r>:
 8009fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fda:	1f18      	subs	r0, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfbc      	itt	lt
 8009fe0:	580b      	ldrlt	r3, [r1, r0]
 8009fe2:	18c0      	addlt	r0, r0, r3
 8009fe4:	4770      	bx	lr
	...

08009fe8 <sin>:
 8009fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fea:	ec53 2b10 	vmov	r2, r3, d0
 8009fee:	4828      	ldr	r0, [pc, #160]	; (800a090 <sin+0xa8>)
 8009ff0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ff4:	4281      	cmp	r1, r0
 8009ff6:	dc07      	bgt.n	800a008 <sin+0x20>
 8009ff8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a088 <sin+0xa0>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	b005      	add	sp, #20
 800a000:	f85d eb04 	ldr.w	lr, [sp], #4
 800a004:	f000 b958 	b.w	800a2b8 <__kernel_sin>
 800a008:	4822      	ldr	r0, [pc, #136]	; (800a094 <sin+0xac>)
 800a00a:	4281      	cmp	r1, r0
 800a00c:	dd09      	ble.n	800a022 <sin+0x3a>
 800a00e:	ee10 0a10 	vmov	r0, s0
 800a012:	4619      	mov	r1, r3
 800a014:	f7f6 f938 	bl	8000288 <__aeabi_dsub>
 800a018:	ec41 0b10 	vmov	d0, r0, r1
 800a01c:	b005      	add	sp, #20
 800a01e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a022:	4668      	mov	r0, sp
 800a024:	f000 fa08 	bl	800a438 <__ieee754_rem_pio2>
 800a028:	f000 0003 	and.w	r0, r0, #3
 800a02c:	2801      	cmp	r0, #1
 800a02e:	d00c      	beq.n	800a04a <sin+0x62>
 800a030:	2802      	cmp	r0, #2
 800a032:	d011      	beq.n	800a058 <sin+0x70>
 800a034:	b9f0      	cbnz	r0, 800a074 <sin+0x8c>
 800a036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a03a:	ed9d 0b00 	vldr	d0, [sp]
 800a03e:	2001      	movs	r0, #1
 800a040:	f000 f93a 	bl	800a2b8 <__kernel_sin>
 800a044:	ec51 0b10 	vmov	r0, r1, d0
 800a048:	e7e6      	b.n	800a018 <sin+0x30>
 800a04a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a04e:	ed9d 0b00 	vldr	d0, [sp]
 800a052:	f000 f869 	bl	800a128 <__kernel_cos>
 800a056:	e7f5      	b.n	800a044 <sin+0x5c>
 800a058:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a05c:	ed9d 0b00 	vldr	d0, [sp]
 800a060:	2001      	movs	r0, #1
 800a062:	f000 f929 	bl	800a2b8 <__kernel_sin>
 800a066:	ec53 2b10 	vmov	r2, r3, d0
 800a06a:	ee10 0a10 	vmov	r0, s0
 800a06e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a072:	e7d1      	b.n	800a018 <sin+0x30>
 800a074:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a078:	ed9d 0b00 	vldr	d0, [sp]
 800a07c:	f000 f854 	bl	800a128 <__kernel_cos>
 800a080:	e7f1      	b.n	800a066 <sin+0x7e>
 800a082:	bf00      	nop
 800a084:	f3af 8000 	nop.w
	...
 800a090:	3fe921fb 	.word	0x3fe921fb
 800a094:	7fefffff 	.word	0x7fefffff

0800a098 <round>:
 800a098:	ec53 2b10 	vmov	r2, r3, d0
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800a0a2:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800a0a6:	2813      	cmp	r0, #19
 800a0a8:	ee10 5a10 	vmov	r5, s0
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	dc18      	bgt.n	800a0e2 <round+0x4a>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	da09      	bge.n	800a0c8 <round+0x30>
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800a0ba:	d103      	bne.n	800a0c4 <round+0x2c>
 800a0bc:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a0c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e02a      	b.n	800a11e <round+0x86>
 800a0c8:	4c16      	ldr	r4, [pc, #88]	; (800a124 <round+0x8c>)
 800a0ca:	4104      	asrs	r4, r0
 800a0cc:	ea03 0604 	and.w	r6, r3, r4
 800a0d0:	4316      	orrs	r6, r2
 800a0d2:	d011      	beq.n	800a0f8 <round+0x60>
 800a0d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0d8:	4103      	asrs	r3, r0
 800a0da:	440b      	add	r3, r1
 800a0dc:	ea23 0104 	bic.w	r1, r3, r4
 800a0e0:	e7f0      	b.n	800a0c4 <round+0x2c>
 800a0e2:	2833      	cmp	r0, #51	; 0x33
 800a0e4:	dd0b      	ble.n	800a0fe <round+0x66>
 800a0e6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a0ea:	d105      	bne.n	800a0f8 <round+0x60>
 800a0ec:	ee10 0a10 	vmov	r0, s0
 800a0f0:	f7f6 f8cc 	bl	800028c <__adddf3>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	ec43 2b10 	vmov	d0, r2, r3
 800a0fc:	bd70      	pop	{r4, r5, r6, pc}
 800a0fe:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a102:	f04f 34ff 	mov.w	r4, #4294967295
 800a106:	40f4      	lsrs	r4, r6
 800a108:	4214      	tst	r4, r2
 800a10a:	d0f5      	beq.n	800a0f8 <round+0x60>
 800a10c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800a110:	2301      	movs	r3, #1
 800a112:	4083      	lsls	r3, r0
 800a114:	195b      	adds	r3, r3, r5
 800a116:	bf28      	it	cs
 800a118:	3101      	addcs	r1, #1
 800a11a:	ea23 0304 	bic.w	r3, r3, r4
 800a11e:	461a      	mov	r2, r3
 800a120:	460b      	mov	r3, r1
 800a122:	e7e9      	b.n	800a0f8 <round+0x60>
 800a124:	000fffff 	.word	0x000fffff

0800a128 <__kernel_cos>:
 800a128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ec57 6b10 	vmov	r6, r7, d0
 800a130:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a134:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a138:	ed8d 1b00 	vstr	d1, [sp]
 800a13c:	da07      	bge.n	800a14e <__kernel_cos+0x26>
 800a13e:	ee10 0a10 	vmov	r0, s0
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fcf2 	bl	8000b2c <__aeabi_d2iz>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f000 8088 	beq.w	800a25e <__kernel_cos+0x136>
 800a14e:	4632      	mov	r2, r6
 800a150:	463b      	mov	r3, r7
 800a152:	4630      	mov	r0, r6
 800a154:	4639      	mov	r1, r7
 800a156:	f7f6 fa4f 	bl	80005f8 <__aeabi_dmul>
 800a15a:	4b51      	ldr	r3, [pc, #324]	; (800a2a0 <__kernel_cos+0x178>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	f7f6 fa49 	bl	80005f8 <__aeabi_dmul>
 800a166:	a340      	add	r3, pc, #256	; (adr r3, 800a268 <__kernel_cos+0x140>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	4682      	mov	sl, r0
 800a16e:	468b      	mov	fp, r1
 800a170:	4620      	mov	r0, r4
 800a172:	4629      	mov	r1, r5
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	a33d      	add	r3, pc, #244	; (adr r3, 800a270 <__kernel_cos+0x148>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 f885 	bl	800028c <__adddf3>
 800a182:	4622      	mov	r2, r4
 800a184:	462b      	mov	r3, r5
 800a186:	f7f6 fa37 	bl	80005f8 <__aeabi_dmul>
 800a18a:	a33b      	add	r3, pc, #236	; (adr r3, 800a278 <__kernel_cos+0x150>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f7f6 f87a 	bl	8000288 <__aeabi_dsub>
 800a194:	4622      	mov	r2, r4
 800a196:	462b      	mov	r3, r5
 800a198:	f7f6 fa2e 	bl	80005f8 <__aeabi_dmul>
 800a19c:	a338      	add	r3, pc, #224	; (adr r3, 800a280 <__kernel_cos+0x158>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f873 	bl	800028c <__adddf3>
 800a1a6:	4622      	mov	r2, r4
 800a1a8:	462b      	mov	r3, r5
 800a1aa:	f7f6 fa25 	bl	80005f8 <__aeabi_dmul>
 800a1ae:	a336      	add	r3, pc, #216	; (adr r3, 800a288 <__kernel_cos+0x160>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f7f6 f868 	bl	8000288 <__aeabi_dsub>
 800a1b8:	4622      	mov	r2, r4
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	f7f6 fa1c 	bl	80005f8 <__aeabi_dmul>
 800a1c0:	a333      	add	r3, pc, #204	; (adr r3, 800a290 <__kernel_cos+0x168>)
 800a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c6:	f7f6 f861 	bl	800028c <__adddf3>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	f7f6 fa13 	bl	80005f8 <__aeabi_dmul>
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	f7f6 fa0f 	bl	80005f8 <__aeabi_dmul>
 800a1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1de:	4604      	mov	r4, r0
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <__kernel_cos+0x17c>)
 800a1f8:	4598      	cmp	r8, r3
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	dc10      	bgt.n	800a222 <__kernel_cos+0xfa>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4650      	mov	r0, sl
 800a206:	4659      	mov	r1, fp
 800a208:	f7f6 f83e 	bl	8000288 <__aeabi_dsub>
 800a20c:	460b      	mov	r3, r1
 800a20e:	4926      	ldr	r1, [pc, #152]	; (800a2a8 <__kernel_cos+0x180>)
 800a210:	4602      	mov	r2, r0
 800a212:	2000      	movs	r0, #0
 800a214:	f7f6 f838 	bl	8000288 <__aeabi_dsub>
 800a218:	ec41 0b10 	vmov	d0, r0, r1
 800a21c:	b003      	add	sp, #12
 800a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a222:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <__kernel_cos+0x184>)
 800a224:	4920      	ldr	r1, [pc, #128]	; (800a2a8 <__kernel_cos+0x180>)
 800a226:	4598      	cmp	r8, r3
 800a228:	bfcc      	ite	gt
 800a22a:	4d21      	ldrgt	r5, [pc, #132]	; (800a2b0 <__kernel_cos+0x188>)
 800a22c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a230:	2400      	movs	r4, #0
 800a232:	4622      	mov	r2, r4
 800a234:	462b      	mov	r3, r5
 800a236:	2000      	movs	r0, #0
 800a238:	f7f6 f826 	bl	8000288 <__aeabi_dsub>
 800a23c:	4622      	mov	r2, r4
 800a23e:	4680      	mov	r8, r0
 800a240:	4689      	mov	r9, r1
 800a242:	462b      	mov	r3, r5
 800a244:	4650      	mov	r0, sl
 800a246:	4659      	mov	r1, fp
 800a248:	f7f6 f81e 	bl	8000288 <__aeabi_dsub>
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	f7f6 f81a 	bl	8000288 <__aeabi_dsub>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4640      	mov	r0, r8
 800a25a:	4649      	mov	r1, r9
 800a25c:	e7da      	b.n	800a214 <__kernel_cos+0xec>
 800a25e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a298 <__kernel_cos+0x170>
 800a262:	e7db      	b.n	800a21c <__kernel_cos+0xf4>
 800a264:	f3af 8000 	nop.w
 800a268:	be8838d4 	.word	0xbe8838d4
 800a26c:	bda8fae9 	.word	0xbda8fae9
 800a270:	bdb4b1c4 	.word	0xbdb4b1c4
 800a274:	3e21ee9e 	.word	0x3e21ee9e
 800a278:	809c52ad 	.word	0x809c52ad
 800a27c:	3e927e4f 	.word	0x3e927e4f
 800a280:	19cb1590 	.word	0x19cb1590
 800a284:	3efa01a0 	.word	0x3efa01a0
 800a288:	16c15177 	.word	0x16c15177
 800a28c:	3f56c16c 	.word	0x3f56c16c
 800a290:	5555554c 	.word	0x5555554c
 800a294:	3fa55555 	.word	0x3fa55555
 800a298:	00000000 	.word	0x00000000
 800a29c:	3ff00000 	.word	0x3ff00000
 800a2a0:	3fe00000 	.word	0x3fe00000
 800a2a4:	3fd33332 	.word	0x3fd33332
 800a2a8:	3ff00000 	.word	0x3ff00000
 800a2ac:	3fe90000 	.word	0x3fe90000
 800a2b0:	3fd20000 	.word	0x3fd20000
 800a2b4:	00000000 	.word	0x00000000

0800a2b8 <__kernel_sin>:
 800a2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ed2d 8b04 	vpush	{d8-d9}
 800a2c0:	eeb0 8a41 	vmov.f32	s16, s2
 800a2c4:	eef0 8a61 	vmov.f32	s17, s3
 800a2c8:	ec55 4b10 	vmov	r4, r5, d0
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	da06      	bge.n	800a2e8 <__kernel_sin+0x30>
 800a2da:	ee10 0a10 	vmov	r0, s0
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7f6 fc24 	bl	8000b2c <__aeabi_d2iz>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d051      	beq.n	800a38c <__kernel_sin+0xd4>
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	f7f6 f982 	bl	80005f8 <__aeabi_dmul>
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	468b      	mov	fp, r1
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f6 f97a 	bl	80005f8 <__aeabi_dmul>
 800a304:	a341      	add	r3, pc, #260	; (adr r3, 800a40c <__kernel_sin+0x154>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	4680      	mov	r8, r0
 800a30c:	4689      	mov	r9, r1
 800a30e:	4650      	mov	r0, sl
 800a310:	4659      	mov	r1, fp
 800a312:	f7f6 f971 	bl	80005f8 <__aeabi_dmul>
 800a316:	a33f      	add	r3, pc, #252	; (adr r3, 800a414 <__kernel_sin+0x15c>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ffb4 	bl	8000288 <__aeabi_dsub>
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
 800a324:	f7f6 f968 	bl	80005f8 <__aeabi_dmul>
 800a328:	a33c      	add	r3, pc, #240	; (adr r3, 800a41c <__kernel_sin+0x164>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ffad 	bl	800028c <__adddf3>
 800a332:	4652      	mov	r2, sl
 800a334:	465b      	mov	r3, fp
 800a336:	f7f6 f95f 	bl	80005f8 <__aeabi_dmul>
 800a33a:	a33a      	add	r3, pc, #232	; (adr r3, 800a424 <__kernel_sin+0x16c>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f5 ffa2 	bl	8000288 <__aeabi_dsub>
 800a344:	4652      	mov	r2, sl
 800a346:	465b      	mov	r3, fp
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	a337      	add	r3, pc, #220	; (adr r3, 800a42c <__kernel_sin+0x174>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff9b 	bl	800028c <__adddf3>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	4606      	mov	r6, r0
 800a35a:	460f      	mov	r7, r1
 800a35c:	b9eb      	cbnz	r3, 800a39a <__kernel_sin+0xe2>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4650      	mov	r0, sl
 800a364:	4659      	mov	r1, fp
 800a366:	f7f6 f947 	bl	80005f8 <__aeabi_dmul>
 800a36a:	a325      	add	r3, pc, #148	; (adr r3, 800a400 <__kernel_sin+0x148>)
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f7f5 ff8a 	bl	8000288 <__aeabi_dsub>
 800a374:	4642      	mov	r2, r8
 800a376:	464b      	mov	r3, r9
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4620      	mov	r0, r4
 800a382:	4629      	mov	r1, r5
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	ec45 4b10 	vmov	d0, r4, r5
 800a390:	b003      	add	sp, #12
 800a392:	ecbd 8b04 	vpop	{d8-d9}
 800a396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39a:	4b1b      	ldr	r3, [pc, #108]	; (800a408 <__kernel_sin+0x150>)
 800a39c:	ec51 0b18 	vmov	r0, r1, d8
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f7f6 f929 	bl	80005f8 <__aeabi_dmul>
 800a3a6:	4632      	mov	r2, r6
 800a3a8:	ec41 0b19 	vmov	d9, r0, r1
 800a3ac:	463b      	mov	r3, r7
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f6 f921 	bl	80005f8 <__aeabi_dmul>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	ec51 0b19 	vmov	r0, r1, d9
 800a3be:	f7f5 ff63 	bl	8000288 <__aeabi_dsub>
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	f7f6 f917 	bl	80005f8 <__aeabi_dmul>
 800a3ca:	ec53 2b18 	vmov	r2, r3, d8
 800a3ce:	f7f5 ff5b 	bl	8000288 <__aeabi_dsub>
 800a3d2:	a30b      	add	r3, pc, #44	; (adr r3, 800a400 <__kernel_sin+0x148>)
 800a3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d8:	4606      	mov	r6, r0
 800a3da:	460f      	mov	r7, r1
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7f6 f90a 	bl	80005f8 <__aeabi_dmul>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f5 ff4e 	bl	800028c <__adddf3>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f5 ff46 	bl	8000288 <__aeabi_dsub>
 800a3fc:	e7c4      	b.n	800a388 <__kernel_sin+0xd0>
 800a3fe:	bf00      	nop
 800a400:	55555549 	.word	0x55555549
 800a404:	3fc55555 	.word	0x3fc55555
 800a408:	3fe00000 	.word	0x3fe00000
 800a40c:	5acfd57c 	.word	0x5acfd57c
 800a410:	3de5d93a 	.word	0x3de5d93a
 800a414:	8a2b9ceb 	.word	0x8a2b9ceb
 800a418:	3e5ae5e6 	.word	0x3e5ae5e6
 800a41c:	57b1fe7d 	.word	0x57b1fe7d
 800a420:	3ec71de3 	.word	0x3ec71de3
 800a424:	19c161d5 	.word	0x19c161d5
 800a428:	3f2a01a0 	.word	0x3f2a01a0
 800a42c:	1110f8a6 	.word	0x1110f8a6
 800a430:	3f811111 	.word	0x3f811111
 800a434:	00000000 	.word	0x00000000

0800a438 <__ieee754_rem_pio2>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	ed2d 8b02 	vpush	{d8}
 800a440:	ec55 4b10 	vmov	r4, r5, d0
 800a444:	4bca      	ldr	r3, [pc, #808]	; (800a770 <__ieee754_rem_pio2+0x338>)
 800a446:	b08b      	sub	sp, #44	; 0x2c
 800a448:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a44c:	4598      	cmp	r8, r3
 800a44e:	4682      	mov	sl, r0
 800a450:	9502      	str	r5, [sp, #8]
 800a452:	dc08      	bgt.n	800a466 <__ieee754_rem_pio2+0x2e>
 800a454:	2200      	movs	r2, #0
 800a456:	2300      	movs	r3, #0
 800a458:	ed80 0b00 	vstr	d0, [r0]
 800a45c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a460:	f04f 0b00 	mov.w	fp, #0
 800a464:	e028      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a466:	4bc3      	ldr	r3, [pc, #780]	; (800a774 <__ieee754_rem_pio2+0x33c>)
 800a468:	4598      	cmp	r8, r3
 800a46a:	dc78      	bgt.n	800a55e <__ieee754_rem_pio2+0x126>
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	4ec2      	ldr	r6, [pc, #776]	; (800a778 <__ieee754_rem_pio2+0x340>)
 800a470:	2b00      	cmp	r3, #0
 800a472:	ee10 0a10 	vmov	r0, s0
 800a476:	a3b0      	add	r3, pc, #704	; (adr r3, 800a738 <__ieee754_rem_pio2+0x300>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	4629      	mov	r1, r5
 800a47e:	dd39      	ble.n	800a4f4 <__ieee754_rem_pio2+0xbc>
 800a480:	f7f5 ff02 	bl	8000288 <__aeabi_dsub>
 800a484:	45b0      	cmp	r8, r6
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	d01b      	beq.n	800a4c4 <__ieee754_rem_pio2+0x8c>
 800a48c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fef9 	bl	8000288 <__aeabi_dsub>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	e9ca 2300 	strd	r2, r3, [sl]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f5 fef1 	bl	8000288 <__aeabi_dsub>
 800a4a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f5 feec 	bl	8000288 <__aeabi_dsub>
 800a4b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4b4:	f04f 0b01 	mov.w	fp, #1
 800a4b8:	4658      	mov	r0, fp
 800a4ba:	b00b      	add	sp, #44	; 0x2c
 800a4bc:	ecbd 8b02 	vpop	{d8}
 800a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f5 fedd 	bl	8000288 <__aeabi_dsub>
 800a4ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	f7f5 fed6 	bl	8000288 <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	e9ca 2300 	strd	r2, r3, [sl]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f5 fece 	bl	8000288 <__aeabi_dsub>
 800a4ec:	a398      	add	r3, pc, #608	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e7db      	b.n	800a4ac <__ieee754_rem_pio2+0x74>
 800a4f4:	f7f5 feca 	bl	800028c <__adddf3>
 800a4f8:	45b0      	cmp	r8, r6
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	d016      	beq.n	800a52e <__ieee754_rem_pio2+0xf6>
 800a500:	a38f      	add	r3, pc, #572	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	f7f5 fec1 	bl	800028c <__adddf3>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	e9ca 2300 	strd	r2, r3, [sl]
 800a512:	4620      	mov	r0, r4
 800a514:	4629      	mov	r1, r5
 800a516:	f7f5 feb7 	bl	8000288 <__aeabi_dsub>
 800a51a:	a389      	add	r3, pc, #548	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	f7f5 feb4 	bl	800028c <__adddf3>
 800a524:	f04f 3bff 	mov.w	fp, #4294967295
 800a528:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a52c:	e7c4      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a52e:	a386      	add	r3, pc, #536	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 feaa 	bl	800028c <__adddf3>
 800a538:	a385      	add	r3, pc, #532	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	f7f5 fea3 	bl	800028c <__adddf3>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	e9ca 2300 	strd	r2, r3, [sl]
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 fe99 	bl	8000288 <__aeabi_dsub>
 800a556:	a37e      	add	r3, pc, #504	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	e7e0      	b.n	800a520 <__ieee754_rem_pio2+0xe8>
 800a55e:	4b87      	ldr	r3, [pc, #540]	; (800a77c <__ieee754_rem_pio2+0x344>)
 800a560:	4598      	cmp	r8, r3
 800a562:	f300 80d8 	bgt.w	800a716 <__ieee754_rem_pio2+0x2de>
 800a566:	f000 f96d 	bl	800a844 <fabs>
 800a56a:	ec55 4b10 	vmov	r4, r5, d0
 800a56e:	ee10 0a10 	vmov	r0, s0
 800a572:	a379      	add	r3, pc, #484	; (adr r3, 800a758 <__ieee754_rem_pio2+0x320>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 f83d 	bl	80005f8 <__aeabi_dmul>
 800a57e:	4b80      	ldr	r3, [pc, #512]	; (800a780 <__ieee754_rem_pio2+0x348>)
 800a580:	2200      	movs	r2, #0
 800a582:	f7f5 fe83 	bl	800028c <__adddf3>
 800a586:	f7f6 fad1 	bl	8000b2c <__aeabi_d2iz>
 800a58a:	4683      	mov	fp, r0
 800a58c:	f7f5 ffca 	bl	8000524 <__aeabi_i2d>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	ec43 2b18 	vmov	d8, r2, r3
 800a598:	a367      	add	r3, pc, #412	; (adr r3, 800a738 <__ieee754_rem_pio2+0x300>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f5 fe6d 	bl	8000288 <__aeabi_dsub>
 800a5ae:	a364      	add	r3, pc, #400	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	ec51 0b18 	vmov	r0, r1, d8
 800a5bc:	f7f6 f81c 	bl	80005f8 <__aeabi_dmul>
 800a5c0:	f1bb 0f1f 	cmp.w	fp, #31
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	dc0d      	bgt.n	800a5e6 <__ieee754_rem_pio2+0x1ae>
 800a5ca:	4b6e      	ldr	r3, [pc, #440]	; (800a784 <__ieee754_rem_pio2+0x34c>)
 800a5cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	d006      	beq.n	800a5e6 <__ieee754_rem_pio2+0x1ae>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	462b      	mov	r3, r5
 800a5dc:	4630      	mov	r0, r6
 800a5de:	4639      	mov	r1, r7
 800a5e0:	f7f5 fe52 	bl	8000288 <__aeabi_dsub>
 800a5e4:	e00e      	b.n	800a604 <__ieee754_rem_pio2+0x1cc>
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f5 fe4b 	bl	8000288 <__aeabi_dsub>
 800a5f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a5f6:	9303      	str	r3, [sp, #12]
 800a5f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a600:	2b10      	cmp	r3, #16
 800a602:	dc02      	bgt.n	800a60a <__ieee754_rem_pio2+0x1d2>
 800a604:	e9ca 0100 	strd	r0, r1, [sl]
 800a608:	e039      	b.n	800a67e <__ieee754_rem_pio2+0x246>
 800a60a:	a34f      	add	r3, pc, #316	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	ec51 0b18 	vmov	r0, r1, d8
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f5 fe30 	bl	8000288 <__aeabi_dsub>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f5 fe28 	bl	8000288 <__aeabi_dsub>
 800a638:	4622      	mov	r2, r4
 800a63a:	462b      	mov	r3, r5
 800a63c:	f7f5 fe24 	bl	8000288 <__aeabi_dsub>
 800a640:	a343      	add	r3, pc, #268	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	4604      	mov	r4, r0
 800a648:	460d      	mov	r5, r1
 800a64a:	ec51 0b18 	vmov	r0, r1, d8
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	4622      	mov	r2, r4
 800a654:	462b      	mov	r3, r5
 800a656:	f7f5 fe17 	bl	8000288 <__aeabi_dsub>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 fe0f 	bl	8000288 <__aeabi_dsub>
 800a66a:	9a03      	ldr	r2, [sp, #12]
 800a66c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b31      	cmp	r3, #49	; 0x31
 800a674:	dc24      	bgt.n	800a6c0 <__ieee754_rem_pio2+0x288>
 800a676:	e9ca 0100 	strd	r0, r1, [sl]
 800a67a:	4646      	mov	r6, r8
 800a67c:	464f      	mov	r7, r9
 800a67e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a682:	4630      	mov	r0, r6
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	4639      	mov	r1, r7
 800a68a:	f7f5 fdfd 	bl	8000288 <__aeabi_dsub>
 800a68e:	462b      	mov	r3, r5
 800a690:	4622      	mov	r2, r4
 800a692:	f7f5 fdf9 	bl	8000288 <__aeabi_dsub>
 800a696:	9b02      	ldr	r3, [sp, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a69e:	f6bf af0b 	bge.w	800a4b8 <__ieee754_rem_pio2+0x80>
 800a6a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6a6:	f8ca 3004 	str.w	r3, [sl, #4]
 800a6aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6ae:	f8ca 8000 	str.w	r8, [sl]
 800a6b2:	f8ca 0008 	str.w	r0, [sl, #8]
 800a6b6:	f8ca 300c 	str.w	r3, [sl, #12]
 800a6ba:	f1cb 0b00 	rsb	fp, fp, #0
 800a6be:	e6fb      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a6c0:	a327      	add	r3, pc, #156	; (adr r3, 800a760 <__ieee754_rem_pio2+0x328>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	ec51 0b18 	vmov	r0, r1, d8
 800a6ca:	f7f5 ff95 	bl	80005f8 <__aeabi_dmul>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	4649      	mov	r1, r9
 800a6da:	f7f5 fdd5 	bl	8000288 <__aeabi_dsub>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460f      	mov	r7, r1
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	4649      	mov	r1, r9
 800a6ea:	f7f5 fdcd 	bl	8000288 <__aeabi_dsub>
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	f7f5 fdc9 	bl	8000288 <__aeabi_dsub>
 800a6f6:	a31c      	add	r3, pc, #112	; (adr r3, 800a768 <__ieee754_rem_pio2+0x330>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	460d      	mov	r5, r1
 800a700:	ec51 0b18 	vmov	r0, r1, d8
 800a704:	f7f5 ff78 	bl	80005f8 <__aeabi_dmul>
 800a708:	4622      	mov	r2, r4
 800a70a:	462b      	mov	r3, r5
 800a70c:	f7f5 fdbc 	bl	8000288 <__aeabi_dsub>
 800a710:	4604      	mov	r4, r0
 800a712:	460d      	mov	r5, r1
 800a714:	e760      	b.n	800a5d8 <__ieee754_rem_pio2+0x1a0>
 800a716:	4b1c      	ldr	r3, [pc, #112]	; (800a788 <__ieee754_rem_pio2+0x350>)
 800a718:	4598      	cmp	r8, r3
 800a71a:	dd37      	ble.n	800a78c <__ieee754_rem_pio2+0x354>
 800a71c:	ee10 2a10 	vmov	r2, s0
 800a720:	462b      	mov	r3, r5
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	f7f5 fdaf 	bl	8000288 <__aeabi_dsub>
 800a72a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a72e:	e9ca 0100 	strd	r0, r1, [sl]
 800a732:	e695      	b.n	800a460 <__ieee754_rem_pio2+0x28>
 800a734:	f3af 8000 	nop.w
 800a738:	54400000 	.word	0x54400000
 800a73c:	3ff921fb 	.word	0x3ff921fb
 800a740:	1a626331 	.word	0x1a626331
 800a744:	3dd0b461 	.word	0x3dd0b461
 800a748:	1a600000 	.word	0x1a600000
 800a74c:	3dd0b461 	.word	0x3dd0b461
 800a750:	2e037073 	.word	0x2e037073
 800a754:	3ba3198a 	.word	0x3ba3198a
 800a758:	6dc9c883 	.word	0x6dc9c883
 800a75c:	3fe45f30 	.word	0x3fe45f30
 800a760:	2e000000 	.word	0x2e000000
 800a764:	3ba3198a 	.word	0x3ba3198a
 800a768:	252049c1 	.word	0x252049c1
 800a76c:	397b839a 	.word	0x397b839a
 800a770:	3fe921fb 	.word	0x3fe921fb
 800a774:	4002d97b 	.word	0x4002d97b
 800a778:	3ff921fb 	.word	0x3ff921fb
 800a77c:	413921fb 	.word	0x413921fb
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	0800b274 	.word	0x0800b274
 800a788:	7fefffff 	.word	0x7fefffff
 800a78c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a790:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a794:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a798:	4620      	mov	r0, r4
 800a79a:	460d      	mov	r5, r1
 800a79c:	f7f6 f9c6 	bl	8000b2c <__aeabi_d2iz>
 800a7a0:	f7f5 fec0 	bl	8000524 <__aeabi_i2d>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7b0:	f7f5 fd6a 	bl	8000288 <__aeabi_dsub>
 800a7b4:	4b21      	ldr	r3, [pc, #132]	; (800a83c <__ieee754_rem_pio2+0x404>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f7f5 ff1e 	bl	80005f8 <__aeabi_dmul>
 800a7bc:	460d      	mov	r5, r1
 800a7be:	4604      	mov	r4, r0
 800a7c0:	f7f6 f9b4 	bl	8000b2c <__aeabi_d2iz>
 800a7c4:	f7f5 feae 	bl	8000524 <__aeabi_i2d>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7d4:	f7f5 fd58 	bl	8000288 <__aeabi_dsub>
 800a7d8:	4b18      	ldr	r3, [pc, #96]	; (800a83c <__ieee754_rem_pio2+0x404>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f7f5 ff0c 	bl	80005f8 <__aeabi_dmul>
 800a7e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a7e8:	2703      	movs	r7, #3
 800a7ea:	2400      	movs	r4, #0
 800a7ec:	2500      	movs	r5, #0
 800a7ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	46b9      	mov	r9, r7
 800a7f8:	3f01      	subs	r7, #1
 800a7fa:	f7f6 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d1f5      	bne.n	800a7ee <__ieee754_rem_pio2+0x3b6>
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <__ieee754_rem_pio2+0x408>)
 800a804:	9301      	str	r3, [sp, #4]
 800a806:	2302      	movs	r3, #2
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4632      	mov	r2, r6
 800a80c:	464b      	mov	r3, r9
 800a80e:	4651      	mov	r1, sl
 800a810:	a804      	add	r0, sp, #16
 800a812:	f000 f821 	bl	800a858 <__kernel_rem_pio2>
 800a816:	9b02      	ldr	r3, [sp, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	4683      	mov	fp, r0
 800a81c:	f6bf ae4c 	bge.w	800a4b8 <__ieee754_rem_pio2+0x80>
 800a820:	e9da 2100 	ldrd	r2, r1, [sl]
 800a824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a828:	e9ca 2300 	strd	r2, r3, [sl]
 800a82c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a834:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a838:	e73f      	b.n	800a6ba <__ieee754_rem_pio2+0x282>
 800a83a:	bf00      	nop
 800a83c:	41700000 	.word	0x41700000
 800a840:	0800b2f4 	.word	0x0800b2f4

0800a844 <fabs>:
 800a844:	ec51 0b10 	vmov	r0, r1, d0
 800a848:	ee10 2a10 	vmov	r2, s0
 800a84c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a850:	ec43 2b10 	vmov	d0, r2, r3
 800a854:	4770      	bx	lr
	...

0800a858 <__kernel_rem_pio2>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ed2d 8b02 	vpush	{d8}
 800a860:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a864:	f112 0f14 	cmn.w	r2, #20
 800a868:	9306      	str	r3, [sp, #24]
 800a86a:	9104      	str	r1, [sp, #16]
 800a86c:	4bc2      	ldr	r3, [pc, #776]	; (800ab78 <__kernel_rem_pio2+0x320>)
 800a86e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a870:	9009      	str	r0, [sp, #36]	; 0x24
 800a872:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	9b06      	ldr	r3, [sp, #24]
 800a87a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a87e:	bfa8      	it	ge
 800a880:	1ed4      	subge	r4, r2, #3
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	bfb2      	itee	lt
 800a886:	2400      	movlt	r4, #0
 800a888:	2318      	movge	r3, #24
 800a88a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a88e:	f06f 0317 	mvn.w	r3, #23
 800a892:	fb04 3303 	mla	r3, r4, r3, r3
 800a896:	eb03 0a02 	add.w	sl, r3, r2
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	9a05      	ldr	r2, [sp, #20]
 800a89e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ab68 <__kernel_rem_pio2+0x310>
 800a8a2:	eb03 0802 	add.w	r8, r3, r2
 800a8a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a8a8:	1aa7      	subs	r7, r4, r2
 800a8aa:	ae20      	add	r6, sp, #128	; 0x80
 800a8ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a8b0:	2500      	movs	r5, #0
 800a8b2:	4545      	cmp	r5, r8
 800a8b4:	dd13      	ble.n	800a8de <__kernel_rem_pio2+0x86>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	aa20      	add	r2, sp, #128	; 0x80
 800a8ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a8be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a8c2:	f04f 0800 	mov.w	r8, #0
 800a8c6:	9b00      	ldr	r3, [sp, #0]
 800a8c8:	4598      	cmp	r8, r3
 800a8ca:	dc31      	bgt.n	800a930 <__kernel_rem_pio2+0xd8>
 800a8cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ab68 <__kernel_rem_pio2+0x310>
 800a8d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a8d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8d8:	462f      	mov	r7, r5
 800a8da:	2600      	movs	r6, #0
 800a8dc:	e01b      	b.n	800a916 <__kernel_rem_pio2+0xbe>
 800a8de:	42ef      	cmn	r7, r5
 800a8e0:	d407      	bmi.n	800a8f2 <__kernel_rem_pio2+0x9a>
 800a8e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a8e6:	f7f5 fe1d 	bl	8000524 <__aeabi_i2d>
 800a8ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8ee:	3501      	adds	r5, #1
 800a8f0:	e7df      	b.n	800a8b2 <__kernel_rem_pio2+0x5a>
 800a8f2:	ec51 0b18 	vmov	r0, r1, d8
 800a8f6:	e7f8      	b.n	800a8ea <__kernel_rem_pio2+0x92>
 800a8f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a900:	f7f5 fe7a 	bl	80005f8 <__aeabi_dmul>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90c:	f7f5 fcbe 	bl	800028c <__adddf3>
 800a910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a914:	3601      	adds	r6, #1
 800a916:	9b05      	ldr	r3, [sp, #20]
 800a918:	429e      	cmp	r6, r3
 800a91a:	f1a7 0708 	sub.w	r7, r7, #8
 800a91e:	ddeb      	ble.n	800a8f8 <__kernel_rem_pio2+0xa0>
 800a920:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a924:	f108 0801 	add.w	r8, r8, #1
 800a928:	ecab 7b02 	vstmia	fp!, {d7}
 800a92c:	3508      	adds	r5, #8
 800a92e:	e7ca      	b.n	800a8c6 <__kernel_rem_pio2+0x6e>
 800a930:	9b00      	ldr	r3, [sp, #0]
 800a932:	aa0c      	add	r2, sp, #48	; 0x30
 800a934:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a938:	930b      	str	r3, [sp, #44]	; 0x2c
 800a93a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a93c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a940:	9c00      	ldr	r4, [sp, #0]
 800a942:	930a      	str	r3, [sp, #40]	; 0x28
 800a944:	00e3      	lsls	r3, r4, #3
 800a946:	9308      	str	r3, [sp, #32]
 800a948:	ab98      	add	r3, sp, #608	; 0x260
 800a94a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a94e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a952:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a956:	ab70      	add	r3, sp, #448	; 0x1c0
 800a958:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a95c:	46c3      	mov	fp, r8
 800a95e:	46a1      	mov	r9, r4
 800a960:	f1b9 0f00 	cmp.w	r9, #0
 800a964:	f1a5 0508 	sub.w	r5, r5, #8
 800a968:	dc77      	bgt.n	800aa5a <__kernel_rem_pio2+0x202>
 800a96a:	ec47 6b10 	vmov	d0, r6, r7
 800a96e:	4650      	mov	r0, sl
 800a970:	f000 fac2 	bl	800aef8 <scalbn>
 800a974:	ec57 6b10 	vmov	r6, r7, d0
 800a978:	2200      	movs	r2, #0
 800a97a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a97e:	ee10 0a10 	vmov	r0, s0
 800a982:	4639      	mov	r1, r7
 800a984:	f7f5 fe38 	bl	80005f8 <__aeabi_dmul>
 800a988:	ec41 0b10 	vmov	d0, r0, r1
 800a98c:	f000 fb34 	bl	800aff8 <floor>
 800a990:	4b7a      	ldr	r3, [pc, #488]	; (800ab7c <__kernel_rem_pio2+0x324>)
 800a992:	ec51 0b10 	vmov	r0, r1, d0
 800a996:	2200      	movs	r2, #0
 800a998:	f7f5 fe2e 	bl	80005f8 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f5 fc70 	bl	8000288 <__aeabi_dsub>
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	f7f6 f8be 	bl	8000b2c <__aeabi_d2iz>
 800a9b0:	9002      	str	r0, [sp, #8]
 800a9b2:	f7f5 fdb7 	bl	8000524 <__aeabi_i2d>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	4639      	mov	r1, r7
 800a9be:	f7f5 fc63 	bl	8000288 <__aeabi_dsub>
 800a9c2:	f1ba 0f00 	cmp.w	sl, #0
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	dd6d      	ble.n	800aaa8 <__kernel_rem_pio2+0x250>
 800a9cc:	1e61      	subs	r1, r4, #1
 800a9ce:	ab0c      	add	r3, sp, #48	; 0x30
 800a9d0:	9d02      	ldr	r5, [sp, #8]
 800a9d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9d6:	f1ca 0018 	rsb	r0, sl, #24
 800a9da:	fa43 f200 	asr.w	r2, r3, r0
 800a9de:	4415      	add	r5, r2
 800a9e0:	4082      	lsls	r2, r0
 800a9e2:	1a9b      	subs	r3, r3, r2
 800a9e4:	aa0c      	add	r2, sp, #48	; 0x30
 800a9e6:	9502      	str	r5, [sp, #8]
 800a9e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a9ec:	f1ca 0217 	rsb	r2, sl, #23
 800a9f0:	fa43 fb02 	asr.w	fp, r3, r2
 800a9f4:	f1bb 0f00 	cmp.w	fp, #0
 800a9f8:	dd65      	ble.n	800aac6 <__kernel_rem_pio2+0x26e>
 800a9fa:	9b02      	ldr	r3, [sp, #8]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	3301      	adds	r3, #1
 800aa00:	9302      	str	r3, [sp, #8]
 800aa02:	4615      	mov	r5, r2
 800aa04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aa08:	4294      	cmp	r4, r2
 800aa0a:	f300 809f 	bgt.w	800ab4c <__kernel_rem_pio2+0x2f4>
 800aa0e:	f1ba 0f00 	cmp.w	sl, #0
 800aa12:	dd07      	ble.n	800aa24 <__kernel_rem_pio2+0x1cc>
 800aa14:	f1ba 0f01 	cmp.w	sl, #1
 800aa18:	f000 80c1 	beq.w	800ab9e <__kernel_rem_pio2+0x346>
 800aa1c:	f1ba 0f02 	cmp.w	sl, #2
 800aa20:	f000 80c7 	beq.w	800abb2 <__kernel_rem_pio2+0x35a>
 800aa24:	f1bb 0f02 	cmp.w	fp, #2
 800aa28:	d14d      	bne.n	800aac6 <__kernel_rem_pio2+0x26e>
 800aa2a:	4632      	mov	r2, r6
 800aa2c:	463b      	mov	r3, r7
 800aa2e:	4954      	ldr	r1, [pc, #336]	; (800ab80 <__kernel_rem_pio2+0x328>)
 800aa30:	2000      	movs	r0, #0
 800aa32:	f7f5 fc29 	bl	8000288 <__aeabi_dsub>
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	d043      	beq.n	800aac6 <__kernel_rem_pio2+0x26e>
 800aa3e:	4650      	mov	r0, sl
 800aa40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ab70 <__kernel_rem_pio2+0x318>
 800aa44:	f000 fa58 	bl	800aef8 <scalbn>
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	ec53 2b10 	vmov	r2, r3, d0
 800aa50:	f7f5 fc1a 	bl	8000288 <__aeabi_dsub>
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	e035      	b.n	800aac6 <__kernel_rem_pio2+0x26e>
 800aa5a:	4b4a      	ldr	r3, [pc, #296]	; (800ab84 <__kernel_rem_pio2+0x32c>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f5 fdc9 	bl	80005f8 <__aeabi_dmul>
 800aa66:	f7f6 f861 	bl	8000b2c <__aeabi_d2iz>
 800aa6a:	f7f5 fd5b 	bl	8000524 <__aeabi_i2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	ec43 2b18 	vmov	d8, r2, r3
 800aa76:	4b44      	ldr	r3, [pc, #272]	; (800ab88 <__kernel_rem_pio2+0x330>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	4639      	mov	r1, r7
 800aa86:	f7f5 fbff 	bl	8000288 <__aeabi_dsub>
 800aa8a:	f7f6 f84f 	bl	8000b2c <__aeabi_d2iz>
 800aa8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa92:	f84b 0b04 	str.w	r0, [fp], #4
 800aa96:	ec51 0b18 	vmov	r0, r1, d8
 800aa9a:	f7f5 fbf7 	bl	800028c <__adddf3>
 800aa9e:	f109 39ff 	add.w	r9, r9, #4294967295
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	e75b      	b.n	800a960 <__kernel_rem_pio2+0x108>
 800aaa8:	d106      	bne.n	800aab8 <__kernel_rem_pio2+0x260>
 800aaaa:	1e63      	subs	r3, r4, #1
 800aaac:	aa0c      	add	r2, sp, #48	; 0x30
 800aaae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800aab6:	e79d      	b.n	800a9f4 <__kernel_rem_pio2+0x19c>
 800aab8:	4b34      	ldr	r3, [pc, #208]	; (800ab8c <__kernel_rem_pio2+0x334>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	f7f6 f822 	bl	8000b04 <__aeabi_dcmpge>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d140      	bne.n	800ab46 <__kernel_rem_pio2+0x2ee>
 800aac4:	4683      	mov	fp, r0
 800aac6:	2200      	movs	r2, #0
 800aac8:	2300      	movs	r3, #0
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f000 80c1 	beq.w	800ac5a <__kernel_rem_pio2+0x402>
 800aad8:	1e65      	subs	r5, r4, #1
 800aada:	462b      	mov	r3, r5
 800aadc:	2200      	movs	r2, #0
 800aade:	9900      	ldr	r1, [sp, #0]
 800aae0:	428b      	cmp	r3, r1
 800aae2:	da6d      	bge.n	800abc0 <__kernel_rem_pio2+0x368>
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	f000 808a 	beq.w	800abfe <__kernel_rem_pio2+0x3a6>
 800aaea:	ab0c      	add	r3, sp, #48	; 0x30
 800aaec:	f1aa 0a18 	sub.w	sl, sl, #24
 800aaf0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 80ae 	beq.w	800ac56 <__kernel_rem_pio2+0x3fe>
 800aafa:	4650      	mov	r0, sl
 800aafc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ab70 <__kernel_rem_pio2+0x318>
 800ab00:	f000 f9fa 	bl	800aef8 <scalbn>
 800ab04:	1c6b      	adds	r3, r5, #1
 800ab06:	00da      	lsls	r2, r3, #3
 800ab08:	9205      	str	r2, [sp, #20]
 800ab0a:	ec57 6b10 	vmov	r6, r7, d0
 800ab0e:	aa70      	add	r2, sp, #448	; 0x1c0
 800ab10:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ab84 <__kernel_rem_pio2+0x32c>
 800ab14:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ab18:	462c      	mov	r4, r5
 800ab1a:	f04f 0800 	mov.w	r8, #0
 800ab1e:	2c00      	cmp	r4, #0
 800ab20:	f280 80d4 	bge.w	800accc <__kernel_rem_pio2+0x474>
 800ab24:	462c      	mov	r4, r5
 800ab26:	2c00      	cmp	r4, #0
 800ab28:	f2c0 8102 	blt.w	800ad30 <__kernel_rem_pio2+0x4d8>
 800ab2c:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <__kernel_rem_pio2+0x338>)
 800ab2e:	461e      	mov	r6, r3
 800ab30:	ab70      	add	r3, sp, #448	; 0x1c0
 800ab32:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ab36:	1b2b      	subs	r3, r5, r4
 800ab38:	f04f 0900 	mov.w	r9, #0
 800ab3c:	f04f 0a00 	mov.w	sl, #0
 800ab40:	2700      	movs	r7, #0
 800ab42:	9306      	str	r3, [sp, #24]
 800ab44:	e0e6      	b.n	800ad14 <__kernel_rem_pio2+0x4bc>
 800ab46:	f04f 0b02 	mov.w	fp, #2
 800ab4a:	e756      	b.n	800a9fa <__kernel_rem_pio2+0x1a2>
 800ab4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab50:	bb05      	cbnz	r5, 800ab94 <__kernel_rem_pio2+0x33c>
 800ab52:	b123      	cbz	r3, 800ab5e <__kernel_rem_pio2+0x306>
 800ab54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ab58:	f8c8 3000 	str.w	r3, [r8]
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	3201      	adds	r2, #1
 800ab60:	f108 0804 	add.w	r8, r8, #4
 800ab64:	461d      	mov	r5, r3
 800ab66:	e74f      	b.n	800aa08 <__kernel_rem_pio2+0x1b0>
	...
 800ab74:	3ff00000 	.word	0x3ff00000
 800ab78:	0800b440 	.word	0x0800b440
 800ab7c:	40200000 	.word	0x40200000
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	3e700000 	.word	0x3e700000
 800ab88:	41700000 	.word	0x41700000
 800ab8c:	3fe00000 	.word	0x3fe00000
 800ab90:	0800b400 	.word	0x0800b400
 800ab94:	1acb      	subs	r3, r1, r3
 800ab96:	f8c8 3000 	str.w	r3, [r8]
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	e7df      	b.n	800ab5e <__kernel_rem_pio2+0x306>
 800ab9e:	1e62      	subs	r2, r4, #1
 800aba0:	ab0c      	add	r3, sp, #48	; 0x30
 800aba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800abaa:	a90c      	add	r1, sp, #48	; 0x30
 800abac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800abb0:	e738      	b.n	800aa24 <__kernel_rem_pio2+0x1cc>
 800abb2:	1e62      	subs	r2, r4, #1
 800abb4:	ab0c      	add	r3, sp, #48	; 0x30
 800abb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800abbe:	e7f4      	b.n	800abaa <__kernel_rem_pio2+0x352>
 800abc0:	a90c      	add	r1, sp, #48	; 0x30
 800abc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	430a      	orrs	r2, r1
 800abca:	e788      	b.n	800aade <__kernel_rem_pio2+0x286>
 800abcc:	3301      	adds	r3, #1
 800abce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800abd2:	2900      	cmp	r1, #0
 800abd4:	d0fa      	beq.n	800abcc <__kernel_rem_pio2+0x374>
 800abd6:	9a08      	ldr	r2, [sp, #32]
 800abd8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800abdc:	446a      	add	r2, sp
 800abde:	3a98      	subs	r2, #152	; 0x98
 800abe0:	9208      	str	r2, [sp, #32]
 800abe2:	9a06      	ldr	r2, [sp, #24]
 800abe4:	a920      	add	r1, sp, #128	; 0x80
 800abe6:	18a2      	adds	r2, r4, r2
 800abe8:	18e3      	adds	r3, r4, r3
 800abea:	f104 0801 	add.w	r8, r4, #1
 800abee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	4543      	cmp	r3, r8
 800abf8:	da04      	bge.n	800ac04 <__kernel_rem_pio2+0x3ac>
 800abfa:	461c      	mov	r4, r3
 800abfc:	e6a2      	b.n	800a944 <__kernel_rem_pio2+0xec>
 800abfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7e4      	b.n	800abce <__kernel_rem_pio2+0x376>
 800ac04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ac0a:	f7f5 fc8b 	bl	8000524 <__aeabi_i2d>
 800ac0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	46ab      	mov	fp, r5
 800ac16:	461c      	mov	r4, r3
 800ac18:	f04f 0900 	mov.w	r9, #0
 800ac1c:	2600      	movs	r6, #0
 800ac1e:	2700      	movs	r7, #0
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	4599      	cmp	r9, r3
 800ac24:	dd06      	ble.n	800ac34 <__kernel_rem_pio2+0x3dc>
 800ac26:	9b08      	ldr	r3, [sp, #32]
 800ac28:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ac2c:	f108 0801 	add.w	r8, r8, #1
 800ac30:	9308      	str	r3, [sp, #32]
 800ac32:	e7df      	b.n	800abf4 <__kernel_rem_pio2+0x39c>
 800ac34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ac38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ac3c:	f7f5 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4630      	mov	r0, r6
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 fb20 	bl	800028c <__adddf3>
 800ac4c:	f109 0901 	add.w	r9, r9, #1
 800ac50:	4606      	mov	r6, r0
 800ac52:	460f      	mov	r7, r1
 800ac54:	e7e4      	b.n	800ac20 <__kernel_rem_pio2+0x3c8>
 800ac56:	3d01      	subs	r5, #1
 800ac58:	e747      	b.n	800aaea <__kernel_rem_pio2+0x292>
 800ac5a:	ec47 6b10 	vmov	d0, r6, r7
 800ac5e:	f1ca 0000 	rsb	r0, sl, #0
 800ac62:	f000 f949 	bl	800aef8 <scalbn>
 800ac66:	ec57 6b10 	vmov	r6, r7, d0
 800ac6a:	4ba0      	ldr	r3, [pc, #640]	; (800aeec <__kernel_rem_pio2+0x694>)
 800ac6c:	ee10 0a10 	vmov	r0, s0
 800ac70:	2200      	movs	r2, #0
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 ff46 	bl	8000b04 <__aeabi_dcmpge>
 800ac78:	b1f8      	cbz	r0, 800acba <__kernel_rem_pio2+0x462>
 800ac7a:	4b9d      	ldr	r3, [pc, #628]	; (800aef0 <__kernel_rem_pio2+0x698>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	f7f5 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ac86:	f7f5 ff51 	bl	8000b2c <__aeabi_d2iz>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	f7f5 fc4a 	bl	8000524 <__aeabi_i2d>
 800ac90:	4b96      	ldr	r3, [pc, #600]	; (800aeec <__kernel_rem_pio2+0x694>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7f5 faf2 	bl	8000288 <__aeabi_dsub>
 800aca4:	f7f5 ff42 	bl	8000b2c <__aeabi_d2iz>
 800aca8:	1c65      	adds	r5, r4, #1
 800acaa:	ab0c      	add	r3, sp, #48	; 0x30
 800acac:	f10a 0a18 	add.w	sl, sl, #24
 800acb0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acb4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800acb8:	e71f      	b.n	800aafa <__kernel_rem_pio2+0x2a2>
 800acba:	4630      	mov	r0, r6
 800acbc:	4639      	mov	r1, r7
 800acbe:	f7f5 ff35 	bl	8000b2c <__aeabi_d2iz>
 800acc2:	ab0c      	add	r3, sp, #48	; 0x30
 800acc4:	4625      	mov	r5, r4
 800acc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acca:	e716      	b.n	800aafa <__kernel_rem_pio2+0x2a2>
 800accc:	ab0c      	add	r3, sp, #48	; 0x30
 800acce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800acd2:	f7f5 fc27 	bl	8000524 <__aeabi_i2d>
 800acd6:	4632      	mov	r2, r6
 800acd8:	463b      	mov	r3, r7
 800acda:	f7f5 fc8d 	bl	80005f8 <__aeabi_dmul>
 800acde:	4642      	mov	r2, r8
 800ace0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ace4:	464b      	mov	r3, r9
 800ace6:	4630      	mov	r0, r6
 800ace8:	4639      	mov	r1, r7
 800acea:	f7f5 fc85 	bl	80005f8 <__aeabi_dmul>
 800acee:	3c01      	subs	r4, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	e713      	b.n	800ab1e <__kernel_rem_pio2+0x2c6>
 800acf6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800acfa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800acfe:	f7f5 fc7b 	bl	80005f8 <__aeabi_dmul>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4648      	mov	r0, r9
 800ad08:	4651      	mov	r1, sl
 800ad0a:	f7f5 fabf 	bl	800028c <__adddf3>
 800ad0e:	3701      	adds	r7, #1
 800ad10:	4681      	mov	r9, r0
 800ad12:	468a      	mov	sl, r1
 800ad14:	9b00      	ldr	r3, [sp, #0]
 800ad16:	429f      	cmp	r7, r3
 800ad18:	dc02      	bgt.n	800ad20 <__kernel_rem_pio2+0x4c8>
 800ad1a:	9b06      	ldr	r3, [sp, #24]
 800ad1c:	429f      	cmp	r7, r3
 800ad1e:	ddea      	ble.n	800acf6 <__kernel_rem_pio2+0x49e>
 800ad20:	9a06      	ldr	r2, [sp, #24]
 800ad22:	ab48      	add	r3, sp, #288	; 0x120
 800ad24:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ad28:	e9c6 9a00 	strd	r9, sl, [r6]
 800ad2c:	3c01      	subs	r4, #1
 800ad2e:	e6fa      	b.n	800ab26 <__kernel_rem_pio2+0x2ce>
 800ad30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	dc0b      	bgt.n	800ad4e <__kernel_rem_pio2+0x4f6>
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	dc39      	bgt.n	800adae <__kernel_rem_pio2+0x556>
 800ad3a:	d05d      	beq.n	800adf8 <__kernel_rem_pio2+0x5a0>
 800ad3c:	9b02      	ldr	r3, [sp, #8]
 800ad3e:	f003 0007 	and.w	r0, r3, #7
 800ad42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ad46:	ecbd 8b02 	vpop	{d8}
 800ad4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d1f3      	bne.n	800ad3c <__kernel_rem_pio2+0x4e4>
 800ad54:	9b05      	ldr	r3, [sp, #20]
 800ad56:	9500      	str	r5, [sp, #0]
 800ad58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ad5c:	eb0d 0403 	add.w	r4, sp, r3
 800ad60:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ad64:	46a2      	mov	sl, r4
 800ad66:	9b00      	ldr	r3, [sp, #0]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f1aa 0a08 	sub.w	sl, sl, #8
 800ad6e:	dc69      	bgt.n	800ae44 <__kernel_rem_pio2+0x5ec>
 800ad70:	46aa      	mov	sl, r5
 800ad72:	f1ba 0f01 	cmp.w	sl, #1
 800ad76:	f1a4 0408 	sub.w	r4, r4, #8
 800ad7a:	f300 8083 	bgt.w	800ae84 <__kernel_rem_pio2+0x62c>
 800ad7e:	9c05      	ldr	r4, [sp, #20]
 800ad80:	ab48      	add	r3, sp, #288	; 0x120
 800ad82:	441c      	add	r4, r3
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	2d01      	cmp	r5, #1
 800ad8a:	f300 809a 	bgt.w	800aec2 <__kernel_rem_pio2+0x66a>
 800ad8e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ad92:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ad96:	f1bb 0f00 	cmp.w	fp, #0
 800ad9a:	f040 8098 	bne.w	800aece <__kernel_rem_pio2+0x676>
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	e9c3 7800 	strd	r7, r8, [r3]
 800ada4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ada8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800adac:	e7c6      	b.n	800ad3c <__kernel_rem_pio2+0x4e4>
 800adae:	9e05      	ldr	r6, [sp, #20]
 800adb0:	ab48      	add	r3, sp, #288	; 0x120
 800adb2:	441e      	add	r6, r3
 800adb4:	462c      	mov	r4, r5
 800adb6:	2000      	movs	r0, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	2c00      	cmp	r4, #0
 800adbc:	da33      	bge.n	800ae26 <__kernel_rem_pio2+0x5ce>
 800adbe:	f1bb 0f00 	cmp.w	fp, #0
 800adc2:	d036      	beq.n	800ae32 <__kernel_rem_pio2+0x5da>
 800adc4:	4602      	mov	r2, r0
 800adc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adca:	9c04      	ldr	r4, [sp, #16]
 800adcc:	e9c4 2300 	strd	r2, r3, [r4]
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800add8:	f7f5 fa56 	bl	8000288 <__aeabi_dsub>
 800addc:	ae4a      	add	r6, sp, #296	; 0x128
 800adde:	2401      	movs	r4, #1
 800ade0:	42a5      	cmp	r5, r4
 800ade2:	da29      	bge.n	800ae38 <__kernel_rem_pio2+0x5e0>
 800ade4:	f1bb 0f00 	cmp.w	fp, #0
 800ade8:	d002      	beq.n	800adf0 <__kernel_rem_pio2+0x598>
 800adea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adee:	4619      	mov	r1, r3
 800adf0:	9b04      	ldr	r3, [sp, #16]
 800adf2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800adf6:	e7a1      	b.n	800ad3c <__kernel_rem_pio2+0x4e4>
 800adf8:	9c05      	ldr	r4, [sp, #20]
 800adfa:	ab48      	add	r3, sp, #288	; 0x120
 800adfc:	441c      	add	r4, r3
 800adfe:	2000      	movs	r0, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	da09      	bge.n	800ae1a <__kernel_rem_pio2+0x5c2>
 800ae06:	f1bb 0f00 	cmp.w	fp, #0
 800ae0a:	d002      	beq.n	800ae12 <__kernel_rem_pio2+0x5ba>
 800ae0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae10:	4619      	mov	r1, r3
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	e9c3 0100 	strd	r0, r1, [r3]
 800ae18:	e790      	b.n	800ad3c <__kernel_rem_pio2+0x4e4>
 800ae1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae1e:	f7f5 fa35 	bl	800028c <__adddf3>
 800ae22:	3d01      	subs	r5, #1
 800ae24:	e7ed      	b.n	800ae02 <__kernel_rem_pio2+0x5aa>
 800ae26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ae2a:	f7f5 fa2f 	bl	800028c <__adddf3>
 800ae2e:	3c01      	subs	r4, #1
 800ae30:	e7c3      	b.n	800adba <__kernel_rem_pio2+0x562>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	e7c8      	b.n	800adca <__kernel_rem_pio2+0x572>
 800ae38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ae3c:	f7f5 fa26 	bl	800028c <__adddf3>
 800ae40:	3401      	adds	r4, #1
 800ae42:	e7cd      	b.n	800ade0 <__kernel_rem_pio2+0x588>
 800ae44:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ae4c:	9b00      	ldr	r3, [sp, #0]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	4632      	mov	r2, r6
 800ae54:	463b      	mov	r3, r7
 800ae56:	4640      	mov	r0, r8
 800ae58:	4649      	mov	r1, r9
 800ae5a:	f7f5 fa17 	bl	800028c <__adddf3>
 800ae5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4640      	mov	r0, r8
 800ae68:	4649      	mov	r1, r9
 800ae6a:	f7f5 fa0d 	bl	8000288 <__aeabi_dsub>
 800ae6e:	4632      	mov	r2, r6
 800ae70:	463b      	mov	r3, r7
 800ae72:	f7f5 fa0b 	bl	800028c <__adddf3>
 800ae76:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ae7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae7e:	ed8a 7b00 	vstr	d7, [sl]
 800ae82:	e770      	b.n	800ad66 <__kernel_rem_pio2+0x50e>
 800ae84:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ae8c:	4640      	mov	r0, r8
 800ae8e:	4632      	mov	r2, r6
 800ae90:	463b      	mov	r3, r7
 800ae92:	4649      	mov	r1, r9
 800ae94:	f7f5 f9fa 	bl	800028c <__adddf3>
 800ae98:	e9cd 0100 	strd	r0, r1, [sp]
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	4640      	mov	r0, r8
 800aea2:	4649      	mov	r1, r9
 800aea4:	f7f5 f9f0 	bl	8000288 <__aeabi_dsub>
 800aea8:	4632      	mov	r2, r6
 800aeaa:	463b      	mov	r3, r7
 800aeac:	f7f5 f9ee 	bl	800028c <__adddf3>
 800aeb0:	ed9d 7b00 	vldr	d7, [sp]
 800aeb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aeb8:	ed84 7b00 	vstr	d7, [r4]
 800aebc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aec0:	e757      	b.n	800ad72 <__kernel_rem_pio2+0x51a>
 800aec2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aec6:	f7f5 f9e1 	bl	800028c <__adddf3>
 800aeca:	3d01      	subs	r5, #1
 800aecc:	e75c      	b.n	800ad88 <__kernel_rem_pio2+0x530>
 800aece:	9b04      	ldr	r3, [sp, #16]
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	601f      	str	r7, [r3, #0]
 800aed4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800aed8:	605c      	str	r4, [r3, #4]
 800aeda:	609d      	str	r5, [r3, #8]
 800aedc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aee0:	60d3      	str	r3, [r2, #12]
 800aee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aee6:	6110      	str	r0, [r2, #16]
 800aee8:	6153      	str	r3, [r2, #20]
 800aeea:	e727      	b.n	800ad3c <__kernel_rem_pio2+0x4e4>
 800aeec:	41700000 	.word	0x41700000
 800aef0:	3e700000 	.word	0x3e700000
 800aef4:	00000000 	.word	0x00000000

0800aef8 <scalbn>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	ec55 4b10 	vmov	r4, r5, d0
 800aefe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800af02:	4606      	mov	r6, r0
 800af04:	462b      	mov	r3, r5
 800af06:	b999      	cbnz	r1, 800af30 <scalbn+0x38>
 800af08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af0c:	4323      	orrs	r3, r4
 800af0e:	d03f      	beq.n	800af90 <scalbn+0x98>
 800af10:	4b35      	ldr	r3, [pc, #212]	; (800afe8 <scalbn+0xf0>)
 800af12:	4629      	mov	r1, r5
 800af14:	ee10 0a10 	vmov	r0, s0
 800af18:	2200      	movs	r2, #0
 800af1a:	f7f5 fb6d 	bl	80005f8 <__aeabi_dmul>
 800af1e:	4b33      	ldr	r3, [pc, #204]	; (800afec <scalbn+0xf4>)
 800af20:	429e      	cmp	r6, r3
 800af22:	4604      	mov	r4, r0
 800af24:	460d      	mov	r5, r1
 800af26:	da10      	bge.n	800af4a <scalbn+0x52>
 800af28:	a327      	add	r3, pc, #156	; (adr r3, 800afc8 <scalbn+0xd0>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	e01f      	b.n	800af70 <scalbn+0x78>
 800af30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800af34:	4291      	cmp	r1, r2
 800af36:	d10c      	bne.n	800af52 <scalbn+0x5a>
 800af38:	ee10 2a10 	vmov	r2, s0
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 f9a4 	bl	800028c <__adddf3>
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	e022      	b.n	800af90 <scalbn+0x98>
 800af4a:	460b      	mov	r3, r1
 800af4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af50:	3936      	subs	r1, #54	; 0x36
 800af52:	f24c 3250 	movw	r2, #50000	; 0xc350
 800af56:	4296      	cmp	r6, r2
 800af58:	dd0d      	ble.n	800af76 <scalbn+0x7e>
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	a11c      	add	r1, pc, #112	; (adr r1, 800afd0 <scalbn+0xd8>)
 800af5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af62:	da02      	bge.n	800af6a <scalbn+0x72>
 800af64:	a11c      	add	r1, pc, #112	; (adr r1, 800afd8 <scalbn+0xe0>)
 800af66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af6a:	a319      	add	r3, pc, #100	; (adr r3, 800afd0 <scalbn+0xd8>)
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f7f5 fb42 	bl	80005f8 <__aeabi_dmul>
 800af74:	e7e6      	b.n	800af44 <scalbn+0x4c>
 800af76:	1872      	adds	r2, r6, r1
 800af78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800af7c:	428a      	cmp	r2, r1
 800af7e:	dcec      	bgt.n	800af5a <scalbn+0x62>
 800af80:	2a00      	cmp	r2, #0
 800af82:	dd08      	ble.n	800af96 <scalbn+0x9e>
 800af84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af90:	ec45 4b10 	vmov	d0, r4, r5
 800af94:	bd70      	pop	{r4, r5, r6, pc}
 800af96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800af9a:	da08      	bge.n	800afae <scalbn+0xb6>
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	a10a      	add	r1, pc, #40	; (adr r1, 800afc8 <scalbn+0xd0>)
 800afa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa4:	dac0      	bge.n	800af28 <scalbn+0x30>
 800afa6:	a10e      	add	r1, pc, #56	; (adr r1, 800afe0 <scalbn+0xe8>)
 800afa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afac:	e7bc      	b.n	800af28 <scalbn+0x30>
 800afae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afb2:	3236      	adds	r2, #54	; 0x36
 800afb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800afbc:	4620      	mov	r0, r4
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <scalbn+0xf8>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	e7d5      	b.n	800af70 <scalbn+0x78>
 800afc4:	f3af 8000 	nop.w
 800afc8:	c2f8f359 	.word	0xc2f8f359
 800afcc:	01a56e1f 	.word	0x01a56e1f
 800afd0:	8800759c 	.word	0x8800759c
 800afd4:	7e37e43c 	.word	0x7e37e43c
 800afd8:	8800759c 	.word	0x8800759c
 800afdc:	fe37e43c 	.word	0xfe37e43c
 800afe0:	c2f8f359 	.word	0xc2f8f359
 800afe4:	81a56e1f 	.word	0x81a56e1f
 800afe8:	43500000 	.word	0x43500000
 800afec:	ffff3cb0 	.word	0xffff3cb0
 800aff0:	3c900000 	.word	0x3c900000
 800aff4:	00000000 	.word	0x00000000

0800aff8 <floor>:
 800aff8:	ec51 0b10 	vmov	r0, r1, d0
 800affc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800b008:	2e13      	cmp	r6, #19
 800b00a:	ee10 5a10 	vmov	r5, s0
 800b00e:	ee10 8a10 	vmov	r8, s0
 800b012:	460c      	mov	r4, r1
 800b014:	dc31      	bgt.n	800b07a <floor+0x82>
 800b016:	2e00      	cmp	r6, #0
 800b018:	da14      	bge.n	800b044 <floor+0x4c>
 800b01a:	a333      	add	r3, pc, #204	; (adr r3, 800b0e8 <floor+0xf0>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f934 	bl	800028c <__adddf3>
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	f7f5 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800b02c:	b138      	cbz	r0, 800b03e <floor+0x46>
 800b02e:	2c00      	cmp	r4, #0
 800b030:	da53      	bge.n	800b0da <floor+0xe2>
 800b032:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b036:	4325      	orrs	r5, r4
 800b038:	d052      	beq.n	800b0e0 <floor+0xe8>
 800b03a:	4c2d      	ldr	r4, [pc, #180]	; (800b0f0 <floor+0xf8>)
 800b03c:	2500      	movs	r5, #0
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	e024      	b.n	800b08e <floor+0x96>
 800b044:	4f2b      	ldr	r7, [pc, #172]	; (800b0f4 <floor+0xfc>)
 800b046:	4137      	asrs	r7, r6
 800b048:	ea01 0307 	and.w	r3, r1, r7
 800b04c:	4303      	orrs	r3, r0
 800b04e:	d01e      	beq.n	800b08e <floor+0x96>
 800b050:	a325      	add	r3, pc, #148	; (adr r3, 800b0e8 <floor+0xf0>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 f919 	bl	800028c <__adddf3>
 800b05a:	2200      	movs	r2, #0
 800b05c:	2300      	movs	r3, #0
 800b05e:	f7f5 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 800b062:	2800      	cmp	r0, #0
 800b064:	d0eb      	beq.n	800b03e <floor+0x46>
 800b066:	2c00      	cmp	r4, #0
 800b068:	bfbe      	ittt	lt
 800b06a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b06e:	4133      	asrlt	r3, r6
 800b070:	18e4      	addlt	r4, r4, r3
 800b072:	ea24 0407 	bic.w	r4, r4, r7
 800b076:	2500      	movs	r5, #0
 800b078:	e7e1      	b.n	800b03e <floor+0x46>
 800b07a:	2e33      	cmp	r6, #51	; 0x33
 800b07c:	dd0b      	ble.n	800b096 <floor+0x9e>
 800b07e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b082:	d104      	bne.n	800b08e <floor+0x96>
 800b084:	ee10 2a10 	vmov	r2, s0
 800b088:	460b      	mov	r3, r1
 800b08a:	f7f5 f8ff 	bl	800028c <__adddf3>
 800b08e:	ec41 0b10 	vmov	d0, r0, r1
 800b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b096:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800b09a:	f04f 37ff 	mov.w	r7, #4294967295
 800b09e:	40df      	lsrs	r7, r3
 800b0a0:	4238      	tst	r0, r7
 800b0a2:	d0f4      	beq.n	800b08e <floor+0x96>
 800b0a4:	a310      	add	r3, pc, #64	; (adr r3, 800b0e8 <floor+0xf0>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f8ef 	bl	800028c <__adddf3>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f7f5 fd31 	bl	8000b18 <__aeabi_dcmpgt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0c1      	beq.n	800b03e <floor+0x46>
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	da0a      	bge.n	800b0d4 <floor+0xdc>
 800b0be:	2e14      	cmp	r6, #20
 800b0c0:	d101      	bne.n	800b0c6 <floor+0xce>
 800b0c2:	3401      	adds	r4, #1
 800b0c4:	e006      	b.n	800b0d4 <floor+0xdc>
 800b0c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	40b3      	lsls	r3, r6
 800b0ce:	441d      	add	r5, r3
 800b0d0:	45a8      	cmp	r8, r5
 800b0d2:	d8f6      	bhi.n	800b0c2 <floor+0xca>
 800b0d4:	ea25 0507 	bic.w	r5, r5, r7
 800b0d8:	e7b1      	b.n	800b03e <floor+0x46>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	462c      	mov	r4, r5
 800b0de:	e7ae      	b.n	800b03e <floor+0x46>
 800b0e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b0e4:	e7ab      	b.n	800b03e <floor+0x46>
 800b0e6:	bf00      	nop
 800b0e8:	8800759c 	.word	0x8800759c
 800b0ec:	7e37e43c 	.word	0x7e37e43c
 800b0f0:	bff00000 	.word	0xbff00000
 800b0f4:	000fffff 	.word	0x000fffff

0800b0f8 <_init>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr

0800b104 <_fini>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr
