
Project4-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f898  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800fa28  0800fa28  0001fa28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104b0  080104b0  000305dc  2**0
                  CONTENTS
  4 .ARM          00000008  080104b0  080104b0  000204b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104b8  080104b8  000305dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104b8  080104b8  000204b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104bc  080104bc  000204bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  080104c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004268  200005dc  08010a9c  000305dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004844  08010a9c  00034844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e016  00000000  00000000  0003064f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f9  00000000  00000000  0004e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00052760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001403  00000000  00000000  00054138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3fd  00000000  00000000  0005553b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d67b  00000000  00000000  0007f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001019c6  00000000  00000000  0009cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000852c  00000000  00000000  0019e97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001a6ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005dc 	.word	0x200005dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fa10 	.word	0x0800fa10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e0 	.word	0x200005e0
 80001cc:	0800fa10 	.word	0x0800fa10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <get_noise>:
    1701, 1690, 1690, 1701, 1690, 1690, 1701, 1701, 1701, 1701, 1722, 1722, 1712, 1722, 1722, 1733,
    1733, 1733, 1733, 1712, 1712, 1712, 1733, 1733, 1733, 1733, 1733, 1733, 1744, 1744, 1744, 1744,
    1744, 1744, 1733, 1733, 1722, 1722, 1722, 1722, 1722, 1722, 1733, 1722, 1722, 1722, 1722, 1722,
    1701, 1669, 1669, 1680, 1690, 1690, 1690, 1701, 1701, 1712, 1712, 1712, 1690, 1669, 1669, 1680
};
uint16_t get_noise(int noise){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	switch(noise){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0c      	cmp	r3, #12
 8000ffc:	d83a      	bhi.n	8001074 <get_noise+0x84>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <get_noise+0x14>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	0800103d 	.word	0x0800103d
 800100c:	08001041 	.word	0x08001041
 8001010:	08001045 	.word	0x08001045
 8001014:	08001049 	.word	0x08001049
 8001018:	0800104d 	.word	0x0800104d
 800101c:	08001051 	.word	0x08001051
 8001020:	08001055 	.word	0x08001055
 8001024:	08001059 	.word	0x08001059
 8001028:	0800105d 	.word	0x0800105d
 800102c:	08001063 	.word	0x08001063
 8001030:	08001069 	.word	0x08001069
 8001034:	0800106f 	.word	0x0800106f
		case(0):
			return (uint16_t)0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	e01c      	b.n	8001076 <get_noise+0x86>
			break;
		case(1):
			return (uint16_t)0x01;
 800103c:	2301      	movs	r3, #1
 800103e:	e01a      	b.n	8001076 <get_noise+0x86>
			break;
		case(2):
			return (uint16_t)0x03;
 8001040:	2303      	movs	r3, #3
 8001042:	e018      	b.n	8001076 <get_noise+0x86>
			break;
		case(3):
			return (uint16_t)0x07;
 8001044:	2307      	movs	r3, #7
 8001046:	e016      	b.n	8001076 <get_noise+0x86>
			break;
		case(4):
			return (uint16_t)0x0F;
 8001048:	230f      	movs	r3, #15
 800104a:	e014      	b.n	8001076 <get_noise+0x86>
			break;
		case(5):
			return (uint16_t)0x1F;
 800104c:	231f      	movs	r3, #31
 800104e:	e012      	b.n	8001076 <get_noise+0x86>
			break;
		case(6):
			return (uint16_t)0x3F;
 8001050:	233f      	movs	r3, #63	; 0x3f
 8001052:	e010      	b.n	8001076 <get_noise+0x86>
			break;
		case(7):
			return (uint16_t)0x7F;
 8001054:	237f      	movs	r3, #127	; 0x7f
 8001056:	e00e      	b.n	8001076 <get_noise+0x86>
			break;
		case(8):
			return (uint16_t)0xFF;
 8001058:	23ff      	movs	r3, #255	; 0xff
 800105a:	e00c      	b.n	8001076 <get_noise+0x86>
			break;
		case(9):
			return (uint16_t)0x1FF;
 800105c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001060:	e009      	b.n	8001076 <get_noise+0x86>
			break;
		case(10):
			return (uint16_t)0x3FF;
 8001062:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001066:	e006      	b.n	8001076 <get_noise+0x86>
			break;
		case(11):
			return (uint16_t)0x7FF;
 8001068:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800106c:	e003      	b.n	8001076 <get_noise+0x86>
			break;
		case(12):
			return (uint16_t)0xFFF;
 800106e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001072:	e000      	b.n	8001076 <get_noise+0x86>
			break;
		default:
			return (uint16_t) 0;
 8001074:	2300      	movs	r3, #0

	}

}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	0000      	movs	r0, r0
	...

08001088 <init_DC>:
void init_DC(float maxv, float minv, int noise, RNG_HandleTypeDef *hrng,int channel){
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001092:	edc7 0a04 	vstr	s1, [r7, #16]
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff ffa7 	bl	8000ff0 <get_noise>
 80010a2:	4603      	mov	r3, r0
 80010a4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d13c      	bne.n	8001126 <init_DC+0x9e>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b0:	e033      	b.n	800111a <init_DC+0x92>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f004 f95e 	bl	800537a <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010c4:	4013      	ands	r3, r2
 80010c6:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (minv*4096/3.3);
 80010c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b0 <init_DC+0x128>
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	ee17 0a90 	vmov	r0, s15
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	a332      	add	r3, pc, #200	; (adr r3, 80011a8 <init_DC+0x120>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <init_DC+0x12c>)
 80010fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		waveform[i] |= new_noise;
 8001100:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <init_DC+0x12c>)
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800110a:	431a      	orrs	r2, r3
 800110c:	4929      	ldr	r1, [pc, #164]	; (80011b4 <init_DC+0x12c>)
 800110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 8001114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001116:	3301      	adds	r3, #1
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <init_DC+0x130>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001120:	429a      	cmp	r2, r3
 8001122:	dbc6      	blt.n	80010b2 <init_DC+0x2a>
			waveform2[i] = (uint16_t) (minv*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}

}
 8001124:	e03b      	b.n	800119e <init_DC+0x116>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
 800112a:	e033      	b.n	8001194 <init_DC+0x10c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	68b8      	ldr	r0, [r7, #8]
 8001134:	f004 f921 	bl	800537a <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	b29a      	uxth	r2, r3
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	4013      	ands	r3, r2
 8001140:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (minv*4096/3.3);
 8001142:	edd7 7a04 	vldr	s15, [r7, #16]
 8001146:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80011b0 <init_DC+0x128>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	a314      	add	r3, pc, #80	; (adr r3, 80011a8 <init_DC+0x120>)
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	f7ff fb76 	bl	800084c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <init_DC+0x134>)
 8001174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <init_DC+0x134>)
 800117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001182:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001184:	431a      	orrs	r2, r3
 8001186:	490d      	ldr	r1, [pc, #52]	; (80011bc <init_DC+0x134>)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	3301      	adds	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <init_DC+0x130>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	429a      	cmp	r2, r3
 800119c:	dbc6      	blt.n	800112c <init_DC+0xa4>
}
 800119e:	bf00      	nop
 80011a0:	3730      	adds	r7, #48	; 0x30
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	66666666 	.word	0x66666666
 80011ac:	400a6666 	.word	0x400a6666
 80011b0:	45800000 	.word	0x45800000
 80011b4:	200005f8 	.word	0x200005f8
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200009f8 	.word	0x200009f8

080011c0 <init_generator>:

void init_generator(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel) {
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff ff0b 	bl	8000ff0 <get_noise>
 80011da:	4603      	mov	r3, r0
 80011dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	f040 8091 	bne.w	8001308 <init_generator+0x148>
	for(int i = 0; i < NUM_SAMPLES; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ea:	e086      	b.n	80012fa <init_generator+0x13a>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f004 f8c1 	bl	800537a <HAL_RNG_GenerateRandomNumber>
		uint16_t new_noise = (uint16_t)(((uint16_t)random) & bits);
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fe:	4013      	ands	r3, r2
 8001200:	847b      	strh	r3, [r7, #34]	; 0x22
		waveform[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	a38b      	add	r3, pc, #556	; (adr r3, 8001438 <init_generator+0x278>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9f3 	bl	80005f8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	4b89      	ldr	r3, [pc, #548]	; (8001440 <init_generator+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f97f 	bl	8000524 <__aeabi_i2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7ff fb0d 	bl	800084c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	ec43 2b17 	vmov	d7, r2, r3
 800123a:	eeb0 0a47 	vmov.f32	s0, s14
 800123e:	eef0 0a67 	vmov.f32	s1, s15
 8001242:	f00d fb5d 	bl	800e900 <sin>
 8001246:	ec55 4b10 	vmov	r4, r5, d0
 800124a:	ed97 7a05 	vldr	s14, [r7, #20]
 800124e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800125a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800125e:	ee16 0a90 	vmov	r0, s13
 8001262:	f7ff f971 	bl	8000548 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4614      	mov	r4, r2
 8001278:	461d      	mov	r5, r3
 800127a:	ed97 7a05 	vldr	s14, [r7, #20]
 800127e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800128a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800128e:	ee16 0a90 	vmov	r0, s13
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff5 	bl	800028c <__adddf3>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <init_generator+0x284>)
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	a35c      	add	r3, pc, #368	; (adr r3, 8001430 <init_generator+0x270>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fac3 	bl	800084c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc6b 	bl	8000ba8 <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4a5b      	ldr	r2, [pc, #364]	; (8001448 <init_generator+0x288>)
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		//waveform[i] = round(((sin(i*2*M_PI / 256) + 1)*((4096 / 3.3*(maxv - minv)) / 2)) + 4096 / 3.3 * minv);
		waveform[i] |= new_noise;
 80012e0:	4a59      	ldr	r2, [pc, #356]	; (8001448 <init_generator+0x288>)
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ea:	431a      	orrs	r2, r3
 80012ec:	4956      	ldr	r1, [pc, #344]	; (8001448 <init_generator+0x288>)
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_SAMPLES; i++){
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	3301      	adds	r3, #1
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <init_generator+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001300:	429a      	cmp	r2, r3
 8001302:	f6ff af73 	blt.w	80011ec <init_generator+0x2c>
			uint16_t new_noise = (uint16_t)(random & bits);
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
			waveform2[i] |= new_noise;
		    }
	}
}
 8001306:	e08f      	b.n	8001428 <init_generator+0x268>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
 800130c:	e086      	b.n	800141c <init_generator+0x25c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	68b8      	ldr	r0, [r7, #8]
 8001316:	f004 f830 	bl	800537a <HAL_RNG_GenerateRandomNumber>
			uint16_t new_noise = (uint16_t)(random & bits);
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	b29a      	uxth	r2, r3
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	4013      	ands	r3, r2
 8001322:	84bb      	strh	r3, [r7, #36]	; 0x24
			waveform2[i] = (uint16_t) (((sin(2.0*M_PI*((double) i)/(double)(NUM_SAMPLES-1)) * ((maxv-minv)/2)) + ((maxv+minv)/2))*4096/3.3);
 8001324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	a343      	add	r3, pc, #268	; (adr r3, 8001438 <init_generator+0x278>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	4b40      	ldr	r3, [pc, #256]	; (8001440 <init_generator+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8ee 	bl	8000524 <__aeabi_i2d>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4620      	mov	r0, r4
 800134e:	4629      	mov	r1, r5
 8001350:	f7ff fa7c 	bl	800084c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	ec43 2b17 	vmov	d7, r2, r3
 800135c:	eeb0 0a47 	vmov.f32	s0, s14
 8001360:	eef0 0a67 	vmov.f32	s1, s15
 8001364:	f00d facc 	bl	800e900 <sin>
 8001368:	ec55 4b10 	vmov	r4, r5, d0
 800136c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001370:	edd7 7a04 	vldr	s15, [r7, #16]
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800137c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001380:	ee16 0a90 	vmov	r0, s13
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f932 	bl	80005f8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	ed97 7a05 	vldr	s14, [r7, #20]
 80013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b0:	ee16 0a90 	vmov	r0, s13
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7fe ff64 	bl	800028c <__adddf3>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <init_generator+0x284>)
 80013d2:	f7ff f911 	bl	80005f8 <__aeabi_dmul>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	a314      	add	r3, pc, #80	; (adr r3, 8001430 <init_generator+0x270>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fa32 	bl	800084c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4619      	mov	r1, r3
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <init_generator+0x28c>)
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			waveform2[i] |= new_noise;
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <init_generator+0x28c>)
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	431a      	orrs	r2, r3
 800140e:	490f      	ldr	r1, [pc, #60]	; (800144c <init_generator+0x28c>)
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	3301      	adds	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <init_generator+0x280>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001422:	429a      	cmp	r2, r3
 8001424:	f6ff af73 	blt.w	800130e <init_generator+0x14e>
}
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bdb0      	pop	{r4, r5, r7, pc}
 8001430:	66666666 	.word	0x66666666
 8001434:	400a6666 	.word	0x400a6666
 8001438:	54442d18 	.word	0x54442d18
 800143c:	401921fb 	.word	0x401921fb
 8001440:	20000000 	.word	0x20000000
 8001444:	40b00000 	.word	0x40b00000
 8001448:	200005f8 	.word	0x200005f8
 800144c:	200009f8 	.word	0x200009f8

08001450 <init_triangle>:

void init_triangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng, int channel){
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	ed87 0a05 	vstr	s0, [r7, #20]
 800145a:	edc7 0a04 	vstr	s1, [r7, #16]
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fdc3 	bl	8000ff0 <get_noise>
 800146a:	4603      	mov	r3, r0
 800146c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 809a 	bne.w	80015aa <init_triangle+0x15a>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800147a:	e08f      	b.n	800159c <init_triangle+0x14c>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f003 ff79 	bl	800537a <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	b29a      	uxth	r2, r3
 800148c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148e:	4013      	ands	r3, r2
 8001490:	847b      	strh	r3, [r7, #34]	; 0x22
        if(i < NUM_SAMPLES/2){
 8001492:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <init_triangle+0x2a0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	461a      	mov	r2, r3
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	4293      	cmp	r3, r2
 80014a2:	da35      	bge.n	8001510 <init_triangle+0xc0>
        	waveform[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014b0:	4b8f      	ldr	r3, [pc, #572]	; (80016f0 <init_triangle+0x2a0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80016f4 <init_triangle+0x2a4>
 80014de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e2:	ee17 0a90 	vmov	r0, s15
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	a37f      	add	r3, pc, #508	; (adr r3, 80016e8 <init_triangle+0x298>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f9ac 	bl	800084c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fb54 	bl	8000ba8 <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	b29b      	uxth	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	4a7c      	ldr	r2, [pc, #496]	; (80016f8 <init_triangle+0x2a8>)
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800150e:	e038      	b.n	8001582 <init_triangle+0x132>
        }else{
        	waveform[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001510:	4b77      	ldr	r3, [pc, #476]	; (80016f0 <init_triangle+0x2a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001524:	4b72      	ldr	r3, [pc, #456]	; (80016f0 <init_triangle+0x2a0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001536:	edd7 6a05 	vldr	s13, [r7, #20]
 800153a:	edd7 7a04 	vldr	s15, [r7, #16]
 800153e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001546:	edd7 7a05 	vldr	s15, [r7, #20]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80016f4 <init_triangle+0x2a4>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	ee17 0a90 	vmov	r0, s15
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	a362      	add	r3, pc, #392	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f972 	bl	800084c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001574:	4603      	mov	r3, r0
 8001576:	b29b      	uxth	r3, r3
 8001578:	4619      	mov	r1, r3
 800157a:	4a5f      	ldr	r2, [pc, #380]	; (80016f8 <init_triangle+0x2a8>)
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    	waveform[i] |= noise;
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <init_triangle+0x2a8>)
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800158a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800158c:	431a      	orrs	r2, r3
 800158e:	495a      	ldr	r1, [pc, #360]	; (80016f8 <init_triangle+0x2a8>)
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3301      	adds	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <init_triangle+0x2a0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015a2:	429a      	cmp	r2, r3
 80015a4:	f6ff af6a 	blt.w	800147c <init_triangle+0x2c>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
	        }
	    	waveform2[i] |= noise;
	    }
	}
}
 80015a8:	e098      	b.n	80016dc <init_triangle+0x28c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ae:	e08f      	b.n	80016d0 <init_triangle+0x280>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	68b8      	ldr	r0, [r7, #8]
 80015b8:	f003 fedf 	bl	800537a <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015c2:	4013      	ands	r3, r2
 80015c4:	84bb      	strh	r3, [r7, #36]	; 0x24
	        if(i < NUM_SAMPLES/2){
 80015c6:	4b4a      	ldr	r3, [pc, #296]	; (80016f0 <init_triangle+0x2a0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0fda      	lsrs	r2, r3, #31
 80015cc:	4413      	add	r3, r2
 80015ce:	105b      	asrs	r3, r3, #1
 80015d0:	461a      	mov	r2, r3
 80015d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d4:	4293      	cmp	r3, r2
 80015d6:	da35      	bge.n	8001644 <init_triangle+0x1f4>
	        	waveform2[i] = (uint16_t) ((((float)(2*i)/(float)(NUM_SAMPLES-1)) * (maxv-minv) + minv)*4096/3.3);
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <init_triangle+0x2a0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80015fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	edd7 7a04 	vldr	s15, [r7, #16]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80016f4 <init_triangle+0x2a4>
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	ee17 0a90 	vmov	r0, s15
 800161a:	f7fe ff95 	bl	8000548 <__aeabi_f2d>
 800161e:	a332      	add	r3, pc, #200	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f912 	bl	800084c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff faba 	bl	8000ba8 <__aeabi_d2uiz>
 8001634:	4603      	mov	r3, r0
 8001636:	b29b      	uxth	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	4a30      	ldr	r2, [pc, #192]	; (80016fc <init_triangle+0x2ac>)
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001642:	e038      	b.n	80016b6 <init_triangle+0x266>
	        	waveform2[i] = (uint16_t) ((((float)(NUM_SAMPLES-1-(2*i))/(float)(NUM_SAMPLES-1)) * (maxv-minv) + maxv)*4096/3.3);
 8001644:	4b2a      	ldr	r3, [pc, #168]	; (80016f0 <init_triangle+0x2a0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <init_triangle+0x2a0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800166a:	edd7 6a05 	vldr	s13, [r7, #20]
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016f4 <init_triangle+0x2a4>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff5b 	bl	8000548 <__aeabi_f2d>
 8001692:	a315      	add	r3, pc, #84	; (adr r3, 80016e8 <init_triangle+0x298>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8d8 	bl	800084c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa80 	bl	8000ba8 <__aeabi_d2uiz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <init_triangle+0x2ac>)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 80016b6:	4a11      	ldr	r2, [pc, #68]	; (80016fc <init_triangle+0x2ac>)
 80016b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c0:	431a      	orrs	r2, r3
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <init_triangle+0x2ac>)
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	3301      	adds	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <init_triangle+0x2a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f6ff af6a 	blt.w	80015b0 <init_triangle+0x160>
}
 80016dc:	bf00      	nop
 80016de:	3730      	adds	r7, #48	; 0x30
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	f3af 8000 	nop.w
 80016e8:	66666666 	.word	0x66666666
 80016ec:	400a6666 	.word	0x400a6666
 80016f0:	20000000 	.word	0x20000000
 80016f4:	45800000 	.word	0x45800000
 80016f8:	200005f8 	.word	0x200005f8
 80016fc:	200009f8 	.word	0x200009f8

08001700 <init_rectangle>:


void init_rectangle(float maxv, float minv,int noise, RNG_HandleTypeDef *hrng,int channel){
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	ed87 0a05 	vstr	s0, [r7, #20]
 800170a:	edc7 0a04 	vstr	s1, [r7, #16]
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	uint32_t random;
	uint16_t bits = get_noise(noise);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fc6b 	bl	8000ff0 <get_noise>
 800171a:	4603      	mov	r3, r0
 800171c:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(channel == 1){
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d148      	bne.n	80017b6 <init_rectangle+0xb6>
    for(int i = 0; i < NUM_SAMPLES; i++){
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001728:	e03f      	b.n	80017aa <init_rectangle+0xaa>
		HAL_RNG_GenerateRandomNumber(hrng, &random);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f003 fe22 	bl	800537a <HAL_RNG_GenerateRandomNumber>
		uint16_t noise = (uint16_t)(random & bits);
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	b29a      	uxth	r2, r3
 800173a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800173c:	4013      	ands	r3, r2
 800173e:	847b      	strh	r3, [r7, #34]	; 0x22
    	waveform[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 8001740:	4b45      	ldr	r3, [pc, #276]	; (8001858 <init_rectangle+0x158>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0fda      	lsrs	r2, r3, #31
 8001746:	4413      	add	r3, r2
 8001748:	105b      	asrs	r3, r3, #1
 800174a:	461a      	mov	r2, r3
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	4293      	cmp	r3, r2
 8001750:	da02      	bge.n	8001758 <init_rectangle+0x58>
 8001752:	edd7 7a04 	vldr	s15, [r7, #16]
 8001756:	e001      	b.n	800175c <init_rectangle+0x5c>
 8001758:	edd7 7a05 	vldr	s15, [r7, #20]
 800175c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800185c <init_rectangle+0x15c>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	a338      	add	r3, pc, #224	; (adr r3, 8001850 <init_rectangle+0x150>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f86b 	bl	800084c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa13 	bl	8000ba8 <__aeabi_d2uiz>
 8001782:	4603      	mov	r3, r0
 8001784:	b29b      	uxth	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	4a35      	ldr	r2, [pc, #212]	; (8001860 <init_rectangle+0x160>)
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	waveform[i] |= noise;
 8001790:	4a33      	ldr	r2, [pc, #204]	; (8001860 <init_rectangle+0x160>)
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800179a:	431a      	orrs	r2, r3
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <init_rectangle+0x160>)
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for(int i = 0; i < NUM_SAMPLES; i++){
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	3301      	adds	r3, #1
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <init_rectangle+0x158>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbba      	blt.n	800172a <init_rectangle+0x2a>
			uint16_t noise = (uint16_t)(random & bits);
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
	    	waveform2[i] |= noise;
	    }
	}
}
 80017b4:	e047      	b.n	8001846 <init_rectangle+0x146>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ba:	e03f      	b.n	800183c <init_rectangle+0x13c>
			HAL_RNG_GenerateRandomNumber(hrng, &random);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f003 fdd9 	bl	800537a <HAL_RNG_GenerateRandomNumber>
			uint16_t noise = (uint16_t)(random & bits);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017ce:	4013      	ands	r3, r2
 80017d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	    	waveform2[i] = (uint16_t) (((i < (NUM_SAMPLES/2))? minv : maxv)*4096/3.3);
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <init_rectangle+0x158>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	4413      	add	r3, r2
 80017da:	105b      	asrs	r3, r3, #1
 80017dc:	461a      	mov	r2, r3
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	4293      	cmp	r3, r2
 80017e2:	da02      	bge.n	80017ea <init_rectangle+0xea>
 80017e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e8:	e001      	b.n	80017ee <init_rectangle+0xee>
 80017ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800185c <init_rectangle+0x15c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	a314      	add	r3, pc, #80	; (adr r3, 8001850 <init_rectangle+0x150>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f822 	bl	800084c <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9ca 	bl	8000ba8 <__aeabi_d2uiz>
 8001814:	4603      	mov	r3, r0
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <init_rectangle+0x164>)
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    	waveform2[i] |= noise;
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <init_rectangle+0x164>)
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800182a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800182c:	431a      	orrs	r2, r3
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <init_rectangle+0x164>)
 8001830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	3301      	adds	r3, #1
 800183a:	62bb      	str	r3, [r7, #40]	; 0x28
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <init_rectangle+0x158>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	429a      	cmp	r2, r3
 8001844:	dbba      	blt.n	80017bc <init_rectangle+0xbc>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	66666666 	.word	0x66666666
 8001854:	400a6666 	.word	0x400a6666
 8001858:	20000000 	.word	0x20000000
 800185c:	45800000 	.word	0x45800000
 8001860:	200005f8 	.word	0x200005f8
 8001864:	200009f8 	.word	0x200009f8

08001868 <init_ekg>:

void init_ekg(int channel){
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(channel == 1){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d113      	bne.n	800189e <init_ekg+0x36>
		for(int i = 0; i < NUM_SAMPLES; i++){
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e00a      	b.n	8001892 <init_ekg+0x2a>
			waveform[i] = ekg[i];
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <init_ekg+0x68>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <init_ekg+0x6c>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_SAMPLES; i++){
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3301      	adds	r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <init_ekg+0x70>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbef      	blt.n	800187c <init_ekg+0x14>
	else{
	    for(int i = 0; i < NUM_SAMPLES; i++){
	        waveform2[i] = ekg[i];
	    }
	}
}
 800189c:	e012      	b.n	80018c4 <init_ekg+0x5c>
	    for(int i = 0; i < NUM_SAMPLES; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	e00a      	b.n	80018ba <init_ekg+0x52>
	        waveform2[i] = ekg[i];
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <init_ekg+0x68>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <init_ekg+0x74>)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    for(int i = 0; i < NUM_SAMPLES; i++){
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <init_ekg+0x70>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbef      	blt.n	80018a4 <init_ekg+0x3c>
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20000004 	.word	0x20000004
 80018d4:	200005f8 	.word	0x200005f8
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200009f8 	.word	0x200009f8

080018e0 <sig_gen>:

void sig_gen(struct user_command *cmd, RNG_HandleTypeDef *hrng,DAC_HandleTypeDef *dac ){
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	//Process user input
	if(cmd->channel == 1){
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d104      	bne.n	80018fe <sig_gen+0x1e>
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_1);
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fbd4 	bl	80030a4 <HAL_DAC_Stop_DMA>
 80018fc:	e003      	b.n	8001906 <sig_gen+0x26>
	}
	else{
		HAL_DAC_Stop_DMA(dac, DAC_CHANNEL_2);
 80018fe:	2110      	movs	r1, #16
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 fbcf 	bl	80030a4 <HAL_DAC_Stop_DMA>
	}
	switch(cmd->wave){
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	7d1b      	ldrb	r3, [r3, #20]
 800190a:	3b41      	subs	r3, #65	; 0x41
 800190c:	2b13      	cmp	r3, #19
 800190e:	f200 8085 	bhi.w	8001a1c <sig_gen+0x13c>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <sig_gen+0x38>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001a11 	.word	0x08001a11
 800191c:	08001a1d 	.word	0x08001a1d
 8001920:	08001a1d 	.word	0x08001a1d
 8001924:	08001a1d 	.word	0x08001a1d
 8001928:	08001a1d 	.word	0x08001a1d
 800192c:	08001a1d 	.word	0x08001a1d
 8001930:	08001a1d 	.word	0x08001a1d
 8001934:	08001a1d 	.word	0x08001a1d
 8001938:	08001a1d 	.word	0x08001a1d
 800193c:	08001a1d 	.word	0x08001a1d
 8001940:	08001a1d 	.word	0x08001a1d
 8001944:	08001a1d 	.word	0x08001a1d
 8001948:	08001a1d 	.word	0x08001a1d
 800194c:	08001a1d 	.word	0x08001a1d
 8001950:	08001a1d 	.word	0x08001a1d
 8001954:	08001a1d 	.word	0x08001a1d
 8001958:	08001a1d 	.word	0x08001a1d
 800195c:	08001969 	.word	0x08001969
 8001960:	0800198f 	.word	0x0800198f
 8001964:	080019eb 	.word	0x080019eb
	case('R'):
		//Change to Rectangle wave
		init_rectangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edd3 7a03 	vldr	s15, [r3, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a02 	vldr	s14, [r3, #8]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6918      	ldr	r0, [r3, #16]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	eef0 0a47 	vmov.f32	s1, s14
 8001984:	eeb0 0a67 	vmov.f32	s0, s15
 8001988:	f7ff feba 	bl	8001700 <init_rectangle>
		break;
 800198c:	e047      	b.n	8001a1e <sig_gen+0x13e>
	case('S'):
		// Change to Sine wave

		if(cmd->frequency != 0.0){
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	edd3 7a01 	vldr	s15, [r3, #4]
 8001994:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d012      	beq.n	80019c4 <sig_gen+0xe4>
			init_generator(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6918      	ldr	r0, [r3, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	eef0 0a47 	vmov.f32	s1, s14
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff fbff 	bl	80011c0 <init_generator>
		}
		else{
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
		}
		break;
 80019c2:	e02c      	b.n	8001a1e <sig_gen+0x13e>
			init_DC(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6918      	ldr	r0, [r3, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	eef0 0a47 	vmov.f32	s1, s14
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	f7ff fb50 	bl	8001088 <init_DC>
		break;
 80019e8:	e019      	b.n	8001a1e <sig_gen+0x13e>
	case('T'):
		//Change to Triangle
		init_triangle(cmd->maxv, cmd->minv,cmd->noise, hrng, cmd->channel);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6918      	ldr	r0, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	eef0 0a47 	vmov.f32	s1, s14
 8001a06:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0a:	f7ff fd21 	bl	8001450 <init_triangle>
		break;
 8001a0e:	e006      	b.n	8001a1e <sig_gen+0x13e>
	case('A'):
		//Change to ekg
		init_ekg(cmd->channel);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff27 	bl	8001868 <init_ekg>
		break;
 8001a1a:	e000      	b.n	8001a1e <sig_gen+0x13e>
	default:
		break;
 8001a1c:	bf00      	nop
	}

	if(cmd->channel == 1){
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d137      	bne.n	8001a96 <sig_gen+0x1b6>
		TIM2->ARR = round(80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a26:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <sig_gen+0x220>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	ee17 0a90 	vmov	r0, s15
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	a12b      	add	r1, pc, #172	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a4e:	f7fe fefd 	bl	800084c <__aeabi_ddiv>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f00c ffa5 	bl	800e9b0 <round>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f899 	bl	8000ba8 <__aeabi_d2uiz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM2->EGR = TIM_EGR_UG;
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_1, (uint32_t*)waveform, SAMPLES, DAC_ALIGN_12B_R);
 8001a82:	2300      	movs	r3, #0
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <sig_gen+0x224>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fa3c 	bl	8002f0c <HAL_DAC_Start_DMA>
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
	}



}
 8001a94:	e02a      	b.n	8001aec <sig_gen+0x20c>
		TIM5->ARR = (80000000.0 / (float)(NUM_SAMPLES * (float)cmd->frequency));
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <sig_gen+0x220>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aac:	ee17 0a90 	vmov	r0, s15
 8001ab0:	f7fe fd4a 	bl	8000548 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	a10f      	add	r1, pc, #60	; (adr r1, 8001af8 <sig_gen+0x218>)
 8001aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001abe:	f7fe fec5 	bl	800084c <__aeabi_ddiv>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4c10      	ldr	r4, [pc, #64]	; (8001b08 <sig_gen+0x228>)
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f86c 	bl	8000ba8 <__aeabi_d2uiz>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
		TIM5->EGR = TIM_EGR_UG;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <sig_gen+0x228>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
		HAL_DAC_Start_DMA(dac, DAC_CHANNEL_2, (uint32_t*)waveform2, SAMPLES, DAC_ALIGN_12B_R);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <sig_gen+0x22c>)
 8001ae4:	2110      	movs	r1, #16
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f001 fa10 	bl	8002f0c <HAL_DAC_Start_DMA>
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	00000000 	.word	0x00000000
 8001afc:	419312d0 	.word	0x419312d0
 8001b00:	20000000 	.word	0x20000000
 8001b04:	200005f8 	.word	0x200005f8
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	200009f8 	.word	0x200009f8

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	command = (struct user_command *)malloc(sizeof(struct user_command));
 8001b14:	2018      	movs	r0, #24
 8001b16:	f008 fd21 	bl	800a55c <malloc>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <main+0xcc>)
 8001b20:	601a      	str	r2, [r3, #0]
		if(command == NULL){
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <main+0xcc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <main+0x20>
			exit(99);
 8001b2a:	2063      	movs	r0, #99	; 0x63
 8001b2c:	f008 fa2e 	bl	8009f8c <exit>
		}
		command->channel = 0;
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <main+0xcc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
		command->frequency = 0.0;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <main+0xcc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
		command->maxv = 0.0;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <main+0xcc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
		command->minv = 0.0;
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <main+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
		command->noise = 0;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <main+0xcc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
		command->wave = 'n';
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <main+0xcc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	226e      	movs	r2, #110	; 0x6e
 8001b64:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b66:	f001 f804 	bl	8002b72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6a:	f000 f851 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6e:	f000 f9e5 	bl	8001f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b72:	f000 f9bd 	bl	8001ef0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001b76:	f000 f89d 	bl	8001cb4 <MX_DAC1_Init>
  MX_RNG_Init();
 8001b7a:	f000 f8d9 	bl	8001d30 <MX_RNG_Init>
  MX_TIM2_Init();
 8001b7e:	f000 f8eb 	bl	8001d58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001b82:	f000 f985 	bl	8001e90 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8001b86:	f000 f935 	bl	8001df4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001b8a:	4815      	ldr	r0, [pc, #84]	; (8001be0 <main+0xd0>)
 8001b8c:	f003 fca2 	bl	80054d4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001b90:	4814      	ldr	r0, [pc, #80]	; (8001be4 <main+0xd4>)
 8001b92:	f003 fc9f 	bl	80054d4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b96:	f004 fe2f 	bl	80067f8 <osKernelInitialize>

  /* Create the recursive mutex(es) */
  /* creation of MUTEX */
  MUTEXHandle = osMutexNew(&MUTEX_attributes);
 8001b9a:	4813      	ldr	r0, [pc, #76]	; (8001be8 <main+0xd8>)
 8001b9c:	f004 ff2a 	bl	80069f4 <osMutexNew>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <main+0xdc>)
 8001ba4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (32, sizeof(uint64_t), &CommandQueue_attributes);
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <main+0xe0>)
 8001ba8:	2108      	movs	r1, #8
 8001baa:	2020      	movs	r0, #32
 8001bac:	f005 f830 	bl	8006c10 <osMessageQueueNew>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <main+0xe4>)
 8001bb4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Recieve */
  RecieveHandle = osThreadNew(StartRecieve, NULL, &Recieve_attributes);
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <main+0xe8>)
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <main+0xec>)
 8001bbc:	f004 fe66 	bl	800688c <osThreadNew>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <main+0xf0>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* creation of Process */
  ProcessHandle = osThreadNew(StartProcess, NULL, &Process_attributes);
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <main+0xf4>)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <main+0xf8>)
 8001bcc:	f004 fe5e 	bl	800688c <osThreadNew>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <main+0xfc>)
 8001bd4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001bd6:	f004 fe33 	bl	8006840 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <main+0xca>
 8001bdc:	20000fdc 	.word	0x20000fdc
 8001be0:	20000eac 	.word	0x20000eac
 8001be4:	20000ef8 	.word	0x20000ef8
 8001be8:	0800fdf8 	.word	0x0800fdf8
 8001bec:	20000fd8 	.word	0x20000fd8
 8001bf0:	0800fde0 	.word	0x0800fde0
 8001bf4:	20000fd4 	.word	0x20000fd4
 8001bf8:	0800fd98 	.word	0x0800fd98
 8001bfc:	08001f71 	.word	0x08001f71
 8001c00:	20000fcc 	.word	0x20000fcc
 8001c04:	0800fdbc 	.word	0x0800fdbc
 8001c08:	08002509 	.word	0x08002509
 8001c0c:	20000fd0 	.word	0x20000fd0

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b096      	sub	sp, #88	; 0x58
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	2244      	movs	r2, #68	; 0x44
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00a f8f6 	bl	800be10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	463b      	mov	r3, r7
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c36:	f002 f837 	bl	8003ca8 <HAL_PWREx_ControlVoltageScaling>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c40:	f000 fcc2 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001c44:	2310      	movs	r3, #16
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001c50:	2360      	movs	r3, #96	; 0x60
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c54:	2302      	movs	r3, #2
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001c60:	2328      	movs	r3, #40	; 0x28
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c64:	2307      	movs	r3, #7
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f86d 	bl	8003d54 <HAL_RCC_OscConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001c80:	f000 fca2 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c84:	230f      	movs	r3, #15
 8001c86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2104      	movs	r1, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fc35 	bl	800450c <HAL_RCC_ClockConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ca8:	f000 fc8e 	bl	80025c8 <Error_Handler>
  }
}
 8001cac:	bf00      	nop
 8001cae:	3758      	adds	r7, #88	; 0x58
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	2224      	movs	r2, #36	; 0x24
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00a f8a5 	bl	800be10 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <MX_DAC1_Init+0x78>)
 8001cca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cce:	f001 f8fa 	bl	8002ec6 <HAL_DAC_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001cd8:	f000 fc76 	bl	80025c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ce0:	2324      	movs	r3, #36	; 0x24
 8001ce2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480c      	ldr	r0, [pc, #48]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001cf8:	f001 fa37 	bl	800316a <HAL_DAC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fc61 	bl	80025c8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8001d06:	231c      	movs	r3, #28
 8001d08:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2210      	movs	r2, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_DAC1_Init+0x74>)
 8001d12:	f001 fa2a 	bl	800316a <HAL_DAC_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_DAC1_Init+0x6c>
  {
    Error_Handler();
 8001d1c:	f000 fc54 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000df8 	.word	0x20000df8
 8001d2c:	40007400 	.word	0x40007400

08001d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <MX_RNG_Init+0x24>)
 8001d38:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_RNG_Init+0x20>)
 8001d3c:	f003 fac6 	bl	80052cc <HAL_RNG_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d46:	f000 fc3f 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000e9c 	.word	0x20000e9c
 8001d54:	50060800 	.word	0x50060800

08001d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001da0:	f003 fb41 	bl	8005426 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001daa:	f000 fc0d 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dbc:	f003 fbf2 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc6:	f000 fbff 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <MX_TIM2_Init+0x98>)
 8001dd8:	f003 fde2 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001de2:	f000 fbf1 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000eac 	.word	0x20000eac

08001df4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <MX_TIM5_Init+0x98>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001e24:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e2a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e38:	4813      	ldr	r0, [pc, #76]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e3a:	f003 faf4 	bl	8005426 <HAL_TIM_Base_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001e44:	f000 fbc0 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e56:	f003 fba5 	bl	80055a4 <HAL_TIM_ConfigClockSource>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e60:	f000 fbb2 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e64:	2320      	movs	r3, #32
 8001e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM5_Init+0x94>)
 8001e72:	f003 fd95 	bl	80059a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e7c:	f000 fba4 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000ef8 	.word	0x20000ef8
 8001e8c:	40000c00 	.word	0x40000c00

08001e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_USART2_UART_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_USART2_UART_Init+0x58>)
 8001ed4:	f003 fdec 	bl	8005ab0 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ede:	f000 fb73 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000f44 	.word	0x20000f44
 8001eec:	40004400 	.word	0x40004400

08001ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_DMA_Init+0x48>)
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <MX_DMA_Init+0x48>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6493      	str	r3, [r2, #72]	; 0x48
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_DMA_Init+0x48>)
 8001f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2105      	movs	r1, #5
 8001f12:	200d      	movs	r0, #13
 8001f14:	f000 ffa1 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f18:	200d      	movs	r0, #13
 8001f1a:	f000 ffba 	bl	8002e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2105      	movs	r1, #5
 8001f22:	200e      	movs	r0, #14
 8001f24:	f000 ff99 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f28:	200e      	movs	r0, #14
 8001f2a:	f000 ffb2 	bl	8002e92 <HAL_NVIC_EnableIRQ>

}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000

08001f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_GPIO_Init+0x2c>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <StartRecieve>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRecieve */
void StartRecieve(void *argument)
{
 8001f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f74:	b0ec      	sub	sp, #432	; 0x1b0
 8001f76:	af08      	add	r7, sp, #32
 8001f78:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f7c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f80:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	char command_buffer[100];
	char print_buffer[256];
	int i = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int print_size = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	int valid_entry = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	print_size = sprintf(print_buffer, "Welcome to the Signal Generator!\r\nEnter signal parameters to get started: <gen> <channel> <type> <frequency> <min v> <max v> <noise>\r\n");
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	49b5      	ldr	r1, [pc, #724]	; (8002270 <StartRecieve+0x300>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f008 ff3a 	bl	800ae14 <siprintf>
 8001fa0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8001fa4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f107 010c 	add.w	r1, r7, #12
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	48b0      	ldr	r0, [pc, #704]	; (8002274 <StartRecieve+0x304>)
 8001fb2:	f003 fdcb 	bl	8005b4c <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
	    osMutexAcquire(MUTEXHandle, osWaitForever);
 8001fb6:	4bb0      	ldr	r3, [pc, #704]	; (8002278 <StartRecieve+0x308>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fd9e 	bl	8006b00 <osMutexAcquire>
	  	uint8_t c = 0;
 8001fc4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fc8:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
	  	HAL_UART_Receive(&huart2, &c, 1, 100);					// Read and print inputted char
 8001fd0:	f107 010b 	add.w	r1, r7, #11
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	48a6      	ldr	r0, [pc, #664]	; (8002274 <StartRecieve+0x304>)
 8001fda:	f003 fe41 	bl	8005c60 <HAL_UART_Receive>

	  	if ((char)c == '\r'){
 8001fde:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001fe2:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b0d      	cmp	r3, #13
 8001fea:	f040 821e 	bne.w	800242a <StartRecieve+0x4ba>
//	  		if enter is pressed, process command to see if valid
	  		HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 100);
 8001fee:	2364      	movs	r3, #100	; 0x64
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	49a2      	ldr	r1, [pc, #648]	; (800227c <StartRecieve+0x30c>)
 8001ff4:	489f      	ldr	r0, [pc, #636]	; (8002274 <StartRecieve+0x304>)
 8001ff6:	f003 fda9 	bl	8005b4c <HAL_UART_Transmit>
	  		command_buffer[i] = '\0';
 8001ffa:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001ffe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002002:	4413      	add	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
//	  		command_buffer[i+1] = '\n';
//	  		command_buffer[i+2] = '\0';
//	  		print_size = sprintf(print_buffer, command_buffer);
//	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);		// prints inputted command
	  		char* word = strtok(command_buffer, " ");									// split string to just command name
 8002008:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800200c:	499c      	ldr	r1, [pc, #624]	; (8002280 <StartRecieve+0x310>)
 800200e:	4618      	mov	r0, r3
 8002010:	f009 fea2 	bl	800bd58 <strtok>
 8002014:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		i = 0;																		// reset index
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  		valid_entry = 1;															// by default, valid input - later conditions alter if needed
 800201e:	2301      	movs	r3, #1
 8002020:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  		word = strtok(NULL, " ");													// split to next info
 8002024:	4996      	ldr	r1, [pc, #600]	; (8002280 <StartRecieve+0x310>)
 8002026:	2000      	movs	r0, #0
 8002028:	f009 fe96 	bl	800bd58 <strtok>
 800202c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		int ivalue = atoi(word);
 8002030:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002034:	f007 ffa5 	bl	8009f82 <atoi>
 8002038:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue >= 3 || ivalue <= 0){											// check if channel value valid
 800203c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002040:	2b02      	cmp	r3, #2
 8002042:	dc03      	bgt.n	800204c <StartRecieve+0xdc>
 8002044:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002048:	2b00      	cmp	r3, #0
 800204a:	dc13      	bgt.n	8002074 <StartRecieve+0x104>
	  			valid_entry = 0;														// if not make command invalid
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Channel value must be 1 or 2\r\n");
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	498b      	ldr	r1, [pc, #556]	; (8002284 <StartRecieve+0x314>)
 8002058:	4618      	mov	r0, r3
 800205a:	f008 fedb 	bl	800ae14 <siprintf>
 800205e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002062:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002066:	b29a      	uxth	r2, r3
 8002068:	f107 010c 	add.w	r1, r7, #12
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	4881      	ldr	r0, [pc, #516]	; (8002274 <StartRecieve+0x304>)
 8002070:	f003 fd6c 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->channel = ivalue;
 8002074:	4b84      	ldr	r3, [pc, #528]	; (8002288 <StartRecieve+0x318>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800207c:	601a      	str	r2, [r3, #0]

	  		word = strtok(NULL, " ");
 800207e:	4980      	ldr	r1, [pc, #512]	; (8002280 <StartRecieve+0x310>)
 8002080:	2000      	movs	r0, #0
 8002082:	f009 fe69 	bl	800bd58 <strtok>
 8002086:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		if (*word != 'A' && *word != 'R' && *word != 'S' && *word != 'T'){			// check if wave type is valid
 800208a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b41      	cmp	r3, #65	; 0x41
 8002092:	d022      	beq.n	80020da <StartRecieve+0x16a>
 8002094:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b52      	cmp	r3, #82	; 0x52
 800209c:	d01d      	beq.n	80020da <StartRecieve+0x16a>
 800209e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b53      	cmp	r3, #83	; 0x53
 80020a6:	d018      	beq.n	80020da <StartRecieve+0x16a>
 80020a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b54      	cmp	r3, #84	; 0x54
 80020b0:	d013      	beq.n	80020da <StartRecieve+0x16a>
	  			valid_entry = 0;														// if not make command invalid
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Wave type must be S = sine, T = triangle, R = rectangle or A = arbitrary/EKG\r\n");
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4973      	ldr	r1, [pc, #460]	; (800228c <StartRecieve+0x31c>)
 80020be:	4618      	mov	r0, r3
 80020c0:	f008 fea8 	bl	800ae14 <siprintf>
 80020c4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80020c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	f107 010c 	add.w	r1, r7, #12
 80020d2:	2364      	movs	r3, #100	; 0x64
 80020d4:	4867      	ldr	r0, [pc, #412]	; (8002274 <StartRecieve+0x304>)
 80020d6:	f003 fd39 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->wave = *word;
 80020da:	4b6b      	ldr	r3, [pc, #428]	; (8002288 <StartRecieve+0x318>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	751a      	strb	r2, [r3, #20]

	  		word = strtok(NULL, " ");
 80020e6:	4966      	ldr	r1, [pc, #408]	; (8002280 <StartRecieve+0x310>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	f009 fe35 	bl	800bd58 <strtok>
 80020ee:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		double fvalue = atof(word);
 80020f2:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80020f6:	f007 ff41 	bl	8009f7c <atof>
 80020fa:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if ((fvalue > 10000 || fvalue < 0.5) && fvalue != 0){							// check if frequncy value is valid
 80020fe:	a358      	add	r3, pc, #352	; (adr r3, 8002260 <StartRecieve+0x2f0>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002108:	f7fe fd06 	bl	8000b18 <__aeabi_dcmpgt>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <StartRecieve+0x1b6>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <StartRecieve+0x320>)
 8002118:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800211c:	f7fe fcde 	bl	8000adc <__aeabi_dcmplt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01e      	beq.n	8002164 <StartRecieve+0x1f4>
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002132:	f7fe fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d113      	bne.n	8002164 <StartRecieve+0x1f4>
	  			valid_entry = 0;														// if not make command invalid
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Frequency must be between 0.5 Hz and 10 kHz, or 0 for DC\r\n");
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4953      	ldr	r1, [pc, #332]	; (8002294 <StartRecieve+0x324>)
 8002148:	4618      	mov	r0, r3
 800214a:	f008 fe63 	bl	800ae14 <siprintf>
 800214e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002152:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002156:	b29a      	uxth	r2, r3
 8002158:	f107 010c 	add.w	r1, r7, #12
 800215c:	2364      	movs	r3, #100	; 0x64
 800215e:	4845      	ldr	r0, [pc, #276]	; (8002274 <StartRecieve+0x304>)
 8002160:	f003 fcf4 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->frequency = fvalue;
 8002164:	4b48      	ldr	r3, [pc, #288]	; (8002288 <StartRecieve+0x318>)
 8002166:	681c      	ldr	r4, [r3, #0]
 8002168:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800216c:	f7fe fd3c 	bl	8000be8 <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
 8002172:	6063      	str	r3, [r4, #4]

	  		word = strtok(NULL, " ");
 8002174:	4942      	ldr	r1, [pc, #264]	; (8002280 <StartRecieve+0x310>)
 8002176:	2000      	movs	r0, #0
 8002178:	f009 fdee 	bl	800bd58 <strtok>
 800217c:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 8002180:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002184:	f007 fefa 	bl	8009f7c <atof>
 8002188:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if min voltage value is valid
 800218c:	a336      	add	r3, pc, #216	; (adr r3, 8002268 <StartRecieve+0x2f8>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002196:	f7fe fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <StartRecieve+0x246>
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021ac:	f7fe fc96 	bl	8000adc <__aeabi_dcmplt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d013      	beq.n	80021de <StartRecieve+0x26e>
	  			valid_entry = 0;														// if not make command invalid
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Min Voltage must be between 0v and 3.3v\r\n");
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4935      	ldr	r1, [pc, #212]	; (8002298 <StartRecieve+0x328>)
 80021c2:	4618      	mov	r0, r3
 80021c4:	f008 fe26 	bl	800ae14 <siprintf>
 80021c8:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80021cc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	f107 010c 	add.w	r1, r7, #12
 80021d6:	2364      	movs	r3, #100	; 0x64
 80021d8:	4826      	ldr	r0, [pc, #152]	; (8002274 <StartRecieve+0x304>)
 80021da:	f003 fcb7 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->minv = fvalue;
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <StartRecieve+0x318>)
 80021e0:	681c      	ldr	r4, [r3, #0]
 80021e2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80021e6:	f7fe fcff 	bl	8000be8 <__aeabi_d2f>
 80021ea:	4603      	mov	r3, r0
 80021ec:	60a3      	str	r3, [r4, #8]

	  		word = strtok(NULL, " ");
 80021ee:	4924      	ldr	r1, [pc, #144]	; (8002280 <StartRecieve+0x310>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f009 fdb1 	bl	800bd58 <strtok>
 80021f6:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		fvalue = atof(word);
 80021fa:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 80021fe:	f007 febd 	bl	8009f7c <atof>
 8002202:	ed87 0b5c 	vstr	d0, [r7, #368]	; 0x170
	  		if (fvalue > 3.3 || fvalue < 0){											// check if max voltage value is valid
 8002206:	a318      	add	r3, pc, #96	; (adr r3, 8002268 <StartRecieve+0x2f8>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002210:	f7fe fc82 	bl	8000b18 <__aeabi_dcmpgt>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10a      	bne.n	8002230 <StartRecieve+0x2c0>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8002226:	f7fe fc59 	bl	8000adc <__aeabi_dcmplt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d037      	beq.n	80022a0 <StartRecieve+0x330>
	  			valid_entry = 0;														// if not make command invalid
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between 0v and 3.3v\r\n");
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4918      	ldr	r1, [pc, #96]	; (800229c <StartRecieve+0x32c>)
 800223c:	4618      	mov	r0, r3
 800223e:	f008 fde9 	bl	800ae14 <siprintf>
 8002242:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002246:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800224a:	b29a      	uxth	r2, r3
 800224c:	f107 010c 	add.w	r1, r7, #12
 8002250:	2364      	movs	r3, #100	; 0x64
 8002252:	4808      	ldr	r0, [pc, #32]	; (8002274 <StartRecieve+0x304>)
 8002254:	f003 fc7a 	bl	8005b4c <HAL_UART_Transmit>
 8002258:	e045      	b.n	80022e6 <StartRecieve+0x376>
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	00000000 	.word	0x00000000
 8002264:	40c38800 	.word	0x40c38800
 8002268:	66666666 	.word	0x66666666
 800226c:	400a6666 	.word	0x400a6666
 8002270:	0800fa50 	.word	0x0800fa50
 8002274:	20000f44 	.word	0x20000f44
 8002278:	20000fd8 	.word	0x20000fd8
 800227c:	0800fad8 	.word	0x0800fad8
 8002280:	0800fadc 	.word	0x0800fadc
 8002284:	0800fae0 	.word	0x0800fae0
 8002288:	20000fdc 	.word	0x20000fdc
 800228c:	0800fb00 	.word	0x0800fb00
 8002290:	3fe00000 	.word	0x3fe00000
 8002294:	0800fb50 	.word	0x0800fb50
 8002298:	0800fb8c 	.word	0x0800fb8c
 800229c:	0800fbb8 	.word	0x0800fbb8
	  		} else if (fvalue <= command->minv){										// check if max voltage value is less than min voltage
 80022a0:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <StartRecieve+0x56c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f94e 	bl	8000548 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80022b4:	f7fe fc1c 	bl	8000af0 <__aeabi_dcmple>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <StartRecieve+0x376>
	  			valid_entry = 0;														// if not make command invalid
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Max Voltage must be between less than Min Voltage\r\n");
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	4985      	ldr	r1, [pc, #532]	; (80024e0 <StartRecieve+0x570>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f008 fda2 	bl	800ae14 <siprintf>
 80022d0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80022d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022d8:	b29a      	uxth	r2, r3
 80022da:	f107 010c 	add.w	r1, r7, #12
 80022de:	2364      	movs	r3, #100	; 0x64
 80022e0:	4880      	ldr	r0, [pc, #512]	; (80024e4 <StartRecieve+0x574>)
 80022e2:	f003 fc33 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->maxv = fvalue;
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <StartRecieve+0x56c>)
 80022e8:	681c      	ldr	r4, [r3, #0]
 80022ea:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80022ee:	f7fe fc7b 	bl	8000be8 <__aeabi_d2f>
 80022f2:	4603      	mov	r3, r0
 80022f4:	60e3      	str	r3, [r4, #12]

	  		word = strtok(NULL, " ");
 80022f6:	497c      	ldr	r1, [pc, #496]	; (80024e8 <StartRecieve+0x578>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f009 fd2d 	bl	800bd58 <strtok>
 80022fe:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
	  		ivalue = atoi(word);
 8002302:	f8d7 0180 	ldr.w	r0, [r7, #384]	; 0x180
 8002306:	f007 fe3c 	bl	8009f82 <atoi>
 800230a:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
	  		if (ivalue > 12 || ivalue < 0){												// check if noise value is valid
 800230e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002312:	2b0c      	cmp	r3, #12
 8002314:	dc03      	bgt.n	800231e <StartRecieve+0x3ae>
 8002316:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800231a:	2b00      	cmp	r3, #0
 800231c:	da13      	bge.n	8002346 <StartRecieve+0x3d6>
	  			valid_entry = 0;														// if not make command invalid
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	  			print_size = sprintf(print_buffer, "Noise value must be between 0 and 12 (inclusive)\r\n");
 8002324:	f107 030c 	add.w	r3, r7, #12
 8002328:	4970      	ldr	r1, [pc, #448]	; (80024ec <StartRecieve+0x57c>)
 800232a:	4618      	mov	r0, r3
 800232c:	f008 fd72 	bl	800ae14 <siprintf>
 8002330:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  			HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002334:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002338:	b29a      	uxth	r2, r3
 800233a:	f107 010c 	add.w	r1, r7, #12
 800233e:	2364      	movs	r3, #100	; 0x64
 8002340:	4868      	ldr	r0, [pc, #416]	; (80024e4 <StartRecieve+0x574>)
 8002342:	f003 fc03 	bl	8005b4c <HAL_UART_Transmit>
	  		}
	  		command->noise = ivalue;
 8002346:	4b65      	ldr	r3, [pc, #404]	; (80024dc <StartRecieve+0x56c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800234e:	611a      	str	r2, [r3, #16]

  			if (valid_entry){													// if command is valid, then add to queue
 8002350:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002354:	2b00      	cmp	r3, #0
 8002356:	d045      	beq.n	80023e4 <StartRecieve+0x474>
				osMessageQueuePut(CommandQueueHandle, &command, 0, 0);
 8002358:	4b65      	ldr	r3, [pc, #404]	; (80024f0 <StartRecieve+0x580>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	2200      	movs	r2, #0
 8002360:	495e      	ldr	r1, [pc, #376]	; (80024dc <StartRecieve+0x56c>)
 8002362:	f004 fcc9 	bl	8006cf8 <osMessageQueuePut>
				valid_entry = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
				print_size = sprintf(print_buffer, "Generating signal with:\r\nChannel: %d\r\nType: %c\r\nFrequency: %f\r\nMin Voltage: %f\r\nMax Voltage: %f\r\nNoise: %d\r\n", command->channel, command->wave, command->frequency, command->maxv, command->minv, command->noise);
 800236c:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <StartRecieve+0x56c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681e      	ldr	r6, [r3, #0]
 8002372:	4b5a      	ldr	r3, [pc, #360]	; (80024dc <StartRecieve+0x56c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	7d1b      	ldrb	r3, [r3, #20]
 8002378:	469a      	mov	sl, r3
 800237a:	4b58      	ldr	r3, [pc, #352]	; (80024dc <StartRecieve+0x56c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e1 	bl	8000548 <__aeabi_f2d>
 8002386:	4604      	mov	r4, r0
 8002388:	460d      	mov	r5, r1
 800238a:	4b54      	ldr	r3, [pc, #336]	; (80024dc <StartRecieve+0x56c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8d9 	bl	8000548 <__aeabi_f2d>
 8002396:	4680      	mov	r8, r0
 8002398:	4689      	mov	r9, r1
 800239a:	4b50      	ldr	r3, [pc, #320]	; (80024dc <StartRecieve+0x56c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	494c      	ldr	r1, [pc, #304]	; (80024dc <StartRecieve+0x56c>)
 80023ac:	6809      	ldr	r1, [r1, #0]
 80023ae:	6909      	ldr	r1, [r1, #16]
 80023b0:	f107 000c 	add.w	r0, r7, #12
 80023b4:	9106      	str	r1, [sp, #24]
 80023b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80023be:	e9cd 4500 	strd	r4, r5, [sp]
 80023c2:	4653      	mov	r3, sl
 80023c4:	4632      	mov	r2, r6
 80023c6:	494b      	ldr	r1, [pc, #300]	; (80024f4 <StartRecieve+0x584>)
 80023c8:	f008 fd24 	bl	800ae14 <siprintf>
 80023cc:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80023d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f107 010c 	add.w	r1, r7, #12
 80023da:	2364      	movs	r3, #100	; 0x64
 80023dc:	4841      	ldr	r0, [pc, #260]	; (80024e4 <StartRecieve+0x574>)
 80023de:	f003 fbb5 	bl	8005b4c <HAL_UART_Transmit>
 80023e2:	e072      	b.n	80024ca <StartRecieve+0x55a>
  			} else {
  				print_size = sprintf(print_buffer, "At least one parameter is missing, please try again and verify your parameters:\r\n");
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	4943      	ldr	r1, [pc, #268]	; (80024f8 <StartRecieve+0x588>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f008 fd12 	bl	800ae14 <siprintf>
 80023f0:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 80023f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	f107 010c 	add.w	r1, r7, #12
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	4838      	ldr	r0, [pc, #224]	; (80024e4 <StartRecieve+0x574>)
 8002402:	f003 fba3 	bl	8005b4c <HAL_UART_Transmit>
  				print_size = sprintf(print_buffer, "<gen> <channel> <type> <frequency> <min v> <max v> <noise>\r\n");
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	493c      	ldr	r1, [pc, #240]	; (80024fc <StartRecieve+0x58c>)
 800240c:	4618      	mov	r0, r3
 800240e:	f008 fd01 	bl	800ae14 <siprintf>
 8002412:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
  				HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002416:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800241a:	b29a      	uxth	r2, r3
 800241c:	f107 010c 	add.w	r1, r7, #12
 8002420:	2364      	movs	r3, #100	; 0x64
 8002422:	4830      	ldr	r0, [pc, #192]	; (80024e4 <StartRecieve+0x574>)
 8002424:	f003 fb92 	bl	8005b4c <HAL_UART_Transmit>
 8002428:	e04f      	b.n	80024ca <StartRecieve+0x55a>
  			}

	  	} else if ((c == 8 || c == 127) && (i >= 1)){
 800242a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800242e:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <StartRecieve+0x4d6>
 8002438:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800243c:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b7f      	cmp	r3, #127	; 0x7f
 8002444:	d122      	bne.n	800248c <StartRecieve+0x51c>
 8002446:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800244a:	2b00      	cmp	r3, #0
 800244c:	dd1e      	ble.n	800248c <StartRecieve+0x51c>
	  		command_buffer[--i] = '\0';
 800244e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002452:	3b01      	subs	r3, #1
 8002454:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002458:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800245c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002460:	4413      	add	r3, r2
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
	  		print_size = sprintf(print_buffer, "%c %c", 8, 8);
 8002466:	f107 000c 	add.w	r0, r7, #12
 800246a:	2308      	movs	r3, #8
 800246c:	2208      	movs	r2, #8
 800246e:	4924      	ldr	r1, [pc, #144]	; (8002500 <StartRecieve+0x590>)
 8002470:	f008 fcd0 	bl	800ae14 <siprintf>
 8002474:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	  		HAL_UART_Transmit(&huart2, (uint8_t*)print_buffer, print_size, 100);
 8002478:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800247c:	b29a      	uxth	r2, r3
 800247e:	f107 010c 	add.w	r1, r7, #12
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	4817      	ldr	r0, [pc, #92]	; (80024e4 <StartRecieve+0x574>)
 8002486:	f003 fb61 	bl	8005b4c <HAL_UART_Transmit>
 800248a:	e01e      	b.n	80024ca <StartRecieve+0x55a>
	  	} else if (c != 0){						// if character is valid and not enter key
 800248c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8002490:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d017      	beq.n	80024ca <StartRecieve+0x55a>
	  		HAL_UART_Transmit(&huart2, &c, 1, 100);
 800249a:	f107 010b 	add.w	r1, r7, #11
 800249e:	2364      	movs	r3, #100	; 0x64
 80024a0:	2201      	movs	r2, #1
 80024a2:	4810      	ldr	r0, [pc, #64]	; (80024e4 <StartRecieve+0x574>)
 80024a4:	f003 fb52 	bl	8005b4c <HAL_UART_Transmit>
	  		command_buffer[i] = c;				// add to buffer to save
 80024a8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80024ac:	f2a3 1385 	subw	r3, r3, #389	; 0x185
 80024b0:	7819      	ldrb	r1, [r3, #0]
 80024b2:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80024b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	701a      	strb	r2, [r3, #0]
	  		i++;
 80024c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80024c4:	3301      	adds	r3, #1
 80024c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	  	}
	  	osMutexRelease(MUTEXHandle);
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <StartRecieve+0x594>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 fb61 	bl	8006b96 <osMutexRelease>
	  	osThreadYield();
 80024d4:	f004 fa6e 	bl	80069b4 <osThreadYield>
  {
 80024d8:	e56d      	b.n	8001fb6 <StartRecieve+0x46>
 80024da:	bf00      	nop
 80024dc:	20000fdc 	.word	0x20000fdc
 80024e0:	0800fbe4 	.word	0x0800fbe4
 80024e4:	20000f44 	.word	0x20000f44
 80024e8:	0800fadc 	.word	0x0800fadc
 80024ec:	0800fc18 	.word	0x0800fc18
 80024f0:	20000fd4 	.word	0x20000fd4
 80024f4:	0800fc4c 	.word	0x0800fc4c
 80024f8:	0800fcbc 	.word	0x0800fcbc
 80024fc:	0800fd10 	.word	0x0800fd10
 8002500:	0800fd50 	.word	0x0800fd50
 8002504:	20000fd8 	.word	0x20000fd8

08002508 <StartProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcess */
void StartProcess(void *argument)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0c4      	sub	sp, #272	; 0x110
 800250c:	af00      	add	r7, sp, #0
 800250e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002516:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartProcess */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <StartProcess+0xa8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002520:	4618      	mov	r0, r3
 8002522:	f004 faed 	bl	8006b00 <osMutexAcquire>
	 			  if(osMessageQueueGetCount(CommandQueueHandle) != 0){
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <StartProcess+0xac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f004 fca2 	bl	8006e74 <osMessageQueueGetCount>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d033      	beq.n	800259e <StartProcess+0x96>
	 				  char buf[256];
	 				  struct user_command *cmd = (struct user_command *)malloc(sizeof(struct user_command));
 8002536:	2018      	movs	r0, #24
 8002538:	f008 f810 	bl	800a55c <malloc>
 800253c:	4603      	mov	r3, r0
 800253e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	 				  if(cmd == NULL){
 8002542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d102      	bne.n	8002550 <StartProcess+0x48>
	 					  exit(98);
 800254a:	2062      	movs	r0, #98	; 0x62
 800254c:	f007 fd1e 	bl	8009f8c <exit>
	 				  }
	 				  osMessageQueueGet(CommandQueueHandle, &cmd, 0, 0);
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <StartProcess+0xac>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002558:	2300      	movs	r3, #0
 800255a:	2200      	movs	r2, #0
 800255c:	f004 fc2c 	bl	8006db8 <osMessageQueueGet>
	 				  sig_gen(cmd, &hrng, &hdac1);
 8002560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <StartProcess+0xb0>)
 8002566:	4915      	ldr	r1, [pc, #84]	; (80025bc <StartProcess+0xb4>)
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f9b9 	bl	80018e0 <sig_gen>
	 				  sprintf(buf,"\r\n Enter another wave generation! \r\n");
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	4913      	ldr	r1, [pc, #76]	; (80025c0 <StartProcess+0xb8>)
 8002574:	4618      	mov	r0, r3
 8002576:	f008 fc4d 	bl	800ae14 <siprintf>
	 				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, strlen(buf), 100);
 800257a:	f107 030c 	add.w	r3, r7, #12
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd fe76 	bl	8000270 <strlen>
 8002584:	4603      	mov	r3, r0
 8002586:	b29a      	uxth	r2, r3
 8002588:	f107 010c 	add.w	r1, r7, #12
 800258c:	2364      	movs	r3, #100	; 0x64
 800258e:	480d      	ldr	r0, [pc, #52]	; (80025c4 <StartProcess+0xbc>)
 8002590:	f003 fadc 	bl	8005b4c <HAL_UART_Transmit>
	 				  free(cmd);
 8002594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002598:	4618      	mov	r0, r3
 800259a:	f007 ffe7 	bl	800a56c <free>

	 		  }

	 			  osMutexRelease(MUTEXHandle);
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <StartProcess+0xa8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 faf7 	bl	8006b96 <osMutexRelease>
	 		   vTaskDelay(100);
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	f005 fedf 	bl	800836c <vTaskDelay>
	  osMutexAcquire(MUTEXHandle, osWaitForever);
 80025ae:	e7b3      	b.n	8002518 <StartProcess+0x10>
 80025b0:	20000fd8 	.word	0x20000fd8
 80025b4:	20000fd4 	.word	0x20000fd4
 80025b8:	20000df8 	.word	0x20000df8
 80025bc:	20000e9c 	.word	0x20000e9c
 80025c0:	0800fd58 	.word	0x0800fd58
 80025c4:	20000f44 	.word	0x20000f44

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <Error_Handler+0x8>
	...

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_MspInit+0x4c>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_MspInit+0x4c>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6613      	str	r3, [r2, #96]	; 0x60
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_MspInit+0x4c>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_MspInit+0x4c>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_MspInit+0x4c>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_MspInit+0x4c>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	210f      	movs	r1, #15
 800260e:	f06f 0001 	mvn.w	r0, #1
 8002612:	f000 fc22 	bl	8002e5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a40      	ldr	r2, [pc, #256]	; (8002744 <HAL_DAC_MspInit+0x120>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d17a      	bne.n	800273c <HAL_DAC_MspInit+0x118>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <HAL_DAC_MspInit+0x124>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <HAL_DAC_MspInit+0x124>)
 800264c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_DAC_MspInit+0x124>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_DAC_MspInit+0x124>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4a39      	ldr	r2, [pc, #228]	; (8002748 <HAL_DAC_MspInit+0x124>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266a:	4b37      	ldr	r3, [pc, #220]	; (8002748 <HAL_DAC_MspInit+0x124>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002676:	2330      	movs	r3, #48	; 0x30
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800267a:	2303      	movs	r3, #3
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268c:	f001 f954 	bl	8003938 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002690:	4b2e      	ldr	r3, [pc, #184]	; (800274c <HAL_DAC_MspInit+0x128>)
 8002692:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_DAC_MspInit+0x12c>)
 8002694:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_DAC_MspInit+0x128>)
 8002698:	2206      	movs	r2, #6
 800269a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_DAC_MspInit+0x128>)
 800269e:	2210      	movs	r2, #16
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80026a8:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026ae:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026b6:	4b25      	ldr	r3, [pc, #148]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80026ca:	4820      	ldr	r0, [pc, #128]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026cc:	f000 fefe 	bl	80034cc <HAL_DMA_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80026d6:	f7ff ff77 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_DAC_MspInit+0x128>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_DAC_MspInit+0x130>)
 80026e8:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <HAL_DAC_MspInit+0x134>)
 80026ea:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_DAC_MspInit+0x130>)
 80026ee:	2205      	movs	r2, #5
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_DAC_MspInit+0x130>)
 80026f4:	2210      	movs	r2, #16
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_DAC_MspInit+0x130>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_DAC_MspInit+0x130>)
 800270e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002716:	2220      	movs	r2, #32
 8002718:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_DAC_MspInit+0x130>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002722:	f000 fed3 	bl	80034cc <HAL_DMA_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 800272c:	f7ff ff4c 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_DAC_MspInit+0x130>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40007400 	.word	0x40007400
 8002748:	40021000 	.word	0x40021000
 800274c:	20000e0c 	.word	0x20000e0c
 8002750:	40020030 	.word	0x40020030
 8002754:	20000e54 	.word	0x20000e54
 8002758:	40020044 	.word	0x40020044

0800275c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b0a6      	sub	sp, #152	; 0x98
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	2288      	movs	r2, #136	; 0x88
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f009 fb4f 	bl	800be10 <memset>
  if(hrng->Instance==RNG)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_RNG_MspInit+0x80>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d12b      	bne.n	80027d4 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800277c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002780:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8002782:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002786:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800278a:	2301      	movs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002792:	2310      	movs	r3, #16
 8002794:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002796:	2307      	movs	r3, #7
 8002798:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800279a:	2302      	movs	r3, #2
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800279e:	2302      	movs	r3, #2
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80027a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 f8d1 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 80027b8:	f7ff ff06 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_RNG_MspInit+0x84>)
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <HAL_RNG_MspInit+0x84>)
 80027c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RNG_MspInit+0x84>)
 80027ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3798      	adds	r7, #152	; 0x98
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	50060800 	.word	0x50060800
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d10c      	bne.n	8002810 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800280e:	e010      	b.n	8002832 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_TIM_Base_MspInit+0x60>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10b      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a08      	ldr	r2, [pc, #32]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6593      	str	r3, [r2, #88]	; 0x58
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_TIM_Base_MspInit+0x5c>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
 8002844:	40000c00 	.word	0x40000c00

08002848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b0ac      	sub	sp, #176	; 0xb0
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2288      	movs	r2, #136	; 0x88
 8002866:	2100      	movs	r1, #0
 8002868:	4618      	mov	r0, r3
 800286a:	f009 fad1 	bl	800be10 <memset>
  if(huart->Instance==USART2)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_UART_MspInit+0xb0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d13b      	bne.n	80028f0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002878:	2302      	movs	r3, #2
 800287a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800287c:	2300      	movs	r3, #0
 800287e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4618      	mov	r0, r3
 8002886:	f002 f865 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002890:	f7ff fe9a 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_UART_MspInit+0xb4>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_UART_MspInit+0xb4>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6593      	str	r3, [r2, #88]	; 0x58
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_UART_MspInit+0xb4>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_UART_MspInit+0xb4>)
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <HAL_UART_MspInit+0xb4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_UART_MspInit+0xb4>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028c4:	230c      	movs	r3, #12
 80028c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028dc:	2307      	movs	r3, #7
 80028de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028e6:	4619      	mov	r1, r3
 80028e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ec:	f001 f824 	bl	8003938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028f0:	bf00      	nop
 80028f2:	37b0      	adds	r7, #176	; 0xb0
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40021000 	.word	0x40021000

08002900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <NMI_Handler+0x4>

08002906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <HardFault_Handler+0x4>

0800290c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <MemManage_Handler+0x4>

08002912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <BusFault_Handler+0x4>

08002918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <UsageFault_Handler+0x4>

0800291e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002930:	f000 f974 	bl	8002c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002934:	f006 f9ba 	bl	8008cac <xTaskGetSchedulerState>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800293e:	f007 f8a3 	bl	8009a88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <DMA1_Channel3_IRQHandler+0x10>)
 800294e:	f000 ff13 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000e0c 	.word	0x20000e0c

0800295c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA1_Channel4_IRQHandler+0x10>)
 8002962:	f000 ff09 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000e54 	.word	0x20000e54

08002970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return 1;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_kill>:

int _kill(int pid, int sig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800298a:	f009 fab3 	bl	800bef4 <__errno>
 800298e:	4603      	mov	r3, r0
 8002990:	2216      	movs	r2, #22
 8002992:	601a      	str	r2, [r3, #0]
  return -1;
 8002994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_exit>:

void _exit (int status)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ffe7 	bl	8002980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029b2:	e7fe      	b.n	80029b2 <_exit+0x12>

080029b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	e00a      	b.n	80029dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029c6:	f3af 8000 	nop.w
 80029ca:	4601      	mov	r1, r0
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	60ba      	str	r2, [r7, #8]
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3301      	adds	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	dbf0      	blt.n	80029c6 <_read+0x12>
  }

  return len;
 80029e4:	687b      	ldr	r3, [r7, #4]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e009      	b.n	8002a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	60ba      	str	r2, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	dbf1      	blt.n	8002a00 <_write+0x12>
  }
  return len;
 8002a1c:	687b      	ldr	r3, [r7, #4]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_close>:

int _close(int file)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_isatty>:

int _isatty(int file)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <_sbrk+0x5c>)
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <_sbrk+0x60>)
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <_sbrk+0x64>)
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <_sbrk+0x68>)
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d207      	bcs.n	8002ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac0:	f009 fa18 	bl	800bef4 <__errno>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ace:	e009      	b.n	8002ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <_sbrk+0x64>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <_sbrk+0x64>)
 8002ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20018000 	.word	0x20018000
 8002af0:	00000400 	.word	0x00000400
 8002af4:	20000fe0 	.word	0x20000fe0
 8002af8:	20004848 	.word	0x20004848

08002afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <SystemInit+0x20>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <SystemInit+0x20>)
 8002b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b24:	f7ff ffea 	bl	8002afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b28:	480c      	ldr	r0, [pc, #48]	; (8002b5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002b2a:	490d      	ldr	r1, [pc, #52]	; (8002b60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b2c:	4a0d      	ldr	r2, [pc, #52]	; (8002b64 <LoopForever+0xe>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b40:	4c0a      	ldr	r4, [pc, #40]	; (8002b6c <LoopForever+0x16>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f009 f9d7 	bl	800bf00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b52:	f7fe ffdd 	bl	8001b10 <main>

08002b56 <LoopForever>:

LoopForever:
    b LoopForever
 8002b56:	e7fe      	b.n	8002b56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002b58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200005dc 	.word	0x200005dc
  ldr r2, =_sidata
 8002b64:	080104c0 	.word	0x080104c0
  ldr r2, =_sbss
 8002b68:	200005dc 	.word	0x200005dc
  ldr r4, =_ebss
 8002b6c:	20004844 	.word	0x20004844

08002b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC1_2_IRQHandler>

08002b72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 f961 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b82:	200f      	movs	r0, #15
 8002b84:	f000 f80e 	bl	8002ba4 <HAL_InitTick>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	71fb      	strb	r3, [r7, #7]
 8002b92:	e001      	b.n	8002b98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b94:	f7ff fd1e 	bl	80025d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b98:	79fb      	ldrb	r3, [r7, #7]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_InitTick+0x6c>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d023      	beq.n	8002c00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bb8:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_InitTick+0x70>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_InitTick+0x6c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f96d 	bl	8002eae <HAL_SYSTICK_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10f      	bne.n	8002bfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d809      	bhi.n	8002bf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be0:	2200      	movs	r2, #0
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002be8:	f000 f937 	bl	8002e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_InitTick+0x74>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e007      	b.n	8002c04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	e004      	b.n	8002c04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
 8002bfe:	e001      	b.n	8002c04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	2000040c 	.word	0x2000040c
 8002c14:	20000404 	.word	0x20000404
 8002c18:	20000408 	.word	0x20000408

08002c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x20>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x24>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_IncTick+0x24>)
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	2000040c 	.word	0x2000040c
 8002c40:	20000fe4 	.word	0x20000fe4

08002c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return uwTick;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_GetTick+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000fe4 	.word	0x20000fe4

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff ffee 	bl	8002c44 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c82:	bf00      	nop
 8002c84:	f7ff ffde 	bl	8002c44 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000040c 	.word	0x2000040c

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	; (8002d40 <__NVIC_EnableIRQ+0x38>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	; (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	; 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	; 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e24:	f7ff ff8e 	bl	8002d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff29 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e6c:	f7ff ff3e 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7ff ff8e 	bl	8002d98 <NVIC_EncodePriority>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5d 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e8a:	bf00      	nop
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff31 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffa2 	bl	8002e00 <SysTick_Config>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e014      	b.n	8002f02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	791b      	ldrb	r3, [r3, #4]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff fb9b 	bl	8002624 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	795b      	ldrb	r3, [r3, #5]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_DAC_Start_DMA+0x1e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0ab      	b.n	8003082 <HAL_DAC_Start_DMA+0x176>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2202      	movs	r2, #2
 8002f34:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d12f      	bne.n	8002f9c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_DAC_Start_DMA+0x180>)
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a51      	ldr	r2, [pc, #324]	; (8003090 <HAL_DAC_Start_DMA+0x184>)
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a50      	ldr	r2, [pc, #320]	; (8003094 <HAL_DAC_Start_DMA+0x188>)
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f62:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d013      	beq.n	8002f92 <HAL_DAC_Start_DMA+0x86>
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d845      	bhi.n	8002ffc <HAL_DAC_Start_DMA+0xf0>
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_DAC_Start_DMA+0x72>
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d005      	beq.n	8002f88 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002f7c:	e03e      	b.n	8002ffc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3308      	adds	r3, #8
 8002f84:	613b      	str	r3, [r7, #16]
        break;
 8002f86:	e03c      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	613b      	str	r3, [r7, #16]
        break;
 8002f90:	e037      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3310      	adds	r3, #16
 8002f98:	613b      	str	r3, [r7, #16]
        break;
 8002f9a:	e032      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a3d      	ldr	r2, [pc, #244]	; (8003098 <HAL_DAC_Start_DMA+0x18c>)
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_DAC_Start_DMA+0x190>)
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_DAC_Start_DMA+0x194>)
 8002fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d013      	beq.n	8002ff2 <HAL_DAC_Start_DMA+0xe6>
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d817      	bhi.n	8003000 <HAL_DAC_Start_DMA+0xf4>
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_DAC_Start_DMA+0xd2>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d005      	beq.n	8002fe8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002fdc:	e010      	b.n	8003000 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	613b      	str	r3, [r7, #16]
        break;
 8002fe6:	e00c      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3318      	adds	r3, #24
 8002fee:	613b      	str	r3, [r7, #16]
        break;
 8002ff0:	e007      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	613b      	str	r3, [r7, #16]
        break;
 8002ffa:	e002      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003000:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d111      	bne.n	800302c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003016:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6898      	ldr	r0, [r3, #8]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	f000 fb0b 	bl	800363c <HAL_DMA_Start_IT>
 8003026:	4603      	mov	r3, r0
 8003028:	75fb      	strb	r3, [r7, #23]
 800302a:	e010      	b.n	800304e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800303a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68d8      	ldr	r0, [r3, #12]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	f000 faf9 	bl	800363c <HAL_DMA_Start_IT>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2201      	movs	r2, #1
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e005      	b.n	8003080 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	080033b9 	.word	0x080033b9
 8003090:	080033db 	.word	0x080033db
 8003094:	080033f7 	.word	0x080033f7
 8003098:	08003461 	.word	0x08003461
 800309c:	08003483 	.word	0x08003483
 80030a0:	0800349f 	.word	0x0800349f

080030a4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	400a      	ands	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2201      	movs	r2, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	400a      	ands	r2, r1
 80030e6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fb02 	bl	80036fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e00c      	b.n	8003124 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 faf4 	bl	80036fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003122:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b088      	sub	sp, #32
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	795b      	ldrb	r3, [r3, #5]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_DAC_ConfigChannel+0x1c>
 8003182:	2302      	movs	r3, #2
 8003184:	e114      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x246>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2202      	movs	r2, #2
 8003190:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b04      	cmp	r3, #4
 8003198:	f040 8081 	bne.w	800329e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800319c:	f7ff fd52 	bl	8002c44 <HAL_GetTick>
 80031a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d140      	bne.n	800322a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031a8:	e018      	b.n	80031dc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031aa:	f7ff fd4b 	bl	8002c44 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d911      	bls.n	80031dc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f043 0208 	orr.w	r2, r3, #8
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2203      	movs	r2, #3
 80031d6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0e9      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1df      	bne.n	80031aa <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f7ff fd36 	bl	8002c5c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	6992      	ldr	r2, [r2, #24]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
 80031fa:	e023      	b.n	8003244 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031fc:	f7ff fd22 	bl	8002c44 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d90f      	bls.n	800322a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0a      	bge.n	800322a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f043 0208 	orr.w	r2, r3, #8
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2203      	movs	r2, #3
 8003224:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0c2      	b.n	80033b0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	2b00      	cmp	r3, #0
 8003232:	dbe3      	blt.n	80031fc <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003234:	2001      	movs	r0, #1
 8003236:	f7ff fd11 	bl	8002c5c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	6992      	ldr	r2, [r2, #24]
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	ea02 0103 	and.w	r1, r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	21ff      	movs	r1, #255	; 0xff
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	ea02 0103 	and.w	r1, r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	409a      	lsls	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d11d      	bne.n	80032e2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	221f      	movs	r2, #31
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2207      	movs	r2, #7
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	431a      	orrs	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	f640 72fc 	movw	r2, #4092	; 0xffc
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	22c0      	movs	r2, #192	; 0xc0
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43da      	mvns	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	400a      	ands	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f7ff feb1 	bl	800312e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	711a      	strb	r2, [r3, #4]
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f7ff feaa 	bl	8003142 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fea0 	bl	8003156 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	711a      	strb	r2, [r3, #4]
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff ffd8 	bl	8003424 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	711a      	strb	r2, [r3, #4]
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b084      	sub	sp, #16
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ffd1 	bl	8003438 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f043 0204 	orr.w	r2, r3, #4
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff ffc7 	bl	800344c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	711a      	strb	r2, [r3, #4]
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e098      	b.n	8003610 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <HAL_DMA_Init+0x150>)
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d80f      	bhi.n	800350a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_DMA_Init+0x154>)
 80034f2:	4413      	add	r3, r2
 80034f4:	4a4b      	ldr	r2, [pc, #300]	; (8003624 <HAL_DMA_Init+0x158>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_DMA_Init+0x15c>)
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 8003508:	e00e      	b.n	8003528 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_DMA_Init+0x160>)
 8003512:	4413      	add	r3, r2
 8003514:	4a43      	ldr	r2, [pc, #268]	; (8003624 <HAL_DMA_Init+0x158>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a42      	ldr	r2, [pc, #264]	; (8003630 <HAL_DMA_Init+0x164>)
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800354c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003582:	d039      	beq.n	80035f8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4a27      	ldr	r2, [pc, #156]	; (8003628 <HAL_DMA_Init+0x15c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d11a      	bne.n	80035c4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_DMA_Init+0x168>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 031c 	and.w	r3, r3, #28
 800359a:	210f      	movs	r1, #15
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	4924      	ldr	r1, [pc, #144]	; (8003634 <HAL_DMA_Init+0x168>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035a8:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_DMA_Init+0x168>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f003 031c 	and.w	r3, r3, #28
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	491d      	ldr	r1, [pc, #116]	; (8003634 <HAL_DMA_Init+0x168>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
 80035c2:	e019      	b.n	80035f8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 031c 	and.w	r3, r3, #28
 80035d0:	210f      	movs	r1, #15
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4917      	ldr	r1, [pc, #92]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035da:	4013      	ands	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035de:	4b16      	ldr	r3, [pc, #88]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 031c 	and.w	r3, r3, #28
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	4911      	ldr	r1, [pc, #68]	; (8003638 <HAL_DMA_Init+0x16c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40020407 	.word	0x40020407
 8003620:	bffdfff8 	.word	0xbffdfff8
 8003624:	cccccccd 	.word	0xcccccccd
 8003628:	40020000 	.word	0x40020000
 800362c:	bffdfbf8 	.word	0xbffdfbf8
 8003630:	40020400 	.word	0x40020400
 8003634:	400200a8 	.word	0x400200a8
 8003638:	400204a8 	.word	0x400204a8

0800363c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_DMA_Start_IT+0x20>
 8003658:	2302      	movs	r3, #2
 800365a:	e04b      	b.n	80036f4 <HAL_DMA_Start_IT+0xb8>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d13a      	bne.n	80036e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f91e 	bl	80038d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 020e 	orr.w	r2, r2, #14
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e00f      	b.n	80036d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 020a 	orr.w	r2, r2, #10
 80036d2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e005      	b.n	80036f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
 80036f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d008      	beq.n	8003726 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2204      	movs	r2, #4
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 020e 	bic.w	r2, r2, #14
 8003734:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f003 021c 	and.w	r2, r3, #28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 031c 	and.w	r3, r3, #28
 8003798:	2204      	movs	r2, #4
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d026      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x7a>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d021      	beq.n	80037f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0204 	bic.w	r2, r2, #4
 80037ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 021c 	and.w	r2, r3, #28
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2104      	movs	r1, #4
 80037da:	fa01 f202 	lsl.w	r2, r1, r2
 80037de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d071      	beq.n	80038cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037f0:	e06c      	b.n	80038cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f003 031c 	and.w	r3, r3, #28
 80037fa:	2202      	movs	r2, #2
 80037fc:	409a      	lsls	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4013      	ands	r3, r2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02e      	beq.n	8003864 <HAL_DMA_IRQHandler+0xec>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d029      	beq.n	8003864 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 020a 	bic.w	r2, r2, #10
 800382c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f003 021c 	and.w	r2, r3, #28
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2102      	movs	r1, #2
 8003844:	fa01 f202 	lsl.w	r2, r1, r2
 8003848:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d038      	beq.n	80038cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003862:	e033      	b.n	80038cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	f003 031c 	and.w	r3, r3, #28
 800386c:	2208      	movs	r2, #8
 800386e:	409a      	lsls	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d02a      	beq.n	80038ce <HAL_DMA_IRQHandler+0x156>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d025      	beq.n	80038ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020e 	bic.w	r2, r2, #14
 8003890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f003 021c 	and.w	r2, r3, #28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
}
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	f003 021c 	and.w	r2, r3, #28
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f202 	lsl.w	r2, r1, r2
 80038f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b10      	cmp	r3, #16
 8003906:	d108      	bne.n	800391a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003918:	e007      	b.n	800392a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	60da      	str	r2, [r3, #12]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003946:	e17f      	b.n	8003c48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8171 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d005      	beq.n	8003978 <HAL_GPIO_Init+0x40>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d130      	bne.n	80039da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ae:	2201      	movs	r2, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0201 	and.w	r2, r3, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d118      	bne.n	8003a18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d017      	beq.n	8003a54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d123      	bne.n	8003aa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	08da      	lsrs	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3208      	adds	r2, #8
 8003a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ac 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_GPIO_Init+0x330>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	4a5e      	ldr	r2, [pc, #376]	; (8003c68 <HAL_GPIO_Init+0x330>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6613      	str	r3, [r2, #96]	; 0x60
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_GPIO_Init+0x330>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b02:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_GPIO_Init+0x334>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_Init+0x242>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4f      	ldr	r2, [pc, #316]	; (8003c70 <HAL_GPIO_Init+0x338>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_Init+0x23e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4e      	ldr	r2, [pc, #312]	; (8003c74 <HAL_GPIO_Init+0x33c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x23a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4d      	ldr	r2, [pc, #308]	; (8003c78 <HAL_GPIO_Init+0x340>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x236>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <HAL_GPIO_Init+0x344>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x232>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	; (8003c80 <HAL_GPIO_Init+0x348>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x22e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	; (8003c84 <HAL_GPIO_Init+0x34c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x22a>
 8003b5e:	2306      	movs	r3, #6
 8003b60:	e00c      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e00a      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e008      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e004      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	f002 0203 	and.w	r2, r2, #3
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	4093      	lsls	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b8c:	4937      	ldr	r1, [pc, #220]	; (8003c6c <HAL_GPIO_Init+0x334>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bbe:	4a32      	ldr	r2, [pc, #200]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc4:	4b30      	ldr	r3, [pc, #192]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be8:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_GPIO_Init+0x350>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f47f ae78 	bne.w	8003948 <HAL_GPIO_Init+0x10>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	48001800 	.word	0x48001800
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40007000 	.word	0x40007000

08003ca8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb6:	d130      	bne.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d038      	beq.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc6:	4b20      	ldr	r3, [pc, #128]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cce:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2232      	movs	r2, #50	; 0x32
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9b      	lsrs	r3, r3, #18
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cec:	e002      	b.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	d102      	bne.n	8003d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f2      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d110      	bne.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e00f      	b.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d007      	beq.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d30:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	20000404 	.word	0x20000404
 8003d50:	431bde83 	.word	0x431bde83

08003d54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e3ca      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d66:	4b97      	ldr	r3, [pc, #604]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d70:	4b94      	ldr	r3, [pc, #592]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80e4 	beq.w	8003f50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_RCC_OscConfig+0x4a>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	f040 808b 	bne.w	8003eac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f040 8087 	bne.w	8003eac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d9e:	4b89      	ldr	r3, [pc, #548]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <HAL_RCC_OscConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e3a2      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	4b82      	ldr	r3, [pc, #520]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d004      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x7c>
 8003dc6:	4b7f      	ldr	r3, [pc, #508]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dce:	e005      	b.n	8003ddc <HAL_RCC_OscConfig+0x88>
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d223      	bcs.n	8003e28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fd55 	bl	8004894 <RCC_SetFlashLatencyFromMSIRange>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e383      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df4:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a72      	ldr	r2, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b70      	ldr	r3, [pc, #448]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	496d      	ldr	r1, [pc, #436]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e12:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	4968      	ldr	r1, [pc, #416]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
 8003e26:	e025      	b.n	8003e74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	f043 0308 	orr.w	r3, r3, #8
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4960      	ldr	r1, [pc, #384]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	495b      	ldr	r1, [pc, #364]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fd15 	bl	8004894 <RCC_SetFlashLatencyFromMSIRange>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e343      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f000 fc4a 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b52      	ldr	r3, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	4950      	ldr	r1, [pc, #320]	; (8003fc8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	4a4e      	ldr	r2, [pc, #312]	; (8003fcc <HAL_RCC_OscConfig+0x278>)
 8003e92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e94:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_RCC_OscConfig+0x27c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fe83 	bl	8002ba4 <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d052      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	e327      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d032      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fec0 	bl	8002c44 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec8:	f7fe febc 	bl	8002c44 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e310      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eda:	4b3a      	ldr	r3, [pc, #232]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ee6:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a36      	ldr	r2, [pc, #216]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	4931      	ldr	r1, [pc, #196]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f04:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	492c      	ldr	r1, [pc, #176]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
 8003f18:	e01a      	b.n	8003f50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f1a:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a29      	ldr	r2, [pc, #164]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f26:	f7fe fe8d 	bl	8002c44 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fe89 	bl	8002c44 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e2dd      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f40:	4b20      	ldr	r3, [pc, #128]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x1da>
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d074      	beq.n	8004046 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_OscConfig+0x21a>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	d10e      	bne.n	8003f86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d064      	beq.n	8004044 <HAL_RCC_OscConfig+0x2f0>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d160      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e2ba      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x24a>
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e026      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x280>
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a05      	ldr	r2, [pc, #20]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a02      	ldr	r2, [pc, #8]	; (8003fc4 <HAL_RCC_OscConfig+0x270>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x298>
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	0800fe08 	.word	0x0800fe08
 8003fcc:	20000404 	.word	0x20000404
 8003fd0:	20000408 	.word	0x20000408
 8003fd4:	4ba0      	ldr	r3, [pc, #640]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a9f      	ldr	r2, [pc, #636]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	4b9d      	ldr	r3, [pc, #628]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a9c      	ldr	r2, [pc, #624]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fe26 	bl	8002c44 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe fe22 	bl	8002c44 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e276      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800400e:	4b92      	ldr	r3, [pc, #584]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x2a8>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fe12 	bl	8002c44 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004024:	f7fe fe0e 	bl	8002c44 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e262      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004036:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <HAL_RCC_OscConfig+0x2d0>
 8004042:	e000      	b.n	8004046 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d060      	beq.n	8004114 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d005      	beq.n	8004064 <HAL_RCC_OscConfig+0x310>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d119      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d116      	bne.n	8004092 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_OscConfig+0x328>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e23f      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b76      	ldr	r3, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	4973      	ldr	r1, [pc, #460]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004090:	e040      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d023      	beq.n	80040e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409a:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe fdcd 	bl	8002c44 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe fdc9 	bl	8002c44 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e21d      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b62      	ldr	r3, [pc, #392]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	495f      	ldr	r1, [pc, #380]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	604b      	str	r3, [r1, #4]
 80040e0:	e018      	b.n	8004114 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a5c      	ldr	r2, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80040e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fda9 	bl	8002c44 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fda5 	bl	8002c44 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1f9      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03c      	beq.n	800419a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01c      	beq.n	8004162 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412e:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe fd84 	bl	8002c44 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004140:	f7fe fd80 	bl	8002c44 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1d4      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004152:	4b41      	ldr	r3, [pc, #260]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ef      	beq.n	8004140 <HAL_RCC_OscConfig+0x3ec>
 8004160:	e01b      	b.n	800419a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004162:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004168:	4a3b      	ldr	r2, [pc, #236]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fe fd67 	bl	8002c44 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fd63 	bl	8002c44 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1b7      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800418c:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ef      	bne.n	800417a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a6 	beq.w	80042f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a26      	ldr	r2, [pc, #152]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d0:	2301      	movs	r3, #1
 80041d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_RCC_OscConfig+0x508>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fe fd2a 	bl	8002c44 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe fd26 	bl	8002c44 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e17a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x508>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <HAL_RCC_OscConfig+0x4d8>
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422a:	e029      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d115      	bne.n	8004260 <HAL_RCC_OscConfig+0x50c>
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_OscConfig+0x504>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x52c>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	4b9c      	ldr	r3, [pc, #624]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a9b      	ldr	r2, [pc, #620]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004270:	4b98      	ldr	r3, [pc, #608]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a97      	ldr	r2, [pc, #604]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fe fcdc 	bl	8002c44 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe fcd8 	bl	8002c44 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e12a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ed      	beq.n	8004290 <HAL_RCC_OscConfig+0x53c>
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe fcc5 	bl	8002c44 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe fcc1 	bl	8002c44 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e113      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d4:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ed      	bne.n	80042be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 80fe 	beq.w	80044fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004302:	2b02      	cmp	r3, #2
 8004304:	f040 80d0 	bne.w	80044a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004308:	4b72      	ldr	r3, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f003 0203 	and.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d130      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	3b01      	subs	r3, #1
 8004328:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d127      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d11f      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004348:	2a07      	cmp	r2, #7
 800434a:	bf14      	ite	ne
 800434c:	2201      	movne	r2, #1
 800434e:	2200      	moveq	r2, #0
 8004350:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004352:	4293      	cmp	r3, r2
 8004354:	d113      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d109      	bne.n	800437e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437a:	429a      	cmp	r2, r3
 800437c:	d06e      	beq.n	800445c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d069      	beq.n	8004458 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0ad      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ac:	f7fe fc4a 	bl	8002c44 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b4:	f7fe fc46 	bl	8002c44 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e09a      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d2:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCC_OscConfig+0x784>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043ec:	0212      	lsls	r2, r2, #8
 80043ee:	4311      	orrs	r1, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f4:	0852      	lsrs	r2, r2, #1
 80043f6:	3a01      	subs	r2, #1
 80043f8:	0552      	lsls	r2, r2, #21
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	3a01      	subs	r2, #1
 8004404:	0652      	lsls	r2, r2, #25
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800440c:	0912      	lsrs	r2, r2, #4
 800440e:	0452      	lsls	r2, r2, #17
 8004410:	430a      	orrs	r2, r1
 8004412:	4930      	ldr	r1, [pc, #192]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004414:	4313      	orrs	r3, r2
 8004416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004418:	4b2e      	ldr	r3, [pc, #184]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004430:	f7fe fc08 	bl	8002c44 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe fc04 	bl	8002c44 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e058      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004456:	e050      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04f      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d148      	bne.n	80044fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800446e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004480:	f7fe fbe0 	bl	8002c44 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fbdc 	bl	8002c44 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e030      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x734>
 80044a6:	e028      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d023      	beq.n	80044f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x780>)
 80044b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fe fbc3 	bl	8002c44 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c0:	e00c      	b.n	80044dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe fbbf 	bl	8002c44 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d905      	bls.n	80044dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e013      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
 80044d4:	40021000 	.word	0x40021000
 80044d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ec      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	4905      	ldr	r1, [pc, #20]	; (8004504 <HAL_RCC_OscConfig+0x7b0>)
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x7b4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60cb      	str	r3, [r1, #12]
 80044f4:	e001      	b.n	80044fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40021000 	.word	0x40021000
 8004508:	feeefffc 	.word	0xfeeefffc

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0e7      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b75      	ldr	r3, [pc, #468]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d910      	bls.n	8004550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 0207 	bic.w	r2, r3, #7
 8004536:	4970      	ldr	r1, [pc, #448]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	4313      	orrs	r3, r2
 800453c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b6e      	ldr	r3, [pc, #440]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0cf      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004568:	429a      	cmp	r2, r3
 800456a:	d908      	bls.n	800457e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800456c:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4960      	ldr	r1, [pc, #384]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04c      	beq.n	8004624 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004592:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d121      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e0a6      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	4b54      	ldr	r3, [pc, #336]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d115      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e09a      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c2:	4b4e      	ldr	r3, [pc, #312]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e08e      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d2:	4b4a      	ldr	r3, [pc, #296]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e086      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b46      	ldr	r3, [pc, #280]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4943      	ldr	r1, [pc, #268]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fe fb26 	bl	8002c44 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fe fb22 	bl	8002c44 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e06e      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800463c:	429a      	cmp	r2, r3
 800463e:	d208      	bcs.n	8004652 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	492b      	ldr	r1, [pc, #172]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d210      	bcs.n	8004682 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 0207 	bic.w	r2, r3, #7
 8004668:	4923      	ldr	r1, [pc, #140]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004670:	4b21      	ldr	r3, [pc, #132]	; (80046f8 <HAL_RCC_ClockConfig+0x1ec>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d001      	beq.n	8004682 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e036      	b.n	80046f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4918      	ldr	r1, [pc, #96]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 800469c:	4313      	orrs	r3, r2
 800469e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4910      	ldr	r1, [pc, #64]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c0:	f000 f824 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <HAL_RCC_ClockConfig+0x1f0>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	490b      	ldr	r1, [pc, #44]	; (8004700 <HAL_RCC_ClockConfig+0x1f4>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1f8>)
 80046de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1fc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fa5d 	bl	8002ba4 <HAL_InitTick>
 80046ea:	4603      	mov	r3, r0
 80046ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80046ee:	7afb      	ldrb	r3, [r7, #11]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	0800fe08 	.word	0x0800fe08
 8004704:	20000404 	.word	0x20000404
 8004708:	20000408 	.word	0x20000408

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	b089      	sub	sp, #36	; 0x24
 8004710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471a:	4b3e      	ldr	r3, [pc, #248]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d121      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d11e      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004740:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	0a1b      	lsrs	r3, r3, #8
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e005      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <HAL_RCC_GetSysClockFreq+0x10c>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d102      	bne.n	800478a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	e004      	b.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b08      	cmp	r3, #8
 800478e:	d101      	bne.n	8004794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004790:	4b23      	ldr	r3, [pc, #140]	; (8004820 <HAL_RCC_GetSysClockFreq+0x114>)
 8004792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d134      	bne.n	8004804 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d003      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xac>
 80047b0:	e005      	b.n	80047be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_RCC_GetSysClockFreq+0x110>)
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047b8:	4b19      	ldr	r3, [pc, #100]	; (8004820 <HAL_RCC_GetSysClockFreq+0x114>)
 80047ba:	617b      	str	r3, [r7, #20]
      break;
 80047bc:	e002      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	617b      	str	r3, [r7, #20]
      break;
 80047c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	fb03 f202 	mul.w	r2, r3, r2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	0e5b      	lsrs	r3, r3, #25
 80047f0:	f003 0303 	and.w	r3, r3, #3
 80047f4:	3301      	adds	r3, #1
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004804:	69bb      	ldr	r3, [r7, #24]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	0800fe20 	.word	0x0800fe20
 800481c:	00f42400 	.word	0x00f42400
 8004820:	007a1200 	.word	0x007a1200

08004824 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <HAL_RCC_GetHCLKFreq+0x14>)
 800482a:	681b      	ldr	r3, [r3, #0]
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000404 	.word	0x20000404

0800483c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004840:	f7ff fff0 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40021000 	.word	0x40021000
 8004864:	0800fe18 	.word	0x0800fe18

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800486c:	f7ff ffda 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0adb      	lsrs	r3, r3, #11
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4904      	ldr	r1, [pc, #16]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	f003 031f 	and.w	r3, r3, #31
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	0800fe18 	.word	0x0800fe18

08004894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a0:	4b2a      	ldr	r3, [pc, #168]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048ac:	f7ff f9ee 	bl	8003c8c <HAL_PWREx_GetVoltageRange>
 80048b0:	6178      	str	r0, [r7, #20]
 80048b2:	e014      	b.n	80048de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048b4:	4b25      	ldr	r3, [pc, #148]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	6593      	str	r3, [r2, #88]	; 0x58
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048cc:	f7ff f9de 	bl	8003c8c <HAL_PWREx_GetVoltageRange>
 80048d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048d2:	4b1e      	ldr	r3, [pc, #120]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e4:	d10b      	bne.n	80048fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d919      	bls.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2ba0      	cmp	r3, #160	; 0xa0
 80048f0:	d902      	bls.n	80048f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f2:	2302      	movs	r3, #2
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e013      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048f8:	2301      	movs	r3, #1
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	e010      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d902      	bls.n	800490a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004904:	2303      	movs	r3, #3
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e00a      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d102      	bne.n	8004916 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004910:	2302      	movs	r3, #2
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e004      	b.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d101      	bne.n	8004920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800491c:	2301      	movs	r3, #1
 800491e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f023 0207 	bic.w	r2, r3, #7
 8004928:	4909      	ldr	r1, [pc, #36]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000
 8004950:	40022000 	.word	0x40022000

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800495c:	2300      	movs	r3, #0
 800495e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004960:	2300      	movs	r3, #0
 8004962:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496c:	2b00      	cmp	r3, #0
 800496e:	d041      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004978:	d02a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800497a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800497e:	d824      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004984:	d008      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800498a:	d81e      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004994:	d010      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004996:	e018      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004998:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a85      	ldr	r2, [pc, #532]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800499e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049a4:	e015      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3304      	adds	r3, #4
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fabb 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 80049b2:	4603      	mov	r3, r0
 80049b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b6:	e00c      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3320      	adds	r3, #32
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fba6 	bl	8005110 <RCCEx_PLLSAI2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	74fb      	strb	r3, [r7, #19]
      break;
 80049ce:	e000      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d8:	4b76      	ldr	r3, [pc, #472]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049e6:	4973      	ldr	r1, [pc, #460]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ee:	e001      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d041      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a08:	d02a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a0e:	d824      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a1a:	d81e      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a24:	d010      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a26:	e018      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a28:	4b62      	ldr	r3, [pc, #392]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a61      	ldr	r2, [pc, #388]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a34:	e015      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fa73 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a46:	e00c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fb5e 	bl	8005110 <RCCEx_PLLSAI2_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a68:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a76:	494f      	ldr	r1, [pc, #316]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a0 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	4a40      	ldr	r2, [pc, #256]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad4:	f7fe f8b6 	bl	8002c44 <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ada:	e009      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fe f8b2 	bl	8002c44 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	74fb      	strb	r3, [r7, #19]
        break;
 8004aee:	e005      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af0:	4b31      	ldr	r3, [pc, #196]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ef      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d15c      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b02:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01f      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d019      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2c:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b32:	4a20      	ldr	r2, [pc, #128]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fe f871 	bl	8002c44 <HAL_GetTick>
 8004b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b64:	e00b      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fe f86d 	bl	8002c44 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d902      	bls.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b7c:	e006      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ec      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004baa:	e009      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	74bb      	strb	r3, [r7, #18]
 8004bb0:	e006      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bc0:	7c7b      	ldrb	r3, [r7, #17]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc6:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4a9d      	ldr	r2, [pc, #628]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bde:	4b98      	ldr	r3, [pc, #608]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f023 0203 	bic.w	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	4994      	ldr	r1, [pc, #592]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c00:	4b8f      	ldr	r3, [pc, #572]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f023 020c 	bic.w	r2, r3, #12
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0e:	498c      	ldr	r1, [pc, #560]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c22:	4b87      	ldr	r3, [pc, #540]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	4983      	ldr	r1, [pc, #524]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c44:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	497b      	ldr	r1, [pc, #492]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	4972      	ldr	r1, [pc, #456]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c88:	4b6d      	ldr	r3, [pc, #436]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	496a      	ldr	r1, [pc, #424]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	4961      	ldr	r1, [pc, #388]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00a      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ccc:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cda:	4959      	ldr	r1, [pc, #356]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cee:	4b54      	ldr	r3, [pc, #336]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	4950      	ldr	r1, [pc, #320]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1e:	4948      	ldr	r1, [pc, #288]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d32:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	493f      	ldr	r1, [pc, #252]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d028      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d54:	4b3a      	ldr	r3, [pc, #232]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d62:	4937      	ldr	r1, [pc, #220]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d72:	d106      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d74:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	4a31      	ldr	r2, [pc, #196]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7e:	60d3      	str	r3, [r2, #12]
 8004d80:	e011      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8a:	d10c      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f8c8 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004da2:	7cfb      	ldrb	r3, [r7, #19]
 8004da4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d028      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004db2:	4b23      	ldr	r3, [pc, #140]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	491f      	ldr	r1, [pc, #124]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd2:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a1a      	ldr	r2, [pc, #104]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ddc:	60d3      	str	r3, [r2, #12]
 8004dde:	e011      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de8:	d10c      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f899 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02b      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e1e:	4908      	ldr	r1, [pc, #32]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2e:	d109      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
 8004e3c:	e014      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2101      	movs	r1, #1
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f867 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02f      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e74:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e82:	4928      	ldr	r1, [pc, #160]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3304      	adds	r3, #4
 8004e98:	2102      	movs	r1, #2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f844 	bl	8004f28 <RCCEx_PLLSAI1_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d014      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eaa:	7cfb      	ldrb	r3, [r7, #19]
 8004eac:	74bb      	strb	r3, [r7, #18]
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f925 	bl	8005110 <RCCEx_PLLSAI2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eee:	490d      	ldr	r1, [pc, #52]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	4904      	ldr	r1, [pc, #16]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000

08004f28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f36:	4b75      	ldr	r3, [pc, #468]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f42:	4b72      	ldr	r3, [pc, #456]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0203 	and.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d10d      	bne.n	8004f6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
       ||
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
       ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d047      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	73fb      	strb	r3, [r7, #15]
 8004f72:	e044      	b.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d018      	beq.n	8004fae <RCCEx_PLLSAI1_Config+0x86>
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d825      	bhi.n	8004fcc <RCCEx_PLLSAI1_Config+0xa4>
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d002      	beq.n	8004f8a <RCCEx_PLLSAI1_Config+0x62>
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d009      	beq.n	8004f9c <RCCEx_PLLSAI1_Config+0x74>
 8004f88:	e020      	b.n	8004fcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f8a:	4b60      	ldr	r3, [pc, #384]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d11d      	bne.n	8004fd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f9a:	e01a      	b.n	8004fd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f9c:	4b5b      	ldr	r3, [pc, #364]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d116      	bne.n	8004fd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fac:	e013      	b.n	8004fd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fae:	4b57      	ldr	r3, [pc, #348]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fba:	4b54      	ldr	r3, [pc, #336]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fca:	e006      	b.n	8004fda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e004      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e002      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fe2:	4b4a      	ldr	r3, [pc, #296]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6819      	ldr	r1, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	4944      	ldr	r1, [pc, #272]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d17d      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005004:	4b41      	ldr	r3, [pc, #260]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a40      	ldr	r2, [pc, #256]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800500e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fd fe18 	bl	8002c44 <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005018:	f7fd fe14 	bl	8002c44 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
        break;
 800502a:	e005      	b.n	8005038 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800502c:	4b37      	ldr	r3, [pc, #220]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1ef      	bne.n	8005018 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d160      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d111      	bne.n	8005068 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005044:	4b31      	ldr	r3, [pc, #196]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6892      	ldr	r2, [r2, #8]
 8005054:	0211      	lsls	r1, r2, #8
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68d2      	ldr	r2, [r2, #12]
 800505a:	0912      	lsrs	r2, r2, #4
 800505c:	0452      	lsls	r2, r2, #17
 800505e:	430a      	orrs	r2, r1
 8005060:	492a      	ldr	r1, [pc, #168]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	610b      	str	r3, [r1, #16]
 8005066:	e027      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d112      	bne.n	8005094 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005076:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	6892      	ldr	r2, [r2, #8]
 800507e:	0211      	lsls	r1, r2, #8
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6912      	ldr	r2, [r2, #16]
 8005084:	0852      	lsrs	r2, r2, #1
 8005086:	3a01      	subs	r2, #1
 8005088:	0552      	lsls	r2, r2, #21
 800508a:	430a      	orrs	r2, r1
 800508c:	491f      	ldr	r1, [pc, #124]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 800508e:	4313      	orrs	r3, r2
 8005090:	610b      	str	r3, [r1, #16]
 8005092:	e011      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005094:	4b1d      	ldr	r3, [pc, #116]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800509c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6952      	ldr	r2, [r2, #20]
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0652      	lsls	r2, r2, #25
 80050b0:	430a      	orrs	r2, r1
 80050b2:	4916      	ldr	r1, [pc, #88]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050b8:	4b14      	ldr	r3, [pc, #80]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a13      	ldr	r2, [pc, #76]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd fdbe 	bl	8002c44 <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ca:	e009      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050cc:	f7fd fdba 	bl	8002c44 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
          break;
 80050de:	e005      	b.n	80050ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050f2:	4b06      	ldr	r3, [pc, #24]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	4904      	ldr	r1, [pc, #16]	; (800510c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000

08005110 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511e:	4b6a      	ldr	r3, [pc, #424]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d018      	beq.n	800515c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800512a:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f003 0203 	and.w	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d10d      	bne.n	8005156 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
       ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005142:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	091b      	lsrs	r3, r3, #4
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
       ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d047      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	73fb      	strb	r3, [r7, #15]
 800515a:	e044      	b.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d018      	beq.n	8005196 <RCCEx_PLLSAI2_Config+0x86>
 8005164:	2b03      	cmp	r3, #3
 8005166:	d825      	bhi.n	80051b4 <RCCEx_PLLSAI2_Config+0xa4>
 8005168:	2b01      	cmp	r3, #1
 800516a:	d002      	beq.n	8005172 <RCCEx_PLLSAI2_Config+0x62>
 800516c:	2b02      	cmp	r3, #2
 800516e:	d009      	beq.n	8005184 <RCCEx_PLLSAI2_Config+0x74>
 8005170:	e020      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005172:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11d      	bne.n	80051ba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005182:	e01a      	b.n	80051ba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d116      	bne.n	80051be <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005194:	e013      	b.n	80051be <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005196:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051a2:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051b2:	e006      	b.n	80051c2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
      break;
 80051b8:	e004      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e002      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051be:	bf00      	nop
 80051c0:	e000      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6819      	ldr	r1, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	430b      	orrs	r3, r1
 80051e0:	4939      	ldr	r1, [pc, #228]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d167      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f8:	f7fd fd24 	bl	8002c44 <HAL_GetTick>
 80051fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051fe:	e009      	b.n	8005214 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005200:	f7fd fd20 	bl	8002c44 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d902      	bls.n	8005214 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	73fb      	strb	r3, [r7, #15]
        break;
 8005212:	e005      	b.n	8005220 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1ef      	bne.n	8005200 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d14a      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d111      	bne.n	8005250 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800522c:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6892      	ldr	r2, [r2, #8]
 800523c:	0211      	lsls	r1, r2, #8
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68d2      	ldr	r2, [r2, #12]
 8005242:	0912      	lsrs	r2, r2, #4
 8005244:	0452      	lsls	r2, r2, #17
 8005246:	430a      	orrs	r2, r1
 8005248:	491f      	ldr	r1, [pc, #124]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	614b      	str	r3, [r1, #20]
 800524e:	e011      	b.n	8005274 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6892      	ldr	r2, [r2, #8]
 8005260:	0211      	lsls	r1, r2, #8
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6912      	ldr	r2, [r2, #16]
 8005266:	0852      	lsrs	r2, r2, #1
 8005268:	3a01      	subs	r2, #1
 800526a:	0652      	lsls	r2, r2, #25
 800526c:	430a      	orrs	r2, r1
 800526e:	4916      	ldr	r1, [pc, #88]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005270:	4313      	orrs	r3, r2
 8005272:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fd fce0 	bl	8002c44 <HAL_GetTick>
 8005284:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005286:	e009      	b.n	800529c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005288:	f7fd fcdc 	bl	8002c44 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d902      	bls.n	800529c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	73fb      	strb	r3, [r7, #15]
          break;
 800529a:	e005      	b.n	80052a8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ae:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4904      	ldr	r1, [pc, #16]	; (80052c8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000

080052cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e049      	b.n	8005372 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	795b      	ldrb	r3, [r3, #5]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd fa34 	bl	800275c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0204 	orr.w	r2, r2, #4
 8005308:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d104      	bne.n	8005322 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2204      	movs	r2, #4
 800531c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e027      	b.n	8005372 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005322:	f7fd fc8f 	bl	8002c44 <HAL_GetTick>
 8005326:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005328:	e015      	b.n	8005356 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800532a:	f7fd fc8b 	bl	8002c44 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d90e      	bls.n	8005356 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e00d      	b.n	8005372 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d0e2      	beq.n	800532a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005390:	2302      	movs	r3, #2
 8005392:	e044      	b.n	800541e <HAL_RNG_GenerateRandomNumber+0xa4>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	795b      	ldrb	r3, [r3, #5]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d133      	bne.n	800540c <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	715a      	strb	r2, [r3, #5]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fd fc4b 	bl	8002c44 <HAL_GetTick>
 80053ae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053b0:	e018      	b.n	80053e4 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80053b2:	f7fd fc47 	bl	8002c44 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d911      	bls.n	80053e4 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d00a      	beq.n	80053e4 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e01c      	b.n	800541e <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d1df      	bne.n	80053b2 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	715a      	strb	r2, [r3, #5]
 800540a:	e004      	b.n	8005416 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2204      	movs	r2, #4
 8005410:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	711a      	strb	r2, [r3, #4]

  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e049      	b.n	80054cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fd f9c9 	bl	80027e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2202      	movs	r2, #2
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f000 f967 	bl	8005738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d001      	beq.n	80054ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e047      	b.n	800557c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a23      	ldr	r2, [pc, #140]	; (8005588 <HAL_TIM_Base_Start+0xb4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01d      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d018      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1f      	ldr	r2, [pc, #124]	; (800558c <HAL_TIM_Base_Start+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d013      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1e      	ldr	r2, [pc, #120]	; (8005590 <HAL_TIM_Base_Start+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00e      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <HAL_TIM_Base_Start+0xc0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d009      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <HAL_TIM_Base_Start+0xc4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIM_Base_Start+0x66>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a19      	ldr	r2, [pc, #100]	; (800559c <HAL_TIM_Base_Start+0xc8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d115      	bne.n	8005566 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_TIM_Base_Start+0xcc>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d015      	beq.n	8005578 <HAL_TIM_Base_Start+0xa4>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005552:	d011      	beq.n	8005578 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005564:	e008      	b.n	8005578 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0201 	orr.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e000      	b.n	800557a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005578:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40013400 	.word	0x40013400
 800559c:	40014000 	.word	0x40014000
 80055a0:	00010007 	.word	0x00010007

080055a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIM_ConfigClockSource+0x1c>
 80055bc:	2302      	movs	r3, #2
 80055be:	e0b6      	b.n	800572e <HAL_TIM_ConfigClockSource+0x18a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fc:	d03e      	beq.n	800567c <HAL_TIM_ConfigClockSource+0xd8>
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005602:	f200 8087 	bhi.w	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560a:	f000 8086 	beq.w	800571a <HAL_TIM_ConfigClockSource+0x176>
 800560e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005612:	d87f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005614:	2b70      	cmp	r3, #112	; 0x70
 8005616:	d01a      	beq.n	800564e <HAL_TIM_ConfigClockSource+0xaa>
 8005618:	2b70      	cmp	r3, #112	; 0x70
 800561a:	d87b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d050      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x11e>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d877      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005624:	2b50      	cmp	r3, #80	; 0x50
 8005626:	d03c      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0xfe>
 8005628:	2b50      	cmp	r3, #80	; 0x50
 800562a:	d873      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d058      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x13e>
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d86f      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d064      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d86b      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 800563c:	2b20      	cmp	r3, #32
 800563e:	d060      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d867      	bhi.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d05c      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 8005648:	2b10      	cmp	r3, #16
 800564a:	d05a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x15e>
 800564c:	e062      	b.n	8005714 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800565e:	f000 f97f 	bl	8005960 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	609a      	str	r2, [r3, #8]
      break;
 800567a:	e04f      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	f000 f968 	bl	8005960 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569e:	609a      	str	r2, [r3, #8]
      break;
 80056a0:	e03c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 f8dc 	bl	800586c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2150      	movs	r1, #80	; 0x50
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f935 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80056c0:	e02c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 f8fb 	bl	80058ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2160      	movs	r1, #96	; 0x60
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f925 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 80056e0:	e01c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 f8bc 	bl	800586c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f915 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 8005700:	e00c      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f000 f90c 	bl	800592a <TIM_ITRx_SetConfig>
      break;
 8005712:	e003      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      break;
 8005718:	e000      	b.n	800571c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800571a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a40      	ldr	r2, [pc, #256]	; (800584c <TIM_Base_SetConfig+0x114>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d00f      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3d      	ldr	r2, [pc, #244]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3b      	ldr	r2, [pc, #236]	; (8005858 <TIM_Base_SetConfig+0x120>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x40>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a3a      	ldr	r2, [pc, #232]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a2f      	ldr	r2, [pc, #188]	; (800584c <TIM_Base_SetConfig+0x114>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <TIM_Base_SetConfig+0x118>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2b      	ldr	r2, [pc, #172]	; (8005854 <TIM_Base_SetConfig+0x11c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <TIM_Base_SetConfig+0x120>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a29      	ldr	r2, [pc, #164]	; (800585c <TIM_Base_SetConfig+0x124>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a28      	ldr	r2, [pc, #160]	; (8005860 <TIM_Base_SetConfig+0x128>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x9a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <TIM_Base_SetConfig+0x130>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <TIM_Base_SetConfig+0x114>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d00f      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <TIM_Base_SetConfig+0x124>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00b      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <TIM_Base_SetConfig+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d003      	beq.n	8005830 <TIM_Base_SetConfig+0xf8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a0f      	ldr	r2, [pc, #60]	; (8005868 <TIM_Base_SetConfig+0x130>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d103      	bne.n	8005838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	615a      	str	r2, [r3, #20]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40012c00 	.word	0x40012c00
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40013400 	.word	0x40013400
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800

0800586c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0201 	bic.w	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f023 030a 	bic.w	r3, r3, #10
 80058a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f023 0210 	bic.w	r2, r3, #16
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005906:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	f043 0307 	orr.w	r3, r3, #7
 800594c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	021a      	lsls	r2, r3, #8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	431a      	orrs	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	609a      	str	r2, [r3, #8]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e068      	b.n	8005a8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2e      	ldr	r2, [pc, #184]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2d      	ldr	r2, [pc, #180]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d018      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a18      	ldr	r2, [pc, #96]	; (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10c      	bne.n	8005a78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	40013400 	.word	0x40013400
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40014000 	.word	0x40014000

08005ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e040      	b.n	8005b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fc feb8 	bl	8002848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2224      	movs	r2, #36	; 0x24
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0201 	bic.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fc34 	bl	8006364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f979 	bl	8005df4 <UART_SetConfig>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e01b      	b.n	8005b44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fcb3 	bl	80064a8 <UART_CheckIdleState>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d178      	bne.n	8005c56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_UART_Transmit+0x24>
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e071      	b.n	8005c58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2221      	movs	r2, #33	; 0x21
 8005b80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b82:	f7fd f85f 	bl	8002c44 <HAL_GetTick>
 8005b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d108      	bne.n	8005bb4 <HAL_UART_Transmit+0x68>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e003      	b.n	8005bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bbc:	e030      	b.n	8005c20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2180      	movs	r1, #128	; 0x80
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fd15 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e03c      	b.n	8005c58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	e008      	b.n	8005c0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b292      	uxth	r2, r2
 8005c06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1c8      	bne.n	8005bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2200      	movs	r2, #0
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fcde 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e005      	b.n	8005c58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08a      	sub	sp, #40	; 0x28
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	f040 80b6 	bne.w	8005de8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_UART_Receive+0x28>
 8005c82:	88fb      	ldrh	r3, [r7, #6]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0ae      	b.n	8005dea <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2222      	movs	r2, #34	; 0x22
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca2:	f7fc ffcf 	bl	8002c44 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_UART_Receive+0x80>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_UART_Receive+0x76>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cd4:	e02d      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cde:	e028      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10d      	bne.n	8005d04 <HAL_UART_Receive+0xa4>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <HAL_UART_Receive+0x9a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	22ff      	movs	r2, #255	; 0xff
 8005cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005cf8:	e01b      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	227f      	movs	r2, #127	; 0x7f
 8005cfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d02:	e016      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0c:	d10d      	bne.n	8005d2a <HAL_UART_Receive+0xca>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_UART_Receive+0xc0>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	227f      	movs	r2, #127	; 0x7f
 8005d1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d1e:	e008      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	223f      	movs	r2, #63	; 0x3f
 8005d24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d28:	e003      	b.n	8005d32 <HAL_UART_Receive+0xd2>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d38:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d42:	d108      	bne.n	8005d56 <HAL_UART_Receive+0xf6>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	e003      	b.n	8005d5e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d5e:	e037      	b.n	8005dd0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2200      	movs	r2, #0
 8005d68:	2120      	movs	r1, #32
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fc44 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e033      	b.n	8005dea <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10c      	bne.n	8005da2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	8a7b      	ldrh	r3, [r7, #18]
 8005d92:	4013      	ands	r3, r2
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e00d      	b.n	8005dbe <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	8a7b      	ldrh	r3, [r7, #18]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4013      	ands	r3, r2
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1c1      	bne.n	8005d60 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e000      	b.n	8005dea <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df8:	b08a      	sub	sp, #40	; 0x28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4ba4      	ldr	r3, [pc, #656]	; (80060b4 <UART_SetConfig+0x2c0>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a99      	ldr	r2, [pc, #612]	; (80060b8 <UART_SetConfig+0x2c4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e70:	430a      	orrs	r2, r1
 8005e72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a90      	ldr	r2, [pc, #576]	; (80060bc <UART_SetConfig+0x2c8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d126      	bne.n	8005ecc <UART_SetConfig+0xd8>
 8005e7e:	4b90      	ldr	r3, [pc, #576]	; (80060c0 <UART_SetConfig+0x2cc>)
 8005e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d81b      	bhi.n	8005ec4 <UART_SetConfig+0xd0>
 8005e8c:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0xa0>)
 8005e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e92:	bf00      	nop
 8005e94:	08005ea5 	.word	0x08005ea5
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e116      	b.n	80060da <UART_SetConfig+0x2e6>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e112      	b.n	80060da <UART_SetConfig+0x2e6>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eba:	e10e      	b.n	80060da <UART_SetConfig+0x2e6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec2:	e10a      	b.n	80060da <UART_SetConfig+0x2e6>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eca:	e106      	b.n	80060da <UART_SetConfig+0x2e6>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a7c      	ldr	r2, [pc, #496]	; (80060c4 <UART_SetConfig+0x2d0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d138      	bne.n	8005f48 <UART_SetConfig+0x154>
 8005ed6:	4b7a      	ldr	r3, [pc, #488]	; (80060c0 <UART_SetConfig+0x2cc>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f003 030c 	and.w	r3, r3, #12
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	d82d      	bhi.n	8005f40 <UART_SetConfig+0x14c>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0xf8>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f41 	.word	0x08005f41
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f41 	.word	0x08005f41
 8005efc:	08005f31 	.word	0x08005f31
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f41 	.word	0x08005f41
 8005f14:	08005f41 	.word	0x08005f41
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f39 	.word	0x08005f39
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e0d8      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e0d4      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f36:	e0d0      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3e:	e0cc      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f46:	e0c8      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5e      	ldr	r2, [pc, #376]	; (80060c8 <UART_SetConfig+0x2d4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d125      	bne.n	8005f9e <UART_SetConfig+0x1aa>
 8005f52:	4b5b      	ldr	r3, [pc, #364]	; (80060c0 <UART_SetConfig+0x2cc>)
 8005f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f5c:	2b30      	cmp	r3, #48	; 0x30
 8005f5e:	d016      	beq.n	8005f8e <UART_SetConfig+0x19a>
 8005f60:	2b30      	cmp	r3, #48	; 0x30
 8005f62:	d818      	bhi.n	8005f96 <UART_SetConfig+0x1a2>
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d00a      	beq.n	8005f7e <UART_SetConfig+0x18a>
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d814      	bhi.n	8005f96 <UART_SetConfig+0x1a2>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <UART_SetConfig+0x182>
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d008      	beq.n	8005f86 <UART_SetConfig+0x192>
 8005f74:	e00f      	b.n	8005f96 <UART_SetConfig+0x1a2>
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7c:	e0ad      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f84:	e0a9      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f86:	2304      	movs	r3, #4
 8005f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8c:	e0a5      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f8e:	2308      	movs	r3, #8
 8005f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f94:	e0a1      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f96:	2310      	movs	r3, #16
 8005f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9c:	e09d      	b.n	80060da <UART_SetConfig+0x2e6>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a4a      	ldr	r2, [pc, #296]	; (80060cc <UART_SetConfig+0x2d8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d125      	bne.n	8005ff4 <UART_SetConfig+0x200>
 8005fa8:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <UART_SetConfig+0x2cc>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb4:	d016      	beq.n	8005fe4 <UART_SetConfig+0x1f0>
 8005fb6:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb8:	d818      	bhi.n	8005fec <UART_SetConfig+0x1f8>
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d00a      	beq.n	8005fd4 <UART_SetConfig+0x1e0>
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d814      	bhi.n	8005fec <UART_SetConfig+0x1f8>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <UART_SetConfig+0x1d8>
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d008      	beq.n	8005fdc <UART_SetConfig+0x1e8>
 8005fca:	e00f      	b.n	8005fec <UART_SetConfig+0x1f8>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd2:	e082      	b.n	80060da <UART_SetConfig+0x2e6>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fda:	e07e      	b.n	80060da <UART_SetConfig+0x2e6>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe2:	e07a      	b.n	80060da <UART_SetConfig+0x2e6>
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fea:	e076      	b.n	80060da <UART_SetConfig+0x2e6>
 8005fec:	2310      	movs	r3, #16
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff2:	e072      	b.n	80060da <UART_SetConfig+0x2e6>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a35      	ldr	r2, [pc, #212]	; (80060d0 <UART_SetConfig+0x2dc>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d12a      	bne.n	8006054 <UART_SetConfig+0x260>
 8005ffe:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <UART_SetConfig+0x2cc>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600c:	d01a      	beq.n	8006044 <UART_SetConfig+0x250>
 800600e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006012:	d81b      	bhi.n	800604c <UART_SetConfig+0x258>
 8006014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006018:	d00c      	beq.n	8006034 <UART_SetConfig+0x240>
 800601a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800601e:	d815      	bhi.n	800604c <UART_SetConfig+0x258>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <UART_SetConfig+0x238>
 8006024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006028:	d008      	beq.n	800603c <UART_SetConfig+0x248>
 800602a:	e00f      	b.n	800604c <UART_SetConfig+0x258>
 800602c:	2300      	movs	r3, #0
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e052      	b.n	80060da <UART_SetConfig+0x2e6>
 8006034:	2302      	movs	r3, #2
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e04e      	b.n	80060da <UART_SetConfig+0x2e6>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006042:	e04a      	b.n	80060da <UART_SetConfig+0x2e6>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604a:	e046      	b.n	80060da <UART_SetConfig+0x2e6>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006052:	e042      	b.n	80060da <UART_SetConfig+0x2e6>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a17      	ldr	r2, [pc, #92]	; (80060b8 <UART_SetConfig+0x2c4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d13a      	bne.n	80060d4 <UART_SetConfig+0x2e0>
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <UART_SetConfig+0x2cc>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006068:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800606c:	d01a      	beq.n	80060a4 <UART_SetConfig+0x2b0>
 800606e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006072:	d81b      	bhi.n	80060ac <UART_SetConfig+0x2b8>
 8006074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006078:	d00c      	beq.n	8006094 <UART_SetConfig+0x2a0>
 800607a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607e:	d815      	bhi.n	80060ac <UART_SetConfig+0x2b8>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <UART_SetConfig+0x298>
 8006084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006088:	d008      	beq.n	800609c <UART_SetConfig+0x2a8>
 800608a:	e00f      	b.n	80060ac <UART_SetConfig+0x2b8>
 800608c:	2300      	movs	r3, #0
 800608e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006092:	e022      	b.n	80060da <UART_SetConfig+0x2e6>
 8006094:	2302      	movs	r3, #2
 8006096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800609a:	e01e      	b.n	80060da <UART_SetConfig+0x2e6>
 800609c:	2304      	movs	r3, #4
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060a2:	e01a      	b.n	80060da <UART_SetConfig+0x2e6>
 80060a4:	2308      	movs	r3, #8
 80060a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060aa:	e016      	b.n	80060da <UART_SetConfig+0x2e6>
 80060ac:	2310      	movs	r3, #16
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060b2:	e012      	b.n	80060da <UART_SetConfig+0x2e6>
 80060b4:	efff69f3 	.word	0xefff69f3
 80060b8:	40008000 	.word	0x40008000
 80060bc:	40013800 	.word	0x40013800
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40004400 	.word	0x40004400
 80060c8:	40004800 	.word	0x40004800
 80060cc:	40004c00 	.word	0x40004c00
 80060d0:	40005000 	.word	0x40005000
 80060d4:	2310      	movs	r3, #16
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a9f      	ldr	r2, [pc, #636]	; (800635c <UART_SetConfig+0x568>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d17a      	bne.n	80061da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d824      	bhi.n	8006136 <UART_SetConfig+0x342>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x300>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006119 	.word	0x08006119
 80060f8:	08006137 	.word	0x08006137
 80060fc:	08006121 	.word	0x08006121
 8006100:	08006137 	.word	0x08006137
 8006104:	08006127 	.word	0x08006127
 8006108:	08006137 	.word	0x08006137
 800610c:	08006137 	.word	0x08006137
 8006110:	08006137 	.word	0x08006137
 8006114:	0800612f 	.word	0x0800612f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006118:	f7fe fb90 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 800611c:	61f8      	str	r0, [r7, #28]
        break;
 800611e:	e010      	b.n	8006142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006120:	4b8f      	ldr	r3, [pc, #572]	; (8006360 <UART_SetConfig+0x56c>)
 8006122:	61fb      	str	r3, [r7, #28]
        break;
 8006124:	e00d      	b.n	8006142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006126:	f7fe faf1 	bl	800470c <HAL_RCC_GetSysClockFreq>
 800612a:	61f8      	str	r0, [r7, #28]
        break;
 800612c:	e009      	b.n	8006142 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800612e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006132:	61fb      	str	r3, [r7, #28]
        break;
 8006134:	e005      	b.n	8006142 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80fb 	beq.w	8006340 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	4413      	add	r3, r2
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	429a      	cmp	r2, r3
 8006158:	d305      	bcc.n	8006166 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	429a      	cmp	r2, r3
 8006164:	d903      	bls.n	800616e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800616c:	e0e8      	b.n	8006340 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	461c      	mov	r4, r3
 8006174:	4615      	mov	r5, r2
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	022b      	lsls	r3, r5, #8
 8006180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006184:	0222      	lsls	r2, r4, #8
 8006186:	68f9      	ldr	r1, [r7, #12]
 8006188:	6849      	ldr	r1, [r1, #4]
 800618a:	0849      	lsrs	r1, r1, #1
 800618c:	2000      	movs	r0, #0
 800618e:	4688      	mov	r8, r1
 8006190:	4681      	mov	r9, r0
 8006192:	eb12 0a08 	adds.w	sl, r2, r8
 8006196:	eb43 0b09 	adc.w	fp, r3, r9
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a8:	4650      	mov	r0, sl
 80061aa:	4659      	mov	r1, fp
 80061ac:	f7fa fd6c 	bl	8000c88 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4613      	mov	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061be:	d308      	bcc.n	80061d2 <UART_SetConfig+0x3de>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c6:	d204      	bcs.n	80061d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	60da      	str	r2, [r3, #12]
 80061d0:	e0b6      	b.n	8006340 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061d8:	e0b2      	b.n	8006340 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e2:	d15e      	bne.n	80062a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d828      	bhi.n	800623e <UART_SetConfig+0x44a>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x400>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	0800623f 	.word	0x0800623f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800623f 	.word	0x0800623f
 800620c:	0800623f 	.word	0x0800623f
 8006210:	0800623f 	.word	0x0800623f
 8006214:	08006237 	.word	0x08006237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fe fb10 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e014      	b.n	800624a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006220:	f7fe fb22 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8006224:	61f8      	str	r0, [r7, #28]
        break;
 8006226:	e010      	b.n	800624a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006228:	4b4d      	ldr	r3, [pc, #308]	; (8006360 <UART_SetConfig+0x56c>)
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e00d      	b.n	800624a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622e:	f7fe fa6d 	bl	800470c <HAL_RCC_GetSysClockFreq>
 8006232:	61f8      	str	r0, [r7, #28]
        break;
 8006234:	e009      	b.n	800624a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623a:	61fb      	str	r3, [r7, #28]
        break;
 800623c:	e005      	b.n	800624a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d077      	beq.n	8006340 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	005a      	lsls	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	441a      	add	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b0f      	cmp	r3, #15
 800626a:	d916      	bls.n	800629a <UART_SetConfig+0x4a6>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006272:	d212      	bcs.n	800629a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f023 030f 	bic.w	r3, r3, #15
 800627c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	085b      	lsrs	r3, r3, #1
 8006282:	b29b      	uxth	r3, r3
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	b29a      	uxth	r2, r3
 800628a:	8afb      	ldrh	r3, [r7, #22]
 800628c:	4313      	orrs	r3, r2
 800628e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	8afa      	ldrh	r2, [r7, #22]
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	e052      	b.n	8006340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80062a0:	e04e      	b.n	8006340 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d827      	bhi.n	80062fa <UART_SetConfig+0x506>
 80062aa:	a201      	add	r2, pc, #4	; (adr r2, 80062b0 <UART_SetConfig+0x4bc>)
 80062ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b0:	080062d5 	.word	0x080062d5
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062e5 	.word	0x080062e5
 80062bc:	080062fb 	.word	0x080062fb
 80062c0:	080062eb 	.word	0x080062eb
 80062c4:	080062fb 	.word	0x080062fb
 80062c8:	080062fb 	.word	0x080062fb
 80062cc:	080062fb 	.word	0x080062fb
 80062d0:	080062f3 	.word	0x080062f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d4:	f7fe fab2 	bl	800483c <HAL_RCC_GetPCLK1Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
        break;
 80062da:	e014      	b.n	8006306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062dc:	f7fe fac4 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 80062e0:	61f8      	str	r0, [r7, #28]
        break;
 80062e2:	e010      	b.n	8006306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e4:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <UART_SetConfig+0x56c>)
 80062e6:	61fb      	str	r3, [r7, #28]
        break;
 80062e8:	e00d      	b.n	8006306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ea:	f7fe fa0f 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80062ee:	61f8      	str	r0, [r7, #28]
        break;
 80062f0:	e009      	b.n	8006306 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	61fb      	str	r3, [r7, #28]
        break;
 80062f8:	e005      	b.n	8006306 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006304:	bf00      	nop
    }

    if (pclk != 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d019      	beq.n	8006340 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	085a      	lsrs	r2, r3, #1
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	2b0f      	cmp	r3, #15
 8006324:	d909      	bls.n	800633a <UART_SetConfig+0x546>
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800632c:	d205      	bcs.n	800633a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60da      	str	r2, [r3, #12]
 8006338:	e002      	b.n	8006340 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800634c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006350:	4618      	mov	r0, r3
 8006352:	3728      	adds	r7, #40	; 0x28
 8006354:	46bd      	mov	sp, r7
 8006356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800635a:	bf00      	nop
 800635c:	40008000 	.word	0x40008000
 8006360:	00f42400 	.word	0x00f42400

08006364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	f003 0304 	and.w	r3, r3, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01a      	beq.n	800647a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006462:	d10a      	bne.n	800647a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b098      	sub	sp, #96	; 0x60
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b8:	f7fc fbc4 	bl	8002c44 <HAL_GetTick>
 80064bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d12e      	bne.n	800652a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d4:	2200      	movs	r2, #0
 80064d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f88c 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d021      	beq.n	800652a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fa:	653b      	str	r3, [r7, #80]	; 0x50
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
 8006506:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800650a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2220      	movs	r2, #32
 800651c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e062      	b.n	80065f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d149      	bne.n	80065cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	2200      	movs	r2, #0
 8006542:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f856 	bl	80065f8 <UART_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d03c      	beq.n	80065cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	623b      	str	r3, [r7, #32]
   return(result);
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006570:	633b      	str	r3, [r7, #48]	; 0x30
 8006572:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3308      	adds	r3, #8
 800658a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	60fb      	str	r3, [r7, #12]
   return(result);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	64bb      	str	r3, [r7, #72]	; 0x48
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065a4:	61fa      	str	r2, [r7, #28]
 80065a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	69b9      	ldr	r1, [r7, #24]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	617b      	str	r3, [r7, #20]
   return(result);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e5      	bne.n	8006584 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e011      	b.n	80065f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3758      	adds	r7, #88	; 0x58
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006608:	e049      	b.n	800669e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006610:	d045      	beq.n	800669e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fc fb17 	bl	8002c44 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <UART_WaitOnFlagUntilTimeout+0x30>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e048      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d031      	beq.n	800669e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b08      	cmp	r3, #8
 8006646:	d110      	bne.n	800666a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2208      	movs	r2, #8
 800664e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f838 	bl	80066c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2208      	movs	r2, #8
 800665a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e029      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006678:	d111      	bne.n	800669e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f81e 	bl	80066c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e00f      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d0a6      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b095      	sub	sp, #84	; 0x54
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	643b      	str	r3, [r7, #64]	; 0x40
 80066ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	2b01      	cmp	r3, #1
 800673a:	d118      	bne.n	800676e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60bb      	str	r3, [r7, #8]
   return(result);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0310 	bic.w	r3, r3, #16
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	613b      	str	r3, [r7, #16]
   return(result);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006782:	bf00      	nop
 8006784:	3754      	adds	r7, #84	; 0x54
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <__NVIC_SetPriority>:
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	6039      	str	r1, [r7, #0]
 800679a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800679c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	db0a      	blt.n	80067ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	490c      	ldr	r1, [pc, #48]	; (80067dc <__NVIC_SetPriority+0x4c>)
 80067aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ae:	0112      	lsls	r2, r2, #4
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	440b      	add	r3, r1
 80067b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067b8:	e00a      	b.n	80067d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	4908      	ldr	r1, [pc, #32]	; (80067e0 <__NVIC_SetPriority+0x50>)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	3b04      	subs	r3, #4
 80067c8:	0112      	lsls	r2, r2, #4
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	440b      	add	r3, r1
 80067ce:	761a      	strb	r2, [r3, #24]
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	e000e100 	.word	0xe000e100
 80067e0:	e000ed00 	.word	0xe000ed00

080067e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80067e8:	2100      	movs	r1, #0
 80067ea:	f06f 0004 	mvn.w	r0, #4
 80067ee:	f7ff ffcf 	bl	8006790 <__NVIC_SetPriority>
#endif
}
 80067f2:	bf00      	nop
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067fe:	f3ef 8305 	mrs	r3, IPSR
 8006802:	603b      	str	r3, [r7, #0]
  return(result);
 8006804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800680a:	f06f 0305 	mvn.w	r3, #5
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	e00c      	b.n	800682c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006812:	4b0a      	ldr	r3, [pc, #40]	; (800683c <osKernelInitialize+0x44>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <osKernelInitialize+0x44>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006820:	2300      	movs	r3, #0
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	e002      	b.n	800682c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800682a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800682c:	687b      	ldr	r3, [r7, #4]
}
 800682e:	4618      	mov	r0, r3
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000fe8 	.word	0x20000fe8

08006840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006846:	f3ef 8305 	mrs	r3, IPSR
 800684a:	603b      	str	r3, [r7, #0]
  return(result);
 800684c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006852:	f06f 0305 	mvn.w	r3, #5
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	e010      	b.n	800687c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <osKernelStart+0x48>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d109      	bne.n	8006876 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006862:	f7ff ffbf 	bl	80067e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <osKernelStart+0x48>)
 8006868:	2202      	movs	r2, #2
 800686a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800686c:	f001 fdb2 	bl	80083d4 <vTaskStartScheduler>
      stat = osOK;
 8006870:	2300      	movs	r3, #0
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e002      	b.n	800687c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800687a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000fe8 	.word	0x20000fe8

0800688c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af04      	add	r7, sp, #16
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800689c:	f3ef 8305 	mrs	r3, IPSR
 80068a0:	617b      	str	r3, [r7, #20]
  return(result);
 80068a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d17f      	bne.n	80069a8 <osThreadNew+0x11c>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d07c      	beq.n	80069a8 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80068ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068b4:	2318      	movs	r3, #24
 80068b6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d045      	beq.n	8006954 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <osThreadNew+0x4a>
        name = attr->name;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <osThreadNew+0x70>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b38      	cmp	r3, #56	; 0x38
 80068ee:	d805      	bhi.n	80068fc <osThreadNew+0x70>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <osThreadNew+0x74>
        return (NULL);
 80068fc:	2300      	movs	r3, #0
 80068fe:	e054      	b.n	80069aa <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00e      	beq.n	8006936 <osThreadNew+0xaa>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2ba7      	cmp	r3, #167	; 0xa7
 800691e:	d90a      	bls.n	8006936 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <osThreadNew+0xaa>
        mem = 1;
 8006930:	2301      	movs	r3, #1
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e010      	b.n	8006958 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <osThreadNew+0xcc>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d108      	bne.n	8006958 <osThreadNew+0xcc>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <osThreadNew+0xcc>
          mem = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e001      	b.n	8006958 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d110      	bne.n	8006980 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006966:	9202      	str	r2, [sp, #8]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f001 fb41 	bl	8007ffc <xTaskCreateStatic>
 800697a:	4603      	mov	r3, r0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e013      	b.n	80069a8 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d110      	bne.n	80069a8 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	b29a      	uxth	r2, r3
 800698a:	f107 0310 	add.w	r3, r7, #16
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f001 fb8c 	bl	80080b6 <xTaskCreate>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d001      	beq.n	80069a8 <osThreadNew+0x11c>
            hTask = NULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069a8:	693b      	ldr	r3, [r7, #16]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ba:	f3ef 8305 	mrs	r3, IPSR
 80069be:	603b      	str	r3, [r7, #0]
  return(result);
 80069c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <osThreadYield+0x1a>
    stat = osErrorISR;
 80069c6:	f06f 0305 	mvn.w	r3, #5
 80069ca:	607b      	str	r3, [r7, #4]
 80069cc:	e009      	b.n	80069e2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <osThreadYield+0x3c>)
 80069d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80069e2:	687b      	ldr	r3, [r7, #4]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a00:	f3ef 8305 	mrs	r3, IPSR
 8006a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a06:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d174      	bne.n	8006af6 <osMutexNew+0x102>
    if (attr != NULL) {
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	61bb      	str	r3, [r7, #24]
 8006a18:	e001      	b.n	8006a1e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <osMutexNew+0x3a>
      rmtx = 1U;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e001      	b.n	8006a32 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0308 	and.w	r3, r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d15c      	bne.n	8006af6 <osMutexNew+0x102>
      mem = -1;
 8006a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a40:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d015      	beq.n	8006a74 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d006      	beq.n	8006a5e <osMutexNew+0x6a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b4f      	cmp	r3, #79	; 0x4f
 8006a56:	d902      	bls.n	8006a5e <osMutexNew+0x6a>
          mem = 1;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	e00c      	b.n	8006a78 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <osMutexNew+0x84>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <osMutexNew+0x84>
            mem = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e001      	b.n	8006a78 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d112      	bne.n	8006aa4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	2004      	movs	r0, #4
 8006a8c:	f000 fc69 	bl	8007362 <xQueueCreateMutexStatic>
 8006a90:	61f8      	str	r0, [r7, #28]
 8006a92:	e016      	b.n	8006ac2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	f000 fc61 	bl	8007362 <xQueueCreateMutexStatic>
 8006aa0:	61f8      	str	r0, [r7, #28]
 8006aa2:	e00e      	b.n	8006ac2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10b      	bne.n	8006ac2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006ab0:	2004      	movs	r0, #4
 8006ab2:	f000 fc3e 	bl	8007332 <xQueueCreateMutex>
 8006ab6:	61f8      	str	r0, [r7, #28]
 8006ab8:	e003      	b.n	8006ac2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006aba:	2001      	movs	r0, #1
 8006abc:	f000 fc39 	bl	8007332 <xQueueCreateMutex>
 8006ac0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00c      	beq.n	8006ae2 <osMutexNew+0xee>
        if (attr != NULL) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <osMutexNew+0xe2>
          name = attr->name;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e001      	b.n	8006ada <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	69f8      	ldr	r0, [r7, #28]
 8006ade:	f001 fa2f 	bl	8007f40 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d006      	beq.n	8006af6 <osMutexNew+0x102>
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b1e:	f3ef 8305 	mrs	r3, IPSR
 8006b22:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006b2a:	f06f 0305 	mvn.w	r3, #5
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e02c      	b.n	8006b8c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006b38:	f06f 0303 	mvn.w	r3, #3
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e025      	b.n	8006b8c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d011      	beq.n	8006b6a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f000 fc59 	bl	8007400 <xQueueTakeMutexRecursive>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d01b      	beq.n	8006b8c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006b5a:	f06f 0301 	mvn.w	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e014      	b.n	8006b8c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006b62:	f06f 0302 	mvn.w	r3, #2
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e010      	b.n	8006b8c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6938      	ldr	r0, [r7, #16]
 8006b6e:	f000 fef7 	bl	8007960 <xQueueSemaphoreTake>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d009      	beq.n	8006b8c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006b7e:	f06f 0301 	mvn.w	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e002      	b.n	8006b8c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006b86:	f06f 0302 	mvn.w	r3, #2
 8006b8a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006b8c:	697b      	ldr	r3, [r7, #20]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb2:	f3ef 8305 	mrs	r3, IPSR
 8006bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bb8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006bbe:	f06f 0305 	mvn.w	r3, #5
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e01f      	b.n	8006c06 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006bcc:	f06f 0303 	mvn.w	r3, #3
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e018      	b.n	8006c06 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 fbdc 	bl	8007398 <xQueueGiveMutexRecursive>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d00f      	beq.n	8006c06 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006be6:	f06f 0302 	mvn.w	r3, #2
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	e00b      	b.n	8006c06 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	6938      	ldr	r0, [r7, #16]
 8006bf6:	f000 fc39 	bl	800746c <xQueueGenericSend>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d002      	beq.n	8006c06 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c00:	f06f 0302 	mvn.w	r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c06:	697b      	ldr	r3, [r7, #20]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c20:	f3ef 8305 	mrs	r3, IPSR
 8006c24:	613b      	str	r3, [r7, #16]
  return(result);
 8006c26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d15f      	bne.n	8006cec <osMessageQueueNew+0xdc>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d05c      	beq.n	8006cec <osMessageQueueNew+0xdc>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d059      	beq.n	8006cec <osMessageQueueNew+0xdc>
    mem = -1;
 8006c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d029      	beq.n	8006c98 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d012      	beq.n	8006c72 <osMessageQueueNew+0x62>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b4f      	cmp	r3, #79	; 0x4f
 8006c52:	d90e      	bls.n	8006c72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695a      	ldr	r2, [r3, #20]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d302      	bcc.n	8006c72 <osMessageQueueNew+0x62>
        mem = 1;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	e014      	b.n	8006c9c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d110      	bne.n	8006c9c <osMessageQueueNew+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d104      	bne.n	8006c9c <osMessageQueueNew+0x8c>
          mem = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	e001      	b.n	8006c9c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d10b      	bne.n	8006cba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2100      	movs	r1, #0
 8006cac:	9100      	str	r1, [sp, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fa4f 	bl	8007154 <xQueueGenericCreateStatic>
 8006cb6:	61f8      	str	r0, [r7, #28]
 8006cb8:	e008      	b.n	8006ccc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fabd 	bl	8007244 <xQueueGenericCreate>
 8006cca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00c      	beq.n	8006cec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e001      	b.n	8006ce4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ce4:	6979      	ldr	r1, [r7, #20]
 8006ce6:	69f8      	ldr	r0, [r7, #28]
 8006ce8:	f001 f92a 	bl	8007f40 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006cec:	69fb      	ldr	r3, [r7, #28]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d10:	f3ef 8305 	mrs	r3, IPSR
 8006d14:	617b      	str	r3, [r7, #20]
  return(result);
 8006d16:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d028      	beq.n	8006d6e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <osMessageQueuePut+0x36>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <osMessageQueuePut+0x36>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006d2e:	f06f 0303 	mvn.w	r3, #3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e038      	b.n	8006da8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d3a:	f107 0210 	add.w	r2, r7, #16
 8006d3e:	2300      	movs	r3, #0
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	69b8      	ldr	r0, [r7, #24]
 8006d44:	f000 fc90 	bl	8007668 <xQueueGenericSendFromISR>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d003      	beq.n	8006d56 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006d4e:	f06f 0302 	mvn.w	r3, #2
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	e028      	b.n	8006da8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d025      	beq.n	8006da8 <osMessageQueuePut+0xb0>
 8006d5c:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <osMessageQueuePut+0xbc>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	e01c      	b.n	8006da8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <osMessageQueuePut+0x82>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006d7a:	f06f 0303 	mvn.w	r3, #3
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e012      	b.n	8006da8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	69b8      	ldr	r0, [r7, #24]
 8006d8a:	f000 fb6f 	bl	800746c <xQueueGenericSend>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d009      	beq.n	8006da8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006d9a:	f06f 0301 	mvn.w	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e002      	b.n	8006da8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006da2:	f06f 0302 	mvn.w	r3, #2
 8006da6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006da8:	69fb      	ldr	r3, [r7, #28]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	e000ed04 	.word	0xe000ed04

08006db8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dce:	f3ef 8305 	mrs	r3, IPSR
 8006dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8006dd4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <osMessageQueueGet+0x34>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <osMessageQueueGet+0x34>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006dec:	f06f 0303 	mvn.w	r3, #3
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	e037      	b.n	8006e64 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006df8:	f107 0310 	add.w	r3, r7, #16
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	69b8      	ldr	r0, [r7, #24]
 8006e02:	f000 feb9 	bl	8007b78 <xQueueReceiveFromISR>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006e0c:	f06f 0302 	mvn.w	r3, #2
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	e027      	b.n	8006e64 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d024      	beq.n	8006e64 <osMessageQueueGet+0xac>
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <osMessageQueueGet+0xb8>)
 8006e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	e01b      	b.n	8006e64 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <osMessageQueueGet+0x80>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006e38:	f06f 0303 	mvn.w	r3, #3
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	e011      	b.n	8006e64 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	69b8      	ldr	r0, [r7, #24]
 8006e46:	f000 fcab 	bl	80077a0 <xQueueReceive>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d009      	beq.n	8006e64 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006e56:	f06f 0301 	mvn.w	r3, #1
 8006e5a:	61fb      	str	r3, [r7, #28]
 8006e5c:	e002      	b.n	8006e64 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006e5e:	f06f 0302 	mvn.w	r3, #2
 8006e62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e64:	69fb      	ldr	r3, [r7, #28]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3720      	adds	r7, #32
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	e000ed04 	.word	0xe000ed04

08006e74 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <osMessageQueueGetCount+0x18>
    count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e00e      	b.n	8006eaa <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8c:	f3ef 8305 	mrs	r3, IPSR
 8006e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006e98:	6938      	ldr	r0, [r7, #16]
 8006e9a:	f000 ff0b 	bl	8007cb4 <uxQueueMessagesWaitingFromISR>
 8006e9e:	6178      	str	r0, [r7, #20]
 8006ea0:	e003      	b.n	8006eaa <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006ea2:	6938      	ldr	r0, [r7, #16]
 8006ea4:	f000 fee8 	bl	8007c78 <uxQueueMessagesWaiting>
 8006ea8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006eaa:	697b      	ldr	r3, [r7, #20]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a07      	ldr	r2, [pc, #28]	; (8006ee0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006ec4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <vApplicationGetIdleTaskMemory+0x30>)
 8006eca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20000fec 	.word	0x20000fec
 8006ee4:	20001094 	.word	0x20001094

08006ee8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a07      	ldr	r2, [pc, #28]	; (8006f14 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ef8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4a06      	ldr	r2, [pc, #24]	; (8006f18 <vApplicationGetTimerTaskMemory+0x30>)
 8006efe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f06:	601a      	str	r2, [r3, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20001494 	.word	0x20001494
 8006f18:	2000153c 	.word	0x2000153c

08006f1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f103 0208 	add.w	r2, r3, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f103 0208 	add.w	r2, r3, #8
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f103 0208 	add.w	r2, r3, #8
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	601a      	str	r2, [r3, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd4:	d103      	bne.n	8006fde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e00c      	b.n	8006ff8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	e002      	b.n	8006fec <vListInsert+0x2e>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d2f6      	bcs.n	8006fe6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
}
 8007024:	bf00      	nop
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	6892      	ldr	r2, [r2, #8]
 8007046:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6852      	ldr	r2, [r2, #4]
 8007050:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	429a      	cmp	r2, r3
 800705a:	d103      	bne.n	8007064 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	1e5a      	subs	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070ae:	f002 fc59 	bl	8009964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	3b01      	subs	r3, #1
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	22ff      	movs	r2, #255	; 0xff
 80070fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d114      	bne.n	800712e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01a      	beq.n	8007142 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3310      	adds	r3, #16
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fbf9 	bl	8008908 <xTaskRemoveFromEventList>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d012      	beq.n	8007142 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <xQueueGenericReset+0xcc>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	e009      	b.n	8007142 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3310      	adds	r3, #16
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fef2 	bl	8006f1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3324      	adds	r3, #36	; 0x24
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff feed 	bl	8006f1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007142:	f002 fc3f 	bl	80099c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007146:	2301      	movs	r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800717a:	bf00      	nop
 800717c:	e7fe      	b.n	800717c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <xQueueGenericCreateStatic+0x52>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <xQueueGenericCreateStatic+0x56>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <xQueueGenericCreateStatic+0x58>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	623b      	str	r3, [r7, #32]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d102      	bne.n	80071d2 <xQueueGenericCreateStatic+0x7e>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueGenericCreateStatic+0x82>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueGenericCreateStatic+0x84>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61fb      	str	r3, [r7, #28]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071f2:	2350      	movs	r3, #80	; 0x50
 80071f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b50      	cmp	r3, #80	; 0x50
 80071fa:	d00a      	beq.n	8007212 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61bb      	str	r3, [r7, #24]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007212:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007226:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f83f 	bl	80072b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800723c:	4618      	mov	r0, r3
 800723e:	3730      	adds	r7, #48	; 0x30
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08a      	sub	sp, #40	; 0x28
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10a      	bne.n	800726e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	613b      	str	r3, [r7, #16]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	fb02 f303 	mul.w	r3, r2, r3
 8007276:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	3350      	adds	r3, #80	; 0x50
 800727c:	4618      	mov	r0, r3
 800727e:	f002 fc93 	bl	8009ba8 <pvPortMalloc>
 8007282:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d011      	beq.n	80072ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	3350      	adds	r3, #80	; 0x50
 8007292:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800729c:	79fa      	ldrb	r2, [r7, #7]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f805 	bl	80072b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072ae:	69bb      	ldr	r3, [r7, #24]
	}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	e002      	b.n	80072da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072e6:	2101      	movs	r1, #1
 80072e8:	69b8      	ldr	r0, [r7, #24]
 80072ea:	f7ff fecb 	bl	8007084 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	78fa      	ldrb	r2, [r7, #3]
 80072f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00e      	beq.n	800732a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800731e:	2300      	movs	r3, #0
 8007320:	2200      	movs	r2, #0
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8a1 	bl	800746c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	461a      	mov	r2, r3
 8007348:	6939      	ldr	r1, [r7, #16]
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff ff7a 	bl	8007244 <xQueueGenericCreate>
 8007350:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff ffd3 	bl	80072fe <prvInitialiseMutex>

		return xNewQueue;
 8007358:	68fb      	ldr	r3, [r7, #12]
	}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007362:	b580      	push	{r7, lr}
 8007364:	b088      	sub	sp, #32
 8007366:	af02      	add	r7, sp, #8
 8007368:	4603      	mov	r3, r0
 800736a:	6039      	str	r1, [r7, #0]
 800736c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800736e:	2301      	movs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
 8007372:	2300      	movs	r3, #0
 8007374:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2200      	movs	r2, #0
 800737e:	6939      	ldr	r1, [r7, #16]
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f7ff fee7 	bl	8007154 <xQueueGenericCreateStatic>
 8007386:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ffb8 	bl	80072fe <prvInitialiseMutex>

		return xNewQueue;
 800738e:	68fb      	ldr	r3, [r7, #12]
	}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007398:	b590      	push	{r4, r7, lr}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	60fb      	str	r3, [r7, #12]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	689c      	ldr	r4, [r3, #8]
 80073c4:	f001 fc62 	bl	8008c8c <xTaskGetCurrentTaskHandle>
 80073c8:	4603      	mov	r3, r0
 80073ca:	429c      	cmp	r4, r3
 80073cc:	d111      	bne.n	80073f2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	1e5a      	subs	r2, r3, #1
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80073e0:	2300      	movs	r3, #0
 80073e2:	2200      	movs	r2, #0
 80073e4:	2100      	movs	r1, #0
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f000 f840 	bl	800746c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e001      	b.n	80073f6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80073f6:	697b      	ldr	r3, [r7, #20]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd90      	pop	{r4, r7, pc}

08007400 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60fb      	str	r3, [r7, #12]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	689c      	ldr	r4, [r3, #8]
 800742e:	f001 fc2d 	bl	8008c8c <xTaskGetCurrentTaskHandle>
 8007432:	4603      	mov	r3, r0
 8007434:	429c      	cmp	r4, r3
 8007436:	d107      	bne.n	8007448 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	e00c      	b.n	8007462 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f000 fa88 	bl	8007960 <xQueueSemaphoreTake>
 8007450:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007462:	697b      	ldr	r3, [r7, #20]
	}
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	bd90      	pop	{r4, r7, pc}

0800746c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b08e      	sub	sp, #56	; 0x38
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800747a:	2300      	movs	r3, #0
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <xQueueGenericSend+0x32>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d103      	bne.n	80074ac <xQueueGenericSend+0x40>
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <xQueueGenericSend+0x44>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <xQueueGenericSend+0x46>
 80074b0:	2300      	movs	r3, #0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <xQueueGenericSend+0x60>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d103      	bne.n	80074da <xQueueGenericSend+0x6e>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <xQueueGenericSend+0x72>
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <xQueueGenericSend+0x74>
 80074de:	2300      	movs	r3, #0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <xQueueGenericSend+0x8e>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	623b      	str	r3, [r7, #32]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074fa:	f001 fbd7 	bl	8008cac <xTaskGetSchedulerState>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <xQueueGenericSend+0x9e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <xQueueGenericSend+0xa2>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <xQueueGenericSend+0xa4>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <xQueueGenericSend+0xbe>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	61fb      	str	r3, [r7, #28]
}
 8007526:	bf00      	nop
 8007528:	e7fe      	b.n	8007528 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800752a:	f002 fa1b 	bl	8009964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	429a      	cmp	r2, r3
 8007538:	d302      	bcc.n	8007540 <xQueueGenericSend+0xd4>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d129      	bne.n	8007594 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007546:	f000 fbeb 	bl	8007d20 <prvCopyDataToQueue>
 800754a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	3324      	adds	r3, #36	; 0x24
 8007558:	4618      	mov	r0, r3
 800755a:	f001 f9d5 	bl	8008908 <xTaskRemoveFromEventList>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007564:	4b3f      	ldr	r3, [pc, #252]	; (8007664 <xQueueGenericSend+0x1f8>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	e00a      	b.n	800758c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800757c:	4b39      	ldr	r3, [pc, #228]	; (8007664 <xQueueGenericSend+0x1f8>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800758c:	f002 fa1a 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 8007590:	2301      	movs	r3, #1
 8007592:	e063      	b.n	800765c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800759a:	f002 fa13 	bl	80099c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	e05c      	b.n	800765c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075a8:	f107 0314 	add.w	r3, r7, #20
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fa0f 	bl	80089d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80075b2:	2301      	movs	r3, #1
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075b6:	f002 fa05 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075ba:	f000 ff7b 	bl	80084b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075be:	f002 f9d1 	bl	8009964 <vPortEnterCritical>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c8:	b25b      	sxtb	r3, r3
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ce:	d103      	bne.n	80075d8 <xQueueGenericSend+0x16c>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d103      	bne.n	80075ee <xQueueGenericSend+0x182>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ee:	f002 f9e9 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075f2:	1d3a      	adds	r2, r7, #4
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 f9fe 	bl	80089fc <xTaskCheckForTimeOut>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d124      	bne.n	8007650 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007608:	f000 fc82 	bl	8007f10 <prvIsQueueFull>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d018      	beq.n	8007644 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	3310      	adds	r3, #16
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	4611      	mov	r1, r2
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f924 	bl	8008868 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007622:	f000 fc0d 	bl	8007e40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007626:	f000 ff53 	bl	80084d0 <xTaskResumeAll>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	f47f af7c 	bne.w	800752a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007632:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <xQueueGenericSend+0x1f8>)
 8007634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	e772      	b.n	800752a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007646:	f000 fbfb 	bl	8007e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800764a:	f000 ff41 	bl	80084d0 <xTaskResumeAll>
 800764e:	e76c      	b.n	800752a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007652:	f000 fbf5 	bl	8007e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007656:	f000 ff3b 	bl	80084d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800765a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800765c:	4618      	mov	r0, r3
 800765e:	3738      	adds	r7, #56	; 0x38
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b090      	sub	sp, #64	; 0x40
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <xQueueGenericSendFromISR+0x3c>
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <xQueueGenericSendFromISR+0x40>
 80076a4:	2301      	movs	r3, #1
 80076a6:	e000      	b.n	80076aa <xQueueGenericSendFromISR+0x42>
 80076a8:	2300      	movs	r3, #0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10a      	bne.n	80076c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076c0:	bf00      	nop
 80076c2:	e7fe      	b.n	80076c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d103      	bne.n	80076d2 <xQueueGenericSendFromISR+0x6a>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <xQueueGenericSendFromISR+0x6e>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <xQueueGenericSendFromISR+0x70>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d10a      	bne.n	80076f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	623b      	str	r3, [r7, #32]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076f2:	f002 fa19 	bl	8009b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076f6:	f3ef 8211 	mrs	r2, BASEPRI
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	61fa      	str	r2, [r7, #28]
 800770c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800770e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	429a      	cmp	r2, r3
 800771c:	d302      	bcc.n	8007724 <xQueueGenericSendFromISR+0xbc>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d12f      	bne.n	8007784 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	68b9      	ldr	r1, [r7, #8]
 8007738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800773a:	f000 faf1 	bl	8007d20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800773e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007746:	d112      	bne.n	800776e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d016      	beq.n	800777e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007752:	3324      	adds	r3, #36	; 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f001 f8d7 	bl	8008908 <xTaskRemoveFromEventList>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00e      	beq.n	800777e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	e007      	b.n	800777e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800776e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007772:	3301      	adds	r3, #1
 8007774:	b2db      	uxtb	r3, r3
 8007776:	b25a      	sxtb	r2, r3
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800777e:	2301      	movs	r3, #1
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007782:	e001      	b.n	8007788 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007784:	2300      	movs	r3, #0
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007792:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007796:	4618      	mov	r0, r3
 8007798:	3740      	adds	r7, #64	; 0x40
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10a      	bne.n	80077d0 <xQueueReceive+0x30>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	623b      	str	r3, [r7, #32]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d103      	bne.n	80077de <xQueueReceive+0x3e>
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <xQueueReceive+0x42>
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <xQueueReceive+0x44>
 80077e2:	2300      	movs	r3, #0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10a      	bne.n	80077fe <xQueueReceive+0x5e>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	61fb      	str	r3, [r7, #28]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077fe:	f001 fa55 	bl	8008cac <xTaskGetSchedulerState>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <xQueueReceive+0x6e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <xQueueReceive+0x72>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <xQueueReceive+0x74>
 8007812:	2300      	movs	r3, #0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <xQueueReceive+0x8e>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	61bb      	str	r3, [r7, #24]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800782e:	f002 f899 	bl	8009964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01f      	beq.n	800787e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007842:	f000 fad7 	bl	8007df4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	1e5a      	subs	r2, r3, #1
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00f      	beq.n	8007876 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007858:	3310      	adds	r3, #16
 800785a:	4618      	mov	r0, r3
 800785c:	f001 f854 	bl	8008908 <xTaskRemoveFromEventList>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007866:	4b3d      	ldr	r3, [pc, #244]	; (800795c <xQueueReceive+0x1bc>)
 8007868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007876:	f002 f8a5 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 800787a:	2301      	movs	r3, #1
 800787c:	e069      	b.n	8007952 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007884:	f002 f89e 	bl	80099c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007888:	2300      	movs	r3, #0
 800788a:	e062      	b.n	8007952 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007892:	f107 0310 	add.w	r3, r7, #16
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f89a 	bl	80089d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800789c:	2301      	movs	r3, #1
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078a0:	f002 f890 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078a4:	f000 fe06 	bl	80084b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078a8:	f002 f85c 	bl	8009964 <vPortEnterCritical>
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b2:	b25b      	sxtb	r3, r3
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078b8:	d103      	bne.n	80078c2 <xQueueReceive+0x122>
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078c8:	b25b      	sxtb	r3, r3
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ce:	d103      	bne.n	80078d8 <xQueueReceive+0x138>
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078d8:	f002 f874 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078dc:	1d3a      	adds	r2, r7, #4
 80078de:	f107 0310 	add.w	r3, r7, #16
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f001 f889 	bl	80089fc <xTaskCheckForTimeOut>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d123      	bne.n	8007938 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f2:	f000 faf7 	bl	8007ee4 <prvIsQueueEmpty>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d017      	beq.n	800792c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	3324      	adds	r3, #36	; 0x24
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f000 ffaf 	bl	8008868 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800790a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790c:	f000 fa98 	bl	8007e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007910:	f000 fdde 	bl	80084d0 <xTaskResumeAll>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d189      	bne.n	800782e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800791a:	4b10      	ldr	r3, [pc, #64]	; (800795c <xQueueReceive+0x1bc>)
 800791c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	e780      	b.n	800782e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800792c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792e:	f000 fa87 	bl	8007e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007932:	f000 fdcd 	bl	80084d0 <xTaskResumeAll>
 8007936:	e77a      	b.n	800782e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793a:	f000 fa81 	bl	8007e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800793e:	f000 fdc7 	bl	80084d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007944:	f000 face 	bl	8007ee4 <prvIsQueueEmpty>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	f43f af6f 	beq.w	800782e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007952:	4618      	mov	r0, r3
 8007954:	3730      	adds	r7, #48	; 0x30
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08e      	sub	sp, #56	; 0x38
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007972:	2300      	movs	r3, #0
 8007974:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10a      	bne.n	8007992 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	623b      	str	r3, [r7, #32]
}
 800798e:	bf00      	nop
 8007990:	e7fe      	b.n	8007990 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	61fb      	str	r3, [r7, #28]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079b0:	f001 f97c 	bl	8008cac <xTaskGetSchedulerState>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d102      	bne.n	80079c0 <xQueueSemaphoreTake+0x60>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <xQueueSemaphoreTake+0x64>
 80079c0:	2301      	movs	r3, #1
 80079c2:	e000      	b.n	80079c6 <xQueueSemaphoreTake+0x66>
 80079c4:	2300      	movs	r3, #0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	61bb      	str	r3, [r7, #24]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079e0:	f001 ffc0 	bl	8009964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d024      	beq.n	8007a3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	1e5a      	subs	r2, r3, #1
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a00:	f001 faca 	bl	8008f98 <pvTaskIncrementMutexHeldCount>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00f      	beq.n	8007a32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	3310      	adds	r3, #16
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 ff76 	bl	8008908 <xTaskRemoveFromEventList>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d007      	beq.n	8007a32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a22:	4b54      	ldr	r3, [pc, #336]	; (8007b74 <xQueueSemaphoreTake+0x214>)
 8007a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a32:	f001 ffc7 	bl	80099c4 <vPortExitCritical>
				return pdPASS;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e097      	b.n	8007b6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d111      	bne.n	8007a64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a5c:	f001 ffb2 	bl	80099c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e082      	b.n	8007b6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a6a:	f107 030c 	add.w	r3, r7, #12
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 ffae 	bl	80089d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a78:	f001 ffa4 	bl	80099c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a7c:	f000 fd1a 	bl	80084b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a80:	f001 ff70 	bl	8009964 <vPortEnterCritical>
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a8a:	b25b      	sxtb	r3, r3
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a90:	d103      	bne.n	8007a9a <xQueueSemaphoreTake+0x13a>
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa6:	d103      	bne.n	8007ab0 <xQueueSemaphoreTake+0x150>
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab0:	f001 ff88 	bl	80099c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 ff9d 	bl	80089fc <xTaskCheckForTimeOut>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d132      	bne.n	8007b2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aca:	f000 fa0b 	bl	8007ee4 <prvIsQueueEmpty>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d026      	beq.n	8007b22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007adc:	f001 ff42 	bl	8009964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f8ff 	bl	8008ce8 <xTaskPriorityInherit>
 8007aea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007aec:	f001 ff6a 	bl	80099c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 feb5 	bl	8008868 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b00:	f000 f99e 	bl	8007e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b04:	f000 fce4 	bl	80084d0 <xTaskResumeAll>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f47f af68 	bne.w	80079e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <xQueueSemaphoreTake+0x214>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	e75e      	b.n	80079e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b24:	f000 f98c 	bl	8007e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b28:	f000 fcd2 	bl	80084d0 <xTaskResumeAll>
 8007b2c:	e758      	b.n	80079e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b30:	f000 f986 	bl	8007e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b34:	f000 fccc 	bl	80084d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b3a:	f000 f9d3 	bl	8007ee4 <prvIsQueueEmpty>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f af4d 	beq.w	80079e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007b4c:	f001 ff0a 	bl	8009964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b52:	f000 f8cd 	bl	8007cf0 <prvGetDisinheritPriorityAfterTimeout>
 8007b56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 f998 	bl	8008e94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b64:	f001 ff2e 	bl	80099c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3738      	adds	r7, #56	; 0x38
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	; 0x38
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	623b      	str	r3, [r7, #32]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <xQueueReceiveFromISR+0x3a>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <xQueueReceiveFromISR+0x3e>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <xQueueReceiveFromISR+0x40>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	61fb      	str	r3, [r7, #28]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bd2:	f001 ffa9 	bl	8009b28 <vPortValidateInterruptPriority>
	__asm volatile
 8007bd6:	f3ef 8211 	mrs	r2, BASEPRI
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61ba      	str	r2, [r7, #24]
 8007bec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d02f      	beq.n	8007c5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0c:	f000 f8f2 	bl	8007df4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	1e5a      	subs	r2, r3, #1
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c20:	d112      	bne.n	8007c48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fe6a 	bl	8008908 <xTaskRemoveFromEventList>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00e      	beq.n	8007c58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e007      	b.n	8007c58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	b25a      	sxtb	r2, r3
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5c:	e001      	b.n	8007c62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f383 8811 	msr	BASEPRI, r3
}
 8007c6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3738      	adds	r7, #56	; 0x38
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	60bb      	str	r3, [r7, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007c9c:	f001 fe62 	bl	8009964 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007ca6:	f001 fe8d 	bl	80099c4 <vPortExitCritical>

	return uxReturn;
 8007caa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60fb      	str	r3, [r7, #12]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007ce2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d006      	beq.n	8007d0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e001      	b.n	8007d12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d12:	68fb      	ldr	r3, [r7, #12]
	}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d14d      	bne.n	8007de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f834 	bl	8008db8 <xTaskPriorityDisinherit>
 8007d50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	609a      	str	r2, [r3, #8]
 8007d58:	e043      	b.n	8007de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d119      	bne.n	8007d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6858      	ldr	r0, [r3, #4]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	f004 f8ef 	bl	800bf4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	441a      	add	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d32b      	bcc.n	8007de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	605a      	str	r2, [r3, #4]
 8007d92:	e026      	b.n	8007de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68d8      	ldr	r0, [r3, #12]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	f004 f8d5 	bl	800bf4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	425b      	negs	r3, r3
 8007dae:	441a      	add	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d207      	bcs.n	8007dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	425b      	negs	r3, r3
 8007dca:	441a      	add	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d105      	bne.n	8007de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dea:	697b      	ldr	r3, [r7, #20]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d018      	beq.n	8007e38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	441a      	add	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68da      	ldr	r2, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d303      	bcc.n	8007e28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68d9      	ldr	r1, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	461a      	mov	r2, r3
 8007e32:	6838      	ldr	r0, [r7, #0]
 8007e34:	f004 f88b 	bl	800bf4e <memcpy>
	}
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e48:	f001 fd8c 	bl	8009964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e54:	e011      	b.n	8007e7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d012      	beq.n	8007e84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3324      	adds	r3, #36	; 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fd50 	bl	8008908 <xTaskRemoveFromEventList>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e6e:	f000 fe27 	bl	8008ac0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dce9      	bgt.n	8007e56 <prvUnlockQueue+0x16>
 8007e82:	e000      	b.n	8007e86 <prvUnlockQueue+0x46>
					break;
 8007e84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	22ff      	movs	r2, #255	; 0xff
 8007e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e8e:	f001 fd99 	bl	80099c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e92:	f001 fd67 	bl	8009964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e9e:	e011      	b.n	8007ec4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d012      	beq.n	8007ece <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3310      	adds	r3, #16
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fd2b 	bl	8008908 <xTaskRemoveFromEventList>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007eb8:	f000 fe02 	bl	8008ac0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dce9      	bgt.n	8007ea0 <prvUnlockQueue+0x60>
 8007ecc:	e000      	b.n	8007ed0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ece:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	22ff      	movs	r2, #255	; 0xff
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ed8:	f001 fd74 	bl	80099c4 <vPortExitCritical>
}
 8007edc:	bf00      	nop
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eec:	f001 fd3a 	bl	8009964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e001      	b.n	8007f02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f02:	f001 fd5f 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8007f06:	68fb      	ldr	r3, [r7, #12]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f18:	f001 fd24 	bl	8009964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d102      	bne.n	8007f2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e001      	b.n	8007f32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f32:	f001 fd47 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8007f36:	68fb      	ldr	r3, [r7, #12]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e014      	b.n	8007f7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f50:	4a0f      	ldr	r2, [pc, #60]	; (8007f90 <vQueueAddToRegistry+0x50>)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f5c:	490c      	ldr	r1, [pc, #48]	; (8007f90 <vQueueAddToRegistry+0x50>)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <vQueueAddToRegistry+0x50>)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f72:	e006      	b.n	8007f82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b07      	cmp	r3, #7
 8007f7e:	d9e7      	bls.n	8007f50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20001d3c 	.word	0x20001d3c

08007f94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fa4:	f001 fcde 	bl	8009964 <vPortEnterCritical>
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fae:	b25b      	sxtb	r3, r3
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb4:	d103      	bne.n	8007fbe <vQueueWaitForMessageRestricted+0x2a>
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fca:	d103      	bne.n	8007fd4 <vQueueWaitForMessageRestricted+0x40>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fd4:	f001 fcf6 	bl	80099c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	3324      	adds	r3, #36	; 0x24
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	68b9      	ldr	r1, [r7, #8]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fc61 	bl	80088b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fee:	6978      	ldr	r0, [r7, #20]
 8007ff0:	f7ff ff26 	bl	8007e40 <prvUnlockQueue>
	}
 8007ff4:	bf00      	nop
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08e      	sub	sp, #56	; 0x38
 8008000:	af04      	add	r7, sp, #16
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800800a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	623b      	str	r3, [r7, #32]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCreateStatic+0x46>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	61fb      	str	r3, [r7, #28]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008042:	23a8      	movs	r3, #168	; 0xa8
 8008044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2ba8      	cmp	r3, #168	; 0xa8
 800804a:	d00a      	beq.n	8008062 <xTaskCreateStatic+0x66>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	61bb      	str	r3, [r7, #24]
}
 800805e:	bf00      	nop
 8008060:	e7fe      	b.n	8008060 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008062:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01e      	beq.n	80080a8 <xTaskCreateStatic+0xac>
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	2b00      	cmp	r3, #0
 800806e:	d01b      	beq.n	80080a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008078:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	2202      	movs	r2, #2
 800807e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008082:	2300      	movs	r3, #0
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	f107 0314 	add.w	r3, r7, #20
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f850 	bl	8008140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a2:	f000 f8f3 	bl	800828c <prvAddNewTaskToReadyList>
 80080a6:	e001      	b.n	80080ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080ac:	697b      	ldr	r3, [r7, #20]
	}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b08c      	sub	sp, #48	; 0x30
 80080ba:	af04      	add	r7, sp, #16
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fd6c 	bl	8009ba8 <pvPortMalloc>
 80080d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080d8:	20a8      	movs	r0, #168	; 0xa8
 80080da:	f001 fd65 	bl	8009ba8 <pvPortMalloc>
 80080de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	631a      	str	r2, [r3, #48]	; 0x30
 80080ec:	e005      	b.n	80080fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ee:	6978      	ldr	r0, [r7, #20]
 80080f0:	f001 fe26 	bl	8009d40 <vPortFree>
 80080f4:	e001      	b.n	80080fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	2300      	movs	r3, #0
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f80e 	bl	8008140 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008124:	69f8      	ldr	r0, [r7, #28]
 8008126:	f000 f8b1 	bl	800828c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800812a:	2301      	movs	r3, #1
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e002      	b.n	8008136 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008134:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008136:	69bb      	ldr	r3, [r7, #24]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	3720      	adds	r7, #32
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	461a      	mov	r2, r3
 8008158:	21a5      	movs	r1, #165	; 0xa5
 800815a:	f003 fe59 	bl	800be10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008168:	3b01      	subs	r3, #1
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f023 0307 	bic.w	r3, r3, #7
 8008176:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f003 0307 	and.w	r3, r3, #7
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	617b      	str	r3, [r7, #20]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01f      	beq.n	80081de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800819e:	2300      	movs	r3, #0
 80081a0:	61fb      	str	r3, [r7, #28]
 80081a2:	e012      	b.n	80081ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	7819      	ldrb	r1, [r3, #0]
 80081ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	3334      	adds	r3, #52	; 0x34
 80081b4:	460a      	mov	r2, r1
 80081b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	2b0f      	cmp	r3, #15
 80081ce:	d9e9      	bls.n	80081a4 <prvInitialiseNewTask+0x64>
 80081d0:	e000      	b.n	80081d4 <prvInitialiseNewTask+0x94>
			{
				break;
 80081d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081dc:	e003      	b.n	80081e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	2b37      	cmp	r3, #55	; 0x37
 80081ea:	d901      	bls.n	80081f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081ec:	2337      	movs	r3, #55	; 0x37
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2200      	movs	r2, #0
 8008200:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	3304      	adds	r3, #4
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fea8 	bl	8006f5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	3318      	adds	r3, #24
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fea3 	bl	8006f5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	2200      	movs	r2, #0
 8008238:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	3354      	adds	r3, #84	; 0x54
 8008240:	224c      	movs	r2, #76	; 0x4c
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f003 fde3 	bl	800be10 <memset>
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <prvInitialiseNewTask+0x140>)
 800824e:	659a      	str	r2, [r3, #88]	; 0x58
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	4a0c      	ldr	r2, [pc, #48]	; (8008284 <prvInitialiseNewTask+0x144>)
 8008254:	65da      	str	r2, [r3, #92]	; 0x5c
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	4a0b      	ldr	r2, [pc, #44]	; (8008288 <prvInitialiseNewTask+0x148>)
 800825a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	69b8      	ldr	r0, [r7, #24]
 8008262:	f001 fa4f 	bl	8009704 <pxPortInitialiseStack>
 8008266:	4602      	mov	r2, r0
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008276:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008278:	bf00      	nop
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	20004700 	.word	0x20004700
 8008284:	20004768 	.word	0x20004768
 8008288:	200047d0 	.word	0x200047d0

0800828c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008294:	f001 fb66 	bl	8009964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008298:	4b2d      	ldr	r3, [pc, #180]	; (8008350 <prvAddNewTaskToReadyList+0xc4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	4a2c      	ldr	r2, [pc, #176]	; (8008350 <prvAddNewTaskToReadyList+0xc4>)
 80082a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082a2:	4b2c      	ldr	r3, [pc, #176]	; (8008354 <prvAddNewTaskToReadyList+0xc8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082aa:	4a2a      	ldr	r2, [pc, #168]	; (8008354 <prvAddNewTaskToReadyList+0xc8>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082b0:	4b27      	ldr	r3, [pc, #156]	; (8008350 <prvAddNewTaskToReadyList+0xc4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d110      	bne.n	80082da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082b8:	f000 fc26 	bl	8008b08 <prvInitialiseTaskLists>
 80082bc:	e00d      	b.n	80082da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082be:	4b26      	ldr	r3, [pc, #152]	; (8008358 <prvAddNewTaskToReadyList+0xcc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082c6:	4b23      	ldr	r3, [pc, #140]	; (8008354 <prvAddNewTaskToReadyList+0xc8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d802      	bhi.n	80082da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082d4:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <prvAddNewTaskToReadyList+0xc8>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082da:	4b20      	ldr	r3, [pc, #128]	; (800835c <prvAddNewTaskToReadyList+0xd0>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3301      	adds	r3, #1
 80082e0:	4a1e      	ldr	r2, [pc, #120]	; (800835c <prvAddNewTaskToReadyList+0xd0>)
 80082e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80082e4:	4b1d      	ldr	r3, [pc, #116]	; (800835c <prvAddNewTaskToReadyList+0xd0>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <prvAddNewTaskToReadyList+0xd4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d903      	bls.n	8008300 <prvAddNewTaskToReadyList+0x74>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	4a18      	ldr	r2, [pc, #96]	; (8008360 <prvAddNewTaskToReadyList+0xd4>)
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a15      	ldr	r2, [pc, #84]	; (8008364 <prvAddNewTaskToReadyList+0xd8>)
 800830e:	441a      	add	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe fe2d 	bl	8006f76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800831c:	f001 fb52 	bl	80099c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <prvAddNewTaskToReadyList+0xcc>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00e      	beq.n	8008346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <prvAddNewTaskToReadyList+0xc8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008332:	429a      	cmp	r2, r3
 8008334:	d207      	bcs.n	8008346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008336:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <prvAddNewTaskToReadyList+0xdc>)
 8008338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20002250 	.word	0x20002250
 8008354:	20001d7c 	.word	0x20001d7c
 8008358:	2000225c 	.word	0x2000225c
 800835c:	2000226c 	.word	0x2000226c
 8008360:	20002258 	.word	0x20002258
 8008364:	20001d80 	.word	0x20001d80
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <vTaskDelay+0x60>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <vTaskDelay+0x30>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800839c:	f000 f88a 	bl	80084b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fe0c 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083a8:	f000 f892 	bl	80084d0 <xTaskResumeAll>
 80083ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d107      	bne.n	80083c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <vTaskDelay+0x64>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20002278 	.word	0x20002278
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08a      	sub	sp, #40	; 0x28
 80083d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083e2:	463a      	mov	r2, r7
 80083e4:	1d39      	adds	r1, r7, #4
 80083e6:	f107 0308 	add.w	r3, r7, #8
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe fd62 	bl	8006eb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	9202      	str	r2, [sp, #8]
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	2300      	movs	r3, #0
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	460a      	mov	r2, r1
 8008402:	4924      	ldr	r1, [pc, #144]	; (8008494 <vTaskStartScheduler+0xc0>)
 8008404:	4824      	ldr	r0, [pc, #144]	; (8008498 <vTaskStartScheduler+0xc4>)
 8008406:	f7ff fdf9 	bl	8007ffc <xTaskCreateStatic>
 800840a:	4603      	mov	r3, r0
 800840c:	4a23      	ldr	r2, [pc, #140]	; (800849c <vTaskStartScheduler+0xc8>)
 800840e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008410:	4b22      	ldr	r3, [pc, #136]	; (800849c <vTaskStartScheduler+0xc8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008418:	2301      	movs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
 800841c:	e001      	b.n	8008422 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800841e:	2300      	movs	r3, #0
 8008420:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d102      	bne.n	800842e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008428:	f000 fe1e 	bl	8009068 <xTimerCreateTimerTask>
 800842c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d11b      	bne.n	800846c <vTaskStartScheduler+0x98>
	__asm volatile
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	613b      	str	r3, [r7, #16]
}
 8008446:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <vTaskStartScheduler+0xcc>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3354      	adds	r3, #84	; 0x54
 800844e:	4a15      	ldr	r2, [pc, #84]	; (80084a4 <vTaskStartScheduler+0xd0>)
 8008450:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008452:	4b15      	ldr	r3, [pc, #84]	; (80084a8 <vTaskStartScheduler+0xd4>)
 8008454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008458:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800845a:	4b14      	ldr	r3, [pc, #80]	; (80084ac <vTaskStartScheduler+0xd8>)
 800845c:	2201      	movs	r2, #1
 800845e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008460:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <vTaskStartScheduler+0xdc>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008466:	f001 f9db 	bl	8009820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800846a:	e00e      	b.n	800848a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008472:	d10a      	bne.n	800848a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vTaskStartScheduler+0xb4>
}
 800848a:	bf00      	nop
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	0800fd80 	.word	0x0800fd80
 8008498:	08008ad9 	.word	0x08008ad9
 800849c:	20002274 	.word	0x20002274
 80084a0:	20001d7c 	.word	0x20001d7c
 80084a4:	200005d8 	.word	0x200005d8
 80084a8:	20002270 	.word	0x20002270
 80084ac:	2000225c 	.word	0x2000225c
 80084b0:	20002254 	.word	0x20002254

080084b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80084b8:	4b04      	ldr	r3, [pc, #16]	; (80084cc <vTaskSuspendAll+0x18>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	4a03      	ldr	r2, [pc, #12]	; (80084cc <vTaskSuspendAll+0x18>)
 80084c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80084c2:	bf00      	nop
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	20002278 	.word	0x20002278

080084d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084da:	2300      	movs	r3, #0
 80084dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084de:	4b42      	ldr	r3, [pc, #264]	; (80085e8 <xTaskResumeAll+0x118>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <xTaskResumeAll+0x2c>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	603b      	str	r3, [r7, #0]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084fc:	f001 fa32 	bl	8009964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008500:	4b39      	ldr	r3, [pc, #228]	; (80085e8 <xTaskResumeAll+0x118>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3b01      	subs	r3, #1
 8008506:	4a38      	ldr	r2, [pc, #224]	; (80085e8 <xTaskResumeAll+0x118>)
 8008508:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800850a:	4b37      	ldr	r3, [pc, #220]	; (80085e8 <xTaskResumeAll+0x118>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d162      	bne.n	80085d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008512:	4b36      	ldr	r3, [pc, #216]	; (80085ec <xTaskResumeAll+0x11c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05e      	beq.n	80085d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800851a:	e02f      	b.n	800857c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851c:	4b34      	ldr	r3, [pc, #208]	; (80085f0 <xTaskResumeAll+0x120>)
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3318      	adds	r3, #24
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fd81 	bl	8007030 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3304      	adds	r3, #4
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fd7c 	bl	8007030 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	4b2d      	ldr	r3, [pc, #180]	; (80085f4 <xTaskResumeAll+0x124>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d903      	bls.n	800854c <xTaskResumeAll+0x7c>
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <xTaskResumeAll+0x124>)
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4a27      	ldr	r2, [pc, #156]	; (80085f8 <xTaskResumeAll+0x128>)
 800855a:	441a      	add	r2, r3
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3304      	adds	r3, #4
 8008560:	4619      	mov	r1, r3
 8008562:	4610      	mov	r0, r2
 8008564:	f7fe fd07 	bl	8006f76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b23      	ldr	r3, [pc, #140]	; (80085fc <xTaskResumeAll+0x12c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d302      	bcc.n	800857c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008576:	4b22      	ldr	r3, [pc, #136]	; (8008600 <xTaskResumeAll+0x130>)
 8008578:	2201      	movs	r2, #1
 800857a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800857c:	4b1c      	ldr	r3, [pc, #112]	; (80085f0 <xTaskResumeAll+0x120>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1cb      	bne.n	800851c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800858a:	f000 fb5f 	bl	8008c4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <xTaskResumeAll+0x134>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800859a:	f000 f847 	bl	800862c <xTaskIncrementTick>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <xTaskResumeAll+0x130>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f1      	bne.n	800859a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <xTaskResumeAll+0x134>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085bc:	4b10      	ldr	r3, [pc, #64]	; (8008600 <xTaskResumeAll+0x130>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d009      	beq.n	80085d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085c4:	2301      	movs	r3, #1
 80085c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <xTaskResumeAll+0x138>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085d8:	f001 f9f4 	bl	80099c4 <vPortExitCritical>

	return xAlreadyYielded;
 80085dc:	68bb      	ldr	r3, [r7, #8]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20002278 	.word	0x20002278
 80085ec:	20002250 	.word	0x20002250
 80085f0:	20002210 	.word	0x20002210
 80085f4:	20002258 	.word	0x20002258
 80085f8:	20001d80 	.word	0x20001d80
 80085fc:	20001d7c 	.word	0x20001d7c
 8008600:	20002264 	.word	0x20002264
 8008604:	20002260 	.word	0x20002260
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <xTaskGetTickCount+0x1c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008618:	687b      	ldr	r3, [r7, #4]
}
 800861a:	4618      	mov	r0, r3
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20002254 	.word	0x20002254

0800862c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008636:	4b4f      	ldr	r3, [pc, #316]	; (8008774 <xTaskIncrementTick+0x148>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 808f 	bne.w	800875e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <xTaskIncrementTick+0x14c>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008648:	4a4b      	ldr	r2, [pc, #300]	; (8008778 <xTaskIncrementTick+0x14c>)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d120      	bne.n	8008696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008654:	4b49      	ldr	r3, [pc, #292]	; (800877c <xTaskIncrementTick+0x150>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <xTaskIncrementTick+0x48>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	603b      	str	r3, [r7, #0]
}
 8008670:	bf00      	nop
 8008672:	e7fe      	b.n	8008672 <xTaskIncrementTick+0x46>
 8008674:	4b41      	ldr	r3, [pc, #260]	; (800877c <xTaskIncrementTick+0x150>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <xTaskIncrementTick+0x154>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a3f      	ldr	r2, [pc, #252]	; (800877c <xTaskIncrementTick+0x150>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	4a3f      	ldr	r2, [pc, #252]	; (8008780 <xTaskIncrementTick+0x154>)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4b3e      	ldr	r3, [pc, #248]	; (8008784 <xTaskIncrementTick+0x158>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	4a3d      	ldr	r2, [pc, #244]	; (8008784 <xTaskIncrementTick+0x158>)
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	f000 fadb 	bl	8008c4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008696:	4b3c      	ldr	r3, [pc, #240]	; (8008788 <xTaskIncrementTick+0x15c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	429a      	cmp	r2, r3
 800869e:	d349      	bcc.n	8008734 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a0:	4b36      	ldr	r3, [pc, #216]	; (800877c <xTaskIncrementTick+0x150>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086aa:	4b37      	ldr	r3, [pc, #220]	; (8008788 <xTaskIncrementTick+0x15c>)
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086b0:	601a      	str	r2, [r3, #0]
					break;
 80086b2:	e03f      	b.n	8008734 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b4:	4b31      	ldr	r3, [pc, #196]	; (800877c <xTaskIncrementTick+0x150>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d203      	bcs.n	80086d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086cc:	4a2e      	ldr	r2, [pc, #184]	; (8008788 <xTaskIncrementTick+0x15c>)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086d2:	e02f      	b.n	8008734 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fca9 	bl	8007030 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3318      	adds	r3, #24
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fca0 	bl	8007030 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f4:	4b25      	ldr	r3, [pc, #148]	; (800878c <xTaskIncrementTick+0x160>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d903      	bls.n	8008704 <xTaskIncrementTick+0xd8>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008700:	4a22      	ldr	r2, [pc, #136]	; (800878c <xTaskIncrementTick+0x160>)
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4a1f      	ldr	r2, [pc, #124]	; (8008790 <xTaskIncrementTick+0x164>)
 8008712:	441a      	add	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3304      	adds	r3, #4
 8008718:	4619      	mov	r1, r3
 800871a:	4610      	mov	r0, r2
 800871c:	f7fe fc2b 	bl	8006f76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008724:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <xTaskIncrementTick+0x168>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	429a      	cmp	r2, r3
 800872c:	d3b8      	bcc.n	80086a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800872e:	2301      	movs	r3, #1
 8008730:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008732:	e7b5      	b.n	80086a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008734:	4b17      	ldr	r3, [pc, #92]	; (8008794 <xTaskIncrementTick+0x168>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	4915      	ldr	r1, [pc, #84]	; (8008790 <xTaskIncrementTick+0x164>)
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d901      	bls.n	8008750 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008750:	4b11      	ldr	r3, [pc, #68]	; (8008798 <xTaskIncrementTick+0x16c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	617b      	str	r3, [r7, #20]
 800875c:	e004      	b.n	8008768 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800875e:	4b0f      	ldr	r3, [pc, #60]	; (800879c <xTaskIncrementTick+0x170>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3301      	adds	r3, #1
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <xTaskIncrementTick+0x170>)
 8008766:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008768:	697b      	ldr	r3, [r7, #20]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20002278 	.word	0x20002278
 8008778:	20002254 	.word	0x20002254
 800877c:	20002208 	.word	0x20002208
 8008780:	2000220c 	.word	0x2000220c
 8008784:	20002268 	.word	0x20002268
 8008788:	20002270 	.word	0x20002270
 800878c:	20002258 	.word	0x20002258
 8008790:	20001d80 	.word	0x20001d80
 8008794:	20001d7c 	.word	0x20001d7c
 8008798:	20002264 	.word	0x20002264
 800879c:	20002260 	.word	0x20002260

080087a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087a6:	4b2a      	ldr	r3, [pc, #168]	; (8008850 <vTaskSwitchContext+0xb0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087ae:	4b29      	ldr	r3, [pc, #164]	; (8008854 <vTaskSwitchContext+0xb4>)
 80087b0:	2201      	movs	r2, #1
 80087b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087b4:	e046      	b.n	8008844 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80087b6:	4b27      	ldr	r3, [pc, #156]	; (8008854 <vTaskSwitchContext+0xb4>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087bc:	4b26      	ldr	r3, [pc, #152]	; (8008858 <vTaskSwitchContext+0xb8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60fb      	str	r3, [r7, #12]
 80087c2:	e010      	b.n	80087e6 <vTaskSwitchContext+0x46>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <vTaskSwitchContext+0x3e>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	491d      	ldr	r1, [pc, #116]	; (800885c <vTaskSwitchContext+0xbc>)
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0e4      	beq.n	80087c4 <vTaskSwitchContext+0x24>
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4613      	mov	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <vTaskSwitchContext+0xbc>)
 8008806:	4413      	add	r3, r2
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	605a      	str	r2, [r3, #4]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3308      	adds	r3, #8
 800881c:	429a      	cmp	r2, r3
 800881e:	d104      	bne.n	800882a <vTaskSwitchContext+0x8a>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	605a      	str	r2, [r3, #4]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4a0b      	ldr	r2, [pc, #44]	; (8008860 <vTaskSwitchContext+0xc0>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	4a08      	ldr	r2, [pc, #32]	; (8008858 <vTaskSwitchContext+0xb8>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800883a:	4b09      	ldr	r3, [pc, #36]	; (8008860 <vTaskSwitchContext+0xc0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3354      	adds	r3, #84	; 0x54
 8008840:	4a08      	ldr	r2, [pc, #32]	; (8008864 <vTaskSwitchContext+0xc4>)
 8008842:	6013      	str	r3, [r2, #0]
}
 8008844:	bf00      	nop
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	20002278 	.word	0x20002278
 8008854:	20002264 	.word	0x20002264
 8008858:	20002258 	.word	0x20002258
 800885c:	20001d80 	.word	0x20001d80
 8008860:	20001d7c 	.word	0x20001d7c
 8008864:	200005d8 	.word	0x200005d8

08008868 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10a      	bne.n	800888e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	60fb      	str	r3, [r7, #12]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <vTaskPlaceOnEventList+0x44>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3318      	adds	r3, #24
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe fb91 	bl	8006fbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800889c:	2101      	movs	r1, #1
 800889e:	6838      	ldr	r0, [r7, #0]
 80088a0:	f000 fb8e 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
}
 80088a4:	bf00      	nop
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20001d7c 	.word	0x20001d7c

080088b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80088d8:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <vTaskPlaceOnEventListRestricted+0x54>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3318      	adds	r3, #24
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7fe fb48 	bl	8006f76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80088ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088f2:	6879      	ldr	r1, [r7, #4]
 80088f4:	68b8      	ldr	r0, [r7, #8]
 80088f6:	f000 fb63 	bl	8008fc0 <prvAddCurrentTaskToDelayedList>
	}
 80088fa:	bf00      	nop
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20001d7c 	.word	0x20001d7c

08008908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	60fb      	str	r3, [r7, #12]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3318      	adds	r3, #24
 8008938:	4618      	mov	r0, r3
 800893a:	f7fe fb79 	bl	8007030 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893e:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <xTaskRemoveFromEventList+0xb0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11d      	bne.n	8008982 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	3304      	adds	r3, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fb70 	bl	8007030 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4b19      	ldr	r3, [pc, #100]	; (80089bc <xTaskRemoveFromEventList+0xb4>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d903      	bls.n	8008964 <xTaskRemoveFromEventList+0x5c>
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	4a16      	ldr	r2, [pc, #88]	; (80089bc <xTaskRemoveFromEventList+0xb4>)
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a13      	ldr	r2, [pc, #76]	; (80089c0 <xTaskRemoveFromEventList+0xb8>)
 8008972:	441a      	add	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f7fe fafb 	bl	8006f76 <vListInsertEnd>
 8008980:	e005      	b.n	800898e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	3318      	adds	r3, #24
 8008986:	4619      	mov	r1, r3
 8008988:	480e      	ldr	r0, [pc, #56]	; (80089c4 <xTaskRemoveFromEventList+0xbc>)
 800898a:	f7fe faf4 	bl	8006f76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <xTaskRemoveFromEventList+0xc0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	429a      	cmp	r2, r3
 800899a:	d905      	bls.n	80089a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089a0:	4b0a      	ldr	r3, [pc, #40]	; (80089cc <xTaskRemoveFromEventList+0xc4>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	e001      	b.n	80089ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80089ac:	697b      	ldr	r3, [r7, #20]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	20002278 	.word	0x20002278
 80089bc:	20002258 	.word	0x20002258
 80089c0:	20001d80 	.word	0x20001d80
 80089c4:	20002210 	.word	0x20002210
 80089c8:	20001d7c 	.word	0x20001d7c
 80089cc:	20002264 	.word	0x20002264

080089d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <vTaskInternalSetTimeOutState+0x24>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80089e0:	4b05      	ldr	r3, [pc, #20]	; (80089f8 <vTaskInternalSetTimeOutState+0x28>)
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	20002268 	.word	0x20002268
 80089f8:	20002254 	.word	0x20002254

080089fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	613b      	str	r3, [r7, #16]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	60fb      	str	r3, [r7, #12]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008a3e:	f000 ff91 	bl	8009964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a42:	4b1d      	ldr	r3, [pc, #116]	; (8008ab8 <xTaskCheckForTimeOut+0xbc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a5a:	d102      	bne.n	8008a62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	61fb      	str	r3, [r7, #28]
 8008a60:	e023      	b.n	8008aaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <xTaskCheckForTimeOut+0xc0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d007      	beq.n	8008a7e <xTaskCheckForTimeOut+0x82>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d302      	bcc.n	8008a7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	e015      	b.n	8008aaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d20b      	bcs.n	8008aa0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ff9b 	bl	80089d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	e004      	b.n	8008aaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008aaa:	f000 ff8b 	bl	80099c4 <vPortExitCritical>

	return xReturn;
 8008aae:	69fb      	ldr	r3, [r7, #28]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3720      	adds	r7, #32
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20002254 	.word	0x20002254
 8008abc:	20002268 	.word	0x20002268

08008ac0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ac4:	4b03      	ldr	r3, [pc, #12]	; (8008ad4 <vTaskMissedYield+0x14>)
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
}
 8008aca:	bf00      	nop
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20002264 	.word	0x20002264

08008ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ae0:	f000 f852 	bl	8008b88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <prvIdleTask+0x28>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d9f9      	bls.n	8008ae0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <prvIdleTask+0x2c>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008afc:	e7f0      	b.n	8008ae0 <prvIdleTask+0x8>
 8008afe:	bf00      	nop
 8008b00:	20001d80 	.word	0x20001d80
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b0e:	2300      	movs	r3, #0
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	e00c      	b.n	8008b2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4a12      	ldr	r2, [pc, #72]	; (8008b68 <prvInitialiseTaskLists+0x60>)
 8008b20:	4413      	add	r3, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe f9fa 	bl	8006f1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	607b      	str	r3, [r7, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b37      	cmp	r3, #55	; 0x37
 8008b32:	d9ef      	bls.n	8008b14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b34:	480d      	ldr	r0, [pc, #52]	; (8008b6c <prvInitialiseTaskLists+0x64>)
 8008b36:	f7fe f9f1 	bl	8006f1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b3a:	480d      	ldr	r0, [pc, #52]	; (8008b70 <prvInitialiseTaskLists+0x68>)
 8008b3c:	f7fe f9ee 	bl	8006f1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b40:	480c      	ldr	r0, [pc, #48]	; (8008b74 <prvInitialiseTaskLists+0x6c>)
 8008b42:	f7fe f9eb 	bl	8006f1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b46:	480c      	ldr	r0, [pc, #48]	; (8008b78 <prvInitialiseTaskLists+0x70>)
 8008b48:	f7fe f9e8 	bl	8006f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b4c:	480b      	ldr	r0, [pc, #44]	; (8008b7c <prvInitialiseTaskLists+0x74>)
 8008b4e:	f7fe f9e5 	bl	8006f1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b52:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <prvInitialiseTaskLists+0x78>)
 8008b54:	4a05      	ldr	r2, [pc, #20]	; (8008b6c <prvInitialiseTaskLists+0x64>)
 8008b56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <prvInitialiseTaskLists+0x7c>)
 8008b5a:	4a05      	ldr	r2, [pc, #20]	; (8008b70 <prvInitialiseTaskLists+0x68>)
 8008b5c:	601a      	str	r2, [r3, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20001d80 	.word	0x20001d80
 8008b6c:	200021e0 	.word	0x200021e0
 8008b70:	200021f4 	.word	0x200021f4
 8008b74:	20002210 	.word	0x20002210
 8008b78:	20002224 	.word	0x20002224
 8008b7c:	2000223c 	.word	0x2000223c
 8008b80:	20002208 	.word	0x20002208
 8008b84:	2000220c 	.word	0x2000220c

08008b88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b8e:	e019      	b.n	8008bc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b90:	f000 fee8 	bl	8009964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <prvCheckTasksWaitingTermination+0x50>)
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fa45 	bl	8007030 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <prvCheckTasksWaitingTermination+0x54>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4a0b      	ldr	r2, [pc, #44]	; (8008bdc <prvCheckTasksWaitingTermination+0x54>)
 8008bae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <prvCheckTasksWaitingTermination+0x58>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <prvCheckTasksWaitingTermination+0x58>)
 8008bb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008bba:	f000 ff03 	bl	80099c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f810 	bl	8008be4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <prvCheckTasksWaitingTermination+0x58>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e1      	bne.n	8008b90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	20002224 	.word	0x20002224
 8008bdc:	20002250 	.word	0x20002250
 8008be0:	20002238 	.word	0x20002238

08008be4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3354      	adds	r3, #84	; 0x54
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f003 f919 	bl	800be28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d108      	bne.n	8008c12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	4618      	mov	r0, r3
 8008c06:	f001 f89b 	bl	8009d40 <vPortFree>
				vPortFree( pxTCB );
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f898 	bl	8009d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c10:	e018      	b.n	8008c44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d103      	bne.n	8008c24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f88f 	bl	8009d40 <vPortFree>
	}
 8008c22:	e00f      	b.n	8008c44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d00a      	beq.n	8008c44 <prvDeleteTCB+0x60>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60fb      	str	r3, [r7, #12]
}
 8008c40:	bf00      	nop
 8008c42:	e7fe      	b.n	8008c42 <prvDeleteTCB+0x5e>
	}
 8008c44:	bf00      	nop
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c52:	4b0c      	ldr	r3, [pc, #48]	; (8008c84 <prvResetNextTaskUnblockTime+0x38>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <prvResetNextTaskUnblockTime+0x3c>)
 8008c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c64:	e008      	b.n	8008c78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c66:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <prvResetNextTaskUnblockTime+0x38>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	4a04      	ldr	r2, [pc, #16]	; (8008c88 <prvResetNextTaskUnblockTime+0x3c>)
 8008c76:	6013      	str	r3, [r2, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	20002208 	.word	0x20002208
 8008c88:	20002270 	.word	0x20002270

08008c8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008c92:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008c98:	687b      	ldr	r3, [r7, #4]
	}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	20001d7c 	.word	0x20001d7c

08008cac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ce0 <xTaskGetSchedulerState+0x34>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	607b      	str	r3, [r7, #4]
 8008cbe:	e008      	b.n	8008cd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc0:	4b08      	ldr	r3, [pc, #32]	; (8008ce4 <xTaskGetSchedulerState+0x38>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	607b      	str	r3, [r7, #4]
 8008ccc:	e001      	b.n	8008cd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cd2:	687b      	ldr	r3, [r7, #4]
	}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	2000225c 	.word	0x2000225c
 8008ce4:	20002278 	.word	0x20002278

08008ce8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d051      	beq.n	8008da2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d02:	4b2a      	ldr	r3, [pc, #168]	; (8008dac <xTaskPriorityInherit+0xc4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d241      	bcs.n	8008d90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	db06      	blt.n	8008d22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d14:	4b25      	ldr	r3, [pc, #148]	; (8008dac <xTaskPriorityInherit+0xc4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6959      	ldr	r1, [r3, #20]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4a1f      	ldr	r2, [pc, #124]	; (8008db0 <xTaskPriorityInherit+0xc8>)
 8008d34:	4413      	add	r3, r2
 8008d36:	4299      	cmp	r1, r3
 8008d38:	d122      	bne.n	8008d80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fe f976 	bl	8007030 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <xTaskPriorityInherit+0xc4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d52:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <xTaskPriorityInherit+0xcc>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d903      	bls.n	8008d62 <xTaskPriorityInherit+0x7a>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	4a15      	ldr	r2, [pc, #84]	; (8008db4 <xTaskPriorityInherit+0xcc>)
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <xTaskPriorityInherit+0xc8>)
 8008d70:	441a      	add	r2, r3
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7fe f8fc 	bl	8006f76 <vListInsertEnd>
 8008d7e:	e004      	b.n	8008d8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d80:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <xTaskPriorityInherit+0xc4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e008      	b.n	8008da2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d94:	4b05      	ldr	r3, [pc, #20]	; (8008dac <xTaskPriorityInherit+0xc4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d201      	bcs.n	8008da2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008da2:	68fb      	ldr	r3, [r7, #12]
	}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20001d7c 	.word	0x20001d7c
 8008db0:	20001d80 	.word	0x20001d80
 8008db4:	20002258 	.word	0x20002258

08008db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d056      	beq.n	8008e7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008dce:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <xTaskPriorityDisinherit+0xd0>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d00a      	beq.n	8008dee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	60fb      	str	r3, [r7, #12]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	60bb      	str	r3, [r7, #8]
}
 8008e08:	bf00      	nop
 8008e0a:	e7fe      	b.n	8008e0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e10:	1e5a      	subs	r2, r3, #1
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d02c      	beq.n	8008e7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d128      	bne.n	8008e7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe f8fe 	bl	8007030 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4c:	4b0f      	ldr	r3, [pc, #60]	; (8008e8c <xTaskPriorityDisinherit+0xd4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <xTaskPriorityDisinherit+0xa4>
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	4a0c      	ldr	r2, [pc, #48]	; (8008e8c <xTaskPriorityDisinherit+0xd4>)
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4a09      	ldr	r2, [pc, #36]	; (8008e90 <xTaskPriorityDisinherit+0xd8>)
 8008e6a:	441a      	add	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f7fe f87f 	bl	8006f76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e7c:	697b      	ldr	r3, [r7, #20]
	}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20001d7c 	.word	0x20001d7c
 8008e8c:	20002258 	.word	0x20002258
 8008e90:	20001d80 	.word	0x20001d80

08008e94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d06a      	beq.n	8008f82 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	60fb      	str	r3, [r7, #12]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d902      	bls.n	8008eda <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	61fb      	str	r3, [r7, #28]
 8008ed8:	e002      	b.n	8008ee0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ede:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d04b      	beq.n	8008f82 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d146      	bne.n	8008f82 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d10a      	bne.n	8008f14 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	60bb      	str	r3, [r7, #8]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	69fa      	ldr	r2, [r7, #28]
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	db04      	blt.n	8008f32 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	6959      	ldr	r1, [r3, #20]
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4a13      	ldr	r2, [pc, #76]	; (8008f90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f42:	4413      	add	r3, r2
 8008f44:	4299      	cmp	r1, r3
 8008f46:	d11c      	bne.n	8008f82 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe f86f 	bl	8007030 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d903      	bls.n	8008f66 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4a07      	ldr	r2, [pc, #28]	; (8008f90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008f74:	441a      	add	r2, r3
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	3304      	adds	r3, #4
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	f7fd fffa 	bl	8006f76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f82:	bf00      	nop
 8008f84:	3720      	adds	r7, #32
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20001d7c 	.word	0x20001d7c
 8008f90:	20001d80 	.word	0x20001d80
 8008f94:	20002258 	.word	0x20002258

08008f98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d004      	beq.n	8008fae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008faa:	3201      	adds	r2, #1
 8008fac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008fae:	4b03      	ldr	r3, [pc, #12]	; (8008fbc <pvTaskIncrementMutexHeldCount+0x24>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
	}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	20001d7c 	.word	0x20001d7c

08008fc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <prvAddCurrentTaskToDelayedList+0x90>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fd0:	4b20      	ldr	r3, [pc, #128]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f82a 	bl	8007030 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe2:	d10a      	bne.n	8008ffa <prvAddCurrentTaskToDelayedList+0x3a>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fea:	4b1a      	ldr	r3, [pc, #104]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4819      	ldr	r0, [pc, #100]	; (8009058 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ff4:	f7fd ffbf 	bl	8006f76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ff8:	e026      	b.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4413      	add	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009002:	4b14      	ldr	r3, [pc, #80]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	429a      	cmp	r2, r3
 8009010:	d209      	bcs.n	8009026 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009012:	4b12      	ldr	r3, [pc, #72]	; (800905c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fd ffcd 	bl	8006fbe <vListInsert>
}
 8009024:	e010      	b.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009026:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b0a      	ldr	r3, [pc, #40]	; (8009054 <prvAddCurrentTaskToDelayedList+0x94>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3304      	adds	r3, #4
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f7fd ffc3 	bl	8006fbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	429a      	cmp	r2, r3
 8009040:	d202      	bcs.n	8009048 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009042:	4a08      	ldr	r2, [pc, #32]	; (8009064 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6013      	str	r3, [r2, #0]
}
 8009048:	bf00      	nop
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	20002254 	.word	0x20002254
 8009054:	20001d7c 	.word	0x20001d7c
 8009058:	2000223c 	.word	0x2000223c
 800905c:	2000220c 	.word	0x2000220c
 8009060:	20002208 	.word	0x20002208
 8009064:	20002270 	.word	0x20002270

08009068 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800906e:	2300      	movs	r3, #0
 8009070:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009072:	f000 fb07 	bl	8009684 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009076:	4b1c      	ldr	r3, [pc, #112]	; (80090e8 <xTimerCreateTimerTask+0x80>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d021      	beq.n	80090c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009086:	1d3a      	adds	r2, r7, #4
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	f107 030c 	add.w	r3, r7, #12
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd ff29 	bl	8006ee8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	9202      	str	r2, [sp, #8]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	2302      	movs	r3, #2
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	2300      	movs	r3, #0
 80090a6:	460a      	mov	r2, r1
 80090a8:	4910      	ldr	r1, [pc, #64]	; (80090ec <xTimerCreateTimerTask+0x84>)
 80090aa:	4811      	ldr	r0, [pc, #68]	; (80090f0 <xTimerCreateTimerTask+0x88>)
 80090ac:	f7fe ffa6 	bl	8007ffc <xTaskCreateStatic>
 80090b0:	4603      	mov	r3, r0
 80090b2:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <xTimerCreateTimerTask+0x8c>)
 80090b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80090b6:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <xTimerCreateTimerTask+0x8c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80090be:	2301      	movs	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	613b      	str	r3, [r7, #16]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80090de:	697b      	ldr	r3, [r7, #20]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	200022ac 	.word	0x200022ac
 80090ec:	0800fd88 	.word	0x0800fd88
 80090f0:	0800922d 	.word	0x0800922d
 80090f4:	200022b0 	.word	0x200022b0

080090f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009106:	2300      	movs	r3, #0
 8009108:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	623b      	str	r3, [r7, #32]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <xTimerGenericCommand+0x98>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d02a      	beq.n	8009184 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b05      	cmp	r3, #5
 800913e:	dc18      	bgt.n	8009172 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009140:	f7ff fdb4 	bl	8008cac <xTaskGetSchedulerState>
 8009144:	4603      	mov	r3, r0
 8009146:	2b02      	cmp	r3, #2
 8009148:	d109      	bne.n	800915e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800914a:	4b11      	ldr	r3, [pc, #68]	; (8009190 <xTimerGenericCommand+0x98>)
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f107 0110 	add.w	r1, r7, #16
 8009152:	2300      	movs	r3, #0
 8009154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009156:	f7fe f989 	bl	800746c <xQueueGenericSend>
 800915a:	6278      	str	r0, [r7, #36]	; 0x24
 800915c:	e012      	b.n	8009184 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800915e:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <xTimerGenericCommand+0x98>)
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	f107 0110 	add.w	r1, r7, #16
 8009166:	2300      	movs	r3, #0
 8009168:	2200      	movs	r2, #0
 800916a:	f7fe f97f 	bl	800746c <xQueueGenericSend>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24
 8009170:	e008      	b.n	8009184 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <xTimerGenericCommand+0x98>)
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	f107 0110 	add.w	r1, r7, #16
 800917a:	2300      	movs	r3, #0
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	f7fe fa73 	bl	8007668 <xQueueGenericSendFromISR>
 8009182:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009186:	4618      	mov	r0, r3
 8009188:	3728      	adds	r7, #40	; 0x28
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	200022ac 	.word	0x200022ac

08009194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af02      	add	r7, sp, #8
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b22      	ldr	r3, [pc, #136]	; (8009228 <prvProcessExpiredTimer+0x94>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd ff3f 	bl	8007030 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d022      	beq.n	8009206 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	699a      	ldr	r2, [r3, #24]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	18d1      	adds	r1, r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	6978      	ldr	r0, [r7, #20]
 80091ce:	f000 f8d1 	bl	8009374 <prvInsertTimerInActiveList>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01f      	beq.n	8009218 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091d8:	2300      	movs	r3, #0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2300      	movs	r3, #0
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	2100      	movs	r1, #0
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f7ff ff88 	bl	80090f8 <xTimerGenericCommand>
 80091e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d113      	bne.n	8009218 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800920c:	f023 0301 	bic.w	r3, r3, #1
 8009210:	b2da      	uxtb	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	6978      	ldr	r0, [r7, #20]
 800921e:	4798      	blx	r3
}
 8009220:	bf00      	nop
 8009222:	3718      	adds	r7, #24
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	200022a4 	.word	0x200022a4

0800922c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009234:	f107 0308 	add.w	r3, r7, #8
 8009238:	4618      	mov	r0, r3
 800923a:	f000 f857 	bl	80092ec <prvGetNextExpireTime>
 800923e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4619      	mov	r1, r3
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f803 	bl	8009250 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800924a:	f000 f8d5 	bl	80093f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800924e:	e7f1      	b.n	8009234 <prvTimerTask+0x8>

08009250 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800925a:	f7ff f92b 	bl	80084b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f866 	bl	8009334 <prvSampleTimeNow>
 8009268:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d130      	bne.n	80092d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <prvProcessTimerOrBlockTask+0x3c>
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	429a      	cmp	r2, r3
 800927c:	d806      	bhi.n	800928c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800927e:	f7ff f927 	bl	80084d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff85 	bl	8009194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800928a:	e024      	b.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d008      	beq.n	80092a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <prvProcessTimerOrBlockTask+0x90>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <prvProcessTimerOrBlockTask+0x50>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <prvProcessTimerOrBlockTask+0x52>
 80092a0:	2300      	movs	r3, #0
 80092a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <prvProcessTimerOrBlockTask+0x94>)
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	4619      	mov	r1, r3
 80092b2:	f7fe fe6f 	bl	8007f94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092b6:	f7ff f90b 	bl	80084d0 <xTaskResumeAll>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <prvProcessTimerOrBlockTask+0x98>)
 80092c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c6:	601a      	str	r2, [r3, #0]
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	f3bf 8f6f 	isb	sy
}
 80092d0:	e001      	b.n	80092d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092d2:	f7ff f8fd 	bl	80084d0 <xTaskResumeAll>
}
 80092d6:	bf00      	nop
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	200022a8 	.word	0x200022a8
 80092e4:	200022ac 	.word	0x200022ac
 80092e8:	e000ed04 	.word	0xe000ed04

080092ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092f4:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <prvGetNextExpireTime+0x44>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <prvGetNextExpireTime+0x16>
 80092fe:	2201      	movs	r2, #1
 8009300:	e000      	b.n	8009304 <prvGetNextExpireTime+0x18>
 8009302:	2200      	movs	r2, #0
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d105      	bne.n	800931c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <prvGetNextExpireTime+0x44>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e001      	b.n	8009320 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009320:	68fb      	ldr	r3, [r7, #12]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	200022a4 	.word	0x200022a4

08009334 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800933c:	f7ff f966 	bl	800860c <xTaskGetTickCount>
 8009340:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009342:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <prvSampleTimeNow+0x3c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	429a      	cmp	r2, r3
 800934a:	d205      	bcs.n	8009358 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800934c:	f000 f936 	bl	80095bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e002      	b.n	800935e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800935e:	4a04      	ldr	r2, [pc, #16]	; (8009370 <prvSampleTimeNow+0x3c>)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009364:	68fb      	ldr	r3, [r7, #12]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	200022b4 	.word	0x200022b4

08009374 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009382:	2300      	movs	r3, #0
 8009384:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d812      	bhi.n	80093c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	1ad2      	subs	r2, r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d302      	bcc.n	80093ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e01b      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80093ae:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <prvInsertTimerInActiveList+0x7c>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7fd fe00 	bl	8006fbe <vListInsert>
 80093be:	e012      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d206      	bcs.n	80093d6 <prvInsertTimerInActiveList+0x62>
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d302      	bcc.n	80093d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e007      	b.n	80093e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <prvInsertTimerInActiveList+0x80>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3304      	adds	r3, #4
 80093de:	4619      	mov	r1, r3
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fd fdec 	bl	8006fbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093e6:	697b      	ldr	r3, [r7, #20]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200022a8 	.word	0x200022a8
 80093f4:	200022a4 	.word	0x200022a4

080093f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08e      	sub	sp, #56	; 0x38
 80093fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093fe:	e0ca      	b.n	8009596 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	da18      	bge.n	8009438 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009406:	1d3b      	adds	r3, r7, #4
 8009408:	3304      	adds	r3, #4
 800940a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	61fb      	str	r3, [r7, #28]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800942e:	6850      	ldr	r0, [r2, #4]
 8009430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009432:	6892      	ldr	r2, [r2, #8]
 8009434:	4611      	mov	r1, r2
 8009436:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f2c0 80ab 	blt.w	8009596 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d004      	beq.n	8009456 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800944c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944e:	3304      	adds	r3, #4
 8009450:	4618      	mov	r0, r3
 8009452:	f7fd fded 	bl	8007030 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009456:	463b      	mov	r3, r7
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff ff6b 	bl	8009334 <prvSampleTimeNow>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b09      	cmp	r3, #9
 8009464:	f200 8096 	bhi.w	8009594 <prvProcessReceivedCommands+0x19c>
 8009468:	a201      	add	r2, pc, #4	; (adr r2, 8009470 <prvProcessReceivedCommands+0x78>)
 800946a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946e:	bf00      	nop
 8009470:	08009499 	.word	0x08009499
 8009474:	08009499 	.word	0x08009499
 8009478:	08009499 	.word	0x08009499
 800947c:	0800950d 	.word	0x0800950d
 8009480:	08009521 	.word	0x08009521
 8009484:	0800956b 	.word	0x0800956b
 8009488:	08009499 	.word	0x08009499
 800948c:	08009499 	.word	0x08009499
 8009490:	0800950d 	.word	0x0800950d
 8009494:	08009521 	.word	0x08009521
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800949e:	f043 0301 	orr.w	r3, r3, #1
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	18d1      	adds	r1, r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b8:	f7ff ff5c 	bl	8009374 <prvInsertTimerInActiveList>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d069      	beq.n	8009596 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d05e      	beq.n	8009596 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	441a      	add	r2, r3
 80094e0:	2300      	movs	r3, #0
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	2300      	movs	r3, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ea:	f7ff fe05 	bl	80090f8 <xTimerGenericCommand>
 80094ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d14f      	bne.n	8009596 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	61bb      	str	r3, [r7, #24]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800951e:	e03a      	b.n	8009596 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10a      	bne.n	8009556 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	617b      	str	r3, [r7, #20]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	699a      	ldr	r2, [r3, #24]
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	18d1      	adds	r1, r2, r3
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009564:	f7ff ff06 	bl	8009374 <prvInsertTimerInActiveList>
					break;
 8009568:	e015      	b.n	8009596 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d103      	bne.n	8009580 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800957a:	f000 fbe1 	bl	8009d40 <vPortFree>
 800957e:	e00a      	b.n	8009596 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009586:	f023 0301 	bic.w	r3, r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009592:	e000      	b.n	8009596 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009594:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009596:	4b08      	ldr	r3, [pc, #32]	; (80095b8 <prvProcessReceivedCommands+0x1c0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	1d39      	adds	r1, r7, #4
 800959c:	2200      	movs	r2, #0
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe f8fe 	bl	80077a0 <xQueueReceive>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f47f af2a 	bne.w	8009400 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	3730      	adds	r7, #48	; 0x30
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200022ac 	.word	0x200022ac

080095bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095c2:	e048      	b.n	8009656 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095c4:	4b2d      	ldr	r3, [pc, #180]	; (800967c <prvSwitchTimerLists+0xc0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ce:	4b2b      	ldr	r3, [pc, #172]	; (800967c <prvSwitchTimerLists+0xc0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3304      	adds	r3, #4
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fd fd27 	bl	8007030 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d02e      	beq.n	8009656 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	429a      	cmp	r2, r3
 8009608:	d90e      	bls.n	8009628 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009616:	4b19      	ldr	r3, [pc, #100]	; (800967c <prvSwitchTimerLists+0xc0>)
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3304      	adds	r3, #4
 800961e:	4619      	mov	r1, r3
 8009620:	4610      	mov	r0, r2
 8009622:	f7fd fccc 	bl	8006fbe <vListInsert>
 8009626:	e016      	b.n	8009656 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009628:	2300      	movs	r3, #0
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	2300      	movs	r3, #0
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	2100      	movs	r1, #0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f7ff fd60 	bl	80090f8 <xTimerGenericCommand>
 8009638:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	603b      	str	r3, [r7, #0]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <prvSwitchTimerLists+0xc0>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1b1      	bne.n	80095c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009660:	4b06      	ldr	r3, [pc, #24]	; (800967c <prvSwitchTimerLists+0xc0>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009666:	4b06      	ldr	r3, [pc, #24]	; (8009680 <prvSwitchTimerLists+0xc4>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a04      	ldr	r2, [pc, #16]	; (800967c <prvSwitchTimerLists+0xc0>)
 800966c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800966e:	4a04      	ldr	r2, [pc, #16]	; (8009680 <prvSwitchTimerLists+0xc4>)
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	6013      	str	r3, [r2, #0]
}
 8009674:	bf00      	nop
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	200022a4 	.word	0x200022a4
 8009680:	200022a8 	.word	0x200022a8

08009684 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800968a:	f000 f96b 	bl	8009964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800968e:	4b15      	ldr	r3, [pc, #84]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d120      	bne.n	80096d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009696:	4814      	ldr	r0, [pc, #80]	; (80096e8 <prvCheckForValidListAndQueue+0x64>)
 8009698:	f7fd fc40 	bl	8006f1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800969c:	4813      	ldr	r0, [pc, #76]	; (80096ec <prvCheckForValidListAndQueue+0x68>)
 800969e:	f7fd fc3d 	bl	8006f1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80096a2:	4b13      	ldr	r3, [pc, #76]	; (80096f0 <prvCheckForValidListAndQueue+0x6c>)
 80096a4:	4a10      	ldr	r2, [pc, #64]	; (80096e8 <prvCheckForValidListAndQueue+0x64>)
 80096a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096a8:	4b12      	ldr	r3, [pc, #72]	; (80096f4 <prvCheckForValidListAndQueue+0x70>)
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <prvCheckForValidListAndQueue+0x68>)
 80096ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096ae:	2300      	movs	r3, #0
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	4b11      	ldr	r3, [pc, #68]	; (80096f8 <prvCheckForValidListAndQueue+0x74>)
 80096b4:	4a11      	ldr	r2, [pc, #68]	; (80096fc <prvCheckForValidListAndQueue+0x78>)
 80096b6:	2110      	movs	r1, #16
 80096b8:	200a      	movs	r0, #10
 80096ba:	f7fd fd4b 	bl	8007154 <xQueueGenericCreateStatic>
 80096be:	4603      	mov	r3, r0
 80096c0:	4a08      	ldr	r2, [pc, #32]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <prvCheckForValidListAndQueue+0x60>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	490b      	ldr	r1, [pc, #44]	; (8009700 <prvCheckForValidListAndQueue+0x7c>)
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fc34 	bl	8007f40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d8:	f000 f974 	bl	80099c4 <vPortExitCritical>
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200022ac 	.word	0x200022ac
 80096e8:	2000227c 	.word	0x2000227c
 80096ec:	20002290 	.word	0x20002290
 80096f0:	200022a4 	.word	0x200022a4
 80096f4:	200022a8 	.word	0x200022a8
 80096f8:	20002358 	.word	0x20002358
 80096fc:	200022b8 	.word	0x200022b8
 8009700:	0800fd90 	.word	0x0800fd90

08009704 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3b04      	subs	r3, #4
 8009714:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800971c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	3b04      	subs	r3, #4
 8009722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b04      	subs	r3, #4
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009734:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <pxPortInitialiseStack+0x64>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b14      	subs	r3, #20
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3b04      	subs	r3, #4
 800974a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f06f 0202 	mvn.w	r2, #2
 8009752:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3b20      	subs	r3, #32
 8009758:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800975a:	68fb      	ldr	r3, [r7, #12]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	0800976d 	.word	0x0800976d

0800976c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009776:	4b12      	ldr	r3, [pc, #72]	; (80097c0 <prvTaskExitError+0x54>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800977e:	d00a      	beq.n	8009796 <prvTaskExitError+0x2a>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	60fb      	str	r3, [r7, #12]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <prvTaskExitError+0x28>
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
 80097a6:	60bb      	str	r3, [r7, #8]
}
 80097a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097aa:	bf00      	nop
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d0fc      	beq.n	80097ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	20000410 	.word	0x20000410
	...

080097d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <pxCurrentTCBConst2>)
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	6808      	ldr	r0, [r1, #0]
 80097d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097da:	f380 8809 	msr	PSP, r0
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f04f 0000 	mov.w	r0, #0
 80097e6:	f380 8811 	msr	BASEPRI, r0
 80097ea:	4770      	bx	lr
 80097ec:	f3af 8000 	nop.w

080097f0 <pxCurrentTCBConst2>:
 80097f0:	20001d7c 	.word	0x20001d7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop

080097f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097f8:	4808      	ldr	r0, [pc, #32]	; (800981c <prvPortStartFirstTask+0x24>)
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	6800      	ldr	r0, [r0, #0]
 80097fe:	f380 8808 	msr	MSP, r0
 8009802:	f04f 0000 	mov.w	r0, #0
 8009806:	f380 8814 	msr	CONTROL, r0
 800980a:	b662      	cpsie	i
 800980c:	b661      	cpsie	f
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	df00      	svc	0
 8009818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800981a:	bf00      	nop
 800981c:	e000ed08 	.word	0xe000ed08

08009820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009826:	4b46      	ldr	r3, [pc, #280]	; (8009940 <xPortStartScheduler+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a46      	ldr	r2, [pc, #280]	; (8009944 <xPortStartScheduler+0x124>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10a      	bne.n	8009846 <xPortStartScheduler+0x26>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	613b      	str	r3, [r7, #16]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009846:	4b3e      	ldr	r3, [pc, #248]	; (8009940 <xPortStartScheduler+0x120>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a3f      	ldr	r2, [pc, #252]	; (8009948 <xPortStartScheduler+0x128>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d10a      	bne.n	8009866 <xPortStartScheduler+0x46>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	60fb      	str	r3, [r7, #12]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009866:	4b39      	ldr	r3, [pc, #228]	; (800994c <xPortStartScheduler+0x12c>)
 8009868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	22ff      	movs	r2, #255	; 0xff
 8009876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009888:	b2da      	uxtb	r2, r3
 800988a:	4b31      	ldr	r3, [pc, #196]	; (8009950 <xPortStartScheduler+0x130>)
 800988c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800988e:	4b31      	ldr	r3, [pc, #196]	; (8009954 <xPortStartScheduler+0x134>)
 8009890:	2207      	movs	r2, #7
 8009892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009894:	e009      	b.n	80098aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009896:	4b2f      	ldr	r3, [pc, #188]	; (8009954 <xPortStartScheduler+0x134>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3b01      	subs	r3, #1
 800989c:	4a2d      	ldr	r2, [pc, #180]	; (8009954 <xPortStartScheduler+0x134>)
 800989e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	005b      	lsls	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b2:	2b80      	cmp	r3, #128	; 0x80
 80098b4:	d0ef      	beq.n	8009896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098b6:	4b27      	ldr	r3, [pc, #156]	; (8009954 <xPortStartScheduler+0x134>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f1c3 0307 	rsb	r3, r3, #7
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d00a      	beq.n	80098d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	60bb      	str	r3, [r7, #8]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098d8:	4b1e      	ldr	r3, [pc, #120]	; (8009954 <xPortStartScheduler+0x134>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	021b      	lsls	r3, r3, #8
 80098de:	4a1d      	ldr	r2, [pc, #116]	; (8009954 <xPortStartScheduler+0x134>)
 80098e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098e2:	4b1c      	ldr	r3, [pc, #112]	; (8009954 <xPortStartScheduler+0x134>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098ea:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <xPortStartScheduler+0x134>)
 80098ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098f6:	4b18      	ldr	r3, [pc, #96]	; (8009958 <xPortStartScheduler+0x138>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a17      	ldr	r2, [pc, #92]	; (8009958 <xPortStartScheduler+0x138>)
 80098fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009902:	4b15      	ldr	r3, [pc, #84]	; (8009958 <xPortStartScheduler+0x138>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a14      	ldr	r2, [pc, #80]	; (8009958 <xPortStartScheduler+0x138>)
 8009908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800990c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800990e:	f000 f8dd 	bl	8009acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009912:	4b12      	ldr	r3, [pc, #72]	; (800995c <xPortStartScheduler+0x13c>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009918:	f000 f8fc 	bl	8009b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800991c:	4b10      	ldr	r3, [pc, #64]	; (8009960 <xPortStartScheduler+0x140>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a0f      	ldr	r2, [pc, #60]	; (8009960 <xPortStartScheduler+0x140>)
 8009922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009928:	f7ff ff66 	bl	80097f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800992c:	f7fe ff38 	bl	80087a0 <vTaskSwitchContext>
	prvTaskExitError();
 8009930:	f7ff ff1c 	bl	800976c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	e000ed00 	.word	0xe000ed00
 8009944:	410fc271 	.word	0x410fc271
 8009948:	410fc270 	.word	0x410fc270
 800994c:	e000e400 	.word	0xe000e400
 8009950:	200023a8 	.word	0x200023a8
 8009954:	200023ac 	.word	0x200023ac
 8009958:	e000ed20 	.word	0xe000ed20
 800995c:	20000410 	.word	0x20000410
 8009960:	e000ef34 	.word	0xe000ef34

08009964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	607b      	str	r3, [r7, #4]
}
 800997c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <vPortEnterCritical+0x58>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	4a0d      	ldr	r2, [pc, #52]	; (80099bc <vPortEnterCritical+0x58>)
 8009986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009988:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <vPortEnterCritical+0x58>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d10f      	bne.n	80099b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009990:	4b0b      	ldr	r3, [pc, #44]	; (80099c0 <vPortEnterCritical+0x5c>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800999a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	603b      	str	r3, [r7, #0]
}
 80099ac:	bf00      	nop
 80099ae:	e7fe      	b.n	80099ae <vPortEnterCritical+0x4a>
	}
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	20000410 	.word	0x20000410
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <vPortExitCritical+0x50>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <vPortExitCritical+0x24>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	607b      	str	r3, [r7, #4]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <vPortExitCritical+0x50>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <vPortExitCritical+0x50>)
 80099f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099f2:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <vPortExitCritical+0x50>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <vPortExitCritical+0x42>
 80099fa:	2300      	movs	r3, #0
 80099fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	f383 8811 	msr	BASEPRI, r3
}
 8009a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a06:	bf00      	nop
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	20000410 	.word	0x20000410
	...

08009a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a20:	f3ef 8009 	mrs	r0, PSP
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	4b15      	ldr	r3, [pc, #84]	; (8009a80 <pxCurrentTCBConst>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	f01e 0f10 	tst.w	lr, #16
 8009a30:	bf08      	it	eq
 8009a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009a44:	f380 8811 	msr	BASEPRI, r0
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f7fe fea6 	bl	80087a0 <vTaskSwitchContext>
 8009a54:	f04f 0000 	mov.w	r0, #0
 8009a58:	f380 8811 	msr	BASEPRI, r0
 8009a5c:	bc09      	pop	{r0, r3}
 8009a5e:	6819      	ldr	r1, [r3, #0]
 8009a60:	6808      	ldr	r0, [r1, #0]
 8009a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a66:	f01e 0f10 	tst.w	lr, #16
 8009a6a:	bf08      	it	eq
 8009a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a70:	f380 8809 	msr	PSP, r0
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	f3af 8000 	nop.w

08009a80 <pxCurrentTCBConst>:
 8009a80:	20001d7c 	.word	0x20001d7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop

08009a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
}
 8009aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009aa2:	f7fe fdc3 	bl	800862c <xTaskIncrementTick>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <xPortSysTickHandler+0x40>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f383 8811 	msr	BASEPRI, r3
}
 8009abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <vPortSetupTimerInterrupt+0x38>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <vPortSetupTimerInterrupt+0x3c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a0a      	ldr	r2, [pc, #40]	; (8009b0c <vPortSetupTimerInterrupt+0x40>)
 8009ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae6:	099b      	lsrs	r3, r3, #6
 8009ae8:	4a09      	ldr	r2, [pc, #36]	; (8009b10 <vPortSetupTimerInterrupt+0x44>)
 8009aea:	3b01      	subs	r3, #1
 8009aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <vPortSetupTimerInterrupt+0x34>)
 8009af0:	2207      	movs	r2, #7
 8009af2:	601a      	str	r2, [r3, #0]
}
 8009af4:	bf00      	nop
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	e000e010 	.word	0xe000e010
 8009b04:	e000e018 	.word	0xe000e018
 8009b08:	20000404 	.word	0x20000404
 8009b0c:	10624dd3 	.word	0x10624dd3
 8009b10:	e000e014 	.word	0xe000e014

08009b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b24 <vPortEnableVFP+0x10>
 8009b18:	6801      	ldr	r1, [r0, #0]
 8009b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b1e:	6001      	str	r1, [r0, #0]
 8009b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b22:	bf00      	nop
 8009b24:	e000ed88 	.word	0xe000ed88

08009b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b2e:	f3ef 8305 	mrs	r3, IPSR
 8009b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b0f      	cmp	r3, #15
 8009b38:	d914      	bls.n	8009b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b3a:	4a17      	ldr	r2, [pc, #92]	; (8009b98 <vPortValidateInterruptPriority+0x70>)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b44:	4b15      	ldr	r3, [pc, #84]	; (8009b9c <vPortValidateInterruptPriority+0x74>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	7afa      	ldrb	r2, [r7, #11]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d20a      	bcs.n	8009b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	607b      	str	r3, [r7, #4]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <vPortValidateInterruptPriority+0x78>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <vPortValidateInterruptPriority+0x7c>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d90a      	bls.n	8009b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	603b      	str	r3, [r7, #0]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <vPortValidateInterruptPriority+0x60>
	}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	e000e3f0 	.word	0xe000e3f0
 8009b9c:	200023a8 	.word	0x200023a8
 8009ba0:	e000ed0c 	.word	0xe000ed0c
 8009ba4:	200023ac 	.word	0x200023ac

08009ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	; 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bb4:	f7fe fc7e 	bl	80084b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bb8:	4b5b      	ldr	r3, [pc, #364]	; (8009d28 <pvPortMalloc+0x180>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d101      	bne.n	8009bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bc0:	f000 f920 	bl	8009e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bc4:	4b59      	ldr	r3, [pc, #356]	; (8009d2c <pvPortMalloc+0x184>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 8093 	bne.w	8009cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01d      	beq.n	8009c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009bd8:	2208      	movs	r2, #8
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4413      	add	r3, r2
 8009bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d014      	beq.n	8009c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f023 0307 	bic.w	r3, r3, #7
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00a      	beq.n	8009c14 <pvPortMalloc+0x6c>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	617b      	str	r3, [r7, #20]
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d06e      	beq.n	8009cf8 <pvPortMalloc+0x150>
 8009c1a:	4b45      	ldr	r3, [pc, #276]	; (8009d30 <pvPortMalloc+0x188>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d869      	bhi.n	8009cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c24:	4b43      	ldr	r3, [pc, #268]	; (8009d34 <pvPortMalloc+0x18c>)
 8009c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c28:	4b42      	ldr	r3, [pc, #264]	; (8009d34 <pvPortMalloc+0x18c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c2e:	e004      	b.n	8009c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d903      	bls.n	8009c4c <pvPortMalloc+0xa4>
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f1      	bne.n	8009c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c4c:	4b36      	ldr	r3, [pc, #216]	; (8009d28 <pvPortMalloc+0x180>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d050      	beq.n	8009cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	4413      	add	r3, r2
 8009c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	2308      	movs	r3, #8
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d91f      	bls.n	8009cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	613b      	str	r3, [r7, #16]
}
 8009c9c:	bf00      	nop
 8009c9e:	e7fe      	b.n	8009c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	1ad2      	subs	r2, r2, r3
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cb2:	69b8      	ldr	r0, [r7, #24]
 8009cb4:	f000 f908 	bl	8009ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <pvPortMalloc+0x188>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	4a1b      	ldr	r2, [pc, #108]	; (8009d30 <pvPortMalloc+0x188>)
 8009cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cc6:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <pvPortMalloc+0x188>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b1b      	ldr	r3, [pc, #108]	; (8009d38 <pvPortMalloc+0x190>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d203      	bcs.n	8009cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cd2:	4b17      	ldr	r3, [pc, #92]	; (8009d30 <pvPortMalloc+0x188>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a18      	ldr	r2, [pc, #96]	; (8009d38 <pvPortMalloc+0x190>)
 8009cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <pvPortMalloc+0x184>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cee:	4b13      	ldr	r3, [pc, #76]	; (8009d3c <pvPortMalloc+0x194>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	4a11      	ldr	r2, [pc, #68]	; (8009d3c <pvPortMalloc+0x194>)
 8009cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cf8:	f7fe fbea 	bl	80084d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00a      	beq.n	8009d1c <pvPortMalloc+0x174>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60fb      	str	r3, [r7, #12]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <pvPortMalloc+0x172>
	return pvReturn;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3728      	adds	r7, #40	; 0x28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200046e0 	.word	0x200046e0
 8009d2c:	200046f4 	.word	0x200046f4
 8009d30:	200046e4 	.word	0x200046e4
 8009d34:	200046d8 	.word	0x200046d8
 8009d38:	200046e8 	.word	0x200046e8
 8009d3c:	200046ec 	.word	0x200046ec

08009d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d04d      	beq.n	8009dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d52:	2308      	movs	r3, #8
 8009d54:	425b      	negs	r3, r3
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	4413      	add	r3, r2
 8009d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <vPortFree+0xb8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10a      	bne.n	8009d84 <vPortFree+0x44>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	60fb      	str	r3, [r7, #12]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00a      	beq.n	8009da2 <vPortFree+0x62>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60bb      	str	r3, [r7, #8]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <vPortFree+0xb8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4013      	ands	r3, r2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01e      	beq.n	8009dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11a      	bne.n	8009dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <vPortFree+0xb8>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	401a      	ands	r2, r3
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dc8:	f7fe fb74 	bl	80084b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <vPortFree+0xbc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <vPortFree+0xbc>)
 8009dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dda:	6938      	ldr	r0, [r7, #16]
 8009ddc:	f000 f874 	bl	8009ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <vPortFree+0xc0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <vPortFree+0xc0>)
 8009de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dea:	f7fe fb71 	bl	80084d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dee:	bf00      	nop
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200046f4 	.word	0x200046f4
 8009dfc:	200046e4 	.word	0x200046e4
 8009e00:	200046f0 	.word	0x200046f0

08009e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e0a:	f242 3328 	movw	r3, #9000	; 0x2328
 8009e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e10:	4b27      	ldr	r3, [pc, #156]	; (8009eb0 <prvHeapInit+0xac>)
 8009e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00c      	beq.n	8009e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3307      	adds	r3, #7
 8009e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f023 0307 	bic.w	r3, r3, #7
 8009e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	4a1f      	ldr	r2, [pc, #124]	; (8009eb0 <prvHeapInit+0xac>)
 8009e34:	4413      	add	r3, r2
 8009e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e3c:	4a1d      	ldr	r2, [pc, #116]	; (8009eb4 <prvHeapInit+0xb0>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e42:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <prvHeapInit+0xb0>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e50:	2208      	movs	r2, #8
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f023 0307 	bic.w	r3, r3, #7
 8009e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e66:	4b14      	ldr	r3, [pc, #80]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e6e:	4b12      	ldr	r3, [pc, #72]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <prvHeapInit+0xb4>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <prvHeapInit+0xb8>)
 8009e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <prvHeapInit+0xbc>)
 8009e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e9c:	4b09      	ldr	r3, [pc, #36]	; (8009ec4 <prvHeapInit+0xc0>)
 8009e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	200023b0 	.word	0x200023b0
 8009eb4:	200046d8 	.word	0x200046d8
 8009eb8:	200046e0 	.word	0x200046e0
 8009ebc:	200046e8 	.word	0x200046e8
 8009ec0:	200046e4 	.word	0x200046e4
 8009ec4:	200046f4 	.word	0x200046f4

08009ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <prvInsertBlockIntoFreeList+0xac>)
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e002      	b.n	8009edc <prvInsertBlockIntoFreeList+0x14>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60fb      	str	r3, [r7, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d8f7      	bhi.n	8009ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d108      	bne.n	8009f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	441a      	add	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	441a      	add	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d118      	bne.n	8009f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b15      	ldr	r3, [pc, #84]	; (8009f78 <prvInsertBlockIntoFreeList+0xb0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d00d      	beq.n	8009f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	441a      	add	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e008      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvInsertBlockIntoFreeList+0xb0>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e003      	b.n	8009f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d002      	beq.n	8009f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	200046d8 	.word	0x200046d8
 8009f78:	200046e0 	.word	0x200046e0

08009f7c <atof>:
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f001 be21 	b.w	800bbc4 <strtod>

08009f82 <atoi>:
 8009f82:	220a      	movs	r2, #10
 8009f84:	2100      	movs	r1, #0
 8009f86:	f001 bead 	b.w	800bce4 <strtol>
	...

08009f8c <exit>:
 8009f8c:	b508      	push	{r3, lr}
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <exit+0x1c>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	b113      	cbz	r3, 8009f9a <exit+0xe>
 8009f94:	2100      	movs	r1, #0
 8009f96:	f3af 8000 	nop.w
 8009f9a:	4b04      	ldr	r3, [pc, #16]	; (8009fac <exit+0x20>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	b103      	cbz	r3, 8009fa2 <exit+0x16>
 8009fa0:	4798      	blx	r3
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f7f8 fcfc 	bl	80029a0 <_exit>
 8009fa8:	00000000 	.word	0x00000000
 8009fac:	20004838 	.word	0x20004838

08009fb0 <__cvt>:
 8009fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb4:	ec55 4b10 	vmov	r4, r5, d0
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	460e      	mov	r6, r1
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	462b      	mov	r3, r5
 8009fc0:	bfbb      	ittet	lt
 8009fc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009fc6:	461d      	movlt	r5, r3
 8009fc8:	2300      	movge	r3, #0
 8009fca:	232d      	movlt	r3, #45	; 0x2d
 8009fcc:	700b      	strb	r3, [r1, #0]
 8009fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009fd4:	4691      	mov	r9, r2
 8009fd6:	f023 0820 	bic.w	r8, r3, #32
 8009fda:	bfbc      	itt	lt
 8009fdc:	4622      	movlt	r2, r4
 8009fde:	4614      	movlt	r4, r2
 8009fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fe4:	d005      	beq.n	8009ff2 <__cvt+0x42>
 8009fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fea:	d100      	bne.n	8009fee <__cvt+0x3e>
 8009fec:	3601      	adds	r6, #1
 8009fee:	2102      	movs	r1, #2
 8009ff0:	e000      	b.n	8009ff4 <__cvt+0x44>
 8009ff2:	2103      	movs	r1, #3
 8009ff4:	ab03      	add	r3, sp, #12
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	ab02      	add	r3, sp, #8
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	ec45 4b10 	vmov	d0, r4, r5
 800a000:	4653      	mov	r3, sl
 800a002:	4632      	mov	r2, r6
 800a004:	f002 f868 	bl	800c0d8 <_dtoa_r>
 800a008:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a00c:	4607      	mov	r7, r0
 800a00e:	d102      	bne.n	800a016 <__cvt+0x66>
 800a010:	f019 0f01 	tst.w	r9, #1
 800a014:	d022      	beq.n	800a05c <__cvt+0xac>
 800a016:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a01a:	eb07 0906 	add.w	r9, r7, r6
 800a01e:	d110      	bne.n	800a042 <__cvt+0x92>
 800a020:	783b      	ldrb	r3, [r7, #0]
 800a022:	2b30      	cmp	r3, #48	; 0x30
 800a024:	d10a      	bne.n	800a03c <__cvt+0x8c>
 800a026:	2200      	movs	r2, #0
 800a028:	2300      	movs	r3, #0
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a032:	b918      	cbnz	r0, 800a03c <__cvt+0x8c>
 800a034:	f1c6 0601 	rsb	r6, r6, #1
 800a038:	f8ca 6000 	str.w	r6, [sl]
 800a03c:	f8da 3000 	ldr.w	r3, [sl]
 800a040:	4499      	add	r9, r3
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4620      	mov	r0, r4
 800a048:	4629      	mov	r1, r5
 800a04a:	f7f6 fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a04e:	b108      	cbz	r0, 800a054 <__cvt+0xa4>
 800a050:	f8cd 900c 	str.w	r9, [sp, #12]
 800a054:	2230      	movs	r2, #48	; 0x30
 800a056:	9b03      	ldr	r3, [sp, #12]
 800a058:	454b      	cmp	r3, r9
 800a05a:	d307      	bcc.n	800a06c <__cvt+0xbc>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a060:	1bdb      	subs	r3, r3, r7
 800a062:	4638      	mov	r0, r7
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	b004      	add	sp, #16
 800a068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06c:	1c59      	adds	r1, r3, #1
 800a06e:	9103      	str	r1, [sp, #12]
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e7f0      	b.n	800a056 <__cvt+0xa6>

0800a074 <__exponent>:
 800a074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a076:	4603      	mov	r3, r0
 800a078:	2900      	cmp	r1, #0
 800a07a:	bfb8      	it	lt
 800a07c:	4249      	neglt	r1, r1
 800a07e:	f803 2b02 	strb.w	r2, [r3], #2
 800a082:	bfb4      	ite	lt
 800a084:	222d      	movlt	r2, #45	; 0x2d
 800a086:	222b      	movge	r2, #43	; 0x2b
 800a088:	2909      	cmp	r1, #9
 800a08a:	7042      	strb	r2, [r0, #1]
 800a08c:	dd2a      	ble.n	800a0e4 <__exponent+0x70>
 800a08e:	f10d 0207 	add.w	r2, sp, #7
 800a092:	4617      	mov	r7, r2
 800a094:	260a      	movs	r6, #10
 800a096:	4694      	mov	ip, r2
 800a098:	fb91 f5f6 	sdiv	r5, r1, r6
 800a09c:	fb06 1415 	mls	r4, r6, r5, r1
 800a0a0:	3430      	adds	r4, #48	; 0x30
 800a0a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	2c63      	cmp	r4, #99	; 0x63
 800a0aa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	dcf1      	bgt.n	800a096 <__exponent+0x22>
 800a0b2:	3130      	adds	r1, #48	; 0x30
 800a0b4:	f1ac 0402 	sub.w	r4, ip, #2
 800a0b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a0bc:	1c41      	adds	r1, r0, #1
 800a0be:	4622      	mov	r2, r4
 800a0c0:	42ba      	cmp	r2, r7
 800a0c2:	d30a      	bcc.n	800a0da <__exponent+0x66>
 800a0c4:	f10d 0209 	add.w	r2, sp, #9
 800a0c8:	eba2 020c 	sub.w	r2, r2, ip
 800a0cc:	42bc      	cmp	r4, r7
 800a0ce:	bf88      	it	hi
 800a0d0:	2200      	movhi	r2, #0
 800a0d2:	4413      	add	r3, r2
 800a0d4:	1a18      	subs	r0, r3, r0
 800a0d6:	b003      	add	sp, #12
 800a0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0da:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a0de:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a0e2:	e7ed      	b.n	800a0c0 <__exponent+0x4c>
 800a0e4:	2330      	movs	r3, #48	; 0x30
 800a0e6:	3130      	adds	r1, #48	; 0x30
 800a0e8:	7083      	strb	r3, [r0, #2]
 800a0ea:	70c1      	strb	r1, [r0, #3]
 800a0ec:	1d03      	adds	r3, r0, #4
 800a0ee:	e7f1      	b.n	800a0d4 <__exponent+0x60>

0800a0f0 <_printf_float>:
 800a0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f4:	ed2d 8b02 	vpush	{d8}
 800a0f8:	b08d      	sub	sp, #52	; 0x34
 800a0fa:	460c      	mov	r4, r1
 800a0fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a100:	4616      	mov	r6, r2
 800a102:	461f      	mov	r7, r3
 800a104:	4605      	mov	r5, r0
 800a106:	f001 fe8b 	bl	800be20 <_localeconv_r>
 800a10a:	f8d0 a000 	ldr.w	sl, [r0]
 800a10e:	4650      	mov	r0, sl
 800a110:	f7f6 f8ae 	bl	8000270 <strlen>
 800a114:	2300      	movs	r3, #0
 800a116:	930a      	str	r3, [sp, #40]	; 0x28
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	f8d8 3000 	ldr.w	r3, [r8]
 800a120:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a124:	3307      	adds	r3, #7
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	f103 0208 	add.w	r2, r3, #8
 800a12e:	f8c8 2000 	str.w	r2, [r8]
 800a132:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a13a:	9307      	str	r3, [sp, #28]
 800a13c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a140:	ee08 0a10 	vmov	s16, r0
 800a144:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a14c:	4b9e      	ldr	r3, [pc, #632]	; (800a3c8 <_printf_float+0x2d8>)
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a152:	f7f6 fceb 	bl	8000b2c <__aeabi_dcmpun>
 800a156:	bb88      	cbnz	r0, 800a1bc <_printf_float+0xcc>
 800a158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a15c:	4b9a      	ldr	r3, [pc, #616]	; (800a3c8 <_printf_float+0x2d8>)
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a162:	f7f6 fcc5 	bl	8000af0 <__aeabi_dcmple>
 800a166:	bb48      	cbnz	r0, 800a1bc <_printf_float+0xcc>
 800a168:	2200      	movs	r2, #0
 800a16a:	2300      	movs	r3, #0
 800a16c:	4640      	mov	r0, r8
 800a16e:	4649      	mov	r1, r9
 800a170:	f7f6 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800a174:	b110      	cbz	r0, 800a17c <_printf_float+0x8c>
 800a176:	232d      	movs	r3, #45	; 0x2d
 800a178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17c:	4a93      	ldr	r2, [pc, #588]	; (800a3cc <_printf_float+0x2dc>)
 800a17e:	4b94      	ldr	r3, [pc, #592]	; (800a3d0 <_printf_float+0x2e0>)
 800a180:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a184:	bf94      	ite	ls
 800a186:	4690      	movls	r8, r2
 800a188:	4698      	movhi	r8, r3
 800a18a:	2303      	movs	r3, #3
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	9b05      	ldr	r3, [sp, #20]
 800a190:	f023 0304 	bic.w	r3, r3, #4
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	f04f 0900 	mov.w	r9, #0
 800a19a:	9700      	str	r7, [sp, #0]
 800a19c:	4633      	mov	r3, r6
 800a19e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f000 fa8a 	bl	800a6bc <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f040 8090 	bne.w	800a2ce <_printf_float+0x1de>
 800a1ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1b2:	b00d      	add	sp, #52	; 0x34
 800a1b4:	ecbd 8b02 	vpop	{d8}
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 fcb2 	bl	8000b2c <__aeabi_dcmpun>
 800a1c8:	b140      	cbz	r0, 800a1dc <_printf_float+0xec>
 800a1ca:	464b      	mov	r3, r9
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfbc      	itt	lt
 800a1d0:	232d      	movlt	r3, #45	; 0x2d
 800a1d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a1d6:	4a7f      	ldr	r2, [pc, #508]	; (800a3d4 <_printf_float+0x2e4>)
 800a1d8:	4b7f      	ldr	r3, [pc, #508]	; (800a3d8 <_printf_float+0x2e8>)
 800a1da:	e7d1      	b.n	800a180 <_printf_float+0x90>
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1e2:	9206      	str	r2, [sp, #24]
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	d13f      	bne.n	800a268 <_printf_float+0x178>
 800a1e8:	2306      	movs	r3, #6
 800a1ea:	6063      	str	r3, [r4, #4]
 800a1ec:	9b05      	ldr	r3, [sp, #20]
 800a1ee:	6861      	ldr	r1, [r4, #4]
 800a1f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	ab0a      	add	r3, sp, #40	; 0x28
 800a1fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1fe:	ab09      	add	r3, sp, #36	; 0x24
 800a200:	ec49 8b10 	vmov	d0, r8, r9
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	6022      	str	r2, [r4, #0]
 800a208:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7ff fecf 	bl	8009fb0 <__cvt>
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a216:	2b47      	cmp	r3, #71	; 0x47
 800a218:	4680      	mov	r8, r0
 800a21a:	d108      	bne.n	800a22e <_printf_float+0x13e>
 800a21c:	1cc8      	adds	r0, r1, #3
 800a21e:	db02      	blt.n	800a226 <_printf_float+0x136>
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	4299      	cmp	r1, r3
 800a224:	dd41      	ble.n	800a2aa <_printf_float+0x1ba>
 800a226:	f1ab 0302 	sub.w	r3, fp, #2
 800a22a:	fa5f fb83 	uxtb.w	fp, r3
 800a22e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a232:	d820      	bhi.n	800a276 <_printf_float+0x186>
 800a234:	3901      	subs	r1, #1
 800a236:	465a      	mov	r2, fp
 800a238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a23c:	9109      	str	r1, [sp, #36]	; 0x24
 800a23e:	f7ff ff19 	bl	800a074 <__exponent>
 800a242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a244:	1813      	adds	r3, r2, r0
 800a246:	2a01      	cmp	r2, #1
 800a248:	4681      	mov	r9, r0
 800a24a:	6123      	str	r3, [r4, #16]
 800a24c:	dc02      	bgt.n	800a254 <_printf_float+0x164>
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	07d2      	lsls	r2, r2, #31
 800a252:	d501      	bpl.n	800a258 <_printf_float+0x168>
 800a254:	3301      	adds	r3, #1
 800a256:	6123      	str	r3, [r4, #16]
 800a258:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d09c      	beq.n	800a19a <_printf_float+0xaa>
 800a260:	232d      	movs	r3, #45	; 0x2d
 800a262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a266:	e798      	b.n	800a19a <_printf_float+0xaa>
 800a268:	9a06      	ldr	r2, [sp, #24]
 800a26a:	2a47      	cmp	r2, #71	; 0x47
 800a26c:	d1be      	bne.n	800a1ec <_printf_float+0xfc>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1bc      	bne.n	800a1ec <_printf_float+0xfc>
 800a272:	2301      	movs	r3, #1
 800a274:	e7b9      	b.n	800a1ea <_printf_float+0xfa>
 800a276:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a27a:	d118      	bne.n	800a2ae <_printf_float+0x1be>
 800a27c:	2900      	cmp	r1, #0
 800a27e:	6863      	ldr	r3, [r4, #4]
 800a280:	dd0b      	ble.n	800a29a <_printf_float+0x1aa>
 800a282:	6121      	str	r1, [r4, #16]
 800a284:	b913      	cbnz	r3, 800a28c <_printf_float+0x19c>
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	07d0      	lsls	r0, r2, #31
 800a28a:	d502      	bpl.n	800a292 <_printf_float+0x1a2>
 800a28c:	3301      	adds	r3, #1
 800a28e:	440b      	add	r3, r1
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	65a1      	str	r1, [r4, #88]	; 0x58
 800a294:	f04f 0900 	mov.w	r9, #0
 800a298:	e7de      	b.n	800a258 <_printf_float+0x168>
 800a29a:	b913      	cbnz	r3, 800a2a2 <_printf_float+0x1b2>
 800a29c:	6822      	ldr	r2, [r4, #0]
 800a29e:	07d2      	lsls	r2, r2, #31
 800a2a0:	d501      	bpl.n	800a2a6 <_printf_float+0x1b6>
 800a2a2:	3302      	adds	r3, #2
 800a2a4:	e7f4      	b.n	800a290 <_printf_float+0x1a0>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e7f2      	b.n	800a290 <_printf_float+0x1a0>
 800a2aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	4299      	cmp	r1, r3
 800a2b2:	db05      	blt.n	800a2c0 <_printf_float+0x1d0>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	6121      	str	r1, [r4, #16]
 800a2b8:	07d8      	lsls	r0, r3, #31
 800a2ba:	d5ea      	bpl.n	800a292 <_printf_float+0x1a2>
 800a2bc:	1c4b      	adds	r3, r1, #1
 800a2be:	e7e7      	b.n	800a290 <_printf_float+0x1a0>
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	bfd4      	ite	le
 800a2c4:	f1c1 0202 	rsble	r2, r1, #2
 800a2c8:	2201      	movgt	r2, #1
 800a2ca:	4413      	add	r3, r2
 800a2cc:	e7e0      	b.n	800a290 <_printf_float+0x1a0>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	055a      	lsls	r2, r3, #21
 800a2d2:	d407      	bmi.n	800a2e4 <_printf_float+0x1f4>
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4628      	mov	r0, r5
 800a2dc:	47b8      	blx	r7
 800a2de:	3001      	adds	r0, #1
 800a2e0:	d12c      	bne.n	800a33c <_printf_float+0x24c>
 800a2e2:	e764      	b.n	800a1ae <_printf_float+0xbe>
 800a2e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2e8:	f240 80e0 	bls.w	800a4ac <_printf_float+0x3bc>
 800a2ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f7f6 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d034      	beq.n	800a366 <_printf_float+0x276>
 800a2fc:	4a37      	ldr	r2, [pc, #220]	; (800a3dc <_printf_float+0x2ec>)
 800a2fe:	2301      	movs	r3, #1
 800a300:	4631      	mov	r1, r6
 800a302:	4628      	mov	r0, r5
 800a304:	47b8      	blx	r7
 800a306:	3001      	adds	r0, #1
 800a308:	f43f af51 	beq.w	800a1ae <_printf_float+0xbe>
 800a30c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a310:	429a      	cmp	r2, r3
 800a312:	db02      	blt.n	800a31a <_printf_float+0x22a>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	07d8      	lsls	r0, r3, #31
 800a318:	d510      	bpl.n	800a33c <_printf_float+0x24c>
 800a31a:	ee18 3a10 	vmov	r3, s16
 800a31e:	4652      	mov	r2, sl
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f af41 	beq.w	800a1ae <_printf_float+0xbe>
 800a32c:	f04f 0800 	mov.w	r8, #0
 800a330:	f104 091a 	add.w	r9, r4, #26
 800a334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a336:	3b01      	subs	r3, #1
 800a338:	4543      	cmp	r3, r8
 800a33a:	dc09      	bgt.n	800a350 <_printf_float+0x260>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	079b      	lsls	r3, r3, #30
 800a340:	f100 8107 	bmi.w	800a552 <_printf_float+0x462>
 800a344:	68e0      	ldr	r0, [r4, #12]
 800a346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a348:	4298      	cmp	r0, r3
 800a34a:	bfb8      	it	lt
 800a34c:	4618      	movlt	r0, r3
 800a34e:	e730      	b.n	800a1b2 <_printf_float+0xc2>
 800a350:	2301      	movs	r3, #1
 800a352:	464a      	mov	r2, r9
 800a354:	4631      	mov	r1, r6
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	f43f af27 	beq.w	800a1ae <_printf_float+0xbe>
 800a360:	f108 0801 	add.w	r8, r8, #1
 800a364:	e7e6      	b.n	800a334 <_printf_float+0x244>
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	2b00      	cmp	r3, #0
 800a36a:	dc39      	bgt.n	800a3e0 <_printf_float+0x2f0>
 800a36c:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <_printf_float+0x2ec>)
 800a36e:	2301      	movs	r3, #1
 800a370:	4631      	mov	r1, r6
 800a372:	4628      	mov	r0, r5
 800a374:	47b8      	blx	r7
 800a376:	3001      	adds	r0, #1
 800a378:	f43f af19 	beq.w	800a1ae <_printf_float+0xbe>
 800a37c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a380:	4313      	orrs	r3, r2
 800a382:	d102      	bne.n	800a38a <_printf_float+0x29a>
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	07d9      	lsls	r1, r3, #31
 800a388:	d5d8      	bpl.n	800a33c <_printf_float+0x24c>
 800a38a:	ee18 3a10 	vmov	r3, s16
 800a38e:	4652      	mov	r2, sl
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	f43f af09 	beq.w	800a1ae <_printf_float+0xbe>
 800a39c:	f04f 0900 	mov.w	r9, #0
 800a3a0:	f104 0a1a 	add.w	sl, r4, #26
 800a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a6:	425b      	negs	r3, r3
 800a3a8:	454b      	cmp	r3, r9
 800a3aa:	dc01      	bgt.n	800a3b0 <_printf_float+0x2c0>
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ae:	e792      	b.n	800a2d6 <_printf_float+0x1e6>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4652      	mov	r2, sl
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	47b8      	blx	r7
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	f43f aef7 	beq.w	800a1ae <_printf_float+0xbe>
 800a3c0:	f109 0901 	add.w	r9, r9, #1
 800a3c4:	e7ee      	b.n	800a3a4 <_printf_float+0x2b4>
 800a3c6:	bf00      	nop
 800a3c8:	7fefffff 	.word	0x7fefffff
 800a3cc:	0800fe50 	.word	0x0800fe50
 800a3d0:	0800fe54 	.word	0x0800fe54
 800a3d4:	0800fe58 	.word	0x0800fe58
 800a3d8:	0800fe5c 	.word	0x0800fe5c
 800a3dc:	0800fe60 	.word	0x0800fe60
 800a3e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	bfa8      	it	ge
 800a3e8:	461a      	movge	r2, r3
 800a3ea:	2a00      	cmp	r2, #0
 800a3ec:	4691      	mov	r9, r2
 800a3ee:	dc37      	bgt.n	800a460 <_printf_float+0x370>
 800a3f0:	f04f 0b00 	mov.w	fp, #0
 800a3f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f8:	f104 021a 	add.w	r2, r4, #26
 800a3fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3fe:	9305      	str	r3, [sp, #20]
 800a400:	eba3 0309 	sub.w	r3, r3, r9
 800a404:	455b      	cmp	r3, fp
 800a406:	dc33      	bgt.n	800a470 <_printf_float+0x380>
 800a408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40c:	429a      	cmp	r2, r3
 800a40e:	db3b      	blt.n	800a488 <_printf_float+0x398>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	07da      	lsls	r2, r3, #31
 800a414:	d438      	bmi.n	800a488 <_printf_float+0x398>
 800a416:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a41a:	eba2 0903 	sub.w	r9, r2, r3
 800a41e:	9b05      	ldr	r3, [sp, #20]
 800a420:	1ad2      	subs	r2, r2, r3
 800a422:	4591      	cmp	r9, r2
 800a424:	bfa8      	it	ge
 800a426:	4691      	movge	r9, r2
 800a428:	f1b9 0f00 	cmp.w	r9, #0
 800a42c:	dc35      	bgt.n	800a49a <_printf_float+0x3aa>
 800a42e:	f04f 0800 	mov.w	r8, #0
 800a432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a436:	f104 0a1a 	add.w	sl, r4, #26
 800a43a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a43e:	1a9b      	subs	r3, r3, r2
 800a440:	eba3 0309 	sub.w	r3, r3, r9
 800a444:	4543      	cmp	r3, r8
 800a446:	f77f af79 	ble.w	800a33c <_printf_float+0x24c>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4652      	mov	r2, sl
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	f43f aeaa 	beq.w	800a1ae <_printf_float+0xbe>
 800a45a:	f108 0801 	add.w	r8, r8, #1
 800a45e:	e7ec      	b.n	800a43a <_printf_float+0x34a>
 800a460:	4613      	mov	r3, r2
 800a462:	4631      	mov	r1, r6
 800a464:	4642      	mov	r2, r8
 800a466:	4628      	mov	r0, r5
 800a468:	47b8      	blx	r7
 800a46a:	3001      	adds	r0, #1
 800a46c:	d1c0      	bne.n	800a3f0 <_printf_float+0x300>
 800a46e:	e69e      	b.n	800a1ae <_printf_float+0xbe>
 800a470:	2301      	movs	r3, #1
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	9205      	str	r2, [sp, #20]
 800a478:	47b8      	blx	r7
 800a47a:	3001      	adds	r0, #1
 800a47c:	f43f ae97 	beq.w	800a1ae <_printf_float+0xbe>
 800a480:	9a05      	ldr	r2, [sp, #20]
 800a482:	f10b 0b01 	add.w	fp, fp, #1
 800a486:	e7b9      	b.n	800a3fc <_printf_float+0x30c>
 800a488:	ee18 3a10 	vmov	r3, s16
 800a48c:	4652      	mov	r2, sl
 800a48e:	4631      	mov	r1, r6
 800a490:	4628      	mov	r0, r5
 800a492:	47b8      	blx	r7
 800a494:	3001      	adds	r0, #1
 800a496:	d1be      	bne.n	800a416 <_printf_float+0x326>
 800a498:	e689      	b.n	800a1ae <_printf_float+0xbe>
 800a49a:	9a05      	ldr	r2, [sp, #20]
 800a49c:	464b      	mov	r3, r9
 800a49e:	4442      	add	r2, r8
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d1c1      	bne.n	800a42e <_printf_float+0x33e>
 800a4aa:	e680      	b.n	800a1ae <_printf_float+0xbe>
 800a4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ae:	2a01      	cmp	r2, #1
 800a4b0:	dc01      	bgt.n	800a4b6 <_printf_float+0x3c6>
 800a4b2:	07db      	lsls	r3, r3, #31
 800a4b4:	d53a      	bpl.n	800a52c <_printf_float+0x43c>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	4631      	mov	r1, r6
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b8      	blx	r7
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f43f ae74 	beq.w	800a1ae <_printf_float+0xbe>
 800a4c6:	ee18 3a10 	vmov	r3, s16
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f ae6b 	beq.w	800a1ae <_printf_float+0xbe>
 800a4d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a4e4:	f7f6 faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4e8:	b9d8      	cbnz	r0, 800a522 <_printf_float+0x432>
 800a4ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a4ee:	f108 0201 	add.w	r2, r8, #1
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d10e      	bne.n	800a51a <_printf_float+0x42a>
 800a4fc:	e657      	b.n	800a1ae <_printf_float+0xbe>
 800a4fe:	2301      	movs	r3, #1
 800a500:	4652      	mov	r2, sl
 800a502:	4631      	mov	r1, r6
 800a504:	4628      	mov	r0, r5
 800a506:	47b8      	blx	r7
 800a508:	3001      	adds	r0, #1
 800a50a:	f43f ae50 	beq.w	800a1ae <_printf_float+0xbe>
 800a50e:	f108 0801 	add.w	r8, r8, #1
 800a512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a514:	3b01      	subs	r3, #1
 800a516:	4543      	cmp	r3, r8
 800a518:	dcf1      	bgt.n	800a4fe <_printf_float+0x40e>
 800a51a:	464b      	mov	r3, r9
 800a51c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a520:	e6da      	b.n	800a2d8 <_printf_float+0x1e8>
 800a522:	f04f 0800 	mov.w	r8, #0
 800a526:	f104 0a1a 	add.w	sl, r4, #26
 800a52a:	e7f2      	b.n	800a512 <_printf_float+0x422>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4642      	mov	r2, r8
 800a530:	e7df      	b.n	800a4f2 <_printf_float+0x402>
 800a532:	2301      	movs	r3, #1
 800a534:	464a      	mov	r2, r9
 800a536:	4631      	mov	r1, r6
 800a538:	4628      	mov	r0, r5
 800a53a:	47b8      	blx	r7
 800a53c:	3001      	adds	r0, #1
 800a53e:	f43f ae36 	beq.w	800a1ae <_printf_float+0xbe>
 800a542:	f108 0801 	add.w	r8, r8, #1
 800a546:	68e3      	ldr	r3, [r4, #12]
 800a548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a54a:	1a5b      	subs	r3, r3, r1
 800a54c:	4543      	cmp	r3, r8
 800a54e:	dcf0      	bgt.n	800a532 <_printf_float+0x442>
 800a550:	e6f8      	b.n	800a344 <_printf_float+0x254>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	f104 0919 	add.w	r9, r4, #25
 800a55a:	e7f4      	b.n	800a546 <_printf_float+0x456>

0800a55c <malloc>:
 800a55c:	4b02      	ldr	r3, [pc, #8]	; (800a568 <malloc+0xc>)
 800a55e:	4601      	mov	r1, r0
 800a560:	6818      	ldr	r0, [r3, #0]
 800a562:	f000 b82b 	b.w	800a5bc <_malloc_r>
 800a566:	bf00      	nop
 800a568:	200005d8 	.word	0x200005d8

0800a56c <free>:
 800a56c:	4b02      	ldr	r3, [pc, #8]	; (800a578 <free+0xc>)
 800a56e:	4601      	mov	r1, r0
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	f002 bba3 	b.w	800ccbc <_free_r>
 800a576:	bf00      	nop
 800a578:	200005d8 	.word	0x200005d8

0800a57c <sbrk_aligned>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4e0e      	ldr	r6, [pc, #56]	; (800a5b8 <sbrk_aligned+0x3c>)
 800a580:	460c      	mov	r4, r1
 800a582:	6831      	ldr	r1, [r6, #0]
 800a584:	4605      	mov	r5, r0
 800a586:	b911      	cbnz	r1, 800a58e <sbrk_aligned+0x12>
 800a588:	f001 fca4 	bl	800bed4 <_sbrk_r>
 800a58c:	6030      	str	r0, [r6, #0]
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f001 fc9f 	bl	800bed4 <_sbrk_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d00a      	beq.n	800a5b0 <sbrk_aligned+0x34>
 800a59a:	1cc4      	adds	r4, r0, #3
 800a59c:	f024 0403 	bic.w	r4, r4, #3
 800a5a0:	42a0      	cmp	r0, r4
 800a5a2:	d007      	beq.n	800a5b4 <sbrk_aligned+0x38>
 800a5a4:	1a21      	subs	r1, r4, r0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f001 fc94 	bl	800bed4 <_sbrk_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d101      	bne.n	800a5b4 <sbrk_aligned+0x38>
 800a5b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	200046fc 	.word	0x200046fc

0800a5bc <_malloc_r>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	1ccd      	adds	r5, r1, #3
 800a5c2:	f025 0503 	bic.w	r5, r5, #3
 800a5c6:	3508      	adds	r5, #8
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	bf38      	it	cc
 800a5cc:	250c      	movcc	r5, #12
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	db01      	blt.n	800a5d8 <_malloc_r+0x1c>
 800a5d4:	42a9      	cmp	r1, r5
 800a5d6:	d905      	bls.n	800a5e4 <_malloc_r+0x28>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	2600      	movs	r6, #0
 800a5de:	4630      	mov	r0, r6
 800a5e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a6b8 <_malloc_r+0xfc>
 800a5e8:	f000 fc08 	bl	800adfc <__malloc_lock>
 800a5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f0:	461c      	mov	r4, r3
 800a5f2:	bb5c      	cbnz	r4, 800a64c <_malloc_r+0x90>
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	f7ff ffc0 	bl	800a57c <sbrk_aligned>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	4604      	mov	r4, r0
 800a600:	d155      	bne.n	800a6ae <_malloc_r+0xf2>
 800a602:	f8d8 4000 	ldr.w	r4, [r8]
 800a606:	4626      	mov	r6, r4
 800a608:	2e00      	cmp	r6, #0
 800a60a:	d145      	bne.n	800a698 <_malloc_r+0xdc>
 800a60c:	2c00      	cmp	r4, #0
 800a60e:	d048      	beq.n	800a6a2 <_malloc_r+0xe6>
 800a610:	6823      	ldr	r3, [r4, #0]
 800a612:	4631      	mov	r1, r6
 800a614:	4638      	mov	r0, r7
 800a616:	eb04 0903 	add.w	r9, r4, r3
 800a61a:	f001 fc5b 	bl	800bed4 <_sbrk_r>
 800a61e:	4581      	cmp	r9, r0
 800a620:	d13f      	bne.n	800a6a2 <_malloc_r+0xe6>
 800a622:	6821      	ldr	r1, [r4, #0]
 800a624:	1a6d      	subs	r5, r5, r1
 800a626:	4629      	mov	r1, r5
 800a628:	4638      	mov	r0, r7
 800a62a:	f7ff ffa7 	bl	800a57c <sbrk_aligned>
 800a62e:	3001      	adds	r0, #1
 800a630:	d037      	beq.n	800a6a2 <_malloc_r+0xe6>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	442b      	add	r3, r5
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	f8d8 3000 	ldr.w	r3, [r8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d038      	beq.n	800a6b2 <_malloc_r+0xf6>
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	42a2      	cmp	r2, r4
 800a644:	d12b      	bne.n	800a69e <_malloc_r+0xe2>
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
 800a64a:	e00f      	b.n	800a66c <_malloc_r+0xb0>
 800a64c:	6822      	ldr	r2, [r4, #0]
 800a64e:	1b52      	subs	r2, r2, r5
 800a650:	d41f      	bmi.n	800a692 <_malloc_r+0xd6>
 800a652:	2a0b      	cmp	r2, #11
 800a654:	d917      	bls.n	800a686 <_malloc_r+0xca>
 800a656:	1961      	adds	r1, r4, r5
 800a658:	42a3      	cmp	r3, r4
 800a65a:	6025      	str	r5, [r4, #0]
 800a65c:	bf18      	it	ne
 800a65e:	6059      	strne	r1, [r3, #4]
 800a660:	6863      	ldr	r3, [r4, #4]
 800a662:	bf08      	it	eq
 800a664:	f8c8 1000 	streq.w	r1, [r8]
 800a668:	5162      	str	r2, [r4, r5]
 800a66a:	604b      	str	r3, [r1, #4]
 800a66c:	4638      	mov	r0, r7
 800a66e:	f104 060b 	add.w	r6, r4, #11
 800a672:	f000 fbc9 	bl	800ae08 <__malloc_unlock>
 800a676:	f026 0607 	bic.w	r6, r6, #7
 800a67a:	1d23      	adds	r3, r4, #4
 800a67c:	1af2      	subs	r2, r6, r3
 800a67e:	d0ae      	beq.n	800a5de <_malloc_r+0x22>
 800a680:	1b9b      	subs	r3, r3, r6
 800a682:	50a3      	str	r3, [r4, r2]
 800a684:	e7ab      	b.n	800a5de <_malloc_r+0x22>
 800a686:	42a3      	cmp	r3, r4
 800a688:	6862      	ldr	r2, [r4, #4]
 800a68a:	d1dd      	bne.n	800a648 <_malloc_r+0x8c>
 800a68c:	f8c8 2000 	str.w	r2, [r8]
 800a690:	e7ec      	b.n	800a66c <_malloc_r+0xb0>
 800a692:	4623      	mov	r3, r4
 800a694:	6864      	ldr	r4, [r4, #4]
 800a696:	e7ac      	b.n	800a5f2 <_malloc_r+0x36>
 800a698:	4634      	mov	r4, r6
 800a69a:	6876      	ldr	r6, [r6, #4]
 800a69c:	e7b4      	b.n	800a608 <_malloc_r+0x4c>
 800a69e:	4613      	mov	r3, r2
 800a6a0:	e7cc      	b.n	800a63c <_malloc_r+0x80>
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	603b      	str	r3, [r7, #0]
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	f000 fbae 	bl	800ae08 <__malloc_unlock>
 800a6ac:	e797      	b.n	800a5de <_malloc_r+0x22>
 800a6ae:	6025      	str	r5, [r4, #0]
 800a6b0:	e7dc      	b.n	800a66c <_malloc_r+0xb0>
 800a6b2:	605b      	str	r3, [r3, #4]
 800a6b4:	deff      	udf	#255	; 0xff
 800a6b6:	bf00      	nop
 800a6b8:	200046f8 	.word	0x200046f8

0800a6bc <_printf_common>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	4699      	mov	r9, r3
 800a6c4:	688a      	ldr	r2, [r1, #8]
 800a6c6:	690b      	ldr	r3, [r1, #16]
 800a6c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	bfb8      	it	lt
 800a6d0:	4613      	movlt	r3, r2
 800a6d2:	6033      	str	r3, [r6, #0]
 800a6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6d8:	4607      	mov	r7, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b10a      	cbz	r2, 800a6e2 <_printf_common+0x26>
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6033      	str	r3, [r6, #0]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	0699      	lsls	r1, r3, #26
 800a6e6:	bf42      	ittt	mi
 800a6e8:	6833      	ldrmi	r3, [r6, #0]
 800a6ea:	3302      	addmi	r3, #2
 800a6ec:	6033      	strmi	r3, [r6, #0]
 800a6ee:	6825      	ldr	r5, [r4, #0]
 800a6f0:	f015 0506 	ands.w	r5, r5, #6
 800a6f4:	d106      	bne.n	800a704 <_printf_common+0x48>
 800a6f6:	f104 0a19 	add.w	sl, r4, #25
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	6832      	ldr	r2, [r6, #0]
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	42ab      	cmp	r3, r5
 800a702:	dc26      	bgt.n	800a752 <_printf_common+0x96>
 800a704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a708:	1e13      	subs	r3, r2, #0
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	bf18      	it	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	0692      	lsls	r2, r2, #26
 800a712:	d42b      	bmi.n	800a76c <_printf_common+0xb0>
 800a714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a718:	4649      	mov	r1, r9
 800a71a:	4638      	mov	r0, r7
 800a71c:	47c0      	blx	r8
 800a71e:	3001      	adds	r0, #1
 800a720:	d01e      	beq.n	800a760 <_printf_common+0xa4>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	6922      	ldr	r2, [r4, #16]
 800a726:	f003 0306 	and.w	r3, r3, #6
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	bf02      	ittt	eq
 800a72e:	68e5      	ldreq	r5, [r4, #12]
 800a730:	6833      	ldreq	r3, [r6, #0]
 800a732:	1aed      	subeq	r5, r5, r3
 800a734:	68a3      	ldr	r3, [r4, #8]
 800a736:	bf0c      	ite	eq
 800a738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a73c:	2500      	movne	r5, #0
 800a73e:	4293      	cmp	r3, r2
 800a740:	bfc4      	itt	gt
 800a742:	1a9b      	subgt	r3, r3, r2
 800a744:	18ed      	addgt	r5, r5, r3
 800a746:	2600      	movs	r6, #0
 800a748:	341a      	adds	r4, #26
 800a74a:	42b5      	cmp	r5, r6
 800a74c:	d11a      	bne.n	800a784 <_printf_common+0xc8>
 800a74e:	2000      	movs	r0, #0
 800a750:	e008      	b.n	800a764 <_printf_common+0xa8>
 800a752:	2301      	movs	r3, #1
 800a754:	4652      	mov	r2, sl
 800a756:	4649      	mov	r1, r9
 800a758:	4638      	mov	r0, r7
 800a75a:	47c0      	blx	r8
 800a75c:	3001      	adds	r0, #1
 800a75e:	d103      	bne.n	800a768 <_printf_common+0xac>
 800a760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a768:	3501      	adds	r5, #1
 800a76a:	e7c6      	b.n	800a6fa <_printf_common+0x3e>
 800a76c:	18e1      	adds	r1, r4, r3
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	2030      	movs	r0, #48	; 0x30
 800a772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a776:	4422      	add	r2, r4
 800a778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a77c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a780:	3302      	adds	r3, #2
 800a782:	e7c7      	b.n	800a714 <_printf_common+0x58>
 800a784:	2301      	movs	r3, #1
 800a786:	4622      	mov	r2, r4
 800a788:	4649      	mov	r1, r9
 800a78a:	4638      	mov	r0, r7
 800a78c:	47c0      	blx	r8
 800a78e:	3001      	adds	r0, #1
 800a790:	d0e6      	beq.n	800a760 <_printf_common+0xa4>
 800a792:	3601      	adds	r6, #1
 800a794:	e7d9      	b.n	800a74a <_printf_common+0x8e>
	...

0800a798 <_printf_i>:
 800a798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	7e0f      	ldrb	r7, [r1, #24]
 800a79e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7a0:	2f78      	cmp	r7, #120	; 0x78
 800a7a2:	4691      	mov	r9, r2
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	469a      	mov	sl, r3
 800a7aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7ae:	d807      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7b0:	2f62      	cmp	r7, #98	; 0x62
 800a7b2:	d80a      	bhi.n	800a7ca <_printf_i+0x32>
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	f000 80d4 	beq.w	800a962 <_printf_i+0x1ca>
 800a7ba:	2f58      	cmp	r7, #88	; 0x58
 800a7bc:	f000 80c0 	beq.w	800a940 <_printf_i+0x1a8>
 800a7c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7c8:	e03a      	b.n	800a840 <_printf_i+0xa8>
 800a7ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7ce:	2b15      	cmp	r3, #21
 800a7d0:	d8f6      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7d2:	a101      	add	r1, pc, #4	; (adr r1, 800a7d8 <_printf_i+0x40>)
 800a7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d8:	0800a831 	.word	0x0800a831
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a7c1 	.word	0x0800a7c1
 800a7e4:	0800a7c1 	.word	0x0800a7c1
 800a7e8:	0800a7c1 	.word	0x0800a7c1
 800a7ec:	0800a7c1 	.word	0x0800a7c1
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a7c1 	.word	0x0800a7c1
 800a7f8:	0800a7c1 	.word	0x0800a7c1
 800a7fc:	0800a7c1 	.word	0x0800a7c1
 800a800:	0800a7c1 	.word	0x0800a7c1
 800a804:	0800a949 	.word	0x0800a949
 800a808:	0800a871 	.word	0x0800a871
 800a80c:	0800a903 	.word	0x0800a903
 800a810:	0800a7c1 	.word	0x0800a7c1
 800a814:	0800a7c1 	.word	0x0800a7c1
 800a818:	0800a96b 	.word	0x0800a96b
 800a81c:	0800a7c1 	.word	0x0800a7c1
 800a820:	0800a871 	.word	0x0800a871
 800a824:	0800a7c1 	.word	0x0800a7c1
 800a828:	0800a7c1 	.word	0x0800a7c1
 800a82c:	0800a90b 	.word	0x0800a90b
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	1d1a      	adds	r2, r3, #4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	602a      	str	r2, [r5, #0]
 800a838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a83c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a840:	2301      	movs	r3, #1
 800a842:	e09f      	b.n	800a984 <_printf_i+0x1ec>
 800a844:	6820      	ldr	r0, [r4, #0]
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	0607      	lsls	r7, r0, #24
 800a84a:	f103 0104 	add.w	r1, r3, #4
 800a84e:	6029      	str	r1, [r5, #0]
 800a850:	d501      	bpl.n	800a856 <_printf_i+0xbe>
 800a852:	681e      	ldr	r6, [r3, #0]
 800a854:	e003      	b.n	800a85e <_printf_i+0xc6>
 800a856:	0646      	lsls	r6, r0, #25
 800a858:	d5fb      	bpl.n	800a852 <_printf_i+0xba>
 800a85a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a85e:	2e00      	cmp	r6, #0
 800a860:	da03      	bge.n	800a86a <_printf_i+0xd2>
 800a862:	232d      	movs	r3, #45	; 0x2d
 800a864:	4276      	negs	r6, r6
 800a866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a86a:	485a      	ldr	r0, [pc, #360]	; (800a9d4 <_printf_i+0x23c>)
 800a86c:	230a      	movs	r3, #10
 800a86e:	e012      	b.n	800a896 <_printf_i+0xfe>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1d19      	adds	r1, r3, #4
 800a876:	6029      	str	r1, [r5, #0]
 800a878:	0605      	lsls	r5, r0, #24
 800a87a:	d501      	bpl.n	800a880 <_printf_i+0xe8>
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	e002      	b.n	800a886 <_printf_i+0xee>
 800a880:	0641      	lsls	r1, r0, #25
 800a882:	d5fb      	bpl.n	800a87c <_printf_i+0xe4>
 800a884:	881e      	ldrh	r6, [r3, #0]
 800a886:	4853      	ldr	r0, [pc, #332]	; (800a9d4 <_printf_i+0x23c>)
 800a888:	2f6f      	cmp	r7, #111	; 0x6f
 800a88a:	bf0c      	ite	eq
 800a88c:	2308      	moveq	r3, #8
 800a88e:	230a      	movne	r3, #10
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a896:	6865      	ldr	r5, [r4, #4]
 800a898:	60a5      	str	r5, [r4, #8]
 800a89a:	2d00      	cmp	r5, #0
 800a89c:	bfa2      	ittt	ge
 800a89e:	6821      	ldrge	r1, [r4, #0]
 800a8a0:	f021 0104 	bicge.w	r1, r1, #4
 800a8a4:	6021      	strge	r1, [r4, #0]
 800a8a6:	b90e      	cbnz	r6, 800a8ac <_printf_i+0x114>
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	d04b      	beq.n	800a944 <_printf_i+0x1ac>
 800a8ac:	4615      	mov	r5, r2
 800a8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a8b6:	5dc7      	ldrb	r7, [r0, r7]
 800a8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8bc:	4637      	mov	r7, r6
 800a8be:	42bb      	cmp	r3, r7
 800a8c0:	460e      	mov	r6, r1
 800a8c2:	d9f4      	bls.n	800a8ae <_printf_i+0x116>
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d10b      	bne.n	800a8e0 <_printf_i+0x148>
 800a8c8:	6823      	ldr	r3, [r4, #0]
 800a8ca:	07de      	lsls	r6, r3, #31
 800a8cc:	d508      	bpl.n	800a8e0 <_printf_i+0x148>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6861      	ldr	r1, [r4, #4]
 800a8d2:	4299      	cmp	r1, r3
 800a8d4:	bfde      	ittt	le
 800a8d6:	2330      	movle	r3, #48	; 0x30
 800a8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a8e0:	1b52      	subs	r2, r2, r5
 800a8e2:	6122      	str	r2, [r4, #16]
 800a8e4:	f8cd a000 	str.w	sl, [sp]
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	aa03      	add	r2, sp, #12
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7ff fee4 	bl	800a6bc <_printf_common>
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	d14a      	bne.n	800a98e <_printf_i+0x1f6>
 800a8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8fc:	b004      	add	sp, #16
 800a8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a902:	6823      	ldr	r3, [r4, #0]
 800a904:	f043 0320 	orr.w	r3, r3, #32
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	4833      	ldr	r0, [pc, #204]	; (800a9d8 <_printf_i+0x240>)
 800a90c:	2778      	movs	r7, #120	; 0x78
 800a90e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	6829      	ldr	r1, [r5, #0]
 800a916:	061f      	lsls	r7, r3, #24
 800a918:	f851 6b04 	ldr.w	r6, [r1], #4
 800a91c:	d402      	bmi.n	800a924 <_printf_i+0x18c>
 800a91e:	065f      	lsls	r7, r3, #25
 800a920:	bf48      	it	mi
 800a922:	b2b6      	uxthmi	r6, r6
 800a924:	07df      	lsls	r7, r3, #31
 800a926:	bf48      	it	mi
 800a928:	f043 0320 	orrmi.w	r3, r3, #32
 800a92c:	6029      	str	r1, [r5, #0]
 800a92e:	bf48      	it	mi
 800a930:	6023      	strmi	r3, [r4, #0]
 800a932:	b91e      	cbnz	r6, 800a93c <_printf_i+0x1a4>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	f023 0320 	bic.w	r3, r3, #32
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	2310      	movs	r3, #16
 800a93e:	e7a7      	b.n	800a890 <_printf_i+0xf8>
 800a940:	4824      	ldr	r0, [pc, #144]	; (800a9d4 <_printf_i+0x23c>)
 800a942:	e7e4      	b.n	800a90e <_printf_i+0x176>
 800a944:	4615      	mov	r5, r2
 800a946:	e7bd      	b.n	800a8c4 <_printf_i+0x12c>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	6826      	ldr	r6, [r4, #0]
 800a94c:	6961      	ldr	r1, [r4, #20]
 800a94e:	1d18      	adds	r0, r3, #4
 800a950:	6028      	str	r0, [r5, #0]
 800a952:	0635      	lsls	r5, r6, #24
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	d501      	bpl.n	800a95c <_printf_i+0x1c4>
 800a958:	6019      	str	r1, [r3, #0]
 800a95a:	e002      	b.n	800a962 <_printf_i+0x1ca>
 800a95c:	0670      	lsls	r0, r6, #25
 800a95e:	d5fb      	bpl.n	800a958 <_printf_i+0x1c0>
 800a960:	8019      	strh	r1, [r3, #0]
 800a962:	2300      	movs	r3, #0
 800a964:	6123      	str	r3, [r4, #16]
 800a966:	4615      	mov	r5, r2
 800a968:	e7bc      	b.n	800a8e4 <_printf_i+0x14c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	602a      	str	r2, [r5, #0]
 800a970:	681d      	ldr	r5, [r3, #0]
 800a972:	6862      	ldr	r2, [r4, #4]
 800a974:	2100      	movs	r1, #0
 800a976:	4628      	mov	r0, r5
 800a978:	f7f5 fc2a 	bl	80001d0 <memchr>
 800a97c:	b108      	cbz	r0, 800a982 <_printf_i+0x1ea>
 800a97e:	1b40      	subs	r0, r0, r5
 800a980:	6060      	str	r0, [r4, #4]
 800a982:	6863      	ldr	r3, [r4, #4]
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	2300      	movs	r3, #0
 800a988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a98c:	e7aa      	b.n	800a8e4 <_printf_i+0x14c>
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	462a      	mov	r2, r5
 800a992:	4649      	mov	r1, r9
 800a994:	4640      	mov	r0, r8
 800a996:	47d0      	blx	sl
 800a998:	3001      	adds	r0, #1
 800a99a:	d0ad      	beq.n	800a8f8 <_printf_i+0x160>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	079b      	lsls	r3, r3, #30
 800a9a0:	d413      	bmi.n	800a9ca <_printf_i+0x232>
 800a9a2:	68e0      	ldr	r0, [r4, #12]
 800a9a4:	9b03      	ldr	r3, [sp, #12]
 800a9a6:	4298      	cmp	r0, r3
 800a9a8:	bfb8      	it	lt
 800a9aa:	4618      	movlt	r0, r3
 800a9ac:	e7a6      	b.n	800a8fc <_printf_i+0x164>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	4649      	mov	r1, r9
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	47d0      	blx	sl
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d09d      	beq.n	800a8f8 <_printf_i+0x160>
 800a9bc:	3501      	adds	r5, #1
 800a9be:	68e3      	ldr	r3, [r4, #12]
 800a9c0:	9903      	ldr	r1, [sp, #12]
 800a9c2:	1a5b      	subs	r3, r3, r1
 800a9c4:	42ab      	cmp	r3, r5
 800a9c6:	dcf2      	bgt.n	800a9ae <_printf_i+0x216>
 800a9c8:	e7eb      	b.n	800a9a2 <_printf_i+0x20a>
 800a9ca:	2500      	movs	r5, #0
 800a9cc:	f104 0619 	add.w	r6, r4, #25
 800a9d0:	e7f5      	b.n	800a9be <_printf_i+0x226>
 800a9d2:	bf00      	nop
 800a9d4:	0800fe62 	.word	0x0800fe62
 800a9d8:	0800fe73 	.word	0x0800fe73

0800a9dc <_scanf_float>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	b087      	sub	sp, #28
 800a9e2:	4617      	mov	r7, r2
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	688b      	ldr	r3, [r1, #8]
 800a9e8:	1e5a      	subs	r2, r3, #1
 800a9ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9ee:	bf83      	ittte	hi
 800a9f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9f4:	195b      	addhi	r3, r3, r5
 800a9f6:	9302      	strhi	r3, [sp, #8]
 800a9f8:	2300      	movls	r3, #0
 800a9fa:	bf86      	itte	hi
 800a9fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa00:	608b      	strhi	r3, [r1, #8]
 800aa02:	9302      	strls	r3, [sp, #8]
 800aa04:	680b      	ldr	r3, [r1, #0]
 800aa06:	468b      	mov	fp, r1
 800aa08:	2500      	movs	r5, #0
 800aa0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa0e:	f84b 3b1c 	str.w	r3, [fp], #28
 800aa12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa16:	4680      	mov	r8, r0
 800aa18:	460c      	mov	r4, r1
 800aa1a:	465e      	mov	r6, fp
 800aa1c:	46aa      	mov	sl, r5
 800aa1e:	46a9      	mov	r9, r5
 800aa20:	9501      	str	r5, [sp, #4]
 800aa22:	68a2      	ldr	r2, [r4, #8]
 800aa24:	b152      	cbz	r2, 800aa3c <_scanf_float+0x60>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b4e      	cmp	r3, #78	; 0x4e
 800aa2c:	d864      	bhi.n	800aaf8 <_scanf_float+0x11c>
 800aa2e:	2b40      	cmp	r3, #64	; 0x40
 800aa30:	d83c      	bhi.n	800aaac <_scanf_float+0xd0>
 800aa32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aa36:	b2c8      	uxtb	r0, r1
 800aa38:	280e      	cmp	r0, #14
 800aa3a:	d93a      	bls.n	800aab2 <_scanf_float+0xd6>
 800aa3c:	f1b9 0f00 	cmp.w	r9, #0
 800aa40:	d003      	beq.n	800aa4a <_scanf_float+0x6e>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aa4e:	f1ba 0f01 	cmp.w	sl, #1
 800aa52:	f200 8113 	bhi.w	800ac7c <_scanf_float+0x2a0>
 800aa56:	455e      	cmp	r6, fp
 800aa58:	f200 8105 	bhi.w	800ac66 <_scanf_float+0x28a>
 800aa5c:	2501      	movs	r5, #1
 800aa5e:	4628      	mov	r0, r5
 800aa60:	b007      	add	sp, #28
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800aa6a:	2a0d      	cmp	r2, #13
 800aa6c:	d8e6      	bhi.n	800aa3c <_scanf_float+0x60>
 800aa6e:	a101      	add	r1, pc, #4	; (adr r1, 800aa74 <_scanf_float+0x98>)
 800aa70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa74:	0800abb3 	.word	0x0800abb3
 800aa78:	0800aa3d 	.word	0x0800aa3d
 800aa7c:	0800aa3d 	.word	0x0800aa3d
 800aa80:	0800aa3d 	.word	0x0800aa3d
 800aa84:	0800ac13 	.word	0x0800ac13
 800aa88:	0800abeb 	.word	0x0800abeb
 800aa8c:	0800aa3d 	.word	0x0800aa3d
 800aa90:	0800aa3d 	.word	0x0800aa3d
 800aa94:	0800abc1 	.word	0x0800abc1
 800aa98:	0800aa3d 	.word	0x0800aa3d
 800aa9c:	0800aa3d 	.word	0x0800aa3d
 800aaa0:	0800aa3d 	.word	0x0800aa3d
 800aaa4:	0800aa3d 	.word	0x0800aa3d
 800aaa8:	0800ab79 	.word	0x0800ab79
 800aaac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800aab0:	e7db      	b.n	800aa6a <_scanf_float+0x8e>
 800aab2:	290e      	cmp	r1, #14
 800aab4:	d8c2      	bhi.n	800aa3c <_scanf_float+0x60>
 800aab6:	a001      	add	r0, pc, #4	; (adr r0, 800aabc <_scanf_float+0xe0>)
 800aab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aabc:	0800ab6b 	.word	0x0800ab6b
 800aac0:	0800aa3d 	.word	0x0800aa3d
 800aac4:	0800ab6b 	.word	0x0800ab6b
 800aac8:	0800abff 	.word	0x0800abff
 800aacc:	0800aa3d 	.word	0x0800aa3d
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab55 	.word	0x0800ab55
 800aad8:	0800ab55 	.word	0x0800ab55
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab55 	.word	0x0800ab55
 800aae4:	0800ab55 	.word	0x0800ab55
 800aae8:	0800ab55 	.word	0x0800ab55
 800aaec:	0800ab55 	.word	0x0800ab55
 800aaf0:	0800ab55 	.word	0x0800ab55
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	2b6e      	cmp	r3, #110	; 0x6e
 800aafa:	d809      	bhi.n	800ab10 <_scanf_float+0x134>
 800aafc:	2b60      	cmp	r3, #96	; 0x60
 800aafe:	d8b2      	bhi.n	800aa66 <_scanf_float+0x8a>
 800ab00:	2b54      	cmp	r3, #84	; 0x54
 800ab02:	d077      	beq.n	800abf4 <_scanf_float+0x218>
 800ab04:	2b59      	cmp	r3, #89	; 0x59
 800ab06:	d199      	bne.n	800aa3c <_scanf_float+0x60>
 800ab08:	2d07      	cmp	r5, #7
 800ab0a:	d197      	bne.n	800aa3c <_scanf_float+0x60>
 800ab0c:	2508      	movs	r5, #8
 800ab0e:	e029      	b.n	800ab64 <_scanf_float+0x188>
 800ab10:	2b74      	cmp	r3, #116	; 0x74
 800ab12:	d06f      	beq.n	800abf4 <_scanf_float+0x218>
 800ab14:	2b79      	cmp	r3, #121	; 0x79
 800ab16:	e7f6      	b.n	800ab06 <_scanf_float+0x12a>
 800ab18:	6821      	ldr	r1, [r4, #0]
 800ab1a:	05c8      	lsls	r0, r1, #23
 800ab1c:	d51a      	bpl.n	800ab54 <_scanf_float+0x178>
 800ab1e:	9b02      	ldr	r3, [sp, #8]
 800ab20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab24:	6021      	str	r1, [r4, #0]
 800ab26:	f109 0901 	add.w	r9, r9, #1
 800ab2a:	b11b      	cbz	r3, 800ab34 <_scanf_float+0x158>
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	3201      	adds	r2, #1
 800ab30:	9302      	str	r3, [sp, #8]
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	68a3      	ldr	r3, [r4, #8]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	60a3      	str	r3, [r4, #8]
 800ab3a:	6923      	ldr	r3, [r4, #16]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	6123      	str	r3, [r4, #16]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	607b      	str	r3, [r7, #4]
 800ab48:	f340 8084 	ble.w	800ac54 <_scanf_float+0x278>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	603b      	str	r3, [r7, #0]
 800ab52:	e766      	b.n	800aa22 <_scanf_float+0x46>
 800ab54:	eb1a 0f05 	cmn.w	sl, r5
 800ab58:	f47f af70 	bne.w	800aa3c <_scanf_float+0x60>
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	f806 3b01 	strb.w	r3, [r6], #1
 800ab68:	e7e4      	b.n	800ab34 <_scanf_float+0x158>
 800ab6a:	6822      	ldr	r2, [r4, #0]
 800ab6c:	0610      	lsls	r0, r2, #24
 800ab6e:	f57f af65 	bpl.w	800aa3c <_scanf_float+0x60>
 800ab72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab76:	e7f4      	b.n	800ab62 <_scanf_float+0x186>
 800ab78:	f1ba 0f00 	cmp.w	sl, #0
 800ab7c:	d10e      	bne.n	800ab9c <_scanf_float+0x1c0>
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d10e      	bne.n	800aba2 <_scanf_float+0x1c6>
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab8e:	d108      	bne.n	800aba2 <_scanf_float+0x1c6>
 800ab90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	f04f 0a01 	mov.w	sl, #1
 800ab9a:	e7e3      	b.n	800ab64 <_scanf_float+0x188>
 800ab9c:	f1ba 0f02 	cmp.w	sl, #2
 800aba0:	d055      	beq.n	800ac4e <_scanf_float+0x272>
 800aba2:	2d01      	cmp	r5, #1
 800aba4:	d002      	beq.n	800abac <_scanf_float+0x1d0>
 800aba6:	2d04      	cmp	r5, #4
 800aba8:	f47f af48 	bne.w	800aa3c <_scanf_float+0x60>
 800abac:	3501      	adds	r5, #1
 800abae:	b2ed      	uxtb	r5, r5
 800abb0:	e7d8      	b.n	800ab64 <_scanf_float+0x188>
 800abb2:	f1ba 0f01 	cmp.w	sl, #1
 800abb6:	f47f af41 	bne.w	800aa3c <_scanf_float+0x60>
 800abba:	f04f 0a02 	mov.w	sl, #2
 800abbe:	e7d1      	b.n	800ab64 <_scanf_float+0x188>
 800abc0:	b97d      	cbnz	r5, 800abe2 <_scanf_float+0x206>
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	f47f af3c 	bne.w	800aa42 <_scanf_float+0x66>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800abd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800abd4:	f47f af39 	bne.w	800aa4a <_scanf_float+0x6e>
 800abd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	2501      	movs	r5, #1
 800abe0:	e7c0      	b.n	800ab64 <_scanf_float+0x188>
 800abe2:	2d03      	cmp	r5, #3
 800abe4:	d0e2      	beq.n	800abac <_scanf_float+0x1d0>
 800abe6:	2d05      	cmp	r5, #5
 800abe8:	e7de      	b.n	800aba8 <_scanf_float+0x1cc>
 800abea:	2d02      	cmp	r5, #2
 800abec:	f47f af26 	bne.w	800aa3c <_scanf_float+0x60>
 800abf0:	2503      	movs	r5, #3
 800abf2:	e7b7      	b.n	800ab64 <_scanf_float+0x188>
 800abf4:	2d06      	cmp	r5, #6
 800abf6:	f47f af21 	bne.w	800aa3c <_scanf_float+0x60>
 800abfa:	2507      	movs	r5, #7
 800abfc:	e7b2      	b.n	800ab64 <_scanf_float+0x188>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	0591      	lsls	r1, r2, #22
 800ac02:	f57f af1b 	bpl.w	800aa3c <_scanf_float+0x60>
 800ac06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ac10:	e7a8      	b.n	800ab64 <_scanf_float+0x188>
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ac18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ac1c:	d006      	beq.n	800ac2c <_scanf_float+0x250>
 800ac1e:	0550      	lsls	r0, r2, #21
 800ac20:	f57f af0c 	bpl.w	800aa3c <_scanf_float+0x60>
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	f43f af0f 	beq.w	800aa4a <_scanf_float+0x6e>
 800ac2c:	0591      	lsls	r1, r2, #22
 800ac2e:	bf58      	it	pl
 800ac30:	9901      	ldrpl	r1, [sp, #4]
 800ac32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac36:	bf58      	it	pl
 800ac38:	eba9 0101 	subpl.w	r1, r9, r1
 800ac3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ac40:	bf58      	it	pl
 800ac42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac46:	6022      	str	r2, [r4, #0]
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	e78a      	b.n	800ab64 <_scanf_float+0x188>
 800ac4e:	f04f 0a03 	mov.w	sl, #3
 800ac52:	e787      	b.n	800ab64 <_scanf_float+0x188>
 800ac54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4798      	blx	r3
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aedf 	beq.w	800aa22 <_scanf_float+0x46>
 800ac64:	e6ea      	b.n	800aa3c <_scanf_float+0x60>
 800ac66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac6e:	463a      	mov	r2, r7
 800ac70:	4640      	mov	r0, r8
 800ac72:	4798      	blx	r3
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	e6ec      	b.n	800aa56 <_scanf_float+0x7a>
 800ac7c:	1e6b      	subs	r3, r5, #1
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d825      	bhi.n	800acce <_scanf_float+0x2f2>
 800ac82:	2d02      	cmp	r5, #2
 800ac84:	d836      	bhi.n	800acf4 <_scanf_float+0x318>
 800ac86:	455e      	cmp	r6, fp
 800ac88:	f67f aee8 	bls.w	800aa5c <_scanf_float+0x80>
 800ac8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac94:	463a      	mov	r2, r7
 800ac96:	4640      	mov	r0, r8
 800ac98:	4798      	blx	r3
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	e7f1      	b.n	800ac86 <_scanf_float+0x2aa>
 800aca2:	9802      	ldr	r0, [sp, #8]
 800aca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aca8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800acac:	9002      	str	r0, [sp, #8]
 800acae:	463a      	mov	r2, r7
 800acb0:	4640      	mov	r0, r8
 800acb2:	4798      	blx	r3
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	6123      	str	r3, [r4, #16]
 800acba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800acbe:	fa5f fa8a 	uxtb.w	sl, sl
 800acc2:	f1ba 0f02 	cmp.w	sl, #2
 800acc6:	d1ec      	bne.n	800aca2 <_scanf_float+0x2c6>
 800acc8:	3d03      	subs	r5, #3
 800acca:	b2ed      	uxtb	r5, r5
 800accc:	1b76      	subs	r6, r6, r5
 800acce:	6823      	ldr	r3, [r4, #0]
 800acd0:	05da      	lsls	r2, r3, #23
 800acd2:	d52f      	bpl.n	800ad34 <_scanf_float+0x358>
 800acd4:	055b      	lsls	r3, r3, #21
 800acd6:	d510      	bpl.n	800acfa <_scanf_float+0x31e>
 800acd8:	455e      	cmp	r6, fp
 800acda:	f67f aebf 	bls.w	800aa5c <_scanf_float+0x80>
 800acde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ace2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace6:	463a      	mov	r2, r7
 800ace8:	4640      	mov	r0, r8
 800acea:	4798      	blx	r3
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	3b01      	subs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7f1      	b.n	800acd8 <_scanf_float+0x2fc>
 800acf4:	46aa      	mov	sl, r5
 800acf6:	9602      	str	r6, [sp, #8]
 800acf8:	e7df      	b.n	800acba <_scanf_float+0x2de>
 800acfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	2965      	cmp	r1, #101	; 0x65
 800ad02:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ad06:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	d00c      	beq.n	800ad28 <_scanf_float+0x34c>
 800ad0e:	2945      	cmp	r1, #69	; 0x45
 800ad10:	d00a      	beq.n	800ad28 <_scanf_float+0x34c>
 800ad12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad16:	463a      	mov	r2, r7
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4798      	blx	r3
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	1eb5      	subs	r5, r6, #2
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4798      	blx	r3
 800ad32:	462e      	mov	r6, r5
 800ad34:	6825      	ldr	r5, [r4, #0]
 800ad36:	f015 0510 	ands.w	r5, r5, #16
 800ad3a:	d158      	bne.n	800adee <_scanf_float+0x412>
 800ad3c:	7035      	strb	r5, [r6, #0]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad48:	d11c      	bne.n	800ad84 <_scanf_float+0x3a8>
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	454b      	cmp	r3, r9
 800ad4e:	eba3 0209 	sub.w	r2, r3, r9
 800ad52:	d124      	bne.n	800ad9e <_scanf_float+0x3c2>
 800ad54:	2200      	movs	r2, #0
 800ad56:	4659      	mov	r1, fp
 800ad58:	4640      	mov	r0, r8
 800ad5a:	f000 ff2d 	bl	800bbb8 <_strtod_r>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	6821      	ldr	r1, [r4, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f011 0f02 	tst.w	r1, #2
 800ad68:	ec57 6b10 	vmov	r6, r7, d0
 800ad6c:	f103 0204 	add.w	r2, r3, #4
 800ad70:	d020      	beq.n	800adb4 <_scanf_float+0x3d8>
 800ad72:	9903      	ldr	r1, [sp, #12]
 800ad74:	600a      	str	r2, [r1, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	e9c3 6700 	strd	r6, r7, [r3]
 800ad7c:	68e3      	ldr	r3, [r4, #12]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	60e3      	str	r3, [r4, #12]
 800ad82:	e66c      	b.n	800aa5e <_scanf_float+0x82>
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d0e4      	beq.n	800ad54 <_scanf_float+0x378>
 800ad8a:	9905      	ldr	r1, [sp, #20]
 800ad8c:	230a      	movs	r3, #10
 800ad8e:	462a      	mov	r2, r5
 800ad90:	3101      	adds	r1, #1
 800ad92:	4640      	mov	r0, r8
 800ad94:	f000 ffa4 	bl	800bce0 <_strtol_r>
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	9e05      	ldr	r6, [sp, #20]
 800ad9c:	1ac2      	subs	r2, r0, r3
 800ad9e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ada2:	429e      	cmp	r6, r3
 800ada4:	bf28      	it	cs
 800ada6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800adaa:	4912      	ldr	r1, [pc, #72]	; (800adf4 <_scanf_float+0x418>)
 800adac:	4630      	mov	r0, r6
 800adae:	f000 f831 	bl	800ae14 <siprintf>
 800adb2:	e7cf      	b.n	800ad54 <_scanf_float+0x378>
 800adb4:	f011 0f04 	tst.w	r1, #4
 800adb8:	9903      	ldr	r1, [sp, #12]
 800adba:	600a      	str	r2, [r1, #0]
 800adbc:	d1db      	bne.n	800ad76 <_scanf_float+0x39a>
 800adbe:	f8d3 8000 	ldr.w	r8, [r3]
 800adc2:	ee10 2a10 	vmov	r2, s0
 800adc6:	ee10 0a10 	vmov	r0, s0
 800adca:	463b      	mov	r3, r7
 800adcc:	4639      	mov	r1, r7
 800adce:	f7f5 fead 	bl	8000b2c <__aeabi_dcmpun>
 800add2:	b128      	cbz	r0, 800ade0 <_scanf_float+0x404>
 800add4:	4808      	ldr	r0, [pc, #32]	; (800adf8 <_scanf_float+0x41c>)
 800add6:	f001 f8d3 	bl	800bf80 <nanf>
 800adda:	ed88 0a00 	vstr	s0, [r8]
 800adde:	e7cd      	b.n	800ad7c <_scanf_float+0x3a0>
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 ff00 	bl	8000be8 <__aeabi_d2f>
 800ade8:	f8c8 0000 	str.w	r0, [r8]
 800adec:	e7c6      	b.n	800ad7c <_scanf_float+0x3a0>
 800adee:	2500      	movs	r5, #0
 800adf0:	e635      	b.n	800aa5e <_scanf_float+0x82>
 800adf2:	bf00      	nop
 800adf4:	0800fe84 	.word	0x0800fe84
 800adf8:	08010095 	.word	0x08010095

0800adfc <__malloc_lock>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__malloc_lock+0x8>)
 800adfe:	f001 b8a4 	b.w	800bf4a <__retarget_lock_acquire_recursive>
 800ae02:	bf00      	nop
 800ae04:	20004840 	.word	0x20004840

0800ae08 <__malloc_unlock>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__malloc_unlock+0x8>)
 800ae0a:	f001 b89f 	b.w	800bf4c <__retarget_lock_release_recursive>
 800ae0e:	bf00      	nop
 800ae10:	20004840 	.word	0x20004840

0800ae14 <siprintf>:
 800ae14:	b40e      	push	{r1, r2, r3}
 800ae16:	b500      	push	{lr}
 800ae18:	b09c      	sub	sp, #112	; 0x70
 800ae1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	9006      	str	r0, [sp, #24]
 800ae20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae24:	4809      	ldr	r0, [pc, #36]	; (800ae4c <siprintf+0x38>)
 800ae26:	9107      	str	r1, [sp, #28]
 800ae28:	9104      	str	r1, [sp, #16]
 800ae2a:	4909      	ldr	r1, [pc, #36]	; (800ae50 <siprintf+0x3c>)
 800ae2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae30:	9105      	str	r1, [sp, #20]
 800ae32:	6800      	ldr	r0, [r0, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	a902      	add	r1, sp, #8
 800ae38:	f002 fb3e 	bl	800d4b8 <_svfiprintf_r>
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	701a      	strb	r2, [r3, #0]
 800ae42:	b01c      	add	sp, #112	; 0x70
 800ae44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae48:	b003      	add	sp, #12
 800ae4a:	4770      	bx	lr
 800ae4c:	200005d8 	.word	0x200005d8
 800ae50:	ffff0208 	.word	0xffff0208

0800ae54 <std>:
 800ae54:	2300      	movs	r3, #0
 800ae56:	b510      	push	{r4, lr}
 800ae58:	4604      	mov	r4, r0
 800ae5a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae62:	6083      	str	r3, [r0, #8]
 800ae64:	8181      	strh	r1, [r0, #12]
 800ae66:	6643      	str	r3, [r0, #100]	; 0x64
 800ae68:	81c2      	strh	r2, [r0, #14]
 800ae6a:	6183      	str	r3, [r0, #24]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	2208      	movs	r2, #8
 800ae70:	305c      	adds	r0, #92	; 0x5c
 800ae72:	f000 ffcd 	bl	800be10 <memset>
 800ae76:	4b0d      	ldr	r3, [pc, #52]	; (800aeac <std+0x58>)
 800ae78:	6263      	str	r3, [r4, #36]	; 0x24
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <std+0x5c>)
 800ae7c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <std+0x60>)
 800ae80:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae82:	4b0d      	ldr	r3, [pc, #52]	; (800aeb8 <std+0x64>)
 800ae84:	6323      	str	r3, [r4, #48]	; 0x30
 800ae86:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <std+0x68>)
 800ae88:	6224      	str	r4, [r4, #32]
 800ae8a:	429c      	cmp	r4, r3
 800ae8c:	d006      	beq.n	800ae9c <std+0x48>
 800ae8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ae92:	4294      	cmp	r4, r2
 800ae94:	d002      	beq.n	800ae9c <std+0x48>
 800ae96:	33d0      	adds	r3, #208	; 0xd0
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	d105      	bne.n	800aea8 <std+0x54>
 800ae9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea4:	f001 b850 	b.w	800bf48 <__retarget_lock_init_recursive>
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800e18f 	.word	0x0800e18f
 800aeb0:	0800e1b1 	.word	0x0800e1b1
 800aeb4:	0800e1e9 	.word	0x0800e1e9
 800aeb8:	0800e20d 	.word	0x0800e20d
 800aebc:	20004700 	.word	0x20004700

0800aec0 <stdio_exit_handler>:
 800aec0:	4a02      	ldr	r2, [pc, #8]	; (800aecc <stdio_exit_handler+0xc>)
 800aec2:	4903      	ldr	r1, [pc, #12]	; (800aed0 <stdio_exit_handler+0x10>)
 800aec4:	4803      	ldr	r0, [pc, #12]	; (800aed4 <stdio_exit_handler+0x14>)
 800aec6:	f000 bf17 	b.w	800bcf8 <_fwalk_sglue>
 800aeca:	bf00      	nop
 800aecc:	20000414 	.word	0x20000414
 800aed0:	0800d7e5 	.word	0x0800d7e5
 800aed4:	2000058c 	.word	0x2000058c

0800aed8 <cleanup_stdio>:
 800aed8:	6841      	ldr	r1, [r0, #4]
 800aeda:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <cleanup_stdio+0x34>)
 800aedc:	4299      	cmp	r1, r3
 800aede:	b510      	push	{r4, lr}
 800aee0:	4604      	mov	r4, r0
 800aee2:	d001      	beq.n	800aee8 <cleanup_stdio+0x10>
 800aee4:	f002 fc7e 	bl	800d7e4 <_fflush_r>
 800aee8:	68a1      	ldr	r1, [r4, #8]
 800aeea:	4b09      	ldr	r3, [pc, #36]	; (800af10 <cleanup_stdio+0x38>)
 800aeec:	4299      	cmp	r1, r3
 800aeee:	d002      	beq.n	800aef6 <cleanup_stdio+0x1e>
 800aef0:	4620      	mov	r0, r4
 800aef2:	f002 fc77 	bl	800d7e4 <_fflush_r>
 800aef6:	68e1      	ldr	r1, [r4, #12]
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <cleanup_stdio+0x3c>)
 800aefa:	4299      	cmp	r1, r3
 800aefc:	d004      	beq.n	800af08 <cleanup_stdio+0x30>
 800aefe:	4620      	mov	r0, r4
 800af00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af04:	f002 bc6e 	b.w	800d7e4 <_fflush_r>
 800af08:	bd10      	pop	{r4, pc}
 800af0a:	bf00      	nop
 800af0c:	20004700 	.word	0x20004700
 800af10:	20004768 	.word	0x20004768
 800af14:	200047d0 	.word	0x200047d0

0800af18 <global_stdio_init.part.0>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	4b0b      	ldr	r3, [pc, #44]	; (800af48 <global_stdio_init.part.0+0x30>)
 800af1c:	4c0b      	ldr	r4, [pc, #44]	; (800af4c <global_stdio_init.part.0+0x34>)
 800af1e:	4a0c      	ldr	r2, [pc, #48]	; (800af50 <global_stdio_init.part.0+0x38>)
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	4620      	mov	r0, r4
 800af24:	2200      	movs	r2, #0
 800af26:	2104      	movs	r1, #4
 800af28:	f7ff ff94 	bl	800ae54 <std>
 800af2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800af30:	2201      	movs	r2, #1
 800af32:	2109      	movs	r1, #9
 800af34:	f7ff ff8e 	bl	800ae54 <std>
 800af38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800af3c:	2202      	movs	r2, #2
 800af3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af42:	2112      	movs	r1, #18
 800af44:	f7ff bf86 	b.w	800ae54 <std>
 800af48:	20004838 	.word	0x20004838
 800af4c:	20004700 	.word	0x20004700
 800af50:	0800aec1 	.word	0x0800aec1

0800af54 <__sfp_lock_acquire>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sfp_lock_acquire+0x8>)
 800af56:	f000 bff8 	b.w	800bf4a <__retarget_lock_acquire_recursive>
 800af5a:	bf00      	nop
 800af5c:	20004841 	.word	0x20004841

0800af60 <__sfp_lock_release>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__sfp_lock_release+0x8>)
 800af62:	f000 bff3 	b.w	800bf4c <__retarget_lock_release_recursive>
 800af66:	bf00      	nop
 800af68:	20004841 	.word	0x20004841

0800af6c <__sinit>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	f7ff fff0 	bl	800af54 <__sfp_lock_acquire>
 800af74:	6a23      	ldr	r3, [r4, #32]
 800af76:	b11b      	cbz	r3, 800af80 <__sinit+0x14>
 800af78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af7c:	f7ff bff0 	b.w	800af60 <__sfp_lock_release>
 800af80:	4b04      	ldr	r3, [pc, #16]	; (800af94 <__sinit+0x28>)
 800af82:	6223      	str	r3, [r4, #32]
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <__sinit+0x2c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f5      	bne.n	800af78 <__sinit+0xc>
 800af8c:	f7ff ffc4 	bl	800af18 <global_stdio_init.part.0>
 800af90:	e7f2      	b.n	800af78 <__sinit+0xc>
 800af92:	bf00      	nop
 800af94:	0800aed9 	.word	0x0800aed9
 800af98:	20004838 	.word	0x20004838

0800af9c <sulp>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	4604      	mov	r4, r0
 800afa0:	460d      	mov	r5, r1
 800afa2:	ec45 4b10 	vmov	d0, r4, r5
 800afa6:	4616      	mov	r6, r2
 800afa8:	f002 ffb0 	bl	800df0c <__ulp>
 800afac:	ec51 0b10 	vmov	r0, r1, d0
 800afb0:	b17e      	cbz	r6, 800afd2 <sulp+0x36>
 800afb2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800afb6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dd09      	ble.n	800afd2 <sulp+0x36>
 800afbe:	051b      	lsls	r3, r3, #20
 800afc0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800afc4:	2400      	movs	r4, #0
 800afc6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	f7f5 fb13 	bl	80005f8 <__aeabi_dmul>
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
 800afd4:	0000      	movs	r0, r0
	...

0800afd8 <_strtod_l>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	ed2d 8b02 	vpush	{d8}
 800afe0:	b09b      	sub	sp, #108	; 0x6c
 800afe2:	4604      	mov	r4, r0
 800afe4:	9213      	str	r2, [sp, #76]	; 0x4c
 800afe6:	2200      	movs	r2, #0
 800afe8:	9216      	str	r2, [sp, #88]	; 0x58
 800afea:	460d      	mov	r5, r1
 800afec:	f04f 0800 	mov.w	r8, #0
 800aff0:	f04f 0900 	mov.w	r9, #0
 800aff4:	460a      	mov	r2, r1
 800aff6:	9215      	str	r2, [sp, #84]	; 0x54
 800aff8:	7811      	ldrb	r1, [r2, #0]
 800affa:	292b      	cmp	r1, #43	; 0x2b
 800affc:	d04c      	beq.n	800b098 <_strtod_l+0xc0>
 800affe:	d83a      	bhi.n	800b076 <_strtod_l+0x9e>
 800b000:	290d      	cmp	r1, #13
 800b002:	d834      	bhi.n	800b06e <_strtod_l+0x96>
 800b004:	2908      	cmp	r1, #8
 800b006:	d834      	bhi.n	800b072 <_strtod_l+0x9a>
 800b008:	2900      	cmp	r1, #0
 800b00a:	d03d      	beq.n	800b088 <_strtod_l+0xb0>
 800b00c:	2200      	movs	r2, #0
 800b00e:	920a      	str	r2, [sp, #40]	; 0x28
 800b010:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b012:	7832      	ldrb	r2, [r6, #0]
 800b014:	2a30      	cmp	r2, #48	; 0x30
 800b016:	f040 80b4 	bne.w	800b182 <_strtod_l+0x1aa>
 800b01a:	7872      	ldrb	r2, [r6, #1]
 800b01c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b020:	2a58      	cmp	r2, #88	; 0x58
 800b022:	d170      	bne.n	800b106 <_strtod_l+0x12e>
 800b024:	9302      	str	r3, [sp, #8]
 800b026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b028:	9301      	str	r3, [sp, #4]
 800b02a:	ab16      	add	r3, sp, #88	; 0x58
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4a8e      	ldr	r2, [pc, #568]	; (800b268 <_strtod_l+0x290>)
 800b030:	ab17      	add	r3, sp, #92	; 0x5c
 800b032:	a915      	add	r1, sp, #84	; 0x54
 800b034:	4620      	mov	r0, r4
 800b036:	f001 fef5 	bl	800ce24 <__gethex>
 800b03a:	f010 070f 	ands.w	r7, r0, #15
 800b03e:	4605      	mov	r5, r0
 800b040:	d005      	beq.n	800b04e <_strtod_l+0x76>
 800b042:	2f06      	cmp	r7, #6
 800b044:	d12a      	bne.n	800b09c <_strtod_l+0xc4>
 800b046:	3601      	adds	r6, #1
 800b048:	2300      	movs	r3, #0
 800b04a:	9615      	str	r6, [sp, #84]	; 0x54
 800b04c:	930a      	str	r3, [sp, #40]	; 0x28
 800b04e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b050:	2b00      	cmp	r3, #0
 800b052:	f040 857f 	bne.w	800bb54 <_strtod_l+0xb7c>
 800b056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b058:	b1db      	cbz	r3, 800b092 <_strtod_l+0xba>
 800b05a:	4642      	mov	r2, r8
 800b05c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b060:	ec43 2b10 	vmov	d0, r2, r3
 800b064:	b01b      	add	sp, #108	; 0x6c
 800b066:	ecbd 8b02 	vpop	{d8}
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	2920      	cmp	r1, #32
 800b070:	d1cc      	bne.n	800b00c <_strtod_l+0x34>
 800b072:	3201      	adds	r2, #1
 800b074:	e7bf      	b.n	800aff6 <_strtod_l+0x1e>
 800b076:	292d      	cmp	r1, #45	; 0x2d
 800b078:	d1c8      	bne.n	800b00c <_strtod_l+0x34>
 800b07a:	2101      	movs	r1, #1
 800b07c:	910a      	str	r1, [sp, #40]	; 0x28
 800b07e:	1c51      	adds	r1, r2, #1
 800b080:	9115      	str	r1, [sp, #84]	; 0x54
 800b082:	7852      	ldrb	r2, [r2, #1]
 800b084:	2a00      	cmp	r2, #0
 800b086:	d1c3      	bne.n	800b010 <_strtod_l+0x38>
 800b088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b08a:	9515      	str	r5, [sp, #84]	; 0x54
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 855f 	bne.w	800bb50 <_strtod_l+0xb78>
 800b092:	4642      	mov	r2, r8
 800b094:	464b      	mov	r3, r9
 800b096:	e7e3      	b.n	800b060 <_strtod_l+0x88>
 800b098:	2100      	movs	r1, #0
 800b09a:	e7ef      	b.n	800b07c <_strtod_l+0xa4>
 800b09c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b09e:	b13a      	cbz	r2, 800b0b0 <_strtod_l+0xd8>
 800b0a0:	2135      	movs	r1, #53	; 0x35
 800b0a2:	a818      	add	r0, sp, #96	; 0x60
 800b0a4:	f003 f82f 	bl	800e106 <__copybits>
 800b0a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f002 fc02 	bl	800d8b4 <_Bfree>
 800b0b0:	3f01      	subs	r7, #1
 800b0b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0b4:	2f04      	cmp	r7, #4
 800b0b6:	d806      	bhi.n	800b0c6 <_strtod_l+0xee>
 800b0b8:	e8df f007 	tbb	[pc, r7]
 800b0bc:	201d0314 	.word	0x201d0314
 800b0c0:	14          	.byte	0x14
 800b0c1:	00          	.byte	0x00
 800b0c2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b0c6:	05e9      	lsls	r1, r5, #23
 800b0c8:	bf48      	it	mi
 800b0ca:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b0ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0d2:	0d1b      	lsrs	r3, r3, #20
 800b0d4:	051b      	lsls	r3, r3, #20
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1b9      	bne.n	800b04e <_strtod_l+0x76>
 800b0da:	f000 ff0b 	bl	800bef4 <__errno>
 800b0de:	2322      	movs	r3, #34	; 0x22
 800b0e0:	6003      	str	r3, [r0, #0]
 800b0e2:	e7b4      	b.n	800b04e <_strtod_l+0x76>
 800b0e4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b0e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b0ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b0f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b0f4:	e7e7      	b.n	800b0c6 <_strtod_l+0xee>
 800b0f6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b270 <_strtod_l+0x298>
 800b0fa:	e7e4      	b.n	800b0c6 <_strtod_l+0xee>
 800b0fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b100:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b104:	e7df      	b.n	800b0c6 <_strtod_l+0xee>
 800b106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	9215      	str	r2, [sp, #84]	; 0x54
 800b10c:	785b      	ldrb	r3, [r3, #1]
 800b10e:	2b30      	cmp	r3, #48	; 0x30
 800b110:	d0f9      	beq.n	800b106 <_strtod_l+0x12e>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d09b      	beq.n	800b04e <_strtod_l+0x76>
 800b116:	2301      	movs	r3, #1
 800b118:	f04f 0a00 	mov.w	sl, #0
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b120:	930b      	str	r3, [sp, #44]	; 0x2c
 800b122:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b126:	46d3      	mov	fp, sl
 800b128:	220a      	movs	r2, #10
 800b12a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b12c:	7806      	ldrb	r6, [r0, #0]
 800b12e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b132:	b2d9      	uxtb	r1, r3
 800b134:	2909      	cmp	r1, #9
 800b136:	d926      	bls.n	800b186 <_strtod_l+0x1ae>
 800b138:	494c      	ldr	r1, [pc, #304]	; (800b26c <_strtod_l+0x294>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	f000 fdfa 	bl	800bd34 <strncmp>
 800b140:	2800      	cmp	r0, #0
 800b142:	d030      	beq.n	800b1a6 <_strtod_l+0x1ce>
 800b144:	2000      	movs	r0, #0
 800b146:	4632      	mov	r2, r6
 800b148:	9005      	str	r0, [sp, #20]
 800b14a:	465e      	mov	r6, fp
 800b14c:	4603      	mov	r3, r0
 800b14e:	2a65      	cmp	r2, #101	; 0x65
 800b150:	d001      	beq.n	800b156 <_strtod_l+0x17e>
 800b152:	2a45      	cmp	r2, #69	; 0x45
 800b154:	d113      	bne.n	800b17e <_strtod_l+0x1a6>
 800b156:	b91e      	cbnz	r6, 800b160 <_strtod_l+0x188>
 800b158:	9a04      	ldr	r2, [sp, #16]
 800b15a:	4302      	orrs	r2, r0
 800b15c:	d094      	beq.n	800b088 <_strtod_l+0xb0>
 800b15e:	2600      	movs	r6, #0
 800b160:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b162:	1c6a      	adds	r2, r5, #1
 800b164:	9215      	str	r2, [sp, #84]	; 0x54
 800b166:	786a      	ldrb	r2, [r5, #1]
 800b168:	2a2b      	cmp	r2, #43	; 0x2b
 800b16a:	d074      	beq.n	800b256 <_strtod_l+0x27e>
 800b16c:	2a2d      	cmp	r2, #45	; 0x2d
 800b16e:	d078      	beq.n	800b262 <_strtod_l+0x28a>
 800b170:	f04f 0c00 	mov.w	ip, #0
 800b174:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b178:	2909      	cmp	r1, #9
 800b17a:	d97f      	bls.n	800b27c <_strtod_l+0x2a4>
 800b17c:	9515      	str	r5, [sp, #84]	; 0x54
 800b17e:	2700      	movs	r7, #0
 800b180:	e09e      	b.n	800b2c0 <_strtod_l+0x2e8>
 800b182:	2300      	movs	r3, #0
 800b184:	e7c8      	b.n	800b118 <_strtod_l+0x140>
 800b186:	f1bb 0f08 	cmp.w	fp, #8
 800b18a:	bfd8      	it	le
 800b18c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b18e:	f100 0001 	add.w	r0, r0, #1
 800b192:	bfda      	itte	le
 800b194:	fb02 3301 	mlale	r3, r2, r1, r3
 800b198:	9309      	strle	r3, [sp, #36]	; 0x24
 800b19a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b19e:	f10b 0b01 	add.w	fp, fp, #1
 800b1a2:	9015      	str	r0, [sp, #84]	; 0x54
 800b1a4:	e7c1      	b.n	800b12a <_strtod_l+0x152>
 800b1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	9215      	str	r2, [sp, #84]	; 0x54
 800b1ac:	785a      	ldrb	r2, [r3, #1]
 800b1ae:	f1bb 0f00 	cmp.w	fp, #0
 800b1b2:	d037      	beq.n	800b224 <_strtod_l+0x24c>
 800b1b4:	9005      	str	r0, [sp, #20]
 800b1b6:	465e      	mov	r6, fp
 800b1b8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	d912      	bls.n	800b1e6 <_strtod_l+0x20e>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e7c4      	b.n	800b14e <_strtod_l+0x176>
 800b1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	9215      	str	r2, [sp, #84]	; 0x54
 800b1ca:	785a      	ldrb	r2, [r3, #1]
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	2a30      	cmp	r2, #48	; 0x30
 800b1d0:	d0f8      	beq.n	800b1c4 <_strtod_l+0x1ec>
 800b1d2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b1d6:	2b08      	cmp	r3, #8
 800b1d8:	f200 84c1 	bhi.w	800bb5e <_strtod_l+0xb86>
 800b1dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1de:	9005      	str	r0, [sp, #20]
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	3a30      	subs	r2, #48	; 0x30
 800b1e8:	f100 0301 	add.w	r3, r0, #1
 800b1ec:	d014      	beq.n	800b218 <_strtod_l+0x240>
 800b1ee:	9905      	ldr	r1, [sp, #20]
 800b1f0:	4419      	add	r1, r3
 800b1f2:	9105      	str	r1, [sp, #20]
 800b1f4:	4633      	mov	r3, r6
 800b1f6:	eb00 0c06 	add.w	ip, r0, r6
 800b1fa:	210a      	movs	r1, #10
 800b1fc:	4563      	cmp	r3, ip
 800b1fe:	d113      	bne.n	800b228 <_strtod_l+0x250>
 800b200:	1833      	adds	r3, r6, r0
 800b202:	2b08      	cmp	r3, #8
 800b204:	f106 0601 	add.w	r6, r6, #1
 800b208:	4406      	add	r6, r0
 800b20a:	dc1a      	bgt.n	800b242 <_strtod_l+0x26a>
 800b20c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b20e:	230a      	movs	r3, #10
 800b210:	fb03 2301 	mla	r3, r3, r1, r2
 800b214:	9309      	str	r3, [sp, #36]	; 0x24
 800b216:	2300      	movs	r3, #0
 800b218:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b21a:	1c51      	adds	r1, r2, #1
 800b21c:	9115      	str	r1, [sp, #84]	; 0x54
 800b21e:	7852      	ldrb	r2, [r2, #1]
 800b220:	4618      	mov	r0, r3
 800b222:	e7c9      	b.n	800b1b8 <_strtod_l+0x1e0>
 800b224:	4658      	mov	r0, fp
 800b226:	e7d2      	b.n	800b1ce <_strtod_l+0x1f6>
 800b228:	2b08      	cmp	r3, #8
 800b22a:	f103 0301 	add.w	r3, r3, #1
 800b22e:	dc03      	bgt.n	800b238 <_strtod_l+0x260>
 800b230:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b232:	434f      	muls	r7, r1
 800b234:	9709      	str	r7, [sp, #36]	; 0x24
 800b236:	e7e1      	b.n	800b1fc <_strtod_l+0x224>
 800b238:	2b10      	cmp	r3, #16
 800b23a:	bfd8      	it	le
 800b23c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b240:	e7dc      	b.n	800b1fc <_strtod_l+0x224>
 800b242:	2e10      	cmp	r6, #16
 800b244:	bfdc      	itt	le
 800b246:	230a      	movle	r3, #10
 800b248:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b24c:	e7e3      	b.n	800b216 <_strtod_l+0x23e>
 800b24e:	2300      	movs	r3, #0
 800b250:	9305      	str	r3, [sp, #20]
 800b252:	2301      	movs	r3, #1
 800b254:	e780      	b.n	800b158 <_strtod_l+0x180>
 800b256:	f04f 0c00 	mov.w	ip, #0
 800b25a:	1caa      	adds	r2, r5, #2
 800b25c:	9215      	str	r2, [sp, #84]	; 0x54
 800b25e:	78aa      	ldrb	r2, [r5, #2]
 800b260:	e788      	b.n	800b174 <_strtod_l+0x19c>
 800b262:	f04f 0c01 	mov.w	ip, #1
 800b266:	e7f8      	b.n	800b25a <_strtod_l+0x282>
 800b268:	0800fe8c 	.word	0x0800fe8c
 800b26c:	0800fe89 	.word	0x0800fe89
 800b270:	7ff00000 	.word	0x7ff00000
 800b274:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b276:	1c51      	adds	r1, r2, #1
 800b278:	9115      	str	r1, [sp, #84]	; 0x54
 800b27a:	7852      	ldrb	r2, [r2, #1]
 800b27c:	2a30      	cmp	r2, #48	; 0x30
 800b27e:	d0f9      	beq.n	800b274 <_strtod_l+0x29c>
 800b280:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b284:	2908      	cmp	r1, #8
 800b286:	f63f af7a 	bhi.w	800b17e <_strtod_l+0x1a6>
 800b28a:	3a30      	subs	r2, #48	; 0x30
 800b28c:	9208      	str	r2, [sp, #32]
 800b28e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b290:	920c      	str	r2, [sp, #48]	; 0x30
 800b292:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b294:	1c57      	adds	r7, r2, #1
 800b296:	9715      	str	r7, [sp, #84]	; 0x54
 800b298:	7852      	ldrb	r2, [r2, #1]
 800b29a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b29e:	f1be 0f09 	cmp.w	lr, #9
 800b2a2:	d938      	bls.n	800b316 <_strtod_l+0x33e>
 800b2a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2a6:	1a7f      	subs	r7, r7, r1
 800b2a8:	2f08      	cmp	r7, #8
 800b2aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b2ae:	dc03      	bgt.n	800b2b8 <_strtod_l+0x2e0>
 800b2b0:	9908      	ldr	r1, [sp, #32]
 800b2b2:	428f      	cmp	r7, r1
 800b2b4:	bfa8      	it	ge
 800b2b6:	460f      	movge	r7, r1
 800b2b8:	f1bc 0f00 	cmp.w	ip, #0
 800b2bc:	d000      	beq.n	800b2c0 <_strtod_l+0x2e8>
 800b2be:	427f      	negs	r7, r7
 800b2c0:	2e00      	cmp	r6, #0
 800b2c2:	d14f      	bne.n	800b364 <_strtod_l+0x38c>
 800b2c4:	9904      	ldr	r1, [sp, #16]
 800b2c6:	4301      	orrs	r1, r0
 800b2c8:	f47f aec1 	bne.w	800b04e <_strtod_l+0x76>
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f47f aedb 	bne.w	800b088 <_strtod_l+0xb0>
 800b2d2:	2a69      	cmp	r2, #105	; 0x69
 800b2d4:	d029      	beq.n	800b32a <_strtod_l+0x352>
 800b2d6:	dc26      	bgt.n	800b326 <_strtod_l+0x34e>
 800b2d8:	2a49      	cmp	r2, #73	; 0x49
 800b2da:	d026      	beq.n	800b32a <_strtod_l+0x352>
 800b2dc:	2a4e      	cmp	r2, #78	; 0x4e
 800b2de:	f47f aed3 	bne.w	800b088 <_strtod_l+0xb0>
 800b2e2:	499b      	ldr	r1, [pc, #620]	; (800b550 <_strtod_l+0x578>)
 800b2e4:	a815      	add	r0, sp, #84	; 0x54
 800b2e6:	f001 ffdd 	bl	800d2a4 <__match>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	f43f aecc 	beq.w	800b088 <_strtod_l+0xb0>
 800b2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	2b28      	cmp	r3, #40	; 0x28
 800b2f6:	d12f      	bne.n	800b358 <_strtod_l+0x380>
 800b2f8:	4996      	ldr	r1, [pc, #600]	; (800b554 <_strtod_l+0x57c>)
 800b2fa:	aa18      	add	r2, sp, #96	; 0x60
 800b2fc:	a815      	add	r0, sp, #84	; 0x54
 800b2fe:	f001 ffe5 	bl	800d2cc <__hexnan>
 800b302:	2805      	cmp	r0, #5
 800b304:	d128      	bne.n	800b358 <_strtod_l+0x380>
 800b306:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b30c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b310:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b314:	e69b      	b.n	800b04e <_strtod_l+0x76>
 800b316:	9f08      	ldr	r7, [sp, #32]
 800b318:	210a      	movs	r1, #10
 800b31a:	fb01 2107 	mla	r1, r1, r7, r2
 800b31e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b322:	9208      	str	r2, [sp, #32]
 800b324:	e7b5      	b.n	800b292 <_strtod_l+0x2ba>
 800b326:	2a6e      	cmp	r2, #110	; 0x6e
 800b328:	e7d9      	b.n	800b2de <_strtod_l+0x306>
 800b32a:	498b      	ldr	r1, [pc, #556]	; (800b558 <_strtod_l+0x580>)
 800b32c:	a815      	add	r0, sp, #84	; 0x54
 800b32e:	f001 ffb9 	bl	800d2a4 <__match>
 800b332:	2800      	cmp	r0, #0
 800b334:	f43f aea8 	beq.w	800b088 <_strtod_l+0xb0>
 800b338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b33a:	4988      	ldr	r1, [pc, #544]	; (800b55c <_strtod_l+0x584>)
 800b33c:	3b01      	subs	r3, #1
 800b33e:	a815      	add	r0, sp, #84	; 0x54
 800b340:	9315      	str	r3, [sp, #84]	; 0x54
 800b342:	f001 ffaf 	bl	800d2a4 <__match>
 800b346:	b910      	cbnz	r0, 800b34e <_strtod_l+0x376>
 800b348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b34a:	3301      	adds	r3, #1
 800b34c:	9315      	str	r3, [sp, #84]	; 0x54
 800b34e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b56c <_strtod_l+0x594>
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	e67a      	b.n	800b04e <_strtod_l+0x76>
 800b358:	4881      	ldr	r0, [pc, #516]	; (800b560 <_strtod_l+0x588>)
 800b35a:	f000 fe09 	bl	800bf70 <nan>
 800b35e:	ec59 8b10 	vmov	r8, r9, d0
 800b362:	e674      	b.n	800b04e <_strtod_l+0x76>
 800b364:	9b05      	ldr	r3, [sp, #20]
 800b366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b368:	1afb      	subs	r3, r7, r3
 800b36a:	f1bb 0f00 	cmp.w	fp, #0
 800b36e:	bf08      	it	eq
 800b370:	46b3      	moveq	fp, r6
 800b372:	2e10      	cmp	r6, #16
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	4635      	mov	r5, r6
 800b378:	bfa8      	it	ge
 800b37a:	2510      	movge	r5, #16
 800b37c:	f7f5 f8c2 	bl	8000504 <__aeabi_ui2d>
 800b380:	2e09      	cmp	r6, #9
 800b382:	4680      	mov	r8, r0
 800b384:	4689      	mov	r9, r1
 800b386:	dd13      	ble.n	800b3b0 <_strtod_l+0x3d8>
 800b388:	4b76      	ldr	r3, [pc, #472]	; (800b564 <_strtod_l+0x58c>)
 800b38a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b38e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	4680      	mov	r8, r0
 800b398:	4650      	mov	r0, sl
 800b39a:	4689      	mov	r9, r1
 800b39c:	f7f5 f8b2 	bl	8000504 <__aeabi_ui2d>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	4640      	mov	r0, r8
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	f7f4 ff70 	bl	800028c <__adddf3>
 800b3ac:	4680      	mov	r8, r0
 800b3ae:	4689      	mov	r9, r1
 800b3b0:	2e0f      	cmp	r6, #15
 800b3b2:	dc38      	bgt.n	800b426 <_strtod_l+0x44e>
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f43f ae49 	beq.w	800b04e <_strtod_l+0x76>
 800b3bc:	dd24      	ble.n	800b408 <_strtod_l+0x430>
 800b3be:	2b16      	cmp	r3, #22
 800b3c0:	dc0b      	bgt.n	800b3da <_strtod_l+0x402>
 800b3c2:	4968      	ldr	r1, [pc, #416]	; (800b564 <_strtod_l+0x58c>)
 800b3c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3cc:	4642      	mov	r2, r8
 800b3ce:	464b      	mov	r3, r9
 800b3d0:	f7f5 f912 	bl	80005f8 <__aeabi_dmul>
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4689      	mov	r9, r1
 800b3d8:	e639      	b.n	800b04e <_strtod_l+0x76>
 800b3da:	9a08      	ldr	r2, [sp, #32]
 800b3dc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	db20      	blt.n	800b426 <_strtod_l+0x44e>
 800b3e4:	4c5f      	ldr	r4, [pc, #380]	; (800b564 <_strtod_l+0x58c>)
 800b3e6:	f1c6 060f 	rsb	r6, r6, #15
 800b3ea:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b3ee:	4642      	mov	r2, r8
 800b3f0:	464b      	mov	r3, r9
 800b3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3f6:	f7f5 f8ff 	bl	80005f8 <__aeabi_dmul>
 800b3fa:	9b08      	ldr	r3, [sp, #32]
 800b3fc:	1b9e      	subs	r6, r3, r6
 800b3fe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b402:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b406:	e7e3      	b.n	800b3d0 <_strtod_l+0x3f8>
 800b408:	9b08      	ldr	r3, [sp, #32]
 800b40a:	3316      	adds	r3, #22
 800b40c:	db0b      	blt.n	800b426 <_strtod_l+0x44e>
 800b40e:	9b05      	ldr	r3, [sp, #20]
 800b410:	1bdf      	subs	r7, r3, r7
 800b412:	4b54      	ldr	r3, [pc, #336]	; (800b564 <_strtod_l+0x58c>)
 800b414:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b41c:	4640      	mov	r0, r8
 800b41e:	4649      	mov	r1, r9
 800b420:	f7f5 fa14 	bl	800084c <__aeabi_ddiv>
 800b424:	e7d6      	b.n	800b3d4 <_strtod_l+0x3fc>
 800b426:	9b08      	ldr	r3, [sp, #32]
 800b428:	1b75      	subs	r5, r6, r5
 800b42a:	441d      	add	r5, r3
 800b42c:	2d00      	cmp	r5, #0
 800b42e:	dd70      	ble.n	800b512 <_strtod_l+0x53a>
 800b430:	f015 030f 	ands.w	r3, r5, #15
 800b434:	d00a      	beq.n	800b44c <_strtod_l+0x474>
 800b436:	494b      	ldr	r1, [pc, #300]	; (800b564 <_strtod_l+0x58c>)
 800b438:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b43c:	4642      	mov	r2, r8
 800b43e:	464b      	mov	r3, r9
 800b440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b444:	f7f5 f8d8 	bl	80005f8 <__aeabi_dmul>
 800b448:	4680      	mov	r8, r0
 800b44a:	4689      	mov	r9, r1
 800b44c:	f035 050f 	bics.w	r5, r5, #15
 800b450:	d04d      	beq.n	800b4ee <_strtod_l+0x516>
 800b452:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b456:	dd22      	ble.n	800b49e <_strtod_l+0x4c6>
 800b458:	2500      	movs	r5, #0
 800b45a:	46ab      	mov	fp, r5
 800b45c:	9509      	str	r5, [sp, #36]	; 0x24
 800b45e:	9505      	str	r5, [sp, #20]
 800b460:	2322      	movs	r3, #34	; 0x22
 800b462:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b56c <_strtod_l+0x594>
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	f04f 0800 	mov.w	r8, #0
 800b46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f43f aded 	beq.w	800b04e <_strtod_l+0x76>
 800b474:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b476:	4620      	mov	r0, r4
 800b478:	f002 fa1c 	bl	800d8b4 <_Bfree>
 800b47c:	9905      	ldr	r1, [sp, #20]
 800b47e:	4620      	mov	r0, r4
 800b480:	f002 fa18 	bl	800d8b4 <_Bfree>
 800b484:	4659      	mov	r1, fp
 800b486:	4620      	mov	r0, r4
 800b488:	f002 fa14 	bl	800d8b4 <_Bfree>
 800b48c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b48e:	4620      	mov	r0, r4
 800b490:	f002 fa10 	bl	800d8b4 <_Bfree>
 800b494:	4629      	mov	r1, r5
 800b496:	4620      	mov	r0, r4
 800b498:	f002 fa0c 	bl	800d8b4 <_Bfree>
 800b49c:	e5d7      	b.n	800b04e <_strtod_l+0x76>
 800b49e:	4b32      	ldr	r3, [pc, #200]	; (800b568 <_strtod_l+0x590>)
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	112d      	asrs	r5, r5, #4
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	469a      	mov	sl, r3
 800b4ac:	2d01      	cmp	r5, #1
 800b4ae:	dc21      	bgt.n	800b4f4 <_strtod_l+0x51c>
 800b4b0:	b10b      	cbz	r3, 800b4b6 <_strtod_l+0x4de>
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	492c      	ldr	r1, [pc, #176]	; (800b568 <_strtod_l+0x590>)
 800b4b8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b4bc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b4c0:	4642      	mov	r2, r8
 800b4c2:	464b      	mov	r3, r9
 800b4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c8:	f7f5 f896 	bl	80005f8 <__aeabi_dmul>
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <_strtod_l+0x594>)
 800b4ce:	460a      	mov	r2, r1
 800b4d0:	400b      	ands	r3, r1
 800b4d2:	4927      	ldr	r1, [pc, #156]	; (800b570 <_strtod_l+0x598>)
 800b4d4:	428b      	cmp	r3, r1
 800b4d6:	4680      	mov	r8, r0
 800b4d8:	d8be      	bhi.n	800b458 <_strtod_l+0x480>
 800b4da:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b4de:	428b      	cmp	r3, r1
 800b4e0:	bf86      	itte	hi
 800b4e2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b574 <_strtod_l+0x59c>
 800b4e6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b4ea:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	e07b      	b.n	800b5ec <_strtod_l+0x614>
 800b4f4:	07ea      	lsls	r2, r5, #31
 800b4f6:	d505      	bpl.n	800b504 <_strtod_l+0x52c>
 800b4f8:	9b04      	ldr	r3, [sp, #16]
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	2301      	movs	r3, #1
 800b504:	9a04      	ldr	r2, [sp, #16]
 800b506:	3208      	adds	r2, #8
 800b508:	f10a 0a01 	add.w	sl, sl, #1
 800b50c:	106d      	asrs	r5, r5, #1
 800b50e:	9204      	str	r2, [sp, #16]
 800b510:	e7cc      	b.n	800b4ac <_strtod_l+0x4d4>
 800b512:	d0ec      	beq.n	800b4ee <_strtod_l+0x516>
 800b514:	426d      	negs	r5, r5
 800b516:	f015 020f 	ands.w	r2, r5, #15
 800b51a:	d00a      	beq.n	800b532 <_strtod_l+0x55a>
 800b51c:	4b11      	ldr	r3, [pc, #68]	; (800b564 <_strtod_l+0x58c>)
 800b51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f5 f98f 	bl	800084c <__aeabi_ddiv>
 800b52e:	4680      	mov	r8, r0
 800b530:	4689      	mov	r9, r1
 800b532:	112d      	asrs	r5, r5, #4
 800b534:	d0db      	beq.n	800b4ee <_strtod_l+0x516>
 800b536:	2d1f      	cmp	r5, #31
 800b538:	dd1e      	ble.n	800b578 <_strtod_l+0x5a0>
 800b53a:	2500      	movs	r5, #0
 800b53c:	46ab      	mov	fp, r5
 800b53e:	9509      	str	r5, [sp, #36]	; 0x24
 800b540:	9505      	str	r5, [sp, #20]
 800b542:	2322      	movs	r3, #34	; 0x22
 800b544:	f04f 0800 	mov.w	r8, #0
 800b548:	f04f 0900 	mov.w	r9, #0
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	e78d      	b.n	800b46c <_strtod_l+0x494>
 800b550:	0800fe5d 	.word	0x0800fe5d
 800b554:	0800fea0 	.word	0x0800fea0
 800b558:	0800fe55 	.word	0x0800fe55
 800b55c:	08010099 	.word	0x08010099
 800b560:	08010095 	.word	0x08010095
 800b564:	08010200 	.word	0x08010200
 800b568:	080101d8 	.word	0x080101d8
 800b56c:	7ff00000 	.word	0x7ff00000
 800b570:	7ca00000 	.word	0x7ca00000
 800b574:	7fefffff 	.word	0x7fefffff
 800b578:	f015 0310 	ands.w	r3, r5, #16
 800b57c:	bf18      	it	ne
 800b57e:	236a      	movne	r3, #106	; 0x6a
 800b580:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b924 <_strtod_l+0x94c>
 800b584:	9304      	str	r3, [sp, #16]
 800b586:	4640      	mov	r0, r8
 800b588:	4649      	mov	r1, r9
 800b58a:	2300      	movs	r3, #0
 800b58c:	07ea      	lsls	r2, r5, #31
 800b58e:	d504      	bpl.n	800b59a <_strtod_l+0x5c2>
 800b590:	e9da 2300 	ldrd	r2, r3, [sl]
 800b594:	f7f5 f830 	bl	80005f8 <__aeabi_dmul>
 800b598:	2301      	movs	r3, #1
 800b59a:	106d      	asrs	r5, r5, #1
 800b59c:	f10a 0a08 	add.w	sl, sl, #8
 800b5a0:	d1f4      	bne.n	800b58c <_strtod_l+0x5b4>
 800b5a2:	b10b      	cbz	r3, 800b5a8 <_strtod_l+0x5d0>
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	9b04      	ldr	r3, [sp, #16]
 800b5aa:	b1bb      	cbz	r3, 800b5dc <_strtod_l+0x604>
 800b5ac:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b5b0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	dd10      	ble.n	800b5dc <_strtod_l+0x604>
 800b5ba:	2b1f      	cmp	r3, #31
 800b5bc:	f340 811e 	ble.w	800b7fc <_strtod_l+0x824>
 800b5c0:	2b34      	cmp	r3, #52	; 0x34
 800b5c2:	bfde      	ittt	le
 800b5c4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b5c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b5cc:	4093      	lslle	r3, r2
 800b5ce:	f04f 0800 	mov.w	r8, #0
 800b5d2:	bfcc      	ite	gt
 800b5d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b5d8:	ea03 0901 	andle.w	r9, r3, r1
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f5 fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	d1a6      	bne.n	800b53a <_strtod_l+0x562>
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5f2:	4633      	mov	r3, r6
 800b5f4:	465a      	mov	r2, fp
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f002 f9c4 	bl	800d984 <__s2b>
 800b5fc:	9009      	str	r0, [sp, #36]	; 0x24
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f43f af2a 	beq.w	800b458 <_strtod_l+0x480>
 800b604:	9a08      	ldr	r2, [sp, #32]
 800b606:	9b05      	ldr	r3, [sp, #20]
 800b608:	2a00      	cmp	r2, #0
 800b60a:	eba3 0307 	sub.w	r3, r3, r7
 800b60e:	bfa8      	it	ge
 800b610:	2300      	movge	r3, #0
 800b612:	930c      	str	r3, [sp, #48]	; 0x30
 800b614:	2500      	movs	r5, #0
 800b616:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b61a:	9312      	str	r3, [sp, #72]	; 0x48
 800b61c:	46ab      	mov	fp, r5
 800b61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b620:	4620      	mov	r0, r4
 800b622:	6859      	ldr	r1, [r3, #4]
 800b624:	f002 f906 	bl	800d834 <_Balloc>
 800b628:	9005      	str	r0, [sp, #20]
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f af18 	beq.w	800b460 <_strtod_l+0x488>
 800b630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	3202      	adds	r2, #2
 800b636:	f103 010c 	add.w	r1, r3, #12
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f000 fc86 	bl	800bf4e <memcpy>
 800b642:	ec49 8b10 	vmov	d0, r8, r9
 800b646:	aa18      	add	r2, sp, #96	; 0x60
 800b648:	a917      	add	r1, sp, #92	; 0x5c
 800b64a:	4620      	mov	r0, r4
 800b64c:	f002 fcce 	bl	800dfec <__d2b>
 800b650:	ec49 8b18 	vmov	d8, r8, r9
 800b654:	9016      	str	r0, [sp, #88]	; 0x58
 800b656:	2800      	cmp	r0, #0
 800b658:	f43f af02 	beq.w	800b460 <_strtod_l+0x488>
 800b65c:	2101      	movs	r1, #1
 800b65e:	4620      	mov	r0, r4
 800b660:	f002 fa28 	bl	800dab4 <__i2b>
 800b664:	4683      	mov	fp, r0
 800b666:	2800      	cmp	r0, #0
 800b668:	f43f aefa 	beq.w	800b460 <_strtod_l+0x488>
 800b66c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b66e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b670:	2e00      	cmp	r6, #0
 800b672:	bfab      	itete	ge
 800b674:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b676:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b678:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b67a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b67e:	bfac      	ite	ge
 800b680:	eb06 0a03 	addge.w	sl, r6, r3
 800b684:	1b9f      	sublt	r7, r3, r6
 800b686:	9b04      	ldr	r3, [sp, #16]
 800b688:	1af6      	subs	r6, r6, r3
 800b68a:	4416      	add	r6, r2
 800b68c:	4ba0      	ldr	r3, [pc, #640]	; (800b910 <_strtod_l+0x938>)
 800b68e:	3e01      	subs	r6, #1
 800b690:	429e      	cmp	r6, r3
 800b692:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b696:	f280 80c4 	bge.w	800b822 <_strtod_l+0x84a>
 800b69a:	1b9b      	subs	r3, r3, r6
 800b69c:	2b1f      	cmp	r3, #31
 800b69e:	eba2 0203 	sub.w	r2, r2, r3
 800b6a2:	f04f 0101 	mov.w	r1, #1
 800b6a6:	f300 80b0 	bgt.w	800b80a <_strtod_l+0x832>
 800b6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ae:	930e      	str	r3, [sp, #56]	; 0x38
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b6b4:	eb0a 0602 	add.w	r6, sl, r2
 800b6b8:	9b04      	ldr	r3, [sp, #16]
 800b6ba:	45b2      	cmp	sl, r6
 800b6bc:	4417      	add	r7, r2
 800b6be:	441f      	add	r7, r3
 800b6c0:	4653      	mov	r3, sl
 800b6c2:	bfa8      	it	ge
 800b6c4:	4633      	movge	r3, r6
 800b6c6:	42bb      	cmp	r3, r7
 800b6c8:	bfa8      	it	ge
 800b6ca:	463b      	movge	r3, r7
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	bfc2      	ittt	gt
 800b6d0:	1af6      	subgt	r6, r6, r3
 800b6d2:	1aff      	subgt	r7, r7, r3
 800b6d4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	dd17      	ble.n	800b70e <_strtod_l+0x736>
 800b6de:	4659      	mov	r1, fp
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f002 faa6 	bl	800dc34 <__pow5mult>
 800b6e8:	4683      	mov	fp, r0
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	f43f aeb8 	beq.w	800b460 <_strtod_l+0x488>
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f002 f9f3 	bl	800dae0 <__multiply>
 800b6fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	f43f aeaf 	beq.w	800b460 <_strtod_l+0x488>
 800b702:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b704:	4620      	mov	r0, r4
 800b706:	f002 f8d5 	bl	800d8b4 <_Bfree>
 800b70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b70c:	9316      	str	r3, [sp, #88]	; 0x58
 800b70e:	2e00      	cmp	r6, #0
 800b710:	f300 808c 	bgt.w	800b82c <_strtod_l+0x854>
 800b714:	9b08      	ldr	r3, [sp, #32]
 800b716:	2b00      	cmp	r3, #0
 800b718:	dd08      	ble.n	800b72c <_strtod_l+0x754>
 800b71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b71c:	9905      	ldr	r1, [sp, #20]
 800b71e:	4620      	mov	r0, r4
 800b720:	f002 fa88 	bl	800dc34 <__pow5mult>
 800b724:	9005      	str	r0, [sp, #20]
 800b726:	2800      	cmp	r0, #0
 800b728:	f43f ae9a 	beq.w	800b460 <_strtod_l+0x488>
 800b72c:	2f00      	cmp	r7, #0
 800b72e:	dd08      	ble.n	800b742 <_strtod_l+0x76a>
 800b730:	9905      	ldr	r1, [sp, #20]
 800b732:	463a      	mov	r2, r7
 800b734:	4620      	mov	r0, r4
 800b736:	f002 fad7 	bl	800dce8 <__lshift>
 800b73a:	9005      	str	r0, [sp, #20]
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f ae8f 	beq.w	800b460 <_strtod_l+0x488>
 800b742:	f1ba 0f00 	cmp.w	sl, #0
 800b746:	dd08      	ble.n	800b75a <_strtod_l+0x782>
 800b748:	4659      	mov	r1, fp
 800b74a:	4652      	mov	r2, sl
 800b74c:	4620      	mov	r0, r4
 800b74e:	f002 facb 	bl	800dce8 <__lshift>
 800b752:	4683      	mov	fp, r0
 800b754:	2800      	cmp	r0, #0
 800b756:	f43f ae83 	beq.w	800b460 <_strtod_l+0x488>
 800b75a:	9a05      	ldr	r2, [sp, #20]
 800b75c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b75e:	4620      	mov	r0, r4
 800b760:	f002 fb4a 	bl	800ddf8 <__mdiff>
 800b764:	4605      	mov	r5, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	f43f ae7a 	beq.w	800b460 <_strtod_l+0x488>
 800b76c:	68c3      	ldr	r3, [r0, #12]
 800b76e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b770:	2300      	movs	r3, #0
 800b772:	60c3      	str	r3, [r0, #12]
 800b774:	4659      	mov	r1, fp
 800b776:	f002 fb23 	bl	800ddc0 <__mcmp>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	da60      	bge.n	800b840 <_strtod_l+0x868>
 800b77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b780:	ea53 0308 	orrs.w	r3, r3, r8
 800b784:	f040 8084 	bne.w	800b890 <_strtod_l+0x8b8>
 800b788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d17f      	bne.n	800b890 <_strtod_l+0x8b8>
 800b790:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b794:	0d1b      	lsrs	r3, r3, #20
 800b796:	051b      	lsls	r3, r3, #20
 800b798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b79c:	d978      	bls.n	800b890 <_strtod_l+0x8b8>
 800b79e:	696b      	ldr	r3, [r5, #20]
 800b7a0:	b913      	cbnz	r3, 800b7a8 <_strtod_l+0x7d0>
 800b7a2:	692b      	ldr	r3, [r5, #16]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	dd73      	ble.n	800b890 <_strtod_l+0x8b8>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f002 fa9b 	bl	800dce8 <__lshift>
 800b7b2:	4659      	mov	r1, fp
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	f002 fb03 	bl	800ddc0 <__mcmp>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	dd68      	ble.n	800b890 <_strtod_l+0x8b8>
 800b7be:	9904      	ldr	r1, [sp, #16]
 800b7c0:	4a54      	ldr	r2, [pc, #336]	; (800b914 <_strtod_l+0x93c>)
 800b7c2:	464b      	mov	r3, r9
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	f000 8084 	beq.w	800b8d2 <_strtod_l+0x8fa>
 800b7ca:	ea02 0109 	and.w	r1, r2, r9
 800b7ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b7d2:	dc7e      	bgt.n	800b8d2 <_strtod_l+0x8fa>
 800b7d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b7d8:	f77f aeb3 	ble.w	800b542 <_strtod_l+0x56a>
 800b7dc:	4b4e      	ldr	r3, [pc, #312]	; (800b918 <_strtod_l+0x940>)
 800b7de:	4640      	mov	r0, r8
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f7f4 ff08 	bl	80005f8 <__aeabi_dmul>
 800b7e8:	4b4a      	ldr	r3, [pc, #296]	; (800b914 <_strtod_l+0x93c>)
 800b7ea:	400b      	ands	r3, r1
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	4689      	mov	r9, r1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f47f ae3f 	bne.w	800b474 <_strtod_l+0x49c>
 800b7f6:	2322      	movs	r3, #34	; 0x22
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	e63b      	b.n	800b474 <_strtod_l+0x49c>
 800b7fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b800:	fa02 f303 	lsl.w	r3, r2, r3
 800b804:	ea03 0808 	and.w	r8, r3, r8
 800b808:	e6e8      	b.n	800b5dc <_strtod_l+0x604>
 800b80a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b80e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b812:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b816:	36e2      	adds	r6, #226	; 0xe2
 800b818:	fa01 f306 	lsl.w	r3, r1, r6
 800b81c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b820:	e748      	b.n	800b6b4 <_strtod_l+0x6dc>
 800b822:	2100      	movs	r1, #0
 800b824:	2301      	movs	r3, #1
 800b826:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b82a:	e743      	b.n	800b6b4 <_strtod_l+0x6dc>
 800b82c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b82e:	4632      	mov	r2, r6
 800b830:	4620      	mov	r0, r4
 800b832:	f002 fa59 	bl	800dce8 <__lshift>
 800b836:	9016      	str	r0, [sp, #88]	; 0x58
 800b838:	2800      	cmp	r0, #0
 800b83a:	f47f af6b 	bne.w	800b714 <_strtod_l+0x73c>
 800b83e:	e60f      	b.n	800b460 <_strtod_l+0x488>
 800b840:	46ca      	mov	sl, r9
 800b842:	d171      	bne.n	800b928 <_strtod_l+0x950>
 800b844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b846:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b84a:	b352      	cbz	r2, 800b8a2 <_strtod_l+0x8ca>
 800b84c:	4a33      	ldr	r2, [pc, #204]	; (800b91c <_strtod_l+0x944>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d12a      	bne.n	800b8a8 <_strtod_l+0x8d0>
 800b852:	9b04      	ldr	r3, [sp, #16]
 800b854:	4641      	mov	r1, r8
 800b856:	b1fb      	cbz	r3, 800b898 <_strtod_l+0x8c0>
 800b858:	4b2e      	ldr	r3, [pc, #184]	; (800b914 <_strtod_l+0x93c>)
 800b85a:	ea09 0303 	and.w	r3, r9, r3
 800b85e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b866:	d81a      	bhi.n	800b89e <_strtod_l+0x8c6>
 800b868:	0d1b      	lsrs	r3, r3, #20
 800b86a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	4299      	cmp	r1, r3
 800b874:	d118      	bne.n	800b8a8 <_strtod_l+0x8d0>
 800b876:	4b2a      	ldr	r3, [pc, #168]	; (800b920 <_strtod_l+0x948>)
 800b878:	459a      	cmp	sl, r3
 800b87a:	d102      	bne.n	800b882 <_strtod_l+0x8aa>
 800b87c:	3101      	adds	r1, #1
 800b87e:	f43f adef 	beq.w	800b460 <_strtod_l+0x488>
 800b882:	4b24      	ldr	r3, [pc, #144]	; (800b914 <_strtod_l+0x93c>)
 800b884:	ea0a 0303 	and.w	r3, sl, r3
 800b888:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b88c:	f04f 0800 	mov.w	r8, #0
 800b890:	9b04      	ldr	r3, [sp, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1a2      	bne.n	800b7dc <_strtod_l+0x804>
 800b896:	e5ed      	b.n	800b474 <_strtod_l+0x49c>
 800b898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b89c:	e7e9      	b.n	800b872 <_strtod_l+0x89a>
 800b89e:	4613      	mov	r3, r2
 800b8a0:	e7e7      	b.n	800b872 <_strtod_l+0x89a>
 800b8a2:	ea53 0308 	orrs.w	r3, r3, r8
 800b8a6:	d08a      	beq.n	800b7be <_strtod_l+0x7e6>
 800b8a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8aa:	b1e3      	cbz	r3, 800b8e6 <_strtod_l+0x90e>
 800b8ac:	ea13 0f0a 	tst.w	r3, sl
 800b8b0:	d0ee      	beq.n	800b890 <_strtod_l+0x8b8>
 800b8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b4:	9a04      	ldr	r2, [sp, #16]
 800b8b6:	4640      	mov	r0, r8
 800b8b8:	4649      	mov	r1, r9
 800b8ba:	b1c3      	cbz	r3, 800b8ee <_strtod_l+0x916>
 800b8bc:	f7ff fb6e 	bl	800af9c <sulp>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	ec51 0b18 	vmov	r0, r1, d8
 800b8c8:	f7f4 fce0 	bl	800028c <__adddf3>
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	4689      	mov	r9, r1
 800b8d0:	e7de      	b.n	800b890 <_strtod_l+0x8b8>
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b8d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b8dc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b8e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b8e4:	e7d4      	b.n	800b890 <_strtod_l+0x8b8>
 800b8e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8e8:	ea13 0f08 	tst.w	r3, r8
 800b8ec:	e7e0      	b.n	800b8b0 <_strtod_l+0x8d8>
 800b8ee:	f7ff fb55 	bl	800af9c <sulp>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	ec51 0b18 	vmov	r0, r1, d8
 800b8fa:	f7f4 fcc5 	bl	8000288 <__aeabi_dsub>
 800b8fe:	2200      	movs	r2, #0
 800b900:	2300      	movs	r3, #0
 800b902:	4680      	mov	r8, r0
 800b904:	4689      	mov	r9, r1
 800b906:	f7f5 f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d0c0      	beq.n	800b890 <_strtod_l+0x8b8>
 800b90e:	e618      	b.n	800b542 <_strtod_l+0x56a>
 800b910:	fffffc02 	.word	0xfffffc02
 800b914:	7ff00000 	.word	0x7ff00000
 800b918:	39500000 	.word	0x39500000
 800b91c:	000fffff 	.word	0x000fffff
 800b920:	7fefffff 	.word	0x7fefffff
 800b924:	0800feb8 	.word	0x0800feb8
 800b928:	4659      	mov	r1, fp
 800b92a:	4628      	mov	r0, r5
 800b92c:	f002 fbb8 	bl	800e0a0 <__ratio>
 800b930:	ec57 6b10 	vmov	r6, r7, d0
 800b934:	ee10 0a10 	vmov	r0, s0
 800b938:	2200      	movs	r2, #0
 800b93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f5 f8d6 	bl	8000af0 <__aeabi_dcmple>
 800b944:	2800      	cmp	r0, #0
 800b946:	d071      	beq.n	800ba2c <_strtod_l+0xa54>
 800b948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d17c      	bne.n	800ba48 <_strtod_l+0xa70>
 800b94e:	f1b8 0f00 	cmp.w	r8, #0
 800b952:	d15a      	bne.n	800ba0a <_strtod_l+0xa32>
 800b954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d15d      	bne.n	800ba18 <_strtod_l+0xa40>
 800b95c:	4b90      	ldr	r3, [pc, #576]	; (800bba0 <_strtod_l+0xbc8>)
 800b95e:	2200      	movs	r2, #0
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8ba 	bl	8000adc <__aeabi_dcmplt>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d15c      	bne.n	800ba26 <_strtod_l+0xa4e>
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	4b8c      	ldr	r3, [pc, #560]	; (800bba4 <_strtod_l+0xbcc>)
 800b972:	2200      	movs	r2, #0
 800b974:	f7f4 fe40 	bl	80005f8 <__aeabi_dmul>
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b980:	9606      	str	r6, [sp, #24]
 800b982:	9307      	str	r3, [sp, #28]
 800b984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b988:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b98c:	4b86      	ldr	r3, [pc, #536]	; (800bba8 <_strtod_l+0xbd0>)
 800b98e:	ea0a 0303 	and.w	r3, sl, r3
 800b992:	930d      	str	r3, [sp, #52]	; 0x34
 800b994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b996:	4b85      	ldr	r3, [pc, #532]	; (800bbac <_strtod_l+0xbd4>)
 800b998:	429a      	cmp	r2, r3
 800b99a:	f040 8090 	bne.w	800babe <_strtod_l+0xae6>
 800b99e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b9a2:	ec49 8b10 	vmov	d0, r8, r9
 800b9a6:	f002 fab1 	bl	800df0c <__ulp>
 800b9aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9ae:	ec51 0b10 	vmov	r0, r1, d0
 800b9b2:	f7f4 fe21 	bl	80005f8 <__aeabi_dmul>
 800b9b6:	4642      	mov	r2, r8
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	f7f4 fc67 	bl	800028c <__adddf3>
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4979      	ldr	r1, [pc, #484]	; (800bba8 <_strtod_l+0xbd0>)
 800b9c2:	4a7b      	ldr	r2, [pc, #492]	; (800bbb0 <_strtod_l+0xbd8>)
 800b9c4:	4019      	ands	r1, r3
 800b9c6:	4291      	cmp	r1, r2
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	d944      	bls.n	800ba56 <_strtod_l+0xa7e>
 800b9cc:	ee18 2a90 	vmov	r2, s17
 800b9d0:	4b78      	ldr	r3, [pc, #480]	; (800bbb4 <_strtod_l+0xbdc>)
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d104      	bne.n	800b9e0 <_strtod_l+0xa08>
 800b9d6:	ee18 3a10 	vmov	r3, s16
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f43f ad40 	beq.w	800b460 <_strtod_l+0x488>
 800b9e0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bbb4 <_strtod_l+0xbdc>
 800b9e4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b9e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f001 ff62 	bl	800d8b4 <_Bfree>
 800b9f0:	9905      	ldr	r1, [sp, #20]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f001 ff5e 	bl	800d8b4 <_Bfree>
 800b9f8:	4659      	mov	r1, fp
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f001 ff5a 	bl	800d8b4 <_Bfree>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	f001 ff56 	bl	800d8b4 <_Bfree>
 800ba08:	e609      	b.n	800b61e <_strtod_l+0x646>
 800ba0a:	f1b8 0f01 	cmp.w	r8, #1
 800ba0e:	d103      	bne.n	800ba18 <_strtod_l+0xa40>
 800ba10:	f1b9 0f00 	cmp.w	r9, #0
 800ba14:	f43f ad95 	beq.w	800b542 <_strtod_l+0x56a>
 800ba18:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bb70 <_strtod_l+0xb98>
 800ba1c:	4f60      	ldr	r7, [pc, #384]	; (800bba0 <_strtod_l+0xbc8>)
 800ba1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba22:	2600      	movs	r6, #0
 800ba24:	e7ae      	b.n	800b984 <_strtod_l+0x9ac>
 800ba26:	4f5f      	ldr	r7, [pc, #380]	; (800bba4 <_strtod_l+0xbcc>)
 800ba28:	2600      	movs	r6, #0
 800ba2a:	e7a7      	b.n	800b97c <_strtod_l+0x9a4>
 800ba2c:	4b5d      	ldr	r3, [pc, #372]	; (800bba4 <_strtod_l+0xbcc>)
 800ba2e:	4630      	mov	r0, r6
 800ba30:	4639      	mov	r1, r7
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7f4 fde0 	bl	80005f8 <__aeabi_dmul>
 800ba38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d09c      	beq.n	800b97c <_strtod_l+0x9a4>
 800ba42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ba46:	e79d      	b.n	800b984 <_strtod_l+0x9ac>
 800ba48:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bb78 <_strtod_l+0xba0>
 800ba4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba50:	ec57 6b17 	vmov	r6, r7, d7
 800ba54:	e796      	b.n	800b984 <_strtod_l+0x9ac>
 800ba56:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ba5a:	9b04      	ldr	r3, [sp, #16]
 800ba5c:	46ca      	mov	sl, r9
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1c2      	bne.n	800b9e8 <_strtod_l+0xa10>
 800ba62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba68:	0d1b      	lsrs	r3, r3, #20
 800ba6a:	051b      	lsls	r3, r3, #20
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d1bb      	bne.n	800b9e8 <_strtod_l+0xa10>
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	f7f5 f920 	bl	8000cb8 <__aeabi_d2lz>
 800ba78:	f7f4 fd90 	bl	800059c <__aeabi_l2d>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f4 fc00 	bl	8000288 <__aeabi_dsub>
 800ba88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba8e:	ea43 0308 	orr.w	r3, r3, r8
 800ba92:	4313      	orrs	r3, r2
 800ba94:	4606      	mov	r6, r0
 800ba96:	460f      	mov	r7, r1
 800ba98:	d054      	beq.n	800bb44 <_strtod_l+0xb6c>
 800ba9a:	a339      	add	r3, pc, #228	; (adr r3, 800bb80 <_strtod_l+0xba8>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f5 f81c 	bl	8000adc <__aeabi_dcmplt>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f47f ace5 	bne.w	800b474 <_strtod_l+0x49c>
 800baaa:	a337      	add	r3, pc, #220	; (adr r3, 800bb88 <_strtod_l+0xbb0>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f5 f830 	bl	8000b18 <__aeabi_dcmpgt>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d095      	beq.n	800b9e8 <_strtod_l+0xa10>
 800babc:	e4da      	b.n	800b474 <_strtod_l+0x49c>
 800babe:	9b04      	ldr	r3, [sp, #16]
 800bac0:	b333      	cbz	r3, 800bb10 <_strtod_l+0xb38>
 800bac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bac4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bac8:	d822      	bhi.n	800bb10 <_strtod_l+0xb38>
 800baca:	a331      	add	r3, pc, #196	; (adr r3, 800bb90 <_strtod_l+0xbb8>)
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f5 f80c 	bl	8000af0 <__aeabi_dcmple>
 800bad8:	b1a0      	cbz	r0, 800bb04 <_strtod_l+0xb2c>
 800bada:	4639      	mov	r1, r7
 800badc:	4630      	mov	r0, r6
 800bade:	f7f5 f863 	bl	8000ba8 <__aeabi_d2uiz>
 800bae2:	2801      	cmp	r0, #1
 800bae4:	bf38      	it	cc
 800bae6:	2001      	movcc	r0, #1
 800bae8:	f7f4 fd0c 	bl	8000504 <__aeabi_ui2d>
 800baec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	bb23      	cbnz	r3, 800bb3e <_strtod_l+0xb66>
 800baf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baf8:	9010      	str	r0, [sp, #64]	; 0x40
 800bafa:	9311      	str	r3, [sp, #68]	; 0x44
 800bafc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb00:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bb04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb0c:	1a9b      	subs	r3, r3, r2
 800bb0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb14:	eeb0 0a48 	vmov.f32	s0, s16
 800bb18:	eef0 0a68 	vmov.f32	s1, s17
 800bb1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bb20:	f002 f9f4 	bl	800df0c <__ulp>
 800bb24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bb28:	ec53 2b10 	vmov	r2, r3, d0
 800bb2c:	f7f4 fd64 	bl	80005f8 <__aeabi_dmul>
 800bb30:	ec53 2b18 	vmov	r2, r3, d8
 800bb34:	f7f4 fbaa 	bl	800028c <__adddf3>
 800bb38:	4680      	mov	r8, r0
 800bb3a:	4689      	mov	r9, r1
 800bb3c:	e78d      	b.n	800ba5a <_strtod_l+0xa82>
 800bb3e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bb42:	e7db      	b.n	800bafc <_strtod_l+0xb24>
 800bb44:	a314      	add	r3, pc, #80	; (adr r3, 800bb98 <_strtod_l+0xbc0>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800bb4e:	e7b3      	b.n	800bab8 <_strtod_l+0xae0>
 800bb50:	2300      	movs	r3, #0
 800bb52:	930a      	str	r3, [sp, #40]	; 0x28
 800bb54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bb56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb58:	6013      	str	r3, [r2, #0]
 800bb5a:	f7ff ba7c 	b.w	800b056 <_strtod_l+0x7e>
 800bb5e:	2a65      	cmp	r2, #101	; 0x65
 800bb60:	f43f ab75 	beq.w	800b24e <_strtod_l+0x276>
 800bb64:	2a45      	cmp	r2, #69	; 0x45
 800bb66:	f43f ab72 	beq.w	800b24e <_strtod_l+0x276>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	f7ff bbaa 	b.w	800b2c4 <_strtod_l+0x2ec>
 800bb70:	00000000 	.word	0x00000000
 800bb74:	bff00000 	.word	0xbff00000
 800bb78:	00000000 	.word	0x00000000
 800bb7c:	3ff00000 	.word	0x3ff00000
 800bb80:	94a03595 	.word	0x94a03595
 800bb84:	3fdfffff 	.word	0x3fdfffff
 800bb88:	35afe535 	.word	0x35afe535
 800bb8c:	3fe00000 	.word	0x3fe00000
 800bb90:	ffc00000 	.word	0xffc00000
 800bb94:	41dfffff 	.word	0x41dfffff
 800bb98:	94a03595 	.word	0x94a03595
 800bb9c:	3fcfffff 	.word	0x3fcfffff
 800bba0:	3ff00000 	.word	0x3ff00000
 800bba4:	3fe00000 	.word	0x3fe00000
 800bba8:	7ff00000 	.word	0x7ff00000
 800bbac:	7fe00000 	.word	0x7fe00000
 800bbb0:	7c9fffff 	.word	0x7c9fffff
 800bbb4:	7fefffff 	.word	0x7fefffff

0800bbb8 <_strtod_r>:
 800bbb8:	4b01      	ldr	r3, [pc, #4]	; (800bbc0 <_strtod_r+0x8>)
 800bbba:	f7ff ba0d 	b.w	800afd8 <_strtod_l>
 800bbbe:	bf00      	nop
 800bbc0:	20000420 	.word	0x20000420

0800bbc4 <strtod>:
 800bbc4:	460a      	mov	r2, r1
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	4802      	ldr	r0, [pc, #8]	; (800bbd4 <strtod+0x10>)
 800bbca:	4b03      	ldr	r3, [pc, #12]	; (800bbd8 <strtod+0x14>)
 800bbcc:	6800      	ldr	r0, [r0, #0]
 800bbce:	f7ff ba03 	b.w	800afd8 <_strtod_l>
 800bbd2:	bf00      	nop
 800bbd4:	200005d8 	.word	0x200005d8
 800bbd8:	20000420 	.word	0x20000420

0800bbdc <_strtol_l.constprop.0>:
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe2:	d001      	beq.n	800bbe8 <_strtol_l.constprop.0+0xc>
 800bbe4:	2b24      	cmp	r3, #36	; 0x24
 800bbe6:	d906      	bls.n	800bbf6 <_strtol_l.constprop.0+0x1a>
 800bbe8:	f000 f984 	bl	800bef4 <__errno>
 800bbec:	2316      	movs	r3, #22
 800bbee:	6003      	str	r3, [r0, #0]
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bcdc <_strtol_l.constprop.0+0x100>
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	462e      	mov	r6, r5
 800bbfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc02:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bc06:	f017 0708 	ands.w	r7, r7, #8
 800bc0a:	d1f7      	bne.n	800bbfc <_strtol_l.constprop.0+0x20>
 800bc0c:	2c2d      	cmp	r4, #45	; 0x2d
 800bc0e:	d132      	bne.n	800bc76 <_strtol_l.constprop.0+0x9a>
 800bc10:	782c      	ldrb	r4, [r5, #0]
 800bc12:	2701      	movs	r7, #1
 800bc14:	1cb5      	adds	r5, r6, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d05b      	beq.n	800bcd2 <_strtol_l.constprop.0+0xf6>
 800bc1a:	2b10      	cmp	r3, #16
 800bc1c:	d109      	bne.n	800bc32 <_strtol_l.constprop.0+0x56>
 800bc1e:	2c30      	cmp	r4, #48	; 0x30
 800bc20:	d107      	bne.n	800bc32 <_strtol_l.constprop.0+0x56>
 800bc22:	782c      	ldrb	r4, [r5, #0]
 800bc24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bc28:	2c58      	cmp	r4, #88	; 0x58
 800bc2a:	d14d      	bne.n	800bcc8 <_strtol_l.constprop.0+0xec>
 800bc2c:	786c      	ldrb	r4, [r5, #1]
 800bc2e:	2310      	movs	r3, #16
 800bc30:	3502      	adds	r5, #2
 800bc32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bc36:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bc3a:	f04f 0e00 	mov.w	lr, #0
 800bc3e:	fbb8 f9f3 	udiv	r9, r8, r3
 800bc42:	4676      	mov	r6, lr
 800bc44:	fb03 8a19 	mls	sl, r3, r9, r8
 800bc48:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bc4c:	f1bc 0f09 	cmp.w	ip, #9
 800bc50:	d816      	bhi.n	800bc80 <_strtol_l.constprop.0+0xa4>
 800bc52:	4664      	mov	r4, ip
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	dd24      	ble.n	800bca2 <_strtol_l.constprop.0+0xc6>
 800bc58:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bc5c:	d008      	beq.n	800bc70 <_strtol_l.constprop.0+0x94>
 800bc5e:	45b1      	cmp	r9, r6
 800bc60:	d31c      	bcc.n	800bc9c <_strtol_l.constprop.0+0xc0>
 800bc62:	d101      	bne.n	800bc68 <_strtol_l.constprop.0+0x8c>
 800bc64:	45a2      	cmp	sl, r4
 800bc66:	db19      	blt.n	800bc9c <_strtol_l.constprop.0+0xc0>
 800bc68:	fb06 4603 	mla	r6, r6, r3, r4
 800bc6c:	f04f 0e01 	mov.w	lr, #1
 800bc70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc74:	e7e8      	b.n	800bc48 <_strtol_l.constprop.0+0x6c>
 800bc76:	2c2b      	cmp	r4, #43	; 0x2b
 800bc78:	bf04      	itt	eq
 800bc7a:	782c      	ldrbeq	r4, [r5, #0]
 800bc7c:	1cb5      	addeq	r5, r6, #2
 800bc7e:	e7ca      	b.n	800bc16 <_strtol_l.constprop.0+0x3a>
 800bc80:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bc84:	f1bc 0f19 	cmp.w	ip, #25
 800bc88:	d801      	bhi.n	800bc8e <_strtol_l.constprop.0+0xb2>
 800bc8a:	3c37      	subs	r4, #55	; 0x37
 800bc8c:	e7e2      	b.n	800bc54 <_strtol_l.constprop.0+0x78>
 800bc8e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bc92:	f1bc 0f19 	cmp.w	ip, #25
 800bc96:	d804      	bhi.n	800bca2 <_strtol_l.constprop.0+0xc6>
 800bc98:	3c57      	subs	r4, #87	; 0x57
 800bc9a:	e7db      	b.n	800bc54 <_strtol_l.constprop.0+0x78>
 800bc9c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bca0:	e7e6      	b.n	800bc70 <_strtol_l.constprop.0+0x94>
 800bca2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bca6:	d105      	bne.n	800bcb4 <_strtol_l.constprop.0+0xd8>
 800bca8:	2322      	movs	r3, #34	; 0x22
 800bcaa:	6003      	str	r3, [r0, #0]
 800bcac:	4646      	mov	r6, r8
 800bcae:	b942      	cbnz	r2, 800bcc2 <_strtol_l.constprop.0+0xe6>
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	e79e      	b.n	800bbf2 <_strtol_l.constprop.0+0x16>
 800bcb4:	b107      	cbz	r7, 800bcb8 <_strtol_l.constprop.0+0xdc>
 800bcb6:	4276      	negs	r6, r6
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	d0f9      	beq.n	800bcb0 <_strtol_l.constprop.0+0xd4>
 800bcbc:	f1be 0f00 	cmp.w	lr, #0
 800bcc0:	d000      	beq.n	800bcc4 <_strtol_l.constprop.0+0xe8>
 800bcc2:	1e69      	subs	r1, r5, #1
 800bcc4:	6011      	str	r1, [r2, #0]
 800bcc6:	e7f3      	b.n	800bcb0 <_strtol_l.constprop.0+0xd4>
 800bcc8:	2430      	movs	r4, #48	; 0x30
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1b1      	bne.n	800bc32 <_strtol_l.constprop.0+0x56>
 800bcce:	2308      	movs	r3, #8
 800bcd0:	e7af      	b.n	800bc32 <_strtol_l.constprop.0+0x56>
 800bcd2:	2c30      	cmp	r4, #48	; 0x30
 800bcd4:	d0a5      	beq.n	800bc22 <_strtol_l.constprop.0+0x46>
 800bcd6:	230a      	movs	r3, #10
 800bcd8:	e7ab      	b.n	800bc32 <_strtol_l.constprop.0+0x56>
 800bcda:	bf00      	nop
 800bcdc:	0800ff5a 	.word	0x0800ff5a

0800bce0 <_strtol_r>:
 800bce0:	f7ff bf7c 	b.w	800bbdc <_strtol_l.constprop.0>

0800bce4 <strtol>:
 800bce4:	4613      	mov	r3, r2
 800bce6:	460a      	mov	r2, r1
 800bce8:	4601      	mov	r1, r0
 800bcea:	4802      	ldr	r0, [pc, #8]	; (800bcf4 <strtol+0x10>)
 800bcec:	6800      	ldr	r0, [r0, #0]
 800bcee:	f7ff bf75 	b.w	800bbdc <_strtol_l.constprop.0>
 800bcf2:	bf00      	nop
 800bcf4:	200005d8 	.word	0x200005d8

0800bcf8 <_fwalk_sglue>:
 800bcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	4688      	mov	r8, r1
 800bd00:	4614      	mov	r4, r2
 800bd02:	2600      	movs	r6, #0
 800bd04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd08:	f1b9 0901 	subs.w	r9, r9, #1
 800bd0c:	d505      	bpl.n	800bd1a <_fwalk_sglue+0x22>
 800bd0e:	6824      	ldr	r4, [r4, #0]
 800bd10:	2c00      	cmp	r4, #0
 800bd12:	d1f7      	bne.n	800bd04 <_fwalk_sglue+0xc>
 800bd14:	4630      	mov	r0, r6
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d907      	bls.n	800bd30 <_fwalk_sglue+0x38>
 800bd20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd24:	3301      	adds	r3, #1
 800bd26:	d003      	beq.n	800bd30 <_fwalk_sglue+0x38>
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	47c0      	blx	r8
 800bd2e:	4306      	orrs	r6, r0
 800bd30:	3568      	adds	r5, #104	; 0x68
 800bd32:	e7e9      	b.n	800bd08 <_fwalk_sglue+0x10>

0800bd34 <strncmp>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	b16a      	cbz	r2, 800bd54 <strncmp+0x20>
 800bd38:	3901      	subs	r1, #1
 800bd3a:	1884      	adds	r4, r0, r2
 800bd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d103      	bne.n	800bd50 <strncmp+0x1c>
 800bd48:	42a0      	cmp	r0, r4
 800bd4a:	d001      	beq.n	800bd50 <strncmp+0x1c>
 800bd4c:	2a00      	cmp	r2, #0
 800bd4e:	d1f5      	bne.n	800bd3c <strncmp+0x8>
 800bd50:	1ad0      	subs	r0, r2, r3
 800bd52:	bd10      	pop	{r4, pc}
 800bd54:	4610      	mov	r0, r2
 800bd56:	e7fc      	b.n	800bd52 <strncmp+0x1e>

0800bd58 <strtok>:
 800bd58:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <strtok+0x5c>)
 800bd5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd5c:	681e      	ldr	r6, [r3, #0]
 800bd5e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800bd60:	4605      	mov	r5, r0
 800bd62:	b9fc      	cbnz	r4, 800bda4 <strtok+0x4c>
 800bd64:	2050      	movs	r0, #80	; 0x50
 800bd66:	9101      	str	r1, [sp, #4]
 800bd68:	f7fe fbf8 	bl	800a55c <malloc>
 800bd6c:	9901      	ldr	r1, [sp, #4]
 800bd6e:	6470      	str	r0, [r6, #68]	; 0x44
 800bd70:	4602      	mov	r2, r0
 800bd72:	b920      	cbnz	r0, 800bd7e <strtok+0x26>
 800bd74:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <strtok+0x60>)
 800bd76:	4811      	ldr	r0, [pc, #68]	; (800bdbc <strtok+0x64>)
 800bd78:	215b      	movs	r1, #91	; 0x5b
 800bd7a:	f000 f907 	bl	800bf8c <__assert_func>
 800bd7e:	e9c0 4400 	strd	r4, r4, [r0]
 800bd82:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bd86:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bd8a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bd8e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bd92:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bd96:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bd9a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bd9e:	6184      	str	r4, [r0, #24]
 800bda0:	7704      	strb	r4, [r0, #28]
 800bda2:	6244      	str	r4, [r0, #36]	; 0x24
 800bda4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800bda6:	2301      	movs	r3, #1
 800bda8:	4628      	mov	r0, r5
 800bdaa:	b002      	add	sp, #8
 800bdac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdb0:	f000 b806 	b.w	800bdc0 <__strtok_r>
 800bdb4:	200005d8 	.word	0x200005d8
 800bdb8:	0800fee0 	.word	0x0800fee0
 800bdbc:	0800fef7 	.word	0x0800fef7

0800bdc0 <__strtok_r>:
 800bdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdc2:	b908      	cbnz	r0, 800bdc8 <__strtok_r+0x8>
 800bdc4:	6810      	ldr	r0, [r2, #0]
 800bdc6:	b188      	cbz	r0, 800bdec <__strtok_r+0x2c>
 800bdc8:	4604      	mov	r4, r0
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bdd0:	460f      	mov	r7, r1
 800bdd2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bdd6:	b91e      	cbnz	r6, 800bde0 <__strtok_r+0x20>
 800bdd8:	b965      	cbnz	r5, 800bdf4 <__strtok_r+0x34>
 800bdda:	6015      	str	r5, [r2, #0]
 800bddc:	4628      	mov	r0, r5
 800bdde:	e005      	b.n	800bdec <__strtok_r+0x2c>
 800bde0:	42b5      	cmp	r5, r6
 800bde2:	d1f6      	bne.n	800bdd2 <__strtok_r+0x12>
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f0      	bne.n	800bdca <__strtok_r+0xa>
 800bde8:	6014      	str	r4, [r2, #0]
 800bdea:	7003      	strb	r3, [r0, #0]
 800bdec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdee:	461c      	mov	r4, r3
 800bdf0:	e00c      	b.n	800be0c <__strtok_r+0x4c>
 800bdf2:	b915      	cbnz	r5, 800bdfa <__strtok_r+0x3a>
 800bdf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bdf8:	460e      	mov	r6, r1
 800bdfa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bdfe:	42ab      	cmp	r3, r5
 800be00:	d1f7      	bne.n	800bdf2 <__strtok_r+0x32>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d0f3      	beq.n	800bdee <__strtok_r+0x2e>
 800be06:	2300      	movs	r3, #0
 800be08:	f804 3c01 	strb.w	r3, [r4, #-1]
 800be0c:	6014      	str	r4, [r2, #0]
 800be0e:	e7ed      	b.n	800bdec <__strtok_r+0x2c>

0800be10 <memset>:
 800be10:	4402      	add	r2, r0
 800be12:	4603      	mov	r3, r0
 800be14:	4293      	cmp	r3, r2
 800be16:	d100      	bne.n	800be1a <memset+0xa>
 800be18:	4770      	bx	lr
 800be1a:	f803 1b01 	strb.w	r1, [r3], #1
 800be1e:	e7f9      	b.n	800be14 <memset+0x4>

0800be20 <_localeconv_r>:
 800be20:	4800      	ldr	r0, [pc, #0]	; (800be24 <_localeconv_r+0x4>)
 800be22:	4770      	bx	lr
 800be24:	20000510 	.word	0x20000510

0800be28 <_reclaim_reent>:
 800be28:	4b29      	ldr	r3, [pc, #164]	; (800bed0 <_reclaim_reent+0xa8>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4283      	cmp	r3, r0
 800be2e:	b570      	push	{r4, r5, r6, lr}
 800be30:	4604      	mov	r4, r0
 800be32:	d04b      	beq.n	800becc <_reclaim_reent+0xa4>
 800be34:	69c3      	ldr	r3, [r0, #28]
 800be36:	b143      	cbz	r3, 800be4a <_reclaim_reent+0x22>
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d144      	bne.n	800bec8 <_reclaim_reent+0xa0>
 800be3e:	69e3      	ldr	r3, [r4, #28]
 800be40:	6819      	ldr	r1, [r3, #0]
 800be42:	b111      	cbz	r1, 800be4a <_reclaim_reent+0x22>
 800be44:	4620      	mov	r0, r4
 800be46:	f000 ff39 	bl	800ccbc <_free_r>
 800be4a:	6961      	ldr	r1, [r4, #20]
 800be4c:	b111      	cbz	r1, 800be54 <_reclaim_reent+0x2c>
 800be4e:	4620      	mov	r0, r4
 800be50:	f000 ff34 	bl	800ccbc <_free_r>
 800be54:	69e1      	ldr	r1, [r4, #28]
 800be56:	b111      	cbz	r1, 800be5e <_reclaim_reent+0x36>
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 ff2f 	bl	800ccbc <_free_r>
 800be5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be60:	b111      	cbz	r1, 800be68 <_reclaim_reent+0x40>
 800be62:	4620      	mov	r0, r4
 800be64:	f000 ff2a 	bl	800ccbc <_free_r>
 800be68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6a:	b111      	cbz	r1, 800be72 <_reclaim_reent+0x4a>
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 ff25 	bl	800ccbc <_free_r>
 800be72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be74:	b111      	cbz	r1, 800be7c <_reclaim_reent+0x54>
 800be76:	4620      	mov	r0, r4
 800be78:	f000 ff20 	bl	800ccbc <_free_r>
 800be7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800be7e:	b111      	cbz	r1, 800be86 <_reclaim_reent+0x5e>
 800be80:	4620      	mov	r0, r4
 800be82:	f000 ff1b 	bl	800ccbc <_free_r>
 800be86:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be88:	b111      	cbz	r1, 800be90 <_reclaim_reent+0x68>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 ff16 	bl	800ccbc <_free_r>
 800be90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800be92:	b111      	cbz	r1, 800be9a <_reclaim_reent+0x72>
 800be94:	4620      	mov	r0, r4
 800be96:	f000 ff11 	bl	800ccbc <_free_r>
 800be9a:	6a23      	ldr	r3, [r4, #32]
 800be9c:	b1b3      	cbz	r3, 800becc <_reclaim_reent+0xa4>
 800be9e:	4620      	mov	r0, r4
 800bea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bea4:	4718      	bx	r3
 800bea6:	5949      	ldr	r1, [r1, r5]
 800bea8:	b941      	cbnz	r1, 800bebc <_reclaim_reent+0x94>
 800beaa:	3504      	adds	r5, #4
 800beac:	69e3      	ldr	r3, [r4, #28]
 800beae:	2d80      	cmp	r5, #128	; 0x80
 800beb0:	68d9      	ldr	r1, [r3, #12]
 800beb2:	d1f8      	bne.n	800bea6 <_reclaim_reent+0x7e>
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 ff01 	bl	800ccbc <_free_r>
 800beba:	e7c0      	b.n	800be3e <_reclaim_reent+0x16>
 800bebc:	680e      	ldr	r6, [r1, #0]
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fefc 	bl	800ccbc <_free_r>
 800bec4:	4631      	mov	r1, r6
 800bec6:	e7ef      	b.n	800bea8 <_reclaim_reent+0x80>
 800bec8:	2500      	movs	r5, #0
 800beca:	e7ef      	b.n	800beac <_reclaim_reent+0x84>
 800becc:	bd70      	pop	{r4, r5, r6, pc}
 800bece:	bf00      	nop
 800bed0:	200005d8 	.word	0x200005d8

0800bed4 <_sbrk_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d06      	ldr	r5, [pc, #24]	; (800bef0 <_sbrk_r+0x1c>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f6 fdd6 	bl	8002a90 <_sbrk>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_sbrk_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_sbrk_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	2000483c 	.word	0x2000483c

0800bef4 <__errno>:
 800bef4:	4b01      	ldr	r3, [pc, #4]	; (800befc <__errno+0x8>)
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	200005d8 	.word	0x200005d8

0800bf00 <__libc_init_array>:
 800bf00:	b570      	push	{r4, r5, r6, lr}
 800bf02:	4d0d      	ldr	r5, [pc, #52]	; (800bf38 <__libc_init_array+0x38>)
 800bf04:	4c0d      	ldr	r4, [pc, #52]	; (800bf3c <__libc_init_array+0x3c>)
 800bf06:	1b64      	subs	r4, r4, r5
 800bf08:	10a4      	asrs	r4, r4, #2
 800bf0a:	2600      	movs	r6, #0
 800bf0c:	42a6      	cmp	r6, r4
 800bf0e:	d109      	bne.n	800bf24 <__libc_init_array+0x24>
 800bf10:	4d0b      	ldr	r5, [pc, #44]	; (800bf40 <__libc_init_array+0x40>)
 800bf12:	4c0c      	ldr	r4, [pc, #48]	; (800bf44 <__libc_init_array+0x44>)
 800bf14:	f003 fd7c 	bl	800fa10 <_init>
 800bf18:	1b64      	subs	r4, r4, r5
 800bf1a:	10a4      	asrs	r4, r4, #2
 800bf1c:	2600      	movs	r6, #0
 800bf1e:	42a6      	cmp	r6, r4
 800bf20:	d105      	bne.n	800bf2e <__libc_init_array+0x2e>
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf28:	4798      	blx	r3
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	e7ee      	b.n	800bf0c <__libc_init_array+0xc>
 800bf2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf32:	4798      	blx	r3
 800bf34:	3601      	adds	r6, #1
 800bf36:	e7f2      	b.n	800bf1e <__libc_init_array+0x1e>
 800bf38:	080104b8 	.word	0x080104b8
 800bf3c:	080104b8 	.word	0x080104b8
 800bf40:	080104b8 	.word	0x080104b8
 800bf44:	080104bc 	.word	0x080104bc

0800bf48 <__retarget_lock_init_recursive>:
 800bf48:	4770      	bx	lr

0800bf4a <__retarget_lock_acquire_recursive>:
 800bf4a:	4770      	bx	lr

0800bf4c <__retarget_lock_release_recursive>:
 800bf4c:	4770      	bx	lr

0800bf4e <memcpy>:
 800bf4e:	440a      	add	r2, r1
 800bf50:	4291      	cmp	r1, r2
 800bf52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bf56:	d100      	bne.n	800bf5a <memcpy+0xc>
 800bf58:	4770      	bx	lr
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf64:	4291      	cmp	r1, r2
 800bf66:	d1f9      	bne.n	800bf5c <memcpy+0xe>
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	0000      	movs	r0, r0
 800bf6c:	0000      	movs	r0, r0
	...

0800bf70 <nan>:
 800bf70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf78 <nan+0x8>
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	7ff80000 	.word	0x7ff80000

0800bf80 <nanf>:
 800bf80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bf88 <nanf+0x8>
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	7fc00000 	.word	0x7fc00000

0800bf8c <__assert_func>:
 800bf8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf8e:	4614      	mov	r4, r2
 800bf90:	461a      	mov	r2, r3
 800bf92:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <__assert_func+0x2c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4605      	mov	r5, r0
 800bf98:	68d8      	ldr	r0, [r3, #12]
 800bf9a:	b14c      	cbz	r4, 800bfb0 <__assert_func+0x24>
 800bf9c:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <__assert_func+0x30>)
 800bf9e:	9100      	str	r1, [sp, #0]
 800bfa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfa4:	4906      	ldr	r1, [pc, #24]	; (800bfc0 <__assert_func+0x34>)
 800bfa6:	462b      	mov	r3, r5
 800bfa8:	f002 f934 	bl	800e214 <fiprintf>
 800bfac:	f002 f9e0 	bl	800e370 <abort>
 800bfb0:	4b04      	ldr	r3, [pc, #16]	; (800bfc4 <__assert_func+0x38>)
 800bfb2:	461c      	mov	r4, r3
 800bfb4:	e7f3      	b.n	800bf9e <__assert_func+0x12>
 800bfb6:	bf00      	nop
 800bfb8:	200005d8 	.word	0x200005d8
 800bfbc:	0801005a 	.word	0x0801005a
 800bfc0:	08010067 	.word	0x08010067
 800bfc4:	08010095 	.word	0x08010095

0800bfc8 <quorem>:
 800bfc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	6903      	ldr	r3, [r0, #16]
 800bfce:	690c      	ldr	r4, [r1, #16]
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	4607      	mov	r7, r0
 800bfd4:	db7e      	blt.n	800c0d4 <quorem+0x10c>
 800bfd6:	3c01      	subs	r4, #1
 800bfd8:	f101 0814 	add.w	r8, r1, #20
 800bfdc:	f100 0514 	add.w	r5, r0, #20
 800bfe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfee:	3301      	adds	r3, #1
 800bff0:	429a      	cmp	r2, r3
 800bff2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bffa:	fbb2 f6f3 	udiv	r6, r2, r3
 800bffe:	d331      	bcc.n	800c064 <quorem+0x9c>
 800c000:	f04f 0e00 	mov.w	lr, #0
 800c004:	4640      	mov	r0, r8
 800c006:	46ac      	mov	ip, r5
 800c008:	46f2      	mov	sl, lr
 800c00a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c00e:	b293      	uxth	r3, r2
 800c010:	fb06 e303 	mla	r3, r6, r3, lr
 800c014:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c018:	0c1a      	lsrs	r2, r3, #16
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	ebaa 0303 	sub.w	r3, sl, r3
 800c020:	f8dc a000 	ldr.w	sl, [ip]
 800c024:	fa13 f38a 	uxtah	r3, r3, sl
 800c028:	fb06 220e 	mla	r2, r6, lr, r2
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c034:	b292      	uxth	r2, r2
 800c036:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c03a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c03e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c042:	4581      	cmp	r9, r0
 800c044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c048:	f84c 3b04 	str.w	r3, [ip], #4
 800c04c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c050:	d2db      	bcs.n	800c00a <quorem+0x42>
 800c052:	f855 300b 	ldr.w	r3, [r5, fp]
 800c056:	b92b      	cbnz	r3, 800c064 <quorem+0x9c>
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	3b04      	subs	r3, #4
 800c05c:	429d      	cmp	r5, r3
 800c05e:	461a      	mov	r2, r3
 800c060:	d32c      	bcc.n	800c0bc <quorem+0xf4>
 800c062:	613c      	str	r4, [r7, #16]
 800c064:	4638      	mov	r0, r7
 800c066:	f001 feab 	bl	800ddc0 <__mcmp>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	db22      	blt.n	800c0b4 <quorem+0xec>
 800c06e:	3601      	adds	r6, #1
 800c070:	4629      	mov	r1, r5
 800c072:	2000      	movs	r0, #0
 800c074:	f858 2b04 	ldr.w	r2, [r8], #4
 800c078:	f8d1 c000 	ldr.w	ip, [r1]
 800c07c:	b293      	uxth	r3, r2
 800c07e:	1ac3      	subs	r3, r0, r3
 800c080:	0c12      	lsrs	r2, r2, #16
 800c082:	fa13 f38c 	uxtah	r3, r3, ip
 800c086:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c08a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c08e:	b29b      	uxth	r3, r3
 800c090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c094:	45c1      	cmp	r9, r8
 800c096:	f841 3b04 	str.w	r3, [r1], #4
 800c09a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c09e:	d2e9      	bcs.n	800c074 <quorem+0xac>
 800c0a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0a8:	b922      	cbnz	r2, 800c0b4 <quorem+0xec>
 800c0aa:	3b04      	subs	r3, #4
 800c0ac:	429d      	cmp	r5, r3
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	d30a      	bcc.n	800c0c8 <quorem+0x100>
 800c0b2:	613c      	str	r4, [r7, #16]
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	b003      	add	sp, #12
 800c0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0bc:	6812      	ldr	r2, [r2, #0]
 800c0be:	3b04      	subs	r3, #4
 800c0c0:	2a00      	cmp	r2, #0
 800c0c2:	d1ce      	bne.n	800c062 <quorem+0x9a>
 800c0c4:	3c01      	subs	r4, #1
 800c0c6:	e7c9      	b.n	800c05c <quorem+0x94>
 800c0c8:	6812      	ldr	r2, [r2, #0]
 800c0ca:	3b04      	subs	r3, #4
 800c0cc:	2a00      	cmp	r2, #0
 800c0ce:	d1f0      	bne.n	800c0b2 <quorem+0xea>
 800c0d0:	3c01      	subs	r4, #1
 800c0d2:	e7eb      	b.n	800c0ac <quorem+0xe4>
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	e7ee      	b.n	800c0b6 <quorem+0xee>

0800c0d8 <_dtoa_r>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	ed2d 8b04 	vpush	{d8-d9}
 800c0e0:	69c5      	ldr	r5, [r0, #28]
 800c0e2:	b093      	sub	sp, #76	; 0x4c
 800c0e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c0e8:	ec57 6b10 	vmov	r6, r7, d0
 800c0ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0f0:	9107      	str	r1, [sp, #28]
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c0f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c0f8:	b975      	cbnz	r5, 800c118 <_dtoa_r+0x40>
 800c0fa:	2010      	movs	r0, #16
 800c0fc:	f7fe fa2e 	bl	800a55c <malloc>
 800c100:	4602      	mov	r2, r0
 800c102:	61e0      	str	r0, [r4, #28]
 800c104:	b920      	cbnz	r0, 800c110 <_dtoa_r+0x38>
 800c106:	4bae      	ldr	r3, [pc, #696]	; (800c3c0 <_dtoa_r+0x2e8>)
 800c108:	21ef      	movs	r1, #239	; 0xef
 800c10a:	48ae      	ldr	r0, [pc, #696]	; (800c3c4 <_dtoa_r+0x2ec>)
 800c10c:	f7ff ff3e 	bl	800bf8c <__assert_func>
 800c110:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c114:	6005      	str	r5, [r0, #0]
 800c116:	60c5      	str	r5, [r0, #12]
 800c118:	69e3      	ldr	r3, [r4, #28]
 800c11a:	6819      	ldr	r1, [r3, #0]
 800c11c:	b151      	cbz	r1, 800c134 <_dtoa_r+0x5c>
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	604a      	str	r2, [r1, #4]
 800c122:	2301      	movs	r3, #1
 800c124:	4093      	lsls	r3, r2
 800c126:	608b      	str	r3, [r1, #8]
 800c128:	4620      	mov	r0, r4
 800c12a:	f001 fbc3 	bl	800d8b4 <_Bfree>
 800c12e:	69e3      	ldr	r3, [r4, #28]
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	1e3b      	subs	r3, r7, #0
 800c136:	bfbb      	ittet	lt
 800c138:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c13c:	9303      	strlt	r3, [sp, #12]
 800c13e:	2300      	movge	r3, #0
 800c140:	2201      	movlt	r2, #1
 800c142:	bfac      	ite	ge
 800c144:	f8c8 3000 	strge.w	r3, [r8]
 800c148:	f8c8 2000 	strlt.w	r2, [r8]
 800c14c:	4b9e      	ldr	r3, [pc, #632]	; (800c3c8 <_dtoa_r+0x2f0>)
 800c14e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c152:	ea33 0308 	bics.w	r3, r3, r8
 800c156:	d11b      	bne.n	800c190 <_dtoa_r+0xb8>
 800c158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c15a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c164:	4333      	orrs	r3, r6
 800c166:	f000 8593 	beq.w	800cc90 <_dtoa_r+0xbb8>
 800c16a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c16c:	b963      	cbnz	r3, 800c188 <_dtoa_r+0xb0>
 800c16e:	4b97      	ldr	r3, [pc, #604]	; (800c3cc <_dtoa_r+0x2f4>)
 800c170:	e027      	b.n	800c1c2 <_dtoa_r+0xea>
 800c172:	4b97      	ldr	r3, [pc, #604]	; (800c3d0 <_dtoa_r+0x2f8>)
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	3308      	adds	r3, #8
 800c178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c17a:	6013      	str	r3, [r2, #0]
 800c17c:	9800      	ldr	r0, [sp, #0]
 800c17e:	b013      	add	sp, #76	; 0x4c
 800c180:	ecbd 8b04 	vpop	{d8-d9}
 800c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c188:	4b90      	ldr	r3, [pc, #576]	; (800c3cc <_dtoa_r+0x2f4>)
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	3303      	adds	r3, #3
 800c18e:	e7f3      	b.n	800c178 <_dtoa_r+0xa0>
 800c190:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c194:	2200      	movs	r2, #0
 800c196:	ec51 0b17 	vmov	r0, r1, d7
 800c19a:	eeb0 8a47 	vmov.f32	s16, s14
 800c19e:	eef0 8a67 	vmov.f32	s17, s15
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f7f4 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1a8:	4681      	mov	r9, r0
 800c1aa:	b160      	cbz	r0, 800c1c6 <_dtoa_r+0xee>
 800c1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8568 	beq.w	800cc8a <_dtoa_r+0xbb2>
 800c1ba:	4b86      	ldr	r3, [pc, #536]	; (800c3d4 <_dtoa_r+0x2fc>)
 800c1bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	e7da      	b.n	800c17c <_dtoa_r+0xa4>
 800c1c6:	aa10      	add	r2, sp, #64	; 0x40
 800c1c8:	a911      	add	r1, sp, #68	; 0x44
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	eeb0 0a48 	vmov.f32	s0, s16
 800c1d0:	eef0 0a68 	vmov.f32	s1, s17
 800c1d4:	f001 ff0a 	bl	800dfec <__d2b>
 800c1d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c1dc:	4682      	mov	sl, r0
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	d07f      	beq.n	800c2e2 <_dtoa_r+0x20a>
 800c1e2:	ee18 3a90 	vmov	r3, s17
 800c1e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c1ee:	ec51 0b18 	vmov	r0, r1, d8
 800c1f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c1fe:	4619      	mov	r1, r3
 800c200:	2200      	movs	r2, #0
 800c202:	4b75      	ldr	r3, [pc, #468]	; (800c3d8 <_dtoa_r+0x300>)
 800c204:	f7f4 f840 	bl	8000288 <__aeabi_dsub>
 800c208:	a367      	add	r3, pc, #412	; (adr r3, 800c3a8 <_dtoa_r+0x2d0>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	a367      	add	r3, pc, #412	; (adr r3, 800c3b0 <_dtoa_r+0x2d8>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	f7f4 f838 	bl	800028c <__adddf3>
 800c21c:	4606      	mov	r6, r0
 800c21e:	4628      	mov	r0, r5
 800c220:	460f      	mov	r7, r1
 800c222:	f7f4 f97f 	bl	8000524 <__aeabi_i2d>
 800c226:	a364      	add	r3, pc, #400	; (adr r3, 800c3b8 <_dtoa_r+0x2e0>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4630      	mov	r0, r6
 800c236:	4639      	mov	r1, r7
 800c238:	f7f4 f828 	bl	800028c <__adddf3>
 800c23c:	4606      	mov	r6, r0
 800c23e:	460f      	mov	r7, r1
 800c240:	f7f4 fc8a 	bl	8000b58 <__aeabi_d2iz>
 800c244:	2200      	movs	r2, #0
 800c246:	4683      	mov	fp, r0
 800c248:	2300      	movs	r3, #0
 800c24a:	4630      	mov	r0, r6
 800c24c:	4639      	mov	r1, r7
 800c24e:	f7f4 fc45 	bl	8000adc <__aeabi_dcmplt>
 800c252:	b148      	cbz	r0, 800c268 <_dtoa_r+0x190>
 800c254:	4658      	mov	r0, fp
 800c256:	f7f4 f965 	bl	8000524 <__aeabi_i2d>
 800c25a:	4632      	mov	r2, r6
 800c25c:	463b      	mov	r3, r7
 800c25e:	f7f4 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c262:	b908      	cbnz	r0, 800c268 <_dtoa_r+0x190>
 800c264:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c268:	f1bb 0f16 	cmp.w	fp, #22
 800c26c:	d857      	bhi.n	800c31e <_dtoa_r+0x246>
 800c26e:	4b5b      	ldr	r3, [pc, #364]	; (800c3dc <_dtoa_r+0x304>)
 800c270:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	ec51 0b18 	vmov	r0, r1, d8
 800c27c:	f7f4 fc2e 	bl	8000adc <__aeabi_dcmplt>
 800c280:	2800      	cmp	r0, #0
 800c282:	d04e      	beq.n	800c322 <_dtoa_r+0x24a>
 800c284:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c288:	2300      	movs	r3, #0
 800c28a:	930c      	str	r3, [sp, #48]	; 0x30
 800c28c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c28e:	1b5b      	subs	r3, r3, r5
 800c290:	1e5a      	subs	r2, r3, #1
 800c292:	bf45      	ittet	mi
 800c294:	f1c3 0301 	rsbmi	r3, r3, #1
 800c298:	9305      	strmi	r3, [sp, #20]
 800c29a:	2300      	movpl	r3, #0
 800c29c:	2300      	movmi	r3, #0
 800c29e:	9206      	str	r2, [sp, #24]
 800c2a0:	bf54      	ite	pl
 800c2a2:	9305      	strpl	r3, [sp, #20]
 800c2a4:	9306      	strmi	r3, [sp, #24]
 800c2a6:	f1bb 0f00 	cmp.w	fp, #0
 800c2aa:	db3c      	blt.n	800c326 <_dtoa_r+0x24e>
 800c2ac:	9b06      	ldr	r3, [sp, #24]
 800c2ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c2b2:	445b      	add	r3, fp
 800c2b4:	9306      	str	r3, [sp, #24]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	9308      	str	r3, [sp, #32]
 800c2ba:	9b07      	ldr	r3, [sp, #28]
 800c2bc:	2b09      	cmp	r3, #9
 800c2be:	d868      	bhi.n	800c392 <_dtoa_r+0x2ba>
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	bfc4      	itt	gt
 800c2c4:	3b04      	subgt	r3, #4
 800c2c6:	9307      	strgt	r3, [sp, #28]
 800c2c8:	9b07      	ldr	r3, [sp, #28]
 800c2ca:	f1a3 0302 	sub.w	r3, r3, #2
 800c2ce:	bfcc      	ite	gt
 800c2d0:	2500      	movgt	r5, #0
 800c2d2:	2501      	movle	r5, #1
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	f200 8085 	bhi.w	800c3e4 <_dtoa_r+0x30c>
 800c2da:	e8df f003 	tbb	[pc, r3]
 800c2de:	3b2e      	.short	0x3b2e
 800c2e0:	5839      	.short	0x5839
 800c2e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2e6:	441d      	add	r5, r3
 800c2e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	bfc1      	itttt	gt
 800c2f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c2f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c2fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c300:	bfd6      	itet	le
 800c302:	f1c3 0320 	rsble	r3, r3, #32
 800c306:	ea48 0003 	orrgt.w	r0, r8, r3
 800c30a:	fa06 f003 	lslle.w	r0, r6, r3
 800c30e:	f7f4 f8f9 	bl	8000504 <__aeabi_ui2d>
 800c312:	2201      	movs	r2, #1
 800c314:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c318:	3d01      	subs	r5, #1
 800c31a:	920e      	str	r2, [sp, #56]	; 0x38
 800c31c:	e76f      	b.n	800c1fe <_dtoa_r+0x126>
 800c31e:	2301      	movs	r3, #1
 800c320:	e7b3      	b.n	800c28a <_dtoa_r+0x1b2>
 800c322:	900c      	str	r0, [sp, #48]	; 0x30
 800c324:	e7b2      	b.n	800c28c <_dtoa_r+0x1b4>
 800c326:	9b05      	ldr	r3, [sp, #20]
 800c328:	eba3 030b 	sub.w	r3, r3, fp
 800c32c:	9305      	str	r3, [sp, #20]
 800c32e:	f1cb 0300 	rsb	r3, fp, #0
 800c332:	9308      	str	r3, [sp, #32]
 800c334:	2300      	movs	r3, #0
 800c336:	930b      	str	r3, [sp, #44]	; 0x2c
 800c338:	e7bf      	b.n	800c2ba <_dtoa_r+0x1e2>
 800c33a:	2300      	movs	r3, #0
 800c33c:	9309      	str	r3, [sp, #36]	; 0x24
 800c33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c340:	2b00      	cmp	r3, #0
 800c342:	dc52      	bgt.n	800c3ea <_dtoa_r+0x312>
 800c344:	2301      	movs	r3, #1
 800c346:	9301      	str	r3, [sp, #4]
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	461a      	mov	r2, r3
 800c34c:	920a      	str	r2, [sp, #40]	; 0x28
 800c34e:	e00b      	b.n	800c368 <_dtoa_r+0x290>
 800c350:	2301      	movs	r3, #1
 800c352:	e7f3      	b.n	800c33c <_dtoa_r+0x264>
 800c354:	2300      	movs	r3, #0
 800c356:	9309      	str	r3, [sp, #36]	; 0x24
 800c358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c35a:	445b      	add	r3, fp
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	3301      	adds	r3, #1
 800c360:	2b01      	cmp	r3, #1
 800c362:	9304      	str	r3, [sp, #16]
 800c364:	bfb8      	it	lt
 800c366:	2301      	movlt	r3, #1
 800c368:	69e0      	ldr	r0, [r4, #28]
 800c36a:	2100      	movs	r1, #0
 800c36c:	2204      	movs	r2, #4
 800c36e:	f102 0614 	add.w	r6, r2, #20
 800c372:	429e      	cmp	r6, r3
 800c374:	d93d      	bls.n	800c3f2 <_dtoa_r+0x31a>
 800c376:	6041      	str	r1, [r0, #4]
 800c378:	4620      	mov	r0, r4
 800c37a:	f001 fa5b 	bl	800d834 <_Balloc>
 800c37e:	9000      	str	r0, [sp, #0]
 800c380:	2800      	cmp	r0, #0
 800c382:	d139      	bne.n	800c3f8 <_dtoa_r+0x320>
 800c384:	4b16      	ldr	r3, [pc, #88]	; (800c3e0 <_dtoa_r+0x308>)
 800c386:	4602      	mov	r2, r0
 800c388:	f240 11af 	movw	r1, #431	; 0x1af
 800c38c:	e6bd      	b.n	800c10a <_dtoa_r+0x32>
 800c38e:	2301      	movs	r3, #1
 800c390:	e7e1      	b.n	800c356 <_dtoa_r+0x27e>
 800c392:	2501      	movs	r5, #1
 800c394:	2300      	movs	r3, #0
 800c396:	9307      	str	r3, [sp, #28]
 800c398:	9509      	str	r5, [sp, #36]	; 0x24
 800c39a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	9304      	str	r3, [sp, #16]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2312      	movs	r3, #18
 800c3a6:	e7d1      	b.n	800c34c <_dtoa_r+0x274>
 800c3a8:	636f4361 	.word	0x636f4361
 800c3ac:	3fd287a7 	.word	0x3fd287a7
 800c3b0:	8b60c8b3 	.word	0x8b60c8b3
 800c3b4:	3fc68a28 	.word	0x3fc68a28
 800c3b8:	509f79fb 	.word	0x509f79fb
 800c3bc:	3fd34413 	.word	0x3fd34413
 800c3c0:	0800fee0 	.word	0x0800fee0
 800c3c4:	080100a3 	.word	0x080100a3
 800c3c8:	7ff00000 	.word	0x7ff00000
 800c3cc:	0801009f 	.word	0x0801009f
 800c3d0:	08010096 	.word	0x08010096
 800c3d4:	0800fe61 	.word	0x0800fe61
 800c3d8:	3ff80000 	.word	0x3ff80000
 800c3dc:	08010200 	.word	0x08010200
 800c3e0:	080100fb 	.word	0x080100fb
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e8:	e7d7      	b.n	800c39a <_dtoa_r+0x2c2>
 800c3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	9304      	str	r3, [sp, #16]
 800c3f0:	e7ba      	b.n	800c368 <_dtoa_r+0x290>
 800c3f2:	3101      	adds	r1, #1
 800c3f4:	0052      	lsls	r2, r2, #1
 800c3f6:	e7ba      	b.n	800c36e <_dtoa_r+0x296>
 800c3f8:	69e3      	ldr	r3, [r4, #28]
 800c3fa:	9a00      	ldr	r2, [sp, #0]
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	9b04      	ldr	r3, [sp, #16]
 800c400:	2b0e      	cmp	r3, #14
 800c402:	f200 80a8 	bhi.w	800c556 <_dtoa_r+0x47e>
 800c406:	2d00      	cmp	r5, #0
 800c408:	f000 80a5 	beq.w	800c556 <_dtoa_r+0x47e>
 800c40c:	f1bb 0f00 	cmp.w	fp, #0
 800c410:	dd38      	ble.n	800c484 <_dtoa_r+0x3ac>
 800c412:	4bc0      	ldr	r3, [pc, #768]	; (800c714 <_dtoa_r+0x63c>)
 800c414:	f00b 020f 	and.w	r2, fp, #15
 800c418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c41c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c420:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c424:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c428:	d019      	beq.n	800c45e <_dtoa_r+0x386>
 800c42a:	4bbb      	ldr	r3, [pc, #748]	; (800c718 <_dtoa_r+0x640>)
 800c42c:	ec51 0b18 	vmov	r0, r1, d8
 800c430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c434:	f7f4 fa0a 	bl	800084c <__aeabi_ddiv>
 800c438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c43c:	f008 080f 	and.w	r8, r8, #15
 800c440:	2503      	movs	r5, #3
 800c442:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c718 <_dtoa_r+0x640>
 800c446:	f1b8 0f00 	cmp.w	r8, #0
 800c44a:	d10a      	bne.n	800c462 <_dtoa_r+0x38a>
 800c44c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c450:	4632      	mov	r2, r6
 800c452:	463b      	mov	r3, r7
 800c454:	f7f4 f9fa 	bl	800084c <__aeabi_ddiv>
 800c458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c45c:	e02b      	b.n	800c4b6 <_dtoa_r+0x3de>
 800c45e:	2502      	movs	r5, #2
 800c460:	e7ef      	b.n	800c442 <_dtoa_r+0x36a>
 800c462:	f018 0f01 	tst.w	r8, #1
 800c466:	d008      	beq.n	800c47a <_dtoa_r+0x3a2>
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	3501      	adds	r5, #1
 800c476:	4606      	mov	r6, r0
 800c478:	460f      	mov	r7, r1
 800c47a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c47e:	f109 0908 	add.w	r9, r9, #8
 800c482:	e7e0      	b.n	800c446 <_dtoa_r+0x36e>
 800c484:	f000 809f 	beq.w	800c5c6 <_dtoa_r+0x4ee>
 800c488:	f1cb 0600 	rsb	r6, fp, #0
 800c48c:	4ba1      	ldr	r3, [pc, #644]	; (800c714 <_dtoa_r+0x63c>)
 800c48e:	4fa2      	ldr	r7, [pc, #648]	; (800c718 <_dtoa_r+0x640>)
 800c490:	f006 020f 	and.w	r2, r6, #15
 800c494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	ec51 0b18 	vmov	r0, r1, d8
 800c4a0:	f7f4 f8aa 	bl	80005f8 <__aeabi_dmul>
 800c4a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4a8:	1136      	asrs	r6, r6, #4
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	2502      	movs	r5, #2
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	d17e      	bne.n	800c5b0 <_dtoa_r+0x4d8>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1d0      	bne.n	800c458 <_dtoa_r+0x380>
 800c4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 8084 	beq.w	800c5ca <_dtoa_r+0x4f2>
 800c4c2:	4b96      	ldr	r3, [pc, #600]	; (800c71c <_dtoa_r+0x644>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	4649      	mov	r1, r9
 800c4ca:	f7f4 fb07 	bl	8000adc <__aeabi_dcmplt>
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d07b      	beq.n	800c5ca <_dtoa_r+0x4f2>
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d078      	beq.n	800c5ca <_dtoa_r+0x4f2>
 800c4d8:	9b01      	ldr	r3, [sp, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	dd39      	ble.n	800c552 <_dtoa_r+0x47a>
 800c4de:	4b90      	ldr	r3, [pc, #576]	; (800c720 <_dtoa_r+0x648>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	4649      	mov	r1, r9
 800c4e6:	f7f4 f887 	bl	80005f8 <__aeabi_dmul>
 800c4ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4ee:	9e01      	ldr	r6, [sp, #4]
 800c4f0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f7f4 f812 	bl	8000524 <__aeabi_i2d>
 800c500:	4642      	mov	r2, r8
 800c502:	464b      	mov	r3, r9
 800c504:	f7f4 f878 	bl	80005f8 <__aeabi_dmul>
 800c508:	4b86      	ldr	r3, [pc, #536]	; (800c724 <_dtoa_r+0x64c>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f3 febe 	bl	800028c <__adddf3>
 800c510:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	2e00      	cmp	r6, #0
 800c51c:	d158      	bne.n	800c5d0 <_dtoa_r+0x4f8>
 800c51e:	4b82      	ldr	r3, [pc, #520]	; (800c728 <_dtoa_r+0x650>)
 800c520:	2200      	movs	r2, #0
 800c522:	4640      	mov	r0, r8
 800c524:	4649      	mov	r1, r9
 800c526:	f7f3 feaf 	bl	8000288 <__aeabi_dsub>
 800c52a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c52e:	4680      	mov	r8, r0
 800c530:	4689      	mov	r9, r1
 800c532:	f7f4 faf1 	bl	8000b18 <__aeabi_dcmpgt>
 800c536:	2800      	cmp	r0, #0
 800c538:	f040 8296 	bne.w	800ca68 <_dtoa_r+0x990>
 800c53c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c540:	4640      	mov	r0, r8
 800c542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c546:	4649      	mov	r1, r9
 800c548:	f7f4 fac8 	bl	8000adc <__aeabi_dcmplt>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f040 8289 	bne.w	800ca64 <_dtoa_r+0x98c>
 800c552:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f2c0 814e 	blt.w	800c7fa <_dtoa_r+0x722>
 800c55e:	f1bb 0f0e 	cmp.w	fp, #14
 800c562:	f300 814a 	bgt.w	800c7fa <_dtoa_r+0x722>
 800c566:	4b6b      	ldr	r3, [pc, #428]	; (800c714 <_dtoa_r+0x63c>)
 800c568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c56c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	f280 80dc 	bge.w	800c730 <_dtoa_r+0x658>
 800c578:	9b04      	ldr	r3, [sp, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f300 80d8 	bgt.w	800c730 <_dtoa_r+0x658>
 800c580:	f040 826f 	bne.w	800ca62 <_dtoa_r+0x98a>
 800c584:	4b68      	ldr	r3, [pc, #416]	; (800c728 <_dtoa_r+0x650>)
 800c586:	2200      	movs	r2, #0
 800c588:	4640      	mov	r0, r8
 800c58a:	4649      	mov	r1, r9
 800c58c:	f7f4 f834 	bl	80005f8 <__aeabi_dmul>
 800c590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c594:	f7f4 fab6 	bl	8000b04 <__aeabi_dcmpge>
 800c598:	9e04      	ldr	r6, [sp, #16]
 800c59a:	4637      	mov	r7, r6
 800c59c:	2800      	cmp	r0, #0
 800c59e:	f040 8245 	bne.w	800ca2c <_dtoa_r+0x954>
 800c5a2:	9d00      	ldr	r5, [sp, #0]
 800c5a4:	2331      	movs	r3, #49	; 0x31
 800c5a6:	f805 3b01 	strb.w	r3, [r5], #1
 800c5aa:	f10b 0b01 	add.w	fp, fp, #1
 800c5ae:	e241      	b.n	800ca34 <_dtoa_r+0x95c>
 800c5b0:	07f2      	lsls	r2, r6, #31
 800c5b2:	d505      	bpl.n	800c5c0 <_dtoa_r+0x4e8>
 800c5b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5b8:	f7f4 f81e 	bl	80005f8 <__aeabi_dmul>
 800c5bc:	3501      	adds	r5, #1
 800c5be:	2301      	movs	r3, #1
 800c5c0:	1076      	asrs	r6, r6, #1
 800c5c2:	3708      	adds	r7, #8
 800c5c4:	e773      	b.n	800c4ae <_dtoa_r+0x3d6>
 800c5c6:	2502      	movs	r5, #2
 800c5c8:	e775      	b.n	800c4b6 <_dtoa_r+0x3de>
 800c5ca:	9e04      	ldr	r6, [sp, #16]
 800c5cc:	465f      	mov	r7, fp
 800c5ce:	e792      	b.n	800c4f6 <_dtoa_r+0x41e>
 800c5d0:	9900      	ldr	r1, [sp, #0]
 800c5d2:	4b50      	ldr	r3, [pc, #320]	; (800c714 <_dtoa_r+0x63c>)
 800c5d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5d8:	4431      	add	r1, r6
 800c5da:	9102      	str	r1, [sp, #8]
 800c5dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5de:	eeb0 9a47 	vmov.f32	s18, s14
 800c5e2:	eef0 9a67 	vmov.f32	s19, s15
 800c5e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5ee:	2900      	cmp	r1, #0
 800c5f0:	d044      	beq.n	800c67c <_dtoa_r+0x5a4>
 800c5f2:	494e      	ldr	r1, [pc, #312]	; (800c72c <_dtoa_r+0x654>)
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	f7f4 f929 	bl	800084c <__aeabi_ddiv>
 800c5fa:	ec53 2b19 	vmov	r2, r3, d9
 800c5fe:	f7f3 fe43 	bl	8000288 <__aeabi_dsub>
 800c602:	9d00      	ldr	r5, [sp, #0]
 800c604:	ec41 0b19 	vmov	d9, r0, r1
 800c608:	4649      	mov	r1, r9
 800c60a:	4640      	mov	r0, r8
 800c60c:	f7f4 faa4 	bl	8000b58 <__aeabi_d2iz>
 800c610:	4606      	mov	r6, r0
 800c612:	f7f3 ff87 	bl	8000524 <__aeabi_i2d>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4640      	mov	r0, r8
 800c61c:	4649      	mov	r1, r9
 800c61e:	f7f3 fe33 	bl	8000288 <__aeabi_dsub>
 800c622:	3630      	adds	r6, #48	; 0x30
 800c624:	f805 6b01 	strb.w	r6, [r5], #1
 800c628:	ec53 2b19 	vmov	r2, r3, d9
 800c62c:	4680      	mov	r8, r0
 800c62e:	4689      	mov	r9, r1
 800c630:	f7f4 fa54 	bl	8000adc <__aeabi_dcmplt>
 800c634:	2800      	cmp	r0, #0
 800c636:	d164      	bne.n	800c702 <_dtoa_r+0x62a>
 800c638:	4642      	mov	r2, r8
 800c63a:	464b      	mov	r3, r9
 800c63c:	4937      	ldr	r1, [pc, #220]	; (800c71c <_dtoa_r+0x644>)
 800c63e:	2000      	movs	r0, #0
 800c640:	f7f3 fe22 	bl	8000288 <__aeabi_dsub>
 800c644:	ec53 2b19 	vmov	r2, r3, d9
 800c648:	f7f4 fa48 	bl	8000adc <__aeabi_dcmplt>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	f040 80b6 	bne.w	800c7be <_dtoa_r+0x6e6>
 800c652:	9b02      	ldr	r3, [sp, #8]
 800c654:	429d      	cmp	r5, r3
 800c656:	f43f af7c 	beq.w	800c552 <_dtoa_r+0x47a>
 800c65a:	4b31      	ldr	r3, [pc, #196]	; (800c720 <_dtoa_r+0x648>)
 800c65c:	ec51 0b19 	vmov	r0, r1, d9
 800c660:	2200      	movs	r2, #0
 800c662:	f7f3 ffc9 	bl	80005f8 <__aeabi_dmul>
 800c666:	4b2e      	ldr	r3, [pc, #184]	; (800c720 <_dtoa_r+0x648>)
 800c668:	ec41 0b19 	vmov	d9, r0, r1
 800c66c:	2200      	movs	r2, #0
 800c66e:	4640      	mov	r0, r8
 800c670:	4649      	mov	r1, r9
 800c672:	f7f3 ffc1 	bl	80005f8 <__aeabi_dmul>
 800c676:	4680      	mov	r8, r0
 800c678:	4689      	mov	r9, r1
 800c67a:	e7c5      	b.n	800c608 <_dtoa_r+0x530>
 800c67c:	ec51 0b17 	vmov	r0, r1, d7
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	9b02      	ldr	r3, [sp, #8]
 800c686:	9d00      	ldr	r5, [sp, #0]
 800c688:	930f      	str	r3, [sp, #60]	; 0x3c
 800c68a:	ec41 0b19 	vmov	d9, r0, r1
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	f7f4 fa61 	bl	8000b58 <__aeabi_d2iz>
 800c696:	4606      	mov	r6, r0
 800c698:	f7f3 ff44 	bl	8000524 <__aeabi_i2d>
 800c69c:	3630      	adds	r6, #48	; 0x30
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4640      	mov	r0, r8
 800c6a4:	4649      	mov	r1, r9
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ae:	9b02      	ldr	r3, [sp, #8]
 800c6b0:	429d      	cmp	r5, r3
 800c6b2:	4680      	mov	r8, r0
 800c6b4:	4689      	mov	r9, r1
 800c6b6:	f04f 0200 	mov.w	r2, #0
 800c6ba:	d124      	bne.n	800c706 <_dtoa_r+0x62e>
 800c6bc:	4b1b      	ldr	r3, [pc, #108]	; (800c72c <_dtoa_r+0x654>)
 800c6be:	ec51 0b19 	vmov	r0, r1, d9
 800c6c2:	f7f3 fde3 	bl	800028c <__adddf3>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f7f4 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d173      	bne.n	800c7be <_dtoa_r+0x6e6>
 800c6d6:	ec53 2b19 	vmov	r2, r3, d9
 800c6da:	4914      	ldr	r1, [pc, #80]	; (800c72c <_dtoa_r+0x654>)
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f7f3 fdd3 	bl	8000288 <__aeabi_dsub>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f4 f9f7 	bl	8000adc <__aeabi_dcmplt>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f af2f 	beq.w	800c552 <_dtoa_r+0x47a>
 800c6f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6f6:	1e6b      	subs	r3, r5, #1
 800c6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6fe:	2b30      	cmp	r3, #48	; 0x30
 800c700:	d0f8      	beq.n	800c6f4 <_dtoa_r+0x61c>
 800c702:	46bb      	mov	fp, r7
 800c704:	e04a      	b.n	800c79c <_dtoa_r+0x6c4>
 800c706:	4b06      	ldr	r3, [pc, #24]	; (800c720 <_dtoa_r+0x648>)
 800c708:	f7f3 ff76 	bl	80005f8 <__aeabi_dmul>
 800c70c:	4680      	mov	r8, r0
 800c70e:	4689      	mov	r9, r1
 800c710:	e7bd      	b.n	800c68e <_dtoa_r+0x5b6>
 800c712:	bf00      	nop
 800c714:	08010200 	.word	0x08010200
 800c718:	080101d8 	.word	0x080101d8
 800c71c:	3ff00000 	.word	0x3ff00000
 800c720:	40240000 	.word	0x40240000
 800c724:	401c0000 	.word	0x401c0000
 800c728:	40140000 	.word	0x40140000
 800c72c:	3fe00000 	.word	0x3fe00000
 800c730:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c734:	9d00      	ldr	r5, [sp, #0]
 800c736:	4642      	mov	r2, r8
 800c738:	464b      	mov	r3, r9
 800c73a:	4630      	mov	r0, r6
 800c73c:	4639      	mov	r1, r7
 800c73e:	f7f4 f885 	bl	800084c <__aeabi_ddiv>
 800c742:	f7f4 fa09 	bl	8000b58 <__aeabi_d2iz>
 800c746:	9001      	str	r0, [sp, #4]
 800c748:	f7f3 feec 	bl	8000524 <__aeabi_i2d>
 800c74c:	4642      	mov	r2, r8
 800c74e:	464b      	mov	r3, r9
 800c750:	f7f3 ff52 	bl	80005f8 <__aeabi_dmul>
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f3 fd94 	bl	8000288 <__aeabi_dsub>
 800c760:	9e01      	ldr	r6, [sp, #4]
 800c762:	9f04      	ldr	r7, [sp, #16]
 800c764:	3630      	adds	r6, #48	; 0x30
 800c766:	f805 6b01 	strb.w	r6, [r5], #1
 800c76a:	9e00      	ldr	r6, [sp, #0]
 800c76c:	1bae      	subs	r6, r5, r6
 800c76e:	42b7      	cmp	r7, r6
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	d134      	bne.n	800c7e0 <_dtoa_r+0x708>
 800c776:	f7f3 fd89 	bl	800028c <__adddf3>
 800c77a:	4642      	mov	r2, r8
 800c77c:	464b      	mov	r3, r9
 800c77e:	4606      	mov	r6, r0
 800c780:	460f      	mov	r7, r1
 800c782:	f7f4 f9c9 	bl	8000b18 <__aeabi_dcmpgt>
 800c786:	b9c8      	cbnz	r0, 800c7bc <_dtoa_r+0x6e4>
 800c788:	4642      	mov	r2, r8
 800c78a:	464b      	mov	r3, r9
 800c78c:	4630      	mov	r0, r6
 800c78e:	4639      	mov	r1, r7
 800c790:	f7f4 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c794:	b110      	cbz	r0, 800c79c <_dtoa_r+0x6c4>
 800c796:	9b01      	ldr	r3, [sp, #4]
 800c798:	07db      	lsls	r3, r3, #31
 800c79a:	d40f      	bmi.n	800c7bc <_dtoa_r+0x6e4>
 800c79c:	4651      	mov	r1, sl
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f001 f888 	bl	800d8b4 <_Bfree>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7a8:	702b      	strb	r3, [r5, #0]
 800c7aa:	f10b 0301 	add.w	r3, fp, #1
 800c7ae:	6013      	str	r3, [r2, #0]
 800c7b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f43f ace2 	beq.w	800c17c <_dtoa_r+0xa4>
 800c7b8:	601d      	str	r5, [r3, #0]
 800c7ba:	e4df      	b.n	800c17c <_dtoa_r+0xa4>
 800c7bc:	465f      	mov	r7, fp
 800c7be:	462b      	mov	r3, r5
 800c7c0:	461d      	mov	r5, r3
 800c7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7c6:	2a39      	cmp	r2, #57	; 0x39
 800c7c8:	d106      	bne.n	800c7d8 <_dtoa_r+0x700>
 800c7ca:	9a00      	ldr	r2, [sp, #0]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d1f7      	bne.n	800c7c0 <_dtoa_r+0x6e8>
 800c7d0:	9900      	ldr	r1, [sp, #0]
 800c7d2:	2230      	movs	r2, #48	; 0x30
 800c7d4:	3701      	adds	r7, #1
 800c7d6:	700a      	strb	r2, [r1, #0]
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	3201      	adds	r2, #1
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e790      	b.n	800c702 <_dtoa_r+0x62a>
 800c7e0:	4ba3      	ldr	r3, [pc, #652]	; (800ca70 <_dtoa_r+0x998>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f7f3 ff08 	bl	80005f8 <__aeabi_dmul>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	4606      	mov	r6, r0
 800c7ee:	460f      	mov	r7, r1
 800c7f0:	f7f4 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d09e      	beq.n	800c736 <_dtoa_r+0x65e>
 800c7f8:	e7d0      	b.n	800c79c <_dtoa_r+0x6c4>
 800c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	f000 80ca 	beq.w	800c996 <_dtoa_r+0x8be>
 800c802:	9a07      	ldr	r2, [sp, #28]
 800c804:	2a01      	cmp	r2, #1
 800c806:	f300 80ad 	bgt.w	800c964 <_dtoa_r+0x88c>
 800c80a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c80c:	2a00      	cmp	r2, #0
 800c80e:	f000 80a5 	beq.w	800c95c <_dtoa_r+0x884>
 800c812:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c816:	9e08      	ldr	r6, [sp, #32]
 800c818:	9d05      	ldr	r5, [sp, #20]
 800c81a:	9a05      	ldr	r2, [sp, #20]
 800c81c:	441a      	add	r2, r3
 800c81e:	9205      	str	r2, [sp, #20]
 800c820:	9a06      	ldr	r2, [sp, #24]
 800c822:	2101      	movs	r1, #1
 800c824:	441a      	add	r2, r3
 800c826:	4620      	mov	r0, r4
 800c828:	9206      	str	r2, [sp, #24]
 800c82a:	f001 f943 	bl	800dab4 <__i2b>
 800c82e:	4607      	mov	r7, r0
 800c830:	b165      	cbz	r5, 800c84c <_dtoa_r+0x774>
 800c832:	9b06      	ldr	r3, [sp, #24]
 800c834:	2b00      	cmp	r3, #0
 800c836:	dd09      	ble.n	800c84c <_dtoa_r+0x774>
 800c838:	42ab      	cmp	r3, r5
 800c83a:	9a05      	ldr	r2, [sp, #20]
 800c83c:	bfa8      	it	ge
 800c83e:	462b      	movge	r3, r5
 800c840:	1ad2      	subs	r2, r2, r3
 800c842:	9205      	str	r2, [sp, #20]
 800c844:	9a06      	ldr	r2, [sp, #24]
 800c846:	1aed      	subs	r5, r5, r3
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	9306      	str	r3, [sp, #24]
 800c84c:	9b08      	ldr	r3, [sp, #32]
 800c84e:	b1f3      	cbz	r3, 800c88e <_dtoa_r+0x7b6>
 800c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 80a3 	beq.w	800c99e <_dtoa_r+0x8c6>
 800c858:	2e00      	cmp	r6, #0
 800c85a:	dd10      	ble.n	800c87e <_dtoa_r+0x7a6>
 800c85c:	4639      	mov	r1, r7
 800c85e:	4632      	mov	r2, r6
 800c860:	4620      	mov	r0, r4
 800c862:	f001 f9e7 	bl	800dc34 <__pow5mult>
 800c866:	4652      	mov	r2, sl
 800c868:	4601      	mov	r1, r0
 800c86a:	4607      	mov	r7, r0
 800c86c:	4620      	mov	r0, r4
 800c86e:	f001 f937 	bl	800dae0 <__multiply>
 800c872:	4651      	mov	r1, sl
 800c874:	4680      	mov	r8, r0
 800c876:	4620      	mov	r0, r4
 800c878:	f001 f81c 	bl	800d8b4 <_Bfree>
 800c87c:	46c2      	mov	sl, r8
 800c87e:	9b08      	ldr	r3, [sp, #32]
 800c880:	1b9a      	subs	r2, r3, r6
 800c882:	d004      	beq.n	800c88e <_dtoa_r+0x7b6>
 800c884:	4651      	mov	r1, sl
 800c886:	4620      	mov	r0, r4
 800c888:	f001 f9d4 	bl	800dc34 <__pow5mult>
 800c88c:	4682      	mov	sl, r0
 800c88e:	2101      	movs	r1, #1
 800c890:	4620      	mov	r0, r4
 800c892:	f001 f90f 	bl	800dab4 <__i2b>
 800c896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	4606      	mov	r6, r0
 800c89c:	f340 8081 	ble.w	800c9a2 <_dtoa_r+0x8ca>
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f001 f9c5 	bl	800dc34 <__pow5mult>
 800c8aa:	9b07      	ldr	r3, [sp, #28]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	dd7a      	ble.n	800c9a8 <_dtoa_r+0x8d0>
 800c8b2:	f04f 0800 	mov.w	r8, #0
 800c8b6:	6933      	ldr	r3, [r6, #16]
 800c8b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8bc:	6918      	ldr	r0, [r3, #16]
 800c8be:	f001 f8ab 	bl	800da18 <__hi0bits>
 800c8c2:	f1c0 0020 	rsb	r0, r0, #32
 800c8c6:	9b06      	ldr	r3, [sp, #24]
 800c8c8:	4418      	add	r0, r3
 800c8ca:	f010 001f 	ands.w	r0, r0, #31
 800c8ce:	f000 8094 	beq.w	800c9fa <_dtoa_r+0x922>
 800c8d2:	f1c0 0320 	rsb	r3, r0, #32
 800c8d6:	2b04      	cmp	r3, #4
 800c8d8:	f340 8085 	ble.w	800c9e6 <_dtoa_r+0x90e>
 800c8dc:	9b05      	ldr	r3, [sp, #20]
 800c8de:	f1c0 001c 	rsb	r0, r0, #28
 800c8e2:	4403      	add	r3, r0
 800c8e4:	9305      	str	r3, [sp, #20]
 800c8e6:	9b06      	ldr	r3, [sp, #24]
 800c8e8:	4403      	add	r3, r0
 800c8ea:	4405      	add	r5, r0
 800c8ec:	9306      	str	r3, [sp, #24]
 800c8ee:	9b05      	ldr	r3, [sp, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dd05      	ble.n	800c900 <_dtoa_r+0x828>
 800c8f4:	4651      	mov	r1, sl
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f001 f9f5 	bl	800dce8 <__lshift>
 800c8fe:	4682      	mov	sl, r0
 800c900:	9b06      	ldr	r3, [sp, #24]
 800c902:	2b00      	cmp	r3, #0
 800c904:	dd05      	ble.n	800c912 <_dtoa_r+0x83a>
 800c906:	4631      	mov	r1, r6
 800c908:	461a      	mov	r2, r3
 800c90a:	4620      	mov	r0, r4
 800c90c:	f001 f9ec 	bl	800dce8 <__lshift>
 800c910:	4606      	mov	r6, r0
 800c912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c914:	2b00      	cmp	r3, #0
 800c916:	d072      	beq.n	800c9fe <_dtoa_r+0x926>
 800c918:	4631      	mov	r1, r6
 800c91a:	4650      	mov	r0, sl
 800c91c:	f001 fa50 	bl	800ddc0 <__mcmp>
 800c920:	2800      	cmp	r0, #0
 800c922:	da6c      	bge.n	800c9fe <_dtoa_r+0x926>
 800c924:	2300      	movs	r3, #0
 800c926:	4651      	mov	r1, sl
 800c928:	220a      	movs	r2, #10
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 ffe4 	bl	800d8f8 <__multadd>
 800c930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c932:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c936:	4682      	mov	sl, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f000 81b0 	beq.w	800cc9e <_dtoa_r+0xbc6>
 800c93e:	2300      	movs	r3, #0
 800c940:	4639      	mov	r1, r7
 800c942:	220a      	movs	r2, #10
 800c944:	4620      	mov	r0, r4
 800c946:	f000 ffd7 	bl	800d8f8 <__multadd>
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	4607      	mov	r7, r0
 800c950:	f300 8096 	bgt.w	800ca80 <_dtoa_r+0x9a8>
 800c954:	9b07      	ldr	r3, [sp, #28]
 800c956:	2b02      	cmp	r3, #2
 800c958:	dc59      	bgt.n	800ca0e <_dtoa_r+0x936>
 800c95a:	e091      	b.n	800ca80 <_dtoa_r+0x9a8>
 800c95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c95e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c962:	e758      	b.n	800c816 <_dtoa_r+0x73e>
 800c964:	9b04      	ldr	r3, [sp, #16]
 800c966:	1e5e      	subs	r6, r3, #1
 800c968:	9b08      	ldr	r3, [sp, #32]
 800c96a:	42b3      	cmp	r3, r6
 800c96c:	bfbf      	itttt	lt
 800c96e:	9b08      	ldrlt	r3, [sp, #32]
 800c970:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c972:	9608      	strlt	r6, [sp, #32]
 800c974:	1af3      	sublt	r3, r6, r3
 800c976:	bfb4      	ite	lt
 800c978:	18d2      	addlt	r2, r2, r3
 800c97a:	1b9e      	subge	r6, r3, r6
 800c97c:	9b04      	ldr	r3, [sp, #16]
 800c97e:	bfbc      	itt	lt
 800c980:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c982:	2600      	movlt	r6, #0
 800c984:	2b00      	cmp	r3, #0
 800c986:	bfb7      	itett	lt
 800c988:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c98c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c990:	1a9d      	sublt	r5, r3, r2
 800c992:	2300      	movlt	r3, #0
 800c994:	e741      	b.n	800c81a <_dtoa_r+0x742>
 800c996:	9e08      	ldr	r6, [sp, #32]
 800c998:	9d05      	ldr	r5, [sp, #20]
 800c99a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c99c:	e748      	b.n	800c830 <_dtoa_r+0x758>
 800c99e:	9a08      	ldr	r2, [sp, #32]
 800c9a0:	e770      	b.n	800c884 <_dtoa_r+0x7ac>
 800c9a2:	9b07      	ldr	r3, [sp, #28]
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	dc19      	bgt.n	800c9dc <_dtoa_r+0x904>
 800c9a8:	9b02      	ldr	r3, [sp, #8]
 800c9aa:	b9bb      	cbnz	r3, 800c9dc <_dtoa_r+0x904>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9b2:	b99b      	cbnz	r3, 800c9dc <_dtoa_r+0x904>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9ba:	0d1b      	lsrs	r3, r3, #20
 800c9bc:	051b      	lsls	r3, r3, #20
 800c9be:	b183      	cbz	r3, 800c9e2 <_dtoa_r+0x90a>
 800c9c0:	9b05      	ldr	r3, [sp, #20]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	9305      	str	r3, [sp, #20]
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9306      	str	r3, [sp, #24]
 800c9cc:	f04f 0801 	mov.w	r8, #1
 800c9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f47f af6f 	bne.w	800c8b6 <_dtoa_r+0x7de>
 800c9d8:	2001      	movs	r0, #1
 800c9da:	e774      	b.n	800c8c6 <_dtoa_r+0x7ee>
 800c9dc:	f04f 0800 	mov.w	r8, #0
 800c9e0:	e7f6      	b.n	800c9d0 <_dtoa_r+0x8f8>
 800c9e2:	4698      	mov	r8, r3
 800c9e4:	e7f4      	b.n	800c9d0 <_dtoa_r+0x8f8>
 800c9e6:	d082      	beq.n	800c8ee <_dtoa_r+0x816>
 800c9e8:	9a05      	ldr	r2, [sp, #20]
 800c9ea:	331c      	adds	r3, #28
 800c9ec:	441a      	add	r2, r3
 800c9ee:	9205      	str	r2, [sp, #20]
 800c9f0:	9a06      	ldr	r2, [sp, #24]
 800c9f2:	441a      	add	r2, r3
 800c9f4:	441d      	add	r5, r3
 800c9f6:	9206      	str	r2, [sp, #24]
 800c9f8:	e779      	b.n	800c8ee <_dtoa_r+0x816>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	e7f4      	b.n	800c9e8 <_dtoa_r+0x910>
 800c9fe:	9b04      	ldr	r3, [sp, #16]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	dc37      	bgt.n	800ca74 <_dtoa_r+0x99c>
 800ca04:	9b07      	ldr	r3, [sp, #28]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	dd34      	ble.n	800ca74 <_dtoa_r+0x99c>
 800ca0a:	9b04      	ldr	r3, [sp, #16]
 800ca0c:	9301      	str	r3, [sp, #4]
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	b963      	cbnz	r3, 800ca2c <_dtoa_r+0x954>
 800ca12:	4631      	mov	r1, r6
 800ca14:	2205      	movs	r2, #5
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 ff6e 	bl	800d8f8 <__multadd>
 800ca1c:	4601      	mov	r1, r0
 800ca1e:	4606      	mov	r6, r0
 800ca20:	4650      	mov	r0, sl
 800ca22:	f001 f9cd 	bl	800ddc0 <__mcmp>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f73f adbb 	bgt.w	800c5a2 <_dtoa_r+0x4ca>
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2e:	9d00      	ldr	r5, [sp, #0]
 800ca30:	ea6f 0b03 	mvn.w	fp, r3
 800ca34:	f04f 0800 	mov.w	r8, #0
 800ca38:	4631      	mov	r1, r6
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 ff3a 	bl	800d8b4 <_Bfree>
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	f43f aeab 	beq.w	800c79c <_dtoa_r+0x6c4>
 800ca46:	f1b8 0f00 	cmp.w	r8, #0
 800ca4a:	d005      	beq.n	800ca58 <_dtoa_r+0x980>
 800ca4c:	45b8      	cmp	r8, r7
 800ca4e:	d003      	beq.n	800ca58 <_dtoa_r+0x980>
 800ca50:	4641      	mov	r1, r8
 800ca52:	4620      	mov	r0, r4
 800ca54:	f000 ff2e 	bl	800d8b4 <_Bfree>
 800ca58:	4639      	mov	r1, r7
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 ff2a 	bl	800d8b4 <_Bfree>
 800ca60:	e69c      	b.n	800c79c <_dtoa_r+0x6c4>
 800ca62:	2600      	movs	r6, #0
 800ca64:	4637      	mov	r7, r6
 800ca66:	e7e1      	b.n	800ca2c <_dtoa_r+0x954>
 800ca68:	46bb      	mov	fp, r7
 800ca6a:	4637      	mov	r7, r6
 800ca6c:	e599      	b.n	800c5a2 <_dtoa_r+0x4ca>
 800ca6e:	bf00      	nop
 800ca70:	40240000 	.word	0x40240000
 800ca74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80c8 	beq.w	800cc0c <_dtoa_r+0xb34>
 800ca7c:	9b04      	ldr	r3, [sp, #16]
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	2d00      	cmp	r5, #0
 800ca82:	dd05      	ble.n	800ca90 <_dtoa_r+0x9b8>
 800ca84:	4639      	mov	r1, r7
 800ca86:	462a      	mov	r2, r5
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f001 f92d 	bl	800dce8 <__lshift>
 800ca8e:	4607      	mov	r7, r0
 800ca90:	f1b8 0f00 	cmp.w	r8, #0
 800ca94:	d05b      	beq.n	800cb4e <_dtoa_r+0xa76>
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fecb 	bl	800d834 <_Balloc>
 800ca9e:	4605      	mov	r5, r0
 800caa0:	b928      	cbnz	r0, 800caae <_dtoa_r+0x9d6>
 800caa2:	4b83      	ldr	r3, [pc, #524]	; (800ccb0 <_dtoa_r+0xbd8>)
 800caa4:	4602      	mov	r2, r0
 800caa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800caaa:	f7ff bb2e 	b.w	800c10a <_dtoa_r+0x32>
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	3202      	adds	r2, #2
 800cab2:	0092      	lsls	r2, r2, #2
 800cab4:	f107 010c 	add.w	r1, r7, #12
 800cab8:	300c      	adds	r0, #12
 800caba:	f7ff fa48 	bl	800bf4e <memcpy>
 800cabe:	2201      	movs	r2, #1
 800cac0:	4629      	mov	r1, r5
 800cac2:	4620      	mov	r0, r4
 800cac4:	f001 f910 	bl	800dce8 <__lshift>
 800cac8:	9b00      	ldr	r3, [sp, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	9304      	str	r3, [sp, #16]
 800cace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cad2:	4413      	add	r3, r2
 800cad4:	9308      	str	r3, [sp, #32]
 800cad6:	9b02      	ldr	r3, [sp, #8]
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	46b8      	mov	r8, r7
 800cade:	9306      	str	r3, [sp, #24]
 800cae0:	4607      	mov	r7, r0
 800cae2:	9b04      	ldr	r3, [sp, #16]
 800cae4:	4631      	mov	r1, r6
 800cae6:	3b01      	subs	r3, #1
 800cae8:	4650      	mov	r0, sl
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	f7ff fa6c 	bl	800bfc8 <quorem>
 800caf0:	4641      	mov	r1, r8
 800caf2:	9002      	str	r0, [sp, #8]
 800caf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800caf8:	4650      	mov	r0, sl
 800cafa:	f001 f961 	bl	800ddc0 <__mcmp>
 800cafe:	463a      	mov	r2, r7
 800cb00:	9005      	str	r0, [sp, #20]
 800cb02:	4631      	mov	r1, r6
 800cb04:	4620      	mov	r0, r4
 800cb06:	f001 f977 	bl	800ddf8 <__mdiff>
 800cb0a:	68c2      	ldr	r2, [r0, #12]
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	bb02      	cbnz	r2, 800cb52 <_dtoa_r+0xa7a>
 800cb10:	4601      	mov	r1, r0
 800cb12:	4650      	mov	r0, sl
 800cb14:	f001 f954 	bl	800ddc0 <__mcmp>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb20:	f000 fec8 	bl	800d8b4 <_Bfree>
 800cb24:	9b07      	ldr	r3, [sp, #28]
 800cb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb28:	9d04      	ldr	r5, [sp, #16]
 800cb2a:	ea43 0102 	orr.w	r1, r3, r2
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	4319      	orrs	r1, r3
 800cb32:	d110      	bne.n	800cb56 <_dtoa_r+0xa7e>
 800cb34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb38:	d029      	beq.n	800cb8e <_dtoa_r+0xab6>
 800cb3a:	9b05      	ldr	r3, [sp, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	dd02      	ble.n	800cb46 <_dtoa_r+0xa6e>
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	f883 9000 	strb.w	r9, [r3]
 800cb4c:	e774      	b.n	800ca38 <_dtoa_r+0x960>
 800cb4e:	4638      	mov	r0, r7
 800cb50:	e7ba      	b.n	800cac8 <_dtoa_r+0x9f0>
 800cb52:	2201      	movs	r2, #1
 800cb54:	e7e1      	b.n	800cb1a <_dtoa_r+0xa42>
 800cb56:	9b05      	ldr	r3, [sp, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	db04      	blt.n	800cb66 <_dtoa_r+0xa8e>
 800cb5c:	9907      	ldr	r1, [sp, #28]
 800cb5e:	430b      	orrs	r3, r1
 800cb60:	9906      	ldr	r1, [sp, #24]
 800cb62:	430b      	orrs	r3, r1
 800cb64:	d120      	bne.n	800cba8 <_dtoa_r+0xad0>
 800cb66:	2a00      	cmp	r2, #0
 800cb68:	dded      	ble.n	800cb46 <_dtoa_r+0xa6e>
 800cb6a:	4651      	mov	r1, sl
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f001 f8ba 	bl	800dce8 <__lshift>
 800cb74:	4631      	mov	r1, r6
 800cb76:	4682      	mov	sl, r0
 800cb78:	f001 f922 	bl	800ddc0 <__mcmp>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	dc03      	bgt.n	800cb88 <_dtoa_r+0xab0>
 800cb80:	d1e1      	bne.n	800cb46 <_dtoa_r+0xa6e>
 800cb82:	f019 0f01 	tst.w	r9, #1
 800cb86:	d0de      	beq.n	800cb46 <_dtoa_r+0xa6e>
 800cb88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb8c:	d1d8      	bne.n	800cb40 <_dtoa_r+0xa68>
 800cb8e:	9a01      	ldr	r2, [sp, #4]
 800cb90:	2339      	movs	r3, #57	; 0x39
 800cb92:	7013      	strb	r3, [r2, #0]
 800cb94:	462b      	mov	r3, r5
 800cb96:	461d      	mov	r5, r3
 800cb98:	3b01      	subs	r3, #1
 800cb9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb9e:	2a39      	cmp	r2, #57	; 0x39
 800cba0:	d06c      	beq.n	800cc7c <_dtoa_r+0xba4>
 800cba2:	3201      	adds	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
 800cba6:	e747      	b.n	800ca38 <_dtoa_r+0x960>
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	dd07      	ble.n	800cbbc <_dtoa_r+0xae4>
 800cbac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cbb0:	d0ed      	beq.n	800cb8e <_dtoa_r+0xab6>
 800cbb2:	9a01      	ldr	r2, [sp, #4]
 800cbb4:	f109 0301 	add.w	r3, r9, #1
 800cbb8:	7013      	strb	r3, [r2, #0]
 800cbba:	e73d      	b.n	800ca38 <_dtoa_r+0x960>
 800cbbc:	9b04      	ldr	r3, [sp, #16]
 800cbbe:	9a08      	ldr	r2, [sp, #32]
 800cbc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d043      	beq.n	800cc50 <_dtoa_r+0xb78>
 800cbc8:	4651      	mov	r1, sl
 800cbca:	2300      	movs	r3, #0
 800cbcc:	220a      	movs	r2, #10
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 fe92 	bl	800d8f8 <__multadd>
 800cbd4:	45b8      	cmp	r8, r7
 800cbd6:	4682      	mov	sl, r0
 800cbd8:	f04f 0300 	mov.w	r3, #0
 800cbdc:	f04f 020a 	mov.w	r2, #10
 800cbe0:	4641      	mov	r1, r8
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	d107      	bne.n	800cbf6 <_dtoa_r+0xb1e>
 800cbe6:	f000 fe87 	bl	800d8f8 <__multadd>
 800cbea:	4680      	mov	r8, r0
 800cbec:	4607      	mov	r7, r0
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	e775      	b.n	800cae2 <_dtoa_r+0xa0a>
 800cbf6:	f000 fe7f 	bl	800d8f8 <__multadd>
 800cbfa:	4639      	mov	r1, r7
 800cbfc:	4680      	mov	r8, r0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	220a      	movs	r2, #10
 800cc02:	4620      	mov	r0, r4
 800cc04:	f000 fe78 	bl	800d8f8 <__multadd>
 800cc08:	4607      	mov	r7, r0
 800cc0a:	e7f0      	b.n	800cbee <_dtoa_r+0xb16>
 800cc0c:	9b04      	ldr	r3, [sp, #16]
 800cc0e:	9301      	str	r3, [sp, #4]
 800cc10:	9d00      	ldr	r5, [sp, #0]
 800cc12:	4631      	mov	r1, r6
 800cc14:	4650      	mov	r0, sl
 800cc16:	f7ff f9d7 	bl	800bfc8 <quorem>
 800cc1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc1e:	9b00      	ldr	r3, [sp, #0]
 800cc20:	f805 9b01 	strb.w	r9, [r5], #1
 800cc24:	1aea      	subs	r2, r5, r3
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	dd07      	ble.n	800cc3c <_dtoa_r+0xb64>
 800cc2c:	4651      	mov	r1, sl
 800cc2e:	2300      	movs	r3, #0
 800cc30:	220a      	movs	r2, #10
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 fe60 	bl	800d8f8 <__multadd>
 800cc38:	4682      	mov	sl, r0
 800cc3a:	e7ea      	b.n	800cc12 <_dtoa_r+0xb3a>
 800cc3c:	9b01      	ldr	r3, [sp, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bfc8      	it	gt
 800cc42:	461d      	movgt	r5, r3
 800cc44:	9b00      	ldr	r3, [sp, #0]
 800cc46:	bfd8      	it	le
 800cc48:	2501      	movle	r5, #1
 800cc4a:	441d      	add	r5, r3
 800cc4c:	f04f 0800 	mov.w	r8, #0
 800cc50:	4651      	mov	r1, sl
 800cc52:	2201      	movs	r2, #1
 800cc54:	4620      	mov	r0, r4
 800cc56:	f001 f847 	bl	800dce8 <__lshift>
 800cc5a:	4631      	mov	r1, r6
 800cc5c:	4682      	mov	sl, r0
 800cc5e:	f001 f8af 	bl	800ddc0 <__mcmp>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	dc96      	bgt.n	800cb94 <_dtoa_r+0xabc>
 800cc66:	d102      	bne.n	800cc6e <_dtoa_r+0xb96>
 800cc68:	f019 0f01 	tst.w	r9, #1
 800cc6c:	d192      	bne.n	800cb94 <_dtoa_r+0xabc>
 800cc6e:	462b      	mov	r3, r5
 800cc70:	461d      	mov	r5, r3
 800cc72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc76:	2a30      	cmp	r2, #48	; 0x30
 800cc78:	d0fa      	beq.n	800cc70 <_dtoa_r+0xb98>
 800cc7a:	e6dd      	b.n	800ca38 <_dtoa_r+0x960>
 800cc7c:	9a00      	ldr	r2, [sp, #0]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d189      	bne.n	800cb96 <_dtoa_r+0xabe>
 800cc82:	f10b 0b01 	add.w	fp, fp, #1
 800cc86:	2331      	movs	r3, #49	; 0x31
 800cc88:	e796      	b.n	800cbb8 <_dtoa_r+0xae0>
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <_dtoa_r+0xbdc>)
 800cc8c:	f7ff ba99 	b.w	800c1c2 <_dtoa_r+0xea>
 800cc90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f47f aa6d 	bne.w	800c172 <_dtoa_r+0x9a>
 800cc98:	4b07      	ldr	r3, [pc, #28]	; (800ccb8 <_dtoa_r+0xbe0>)
 800cc9a:	f7ff ba92 	b.w	800c1c2 <_dtoa_r+0xea>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dcb5      	bgt.n	800cc10 <_dtoa_r+0xb38>
 800cca4:	9b07      	ldr	r3, [sp, #28]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	f73f aeb1 	bgt.w	800ca0e <_dtoa_r+0x936>
 800ccac:	e7b0      	b.n	800cc10 <_dtoa_r+0xb38>
 800ccae:	bf00      	nop
 800ccb0:	080100fb 	.word	0x080100fb
 800ccb4:	0800fe60 	.word	0x0800fe60
 800ccb8:	08010096 	.word	0x08010096

0800ccbc <_free_r>:
 800ccbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	d044      	beq.n	800cd4c <_free_r+0x90>
 800ccc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc6:	9001      	str	r0, [sp, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f1a1 0404 	sub.w	r4, r1, #4
 800ccce:	bfb8      	it	lt
 800ccd0:	18e4      	addlt	r4, r4, r3
 800ccd2:	f7fe f893 	bl	800adfc <__malloc_lock>
 800ccd6:	4a1e      	ldr	r2, [pc, #120]	; (800cd50 <_free_r+0x94>)
 800ccd8:	9801      	ldr	r0, [sp, #4]
 800ccda:	6813      	ldr	r3, [r2, #0]
 800ccdc:	b933      	cbnz	r3, 800ccec <_free_r+0x30>
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	6014      	str	r4, [r2, #0]
 800cce2:	b003      	add	sp, #12
 800cce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cce8:	f7fe b88e 	b.w	800ae08 <__malloc_unlock>
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	d908      	bls.n	800cd02 <_free_r+0x46>
 800ccf0:	6825      	ldr	r5, [r4, #0]
 800ccf2:	1961      	adds	r1, r4, r5
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	bf01      	itttt	eq
 800ccf8:	6819      	ldreq	r1, [r3, #0]
 800ccfa:	685b      	ldreq	r3, [r3, #4]
 800ccfc:	1949      	addeq	r1, r1, r5
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	e7ed      	b.n	800ccde <_free_r+0x22>
 800cd02:	461a      	mov	r2, r3
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	b10b      	cbz	r3, 800cd0c <_free_r+0x50>
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d9fa      	bls.n	800cd02 <_free_r+0x46>
 800cd0c:	6811      	ldr	r1, [r2, #0]
 800cd0e:	1855      	adds	r5, r2, r1
 800cd10:	42a5      	cmp	r5, r4
 800cd12:	d10b      	bne.n	800cd2c <_free_r+0x70>
 800cd14:	6824      	ldr	r4, [r4, #0]
 800cd16:	4421      	add	r1, r4
 800cd18:	1854      	adds	r4, r2, r1
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	6011      	str	r1, [r2, #0]
 800cd1e:	d1e0      	bne.n	800cce2 <_free_r+0x26>
 800cd20:	681c      	ldr	r4, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	6053      	str	r3, [r2, #4]
 800cd26:	440c      	add	r4, r1
 800cd28:	6014      	str	r4, [r2, #0]
 800cd2a:	e7da      	b.n	800cce2 <_free_r+0x26>
 800cd2c:	d902      	bls.n	800cd34 <_free_r+0x78>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	e7d6      	b.n	800cce2 <_free_r+0x26>
 800cd34:	6825      	ldr	r5, [r4, #0]
 800cd36:	1961      	adds	r1, r4, r5
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	bf04      	itt	eq
 800cd3c:	6819      	ldreq	r1, [r3, #0]
 800cd3e:	685b      	ldreq	r3, [r3, #4]
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	bf04      	itt	eq
 800cd44:	1949      	addeq	r1, r1, r5
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	6054      	str	r4, [r2, #4]
 800cd4a:	e7ca      	b.n	800cce2 <_free_r+0x26>
 800cd4c:	b003      	add	sp, #12
 800cd4e:	bd30      	pop	{r4, r5, pc}
 800cd50:	200046f8 	.word	0x200046f8

0800cd54 <rshift>:
 800cd54:	6903      	ldr	r3, [r0, #16]
 800cd56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd62:	f100 0414 	add.w	r4, r0, #20
 800cd66:	dd45      	ble.n	800cdf4 <rshift+0xa0>
 800cd68:	f011 011f 	ands.w	r1, r1, #31
 800cd6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd74:	d10c      	bne.n	800cd90 <rshift+0x3c>
 800cd76:	f100 0710 	add.w	r7, r0, #16
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	42b1      	cmp	r1, r6
 800cd7e:	d334      	bcc.n	800cdea <rshift+0x96>
 800cd80:	1a9b      	subs	r3, r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	1eea      	subs	r2, r5, #3
 800cd86:	4296      	cmp	r6, r2
 800cd88:	bf38      	it	cc
 800cd8a:	2300      	movcc	r3, #0
 800cd8c:	4423      	add	r3, r4
 800cd8e:	e015      	b.n	800cdbc <rshift+0x68>
 800cd90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd94:	f1c1 0820 	rsb	r8, r1, #32
 800cd98:	40cf      	lsrs	r7, r1
 800cd9a:	f105 0e04 	add.w	lr, r5, #4
 800cd9e:	46a1      	mov	r9, r4
 800cda0:	4576      	cmp	r6, lr
 800cda2:	46f4      	mov	ip, lr
 800cda4:	d815      	bhi.n	800cdd2 <rshift+0x7e>
 800cda6:	1a9a      	subs	r2, r3, r2
 800cda8:	0092      	lsls	r2, r2, #2
 800cdaa:	3a04      	subs	r2, #4
 800cdac:	3501      	adds	r5, #1
 800cdae:	42ae      	cmp	r6, r5
 800cdb0:	bf38      	it	cc
 800cdb2:	2200      	movcc	r2, #0
 800cdb4:	18a3      	adds	r3, r4, r2
 800cdb6:	50a7      	str	r7, [r4, r2]
 800cdb8:	b107      	cbz	r7, 800cdbc <rshift+0x68>
 800cdba:	3304      	adds	r3, #4
 800cdbc:	1b1a      	subs	r2, r3, r4
 800cdbe:	42a3      	cmp	r3, r4
 800cdc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdc4:	bf08      	it	eq
 800cdc6:	2300      	moveq	r3, #0
 800cdc8:	6102      	str	r2, [r0, #16]
 800cdca:	bf08      	it	eq
 800cdcc:	6143      	streq	r3, [r0, #20]
 800cdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdd2:	f8dc c000 	ldr.w	ip, [ip]
 800cdd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdda:	ea4c 0707 	orr.w	r7, ip, r7
 800cdde:	f849 7b04 	str.w	r7, [r9], #4
 800cde2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cde6:	40cf      	lsrs	r7, r1
 800cde8:	e7da      	b.n	800cda0 <rshift+0x4c>
 800cdea:	f851 cb04 	ldr.w	ip, [r1], #4
 800cdee:	f847 cf04 	str.w	ip, [r7, #4]!
 800cdf2:	e7c3      	b.n	800cd7c <rshift+0x28>
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	e7e1      	b.n	800cdbc <rshift+0x68>

0800cdf8 <__hexdig_fun>:
 800cdf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cdfc:	2b09      	cmp	r3, #9
 800cdfe:	d802      	bhi.n	800ce06 <__hexdig_fun+0xe>
 800ce00:	3820      	subs	r0, #32
 800ce02:	b2c0      	uxtb	r0, r0
 800ce04:	4770      	bx	lr
 800ce06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce0a:	2b05      	cmp	r3, #5
 800ce0c:	d801      	bhi.n	800ce12 <__hexdig_fun+0x1a>
 800ce0e:	3847      	subs	r0, #71	; 0x47
 800ce10:	e7f7      	b.n	800ce02 <__hexdig_fun+0xa>
 800ce12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	d801      	bhi.n	800ce1e <__hexdig_fun+0x26>
 800ce1a:	3827      	subs	r0, #39	; 0x27
 800ce1c:	e7f1      	b.n	800ce02 <__hexdig_fun+0xa>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	4770      	bx	lr
	...

0800ce24 <__gethex>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	4617      	mov	r7, r2
 800ce2a:	680a      	ldr	r2, [r1, #0]
 800ce2c:	b085      	sub	sp, #20
 800ce2e:	f102 0b02 	add.w	fp, r2, #2
 800ce32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce3a:	4681      	mov	r9, r0
 800ce3c:	468a      	mov	sl, r1
 800ce3e:	9302      	str	r3, [sp, #8]
 800ce40:	32fe      	adds	r2, #254	; 0xfe
 800ce42:	eb02 030b 	add.w	r3, r2, fp
 800ce46:	46d8      	mov	r8, fp
 800ce48:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ce4c:	9301      	str	r3, [sp, #4]
 800ce4e:	2830      	cmp	r0, #48	; 0x30
 800ce50:	d0f7      	beq.n	800ce42 <__gethex+0x1e>
 800ce52:	f7ff ffd1 	bl	800cdf8 <__hexdig_fun>
 800ce56:	4604      	mov	r4, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d138      	bne.n	800cece <__gethex+0xaa>
 800ce5c:	49a7      	ldr	r1, [pc, #668]	; (800d0fc <__gethex+0x2d8>)
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4640      	mov	r0, r8
 800ce62:	f7fe ff67 	bl	800bd34 <strncmp>
 800ce66:	4606      	mov	r6, r0
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d169      	bne.n	800cf40 <__gethex+0x11c>
 800ce6c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ce70:	465d      	mov	r5, fp
 800ce72:	f7ff ffc1 	bl	800cdf8 <__hexdig_fun>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d064      	beq.n	800cf44 <__gethex+0x120>
 800ce7a:	465a      	mov	r2, fp
 800ce7c:	7810      	ldrb	r0, [r2, #0]
 800ce7e:	2830      	cmp	r0, #48	; 0x30
 800ce80:	4690      	mov	r8, r2
 800ce82:	f102 0201 	add.w	r2, r2, #1
 800ce86:	d0f9      	beq.n	800ce7c <__gethex+0x58>
 800ce88:	f7ff ffb6 	bl	800cdf8 <__hexdig_fun>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	fab0 f480 	clz	r4, r0
 800ce92:	0964      	lsrs	r4, r4, #5
 800ce94:	465e      	mov	r6, fp
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	4642      	mov	r2, r8
 800ce9a:	4615      	mov	r5, r2
 800ce9c:	3201      	adds	r2, #1
 800ce9e:	7828      	ldrb	r0, [r5, #0]
 800cea0:	f7ff ffaa 	bl	800cdf8 <__hexdig_fun>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d1f8      	bne.n	800ce9a <__gethex+0x76>
 800cea8:	4994      	ldr	r1, [pc, #592]	; (800d0fc <__gethex+0x2d8>)
 800ceaa:	2201      	movs	r2, #1
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7fe ff41 	bl	800bd34 <strncmp>
 800ceb2:	b978      	cbnz	r0, 800ced4 <__gethex+0xb0>
 800ceb4:	b946      	cbnz	r6, 800cec8 <__gethex+0xa4>
 800ceb6:	1c6e      	adds	r6, r5, #1
 800ceb8:	4632      	mov	r2, r6
 800ceba:	4615      	mov	r5, r2
 800cebc:	3201      	adds	r2, #1
 800cebe:	7828      	ldrb	r0, [r5, #0]
 800cec0:	f7ff ff9a 	bl	800cdf8 <__hexdig_fun>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d1f8      	bne.n	800ceba <__gethex+0x96>
 800cec8:	1b73      	subs	r3, r6, r5
 800ceca:	009e      	lsls	r6, r3, #2
 800cecc:	e004      	b.n	800ced8 <__gethex+0xb4>
 800cece:	2400      	movs	r4, #0
 800ced0:	4626      	mov	r6, r4
 800ced2:	e7e1      	b.n	800ce98 <__gethex+0x74>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	d1f7      	bne.n	800cec8 <__gethex+0xa4>
 800ced8:	782b      	ldrb	r3, [r5, #0]
 800ceda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cede:	2b50      	cmp	r3, #80	; 0x50
 800cee0:	d13d      	bne.n	800cf5e <__gethex+0x13a>
 800cee2:	786b      	ldrb	r3, [r5, #1]
 800cee4:	2b2b      	cmp	r3, #43	; 0x2b
 800cee6:	d02f      	beq.n	800cf48 <__gethex+0x124>
 800cee8:	2b2d      	cmp	r3, #45	; 0x2d
 800ceea:	d031      	beq.n	800cf50 <__gethex+0x12c>
 800ceec:	1c69      	adds	r1, r5, #1
 800ceee:	f04f 0b00 	mov.w	fp, #0
 800cef2:	7808      	ldrb	r0, [r1, #0]
 800cef4:	f7ff ff80 	bl	800cdf8 <__hexdig_fun>
 800cef8:	1e42      	subs	r2, r0, #1
 800cefa:	b2d2      	uxtb	r2, r2
 800cefc:	2a18      	cmp	r2, #24
 800cefe:	d82e      	bhi.n	800cf5e <__gethex+0x13a>
 800cf00:	f1a0 0210 	sub.w	r2, r0, #16
 800cf04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf08:	f7ff ff76 	bl	800cdf8 <__hexdig_fun>
 800cf0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800cf10:	fa5f fc8c 	uxtb.w	ip, ip
 800cf14:	f1bc 0f18 	cmp.w	ip, #24
 800cf18:	d91d      	bls.n	800cf56 <__gethex+0x132>
 800cf1a:	f1bb 0f00 	cmp.w	fp, #0
 800cf1e:	d000      	beq.n	800cf22 <__gethex+0xfe>
 800cf20:	4252      	negs	r2, r2
 800cf22:	4416      	add	r6, r2
 800cf24:	f8ca 1000 	str.w	r1, [sl]
 800cf28:	b1dc      	cbz	r4, 800cf62 <__gethex+0x13e>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	bf14      	ite	ne
 800cf30:	f04f 0800 	movne.w	r8, #0
 800cf34:	f04f 0806 	moveq.w	r8, #6
 800cf38:	4640      	mov	r0, r8
 800cf3a:	b005      	add	sp, #20
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf40:	4645      	mov	r5, r8
 800cf42:	4626      	mov	r6, r4
 800cf44:	2401      	movs	r4, #1
 800cf46:	e7c7      	b.n	800ced8 <__gethex+0xb4>
 800cf48:	f04f 0b00 	mov.w	fp, #0
 800cf4c:	1ca9      	adds	r1, r5, #2
 800cf4e:	e7d0      	b.n	800cef2 <__gethex+0xce>
 800cf50:	f04f 0b01 	mov.w	fp, #1
 800cf54:	e7fa      	b.n	800cf4c <__gethex+0x128>
 800cf56:	230a      	movs	r3, #10
 800cf58:	fb03 0002 	mla	r0, r3, r2, r0
 800cf5c:	e7d0      	b.n	800cf00 <__gethex+0xdc>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	e7e0      	b.n	800cf24 <__gethex+0x100>
 800cf62:	eba5 0308 	sub.w	r3, r5, r8
 800cf66:	3b01      	subs	r3, #1
 800cf68:	4621      	mov	r1, r4
 800cf6a:	2b07      	cmp	r3, #7
 800cf6c:	dc0a      	bgt.n	800cf84 <__gethex+0x160>
 800cf6e:	4648      	mov	r0, r9
 800cf70:	f000 fc60 	bl	800d834 <_Balloc>
 800cf74:	4604      	mov	r4, r0
 800cf76:	b940      	cbnz	r0, 800cf8a <__gethex+0x166>
 800cf78:	4b61      	ldr	r3, [pc, #388]	; (800d100 <__gethex+0x2dc>)
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	21e4      	movs	r1, #228	; 0xe4
 800cf7e:	4861      	ldr	r0, [pc, #388]	; (800d104 <__gethex+0x2e0>)
 800cf80:	f7ff f804 	bl	800bf8c <__assert_func>
 800cf84:	3101      	adds	r1, #1
 800cf86:	105b      	asrs	r3, r3, #1
 800cf88:	e7ef      	b.n	800cf6a <__gethex+0x146>
 800cf8a:	f100 0a14 	add.w	sl, r0, #20
 800cf8e:	2300      	movs	r3, #0
 800cf90:	495a      	ldr	r1, [pc, #360]	; (800d0fc <__gethex+0x2d8>)
 800cf92:	f8cd a004 	str.w	sl, [sp, #4]
 800cf96:	469b      	mov	fp, r3
 800cf98:	45a8      	cmp	r8, r5
 800cf9a:	d342      	bcc.n	800d022 <__gethex+0x1fe>
 800cf9c:	9801      	ldr	r0, [sp, #4]
 800cf9e:	f840 bb04 	str.w	fp, [r0], #4
 800cfa2:	eba0 000a 	sub.w	r0, r0, sl
 800cfa6:	1080      	asrs	r0, r0, #2
 800cfa8:	6120      	str	r0, [r4, #16]
 800cfaa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cfae:	4658      	mov	r0, fp
 800cfb0:	f000 fd32 	bl	800da18 <__hi0bits>
 800cfb4:	683d      	ldr	r5, [r7, #0]
 800cfb6:	eba8 0000 	sub.w	r0, r8, r0
 800cfba:	42a8      	cmp	r0, r5
 800cfbc:	dd59      	ble.n	800d072 <__gethex+0x24e>
 800cfbe:	eba0 0805 	sub.w	r8, r0, r5
 800cfc2:	4641      	mov	r1, r8
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f001 f8c1 	bl	800e14c <__any_on>
 800cfca:	4683      	mov	fp, r0
 800cfcc:	b1b8      	cbz	r0, 800cffe <__gethex+0x1da>
 800cfce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800cfd2:	1159      	asrs	r1, r3, #5
 800cfd4:	f003 021f 	and.w	r2, r3, #31
 800cfd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfdc:	f04f 0b01 	mov.w	fp, #1
 800cfe0:	fa0b f202 	lsl.w	r2, fp, r2
 800cfe4:	420a      	tst	r2, r1
 800cfe6:	d00a      	beq.n	800cffe <__gethex+0x1da>
 800cfe8:	455b      	cmp	r3, fp
 800cfea:	dd06      	ble.n	800cffa <__gethex+0x1d6>
 800cfec:	f1a8 0102 	sub.w	r1, r8, #2
 800cff0:	4620      	mov	r0, r4
 800cff2:	f001 f8ab 	bl	800e14c <__any_on>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d138      	bne.n	800d06c <__gethex+0x248>
 800cffa:	f04f 0b02 	mov.w	fp, #2
 800cffe:	4641      	mov	r1, r8
 800d000:	4620      	mov	r0, r4
 800d002:	f7ff fea7 	bl	800cd54 <rshift>
 800d006:	4446      	add	r6, r8
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	42b3      	cmp	r3, r6
 800d00c:	da41      	bge.n	800d092 <__gethex+0x26e>
 800d00e:	4621      	mov	r1, r4
 800d010:	4648      	mov	r0, r9
 800d012:	f000 fc4f 	bl	800d8b4 <_Bfree>
 800d016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d018:	2300      	movs	r3, #0
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d020:	e78a      	b.n	800cf38 <__gethex+0x114>
 800d022:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d026:	2a2e      	cmp	r2, #46	; 0x2e
 800d028:	d014      	beq.n	800d054 <__gethex+0x230>
 800d02a:	2b20      	cmp	r3, #32
 800d02c:	d106      	bne.n	800d03c <__gethex+0x218>
 800d02e:	9b01      	ldr	r3, [sp, #4]
 800d030:	f843 bb04 	str.w	fp, [r3], #4
 800d034:	f04f 0b00 	mov.w	fp, #0
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	465b      	mov	r3, fp
 800d03c:	7828      	ldrb	r0, [r5, #0]
 800d03e:	9303      	str	r3, [sp, #12]
 800d040:	f7ff feda 	bl	800cdf8 <__hexdig_fun>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	f000 000f 	and.w	r0, r0, #15
 800d04a:	4098      	lsls	r0, r3
 800d04c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d050:	3304      	adds	r3, #4
 800d052:	e7a1      	b.n	800cf98 <__gethex+0x174>
 800d054:	45a8      	cmp	r8, r5
 800d056:	d8e8      	bhi.n	800d02a <__gethex+0x206>
 800d058:	2201      	movs	r2, #1
 800d05a:	4628      	mov	r0, r5
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	f7fe fe69 	bl	800bd34 <strncmp>
 800d062:	4926      	ldr	r1, [pc, #152]	; (800d0fc <__gethex+0x2d8>)
 800d064:	9b03      	ldr	r3, [sp, #12]
 800d066:	2800      	cmp	r0, #0
 800d068:	d1df      	bne.n	800d02a <__gethex+0x206>
 800d06a:	e795      	b.n	800cf98 <__gethex+0x174>
 800d06c:	f04f 0b03 	mov.w	fp, #3
 800d070:	e7c5      	b.n	800cffe <__gethex+0x1da>
 800d072:	da0b      	bge.n	800d08c <__gethex+0x268>
 800d074:	eba5 0800 	sub.w	r8, r5, r0
 800d078:	4621      	mov	r1, r4
 800d07a:	4642      	mov	r2, r8
 800d07c:	4648      	mov	r0, r9
 800d07e:	f000 fe33 	bl	800dce8 <__lshift>
 800d082:	eba6 0608 	sub.w	r6, r6, r8
 800d086:	4604      	mov	r4, r0
 800d088:	f100 0a14 	add.w	sl, r0, #20
 800d08c:	f04f 0b00 	mov.w	fp, #0
 800d090:	e7ba      	b.n	800d008 <__gethex+0x1e4>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	42b3      	cmp	r3, r6
 800d096:	dd73      	ble.n	800d180 <__gethex+0x35c>
 800d098:	1b9e      	subs	r6, r3, r6
 800d09a:	42b5      	cmp	r5, r6
 800d09c:	dc34      	bgt.n	800d108 <__gethex+0x2e4>
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d023      	beq.n	800d0ec <__gethex+0x2c8>
 800d0a4:	2b03      	cmp	r3, #3
 800d0a6:	d025      	beq.n	800d0f4 <__gethex+0x2d0>
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d115      	bne.n	800d0d8 <__gethex+0x2b4>
 800d0ac:	42b5      	cmp	r5, r6
 800d0ae:	d113      	bne.n	800d0d8 <__gethex+0x2b4>
 800d0b0:	2d01      	cmp	r5, #1
 800d0b2:	d10b      	bne.n	800d0cc <__gethex+0x2a8>
 800d0b4:	9a02      	ldr	r2, [sp, #8]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	6123      	str	r3, [r4, #16]
 800d0be:	f8ca 3000 	str.w	r3, [sl]
 800d0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0c4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d0c8:	601c      	str	r4, [r3, #0]
 800d0ca:	e735      	b.n	800cf38 <__gethex+0x114>
 800d0cc:	1e69      	subs	r1, r5, #1
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f001 f83c 	bl	800e14c <__any_on>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1ed      	bne.n	800d0b4 <__gethex+0x290>
 800d0d8:	4621      	mov	r1, r4
 800d0da:	4648      	mov	r0, r9
 800d0dc:	f000 fbea 	bl	800d8b4 <_Bfree>
 800d0e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d0ea:	e725      	b.n	800cf38 <__gethex+0x114>
 800d0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1f2      	bne.n	800d0d8 <__gethex+0x2b4>
 800d0f2:	e7df      	b.n	800d0b4 <__gethex+0x290>
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1dc      	bne.n	800d0b4 <__gethex+0x290>
 800d0fa:	e7ed      	b.n	800d0d8 <__gethex+0x2b4>
 800d0fc:	0800fe89 	.word	0x0800fe89
 800d100:	080100fb 	.word	0x080100fb
 800d104:	0801010c 	.word	0x0801010c
 800d108:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d10c:	f1bb 0f00 	cmp.w	fp, #0
 800d110:	d133      	bne.n	800d17a <__gethex+0x356>
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	d004      	beq.n	800d122 <__gethex+0x2fe>
 800d118:	4641      	mov	r1, r8
 800d11a:	4620      	mov	r0, r4
 800d11c:	f001 f816 	bl	800e14c <__any_on>
 800d120:	4683      	mov	fp, r0
 800d122:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d126:	2301      	movs	r3, #1
 800d128:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d12c:	f008 081f 	and.w	r8, r8, #31
 800d130:	fa03 f308 	lsl.w	r3, r3, r8
 800d134:	4213      	tst	r3, r2
 800d136:	4631      	mov	r1, r6
 800d138:	4620      	mov	r0, r4
 800d13a:	bf18      	it	ne
 800d13c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d140:	1bad      	subs	r5, r5, r6
 800d142:	f7ff fe07 	bl	800cd54 <rshift>
 800d146:	687e      	ldr	r6, [r7, #4]
 800d148:	f04f 0802 	mov.w	r8, #2
 800d14c:	f1bb 0f00 	cmp.w	fp, #0
 800d150:	d04a      	beq.n	800d1e8 <__gethex+0x3c4>
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d016      	beq.n	800d186 <__gethex+0x362>
 800d158:	2b03      	cmp	r3, #3
 800d15a:	d018      	beq.n	800d18e <__gethex+0x36a>
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d109      	bne.n	800d174 <__gethex+0x350>
 800d160:	f01b 0f02 	tst.w	fp, #2
 800d164:	d006      	beq.n	800d174 <__gethex+0x350>
 800d166:	f8da 3000 	ldr.w	r3, [sl]
 800d16a:	ea4b 0b03 	orr.w	fp, fp, r3
 800d16e:	f01b 0f01 	tst.w	fp, #1
 800d172:	d10f      	bne.n	800d194 <__gethex+0x370>
 800d174:	f048 0810 	orr.w	r8, r8, #16
 800d178:	e036      	b.n	800d1e8 <__gethex+0x3c4>
 800d17a:	f04f 0b01 	mov.w	fp, #1
 800d17e:	e7d0      	b.n	800d122 <__gethex+0x2fe>
 800d180:	f04f 0801 	mov.w	r8, #1
 800d184:	e7e2      	b.n	800d14c <__gethex+0x328>
 800d186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d188:	f1c3 0301 	rsb	r3, r3, #1
 800d18c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0ef      	beq.n	800d174 <__gethex+0x350>
 800d194:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d198:	f104 0214 	add.w	r2, r4, #20
 800d19c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	4694      	mov	ip, r2
 800d1aa:	f852 1b04 	ldr.w	r1, [r2], #4
 800d1ae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d1b2:	d01e      	beq.n	800d1f2 <__gethex+0x3ce>
 800d1b4:	3101      	adds	r1, #1
 800d1b6:	f8cc 1000 	str.w	r1, [ip]
 800d1ba:	f1b8 0f02 	cmp.w	r8, #2
 800d1be:	f104 0214 	add.w	r2, r4, #20
 800d1c2:	d13d      	bne.n	800d240 <__gethex+0x41c>
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	d10b      	bne.n	800d1e4 <__gethex+0x3c0>
 800d1cc:	1169      	asrs	r1, r5, #5
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	f005 051f 	and.w	r5, r5, #31
 800d1d4:	fa03 f505 	lsl.w	r5, r3, r5
 800d1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1dc:	421d      	tst	r5, r3
 800d1de:	bf18      	it	ne
 800d1e0:	f04f 0801 	movne.w	r8, #1
 800d1e4:	f048 0820 	orr.w	r8, r8, #32
 800d1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ea:	601c      	str	r4, [r3, #0]
 800d1ec:	9b02      	ldr	r3, [sp, #8]
 800d1ee:	601e      	str	r6, [r3, #0]
 800d1f0:	e6a2      	b.n	800cf38 <__gethex+0x114>
 800d1f2:	4290      	cmp	r0, r2
 800d1f4:	f842 3c04 	str.w	r3, [r2, #-4]
 800d1f8:	d8d6      	bhi.n	800d1a8 <__gethex+0x384>
 800d1fa:	68a2      	ldr	r2, [r4, #8]
 800d1fc:	4593      	cmp	fp, r2
 800d1fe:	db17      	blt.n	800d230 <__gethex+0x40c>
 800d200:	6861      	ldr	r1, [r4, #4]
 800d202:	4648      	mov	r0, r9
 800d204:	3101      	adds	r1, #1
 800d206:	f000 fb15 	bl	800d834 <_Balloc>
 800d20a:	4682      	mov	sl, r0
 800d20c:	b918      	cbnz	r0, 800d216 <__gethex+0x3f2>
 800d20e:	4b1b      	ldr	r3, [pc, #108]	; (800d27c <__gethex+0x458>)
 800d210:	4602      	mov	r2, r0
 800d212:	2184      	movs	r1, #132	; 0x84
 800d214:	e6b3      	b.n	800cf7e <__gethex+0x15a>
 800d216:	6922      	ldr	r2, [r4, #16]
 800d218:	3202      	adds	r2, #2
 800d21a:	f104 010c 	add.w	r1, r4, #12
 800d21e:	0092      	lsls	r2, r2, #2
 800d220:	300c      	adds	r0, #12
 800d222:	f7fe fe94 	bl	800bf4e <memcpy>
 800d226:	4621      	mov	r1, r4
 800d228:	4648      	mov	r0, r9
 800d22a:	f000 fb43 	bl	800d8b4 <_Bfree>
 800d22e:	4654      	mov	r4, sl
 800d230:	6922      	ldr	r2, [r4, #16]
 800d232:	1c51      	adds	r1, r2, #1
 800d234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d238:	6121      	str	r1, [r4, #16]
 800d23a:	2101      	movs	r1, #1
 800d23c:	6151      	str	r1, [r2, #20]
 800d23e:	e7bc      	b.n	800d1ba <__gethex+0x396>
 800d240:	6921      	ldr	r1, [r4, #16]
 800d242:	4559      	cmp	r1, fp
 800d244:	dd0b      	ble.n	800d25e <__gethex+0x43a>
 800d246:	2101      	movs	r1, #1
 800d248:	4620      	mov	r0, r4
 800d24a:	f7ff fd83 	bl	800cd54 <rshift>
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	3601      	adds	r6, #1
 800d252:	42b3      	cmp	r3, r6
 800d254:	f6ff aedb 	blt.w	800d00e <__gethex+0x1ea>
 800d258:	f04f 0801 	mov.w	r8, #1
 800d25c:	e7c2      	b.n	800d1e4 <__gethex+0x3c0>
 800d25e:	f015 051f 	ands.w	r5, r5, #31
 800d262:	d0f9      	beq.n	800d258 <__gethex+0x434>
 800d264:	9b01      	ldr	r3, [sp, #4]
 800d266:	441a      	add	r2, r3
 800d268:	f1c5 0520 	rsb	r5, r5, #32
 800d26c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d270:	f000 fbd2 	bl	800da18 <__hi0bits>
 800d274:	42a8      	cmp	r0, r5
 800d276:	dbe6      	blt.n	800d246 <__gethex+0x422>
 800d278:	e7ee      	b.n	800d258 <__gethex+0x434>
 800d27a:	bf00      	nop
 800d27c:	080100fb 	.word	0x080100fb

0800d280 <L_shift>:
 800d280:	f1c2 0208 	rsb	r2, r2, #8
 800d284:	0092      	lsls	r2, r2, #2
 800d286:	b570      	push	{r4, r5, r6, lr}
 800d288:	f1c2 0620 	rsb	r6, r2, #32
 800d28c:	6843      	ldr	r3, [r0, #4]
 800d28e:	6804      	ldr	r4, [r0, #0]
 800d290:	fa03 f506 	lsl.w	r5, r3, r6
 800d294:	432c      	orrs	r4, r5
 800d296:	40d3      	lsrs	r3, r2
 800d298:	6004      	str	r4, [r0, #0]
 800d29a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d29e:	4288      	cmp	r0, r1
 800d2a0:	d3f4      	bcc.n	800d28c <L_shift+0xc>
 800d2a2:	bd70      	pop	{r4, r5, r6, pc}

0800d2a4 <__match>:
 800d2a4:	b530      	push	{r4, r5, lr}
 800d2a6:	6803      	ldr	r3, [r0, #0]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ae:	b914      	cbnz	r4, 800d2b6 <__match+0x12>
 800d2b0:	6003      	str	r3, [r0, #0]
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	bd30      	pop	{r4, r5, pc}
 800d2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2be:	2d19      	cmp	r5, #25
 800d2c0:	bf98      	it	ls
 800d2c2:	3220      	addls	r2, #32
 800d2c4:	42a2      	cmp	r2, r4
 800d2c6:	d0f0      	beq.n	800d2aa <__match+0x6>
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	e7f3      	b.n	800d2b4 <__match+0x10>

0800d2cc <__hexnan>:
 800d2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	680b      	ldr	r3, [r1, #0]
 800d2d2:	6801      	ldr	r1, [r0, #0]
 800d2d4:	115e      	asrs	r6, r3, #5
 800d2d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2da:	f013 031f 	ands.w	r3, r3, #31
 800d2de:	b087      	sub	sp, #28
 800d2e0:	bf18      	it	ne
 800d2e2:	3604      	addne	r6, #4
 800d2e4:	2500      	movs	r5, #0
 800d2e6:	1f37      	subs	r7, r6, #4
 800d2e8:	4682      	mov	sl, r0
 800d2ea:	4690      	mov	r8, r2
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2f2:	46b9      	mov	r9, r7
 800d2f4:	463c      	mov	r4, r7
 800d2f6:	9502      	str	r5, [sp, #8]
 800d2f8:	46ab      	mov	fp, r5
 800d2fa:	784a      	ldrb	r2, [r1, #1]
 800d2fc:	1c4b      	adds	r3, r1, #1
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	b342      	cbz	r2, 800d354 <__hexnan+0x88>
 800d302:	4610      	mov	r0, r2
 800d304:	9105      	str	r1, [sp, #20]
 800d306:	9204      	str	r2, [sp, #16]
 800d308:	f7ff fd76 	bl	800cdf8 <__hexdig_fun>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d14f      	bne.n	800d3b0 <__hexnan+0xe4>
 800d310:	9a04      	ldr	r2, [sp, #16]
 800d312:	9905      	ldr	r1, [sp, #20]
 800d314:	2a20      	cmp	r2, #32
 800d316:	d818      	bhi.n	800d34a <__hexnan+0x7e>
 800d318:	9b02      	ldr	r3, [sp, #8]
 800d31a:	459b      	cmp	fp, r3
 800d31c:	dd13      	ble.n	800d346 <__hexnan+0x7a>
 800d31e:	454c      	cmp	r4, r9
 800d320:	d206      	bcs.n	800d330 <__hexnan+0x64>
 800d322:	2d07      	cmp	r5, #7
 800d324:	dc04      	bgt.n	800d330 <__hexnan+0x64>
 800d326:	462a      	mov	r2, r5
 800d328:	4649      	mov	r1, r9
 800d32a:	4620      	mov	r0, r4
 800d32c:	f7ff ffa8 	bl	800d280 <L_shift>
 800d330:	4544      	cmp	r4, r8
 800d332:	d950      	bls.n	800d3d6 <__hexnan+0x10a>
 800d334:	2300      	movs	r3, #0
 800d336:	f1a4 0904 	sub.w	r9, r4, #4
 800d33a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d33e:	f8cd b008 	str.w	fp, [sp, #8]
 800d342:	464c      	mov	r4, r9
 800d344:	461d      	mov	r5, r3
 800d346:	9903      	ldr	r1, [sp, #12]
 800d348:	e7d7      	b.n	800d2fa <__hexnan+0x2e>
 800d34a:	2a29      	cmp	r2, #41	; 0x29
 800d34c:	d155      	bne.n	800d3fa <__hexnan+0x12e>
 800d34e:	3102      	adds	r1, #2
 800d350:	f8ca 1000 	str.w	r1, [sl]
 800d354:	f1bb 0f00 	cmp.w	fp, #0
 800d358:	d04f      	beq.n	800d3fa <__hexnan+0x12e>
 800d35a:	454c      	cmp	r4, r9
 800d35c:	d206      	bcs.n	800d36c <__hexnan+0xa0>
 800d35e:	2d07      	cmp	r5, #7
 800d360:	dc04      	bgt.n	800d36c <__hexnan+0xa0>
 800d362:	462a      	mov	r2, r5
 800d364:	4649      	mov	r1, r9
 800d366:	4620      	mov	r0, r4
 800d368:	f7ff ff8a 	bl	800d280 <L_shift>
 800d36c:	4544      	cmp	r4, r8
 800d36e:	d934      	bls.n	800d3da <__hexnan+0x10e>
 800d370:	f1a8 0204 	sub.w	r2, r8, #4
 800d374:	4623      	mov	r3, r4
 800d376:	f853 1b04 	ldr.w	r1, [r3], #4
 800d37a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d37e:	429f      	cmp	r7, r3
 800d380:	d2f9      	bcs.n	800d376 <__hexnan+0xaa>
 800d382:	1b3b      	subs	r3, r7, r4
 800d384:	f023 0303 	bic.w	r3, r3, #3
 800d388:	3304      	adds	r3, #4
 800d38a:	3e03      	subs	r6, #3
 800d38c:	3401      	adds	r4, #1
 800d38e:	42a6      	cmp	r6, r4
 800d390:	bf38      	it	cc
 800d392:	2304      	movcc	r3, #4
 800d394:	4443      	add	r3, r8
 800d396:	2200      	movs	r2, #0
 800d398:	f843 2b04 	str.w	r2, [r3], #4
 800d39c:	429f      	cmp	r7, r3
 800d39e:	d2fb      	bcs.n	800d398 <__hexnan+0xcc>
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	b91b      	cbnz	r3, 800d3ac <__hexnan+0xe0>
 800d3a4:	4547      	cmp	r7, r8
 800d3a6:	d126      	bne.n	800d3f6 <__hexnan+0x12a>
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	603b      	str	r3, [r7, #0]
 800d3ac:	2005      	movs	r0, #5
 800d3ae:	e025      	b.n	800d3fc <__hexnan+0x130>
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	2d08      	cmp	r5, #8
 800d3b4:	f10b 0b01 	add.w	fp, fp, #1
 800d3b8:	dd06      	ble.n	800d3c8 <__hexnan+0xfc>
 800d3ba:	4544      	cmp	r4, r8
 800d3bc:	d9c3      	bls.n	800d346 <__hexnan+0x7a>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3c4:	2501      	movs	r5, #1
 800d3c6:	3c04      	subs	r4, #4
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	f000 000f 	and.w	r0, r0, #15
 800d3ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3d2:	6020      	str	r0, [r4, #0]
 800d3d4:	e7b7      	b.n	800d346 <__hexnan+0x7a>
 800d3d6:	2508      	movs	r5, #8
 800d3d8:	e7b5      	b.n	800d346 <__hexnan+0x7a>
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0df      	beq.n	800d3a0 <__hexnan+0xd4>
 800d3e0:	f1c3 0320 	rsb	r3, r3, #32
 800d3e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3e8:	40da      	lsrs	r2, r3
 800d3ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3f4:	e7d4      	b.n	800d3a0 <__hexnan+0xd4>
 800d3f6:	3f04      	subs	r7, #4
 800d3f8:	e7d2      	b.n	800d3a0 <__hexnan+0xd4>
 800d3fa:	2004      	movs	r0, #4
 800d3fc:	b007      	add	sp, #28
 800d3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d402 <__ssputs_r>:
 800d402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d406:	688e      	ldr	r6, [r1, #8]
 800d408:	461f      	mov	r7, r3
 800d40a:	42be      	cmp	r6, r7
 800d40c:	680b      	ldr	r3, [r1, #0]
 800d40e:	4682      	mov	sl, r0
 800d410:	460c      	mov	r4, r1
 800d412:	4690      	mov	r8, r2
 800d414:	d82c      	bhi.n	800d470 <__ssputs_r+0x6e>
 800d416:	898a      	ldrh	r2, [r1, #12]
 800d418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d41c:	d026      	beq.n	800d46c <__ssputs_r+0x6a>
 800d41e:	6965      	ldr	r5, [r4, #20]
 800d420:	6909      	ldr	r1, [r1, #16]
 800d422:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d426:	eba3 0901 	sub.w	r9, r3, r1
 800d42a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d42e:	1c7b      	adds	r3, r7, #1
 800d430:	444b      	add	r3, r9
 800d432:	106d      	asrs	r5, r5, #1
 800d434:	429d      	cmp	r5, r3
 800d436:	bf38      	it	cc
 800d438:	461d      	movcc	r5, r3
 800d43a:	0553      	lsls	r3, r2, #21
 800d43c:	d527      	bpl.n	800d48e <__ssputs_r+0x8c>
 800d43e:	4629      	mov	r1, r5
 800d440:	f7fd f8bc 	bl	800a5bc <_malloc_r>
 800d444:	4606      	mov	r6, r0
 800d446:	b360      	cbz	r0, 800d4a2 <__ssputs_r+0xa0>
 800d448:	6921      	ldr	r1, [r4, #16]
 800d44a:	464a      	mov	r2, r9
 800d44c:	f7fe fd7f 	bl	800bf4e <memcpy>
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45a:	81a3      	strh	r3, [r4, #12]
 800d45c:	6126      	str	r6, [r4, #16]
 800d45e:	6165      	str	r5, [r4, #20]
 800d460:	444e      	add	r6, r9
 800d462:	eba5 0509 	sub.w	r5, r5, r9
 800d466:	6026      	str	r6, [r4, #0]
 800d468:	60a5      	str	r5, [r4, #8]
 800d46a:	463e      	mov	r6, r7
 800d46c:	42be      	cmp	r6, r7
 800d46e:	d900      	bls.n	800d472 <__ssputs_r+0x70>
 800d470:	463e      	mov	r6, r7
 800d472:	6820      	ldr	r0, [r4, #0]
 800d474:	4632      	mov	r2, r6
 800d476:	4641      	mov	r1, r8
 800d478:	f000 ff1a 	bl	800e2b0 <memmove>
 800d47c:	68a3      	ldr	r3, [r4, #8]
 800d47e:	1b9b      	subs	r3, r3, r6
 800d480:	60a3      	str	r3, [r4, #8]
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	4433      	add	r3, r6
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	2000      	movs	r0, #0
 800d48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d48e:	462a      	mov	r2, r5
 800d490:	f000 fed2 	bl	800e238 <_realloc_r>
 800d494:	4606      	mov	r6, r0
 800d496:	2800      	cmp	r0, #0
 800d498:	d1e0      	bne.n	800d45c <__ssputs_r+0x5a>
 800d49a:	6921      	ldr	r1, [r4, #16]
 800d49c:	4650      	mov	r0, sl
 800d49e:	f7ff fc0d 	bl	800ccbc <_free_r>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	f8ca 3000 	str.w	r3, [sl]
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4b4:	e7e9      	b.n	800d48a <__ssputs_r+0x88>
	...

0800d4b8 <_svfiprintf_r>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	4698      	mov	r8, r3
 800d4be:	898b      	ldrh	r3, [r1, #12]
 800d4c0:	061b      	lsls	r3, r3, #24
 800d4c2:	b09d      	sub	sp, #116	; 0x74
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	d50e      	bpl.n	800d4ea <_svfiprintf_r+0x32>
 800d4cc:	690b      	ldr	r3, [r1, #16]
 800d4ce:	b963      	cbnz	r3, 800d4ea <_svfiprintf_r+0x32>
 800d4d0:	2140      	movs	r1, #64	; 0x40
 800d4d2:	f7fd f873 	bl	800a5bc <_malloc_r>
 800d4d6:	6028      	str	r0, [r5, #0]
 800d4d8:	6128      	str	r0, [r5, #16]
 800d4da:	b920      	cbnz	r0, 800d4e6 <_svfiprintf_r+0x2e>
 800d4dc:	230c      	movs	r3, #12
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4e4:	e0d0      	b.n	800d688 <_svfiprintf_r+0x1d0>
 800d4e6:	2340      	movs	r3, #64	; 0x40
 800d4e8:	616b      	str	r3, [r5, #20]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ee:	2320      	movs	r3, #32
 800d4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f8:	2330      	movs	r3, #48	; 0x30
 800d4fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d6a0 <_svfiprintf_r+0x1e8>
 800d4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d502:	f04f 0901 	mov.w	r9, #1
 800d506:	4623      	mov	r3, r4
 800d508:	469a      	mov	sl, r3
 800d50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50e:	b10a      	cbz	r2, 800d514 <_svfiprintf_r+0x5c>
 800d510:	2a25      	cmp	r2, #37	; 0x25
 800d512:	d1f9      	bne.n	800d508 <_svfiprintf_r+0x50>
 800d514:	ebba 0b04 	subs.w	fp, sl, r4
 800d518:	d00b      	beq.n	800d532 <_svfiprintf_r+0x7a>
 800d51a:	465b      	mov	r3, fp
 800d51c:	4622      	mov	r2, r4
 800d51e:	4629      	mov	r1, r5
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ff6e 	bl	800d402 <__ssputs_r>
 800d526:	3001      	adds	r0, #1
 800d528:	f000 80a9 	beq.w	800d67e <_svfiprintf_r+0x1c6>
 800d52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d52e:	445a      	add	r2, fp
 800d530:	9209      	str	r2, [sp, #36]	; 0x24
 800d532:	f89a 3000 	ldrb.w	r3, [sl]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 80a1 	beq.w	800d67e <_svfiprintf_r+0x1c6>
 800d53c:	2300      	movs	r3, #0
 800d53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d546:	f10a 0a01 	add.w	sl, sl, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	9307      	str	r3, [sp, #28]
 800d54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d552:	931a      	str	r3, [sp, #104]	; 0x68
 800d554:	4654      	mov	r4, sl
 800d556:	2205      	movs	r2, #5
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	4850      	ldr	r0, [pc, #320]	; (800d6a0 <_svfiprintf_r+0x1e8>)
 800d55e:	f7f2 fe37 	bl	80001d0 <memchr>
 800d562:	9a04      	ldr	r2, [sp, #16]
 800d564:	b9d8      	cbnz	r0, 800d59e <_svfiprintf_r+0xe6>
 800d566:	06d0      	lsls	r0, r2, #27
 800d568:	bf44      	itt	mi
 800d56a:	2320      	movmi	r3, #32
 800d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d570:	0711      	lsls	r1, r2, #28
 800d572:	bf44      	itt	mi
 800d574:	232b      	movmi	r3, #43	; 0x2b
 800d576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d57a:	f89a 3000 	ldrb.w	r3, [sl]
 800d57e:	2b2a      	cmp	r3, #42	; 0x2a
 800d580:	d015      	beq.n	800d5ae <_svfiprintf_r+0xf6>
 800d582:	9a07      	ldr	r2, [sp, #28]
 800d584:	4654      	mov	r4, sl
 800d586:	2000      	movs	r0, #0
 800d588:	f04f 0c0a 	mov.w	ip, #10
 800d58c:	4621      	mov	r1, r4
 800d58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d592:	3b30      	subs	r3, #48	; 0x30
 800d594:	2b09      	cmp	r3, #9
 800d596:	d94d      	bls.n	800d634 <_svfiprintf_r+0x17c>
 800d598:	b1b0      	cbz	r0, 800d5c8 <_svfiprintf_r+0x110>
 800d59a:	9207      	str	r2, [sp, #28]
 800d59c:	e014      	b.n	800d5c8 <_svfiprintf_r+0x110>
 800d59e:	eba0 0308 	sub.w	r3, r0, r8
 800d5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	9304      	str	r3, [sp, #16]
 800d5aa:	46a2      	mov	sl, r4
 800d5ac:	e7d2      	b.n	800d554 <_svfiprintf_r+0x9c>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d19      	adds	r1, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9103      	str	r1, [sp, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfbb      	ittet	lt
 800d5ba:	425b      	neglt	r3, r3
 800d5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d5c0:	9307      	strge	r3, [sp, #28]
 800d5c2:	9307      	strlt	r3, [sp, #28]
 800d5c4:	bfb8      	it	lt
 800d5c6:	9204      	strlt	r2, [sp, #16]
 800d5c8:	7823      	ldrb	r3, [r4, #0]
 800d5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d5cc:	d10c      	bne.n	800d5e8 <_svfiprintf_r+0x130>
 800d5ce:	7863      	ldrb	r3, [r4, #1]
 800d5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d2:	d134      	bne.n	800d63e <_svfiprintf_r+0x186>
 800d5d4:	9b03      	ldr	r3, [sp, #12]
 800d5d6:	1d1a      	adds	r2, r3, #4
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	9203      	str	r2, [sp, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	bfb8      	it	lt
 800d5e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d5e4:	3402      	adds	r4, #2
 800d5e6:	9305      	str	r3, [sp, #20]
 800d5e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d6b0 <_svfiprintf_r+0x1f8>
 800d5ec:	7821      	ldrb	r1, [r4, #0]
 800d5ee:	2203      	movs	r2, #3
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	f7f2 fded 	bl	80001d0 <memchr>
 800d5f6:	b138      	cbz	r0, 800d608 <_svfiprintf_r+0x150>
 800d5f8:	9b04      	ldr	r3, [sp, #16]
 800d5fa:	eba0 000a 	sub.w	r0, r0, sl
 800d5fe:	2240      	movs	r2, #64	; 0x40
 800d600:	4082      	lsls	r2, r0
 800d602:	4313      	orrs	r3, r2
 800d604:	3401      	adds	r4, #1
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60c:	4825      	ldr	r0, [pc, #148]	; (800d6a4 <_svfiprintf_r+0x1ec>)
 800d60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d612:	2206      	movs	r2, #6
 800d614:	f7f2 fddc 	bl	80001d0 <memchr>
 800d618:	2800      	cmp	r0, #0
 800d61a:	d038      	beq.n	800d68e <_svfiprintf_r+0x1d6>
 800d61c:	4b22      	ldr	r3, [pc, #136]	; (800d6a8 <_svfiprintf_r+0x1f0>)
 800d61e:	bb1b      	cbnz	r3, 800d668 <_svfiprintf_r+0x1b0>
 800d620:	9b03      	ldr	r3, [sp, #12]
 800d622:	3307      	adds	r3, #7
 800d624:	f023 0307 	bic.w	r3, r3, #7
 800d628:	3308      	adds	r3, #8
 800d62a:	9303      	str	r3, [sp, #12]
 800d62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62e:	4433      	add	r3, r6
 800d630:	9309      	str	r3, [sp, #36]	; 0x24
 800d632:	e768      	b.n	800d506 <_svfiprintf_r+0x4e>
 800d634:	fb0c 3202 	mla	r2, ip, r2, r3
 800d638:	460c      	mov	r4, r1
 800d63a:	2001      	movs	r0, #1
 800d63c:	e7a6      	b.n	800d58c <_svfiprintf_r+0xd4>
 800d63e:	2300      	movs	r3, #0
 800d640:	3401      	adds	r4, #1
 800d642:	9305      	str	r3, [sp, #20]
 800d644:	4619      	mov	r1, r3
 800d646:	f04f 0c0a 	mov.w	ip, #10
 800d64a:	4620      	mov	r0, r4
 800d64c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d650:	3a30      	subs	r2, #48	; 0x30
 800d652:	2a09      	cmp	r2, #9
 800d654:	d903      	bls.n	800d65e <_svfiprintf_r+0x1a6>
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0c6      	beq.n	800d5e8 <_svfiprintf_r+0x130>
 800d65a:	9105      	str	r1, [sp, #20]
 800d65c:	e7c4      	b.n	800d5e8 <_svfiprintf_r+0x130>
 800d65e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d662:	4604      	mov	r4, r0
 800d664:	2301      	movs	r3, #1
 800d666:	e7f0      	b.n	800d64a <_svfiprintf_r+0x192>
 800d668:	ab03      	add	r3, sp, #12
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	462a      	mov	r2, r5
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <_svfiprintf_r+0x1f4>)
 800d670:	a904      	add	r1, sp, #16
 800d672:	4638      	mov	r0, r7
 800d674:	f7fc fd3c 	bl	800a0f0 <_printf_float>
 800d678:	1c42      	adds	r2, r0, #1
 800d67a:	4606      	mov	r6, r0
 800d67c:	d1d6      	bne.n	800d62c <_svfiprintf_r+0x174>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	065b      	lsls	r3, r3, #25
 800d682:	f53f af2d 	bmi.w	800d4e0 <_svfiprintf_r+0x28>
 800d686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d688:	b01d      	add	sp, #116	; 0x74
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	ab03      	add	r3, sp, #12
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	462a      	mov	r2, r5
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <_svfiprintf_r+0x1f4>)
 800d696:	a904      	add	r1, sp, #16
 800d698:	4638      	mov	r0, r7
 800d69a:	f7fd f87d 	bl	800a798 <_printf_i>
 800d69e:	e7eb      	b.n	800d678 <_svfiprintf_r+0x1c0>
 800d6a0:	0801016c 	.word	0x0801016c
 800d6a4:	08010176 	.word	0x08010176
 800d6a8:	0800a0f1 	.word	0x0800a0f1
 800d6ac:	0800d403 	.word	0x0800d403
 800d6b0:	08010172 	.word	0x08010172

0800d6b4 <__ascii_mbtowc>:
 800d6b4:	b082      	sub	sp, #8
 800d6b6:	b901      	cbnz	r1, 800d6ba <__ascii_mbtowc+0x6>
 800d6b8:	a901      	add	r1, sp, #4
 800d6ba:	b142      	cbz	r2, 800d6ce <__ascii_mbtowc+0x1a>
 800d6bc:	b14b      	cbz	r3, 800d6d2 <__ascii_mbtowc+0x1e>
 800d6be:	7813      	ldrb	r3, [r2, #0]
 800d6c0:	600b      	str	r3, [r1, #0]
 800d6c2:	7812      	ldrb	r2, [r2, #0]
 800d6c4:	1e10      	subs	r0, r2, #0
 800d6c6:	bf18      	it	ne
 800d6c8:	2001      	movne	r0, #1
 800d6ca:	b002      	add	sp, #8
 800d6cc:	4770      	bx	lr
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	e7fb      	b.n	800d6ca <__ascii_mbtowc+0x16>
 800d6d2:	f06f 0001 	mvn.w	r0, #1
 800d6d6:	e7f8      	b.n	800d6ca <__ascii_mbtowc+0x16>

0800d6d8 <__sflush_r>:
 800d6d8:	898a      	ldrh	r2, [r1, #12]
 800d6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6de:	4605      	mov	r5, r0
 800d6e0:	0710      	lsls	r0, r2, #28
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	d458      	bmi.n	800d798 <__sflush_r+0xc0>
 800d6e6:	684b      	ldr	r3, [r1, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	dc05      	bgt.n	800d6f8 <__sflush_r+0x20>
 800d6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	dc02      	bgt.n	800d6f8 <__sflush_r+0x20>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6fa:	2e00      	cmp	r6, #0
 800d6fc:	d0f9      	beq.n	800d6f2 <__sflush_r+0x1a>
 800d6fe:	2300      	movs	r3, #0
 800d700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d704:	682f      	ldr	r7, [r5, #0]
 800d706:	6a21      	ldr	r1, [r4, #32]
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	d032      	beq.n	800d772 <__sflush_r+0x9a>
 800d70c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	075a      	lsls	r2, r3, #29
 800d712:	d505      	bpl.n	800d720 <__sflush_r+0x48>
 800d714:	6863      	ldr	r3, [r4, #4]
 800d716:	1ac0      	subs	r0, r0, r3
 800d718:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d71a:	b10b      	cbz	r3, 800d720 <__sflush_r+0x48>
 800d71c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d71e:	1ac0      	subs	r0, r0, r3
 800d720:	2300      	movs	r3, #0
 800d722:	4602      	mov	r2, r0
 800d724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d726:	6a21      	ldr	r1, [r4, #32]
 800d728:	4628      	mov	r0, r5
 800d72a:	47b0      	blx	r6
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	89a3      	ldrh	r3, [r4, #12]
 800d730:	d106      	bne.n	800d740 <__sflush_r+0x68>
 800d732:	6829      	ldr	r1, [r5, #0]
 800d734:	291d      	cmp	r1, #29
 800d736:	d82b      	bhi.n	800d790 <__sflush_r+0xb8>
 800d738:	4a29      	ldr	r2, [pc, #164]	; (800d7e0 <__sflush_r+0x108>)
 800d73a:	410a      	asrs	r2, r1
 800d73c:	07d6      	lsls	r6, r2, #31
 800d73e:	d427      	bmi.n	800d790 <__sflush_r+0xb8>
 800d740:	2200      	movs	r2, #0
 800d742:	6062      	str	r2, [r4, #4]
 800d744:	04d9      	lsls	r1, r3, #19
 800d746:	6922      	ldr	r2, [r4, #16]
 800d748:	6022      	str	r2, [r4, #0]
 800d74a:	d504      	bpl.n	800d756 <__sflush_r+0x7e>
 800d74c:	1c42      	adds	r2, r0, #1
 800d74e:	d101      	bne.n	800d754 <__sflush_r+0x7c>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	b903      	cbnz	r3, 800d756 <__sflush_r+0x7e>
 800d754:	6560      	str	r0, [r4, #84]	; 0x54
 800d756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d758:	602f      	str	r7, [r5, #0]
 800d75a:	2900      	cmp	r1, #0
 800d75c:	d0c9      	beq.n	800d6f2 <__sflush_r+0x1a>
 800d75e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d762:	4299      	cmp	r1, r3
 800d764:	d002      	beq.n	800d76c <__sflush_r+0x94>
 800d766:	4628      	mov	r0, r5
 800d768:	f7ff faa8 	bl	800ccbc <_free_r>
 800d76c:	2000      	movs	r0, #0
 800d76e:	6360      	str	r0, [r4, #52]	; 0x34
 800d770:	e7c0      	b.n	800d6f4 <__sflush_r+0x1c>
 800d772:	2301      	movs	r3, #1
 800d774:	4628      	mov	r0, r5
 800d776:	47b0      	blx	r6
 800d778:	1c41      	adds	r1, r0, #1
 800d77a:	d1c8      	bne.n	800d70e <__sflush_r+0x36>
 800d77c:	682b      	ldr	r3, [r5, #0]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0c5      	beq.n	800d70e <__sflush_r+0x36>
 800d782:	2b1d      	cmp	r3, #29
 800d784:	d001      	beq.n	800d78a <__sflush_r+0xb2>
 800d786:	2b16      	cmp	r3, #22
 800d788:	d101      	bne.n	800d78e <__sflush_r+0xb6>
 800d78a:	602f      	str	r7, [r5, #0]
 800d78c:	e7b1      	b.n	800d6f2 <__sflush_r+0x1a>
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d794:	81a3      	strh	r3, [r4, #12]
 800d796:	e7ad      	b.n	800d6f4 <__sflush_r+0x1c>
 800d798:	690f      	ldr	r7, [r1, #16]
 800d79a:	2f00      	cmp	r7, #0
 800d79c:	d0a9      	beq.n	800d6f2 <__sflush_r+0x1a>
 800d79e:	0793      	lsls	r3, r2, #30
 800d7a0:	680e      	ldr	r6, [r1, #0]
 800d7a2:	bf08      	it	eq
 800d7a4:	694b      	ldreq	r3, [r1, #20]
 800d7a6:	600f      	str	r7, [r1, #0]
 800d7a8:	bf18      	it	ne
 800d7aa:	2300      	movne	r3, #0
 800d7ac:	eba6 0807 	sub.w	r8, r6, r7
 800d7b0:	608b      	str	r3, [r1, #8]
 800d7b2:	f1b8 0f00 	cmp.w	r8, #0
 800d7b6:	dd9c      	ble.n	800d6f2 <__sflush_r+0x1a>
 800d7b8:	6a21      	ldr	r1, [r4, #32]
 800d7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7bc:	4643      	mov	r3, r8
 800d7be:	463a      	mov	r2, r7
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	47b0      	blx	r6
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	dc06      	bgt.n	800d7d6 <__sflush_r+0xfe>
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ce:	81a3      	strh	r3, [r4, #12]
 800d7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7d4:	e78e      	b.n	800d6f4 <__sflush_r+0x1c>
 800d7d6:	4407      	add	r7, r0
 800d7d8:	eba8 0800 	sub.w	r8, r8, r0
 800d7dc:	e7e9      	b.n	800d7b2 <__sflush_r+0xda>
 800d7de:	bf00      	nop
 800d7e0:	dfbffffe 	.word	0xdfbffffe

0800d7e4 <_fflush_r>:
 800d7e4:	b538      	push	{r3, r4, r5, lr}
 800d7e6:	690b      	ldr	r3, [r1, #16]
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	b913      	cbnz	r3, 800d7f4 <_fflush_r+0x10>
 800d7ee:	2500      	movs	r5, #0
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	bd38      	pop	{r3, r4, r5, pc}
 800d7f4:	b118      	cbz	r0, 800d7fe <_fflush_r+0x1a>
 800d7f6:	6a03      	ldr	r3, [r0, #32]
 800d7f8:	b90b      	cbnz	r3, 800d7fe <_fflush_r+0x1a>
 800d7fa:	f7fd fbb7 	bl	800af6c <__sinit>
 800d7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d0f3      	beq.n	800d7ee <_fflush_r+0xa>
 800d806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d808:	07d0      	lsls	r0, r2, #31
 800d80a:	d404      	bmi.n	800d816 <_fflush_r+0x32>
 800d80c:	0599      	lsls	r1, r3, #22
 800d80e:	d402      	bmi.n	800d816 <_fflush_r+0x32>
 800d810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d812:	f7fe fb9a 	bl	800bf4a <__retarget_lock_acquire_recursive>
 800d816:	4628      	mov	r0, r5
 800d818:	4621      	mov	r1, r4
 800d81a:	f7ff ff5d 	bl	800d6d8 <__sflush_r>
 800d81e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d820:	07da      	lsls	r2, r3, #31
 800d822:	4605      	mov	r5, r0
 800d824:	d4e4      	bmi.n	800d7f0 <_fflush_r+0xc>
 800d826:	89a3      	ldrh	r3, [r4, #12]
 800d828:	059b      	lsls	r3, r3, #22
 800d82a:	d4e1      	bmi.n	800d7f0 <_fflush_r+0xc>
 800d82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d82e:	f7fe fb8d 	bl	800bf4c <__retarget_lock_release_recursive>
 800d832:	e7dd      	b.n	800d7f0 <_fflush_r+0xc>

0800d834 <_Balloc>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	69c6      	ldr	r6, [r0, #28]
 800d838:	4604      	mov	r4, r0
 800d83a:	460d      	mov	r5, r1
 800d83c:	b976      	cbnz	r6, 800d85c <_Balloc+0x28>
 800d83e:	2010      	movs	r0, #16
 800d840:	f7fc fe8c 	bl	800a55c <malloc>
 800d844:	4602      	mov	r2, r0
 800d846:	61e0      	str	r0, [r4, #28]
 800d848:	b920      	cbnz	r0, 800d854 <_Balloc+0x20>
 800d84a:	4b18      	ldr	r3, [pc, #96]	; (800d8ac <_Balloc+0x78>)
 800d84c:	4818      	ldr	r0, [pc, #96]	; (800d8b0 <_Balloc+0x7c>)
 800d84e:	216b      	movs	r1, #107	; 0x6b
 800d850:	f7fe fb9c 	bl	800bf8c <__assert_func>
 800d854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d858:	6006      	str	r6, [r0, #0]
 800d85a:	60c6      	str	r6, [r0, #12]
 800d85c:	69e6      	ldr	r6, [r4, #28]
 800d85e:	68f3      	ldr	r3, [r6, #12]
 800d860:	b183      	cbz	r3, 800d884 <_Balloc+0x50>
 800d862:	69e3      	ldr	r3, [r4, #28]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d86a:	b9b8      	cbnz	r0, 800d89c <_Balloc+0x68>
 800d86c:	2101      	movs	r1, #1
 800d86e:	fa01 f605 	lsl.w	r6, r1, r5
 800d872:	1d72      	adds	r2, r6, #5
 800d874:	0092      	lsls	r2, r2, #2
 800d876:	4620      	mov	r0, r4
 800d878:	f000 fd81 	bl	800e37e <_calloc_r>
 800d87c:	b160      	cbz	r0, 800d898 <_Balloc+0x64>
 800d87e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d882:	e00e      	b.n	800d8a2 <_Balloc+0x6e>
 800d884:	2221      	movs	r2, #33	; 0x21
 800d886:	2104      	movs	r1, #4
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 fd78 	bl	800e37e <_calloc_r>
 800d88e:	69e3      	ldr	r3, [r4, #28]
 800d890:	60f0      	str	r0, [r6, #12]
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d1e4      	bne.n	800d862 <_Balloc+0x2e>
 800d898:	2000      	movs	r0, #0
 800d89a:	bd70      	pop	{r4, r5, r6, pc}
 800d89c:	6802      	ldr	r2, [r0, #0]
 800d89e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8a8:	e7f7      	b.n	800d89a <_Balloc+0x66>
 800d8aa:	bf00      	nop
 800d8ac:	0800fee0 	.word	0x0800fee0
 800d8b0:	0801017d 	.word	0x0801017d

0800d8b4 <_Bfree>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	69c6      	ldr	r6, [r0, #28]
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	460c      	mov	r4, r1
 800d8bc:	b976      	cbnz	r6, 800d8dc <_Bfree+0x28>
 800d8be:	2010      	movs	r0, #16
 800d8c0:	f7fc fe4c 	bl	800a55c <malloc>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	61e8      	str	r0, [r5, #28]
 800d8c8:	b920      	cbnz	r0, 800d8d4 <_Bfree+0x20>
 800d8ca:	4b09      	ldr	r3, [pc, #36]	; (800d8f0 <_Bfree+0x3c>)
 800d8cc:	4809      	ldr	r0, [pc, #36]	; (800d8f4 <_Bfree+0x40>)
 800d8ce:	218f      	movs	r1, #143	; 0x8f
 800d8d0:	f7fe fb5c 	bl	800bf8c <__assert_func>
 800d8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8d8:	6006      	str	r6, [r0, #0]
 800d8da:	60c6      	str	r6, [r0, #12]
 800d8dc:	b13c      	cbz	r4, 800d8ee <_Bfree+0x3a>
 800d8de:	69eb      	ldr	r3, [r5, #28]
 800d8e0:	6862      	ldr	r2, [r4, #4]
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8e8:	6021      	str	r1, [r4, #0]
 800d8ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8ee:	bd70      	pop	{r4, r5, r6, pc}
 800d8f0:	0800fee0 	.word	0x0800fee0
 800d8f4:	0801017d 	.word	0x0801017d

0800d8f8 <__multadd>:
 800d8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fc:	690d      	ldr	r5, [r1, #16]
 800d8fe:	4607      	mov	r7, r0
 800d900:	460c      	mov	r4, r1
 800d902:	461e      	mov	r6, r3
 800d904:	f101 0c14 	add.w	ip, r1, #20
 800d908:	2000      	movs	r0, #0
 800d90a:	f8dc 3000 	ldr.w	r3, [ip]
 800d90e:	b299      	uxth	r1, r3
 800d910:	fb02 6101 	mla	r1, r2, r1, r6
 800d914:	0c1e      	lsrs	r6, r3, #16
 800d916:	0c0b      	lsrs	r3, r1, #16
 800d918:	fb02 3306 	mla	r3, r2, r6, r3
 800d91c:	b289      	uxth	r1, r1
 800d91e:	3001      	adds	r0, #1
 800d920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d924:	4285      	cmp	r5, r0
 800d926:	f84c 1b04 	str.w	r1, [ip], #4
 800d92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d92e:	dcec      	bgt.n	800d90a <__multadd+0x12>
 800d930:	b30e      	cbz	r6, 800d976 <__multadd+0x7e>
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	42ab      	cmp	r3, r5
 800d936:	dc19      	bgt.n	800d96c <__multadd+0x74>
 800d938:	6861      	ldr	r1, [r4, #4]
 800d93a:	4638      	mov	r0, r7
 800d93c:	3101      	adds	r1, #1
 800d93e:	f7ff ff79 	bl	800d834 <_Balloc>
 800d942:	4680      	mov	r8, r0
 800d944:	b928      	cbnz	r0, 800d952 <__multadd+0x5a>
 800d946:	4602      	mov	r2, r0
 800d948:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <__multadd+0x84>)
 800d94a:	480d      	ldr	r0, [pc, #52]	; (800d980 <__multadd+0x88>)
 800d94c:	21ba      	movs	r1, #186	; 0xba
 800d94e:	f7fe fb1d 	bl	800bf8c <__assert_func>
 800d952:	6922      	ldr	r2, [r4, #16]
 800d954:	3202      	adds	r2, #2
 800d956:	f104 010c 	add.w	r1, r4, #12
 800d95a:	0092      	lsls	r2, r2, #2
 800d95c:	300c      	adds	r0, #12
 800d95e:	f7fe faf6 	bl	800bf4e <memcpy>
 800d962:	4621      	mov	r1, r4
 800d964:	4638      	mov	r0, r7
 800d966:	f7ff ffa5 	bl	800d8b4 <_Bfree>
 800d96a:	4644      	mov	r4, r8
 800d96c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d970:	3501      	adds	r5, #1
 800d972:	615e      	str	r6, [r3, #20]
 800d974:	6125      	str	r5, [r4, #16]
 800d976:	4620      	mov	r0, r4
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97c:	080100fb 	.word	0x080100fb
 800d980:	0801017d 	.word	0x0801017d

0800d984 <__s2b>:
 800d984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d988:	460c      	mov	r4, r1
 800d98a:	4615      	mov	r5, r2
 800d98c:	461f      	mov	r7, r3
 800d98e:	2209      	movs	r2, #9
 800d990:	3308      	adds	r3, #8
 800d992:	4606      	mov	r6, r0
 800d994:	fb93 f3f2 	sdiv	r3, r3, r2
 800d998:	2100      	movs	r1, #0
 800d99a:	2201      	movs	r2, #1
 800d99c:	429a      	cmp	r2, r3
 800d99e:	db09      	blt.n	800d9b4 <__s2b+0x30>
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7ff ff47 	bl	800d834 <_Balloc>
 800d9a6:	b940      	cbnz	r0, 800d9ba <__s2b+0x36>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	4b19      	ldr	r3, [pc, #100]	; (800da10 <__s2b+0x8c>)
 800d9ac:	4819      	ldr	r0, [pc, #100]	; (800da14 <__s2b+0x90>)
 800d9ae:	21d3      	movs	r1, #211	; 0xd3
 800d9b0:	f7fe faec 	bl	800bf8c <__assert_func>
 800d9b4:	0052      	lsls	r2, r2, #1
 800d9b6:	3101      	adds	r1, #1
 800d9b8:	e7f0      	b.n	800d99c <__s2b+0x18>
 800d9ba:	9b08      	ldr	r3, [sp, #32]
 800d9bc:	6143      	str	r3, [r0, #20]
 800d9be:	2d09      	cmp	r5, #9
 800d9c0:	f04f 0301 	mov.w	r3, #1
 800d9c4:	6103      	str	r3, [r0, #16]
 800d9c6:	dd16      	ble.n	800d9f6 <__s2b+0x72>
 800d9c8:	f104 0909 	add.w	r9, r4, #9
 800d9cc:	46c8      	mov	r8, r9
 800d9ce:	442c      	add	r4, r5
 800d9d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	3b30      	subs	r3, #48	; 0x30
 800d9d8:	220a      	movs	r2, #10
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ff8c 	bl	800d8f8 <__multadd>
 800d9e0:	45a0      	cmp	r8, r4
 800d9e2:	d1f5      	bne.n	800d9d0 <__s2b+0x4c>
 800d9e4:	f1a5 0408 	sub.w	r4, r5, #8
 800d9e8:	444c      	add	r4, r9
 800d9ea:	1b2d      	subs	r5, r5, r4
 800d9ec:	1963      	adds	r3, r4, r5
 800d9ee:	42bb      	cmp	r3, r7
 800d9f0:	db04      	blt.n	800d9fc <__s2b+0x78>
 800d9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9f6:	340a      	adds	r4, #10
 800d9f8:	2509      	movs	r5, #9
 800d9fa:	e7f6      	b.n	800d9ea <__s2b+0x66>
 800d9fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da00:	4601      	mov	r1, r0
 800da02:	3b30      	subs	r3, #48	; 0x30
 800da04:	220a      	movs	r2, #10
 800da06:	4630      	mov	r0, r6
 800da08:	f7ff ff76 	bl	800d8f8 <__multadd>
 800da0c:	e7ee      	b.n	800d9ec <__s2b+0x68>
 800da0e:	bf00      	nop
 800da10:	080100fb 	.word	0x080100fb
 800da14:	0801017d 	.word	0x0801017d

0800da18 <__hi0bits>:
 800da18:	0c03      	lsrs	r3, r0, #16
 800da1a:	041b      	lsls	r3, r3, #16
 800da1c:	b9d3      	cbnz	r3, 800da54 <__hi0bits+0x3c>
 800da1e:	0400      	lsls	r0, r0, #16
 800da20:	2310      	movs	r3, #16
 800da22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800da26:	bf04      	itt	eq
 800da28:	0200      	lsleq	r0, r0, #8
 800da2a:	3308      	addeq	r3, #8
 800da2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800da30:	bf04      	itt	eq
 800da32:	0100      	lsleq	r0, r0, #4
 800da34:	3304      	addeq	r3, #4
 800da36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800da3a:	bf04      	itt	eq
 800da3c:	0080      	lsleq	r0, r0, #2
 800da3e:	3302      	addeq	r3, #2
 800da40:	2800      	cmp	r0, #0
 800da42:	db05      	blt.n	800da50 <__hi0bits+0x38>
 800da44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800da48:	f103 0301 	add.w	r3, r3, #1
 800da4c:	bf08      	it	eq
 800da4e:	2320      	moveq	r3, #32
 800da50:	4618      	mov	r0, r3
 800da52:	4770      	bx	lr
 800da54:	2300      	movs	r3, #0
 800da56:	e7e4      	b.n	800da22 <__hi0bits+0xa>

0800da58 <__lo0bits>:
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	f013 0207 	ands.w	r2, r3, #7
 800da5e:	d00c      	beq.n	800da7a <__lo0bits+0x22>
 800da60:	07d9      	lsls	r1, r3, #31
 800da62:	d422      	bmi.n	800daaa <__lo0bits+0x52>
 800da64:	079a      	lsls	r2, r3, #30
 800da66:	bf49      	itett	mi
 800da68:	085b      	lsrmi	r3, r3, #1
 800da6a:	089b      	lsrpl	r3, r3, #2
 800da6c:	6003      	strmi	r3, [r0, #0]
 800da6e:	2201      	movmi	r2, #1
 800da70:	bf5c      	itt	pl
 800da72:	6003      	strpl	r3, [r0, #0]
 800da74:	2202      	movpl	r2, #2
 800da76:	4610      	mov	r0, r2
 800da78:	4770      	bx	lr
 800da7a:	b299      	uxth	r1, r3
 800da7c:	b909      	cbnz	r1, 800da82 <__lo0bits+0x2a>
 800da7e:	0c1b      	lsrs	r3, r3, #16
 800da80:	2210      	movs	r2, #16
 800da82:	b2d9      	uxtb	r1, r3
 800da84:	b909      	cbnz	r1, 800da8a <__lo0bits+0x32>
 800da86:	3208      	adds	r2, #8
 800da88:	0a1b      	lsrs	r3, r3, #8
 800da8a:	0719      	lsls	r1, r3, #28
 800da8c:	bf04      	itt	eq
 800da8e:	091b      	lsreq	r3, r3, #4
 800da90:	3204      	addeq	r2, #4
 800da92:	0799      	lsls	r1, r3, #30
 800da94:	bf04      	itt	eq
 800da96:	089b      	lsreq	r3, r3, #2
 800da98:	3202      	addeq	r2, #2
 800da9a:	07d9      	lsls	r1, r3, #31
 800da9c:	d403      	bmi.n	800daa6 <__lo0bits+0x4e>
 800da9e:	085b      	lsrs	r3, r3, #1
 800daa0:	f102 0201 	add.w	r2, r2, #1
 800daa4:	d003      	beq.n	800daae <__lo0bits+0x56>
 800daa6:	6003      	str	r3, [r0, #0]
 800daa8:	e7e5      	b.n	800da76 <__lo0bits+0x1e>
 800daaa:	2200      	movs	r2, #0
 800daac:	e7e3      	b.n	800da76 <__lo0bits+0x1e>
 800daae:	2220      	movs	r2, #32
 800dab0:	e7e1      	b.n	800da76 <__lo0bits+0x1e>
	...

0800dab4 <__i2b>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	460c      	mov	r4, r1
 800dab8:	2101      	movs	r1, #1
 800daba:	f7ff febb 	bl	800d834 <_Balloc>
 800dabe:	4602      	mov	r2, r0
 800dac0:	b928      	cbnz	r0, 800dace <__i2b+0x1a>
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <__i2b+0x24>)
 800dac4:	4805      	ldr	r0, [pc, #20]	; (800dadc <__i2b+0x28>)
 800dac6:	f240 1145 	movw	r1, #325	; 0x145
 800daca:	f7fe fa5f 	bl	800bf8c <__assert_func>
 800dace:	2301      	movs	r3, #1
 800dad0:	6144      	str	r4, [r0, #20]
 800dad2:	6103      	str	r3, [r0, #16]
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	bf00      	nop
 800dad8:	080100fb 	.word	0x080100fb
 800dadc:	0801017d 	.word	0x0801017d

0800dae0 <__multiply>:
 800dae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae4:	4691      	mov	r9, r2
 800dae6:	690a      	ldr	r2, [r1, #16]
 800dae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800daec:	429a      	cmp	r2, r3
 800daee:	bfb8      	it	lt
 800daf0:	460b      	movlt	r3, r1
 800daf2:	460c      	mov	r4, r1
 800daf4:	bfbc      	itt	lt
 800daf6:	464c      	movlt	r4, r9
 800daf8:	4699      	movlt	r9, r3
 800dafa:	6927      	ldr	r7, [r4, #16]
 800dafc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800db00:	68a3      	ldr	r3, [r4, #8]
 800db02:	6861      	ldr	r1, [r4, #4]
 800db04:	eb07 060a 	add.w	r6, r7, sl
 800db08:	42b3      	cmp	r3, r6
 800db0a:	b085      	sub	sp, #20
 800db0c:	bfb8      	it	lt
 800db0e:	3101      	addlt	r1, #1
 800db10:	f7ff fe90 	bl	800d834 <_Balloc>
 800db14:	b930      	cbnz	r0, 800db24 <__multiply+0x44>
 800db16:	4602      	mov	r2, r0
 800db18:	4b44      	ldr	r3, [pc, #272]	; (800dc2c <__multiply+0x14c>)
 800db1a:	4845      	ldr	r0, [pc, #276]	; (800dc30 <__multiply+0x150>)
 800db1c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800db20:	f7fe fa34 	bl	800bf8c <__assert_func>
 800db24:	f100 0514 	add.w	r5, r0, #20
 800db28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db2c:	462b      	mov	r3, r5
 800db2e:	2200      	movs	r2, #0
 800db30:	4543      	cmp	r3, r8
 800db32:	d321      	bcc.n	800db78 <__multiply+0x98>
 800db34:	f104 0314 	add.w	r3, r4, #20
 800db38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800db3c:	f109 0314 	add.w	r3, r9, #20
 800db40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800db44:	9202      	str	r2, [sp, #8]
 800db46:	1b3a      	subs	r2, r7, r4
 800db48:	3a15      	subs	r2, #21
 800db4a:	f022 0203 	bic.w	r2, r2, #3
 800db4e:	3204      	adds	r2, #4
 800db50:	f104 0115 	add.w	r1, r4, #21
 800db54:	428f      	cmp	r7, r1
 800db56:	bf38      	it	cc
 800db58:	2204      	movcc	r2, #4
 800db5a:	9201      	str	r2, [sp, #4]
 800db5c:	9a02      	ldr	r2, [sp, #8]
 800db5e:	9303      	str	r3, [sp, #12]
 800db60:	429a      	cmp	r2, r3
 800db62:	d80c      	bhi.n	800db7e <__multiply+0x9e>
 800db64:	2e00      	cmp	r6, #0
 800db66:	dd03      	ble.n	800db70 <__multiply+0x90>
 800db68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d05b      	beq.n	800dc28 <__multiply+0x148>
 800db70:	6106      	str	r6, [r0, #16]
 800db72:	b005      	add	sp, #20
 800db74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db78:	f843 2b04 	str.w	r2, [r3], #4
 800db7c:	e7d8      	b.n	800db30 <__multiply+0x50>
 800db7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800db82:	f1ba 0f00 	cmp.w	sl, #0
 800db86:	d024      	beq.n	800dbd2 <__multiply+0xf2>
 800db88:	f104 0e14 	add.w	lr, r4, #20
 800db8c:	46a9      	mov	r9, r5
 800db8e:	f04f 0c00 	mov.w	ip, #0
 800db92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db96:	f8d9 1000 	ldr.w	r1, [r9]
 800db9a:	fa1f fb82 	uxth.w	fp, r2
 800db9e:	b289      	uxth	r1, r1
 800dba0:	fb0a 110b 	mla	r1, sl, fp, r1
 800dba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dba8:	f8d9 2000 	ldr.w	r2, [r9]
 800dbac:	4461      	add	r1, ip
 800dbae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800dbb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dbba:	b289      	uxth	r1, r1
 800dbbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dbc0:	4577      	cmp	r7, lr
 800dbc2:	f849 1b04 	str.w	r1, [r9], #4
 800dbc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dbca:	d8e2      	bhi.n	800db92 <__multiply+0xb2>
 800dbcc:	9a01      	ldr	r2, [sp, #4]
 800dbce:	f845 c002 	str.w	ip, [r5, r2]
 800dbd2:	9a03      	ldr	r2, [sp, #12]
 800dbd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	f1b9 0f00 	cmp.w	r9, #0
 800dbde:	d021      	beq.n	800dc24 <__multiply+0x144>
 800dbe0:	6829      	ldr	r1, [r5, #0]
 800dbe2:	f104 0c14 	add.w	ip, r4, #20
 800dbe6:	46ae      	mov	lr, r5
 800dbe8:	f04f 0a00 	mov.w	sl, #0
 800dbec:	f8bc b000 	ldrh.w	fp, [ip]
 800dbf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dbf4:	fb09 220b 	mla	r2, r9, fp, r2
 800dbf8:	4452      	add	r2, sl
 800dbfa:	b289      	uxth	r1, r1
 800dbfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dc00:	f84e 1b04 	str.w	r1, [lr], #4
 800dc04:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dc08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc0c:	f8be 1000 	ldrh.w	r1, [lr]
 800dc10:	fb09 110a 	mla	r1, r9, sl, r1
 800dc14:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dc18:	4567      	cmp	r7, ip
 800dc1a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dc1e:	d8e5      	bhi.n	800dbec <__multiply+0x10c>
 800dc20:	9a01      	ldr	r2, [sp, #4]
 800dc22:	50a9      	str	r1, [r5, r2]
 800dc24:	3504      	adds	r5, #4
 800dc26:	e799      	b.n	800db5c <__multiply+0x7c>
 800dc28:	3e01      	subs	r6, #1
 800dc2a:	e79b      	b.n	800db64 <__multiply+0x84>
 800dc2c:	080100fb 	.word	0x080100fb
 800dc30:	0801017d 	.word	0x0801017d

0800dc34 <__pow5mult>:
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	4615      	mov	r5, r2
 800dc3a:	f012 0203 	ands.w	r2, r2, #3
 800dc3e:	4606      	mov	r6, r0
 800dc40:	460f      	mov	r7, r1
 800dc42:	d007      	beq.n	800dc54 <__pow5mult+0x20>
 800dc44:	4c25      	ldr	r4, [pc, #148]	; (800dcdc <__pow5mult+0xa8>)
 800dc46:	3a01      	subs	r2, #1
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc4e:	f7ff fe53 	bl	800d8f8 <__multadd>
 800dc52:	4607      	mov	r7, r0
 800dc54:	10ad      	asrs	r5, r5, #2
 800dc56:	d03d      	beq.n	800dcd4 <__pow5mult+0xa0>
 800dc58:	69f4      	ldr	r4, [r6, #28]
 800dc5a:	b97c      	cbnz	r4, 800dc7c <__pow5mult+0x48>
 800dc5c:	2010      	movs	r0, #16
 800dc5e:	f7fc fc7d 	bl	800a55c <malloc>
 800dc62:	4602      	mov	r2, r0
 800dc64:	61f0      	str	r0, [r6, #28]
 800dc66:	b928      	cbnz	r0, 800dc74 <__pow5mult+0x40>
 800dc68:	4b1d      	ldr	r3, [pc, #116]	; (800dce0 <__pow5mult+0xac>)
 800dc6a:	481e      	ldr	r0, [pc, #120]	; (800dce4 <__pow5mult+0xb0>)
 800dc6c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dc70:	f7fe f98c 	bl	800bf8c <__assert_func>
 800dc74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc78:	6004      	str	r4, [r0, #0]
 800dc7a:	60c4      	str	r4, [r0, #12]
 800dc7c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dc80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc84:	b94c      	cbnz	r4, 800dc9a <__pow5mult+0x66>
 800dc86:	f240 2171 	movw	r1, #625	; 0x271
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f7ff ff12 	bl	800dab4 <__i2b>
 800dc90:	2300      	movs	r3, #0
 800dc92:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc96:	4604      	mov	r4, r0
 800dc98:	6003      	str	r3, [r0, #0]
 800dc9a:	f04f 0900 	mov.w	r9, #0
 800dc9e:	07eb      	lsls	r3, r5, #31
 800dca0:	d50a      	bpl.n	800dcb8 <__pow5mult+0x84>
 800dca2:	4639      	mov	r1, r7
 800dca4:	4622      	mov	r2, r4
 800dca6:	4630      	mov	r0, r6
 800dca8:	f7ff ff1a 	bl	800dae0 <__multiply>
 800dcac:	4639      	mov	r1, r7
 800dcae:	4680      	mov	r8, r0
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f7ff fdff 	bl	800d8b4 <_Bfree>
 800dcb6:	4647      	mov	r7, r8
 800dcb8:	106d      	asrs	r5, r5, #1
 800dcba:	d00b      	beq.n	800dcd4 <__pow5mult+0xa0>
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	b938      	cbnz	r0, 800dcd0 <__pow5mult+0x9c>
 800dcc0:	4622      	mov	r2, r4
 800dcc2:	4621      	mov	r1, r4
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	f7ff ff0b 	bl	800dae0 <__multiply>
 800dcca:	6020      	str	r0, [r4, #0]
 800dccc:	f8c0 9000 	str.w	r9, [r0]
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	e7e4      	b.n	800dc9e <__pow5mult+0x6a>
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcda:	bf00      	nop
 800dcdc:	080102c8 	.word	0x080102c8
 800dce0:	0800fee0 	.word	0x0800fee0
 800dce4:	0801017d 	.word	0x0801017d

0800dce8 <__lshift>:
 800dce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcec:	460c      	mov	r4, r1
 800dcee:	6849      	ldr	r1, [r1, #4]
 800dcf0:	6923      	ldr	r3, [r4, #16]
 800dcf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcf6:	68a3      	ldr	r3, [r4, #8]
 800dcf8:	4607      	mov	r7, r0
 800dcfa:	4691      	mov	r9, r2
 800dcfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd00:	f108 0601 	add.w	r6, r8, #1
 800dd04:	42b3      	cmp	r3, r6
 800dd06:	db0b      	blt.n	800dd20 <__lshift+0x38>
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7ff fd93 	bl	800d834 <_Balloc>
 800dd0e:	4605      	mov	r5, r0
 800dd10:	b948      	cbnz	r0, 800dd26 <__lshift+0x3e>
 800dd12:	4602      	mov	r2, r0
 800dd14:	4b28      	ldr	r3, [pc, #160]	; (800ddb8 <__lshift+0xd0>)
 800dd16:	4829      	ldr	r0, [pc, #164]	; (800ddbc <__lshift+0xd4>)
 800dd18:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dd1c:	f7fe f936 	bl	800bf8c <__assert_func>
 800dd20:	3101      	adds	r1, #1
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	e7ee      	b.n	800dd04 <__lshift+0x1c>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f100 0114 	add.w	r1, r0, #20
 800dd2c:	f100 0210 	add.w	r2, r0, #16
 800dd30:	4618      	mov	r0, r3
 800dd32:	4553      	cmp	r3, sl
 800dd34:	db33      	blt.n	800dd9e <__lshift+0xb6>
 800dd36:	6920      	ldr	r0, [r4, #16]
 800dd38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd3c:	f104 0314 	add.w	r3, r4, #20
 800dd40:	f019 091f 	ands.w	r9, r9, #31
 800dd44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd4c:	d02b      	beq.n	800dda6 <__lshift+0xbe>
 800dd4e:	f1c9 0e20 	rsb	lr, r9, #32
 800dd52:	468a      	mov	sl, r1
 800dd54:	2200      	movs	r2, #0
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	fa00 f009 	lsl.w	r0, r0, r9
 800dd5c:	4310      	orrs	r0, r2
 800dd5e:	f84a 0b04 	str.w	r0, [sl], #4
 800dd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd66:	459c      	cmp	ip, r3
 800dd68:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd6c:	d8f3      	bhi.n	800dd56 <__lshift+0x6e>
 800dd6e:	ebac 0304 	sub.w	r3, ip, r4
 800dd72:	3b15      	subs	r3, #21
 800dd74:	f023 0303 	bic.w	r3, r3, #3
 800dd78:	3304      	adds	r3, #4
 800dd7a:	f104 0015 	add.w	r0, r4, #21
 800dd7e:	4584      	cmp	ip, r0
 800dd80:	bf38      	it	cc
 800dd82:	2304      	movcc	r3, #4
 800dd84:	50ca      	str	r2, [r1, r3]
 800dd86:	b10a      	cbz	r2, 800dd8c <__lshift+0xa4>
 800dd88:	f108 0602 	add.w	r6, r8, #2
 800dd8c:	3e01      	subs	r6, #1
 800dd8e:	4638      	mov	r0, r7
 800dd90:	612e      	str	r6, [r5, #16]
 800dd92:	4621      	mov	r1, r4
 800dd94:	f7ff fd8e 	bl	800d8b4 <_Bfree>
 800dd98:	4628      	mov	r0, r5
 800dd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dda2:	3301      	adds	r3, #1
 800dda4:	e7c5      	b.n	800dd32 <__lshift+0x4a>
 800dda6:	3904      	subs	r1, #4
 800dda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddac:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddb0:	459c      	cmp	ip, r3
 800ddb2:	d8f9      	bhi.n	800dda8 <__lshift+0xc0>
 800ddb4:	e7ea      	b.n	800dd8c <__lshift+0xa4>
 800ddb6:	bf00      	nop
 800ddb8:	080100fb 	.word	0x080100fb
 800ddbc:	0801017d 	.word	0x0801017d

0800ddc0 <__mcmp>:
 800ddc0:	b530      	push	{r4, r5, lr}
 800ddc2:	6902      	ldr	r2, [r0, #16]
 800ddc4:	690c      	ldr	r4, [r1, #16]
 800ddc6:	1b12      	subs	r2, r2, r4
 800ddc8:	d10e      	bne.n	800dde8 <__mcmp+0x28>
 800ddca:	f100 0314 	add.w	r3, r0, #20
 800ddce:	3114      	adds	r1, #20
 800ddd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ddd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ddd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dddc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dde0:	42a5      	cmp	r5, r4
 800dde2:	d003      	beq.n	800ddec <__mcmp+0x2c>
 800dde4:	d305      	bcc.n	800ddf2 <__mcmp+0x32>
 800dde6:	2201      	movs	r2, #1
 800dde8:	4610      	mov	r0, r2
 800ddea:	bd30      	pop	{r4, r5, pc}
 800ddec:	4283      	cmp	r3, r0
 800ddee:	d3f3      	bcc.n	800ddd8 <__mcmp+0x18>
 800ddf0:	e7fa      	b.n	800dde8 <__mcmp+0x28>
 800ddf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddf6:	e7f7      	b.n	800dde8 <__mcmp+0x28>

0800ddf8 <__mdiff>:
 800ddf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	460c      	mov	r4, r1
 800ddfe:	4606      	mov	r6, r0
 800de00:	4611      	mov	r1, r2
 800de02:	4620      	mov	r0, r4
 800de04:	4690      	mov	r8, r2
 800de06:	f7ff ffdb 	bl	800ddc0 <__mcmp>
 800de0a:	1e05      	subs	r5, r0, #0
 800de0c:	d110      	bne.n	800de30 <__mdiff+0x38>
 800de0e:	4629      	mov	r1, r5
 800de10:	4630      	mov	r0, r6
 800de12:	f7ff fd0f 	bl	800d834 <_Balloc>
 800de16:	b930      	cbnz	r0, 800de26 <__mdiff+0x2e>
 800de18:	4b3a      	ldr	r3, [pc, #232]	; (800df04 <__mdiff+0x10c>)
 800de1a:	4602      	mov	r2, r0
 800de1c:	f240 2137 	movw	r1, #567	; 0x237
 800de20:	4839      	ldr	r0, [pc, #228]	; (800df08 <__mdiff+0x110>)
 800de22:	f7fe f8b3 	bl	800bf8c <__assert_func>
 800de26:	2301      	movs	r3, #1
 800de28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de30:	bfa4      	itt	ge
 800de32:	4643      	movge	r3, r8
 800de34:	46a0      	movge	r8, r4
 800de36:	4630      	mov	r0, r6
 800de38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de3c:	bfa6      	itte	ge
 800de3e:	461c      	movge	r4, r3
 800de40:	2500      	movge	r5, #0
 800de42:	2501      	movlt	r5, #1
 800de44:	f7ff fcf6 	bl	800d834 <_Balloc>
 800de48:	b920      	cbnz	r0, 800de54 <__mdiff+0x5c>
 800de4a:	4b2e      	ldr	r3, [pc, #184]	; (800df04 <__mdiff+0x10c>)
 800de4c:	4602      	mov	r2, r0
 800de4e:	f240 2145 	movw	r1, #581	; 0x245
 800de52:	e7e5      	b.n	800de20 <__mdiff+0x28>
 800de54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de58:	6926      	ldr	r6, [r4, #16]
 800de5a:	60c5      	str	r5, [r0, #12]
 800de5c:	f104 0914 	add.w	r9, r4, #20
 800de60:	f108 0514 	add.w	r5, r8, #20
 800de64:	f100 0e14 	add.w	lr, r0, #20
 800de68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de70:	f108 0210 	add.w	r2, r8, #16
 800de74:	46f2      	mov	sl, lr
 800de76:	2100      	movs	r1, #0
 800de78:	f859 3b04 	ldr.w	r3, [r9], #4
 800de7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de80:	fa11 f88b 	uxtah	r8, r1, fp
 800de84:	b299      	uxth	r1, r3
 800de86:	0c1b      	lsrs	r3, r3, #16
 800de88:	eba8 0801 	sub.w	r8, r8, r1
 800de8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de90:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de94:	fa1f f888 	uxth.w	r8, r8
 800de98:	1419      	asrs	r1, r3, #16
 800de9a:	454e      	cmp	r6, r9
 800de9c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dea0:	f84a 3b04 	str.w	r3, [sl], #4
 800dea4:	d8e8      	bhi.n	800de78 <__mdiff+0x80>
 800dea6:	1b33      	subs	r3, r6, r4
 800dea8:	3b15      	subs	r3, #21
 800deaa:	f023 0303 	bic.w	r3, r3, #3
 800deae:	3304      	adds	r3, #4
 800deb0:	3415      	adds	r4, #21
 800deb2:	42a6      	cmp	r6, r4
 800deb4:	bf38      	it	cc
 800deb6:	2304      	movcc	r3, #4
 800deb8:	441d      	add	r5, r3
 800deba:	4473      	add	r3, lr
 800debc:	469e      	mov	lr, r3
 800debe:	462e      	mov	r6, r5
 800dec0:	4566      	cmp	r6, ip
 800dec2:	d30e      	bcc.n	800dee2 <__mdiff+0xea>
 800dec4:	f10c 0203 	add.w	r2, ip, #3
 800dec8:	1b52      	subs	r2, r2, r5
 800deca:	f022 0203 	bic.w	r2, r2, #3
 800dece:	3d03      	subs	r5, #3
 800ded0:	45ac      	cmp	ip, r5
 800ded2:	bf38      	it	cc
 800ded4:	2200      	movcc	r2, #0
 800ded6:	4413      	add	r3, r2
 800ded8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dedc:	b17a      	cbz	r2, 800defe <__mdiff+0x106>
 800dede:	6107      	str	r7, [r0, #16]
 800dee0:	e7a4      	b.n	800de2c <__mdiff+0x34>
 800dee2:	f856 8b04 	ldr.w	r8, [r6], #4
 800dee6:	fa11 f288 	uxtah	r2, r1, r8
 800deea:	1414      	asrs	r4, r2, #16
 800deec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800def0:	b292      	uxth	r2, r2
 800def2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800def6:	f84e 2b04 	str.w	r2, [lr], #4
 800defa:	1421      	asrs	r1, r4, #16
 800defc:	e7e0      	b.n	800dec0 <__mdiff+0xc8>
 800defe:	3f01      	subs	r7, #1
 800df00:	e7ea      	b.n	800ded8 <__mdiff+0xe0>
 800df02:	bf00      	nop
 800df04:	080100fb 	.word	0x080100fb
 800df08:	0801017d 	.word	0x0801017d

0800df0c <__ulp>:
 800df0c:	b082      	sub	sp, #8
 800df0e:	ed8d 0b00 	vstr	d0, [sp]
 800df12:	9a01      	ldr	r2, [sp, #4]
 800df14:	4b0f      	ldr	r3, [pc, #60]	; (800df54 <__ulp+0x48>)
 800df16:	4013      	ands	r3, r2
 800df18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	dc08      	bgt.n	800df32 <__ulp+0x26>
 800df20:	425b      	negs	r3, r3
 800df22:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800df26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df2a:	da04      	bge.n	800df36 <__ulp+0x2a>
 800df2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800df30:	4113      	asrs	r3, r2
 800df32:	2200      	movs	r2, #0
 800df34:	e008      	b.n	800df48 <__ulp+0x3c>
 800df36:	f1a2 0314 	sub.w	r3, r2, #20
 800df3a:	2b1e      	cmp	r3, #30
 800df3c:	bfda      	itte	le
 800df3e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800df42:	40da      	lsrle	r2, r3
 800df44:	2201      	movgt	r2, #1
 800df46:	2300      	movs	r3, #0
 800df48:	4619      	mov	r1, r3
 800df4a:	4610      	mov	r0, r2
 800df4c:	ec41 0b10 	vmov	d0, r0, r1
 800df50:	b002      	add	sp, #8
 800df52:	4770      	bx	lr
 800df54:	7ff00000 	.word	0x7ff00000

0800df58 <__b2d>:
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	6906      	ldr	r6, [r0, #16]
 800df5e:	f100 0814 	add.w	r8, r0, #20
 800df62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800df66:	1f37      	subs	r7, r6, #4
 800df68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7ff fd53 	bl	800da18 <__hi0bits>
 800df72:	f1c0 0320 	rsb	r3, r0, #32
 800df76:	280a      	cmp	r0, #10
 800df78:	600b      	str	r3, [r1, #0]
 800df7a:	491b      	ldr	r1, [pc, #108]	; (800dfe8 <__b2d+0x90>)
 800df7c:	dc15      	bgt.n	800dfaa <__b2d+0x52>
 800df7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800df82:	fa22 f30c 	lsr.w	r3, r2, ip
 800df86:	45b8      	cmp	r8, r7
 800df88:	ea43 0501 	orr.w	r5, r3, r1
 800df8c:	bf34      	ite	cc
 800df8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df92:	2300      	movcs	r3, #0
 800df94:	3015      	adds	r0, #21
 800df96:	fa02 f000 	lsl.w	r0, r2, r0
 800df9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800df9e:	4303      	orrs	r3, r0
 800dfa0:	461c      	mov	r4, r3
 800dfa2:	ec45 4b10 	vmov	d0, r4, r5
 800dfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfaa:	45b8      	cmp	r8, r7
 800dfac:	bf3a      	itte	cc
 800dfae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dfb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800dfb6:	2300      	movcs	r3, #0
 800dfb8:	380b      	subs	r0, #11
 800dfba:	d012      	beq.n	800dfe2 <__b2d+0x8a>
 800dfbc:	f1c0 0120 	rsb	r1, r0, #32
 800dfc0:	fa23 f401 	lsr.w	r4, r3, r1
 800dfc4:	4082      	lsls	r2, r0
 800dfc6:	4322      	orrs	r2, r4
 800dfc8:	4547      	cmp	r7, r8
 800dfca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dfce:	bf8c      	ite	hi
 800dfd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dfd4:	2200      	movls	r2, #0
 800dfd6:	4083      	lsls	r3, r0
 800dfd8:	40ca      	lsrs	r2, r1
 800dfda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	e7de      	b.n	800dfa0 <__b2d+0x48>
 800dfe2:	ea42 0501 	orr.w	r5, r2, r1
 800dfe6:	e7db      	b.n	800dfa0 <__b2d+0x48>
 800dfe8:	3ff00000 	.word	0x3ff00000

0800dfec <__d2b>:
 800dfec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dff0:	460f      	mov	r7, r1
 800dff2:	2101      	movs	r1, #1
 800dff4:	ec59 8b10 	vmov	r8, r9, d0
 800dff8:	4616      	mov	r6, r2
 800dffa:	f7ff fc1b 	bl	800d834 <_Balloc>
 800dffe:	4604      	mov	r4, r0
 800e000:	b930      	cbnz	r0, 800e010 <__d2b+0x24>
 800e002:	4602      	mov	r2, r0
 800e004:	4b24      	ldr	r3, [pc, #144]	; (800e098 <__d2b+0xac>)
 800e006:	4825      	ldr	r0, [pc, #148]	; (800e09c <__d2b+0xb0>)
 800e008:	f240 310f 	movw	r1, #783	; 0x30f
 800e00c:	f7fd ffbe 	bl	800bf8c <__assert_func>
 800e010:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e018:	bb2d      	cbnz	r5, 800e066 <__d2b+0x7a>
 800e01a:	9301      	str	r3, [sp, #4]
 800e01c:	f1b8 0300 	subs.w	r3, r8, #0
 800e020:	d026      	beq.n	800e070 <__d2b+0x84>
 800e022:	4668      	mov	r0, sp
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	f7ff fd17 	bl	800da58 <__lo0bits>
 800e02a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e02e:	b1e8      	cbz	r0, 800e06c <__d2b+0x80>
 800e030:	f1c0 0320 	rsb	r3, r0, #32
 800e034:	fa02 f303 	lsl.w	r3, r2, r3
 800e038:	430b      	orrs	r3, r1
 800e03a:	40c2      	lsrs	r2, r0
 800e03c:	6163      	str	r3, [r4, #20]
 800e03e:	9201      	str	r2, [sp, #4]
 800e040:	9b01      	ldr	r3, [sp, #4]
 800e042:	61a3      	str	r3, [r4, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	bf14      	ite	ne
 800e048:	2202      	movne	r2, #2
 800e04a:	2201      	moveq	r2, #1
 800e04c:	6122      	str	r2, [r4, #16]
 800e04e:	b1bd      	cbz	r5, 800e080 <__d2b+0x94>
 800e050:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e054:	4405      	add	r5, r0
 800e056:	603d      	str	r5, [r7, #0]
 800e058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e05c:	6030      	str	r0, [r6, #0]
 800e05e:	4620      	mov	r0, r4
 800e060:	b003      	add	sp, #12
 800e062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e06a:	e7d6      	b.n	800e01a <__d2b+0x2e>
 800e06c:	6161      	str	r1, [r4, #20]
 800e06e:	e7e7      	b.n	800e040 <__d2b+0x54>
 800e070:	a801      	add	r0, sp, #4
 800e072:	f7ff fcf1 	bl	800da58 <__lo0bits>
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	6163      	str	r3, [r4, #20]
 800e07a:	3020      	adds	r0, #32
 800e07c:	2201      	movs	r2, #1
 800e07e:	e7e5      	b.n	800e04c <__d2b+0x60>
 800e080:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e084:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e088:	6038      	str	r0, [r7, #0]
 800e08a:	6918      	ldr	r0, [r3, #16]
 800e08c:	f7ff fcc4 	bl	800da18 <__hi0bits>
 800e090:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e094:	e7e2      	b.n	800e05c <__d2b+0x70>
 800e096:	bf00      	nop
 800e098:	080100fb 	.word	0x080100fb
 800e09c:	0801017d 	.word	0x0801017d

0800e0a0 <__ratio>:
 800e0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	4688      	mov	r8, r1
 800e0a6:	4669      	mov	r1, sp
 800e0a8:	4681      	mov	r9, r0
 800e0aa:	f7ff ff55 	bl	800df58 <__b2d>
 800e0ae:	a901      	add	r1, sp, #4
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	ec55 4b10 	vmov	r4, r5, d0
 800e0b6:	f7ff ff4f 	bl	800df58 <__b2d>
 800e0ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e0c2:	eba3 0c02 	sub.w	ip, r3, r2
 800e0c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e0ca:	1a9b      	subs	r3, r3, r2
 800e0cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e0d0:	ec51 0b10 	vmov	r0, r1, d0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bfd6      	itet	le
 800e0d8:	460a      	movle	r2, r1
 800e0da:	462a      	movgt	r2, r5
 800e0dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0e0:	468b      	mov	fp, r1
 800e0e2:	462f      	mov	r7, r5
 800e0e4:	bfd4      	ite	le
 800e0e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e0ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	ee10 2a10 	vmov	r2, s0
 800e0f4:	465b      	mov	r3, fp
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 fba8 	bl	800084c <__aeabi_ddiv>
 800e0fc:	ec41 0b10 	vmov	d0, r0, r1
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e106 <__copybits>:
 800e106:	3901      	subs	r1, #1
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	1149      	asrs	r1, r1, #5
 800e10c:	6914      	ldr	r4, [r2, #16]
 800e10e:	3101      	adds	r1, #1
 800e110:	f102 0314 	add.w	r3, r2, #20
 800e114:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e118:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e11c:	1f05      	subs	r5, r0, #4
 800e11e:	42a3      	cmp	r3, r4
 800e120:	d30c      	bcc.n	800e13c <__copybits+0x36>
 800e122:	1aa3      	subs	r3, r4, r2
 800e124:	3b11      	subs	r3, #17
 800e126:	f023 0303 	bic.w	r3, r3, #3
 800e12a:	3211      	adds	r2, #17
 800e12c:	42a2      	cmp	r2, r4
 800e12e:	bf88      	it	hi
 800e130:	2300      	movhi	r3, #0
 800e132:	4418      	add	r0, r3
 800e134:	2300      	movs	r3, #0
 800e136:	4288      	cmp	r0, r1
 800e138:	d305      	bcc.n	800e146 <__copybits+0x40>
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
 800e13c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e140:	f845 6f04 	str.w	r6, [r5, #4]!
 800e144:	e7eb      	b.n	800e11e <__copybits+0x18>
 800e146:	f840 3b04 	str.w	r3, [r0], #4
 800e14a:	e7f4      	b.n	800e136 <__copybits+0x30>

0800e14c <__any_on>:
 800e14c:	f100 0214 	add.w	r2, r0, #20
 800e150:	6900      	ldr	r0, [r0, #16]
 800e152:	114b      	asrs	r3, r1, #5
 800e154:	4298      	cmp	r0, r3
 800e156:	b510      	push	{r4, lr}
 800e158:	db11      	blt.n	800e17e <__any_on+0x32>
 800e15a:	dd0a      	ble.n	800e172 <__any_on+0x26>
 800e15c:	f011 011f 	ands.w	r1, r1, #31
 800e160:	d007      	beq.n	800e172 <__any_on+0x26>
 800e162:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e166:	fa24 f001 	lsr.w	r0, r4, r1
 800e16a:	fa00 f101 	lsl.w	r1, r0, r1
 800e16e:	428c      	cmp	r4, r1
 800e170:	d10b      	bne.n	800e18a <__any_on+0x3e>
 800e172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e176:	4293      	cmp	r3, r2
 800e178:	d803      	bhi.n	800e182 <__any_on+0x36>
 800e17a:	2000      	movs	r0, #0
 800e17c:	bd10      	pop	{r4, pc}
 800e17e:	4603      	mov	r3, r0
 800e180:	e7f7      	b.n	800e172 <__any_on+0x26>
 800e182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e186:	2900      	cmp	r1, #0
 800e188:	d0f5      	beq.n	800e176 <__any_on+0x2a>
 800e18a:	2001      	movs	r0, #1
 800e18c:	e7f6      	b.n	800e17c <__any_on+0x30>

0800e18e <__sread>:
 800e18e:	b510      	push	{r4, lr}
 800e190:	460c      	mov	r4, r1
 800e192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e196:	f000 f8c7 	bl	800e328 <_read_r>
 800e19a:	2800      	cmp	r0, #0
 800e19c:	bfab      	itete	ge
 800e19e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e1a0:	89a3      	ldrhlt	r3, [r4, #12]
 800e1a2:	181b      	addge	r3, r3, r0
 800e1a4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e1a8:	bfac      	ite	ge
 800e1aa:	6563      	strge	r3, [r4, #84]	; 0x54
 800e1ac:	81a3      	strhlt	r3, [r4, #12]
 800e1ae:	bd10      	pop	{r4, pc}

0800e1b0 <__swrite>:
 800e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b4:	461f      	mov	r7, r3
 800e1b6:	898b      	ldrh	r3, [r1, #12]
 800e1b8:	05db      	lsls	r3, r3, #23
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	460c      	mov	r4, r1
 800e1be:	4616      	mov	r6, r2
 800e1c0:	d505      	bpl.n	800e1ce <__swrite+0x1e>
 800e1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f000 f89b 	bl	800e304 <_lseek_r>
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1d8:	81a3      	strh	r3, [r4, #12]
 800e1da:	4632      	mov	r2, r6
 800e1dc:	463b      	mov	r3, r7
 800e1de:	4628      	mov	r0, r5
 800e1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	f000 b8b2 	b.w	800e34c <_write_r>

0800e1e8 <__sseek>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f0:	f000 f888 	bl	800e304 <_lseek_r>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	bf15      	itete	ne
 800e1fa:	6560      	strne	r0, [r4, #84]	; 0x54
 800e1fc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e200:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e204:	81a3      	strheq	r3, [r4, #12]
 800e206:	bf18      	it	ne
 800e208:	81a3      	strhne	r3, [r4, #12]
 800e20a:	bd10      	pop	{r4, pc}

0800e20c <__sclose>:
 800e20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e210:	f000 b868 	b.w	800e2e4 <_close_r>

0800e214 <fiprintf>:
 800e214:	b40e      	push	{r1, r2, r3}
 800e216:	b503      	push	{r0, r1, lr}
 800e218:	4601      	mov	r1, r0
 800e21a:	ab03      	add	r3, sp, #12
 800e21c:	4805      	ldr	r0, [pc, #20]	; (800e234 <fiprintf+0x20>)
 800e21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e222:	6800      	ldr	r0, [r0, #0]
 800e224:	9301      	str	r3, [sp, #4]
 800e226:	f000 f8e9 	bl	800e3fc <_vfiprintf_r>
 800e22a:	b002      	add	sp, #8
 800e22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e230:	b003      	add	sp, #12
 800e232:	4770      	bx	lr
 800e234:	200005d8 	.word	0x200005d8

0800e238 <_realloc_r>:
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	4680      	mov	r8, r0
 800e23e:	4614      	mov	r4, r2
 800e240:	460e      	mov	r6, r1
 800e242:	b921      	cbnz	r1, 800e24e <_realloc_r+0x16>
 800e244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	4611      	mov	r1, r2
 800e24a:	f7fc b9b7 	b.w	800a5bc <_malloc_r>
 800e24e:	b92a      	cbnz	r2, 800e25c <_realloc_r+0x24>
 800e250:	f7fe fd34 	bl	800ccbc <_free_r>
 800e254:	4625      	mov	r5, r4
 800e256:	4628      	mov	r0, r5
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	f000 f9e8 	bl	800e630 <_malloc_usable_size_r>
 800e260:	4284      	cmp	r4, r0
 800e262:	4607      	mov	r7, r0
 800e264:	d802      	bhi.n	800e26c <_realloc_r+0x34>
 800e266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e26a:	d812      	bhi.n	800e292 <_realloc_r+0x5a>
 800e26c:	4621      	mov	r1, r4
 800e26e:	4640      	mov	r0, r8
 800e270:	f7fc f9a4 	bl	800a5bc <_malloc_r>
 800e274:	4605      	mov	r5, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d0ed      	beq.n	800e256 <_realloc_r+0x1e>
 800e27a:	42bc      	cmp	r4, r7
 800e27c:	4622      	mov	r2, r4
 800e27e:	4631      	mov	r1, r6
 800e280:	bf28      	it	cs
 800e282:	463a      	movcs	r2, r7
 800e284:	f7fd fe63 	bl	800bf4e <memcpy>
 800e288:	4631      	mov	r1, r6
 800e28a:	4640      	mov	r0, r8
 800e28c:	f7fe fd16 	bl	800ccbc <_free_r>
 800e290:	e7e1      	b.n	800e256 <_realloc_r+0x1e>
 800e292:	4635      	mov	r5, r6
 800e294:	e7df      	b.n	800e256 <_realloc_r+0x1e>

0800e296 <__ascii_wctomb>:
 800e296:	b149      	cbz	r1, 800e2ac <__ascii_wctomb+0x16>
 800e298:	2aff      	cmp	r2, #255	; 0xff
 800e29a:	bf85      	ittet	hi
 800e29c:	238a      	movhi	r3, #138	; 0x8a
 800e29e:	6003      	strhi	r3, [r0, #0]
 800e2a0:	700a      	strbls	r2, [r1, #0]
 800e2a2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e2a6:	bf98      	it	ls
 800e2a8:	2001      	movls	r0, #1
 800e2aa:	4770      	bx	lr
 800e2ac:	4608      	mov	r0, r1
 800e2ae:	4770      	bx	lr

0800e2b0 <memmove>:
 800e2b0:	4288      	cmp	r0, r1
 800e2b2:	b510      	push	{r4, lr}
 800e2b4:	eb01 0402 	add.w	r4, r1, r2
 800e2b8:	d902      	bls.n	800e2c0 <memmove+0x10>
 800e2ba:	4284      	cmp	r4, r0
 800e2bc:	4623      	mov	r3, r4
 800e2be:	d807      	bhi.n	800e2d0 <memmove+0x20>
 800e2c0:	1e43      	subs	r3, r0, #1
 800e2c2:	42a1      	cmp	r1, r4
 800e2c4:	d008      	beq.n	800e2d8 <memmove+0x28>
 800e2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2ce:	e7f8      	b.n	800e2c2 <memmove+0x12>
 800e2d0:	4402      	add	r2, r0
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	428a      	cmp	r2, r1
 800e2d6:	d100      	bne.n	800e2da <memmove+0x2a>
 800e2d8:	bd10      	pop	{r4, pc}
 800e2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2e2:	e7f7      	b.n	800e2d4 <memmove+0x24>

0800e2e4 <_close_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	4d06      	ldr	r5, [pc, #24]	; (800e300 <_close_r+0x1c>)
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	4608      	mov	r0, r1
 800e2ee:	602b      	str	r3, [r5, #0]
 800e2f0:	f7f4 fb99 	bl	8002a26 <_close>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	d102      	bne.n	800e2fe <_close_r+0x1a>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	b103      	cbz	r3, 800e2fe <_close_r+0x1a>
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	bd38      	pop	{r3, r4, r5, pc}
 800e300:	2000483c 	.word	0x2000483c

0800e304 <_lseek_r>:
 800e304:	b538      	push	{r3, r4, r5, lr}
 800e306:	4d07      	ldr	r5, [pc, #28]	; (800e324 <_lseek_r+0x20>)
 800e308:	4604      	mov	r4, r0
 800e30a:	4608      	mov	r0, r1
 800e30c:	4611      	mov	r1, r2
 800e30e:	2200      	movs	r2, #0
 800e310:	602a      	str	r2, [r5, #0]
 800e312:	461a      	mov	r2, r3
 800e314:	f7f4 fbae 	bl	8002a74 <_lseek>
 800e318:	1c43      	adds	r3, r0, #1
 800e31a:	d102      	bne.n	800e322 <_lseek_r+0x1e>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b103      	cbz	r3, 800e322 <_lseek_r+0x1e>
 800e320:	6023      	str	r3, [r4, #0]
 800e322:	bd38      	pop	{r3, r4, r5, pc}
 800e324:	2000483c 	.word	0x2000483c

0800e328 <_read_r>:
 800e328:	b538      	push	{r3, r4, r5, lr}
 800e32a:	4d07      	ldr	r5, [pc, #28]	; (800e348 <_read_r+0x20>)
 800e32c:	4604      	mov	r4, r0
 800e32e:	4608      	mov	r0, r1
 800e330:	4611      	mov	r1, r2
 800e332:	2200      	movs	r2, #0
 800e334:	602a      	str	r2, [r5, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f7f4 fb3c 	bl	80029b4 <_read>
 800e33c:	1c43      	adds	r3, r0, #1
 800e33e:	d102      	bne.n	800e346 <_read_r+0x1e>
 800e340:	682b      	ldr	r3, [r5, #0]
 800e342:	b103      	cbz	r3, 800e346 <_read_r+0x1e>
 800e344:	6023      	str	r3, [r4, #0]
 800e346:	bd38      	pop	{r3, r4, r5, pc}
 800e348:	2000483c 	.word	0x2000483c

0800e34c <_write_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d07      	ldr	r5, [pc, #28]	; (800e36c <_write_r+0x20>)
 800e350:	4604      	mov	r4, r0
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	2200      	movs	r2, #0
 800e358:	602a      	str	r2, [r5, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	f7f4 fb47 	bl	80029ee <_write>
 800e360:	1c43      	adds	r3, r0, #1
 800e362:	d102      	bne.n	800e36a <_write_r+0x1e>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	b103      	cbz	r3, 800e36a <_write_r+0x1e>
 800e368:	6023      	str	r3, [r4, #0]
 800e36a:	bd38      	pop	{r3, r4, r5, pc}
 800e36c:	2000483c 	.word	0x2000483c

0800e370 <abort>:
 800e370:	b508      	push	{r3, lr}
 800e372:	2006      	movs	r0, #6
 800e374:	f000 faa6 	bl	800e8c4 <raise>
 800e378:	2001      	movs	r0, #1
 800e37a:	f7f4 fb11 	bl	80029a0 <_exit>

0800e37e <_calloc_r>:
 800e37e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e380:	fba1 2402 	umull	r2, r4, r1, r2
 800e384:	b94c      	cbnz	r4, 800e39a <_calloc_r+0x1c>
 800e386:	4611      	mov	r1, r2
 800e388:	9201      	str	r2, [sp, #4]
 800e38a:	f7fc f917 	bl	800a5bc <_malloc_r>
 800e38e:	9a01      	ldr	r2, [sp, #4]
 800e390:	4605      	mov	r5, r0
 800e392:	b930      	cbnz	r0, 800e3a2 <_calloc_r+0x24>
 800e394:	4628      	mov	r0, r5
 800e396:	b003      	add	sp, #12
 800e398:	bd30      	pop	{r4, r5, pc}
 800e39a:	220c      	movs	r2, #12
 800e39c:	6002      	str	r2, [r0, #0]
 800e39e:	2500      	movs	r5, #0
 800e3a0:	e7f8      	b.n	800e394 <_calloc_r+0x16>
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	f7fd fd34 	bl	800be10 <memset>
 800e3a8:	e7f4      	b.n	800e394 <_calloc_r+0x16>

0800e3aa <__sfputc_r>:
 800e3aa:	6893      	ldr	r3, [r2, #8]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	b410      	push	{r4}
 800e3b2:	6093      	str	r3, [r2, #8]
 800e3b4:	da08      	bge.n	800e3c8 <__sfputc_r+0x1e>
 800e3b6:	6994      	ldr	r4, [r2, #24]
 800e3b8:	42a3      	cmp	r3, r4
 800e3ba:	db01      	blt.n	800e3c0 <__sfputc_r+0x16>
 800e3bc:	290a      	cmp	r1, #10
 800e3be:	d103      	bne.n	800e3c8 <__sfputc_r+0x1e>
 800e3c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3c4:	f000 b93c 	b.w	800e640 <__swbuf_r>
 800e3c8:	6813      	ldr	r3, [r2, #0]
 800e3ca:	1c58      	adds	r0, r3, #1
 800e3cc:	6010      	str	r0, [r2, #0]
 800e3ce:	7019      	strb	r1, [r3, #0]
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <__sfputs_r>:
 800e3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460f      	mov	r7, r1
 800e3de:	4614      	mov	r4, r2
 800e3e0:	18d5      	adds	r5, r2, r3
 800e3e2:	42ac      	cmp	r4, r5
 800e3e4:	d101      	bne.n	800e3ea <__sfputs_r+0x12>
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	e007      	b.n	800e3fa <__sfputs_r+0x22>
 800e3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ee:	463a      	mov	r2, r7
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ffda 	bl	800e3aa <__sfputc_r>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	d1f3      	bne.n	800e3e2 <__sfputs_r+0xa>
 800e3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3fc <_vfiprintf_r>:
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	460d      	mov	r5, r1
 800e402:	b09d      	sub	sp, #116	; 0x74
 800e404:	4614      	mov	r4, r2
 800e406:	4698      	mov	r8, r3
 800e408:	4606      	mov	r6, r0
 800e40a:	b118      	cbz	r0, 800e414 <_vfiprintf_r+0x18>
 800e40c:	6a03      	ldr	r3, [r0, #32]
 800e40e:	b90b      	cbnz	r3, 800e414 <_vfiprintf_r+0x18>
 800e410:	f7fc fdac 	bl	800af6c <__sinit>
 800e414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e416:	07d9      	lsls	r1, r3, #31
 800e418:	d405      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e41a:	89ab      	ldrh	r3, [r5, #12]
 800e41c:	059a      	lsls	r2, r3, #22
 800e41e:	d402      	bmi.n	800e426 <_vfiprintf_r+0x2a>
 800e420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e422:	f7fd fd92 	bl	800bf4a <__retarget_lock_acquire_recursive>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	071b      	lsls	r3, r3, #28
 800e42a:	d501      	bpl.n	800e430 <_vfiprintf_r+0x34>
 800e42c:	692b      	ldr	r3, [r5, #16]
 800e42e:	b99b      	cbnz	r3, 800e458 <_vfiprintf_r+0x5c>
 800e430:	4629      	mov	r1, r5
 800e432:	4630      	mov	r0, r6
 800e434:	f000 f942 	bl	800e6bc <__swsetup_r>
 800e438:	b170      	cbz	r0, 800e458 <_vfiprintf_r+0x5c>
 800e43a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e43c:	07dc      	lsls	r4, r3, #31
 800e43e:	d504      	bpl.n	800e44a <_vfiprintf_r+0x4e>
 800e440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e444:	b01d      	add	sp, #116	; 0x74
 800e446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	0598      	lsls	r0, r3, #22
 800e44e:	d4f7      	bmi.n	800e440 <_vfiprintf_r+0x44>
 800e450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e452:	f7fd fd7b 	bl	800bf4c <__retarget_lock_release_recursive>
 800e456:	e7f3      	b.n	800e440 <_vfiprintf_r+0x44>
 800e458:	2300      	movs	r3, #0
 800e45a:	9309      	str	r3, [sp, #36]	; 0x24
 800e45c:	2320      	movs	r3, #32
 800e45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e462:	f8cd 800c 	str.w	r8, [sp, #12]
 800e466:	2330      	movs	r3, #48	; 0x30
 800e468:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e61c <_vfiprintf_r+0x220>
 800e46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e470:	f04f 0901 	mov.w	r9, #1
 800e474:	4623      	mov	r3, r4
 800e476:	469a      	mov	sl, r3
 800e478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e47c:	b10a      	cbz	r2, 800e482 <_vfiprintf_r+0x86>
 800e47e:	2a25      	cmp	r2, #37	; 0x25
 800e480:	d1f9      	bne.n	800e476 <_vfiprintf_r+0x7a>
 800e482:	ebba 0b04 	subs.w	fp, sl, r4
 800e486:	d00b      	beq.n	800e4a0 <_vfiprintf_r+0xa4>
 800e488:	465b      	mov	r3, fp
 800e48a:	4622      	mov	r2, r4
 800e48c:	4629      	mov	r1, r5
 800e48e:	4630      	mov	r0, r6
 800e490:	f7ff ffa2 	bl	800e3d8 <__sfputs_r>
 800e494:	3001      	adds	r0, #1
 800e496:	f000 80a9 	beq.w	800e5ec <_vfiprintf_r+0x1f0>
 800e49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e49c:	445a      	add	r2, fp
 800e49e:	9209      	str	r2, [sp, #36]	; 0x24
 800e4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 80a1 	beq.w	800e5ec <_vfiprintf_r+0x1f0>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4b4:	f10a 0a01 	add.w	sl, sl, #1
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	9307      	str	r3, [sp, #28]
 800e4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800e4c2:	4654      	mov	r4, sl
 800e4c4:	2205      	movs	r2, #5
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4854      	ldr	r0, [pc, #336]	; (800e61c <_vfiprintf_r+0x220>)
 800e4cc:	f7f1 fe80 	bl	80001d0 <memchr>
 800e4d0:	9a04      	ldr	r2, [sp, #16]
 800e4d2:	b9d8      	cbnz	r0, 800e50c <_vfiprintf_r+0x110>
 800e4d4:	06d1      	lsls	r1, r2, #27
 800e4d6:	bf44      	itt	mi
 800e4d8:	2320      	movmi	r3, #32
 800e4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4de:	0713      	lsls	r3, r2, #28
 800e4e0:	bf44      	itt	mi
 800e4e2:	232b      	movmi	r3, #43	; 0x2b
 800e4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ee:	d015      	beq.n	800e51c <_vfiprintf_r+0x120>
 800e4f0:	9a07      	ldr	r2, [sp, #28]
 800e4f2:	4654      	mov	r4, sl
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f04f 0c0a 	mov.w	ip, #10
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e500:	3b30      	subs	r3, #48	; 0x30
 800e502:	2b09      	cmp	r3, #9
 800e504:	d94d      	bls.n	800e5a2 <_vfiprintf_r+0x1a6>
 800e506:	b1b0      	cbz	r0, 800e536 <_vfiprintf_r+0x13a>
 800e508:	9207      	str	r2, [sp, #28]
 800e50a:	e014      	b.n	800e536 <_vfiprintf_r+0x13a>
 800e50c:	eba0 0308 	sub.w	r3, r0, r8
 800e510:	fa09 f303 	lsl.w	r3, r9, r3
 800e514:	4313      	orrs	r3, r2
 800e516:	9304      	str	r3, [sp, #16]
 800e518:	46a2      	mov	sl, r4
 800e51a:	e7d2      	b.n	800e4c2 <_vfiprintf_r+0xc6>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	1d19      	adds	r1, r3, #4
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	9103      	str	r1, [sp, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	bfbb      	ittet	lt
 800e528:	425b      	neglt	r3, r3
 800e52a:	f042 0202 	orrlt.w	r2, r2, #2
 800e52e:	9307      	strge	r3, [sp, #28]
 800e530:	9307      	strlt	r3, [sp, #28]
 800e532:	bfb8      	it	lt
 800e534:	9204      	strlt	r2, [sp, #16]
 800e536:	7823      	ldrb	r3, [r4, #0]
 800e538:	2b2e      	cmp	r3, #46	; 0x2e
 800e53a:	d10c      	bne.n	800e556 <_vfiprintf_r+0x15a>
 800e53c:	7863      	ldrb	r3, [r4, #1]
 800e53e:	2b2a      	cmp	r3, #42	; 0x2a
 800e540:	d134      	bne.n	800e5ac <_vfiprintf_r+0x1b0>
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	9203      	str	r2, [sp, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	bfb8      	it	lt
 800e54e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e552:	3402      	adds	r4, #2
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e62c <_vfiprintf_r+0x230>
 800e55a:	7821      	ldrb	r1, [r4, #0]
 800e55c:	2203      	movs	r2, #3
 800e55e:	4650      	mov	r0, sl
 800e560:	f7f1 fe36 	bl	80001d0 <memchr>
 800e564:	b138      	cbz	r0, 800e576 <_vfiprintf_r+0x17a>
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	eba0 000a 	sub.w	r0, r0, sl
 800e56c:	2240      	movs	r2, #64	; 0x40
 800e56e:	4082      	lsls	r2, r0
 800e570:	4313      	orrs	r3, r2
 800e572:	3401      	adds	r4, #1
 800e574:	9304      	str	r3, [sp, #16]
 800e576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e57a:	4829      	ldr	r0, [pc, #164]	; (800e620 <_vfiprintf_r+0x224>)
 800e57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e580:	2206      	movs	r2, #6
 800e582:	f7f1 fe25 	bl	80001d0 <memchr>
 800e586:	2800      	cmp	r0, #0
 800e588:	d03f      	beq.n	800e60a <_vfiprintf_r+0x20e>
 800e58a:	4b26      	ldr	r3, [pc, #152]	; (800e624 <_vfiprintf_r+0x228>)
 800e58c:	bb1b      	cbnz	r3, 800e5d6 <_vfiprintf_r+0x1da>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	3307      	adds	r3, #7
 800e592:	f023 0307 	bic.w	r3, r3, #7
 800e596:	3308      	adds	r3, #8
 800e598:	9303      	str	r3, [sp, #12]
 800e59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e59c:	443b      	add	r3, r7
 800e59e:	9309      	str	r3, [sp, #36]	; 0x24
 800e5a0:	e768      	b.n	800e474 <_vfiprintf_r+0x78>
 800e5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	2001      	movs	r0, #1
 800e5aa:	e7a6      	b.n	800e4fa <_vfiprintf_r+0xfe>
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	3401      	adds	r4, #1
 800e5b0:	9305      	str	r3, [sp, #20]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	f04f 0c0a 	mov.w	ip, #10
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5be:	3a30      	subs	r2, #48	; 0x30
 800e5c0:	2a09      	cmp	r2, #9
 800e5c2:	d903      	bls.n	800e5cc <_vfiprintf_r+0x1d0>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d0c6      	beq.n	800e556 <_vfiprintf_r+0x15a>
 800e5c8:	9105      	str	r1, [sp, #20]
 800e5ca:	e7c4      	b.n	800e556 <_vfiprintf_r+0x15a>
 800e5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e7f0      	b.n	800e5b8 <_vfiprintf_r+0x1bc>
 800e5d6:	ab03      	add	r3, sp, #12
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	462a      	mov	r2, r5
 800e5dc:	4b12      	ldr	r3, [pc, #72]	; (800e628 <_vfiprintf_r+0x22c>)
 800e5de:	a904      	add	r1, sp, #16
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7fb fd85 	bl	800a0f0 <_printf_float>
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	1c78      	adds	r0, r7, #1
 800e5ea:	d1d6      	bne.n	800e59a <_vfiprintf_r+0x19e>
 800e5ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5ee:	07d9      	lsls	r1, r3, #31
 800e5f0:	d405      	bmi.n	800e5fe <_vfiprintf_r+0x202>
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	059a      	lsls	r2, r3, #22
 800e5f6:	d402      	bmi.n	800e5fe <_vfiprintf_r+0x202>
 800e5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5fa:	f7fd fca7 	bl	800bf4c <__retarget_lock_release_recursive>
 800e5fe:	89ab      	ldrh	r3, [r5, #12]
 800e600:	065b      	lsls	r3, r3, #25
 800e602:	f53f af1d 	bmi.w	800e440 <_vfiprintf_r+0x44>
 800e606:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e608:	e71c      	b.n	800e444 <_vfiprintf_r+0x48>
 800e60a:	ab03      	add	r3, sp, #12
 800e60c:	9300      	str	r3, [sp, #0]
 800e60e:	462a      	mov	r2, r5
 800e610:	4b05      	ldr	r3, [pc, #20]	; (800e628 <_vfiprintf_r+0x22c>)
 800e612:	a904      	add	r1, sp, #16
 800e614:	4630      	mov	r0, r6
 800e616:	f7fc f8bf 	bl	800a798 <_printf_i>
 800e61a:	e7e4      	b.n	800e5e6 <_vfiprintf_r+0x1ea>
 800e61c:	0801016c 	.word	0x0801016c
 800e620:	08010176 	.word	0x08010176
 800e624:	0800a0f1 	.word	0x0800a0f1
 800e628:	0800e3d9 	.word	0x0800e3d9
 800e62c:	08010172 	.word	0x08010172

0800e630 <_malloc_usable_size_r>:
 800e630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e634:	1f18      	subs	r0, r3, #4
 800e636:	2b00      	cmp	r3, #0
 800e638:	bfbc      	itt	lt
 800e63a:	580b      	ldrlt	r3, [r1, r0]
 800e63c:	18c0      	addlt	r0, r0, r3
 800e63e:	4770      	bx	lr

0800e640 <__swbuf_r>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	460e      	mov	r6, r1
 800e644:	4614      	mov	r4, r2
 800e646:	4605      	mov	r5, r0
 800e648:	b118      	cbz	r0, 800e652 <__swbuf_r+0x12>
 800e64a:	6a03      	ldr	r3, [r0, #32]
 800e64c:	b90b      	cbnz	r3, 800e652 <__swbuf_r+0x12>
 800e64e:	f7fc fc8d 	bl	800af6c <__sinit>
 800e652:	69a3      	ldr	r3, [r4, #24]
 800e654:	60a3      	str	r3, [r4, #8]
 800e656:	89a3      	ldrh	r3, [r4, #12]
 800e658:	071a      	lsls	r2, r3, #28
 800e65a:	d525      	bpl.n	800e6a8 <__swbuf_r+0x68>
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	b31b      	cbz	r3, 800e6a8 <__swbuf_r+0x68>
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	6922      	ldr	r2, [r4, #16]
 800e664:	1a98      	subs	r0, r3, r2
 800e666:	6963      	ldr	r3, [r4, #20]
 800e668:	b2f6      	uxtb	r6, r6
 800e66a:	4283      	cmp	r3, r0
 800e66c:	4637      	mov	r7, r6
 800e66e:	dc04      	bgt.n	800e67a <__swbuf_r+0x3a>
 800e670:	4621      	mov	r1, r4
 800e672:	4628      	mov	r0, r5
 800e674:	f7ff f8b6 	bl	800d7e4 <_fflush_r>
 800e678:	b9e0      	cbnz	r0, 800e6b4 <__swbuf_r+0x74>
 800e67a:	68a3      	ldr	r3, [r4, #8]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	60a3      	str	r3, [r4, #8]
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	701e      	strb	r6, [r3, #0]
 800e688:	6962      	ldr	r2, [r4, #20]
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d004      	beq.n	800e69a <__swbuf_r+0x5a>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	07db      	lsls	r3, r3, #31
 800e694:	d506      	bpl.n	800e6a4 <__swbuf_r+0x64>
 800e696:	2e0a      	cmp	r6, #10
 800e698:	d104      	bne.n	800e6a4 <__swbuf_r+0x64>
 800e69a:	4621      	mov	r1, r4
 800e69c:	4628      	mov	r0, r5
 800e69e:	f7ff f8a1 	bl	800d7e4 <_fflush_r>
 800e6a2:	b938      	cbnz	r0, 800e6b4 <__swbuf_r+0x74>
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a8:	4621      	mov	r1, r4
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	f000 f806 	bl	800e6bc <__swsetup_r>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0d5      	beq.n	800e660 <__swbuf_r+0x20>
 800e6b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6b8:	e7f4      	b.n	800e6a4 <__swbuf_r+0x64>
	...

0800e6bc <__swsetup_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4b2a      	ldr	r3, [pc, #168]	; (800e768 <__swsetup_r+0xac>)
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	6818      	ldr	r0, [r3, #0]
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	b118      	cbz	r0, 800e6d0 <__swsetup_r+0x14>
 800e6c8:	6a03      	ldr	r3, [r0, #32]
 800e6ca:	b90b      	cbnz	r3, 800e6d0 <__swsetup_r+0x14>
 800e6cc:	f7fc fc4e 	bl	800af6c <__sinit>
 800e6d0:	89a3      	ldrh	r3, [r4, #12]
 800e6d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6d6:	0718      	lsls	r0, r3, #28
 800e6d8:	d422      	bmi.n	800e720 <__swsetup_r+0x64>
 800e6da:	06d9      	lsls	r1, r3, #27
 800e6dc:	d407      	bmi.n	800e6ee <__swsetup_r+0x32>
 800e6de:	2309      	movs	r3, #9
 800e6e0:	602b      	str	r3, [r5, #0]
 800e6e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6e6:	81a3      	strh	r3, [r4, #12]
 800e6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6ec:	e034      	b.n	800e758 <__swsetup_r+0x9c>
 800e6ee:	0758      	lsls	r0, r3, #29
 800e6f0:	d512      	bpl.n	800e718 <__swsetup_r+0x5c>
 800e6f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6f4:	b141      	cbz	r1, 800e708 <__swsetup_r+0x4c>
 800e6f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6fa:	4299      	cmp	r1, r3
 800e6fc:	d002      	beq.n	800e704 <__swsetup_r+0x48>
 800e6fe:	4628      	mov	r0, r5
 800e700:	f7fe fadc 	bl	800ccbc <_free_r>
 800e704:	2300      	movs	r3, #0
 800e706:	6363      	str	r3, [r4, #52]	; 0x34
 800e708:	89a3      	ldrh	r3, [r4, #12]
 800e70a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	2300      	movs	r3, #0
 800e712:	6063      	str	r3, [r4, #4]
 800e714:	6923      	ldr	r3, [r4, #16]
 800e716:	6023      	str	r3, [r4, #0]
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	f043 0308 	orr.w	r3, r3, #8
 800e71e:	81a3      	strh	r3, [r4, #12]
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	b94b      	cbnz	r3, 800e738 <__swsetup_r+0x7c>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e72a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e72e:	d003      	beq.n	800e738 <__swsetup_r+0x7c>
 800e730:	4621      	mov	r1, r4
 800e732:	4628      	mov	r0, r5
 800e734:	f000 f840 	bl	800e7b8 <__smakebuf_r>
 800e738:	89a0      	ldrh	r0, [r4, #12]
 800e73a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e73e:	f010 0301 	ands.w	r3, r0, #1
 800e742:	d00a      	beq.n	800e75a <__swsetup_r+0x9e>
 800e744:	2300      	movs	r3, #0
 800e746:	60a3      	str	r3, [r4, #8]
 800e748:	6963      	ldr	r3, [r4, #20]
 800e74a:	425b      	negs	r3, r3
 800e74c:	61a3      	str	r3, [r4, #24]
 800e74e:	6923      	ldr	r3, [r4, #16]
 800e750:	b943      	cbnz	r3, 800e764 <__swsetup_r+0xa8>
 800e752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e756:	d1c4      	bne.n	800e6e2 <__swsetup_r+0x26>
 800e758:	bd38      	pop	{r3, r4, r5, pc}
 800e75a:	0781      	lsls	r1, r0, #30
 800e75c:	bf58      	it	pl
 800e75e:	6963      	ldrpl	r3, [r4, #20]
 800e760:	60a3      	str	r3, [r4, #8]
 800e762:	e7f4      	b.n	800e74e <__swsetup_r+0x92>
 800e764:	2000      	movs	r0, #0
 800e766:	e7f7      	b.n	800e758 <__swsetup_r+0x9c>
 800e768:	200005d8 	.word	0x200005d8

0800e76c <__swhatbuf_r>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	2900      	cmp	r1, #0
 800e776:	b096      	sub	sp, #88	; 0x58
 800e778:	4615      	mov	r5, r2
 800e77a:	461e      	mov	r6, r3
 800e77c:	da0d      	bge.n	800e79a <__swhatbuf_r+0x2e>
 800e77e:	89a3      	ldrh	r3, [r4, #12]
 800e780:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e784:	f04f 0100 	mov.w	r1, #0
 800e788:	bf0c      	ite	eq
 800e78a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e78e:	2340      	movne	r3, #64	; 0x40
 800e790:	2000      	movs	r0, #0
 800e792:	6031      	str	r1, [r6, #0]
 800e794:	602b      	str	r3, [r5, #0]
 800e796:	b016      	add	sp, #88	; 0x58
 800e798:	bd70      	pop	{r4, r5, r6, pc}
 800e79a:	466a      	mov	r2, sp
 800e79c:	f000 f848 	bl	800e830 <_fstat_r>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	dbec      	blt.n	800e77e <__swhatbuf_r+0x12>
 800e7a4:	9901      	ldr	r1, [sp, #4]
 800e7a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7ae:	4259      	negs	r1, r3
 800e7b0:	4159      	adcs	r1, r3
 800e7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7b6:	e7eb      	b.n	800e790 <__swhatbuf_r+0x24>

0800e7b8 <__smakebuf_r>:
 800e7b8:	898b      	ldrh	r3, [r1, #12]
 800e7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7bc:	079d      	lsls	r5, r3, #30
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	d507      	bpl.n	800e7d4 <__smakebuf_r+0x1c>
 800e7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	6123      	str	r3, [r4, #16]
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	6163      	str	r3, [r4, #20]
 800e7d0:	b002      	add	sp, #8
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
 800e7d4:	ab01      	add	r3, sp, #4
 800e7d6:	466a      	mov	r2, sp
 800e7d8:	f7ff ffc8 	bl	800e76c <__swhatbuf_r>
 800e7dc:	9900      	ldr	r1, [sp, #0]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f7fb feeb 	bl	800a5bc <_malloc_r>
 800e7e6:	b948      	cbnz	r0, 800e7fc <__smakebuf_r+0x44>
 800e7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7ec:	059a      	lsls	r2, r3, #22
 800e7ee:	d4ef      	bmi.n	800e7d0 <__smakebuf_r+0x18>
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	f043 0302 	orr.w	r3, r3, #2
 800e7f8:	81a3      	strh	r3, [r4, #12]
 800e7fa:	e7e3      	b.n	800e7c4 <__smakebuf_r+0xc>
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	6020      	str	r0, [r4, #0]
 800e800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e804:	81a3      	strh	r3, [r4, #12]
 800e806:	9b00      	ldr	r3, [sp, #0]
 800e808:	6163      	str	r3, [r4, #20]
 800e80a:	9b01      	ldr	r3, [sp, #4]
 800e80c:	6120      	str	r0, [r4, #16]
 800e80e:	b15b      	cbz	r3, 800e828 <__smakebuf_r+0x70>
 800e810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e814:	4630      	mov	r0, r6
 800e816:	f000 f81d 	bl	800e854 <_isatty_r>
 800e81a:	b128      	cbz	r0, 800e828 <__smakebuf_r+0x70>
 800e81c:	89a3      	ldrh	r3, [r4, #12]
 800e81e:	f023 0303 	bic.w	r3, r3, #3
 800e822:	f043 0301 	orr.w	r3, r3, #1
 800e826:	81a3      	strh	r3, [r4, #12]
 800e828:	89a3      	ldrh	r3, [r4, #12]
 800e82a:	431d      	orrs	r5, r3
 800e82c:	81a5      	strh	r5, [r4, #12]
 800e82e:	e7cf      	b.n	800e7d0 <__smakebuf_r+0x18>

0800e830 <_fstat_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d07      	ldr	r5, [pc, #28]	; (800e850 <_fstat_r+0x20>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	4611      	mov	r1, r2
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	f7f4 f8fe 	bl	8002a3e <_fstat>
 800e842:	1c43      	adds	r3, r0, #1
 800e844:	d102      	bne.n	800e84c <_fstat_r+0x1c>
 800e846:	682b      	ldr	r3, [r5, #0]
 800e848:	b103      	cbz	r3, 800e84c <_fstat_r+0x1c>
 800e84a:	6023      	str	r3, [r4, #0]
 800e84c:	bd38      	pop	{r3, r4, r5, pc}
 800e84e:	bf00      	nop
 800e850:	2000483c 	.word	0x2000483c

0800e854 <_isatty_r>:
 800e854:	b538      	push	{r3, r4, r5, lr}
 800e856:	4d06      	ldr	r5, [pc, #24]	; (800e870 <_isatty_r+0x1c>)
 800e858:	2300      	movs	r3, #0
 800e85a:	4604      	mov	r4, r0
 800e85c:	4608      	mov	r0, r1
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f7f4 f8fd 	bl	8002a5e <_isatty>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_isatty_r+0x1a>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_isatty_r+0x1a>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	2000483c 	.word	0x2000483c

0800e874 <_raise_r>:
 800e874:	291f      	cmp	r1, #31
 800e876:	b538      	push	{r3, r4, r5, lr}
 800e878:	4604      	mov	r4, r0
 800e87a:	460d      	mov	r5, r1
 800e87c:	d904      	bls.n	800e888 <_raise_r+0x14>
 800e87e:	2316      	movs	r3, #22
 800e880:	6003      	str	r3, [r0, #0]
 800e882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e88a:	b112      	cbz	r2, 800e892 <_raise_r+0x1e>
 800e88c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e890:	b94b      	cbnz	r3, 800e8a6 <_raise_r+0x32>
 800e892:	4620      	mov	r0, r4
 800e894:	f000 f830 	bl	800e8f8 <_getpid_r>
 800e898:	462a      	mov	r2, r5
 800e89a:	4601      	mov	r1, r0
 800e89c:	4620      	mov	r0, r4
 800e89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a2:	f000 b817 	b.w	800e8d4 <_kill_r>
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d00a      	beq.n	800e8c0 <_raise_r+0x4c>
 800e8aa:	1c59      	adds	r1, r3, #1
 800e8ac:	d103      	bne.n	800e8b6 <_raise_r+0x42>
 800e8ae:	2316      	movs	r3, #22
 800e8b0:	6003      	str	r3, [r0, #0]
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	e7e7      	b.n	800e886 <_raise_r+0x12>
 800e8b6:	2400      	movs	r4, #0
 800e8b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8bc:	4628      	mov	r0, r5
 800e8be:	4798      	blx	r3
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	e7e0      	b.n	800e886 <_raise_r+0x12>

0800e8c4 <raise>:
 800e8c4:	4b02      	ldr	r3, [pc, #8]	; (800e8d0 <raise+0xc>)
 800e8c6:	4601      	mov	r1, r0
 800e8c8:	6818      	ldr	r0, [r3, #0]
 800e8ca:	f7ff bfd3 	b.w	800e874 <_raise_r>
 800e8ce:	bf00      	nop
 800e8d0:	200005d8 	.word	0x200005d8

0800e8d4 <_kill_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4d07      	ldr	r5, [pc, #28]	; (800e8f4 <_kill_r+0x20>)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	4604      	mov	r4, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	4611      	mov	r1, r2
 800e8e0:	602b      	str	r3, [r5, #0]
 800e8e2:	f7f4 f84d 	bl	8002980 <_kill>
 800e8e6:	1c43      	adds	r3, r0, #1
 800e8e8:	d102      	bne.n	800e8f0 <_kill_r+0x1c>
 800e8ea:	682b      	ldr	r3, [r5, #0]
 800e8ec:	b103      	cbz	r3, 800e8f0 <_kill_r+0x1c>
 800e8ee:	6023      	str	r3, [r4, #0]
 800e8f0:	bd38      	pop	{r3, r4, r5, pc}
 800e8f2:	bf00      	nop
 800e8f4:	2000483c 	.word	0x2000483c

0800e8f8 <_getpid_r>:
 800e8f8:	f7f4 b83a 	b.w	8002970 <_getpid>
 800e8fc:	0000      	movs	r0, r0
	...

0800e900 <sin>:
 800e900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e902:	ec53 2b10 	vmov	r2, r3, d0
 800e906:	4828      	ldr	r0, [pc, #160]	; (800e9a8 <sin+0xa8>)
 800e908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e90c:	4281      	cmp	r1, r0
 800e90e:	dc07      	bgt.n	800e920 <sin+0x20>
 800e910:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e9a0 <sin+0xa0>
 800e914:	2000      	movs	r0, #0
 800e916:	b005      	add	sp, #20
 800e918:	f85d eb04 	ldr.w	lr, [sp], #4
 800e91c:	f000 beb0 	b.w	800f680 <__kernel_sin>
 800e920:	4822      	ldr	r0, [pc, #136]	; (800e9ac <sin+0xac>)
 800e922:	4281      	cmp	r1, r0
 800e924:	dd09      	ble.n	800e93a <sin+0x3a>
 800e926:	ee10 0a10 	vmov	r0, s0
 800e92a:	4619      	mov	r1, r3
 800e92c:	f7f1 fcac 	bl	8000288 <__aeabi_dsub>
 800e930:	ec41 0b10 	vmov	d0, r0, r1
 800e934:	b005      	add	sp, #20
 800e936:	f85d fb04 	ldr.w	pc, [sp], #4
 800e93a:	4668      	mov	r0, sp
 800e93c:	f000 f880 	bl	800ea40 <__ieee754_rem_pio2>
 800e940:	f000 0003 	and.w	r0, r0, #3
 800e944:	2801      	cmp	r0, #1
 800e946:	d00c      	beq.n	800e962 <sin+0x62>
 800e948:	2802      	cmp	r0, #2
 800e94a:	d011      	beq.n	800e970 <sin+0x70>
 800e94c:	b9f0      	cbnz	r0, 800e98c <sin+0x8c>
 800e94e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e952:	ed9d 0b00 	vldr	d0, [sp]
 800e956:	2001      	movs	r0, #1
 800e958:	f000 fe92 	bl	800f680 <__kernel_sin>
 800e95c:	ec51 0b10 	vmov	r0, r1, d0
 800e960:	e7e6      	b.n	800e930 <sin+0x30>
 800e962:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e966:	ed9d 0b00 	vldr	d0, [sp]
 800e96a:	f000 fdc1 	bl	800f4f0 <__kernel_cos>
 800e96e:	e7f5      	b.n	800e95c <sin+0x5c>
 800e970:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e974:	ed9d 0b00 	vldr	d0, [sp]
 800e978:	2001      	movs	r0, #1
 800e97a:	f000 fe81 	bl	800f680 <__kernel_sin>
 800e97e:	ec53 2b10 	vmov	r2, r3, d0
 800e982:	ee10 0a10 	vmov	r0, s0
 800e986:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e98a:	e7d1      	b.n	800e930 <sin+0x30>
 800e98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e990:	ed9d 0b00 	vldr	d0, [sp]
 800e994:	f000 fdac 	bl	800f4f0 <__kernel_cos>
 800e998:	e7f1      	b.n	800e97e <sin+0x7e>
 800e99a:	bf00      	nop
 800e99c:	f3af 8000 	nop.w
	...
 800e9a8:	3fe921fb 	.word	0x3fe921fb
 800e9ac:	7fefffff 	.word	0x7fefffff

0800e9b0 <round>:
 800e9b0:	ec53 2b10 	vmov	r2, r3, d0
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e9ba:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e9be:	2813      	cmp	r0, #19
 800e9c0:	ee10 5a10 	vmov	r5, s0
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	dc18      	bgt.n	800e9fa <round+0x4a>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	da09      	bge.n	800e9e0 <round+0x30>
 800e9cc:	3001      	adds	r0, #1
 800e9ce:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800e9d2:	d103      	bne.n	800e9dc <round+0x2c>
 800e9d4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e9d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e9dc:	2300      	movs	r3, #0
 800e9de:	e02a      	b.n	800ea36 <round+0x86>
 800e9e0:	4c16      	ldr	r4, [pc, #88]	; (800ea3c <round+0x8c>)
 800e9e2:	4104      	asrs	r4, r0
 800e9e4:	ea03 0604 	and.w	r6, r3, r4
 800e9e8:	4316      	orrs	r6, r2
 800e9ea:	d011      	beq.n	800ea10 <round+0x60>
 800e9ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e9f0:	4103      	asrs	r3, r0
 800e9f2:	440b      	add	r3, r1
 800e9f4:	ea23 0104 	bic.w	r1, r3, r4
 800e9f8:	e7f0      	b.n	800e9dc <round+0x2c>
 800e9fa:	2833      	cmp	r0, #51	; 0x33
 800e9fc:	dd0b      	ble.n	800ea16 <round+0x66>
 800e9fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ea02:	d105      	bne.n	800ea10 <round+0x60>
 800ea04:	ee10 0a10 	vmov	r0, s0
 800ea08:	f7f1 fc40 	bl	800028c <__adddf3>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	ec43 2b10 	vmov	d0, r2, r3
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800ea1a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ea1e:	40f4      	lsrs	r4, r6
 800ea20:	4214      	tst	r4, r2
 800ea22:	d0f5      	beq.n	800ea10 <round+0x60>
 800ea24:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800ea28:	2301      	movs	r3, #1
 800ea2a:	4083      	lsls	r3, r0
 800ea2c:	195b      	adds	r3, r3, r5
 800ea2e:	bf28      	it	cs
 800ea30:	3101      	addcs	r1, #1
 800ea32:	ea23 0304 	bic.w	r3, r3, r4
 800ea36:	461a      	mov	r2, r3
 800ea38:	460b      	mov	r3, r1
 800ea3a:	e7e9      	b.n	800ea10 <round+0x60>
 800ea3c:	000fffff 	.word	0x000fffff

0800ea40 <__ieee754_rem_pio2>:
 800ea40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	ed2d 8b02 	vpush	{d8}
 800ea48:	ec55 4b10 	vmov	r4, r5, d0
 800ea4c:	4bca      	ldr	r3, [pc, #808]	; (800ed78 <__ieee754_rem_pio2+0x338>)
 800ea4e:	b08b      	sub	sp, #44	; 0x2c
 800ea50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ea54:	4598      	cmp	r8, r3
 800ea56:	4682      	mov	sl, r0
 800ea58:	9502      	str	r5, [sp, #8]
 800ea5a:	dc08      	bgt.n	800ea6e <__ieee754_rem_pio2+0x2e>
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2300      	movs	r3, #0
 800ea60:	ed80 0b00 	vstr	d0, [r0]
 800ea64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ea68:	f04f 0b00 	mov.w	fp, #0
 800ea6c:	e028      	b.n	800eac0 <__ieee754_rem_pio2+0x80>
 800ea6e:	4bc3      	ldr	r3, [pc, #780]	; (800ed7c <__ieee754_rem_pio2+0x33c>)
 800ea70:	4598      	cmp	r8, r3
 800ea72:	dc78      	bgt.n	800eb66 <__ieee754_rem_pio2+0x126>
 800ea74:	9b02      	ldr	r3, [sp, #8]
 800ea76:	4ec2      	ldr	r6, [pc, #776]	; (800ed80 <__ieee754_rem_pio2+0x340>)
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	ee10 0a10 	vmov	r0, s0
 800ea7e:	a3b0      	add	r3, pc, #704	; (adr r3, 800ed40 <__ieee754_rem_pio2+0x300>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	4629      	mov	r1, r5
 800ea86:	dd39      	ble.n	800eafc <__ieee754_rem_pio2+0xbc>
 800ea88:	f7f1 fbfe 	bl	8000288 <__aeabi_dsub>
 800ea8c:	45b0      	cmp	r8, r6
 800ea8e:	4604      	mov	r4, r0
 800ea90:	460d      	mov	r5, r1
 800ea92:	d01b      	beq.n	800eacc <__ieee754_rem_pio2+0x8c>
 800ea94:	a3ac      	add	r3, pc, #688	; (adr r3, 800ed48 <__ieee754_rem_pio2+0x308>)
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	f7f1 fbf5 	bl	8000288 <__aeabi_dsub>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	e9ca 2300 	strd	r2, r3, [sl]
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	4629      	mov	r1, r5
 800eaaa:	f7f1 fbed 	bl	8000288 <__aeabi_dsub>
 800eaae:	a3a6      	add	r3, pc, #664	; (adr r3, 800ed48 <__ieee754_rem_pio2+0x308>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fbe8 	bl	8000288 <__aeabi_dsub>
 800eab8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eabc:	f04f 0b01 	mov.w	fp, #1
 800eac0:	4658      	mov	r0, fp
 800eac2:	b00b      	add	sp, #44	; 0x2c
 800eac4:	ecbd 8b02 	vpop	{d8}
 800eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eacc:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed50 <__ieee754_rem_pio2+0x310>)
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	f7f1 fbd9 	bl	8000288 <__aeabi_dsub>
 800ead6:	a3a0      	add	r3, pc, #640	; (adr r3, 800ed58 <__ieee754_rem_pio2+0x318>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	4604      	mov	r4, r0
 800eade:	460d      	mov	r5, r1
 800eae0:	f7f1 fbd2 	bl	8000288 <__aeabi_dsub>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	e9ca 2300 	strd	r2, r3, [sl]
 800eaec:	4620      	mov	r0, r4
 800eaee:	4629      	mov	r1, r5
 800eaf0:	f7f1 fbca 	bl	8000288 <__aeabi_dsub>
 800eaf4:	a398      	add	r3, pc, #608	; (adr r3, 800ed58 <__ieee754_rem_pio2+0x318>)
 800eaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafa:	e7db      	b.n	800eab4 <__ieee754_rem_pio2+0x74>
 800eafc:	f7f1 fbc6 	bl	800028c <__adddf3>
 800eb00:	45b0      	cmp	r8, r6
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	d016      	beq.n	800eb36 <__ieee754_rem_pio2+0xf6>
 800eb08:	a38f      	add	r3, pc, #572	; (adr r3, 800ed48 <__ieee754_rem_pio2+0x308>)
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f7f1 fbbd 	bl	800028c <__adddf3>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	e9ca 2300 	strd	r2, r3, [sl]
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	4629      	mov	r1, r5
 800eb1e:	f7f1 fbb3 	bl	8000288 <__aeabi_dsub>
 800eb22:	a389      	add	r3, pc, #548	; (adr r3, 800ed48 <__ieee754_rem_pio2+0x308>)
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	f7f1 fbb0 	bl	800028c <__adddf3>
 800eb2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800eb30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb34:	e7c4      	b.n	800eac0 <__ieee754_rem_pio2+0x80>
 800eb36:	a386      	add	r3, pc, #536	; (adr r3, 800ed50 <__ieee754_rem_pio2+0x310>)
 800eb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3c:	f7f1 fba6 	bl	800028c <__adddf3>
 800eb40:	a385      	add	r3, pc, #532	; (adr r3, 800ed58 <__ieee754_rem_pio2+0x318>)
 800eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb46:	4604      	mov	r4, r0
 800eb48:	460d      	mov	r5, r1
 800eb4a:	f7f1 fb9f 	bl	800028c <__adddf3>
 800eb4e:	4602      	mov	r2, r0
 800eb50:	460b      	mov	r3, r1
 800eb52:	e9ca 2300 	strd	r2, r3, [sl]
 800eb56:	4620      	mov	r0, r4
 800eb58:	4629      	mov	r1, r5
 800eb5a:	f7f1 fb95 	bl	8000288 <__aeabi_dsub>
 800eb5e:	a37e      	add	r3, pc, #504	; (adr r3, 800ed58 <__ieee754_rem_pio2+0x318>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	e7e0      	b.n	800eb28 <__ieee754_rem_pio2+0xe8>
 800eb66:	4b87      	ldr	r3, [pc, #540]	; (800ed84 <__ieee754_rem_pio2+0x344>)
 800eb68:	4598      	cmp	r8, r3
 800eb6a:	f300 80d8 	bgt.w	800ed1e <__ieee754_rem_pio2+0x2de>
 800eb6e:	f000 fe45 	bl	800f7fc <fabs>
 800eb72:	ec55 4b10 	vmov	r4, r5, d0
 800eb76:	ee10 0a10 	vmov	r0, s0
 800eb7a:	a379      	add	r3, pc, #484	; (adr r3, 800ed60 <__ieee754_rem_pio2+0x320>)
 800eb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fd39 	bl	80005f8 <__aeabi_dmul>
 800eb86:	4b80      	ldr	r3, [pc, #512]	; (800ed88 <__ieee754_rem_pio2+0x348>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f7f1 fb7f 	bl	800028c <__adddf3>
 800eb8e:	f7f1 ffe3 	bl	8000b58 <__aeabi_d2iz>
 800eb92:	4683      	mov	fp, r0
 800eb94:	f7f1 fcc6 	bl	8000524 <__aeabi_i2d>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	ec43 2b18 	vmov	d8, r2, r3
 800eba0:	a367      	add	r3, pc, #412	; (adr r3, 800ed40 <__ieee754_rem_pio2+0x300>)
 800eba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba6:	f7f1 fd27 	bl	80005f8 <__aeabi_dmul>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	460b      	mov	r3, r1
 800ebae:	4620      	mov	r0, r4
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	f7f1 fb69 	bl	8000288 <__aeabi_dsub>
 800ebb6:	a364      	add	r3, pc, #400	; (adr r3, 800ed48 <__ieee754_rem_pio2+0x308>)
 800ebb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebbc:	4606      	mov	r6, r0
 800ebbe:	460f      	mov	r7, r1
 800ebc0:	ec51 0b18 	vmov	r0, r1, d8
 800ebc4:	f7f1 fd18 	bl	80005f8 <__aeabi_dmul>
 800ebc8:	f1bb 0f1f 	cmp.w	fp, #31
 800ebcc:	4604      	mov	r4, r0
 800ebce:	460d      	mov	r5, r1
 800ebd0:	dc0d      	bgt.n	800ebee <__ieee754_rem_pio2+0x1ae>
 800ebd2:	4b6e      	ldr	r3, [pc, #440]	; (800ed8c <__ieee754_rem_pio2+0x34c>)
 800ebd4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ebd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebdc:	4543      	cmp	r3, r8
 800ebde:	d006      	beq.n	800ebee <__ieee754_rem_pio2+0x1ae>
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	f7f1 fb4e 	bl	8000288 <__aeabi_dsub>
 800ebec:	e00e      	b.n	800ec0c <__ieee754_rem_pio2+0x1cc>
 800ebee:	462b      	mov	r3, r5
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	f7f1 fb47 	bl	8000288 <__aeabi_dsub>
 800ebfa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ebfe:	9303      	str	r3, [sp, #12]
 800ec00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec04:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ec08:	2b10      	cmp	r3, #16
 800ec0a:	dc02      	bgt.n	800ec12 <__ieee754_rem_pio2+0x1d2>
 800ec0c:	e9ca 0100 	strd	r0, r1, [sl]
 800ec10:	e039      	b.n	800ec86 <__ieee754_rem_pio2+0x246>
 800ec12:	a34f      	add	r3, pc, #316	; (adr r3, 800ed50 <__ieee754_rem_pio2+0x310>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	ec51 0b18 	vmov	r0, r1, d8
 800ec1c:	f7f1 fcec 	bl	80005f8 <__aeabi_dmul>
 800ec20:	4604      	mov	r4, r0
 800ec22:	460d      	mov	r5, r1
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4630      	mov	r0, r6
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	f7f1 fb2c 	bl	8000288 <__aeabi_dsub>
 800ec30:	4602      	mov	r2, r0
 800ec32:	460b      	mov	r3, r1
 800ec34:	4680      	mov	r8, r0
 800ec36:	4689      	mov	r9, r1
 800ec38:	4630      	mov	r0, r6
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	f7f1 fb24 	bl	8000288 <__aeabi_dsub>
 800ec40:	4622      	mov	r2, r4
 800ec42:	462b      	mov	r3, r5
 800ec44:	f7f1 fb20 	bl	8000288 <__aeabi_dsub>
 800ec48:	a343      	add	r3, pc, #268	; (adr r3, 800ed58 <__ieee754_rem_pio2+0x318>)
 800ec4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4e:	4604      	mov	r4, r0
 800ec50:	460d      	mov	r5, r1
 800ec52:	ec51 0b18 	vmov	r0, r1, d8
 800ec56:	f7f1 fccf 	bl	80005f8 <__aeabi_dmul>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	f7f1 fb13 	bl	8000288 <__aeabi_dsub>
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4604      	mov	r4, r0
 800ec68:	460d      	mov	r5, r1
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	f7f1 fb0b 	bl	8000288 <__aeabi_dsub>
 800ec72:	9a03      	ldr	r2, [sp, #12]
 800ec74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	2b31      	cmp	r3, #49	; 0x31
 800ec7c:	dc24      	bgt.n	800ecc8 <__ieee754_rem_pio2+0x288>
 800ec7e:	e9ca 0100 	strd	r0, r1, [sl]
 800ec82:	4646      	mov	r6, r8
 800ec84:	464f      	mov	r7, r9
 800ec86:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	4642      	mov	r2, r8
 800ec8e:	464b      	mov	r3, r9
 800ec90:	4639      	mov	r1, r7
 800ec92:	f7f1 faf9 	bl	8000288 <__aeabi_dsub>
 800ec96:	462b      	mov	r3, r5
 800ec98:	4622      	mov	r2, r4
 800ec9a:	f7f1 faf5 	bl	8000288 <__aeabi_dsub>
 800ec9e:	9b02      	ldr	r3, [sp, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eca6:	f6bf af0b 	bge.w	800eac0 <__ieee754_rem_pio2+0x80>
 800ecaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecae:	f8ca 3004 	str.w	r3, [sl, #4]
 800ecb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecb6:	f8ca 8000 	str.w	r8, [sl]
 800ecba:	f8ca 0008 	str.w	r0, [sl, #8]
 800ecbe:	f8ca 300c 	str.w	r3, [sl, #12]
 800ecc2:	f1cb 0b00 	rsb	fp, fp, #0
 800ecc6:	e6fb      	b.n	800eac0 <__ieee754_rem_pio2+0x80>
 800ecc8:	a327      	add	r3, pc, #156	; (adr r3, 800ed68 <__ieee754_rem_pio2+0x328>)
 800ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecce:	ec51 0b18 	vmov	r0, r1, d8
 800ecd2:	f7f1 fc91 	bl	80005f8 <__aeabi_dmul>
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	460d      	mov	r5, r1
 800ecda:	4602      	mov	r2, r0
 800ecdc:	460b      	mov	r3, r1
 800ecde:	4640      	mov	r0, r8
 800ece0:	4649      	mov	r1, r9
 800ece2:	f7f1 fad1 	bl	8000288 <__aeabi_dsub>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	4606      	mov	r6, r0
 800ecec:	460f      	mov	r7, r1
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 fac9 	bl	8000288 <__aeabi_dsub>
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	462b      	mov	r3, r5
 800ecfa:	f7f1 fac5 	bl	8000288 <__aeabi_dsub>
 800ecfe:	a31c      	add	r3, pc, #112	; (adr r3, 800ed70 <__ieee754_rem_pio2+0x330>)
 800ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed04:	4604      	mov	r4, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	ec51 0b18 	vmov	r0, r1, d8
 800ed0c:	f7f1 fc74 	bl	80005f8 <__aeabi_dmul>
 800ed10:	4622      	mov	r2, r4
 800ed12:	462b      	mov	r3, r5
 800ed14:	f7f1 fab8 	bl	8000288 <__aeabi_dsub>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	e760      	b.n	800ebe0 <__ieee754_rem_pio2+0x1a0>
 800ed1e:	4b1c      	ldr	r3, [pc, #112]	; (800ed90 <__ieee754_rem_pio2+0x350>)
 800ed20:	4598      	cmp	r8, r3
 800ed22:	dd37      	ble.n	800ed94 <__ieee754_rem_pio2+0x354>
 800ed24:	ee10 2a10 	vmov	r2, s0
 800ed28:	462b      	mov	r3, r5
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	f7f1 faab 	bl	8000288 <__aeabi_dsub>
 800ed32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed36:	e9ca 0100 	strd	r0, r1, [sl]
 800ed3a:	e695      	b.n	800ea68 <__ieee754_rem_pio2+0x28>
 800ed3c:	f3af 8000 	nop.w
 800ed40:	54400000 	.word	0x54400000
 800ed44:	3ff921fb 	.word	0x3ff921fb
 800ed48:	1a626331 	.word	0x1a626331
 800ed4c:	3dd0b461 	.word	0x3dd0b461
 800ed50:	1a600000 	.word	0x1a600000
 800ed54:	3dd0b461 	.word	0x3dd0b461
 800ed58:	2e037073 	.word	0x2e037073
 800ed5c:	3ba3198a 	.word	0x3ba3198a
 800ed60:	6dc9c883 	.word	0x6dc9c883
 800ed64:	3fe45f30 	.word	0x3fe45f30
 800ed68:	2e000000 	.word	0x2e000000
 800ed6c:	3ba3198a 	.word	0x3ba3198a
 800ed70:	252049c1 	.word	0x252049c1
 800ed74:	397b839a 	.word	0x397b839a
 800ed78:	3fe921fb 	.word	0x3fe921fb
 800ed7c:	4002d97b 	.word	0x4002d97b
 800ed80:	3ff921fb 	.word	0x3ff921fb
 800ed84:	413921fb 	.word	0x413921fb
 800ed88:	3fe00000 	.word	0x3fe00000
 800ed8c:	080102d4 	.word	0x080102d4
 800ed90:	7fefffff 	.word	0x7fefffff
 800ed94:	ea4f 5628 	mov.w	r6, r8, asr #20
 800ed98:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800ed9c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800eda0:	4620      	mov	r0, r4
 800eda2:	460d      	mov	r5, r1
 800eda4:	f7f1 fed8 	bl	8000b58 <__aeabi_d2iz>
 800eda8:	f7f1 fbbc 	bl	8000524 <__aeabi_i2d>
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	4620      	mov	r0, r4
 800edb2:	4629      	mov	r1, r5
 800edb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800edb8:	f7f1 fa66 	bl	8000288 <__aeabi_dsub>
 800edbc:	4b21      	ldr	r3, [pc, #132]	; (800ee44 <__ieee754_rem_pio2+0x404>)
 800edbe:	2200      	movs	r2, #0
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	460d      	mov	r5, r1
 800edc6:	4604      	mov	r4, r0
 800edc8:	f7f1 fec6 	bl	8000b58 <__aeabi_d2iz>
 800edcc:	f7f1 fbaa 	bl	8000524 <__aeabi_i2d>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4620      	mov	r0, r4
 800edd6:	4629      	mov	r1, r5
 800edd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eddc:	f7f1 fa54 	bl	8000288 <__aeabi_dsub>
 800ede0:	4b18      	ldr	r3, [pc, #96]	; (800ee44 <__ieee754_rem_pio2+0x404>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	f7f1 fc08 	bl	80005f8 <__aeabi_dmul>
 800ede8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800edf0:	2703      	movs	r7, #3
 800edf2:	2400      	movs	r4, #0
 800edf4:	2500      	movs	r5, #0
 800edf6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800edfa:	4622      	mov	r2, r4
 800edfc:	462b      	mov	r3, r5
 800edfe:	46b9      	mov	r9, r7
 800ee00:	3f01      	subs	r7, #1
 800ee02:	f7f1 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d1f5      	bne.n	800edf6 <__ieee754_rem_pio2+0x3b6>
 800ee0a:	4b0f      	ldr	r3, [pc, #60]	; (800ee48 <__ieee754_rem_pio2+0x408>)
 800ee0c:	9301      	str	r3, [sp, #4]
 800ee0e:	2302      	movs	r3, #2
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	4632      	mov	r2, r6
 800ee14:	464b      	mov	r3, r9
 800ee16:	4651      	mov	r1, sl
 800ee18:	a804      	add	r0, sp, #16
 800ee1a:	f000 f819 	bl	800ee50 <__kernel_rem_pio2>
 800ee1e:	9b02      	ldr	r3, [sp, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	4683      	mov	fp, r0
 800ee24:	f6bf ae4c 	bge.w	800eac0 <__ieee754_rem_pio2+0x80>
 800ee28:	e9da 2100 	ldrd	r2, r1, [sl]
 800ee2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee30:	e9ca 2300 	strd	r2, r3, [sl]
 800ee34:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ee38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee3c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ee40:	e73f      	b.n	800ecc2 <__ieee754_rem_pio2+0x282>
 800ee42:	bf00      	nop
 800ee44:	41700000 	.word	0x41700000
 800ee48:	08010354 	.word	0x08010354
 800ee4c:	00000000 	.word	0x00000000

0800ee50 <__kernel_rem_pio2>:
 800ee50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee54:	ed2d 8b02 	vpush	{d8}
 800ee58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ee5c:	f112 0f14 	cmn.w	r2, #20
 800ee60:	9306      	str	r3, [sp, #24]
 800ee62:	9104      	str	r1, [sp, #16]
 800ee64:	4bc2      	ldr	r3, [pc, #776]	; (800f170 <__kernel_rem_pio2+0x320>)
 800ee66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ee68:	9009      	str	r0, [sp, #36]	; 0x24
 800ee6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	9b06      	ldr	r3, [sp, #24]
 800ee72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ee76:	bfa8      	it	ge
 800ee78:	1ed4      	subge	r4, r2, #3
 800ee7a:	9305      	str	r3, [sp, #20]
 800ee7c:	bfb2      	itee	lt
 800ee7e:	2400      	movlt	r4, #0
 800ee80:	2318      	movge	r3, #24
 800ee82:	fb94 f4f3 	sdivge	r4, r4, r3
 800ee86:	f06f 0317 	mvn.w	r3, #23
 800ee8a:	fb04 3303 	mla	r3, r4, r3, r3
 800ee8e:	eb03 0a02 	add.w	sl, r3, r2
 800ee92:	9b00      	ldr	r3, [sp, #0]
 800ee94:	9a05      	ldr	r2, [sp, #20]
 800ee96:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f160 <__kernel_rem_pio2+0x310>
 800ee9a:	eb03 0802 	add.w	r8, r3, r2
 800ee9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800eea0:	1aa7      	subs	r7, r4, r2
 800eea2:	ae20      	add	r6, sp, #128	; 0x80
 800eea4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eea8:	2500      	movs	r5, #0
 800eeaa:	4545      	cmp	r5, r8
 800eeac:	dd13      	ble.n	800eed6 <__kernel_rem_pio2+0x86>
 800eeae:	9b06      	ldr	r3, [sp, #24]
 800eeb0:	aa20      	add	r2, sp, #128	; 0x80
 800eeb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800eeb6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800eeba:	f04f 0800 	mov.w	r8, #0
 800eebe:	9b00      	ldr	r3, [sp, #0]
 800eec0:	4598      	cmp	r8, r3
 800eec2:	dc31      	bgt.n	800ef28 <__kernel_rem_pio2+0xd8>
 800eec4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f160 <__kernel_rem_pio2+0x310>
 800eec8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eecc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eed0:	462f      	mov	r7, r5
 800eed2:	2600      	movs	r6, #0
 800eed4:	e01b      	b.n	800ef0e <__kernel_rem_pio2+0xbe>
 800eed6:	42ef      	cmn	r7, r5
 800eed8:	d407      	bmi.n	800eeea <__kernel_rem_pio2+0x9a>
 800eeda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eede:	f7f1 fb21 	bl	8000524 <__aeabi_i2d>
 800eee2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800eee6:	3501      	adds	r5, #1
 800eee8:	e7df      	b.n	800eeaa <__kernel_rem_pio2+0x5a>
 800eeea:	ec51 0b18 	vmov	r0, r1, d8
 800eeee:	e7f8      	b.n	800eee2 <__kernel_rem_pio2+0x92>
 800eef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eef4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800eef8:	f7f1 fb7e 	bl	80005f8 <__aeabi_dmul>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef04:	f7f1 f9c2 	bl	800028c <__adddf3>
 800ef08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef0c:	3601      	adds	r6, #1
 800ef0e:	9b05      	ldr	r3, [sp, #20]
 800ef10:	429e      	cmp	r6, r3
 800ef12:	f1a7 0708 	sub.w	r7, r7, #8
 800ef16:	ddeb      	ble.n	800eef0 <__kernel_rem_pio2+0xa0>
 800ef18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef1c:	f108 0801 	add.w	r8, r8, #1
 800ef20:	ecab 7b02 	vstmia	fp!, {d7}
 800ef24:	3508      	adds	r5, #8
 800ef26:	e7ca      	b.n	800eebe <__kernel_rem_pio2+0x6e>
 800ef28:	9b00      	ldr	r3, [sp, #0]
 800ef2a:	aa0c      	add	r2, sp, #48	; 0x30
 800ef2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef32:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ef34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ef38:	9c00      	ldr	r4, [sp, #0]
 800ef3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ef3c:	00e3      	lsls	r3, r4, #3
 800ef3e:	9308      	str	r3, [sp, #32]
 800ef40:	ab98      	add	r3, sp, #608	; 0x260
 800ef42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef46:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ef4a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ef4e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef50:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ef54:	46c3      	mov	fp, r8
 800ef56:	46a1      	mov	r9, r4
 800ef58:	f1b9 0f00 	cmp.w	r9, #0
 800ef5c:	f1a5 0508 	sub.w	r5, r5, #8
 800ef60:	dc77      	bgt.n	800f052 <__kernel_rem_pio2+0x202>
 800ef62:	ec47 6b10 	vmov	d0, r6, r7
 800ef66:	4650      	mov	r0, sl
 800ef68:	f000 fc52 	bl	800f810 <scalbn>
 800ef6c:	ec57 6b10 	vmov	r6, r7, d0
 800ef70:	2200      	movs	r2, #0
 800ef72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ef76:	ee10 0a10 	vmov	r0, s0
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	f7f1 fb3c 	bl	80005f8 <__aeabi_dmul>
 800ef80:	ec41 0b10 	vmov	d0, r0, r1
 800ef84:	f000 fcc4 	bl	800f910 <floor>
 800ef88:	4b7a      	ldr	r3, [pc, #488]	; (800f174 <__kernel_rem_pio2+0x324>)
 800ef8a:	ec51 0b10 	vmov	r0, r1, d0
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f7f1 fb32 	bl	80005f8 <__aeabi_dmul>
 800ef94:	4602      	mov	r2, r0
 800ef96:	460b      	mov	r3, r1
 800ef98:	4630      	mov	r0, r6
 800ef9a:	4639      	mov	r1, r7
 800ef9c:	f7f1 f974 	bl	8000288 <__aeabi_dsub>
 800efa0:	460f      	mov	r7, r1
 800efa2:	4606      	mov	r6, r0
 800efa4:	f7f1 fdd8 	bl	8000b58 <__aeabi_d2iz>
 800efa8:	9002      	str	r0, [sp, #8]
 800efaa:	f7f1 fabb 	bl	8000524 <__aeabi_i2d>
 800efae:	4602      	mov	r2, r0
 800efb0:	460b      	mov	r3, r1
 800efb2:	4630      	mov	r0, r6
 800efb4:	4639      	mov	r1, r7
 800efb6:	f7f1 f967 	bl	8000288 <__aeabi_dsub>
 800efba:	f1ba 0f00 	cmp.w	sl, #0
 800efbe:	4606      	mov	r6, r0
 800efc0:	460f      	mov	r7, r1
 800efc2:	dd6d      	ble.n	800f0a0 <__kernel_rem_pio2+0x250>
 800efc4:	1e61      	subs	r1, r4, #1
 800efc6:	ab0c      	add	r3, sp, #48	; 0x30
 800efc8:	9d02      	ldr	r5, [sp, #8]
 800efca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efce:	f1ca 0018 	rsb	r0, sl, #24
 800efd2:	fa43 f200 	asr.w	r2, r3, r0
 800efd6:	4415      	add	r5, r2
 800efd8:	4082      	lsls	r2, r0
 800efda:	1a9b      	subs	r3, r3, r2
 800efdc:	aa0c      	add	r2, sp, #48	; 0x30
 800efde:	9502      	str	r5, [sp, #8]
 800efe0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800efe4:	f1ca 0217 	rsb	r2, sl, #23
 800efe8:	fa43 fb02 	asr.w	fp, r3, r2
 800efec:	f1bb 0f00 	cmp.w	fp, #0
 800eff0:	dd65      	ble.n	800f0be <__kernel_rem_pio2+0x26e>
 800eff2:	9b02      	ldr	r3, [sp, #8]
 800eff4:	2200      	movs	r2, #0
 800eff6:	3301      	adds	r3, #1
 800eff8:	9302      	str	r3, [sp, #8]
 800effa:	4615      	mov	r5, r2
 800effc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f000:	4294      	cmp	r4, r2
 800f002:	f300 809f 	bgt.w	800f144 <__kernel_rem_pio2+0x2f4>
 800f006:	f1ba 0f00 	cmp.w	sl, #0
 800f00a:	dd07      	ble.n	800f01c <__kernel_rem_pio2+0x1cc>
 800f00c:	f1ba 0f01 	cmp.w	sl, #1
 800f010:	f000 80c1 	beq.w	800f196 <__kernel_rem_pio2+0x346>
 800f014:	f1ba 0f02 	cmp.w	sl, #2
 800f018:	f000 80c7 	beq.w	800f1aa <__kernel_rem_pio2+0x35a>
 800f01c:	f1bb 0f02 	cmp.w	fp, #2
 800f020:	d14d      	bne.n	800f0be <__kernel_rem_pio2+0x26e>
 800f022:	4632      	mov	r2, r6
 800f024:	463b      	mov	r3, r7
 800f026:	4954      	ldr	r1, [pc, #336]	; (800f178 <__kernel_rem_pio2+0x328>)
 800f028:	2000      	movs	r0, #0
 800f02a:	f7f1 f92d 	bl	8000288 <__aeabi_dsub>
 800f02e:	4606      	mov	r6, r0
 800f030:	460f      	mov	r7, r1
 800f032:	2d00      	cmp	r5, #0
 800f034:	d043      	beq.n	800f0be <__kernel_rem_pio2+0x26e>
 800f036:	4650      	mov	r0, sl
 800f038:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f168 <__kernel_rem_pio2+0x318>
 800f03c:	f000 fbe8 	bl	800f810 <scalbn>
 800f040:	4630      	mov	r0, r6
 800f042:	4639      	mov	r1, r7
 800f044:	ec53 2b10 	vmov	r2, r3, d0
 800f048:	f7f1 f91e 	bl	8000288 <__aeabi_dsub>
 800f04c:	4606      	mov	r6, r0
 800f04e:	460f      	mov	r7, r1
 800f050:	e035      	b.n	800f0be <__kernel_rem_pio2+0x26e>
 800f052:	4b4a      	ldr	r3, [pc, #296]	; (800f17c <__kernel_rem_pio2+0x32c>)
 800f054:	2200      	movs	r2, #0
 800f056:	4630      	mov	r0, r6
 800f058:	4639      	mov	r1, r7
 800f05a:	f7f1 facd 	bl	80005f8 <__aeabi_dmul>
 800f05e:	f7f1 fd7b 	bl	8000b58 <__aeabi_d2iz>
 800f062:	f7f1 fa5f 	bl	8000524 <__aeabi_i2d>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	ec43 2b18 	vmov	d8, r2, r3
 800f06e:	4b44      	ldr	r3, [pc, #272]	; (800f180 <__kernel_rem_pio2+0x330>)
 800f070:	2200      	movs	r2, #0
 800f072:	f7f1 fac1 	bl	80005f8 <__aeabi_dmul>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4630      	mov	r0, r6
 800f07c:	4639      	mov	r1, r7
 800f07e:	f7f1 f903 	bl	8000288 <__aeabi_dsub>
 800f082:	f7f1 fd69 	bl	8000b58 <__aeabi_d2iz>
 800f086:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f08a:	f84b 0b04 	str.w	r0, [fp], #4
 800f08e:	ec51 0b18 	vmov	r0, r1, d8
 800f092:	f7f1 f8fb 	bl	800028c <__adddf3>
 800f096:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f09a:	4606      	mov	r6, r0
 800f09c:	460f      	mov	r7, r1
 800f09e:	e75b      	b.n	800ef58 <__kernel_rem_pio2+0x108>
 800f0a0:	d106      	bne.n	800f0b0 <__kernel_rem_pio2+0x260>
 800f0a2:	1e63      	subs	r3, r4, #1
 800f0a4:	aa0c      	add	r2, sp, #48	; 0x30
 800f0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0aa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f0ae:	e79d      	b.n	800efec <__kernel_rem_pio2+0x19c>
 800f0b0:	4b34      	ldr	r3, [pc, #208]	; (800f184 <__kernel_rem_pio2+0x334>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f7f1 fd26 	bl	8000b04 <__aeabi_dcmpge>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d140      	bne.n	800f13e <__kernel_rem_pio2+0x2ee>
 800f0bc:	4683      	mov	fp, r0
 800f0be:	2200      	movs	r2, #0
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	f7f1 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	f000 80c1 	beq.w	800f252 <__kernel_rem_pio2+0x402>
 800f0d0:	1e65      	subs	r5, r4, #1
 800f0d2:	462b      	mov	r3, r5
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	9900      	ldr	r1, [sp, #0]
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	da6d      	bge.n	800f1b8 <__kernel_rem_pio2+0x368>
 800f0dc:	2a00      	cmp	r2, #0
 800f0de:	f000 808a 	beq.w	800f1f6 <__kernel_rem_pio2+0x3a6>
 800f0e2:	ab0c      	add	r3, sp, #48	; 0x30
 800f0e4:	f1aa 0a18 	sub.w	sl, sl, #24
 800f0e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 80ae 	beq.w	800f24e <__kernel_rem_pio2+0x3fe>
 800f0f2:	4650      	mov	r0, sl
 800f0f4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f168 <__kernel_rem_pio2+0x318>
 800f0f8:	f000 fb8a 	bl	800f810 <scalbn>
 800f0fc:	1c6b      	adds	r3, r5, #1
 800f0fe:	00da      	lsls	r2, r3, #3
 800f100:	9205      	str	r2, [sp, #20]
 800f102:	ec57 6b10 	vmov	r6, r7, d0
 800f106:	aa70      	add	r2, sp, #448	; 0x1c0
 800f108:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f17c <__kernel_rem_pio2+0x32c>
 800f10c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f110:	462c      	mov	r4, r5
 800f112:	f04f 0800 	mov.w	r8, #0
 800f116:	2c00      	cmp	r4, #0
 800f118:	f280 80d4 	bge.w	800f2c4 <__kernel_rem_pio2+0x474>
 800f11c:	462c      	mov	r4, r5
 800f11e:	2c00      	cmp	r4, #0
 800f120:	f2c0 8102 	blt.w	800f328 <__kernel_rem_pio2+0x4d8>
 800f124:	4b18      	ldr	r3, [pc, #96]	; (800f188 <__kernel_rem_pio2+0x338>)
 800f126:	461e      	mov	r6, r3
 800f128:	ab70      	add	r3, sp, #448	; 0x1c0
 800f12a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f12e:	1b2b      	subs	r3, r5, r4
 800f130:	f04f 0900 	mov.w	r9, #0
 800f134:	f04f 0a00 	mov.w	sl, #0
 800f138:	2700      	movs	r7, #0
 800f13a:	9306      	str	r3, [sp, #24]
 800f13c:	e0e6      	b.n	800f30c <__kernel_rem_pio2+0x4bc>
 800f13e:	f04f 0b02 	mov.w	fp, #2
 800f142:	e756      	b.n	800eff2 <__kernel_rem_pio2+0x1a2>
 800f144:	f8d8 3000 	ldr.w	r3, [r8]
 800f148:	bb05      	cbnz	r5, 800f18c <__kernel_rem_pio2+0x33c>
 800f14a:	b123      	cbz	r3, 800f156 <__kernel_rem_pio2+0x306>
 800f14c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f150:	f8c8 3000 	str.w	r3, [r8]
 800f154:	2301      	movs	r3, #1
 800f156:	3201      	adds	r2, #1
 800f158:	f108 0804 	add.w	r8, r8, #4
 800f15c:	461d      	mov	r5, r3
 800f15e:	e74f      	b.n	800f000 <__kernel_rem_pio2+0x1b0>
	...
 800f16c:	3ff00000 	.word	0x3ff00000
 800f170:	080104a0 	.word	0x080104a0
 800f174:	40200000 	.word	0x40200000
 800f178:	3ff00000 	.word	0x3ff00000
 800f17c:	3e700000 	.word	0x3e700000
 800f180:	41700000 	.word	0x41700000
 800f184:	3fe00000 	.word	0x3fe00000
 800f188:	08010460 	.word	0x08010460
 800f18c:	1acb      	subs	r3, r1, r3
 800f18e:	f8c8 3000 	str.w	r3, [r8]
 800f192:	462b      	mov	r3, r5
 800f194:	e7df      	b.n	800f156 <__kernel_rem_pio2+0x306>
 800f196:	1e62      	subs	r2, r4, #1
 800f198:	ab0c      	add	r3, sp, #48	; 0x30
 800f19a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f19e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1a2:	a90c      	add	r1, sp, #48	; 0x30
 800f1a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f1a8:	e738      	b.n	800f01c <__kernel_rem_pio2+0x1cc>
 800f1aa:	1e62      	subs	r2, r4, #1
 800f1ac:	ab0c      	add	r3, sp, #48	; 0x30
 800f1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1b2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f1b6:	e7f4      	b.n	800f1a2 <__kernel_rem_pio2+0x352>
 800f1b8:	a90c      	add	r1, sp, #48	; 0x30
 800f1ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	e788      	b.n	800f0d6 <__kernel_rem_pio2+0x286>
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f1ca:	2900      	cmp	r1, #0
 800f1cc:	d0fa      	beq.n	800f1c4 <__kernel_rem_pio2+0x374>
 800f1ce:	9a08      	ldr	r2, [sp, #32]
 800f1d0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f1d4:	446a      	add	r2, sp
 800f1d6:	3a98      	subs	r2, #152	; 0x98
 800f1d8:	9208      	str	r2, [sp, #32]
 800f1da:	9a06      	ldr	r2, [sp, #24]
 800f1dc:	a920      	add	r1, sp, #128	; 0x80
 800f1de:	18a2      	adds	r2, r4, r2
 800f1e0:	18e3      	adds	r3, r4, r3
 800f1e2:	f104 0801 	add.w	r8, r4, #1
 800f1e6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f1ea:	9302      	str	r3, [sp, #8]
 800f1ec:	9b02      	ldr	r3, [sp, #8]
 800f1ee:	4543      	cmp	r3, r8
 800f1f0:	da04      	bge.n	800f1fc <__kernel_rem_pio2+0x3ac>
 800f1f2:	461c      	mov	r4, r3
 800f1f4:	e6a2      	b.n	800ef3c <__kernel_rem_pio2+0xec>
 800f1f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e7e4      	b.n	800f1c6 <__kernel_rem_pio2+0x376>
 800f1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1fe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f202:	f7f1 f98f 	bl	8000524 <__aeabi_i2d>
 800f206:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f20c:	46ab      	mov	fp, r5
 800f20e:	461c      	mov	r4, r3
 800f210:	f04f 0900 	mov.w	r9, #0
 800f214:	2600      	movs	r6, #0
 800f216:	2700      	movs	r7, #0
 800f218:	9b05      	ldr	r3, [sp, #20]
 800f21a:	4599      	cmp	r9, r3
 800f21c:	dd06      	ble.n	800f22c <__kernel_rem_pio2+0x3dc>
 800f21e:	9b08      	ldr	r3, [sp, #32]
 800f220:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f224:	f108 0801 	add.w	r8, r8, #1
 800f228:	9308      	str	r3, [sp, #32]
 800f22a:	e7df      	b.n	800f1ec <__kernel_rem_pio2+0x39c>
 800f22c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f230:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f234:	f7f1 f9e0 	bl	80005f8 <__aeabi_dmul>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4630      	mov	r0, r6
 800f23e:	4639      	mov	r1, r7
 800f240:	f7f1 f824 	bl	800028c <__adddf3>
 800f244:	f109 0901 	add.w	r9, r9, #1
 800f248:	4606      	mov	r6, r0
 800f24a:	460f      	mov	r7, r1
 800f24c:	e7e4      	b.n	800f218 <__kernel_rem_pio2+0x3c8>
 800f24e:	3d01      	subs	r5, #1
 800f250:	e747      	b.n	800f0e2 <__kernel_rem_pio2+0x292>
 800f252:	ec47 6b10 	vmov	d0, r6, r7
 800f256:	f1ca 0000 	rsb	r0, sl, #0
 800f25a:	f000 fad9 	bl	800f810 <scalbn>
 800f25e:	ec57 6b10 	vmov	r6, r7, d0
 800f262:	4ba0      	ldr	r3, [pc, #640]	; (800f4e4 <__kernel_rem_pio2+0x694>)
 800f264:	ee10 0a10 	vmov	r0, s0
 800f268:	2200      	movs	r2, #0
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7f1 fc4a 	bl	8000b04 <__aeabi_dcmpge>
 800f270:	b1f8      	cbz	r0, 800f2b2 <__kernel_rem_pio2+0x462>
 800f272:	4b9d      	ldr	r3, [pc, #628]	; (800f4e8 <__kernel_rem_pio2+0x698>)
 800f274:	2200      	movs	r2, #0
 800f276:	4630      	mov	r0, r6
 800f278:	4639      	mov	r1, r7
 800f27a:	f7f1 f9bd 	bl	80005f8 <__aeabi_dmul>
 800f27e:	f7f1 fc6b 	bl	8000b58 <__aeabi_d2iz>
 800f282:	4680      	mov	r8, r0
 800f284:	f7f1 f94e 	bl	8000524 <__aeabi_i2d>
 800f288:	4b96      	ldr	r3, [pc, #600]	; (800f4e4 <__kernel_rem_pio2+0x694>)
 800f28a:	2200      	movs	r2, #0
 800f28c:	f7f1 f9b4 	bl	80005f8 <__aeabi_dmul>
 800f290:	460b      	mov	r3, r1
 800f292:	4602      	mov	r2, r0
 800f294:	4639      	mov	r1, r7
 800f296:	4630      	mov	r0, r6
 800f298:	f7f0 fff6 	bl	8000288 <__aeabi_dsub>
 800f29c:	f7f1 fc5c 	bl	8000b58 <__aeabi_d2iz>
 800f2a0:	1c65      	adds	r5, r4, #1
 800f2a2:	ab0c      	add	r3, sp, #48	; 0x30
 800f2a4:	f10a 0a18 	add.w	sl, sl, #24
 800f2a8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f2ac:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f2b0:	e71f      	b.n	800f0f2 <__kernel_rem_pio2+0x2a2>
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	f7f1 fc4f 	bl	8000b58 <__aeabi_d2iz>
 800f2ba:	ab0c      	add	r3, sp, #48	; 0x30
 800f2bc:	4625      	mov	r5, r4
 800f2be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f2c2:	e716      	b.n	800f0f2 <__kernel_rem_pio2+0x2a2>
 800f2c4:	ab0c      	add	r3, sp, #48	; 0x30
 800f2c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f2ca:	f7f1 f92b 	bl	8000524 <__aeabi_i2d>
 800f2ce:	4632      	mov	r2, r6
 800f2d0:	463b      	mov	r3, r7
 800f2d2:	f7f1 f991 	bl	80005f8 <__aeabi_dmul>
 800f2d6:	4642      	mov	r2, r8
 800f2d8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f2dc:	464b      	mov	r3, r9
 800f2de:	4630      	mov	r0, r6
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	f7f1 f989 	bl	80005f8 <__aeabi_dmul>
 800f2e6:	3c01      	subs	r4, #1
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	460f      	mov	r7, r1
 800f2ec:	e713      	b.n	800f116 <__kernel_rem_pio2+0x2c6>
 800f2ee:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f2f2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f2f6:	f7f1 f97f 	bl	80005f8 <__aeabi_dmul>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	4648      	mov	r0, r9
 800f300:	4651      	mov	r1, sl
 800f302:	f7f0 ffc3 	bl	800028c <__adddf3>
 800f306:	3701      	adds	r7, #1
 800f308:	4681      	mov	r9, r0
 800f30a:	468a      	mov	sl, r1
 800f30c:	9b00      	ldr	r3, [sp, #0]
 800f30e:	429f      	cmp	r7, r3
 800f310:	dc02      	bgt.n	800f318 <__kernel_rem_pio2+0x4c8>
 800f312:	9b06      	ldr	r3, [sp, #24]
 800f314:	429f      	cmp	r7, r3
 800f316:	ddea      	ble.n	800f2ee <__kernel_rem_pio2+0x49e>
 800f318:	9a06      	ldr	r2, [sp, #24]
 800f31a:	ab48      	add	r3, sp, #288	; 0x120
 800f31c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f320:	e9c6 9a00 	strd	r9, sl, [r6]
 800f324:	3c01      	subs	r4, #1
 800f326:	e6fa      	b.n	800f11e <__kernel_rem_pio2+0x2ce>
 800f328:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	dc0b      	bgt.n	800f346 <__kernel_rem_pio2+0x4f6>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dc39      	bgt.n	800f3a6 <__kernel_rem_pio2+0x556>
 800f332:	d05d      	beq.n	800f3f0 <__kernel_rem_pio2+0x5a0>
 800f334:	9b02      	ldr	r3, [sp, #8]
 800f336:	f003 0007 	and.w	r0, r3, #7
 800f33a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f33e:	ecbd 8b02 	vpop	{d8}
 800f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f346:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f348:	2b03      	cmp	r3, #3
 800f34a:	d1f3      	bne.n	800f334 <__kernel_rem_pio2+0x4e4>
 800f34c:	9b05      	ldr	r3, [sp, #20]
 800f34e:	9500      	str	r5, [sp, #0]
 800f350:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f354:	eb0d 0403 	add.w	r4, sp, r3
 800f358:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f35c:	46a2      	mov	sl, r4
 800f35e:	9b00      	ldr	r3, [sp, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	f1aa 0a08 	sub.w	sl, sl, #8
 800f366:	dc69      	bgt.n	800f43c <__kernel_rem_pio2+0x5ec>
 800f368:	46aa      	mov	sl, r5
 800f36a:	f1ba 0f01 	cmp.w	sl, #1
 800f36e:	f1a4 0408 	sub.w	r4, r4, #8
 800f372:	f300 8083 	bgt.w	800f47c <__kernel_rem_pio2+0x62c>
 800f376:	9c05      	ldr	r4, [sp, #20]
 800f378:	ab48      	add	r3, sp, #288	; 0x120
 800f37a:	441c      	add	r4, r3
 800f37c:	2000      	movs	r0, #0
 800f37e:	2100      	movs	r1, #0
 800f380:	2d01      	cmp	r5, #1
 800f382:	f300 809a 	bgt.w	800f4ba <__kernel_rem_pio2+0x66a>
 800f386:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f38a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f38e:	f1bb 0f00 	cmp.w	fp, #0
 800f392:	f040 8098 	bne.w	800f4c6 <__kernel_rem_pio2+0x676>
 800f396:	9b04      	ldr	r3, [sp, #16]
 800f398:	e9c3 7800 	strd	r7, r8, [r3]
 800f39c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f3a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f3a4:	e7c6      	b.n	800f334 <__kernel_rem_pio2+0x4e4>
 800f3a6:	9e05      	ldr	r6, [sp, #20]
 800f3a8:	ab48      	add	r3, sp, #288	; 0x120
 800f3aa:	441e      	add	r6, r3
 800f3ac:	462c      	mov	r4, r5
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	2c00      	cmp	r4, #0
 800f3b4:	da33      	bge.n	800f41e <__kernel_rem_pio2+0x5ce>
 800f3b6:	f1bb 0f00 	cmp.w	fp, #0
 800f3ba:	d036      	beq.n	800f42a <__kernel_rem_pio2+0x5da>
 800f3bc:	4602      	mov	r2, r0
 800f3be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3c2:	9c04      	ldr	r4, [sp, #16]
 800f3c4:	e9c4 2300 	strd	r2, r3, [r4]
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f3d0:	f7f0 ff5a 	bl	8000288 <__aeabi_dsub>
 800f3d4:	ae4a      	add	r6, sp, #296	; 0x128
 800f3d6:	2401      	movs	r4, #1
 800f3d8:	42a5      	cmp	r5, r4
 800f3da:	da29      	bge.n	800f430 <__kernel_rem_pio2+0x5e0>
 800f3dc:	f1bb 0f00 	cmp.w	fp, #0
 800f3e0:	d002      	beq.n	800f3e8 <__kernel_rem_pio2+0x598>
 800f3e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f3ee:	e7a1      	b.n	800f334 <__kernel_rem_pio2+0x4e4>
 800f3f0:	9c05      	ldr	r4, [sp, #20]
 800f3f2:	ab48      	add	r3, sp, #288	; 0x120
 800f3f4:	441c      	add	r4, r3
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	2d00      	cmp	r5, #0
 800f3fc:	da09      	bge.n	800f412 <__kernel_rem_pio2+0x5c2>
 800f3fe:	f1bb 0f00 	cmp.w	fp, #0
 800f402:	d002      	beq.n	800f40a <__kernel_rem_pio2+0x5ba>
 800f404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f408:	4619      	mov	r1, r3
 800f40a:	9b04      	ldr	r3, [sp, #16]
 800f40c:	e9c3 0100 	strd	r0, r1, [r3]
 800f410:	e790      	b.n	800f334 <__kernel_rem_pio2+0x4e4>
 800f412:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f416:	f7f0 ff39 	bl	800028c <__adddf3>
 800f41a:	3d01      	subs	r5, #1
 800f41c:	e7ed      	b.n	800f3fa <__kernel_rem_pio2+0x5aa>
 800f41e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f422:	f7f0 ff33 	bl	800028c <__adddf3>
 800f426:	3c01      	subs	r4, #1
 800f428:	e7c3      	b.n	800f3b2 <__kernel_rem_pio2+0x562>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	e7c8      	b.n	800f3c2 <__kernel_rem_pio2+0x572>
 800f430:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f434:	f7f0 ff2a 	bl	800028c <__adddf3>
 800f438:	3401      	adds	r4, #1
 800f43a:	e7cd      	b.n	800f3d8 <__kernel_rem_pio2+0x588>
 800f43c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f440:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f444:	9b00      	ldr	r3, [sp, #0]
 800f446:	3b01      	subs	r3, #1
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	4632      	mov	r2, r6
 800f44c:	463b      	mov	r3, r7
 800f44e:	4640      	mov	r0, r8
 800f450:	4649      	mov	r1, r9
 800f452:	f7f0 ff1b 	bl	800028c <__adddf3>
 800f456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f45a:	4602      	mov	r2, r0
 800f45c:	460b      	mov	r3, r1
 800f45e:	4640      	mov	r0, r8
 800f460:	4649      	mov	r1, r9
 800f462:	f7f0 ff11 	bl	8000288 <__aeabi_dsub>
 800f466:	4632      	mov	r2, r6
 800f468:	463b      	mov	r3, r7
 800f46a:	f7f0 ff0f 	bl	800028c <__adddf3>
 800f46e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f472:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f476:	ed8a 7b00 	vstr	d7, [sl]
 800f47a:	e770      	b.n	800f35e <__kernel_rem_pio2+0x50e>
 800f47c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f480:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f484:	4640      	mov	r0, r8
 800f486:	4632      	mov	r2, r6
 800f488:	463b      	mov	r3, r7
 800f48a:	4649      	mov	r1, r9
 800f48c:	f7f0 fefe 	bl	800028c <__adddf3>
 800f490:	e9cd 0100 	strd	r0, r1, [sp]
 800f494:	4602      	mov	r2, r0
 800f496:	460b      	mov	r3, r1
 800f498:	4640      	mov	r0, r8
 800f49a:	4649      	mov	r1, r9
 800f49c:	f7f0 fef4 	bl	8000288 <__aeabi_dsub>
 800f4a0:	4632      	mov	r2, r6
 800f4a2:	463b      	mov	r3, r7
 800f4a4:	f7f0 fef2 	bl	800028c <__adddf3>
 800f4a8:	ed9d 7b00 	vldr	d7, [sp]
 800f4ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f4b0:	ed84 7b00 	vstr	d7, [r4]
 800f4b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f4b8:	e757      	b.n	800f36a <__kernel_rem_pio2+0x51a>
 800f4ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f4be:	f7f0 fee5 	bl	800028c <__adddf3>
 800f4c2:	3d01      	subs	r5, #1
 800f4c4:	e75c      	b.n	800f380 <__kernel_rem_pio2+0x530>
 800f4c6:	9b04      	ldr	r3, [sp, #16]
 800f4c8:	9a04      	ldr	r2, [sp, #16]
 800f4ca:	601f      	str	r7, [r3, #0]
 800f4cc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f4d0:	605c      	str	r4, [r3, #4]
 800f4d2:	609d      	str	r5, [r3, #8]
 800f4d4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f4d8:	60d3      	str	r3, [r2, #12]
 800f4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4de:	6110      	str	r0, [r2, #16]
 800f4e0:	6153      	str	r3, [r2, #20]
 800f4e2:	e727      	b.n	800f334 <__kernel_rem_pio2+0x4e4>
 800f4e4:	41700000 	.word	0x41700000
 800f4e8:	3e700000 	.word	0x3e700000
 800f4ec:	00000000 	.word	0x00000000

0800f4f0 <__kernel_cos>:
 800f4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	ec57 6b10 	vmov	r6, r7, d0
 800f4f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f4fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f500:	ed8d 1b00 	vstr	d1, [sp]
 800f504:	da07      	bge.n	800f516 <__kernel_cos+0x26>
 800f506:	ee10 0a10 	vmov	r0, s0
 800f50a:	4639      	mov	r1, r7
 800f50c:	f7f1 fb24 	bl	8000b58 <__aeabi_d2iz>
 800f510:	2800      	cmp	r0, #0
 800f512:	f000 8088 	beq.w	800f626 <__kernel_cos+0x136>
 800f516:	4632      	mov	r2, r6
 800f518:	463b      	mov	r3, r7
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 f86b 	bl	80005f8 <__aeabi_dmul>
 800f522:	4b51      	ldr	r3, [pc, #324]	; (800f668 <__kernel_cos+0x178>)
 800f524:	2200      	movs	r2, #0
 800f526:	4604      	mov	r4, r0
 800f528:	460d      	mov	r5, r1
 800f52a:	f7f1 f865 	bl	80005f8 <__aeabi_dmul>
 800f52e:	a340      	add	r3, pc, #256	; (adr r3, 800f630 <__kernel_cos+0x140>)
 800f530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f534:	4682      	mov	sl, r0
 800f536:	468b      	mov	fp, r1
 800f538:	4620      	mov	r0, r4
 800f53a:	4629      	mov	r1, r5
 800f53c:	f7f1 f85c 	bl	80005f8 <__aeabi_dmul>
 800f540:	a33d      	add	r3, pc, #244	; (adr r3, 800f638 <__kernel_cos+0x148>)
 800f542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f546:	f7f0 fea1 	bl	800028c <__adddf3>
 800f54a:	4622      	mov	r2, r4
 800f54c:	462b      	mov	r3, r5
 800f54e:	f7f1 f853 	bl	80005f8 <__aeabi_dmul>
 800f552:	a33b      	add	r3, pc, #236	; (adr r3, 800f640 <__kernel_cos+0x150>)
 800f554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f558:	f7f0 fe96 	bl	8000288 <__aeabi_dsub>
 800f55c:	4622      	mov	r2, r4
 800f55e:	462b      	mov	r3, r5
 800f560:	f7f1 f84a 	bl	80005f8 <__aeabi_dmul>
 800f564:	a338      	add	r3, pc, #224	; (adr r3, 800f648 <__kernel_cos+0x158>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f0 fe8f 	bl	800028c <__adddf3>
 800f56e:	4622      	mov	r2, r4
 800f570:	462b      	mov	r3, r5
 800f572:	f7f1 f841 	bl	80005f8 <__aeabi_dmul>
 800f576:	a336      	add	r3, pc, #216	; (adr r3, 800f650 <__kernel_cos+0x160>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f0 fe84 	bl	8000288 <__aeabi_dsub>
 800f580:	4622      	mov	r2, r4
 800f582:	462b      	mov	r3, r5
 800f584:	f7f1 f838 	bl	80005f8 <__aeabi_dmul>
 800f588:	a333      	add	r3, pc, #204	; (adr r3, 800f658 <__kernel_cos+0x168>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe7d 	bl	800028c <__adddf3>
 800f592:	4622      	mov	r2, r4
 800f594:	462b      	mov	r3, r5
 800f596:	f7f1 f82f 	bl	80005f8 <__aeabi_dmul>
 800f59a:	4622      	mov	r2, r4
 800f59c:	462b      	mov	r3, r5
 800f59e:	f7f1 f82b 	bl	80005f8 <__aeabi_dmul>
 800f5a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f1 f823 	bl	80005f8 <__aeabi_dmul>
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	4629      	mov	r1, r5
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7f0 fe65 	bl	8000288 <__aeabi_dsub>
 800f5be:	4b2b      	ldr	r3, [pc, #172]	; (800f66c <__kernel_cos+0x17c>)
 800f5c0:	4598      	cmp	r8, r3
 800f5c2:	4606      	mov	r6, r0
 800f5c4:	460f      	mov	r7, r1
 800f5c6:	dc10      	bgt.n	800f5ea <__kernel_cos+0xfa>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	4650      	mov	r0, sl
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	f7f0 fe5a 	bl	8000288 <__aeabi_dsub>
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	4926      	ldr	r1, [pc, #152]	; (800f670 <__kernel_cos+0x180>)
 800f5d8:	4602      	mov	r2, r0
 800f5da:	2000      	movs	r0, #0
 800f5dc:	f7f0 fe54 	bl	8000288 <__aeabi_dsub>
 800f5e0:	ec41 0b10 	vmov	d0, r0, r1
 800f5e4:	b003      	add	sp, #12
 800f5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ea:	4b22      	ldr	r3, [pc, #136]	; (800f674 <__kernel_cos+0x184>)
 800f5ec:	4920      	ldr	r1, [pc, #128]	; (800f670 <__kernel_cos+0x180>)
 800f5ee:	4598      	cmp	r8, r3
 800f5f0:	bfcc      	ite	gt
 800f5f2:	4d21      	ldrgt	r5, [pc, #132]	; (800f678 <__kernel_cos+0x188>)
 800f5f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f5f8:	2400      	movs	r4, #0
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	462b      	mov	r3, r5
 800f5fe:	2000      	movs	r0, #0
 800f600:	f7f0 fe42 	bl	8000288 <__aeabi_dsub>
 800f604:	4622      	mov	r2, r4
 800f606:	4680      	mov	r8, r0
 800f608:	4689      	mov	r9, r1
 800f60a:	462b      	mov	r3, r5
 800f60c:	4650      	mov	r0, sl
 800f60e:	4659      	mov	r1, fp
 800f610:	f7f0 fe3a 	bl	8000288 <__aeabi_dsub>
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	f7f0 fe36 	bl	8000288 <__aeabi_dsub>
 800f61c:	4602      	mov	r2, r0
 800f61e:	460b      	mov	r3, r1
 800f620:	4640      	mov	r0, r8
 800f622:	4649      	mov	r1, r9
 800f624:	e7da      	b.n	800f5dc <__kernel_cos+0xec>
 800f626:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f660 <__kernel_cos+0x170>
 800f62a:	e7db      	b.n	800f5e4 <__kernel_cos+0xf4>
 800f62c:	f3af 8000 	nop.w
 800f630:	be8838d4 	.word	0xbe8838d4
 800f634:	bda8fae9 	.word	0xbda8fae9
 800f638:	bdb4b1c4 	.word	0xbdb4b1c4
 800f63c:	3e21ee9e 	.word	0x3e21ee9e
 800f640:	809c52ad 	.word	0x809c52ad
 800f644:	3e927e4f 	.word	0x3e927e4f
 800f648:	19cb1590 	.word	0x19cb1590
 800f64c:	3efa01a0 	.word	0x3efa01a0
 800f650:	16c15177 	.word	0x16c15177
 800f654:	3f56c16c 	.word	0x3f56c16c
 800f658:	5555554c 	.word	0x5555554c
 800f65c:	3fa55555 	.word	0x3fa55555
 800f660:	00000000 	.word	0x00000000
 800f664:	3ff00000 	.word	0x3ff00000
 800f668:	3fe00000 	.word	0x3fe00000
 800f66c:	3fd33332 	.word	0x3fd33332
 800f670:	3ff00000 	.word	0x3ff00000
 800f674:	3fe90000 	.word	0x3fe90000
 800f678:	3fd20000 	.word	0x3fd20000
 800f67c:	00000000 	.word	0x00000000

0800f680 <__kernel_sin>:
 800f680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f684:	ed2d 8b04 	vpush	{d8-d9}
 800f688:	eeb0 8a41 	vmov.f32	s16, s2
 800f68c:	eef0 8a61 	vmov.f32	s17, s3
 800f690:	ec55 4b10 	vmov	r4, r5, d0
 800f694:	b083      	sub	sp, #12
 800f696:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f69a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f69e:	9001      	str	r0, [sp, #4]
 800f6a0:	da06      	bge.n	800f6b0 <__kernel_sin+0x30>
 800f6a2:	ee10 0a10 	vmov	r0, s0
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	f7f1 fa56 	bl	8000b58 <__aeabi_d2iz>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d051      	beq.n	800f754 <__kernel_sin+0xd4>
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	462b      	mov	r3, r5
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	f7f0 ff9e 	bl	80005f8 <__aeabi_dmul>
 800f6bc:	4682      	mov	sl, r0
 800f6be:	468b      	mov	fp, r1
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f7f0 ff96 	bl	80005f8 <__aeabi_dmul>
 800f6cc:	a341      	add	r3, pc, #260	; (adr r3, 800f7d4 <__kernel_sin+0x154>)
 800f6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d2:	4680      	mov	r8, r0
 800f6d4:	4689      	mov	r9, r1
 800f6d6:	4650      	mov	r0, sl
 800f6d8:	4659      	mov	r1, fp
 800f6da:	f7f0 ff8d 	bl	80005f8 <__aeabi_dmul>
 800f6de:	a33f      	add	r3, pc, #252	; (adr r3, 800f7dc <__kernel_sin+0x15c>)
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	f7f0 fdd0 	bl	8000288 <__aeabi_dsub>
 800f6e8:	4652      	mov	r2, sl
 800f6ea:	465b      	mov	r3, fp
 800f6ec:	f7f0 ff84 	bl	80005f8 <__aeabi_dmul>
 800f6f0:	a33c      	add	r3, pc, #240	; (adr r3, 800f7e4 <__kernel_sin+0x164>)
 800f6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f6:	f7f0 fdc9 	bl	800028c <__adddf3>
 800f6fa:	4652      	mov	r2, sl
 800f6fc:	465b      	mov	r3, fp
 800f6fe:	f7f0 ff7b 	bl	80005f8 <__aeabi_dmul>
 800f702:	a33a      	add	r3, pc, #232	; (adr r3, 800f7ec <__kernel_sin+0x16c>)
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	f7f0 fdbe 	bl	8000288 <__aeabi_dsub>
 800f70c:	4652      	mov	r2, sl
 800f70e:	465b      	mov	r3, fp
 800f710:	f7f0 ff72 	bl	80005f8 <__aeabi_dmul>
 800f714:	a337      	add	r3, pc, #220	; (adr r3, 800f7f4 <__kernel_sin+0x174>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	f7f0 fdb7 	bl	800028c <__adddf3>
 800f71e:	9b01      	ldr	r3, [sp, #4]
 800f720:	4606      	mov	r6, r0
 800f722:	460f      	mov	r7, r1
 800f724:	b9eb      	cbnz	r3, 800f762 <__kernel_sin+0xe2>
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4650      	mov	r0, sl
 800f72c:	4659      	mov	r1, fp
 800f72e:	f7f0 ff63 	bl	80005f8 <__aeabi_dmul>
 800f732:	a325      	add	r3, pc, #148	; (adr r3, 800f7c8 <__kernel_sin+0x148>)
 800f734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f738:	f7f0 fda6 	bl	8000288 <__aeabi_dsub>
 800f73c:	4642      	mov	r2, r8
 800f73e:	464b      	mov	r3, r9
 800f740:	f7f0 ff5a 	bl	80005f8 <__aeabi_dmul>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4620      	mov	r0, r4
 800f74a:	4629      	mov	r1, r5
 800f74c:	f7f0 fd9e 	bl	800028c <__adddf3>
 800f750:	4604      	mov	r4, r0
 800f752:	460d      	mov	r5, r1
 800f754:	ec45 4b10 	vmov	d0, r4, r5
 800f758:	b003      	add	sp, #12
 800f75a:	ecbd 8b04 	vpop	{d8-d9}
 800f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f762:	4b1b      	ldr	r3, [pc, #108]	; (800f7d0 <__kernel_sin+0x150>)
 800f764:	ec51 0b18 	vmov	r0, r1, d8
 800f768:	2200      	movs	r2, #0
 800f76a:	f7f0 ff45 	bl	80005f8 <__aeabi_dmul>
 800f76e:	4632      	mov	r2, r6
 800f770:	ec41 0b19 	vmov	d9, r0, r1
 800f774:	463b      	mov	r3, r7
 800f776:	4640      	mov	r0, r8
 800f778:	4649      	mov	r1, r9
 800f77a:	f7f0 ff3d 	bl	80005f8 <__aeabi_dmul>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	ec51 0b19 	vmov	r0, r1, d9
 800f786:	f7f0 fd7f 	bl	8000288 <__aeabi_dsub>
 800f78a:	4652      	mov	r2, sl
 800f78c:	465b      	mov	r3, fp
 800f78e:	f7f0 ff33 	bl	80005f8 <__aeabi_dmul>
 800f792:	ec53 2b18 	vmov	r2, r3, d8
 800f796:	f7f0 fd77 	bl	8000288 <__aeabi_dsub>
 800f79a:	a30b      	add	r3, pc, #44	; (adr r3, 800f7c8 <__kernel_sin+0x148>)
 800f79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a0:	4606      	mov	r6, r0
 800f7a2:	460f      	mov	r7, r1
 800f7a4:	4640      	mov	r0, r8
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	f7f0 ff26 	bl	80005f8 <__aeabi_dmul>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	4639      	mov	r1, r7
 800f7b4:	f7f0 fd6a 	bl	800028c <__adddf3>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	460b      	mov	r3, r1
 800f7bc:	4620      	mov	r0, r4
 800f7be:	4629      	mov	r1, r5
 800f7c0:	f7f0 fd62 	bl	8000288 <__aeabi_dsub>
 800f7c4:	e7c4      	b.n	800f750 <__kernel_sin+0xd0>
 800f7c6:	bf00      	nop
 800f7c8:	55555549 	.word	0x55555549
 800f7cc:	3fc55555 	.word	0x3fc55555
 800f7d0:	3fe00000 	.word	0x3fe00000
 800f7d4:	5acfd57c 	.word	0x5acfd57c
 800f7d8:	3de5d93a 	.word	0x3de5d93a
 800f7dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800f7e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f7e4:	57b1fe7d 	.word	0x57b1fe7d
 800f7e8:	3ec71de3 	.word	0x3ec71de3
 800f7ec:	19c161d5 	.word	0x19c161d5
 800f7f0:	3f2a01a0 	.word	0x3f2a01a0
 800f7f4:	1110f8a6 	.word	0x1110f8a6
 800f7f8:	3f811111 	.word	0x3f811111

0800f7fc <fabs>:
 800f7fc:	ec51 0b10 	vmov	r0, r1, d0
 800f800:	ee10 2a10 	vmov	r2, s0
 800f804:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f808:	ec43 2b10 	vmov	d0, r2, r3
 800f80c:	4770      	bx	lr
	...

0800f810 <scalbn>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	ec55 4b10 	vmov	r4, r5, d0
 800f816:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f81a:	4606      	mov	r6, r0
 800f81c:	462b      	mov	r3, r5
 800f81e:	b999      	cbnz	r1, 800f848 <scalbn+0x38>
 800f820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f824:	4323      	orrs	r3, r4
 800f826:	d03f      	beq.n	800f8a8 <scalbn+0x98>
 800f828:	4b35      	ldr	r3, [pc, #212]	; (800f900 <scalbn+0xf0>)
 800f82a:	4629      	mov	r1, r5
 800f82c:	ee10 0a10 	vmov	r0, s0
 800f830:	2200      	movs	r2, #0
 800f832:	f7f0 fee1 	bl	80005f8 <__aeabi_dmul>
 800f836:	4b33      	ldr	r3, [pc, #204]	; (800f904 <scalbn+0xf4>)
 800f838:	429e      	cmp	r6, r3
 800f83a:	4604      	mov	r4, r0
 800f83c:	460d      	mov	r5, r1
 800f83e:	da10      	bge.n	800f862 <scalbn+0x52>
 800f840:	a327      	add	r3, pc, #156	; (adr r3, 800f8e0 <scalbn+0xd0>)
 800f842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f846:	e01f      	b.n	800f888 <scalbn+0x78>
 800f848:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f84c:	4291      	cmp	r1, r2
 800f84e:	d10c      	bne.n	800f86a <scalbn+0x5a>
 800f850:	ee10 2a10 	vmov	r2, s0
 800f854:	4620      	mov	r0, r4
 800f856:	4629      	mov	r1, r5
 800f858:	f7f0 fd18 	bl	800028c <__adddf3>
 800f85c:	4604      	mov	r4, r0
 800f85e:	460d      	mov	r5, r1
 800f860:	e022      	b.n	800f8a8 <scalbn+0x98>
 800f862:	460b      	mov	r3, r1
 800f864:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f868:	3936      	subs	r1, #54	; 0x36
 800f86a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f86e:	4296      	cmp	r6, r2
 800f870:	dd0d      	ble.n	800f88e <scalbn+0x7e>
 800f872:	2d00      	cmp	r5, #0
 800f874:	a11c      	add	r1, pc, #112	; (adr r1, 800f8e8 <scalbn+0xd8>)
 800f876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f87a:	da02      	bge.n	800f882 <scalbn+0x72>
 800f87c:	a11c      	add	r1, pc, #112	; (adr r1, 800f8f0 <scalbn+0xe0>)
 800f87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f882:	a319      	add	r3, pc, #100	; (adr r3, 800f8e8 <scalbn+0xd8>)
 800f884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f888:	f7f0 feb6 	bl	80005f8 <__aeabi_dmul>
 800f88c:	e7e6      	b.n	800f85c <scalbn+0x4c>
 800f88e:	1872      	adds	r2, r6, r1
 800f890:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f894:	428a      	cmp	r2, r1
 800f896:	dcec      	bgt.n	800f872 <scalbn+0x62>
 800f898:	2a00      	cmp	r2, #0
 800f89a:	dd08      	ble.n	800f8ae <scalbn+0x9e>
 800f89c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8a8:	ec45 4b10 	vmov	d0, r4, r5
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f8b2:	da08      	bge.n	800f8c6 <scalbn+0xb6>
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	a10a      	add	r1, pc, #40	; (adr r1, 800f8e0 <scalbn+0xd0>)
 800f8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8bc:	dac0      	bge.n	800f840 <scalbn+0x30>
 800f8be:	a10e      	add	r1, pc, #56	; (adr r1, 800f8f8 <scalbn+0xe8>)
 800f8c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c4:	e7bc      	b.n	800f840 <scalbn+0x30>
 800f8c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8ca:	3236      	adds	r2, #54	; 0x36
 800f8cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	4b0c      	ldr	r3, [pc, #48]	; (800f908 <scalbn+0xf8>)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	e7d5      	b.n	800f888 <scalbn+0x78>
 800f8dc:	f3af 8000 	nop.w
 800f8e0:	c2f8f359 	.word	0xc2f8f359
 800f8e4:	01a56e1f 	.word	0x01a56e1f
 800f8e8:	8800759c 	.word	0x8800759c
 800f8ec:	7e37e43c 	.word	0x7e37e43c
 800f8f0:	8800759c 	.word	0x8800759c
 800f8f4:	fe37e43c 	.word	0xfe37e43c
 800f8f8:	c2f8f359 	.word	0xc2f8f359
 800f8fc:	81a56e1f 	.word	0x81a56e1f
 800f900:	43500000 	.word	0x43500000
 800f904:	ffff3cb0 	.word	0xffff3cb0
 800f908:	3c900000 	.word	0x3c900000
 800f90c:	00000000 	.word	0x00000000

0800f910 <floor>:
 800f910:	ec51 0b10 	vmov	r0, r1, d0
 800f914:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f91c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f920:	2e13      	cmp	r6, #19
 800f922:	ee10 5a10 	vmov	r5, s0
 800f926:	ee10 8a10 	vmov	r8, s0
 800f92a:	460c      	mov	r4, r1
 800f92c:	dc31      	bgt.n	800f992 <floor+0x82>
 800f92e:	2e00      	cmp	r6, #0
 800f930:	da14      	bge.n	800f95c <floor+0x4c>
 800f932:	a333      	add	r3, pc, #204	; (adr r3, 800fa00 <floor+0xf0>)
 800f934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f938:	f7f0 fca8 	bl	800028c <__adddf3>
 800f93c:	2200      	movs	r2, #0
 800f93e:	2300      	movs	r3, #0
 800f940:	f7f1 f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 800f944:	b138      	cbz	r0, 800f956 <floor+0x46>
 800f946:	2c00      	cmp	r4, #0
 800f948:	da53      	bge.n	800f9f2 <floor+0xe2>
 800f94a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f94e:	4325      	orrs	r5, r4
 800f950:	d052      	beq.n	800f9f8 <floor+0xe8>
 800f952:	4c2d      	ldr	r4, [pc, #180]	; (800fa08 <floor+0xf8>)
 800f954:	2500      	movs	r5, #0
 800f956:	4621      	mov	r1, r4
 800f958:	4628      	mov	r0, r5
 800f95a:	e024      	b.n	800f9a6 <floor+0x96>
 800f95c:	4f2b      	ldr	r7, [pc, #172]	; (800fa0c <floor+0xfc>)
 800f95e:	4137      	asrs	r7, r6
 800f960:	ea01 0307 	and.w	r3, r1, r7
 800f964:	4303      	orrs	r3, r0
 800f966:	d01e      	beq.n	800f9a6 <floor+0x96>
 800f968:	a325      	add	r3, pc, #148	; (adr r3, 800fa00 <floor+0xf0>)
 800f96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f96e:	f7f0 fc8d 	bl	800028c <__adddf3>
 800f972:	2200      	movs	r2, #0
 800f974:	2300      	movs	r3, #0
 800f976:	f7f1 f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d0eb      	beq.n	800f956 <floor+0x46>
 800f97e:	2c00      	cmp	r4, #0
 800f980:	bfbe      	ittt	lt
 800f982:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f986:	4133      	asrlt	r3, r6
 800f988:	18e4      	addlt	r4, r4, r3
 800f98a:	ea24 0407 	bic.w	r4, r4, r7
 800f98e:	2500      	movs	r5, #0
 800f990:	e7e1      	b.n	800f956 <floor+0x46>
 800f992:	2e33      	cmp	r6, #51	; 0x33
 800f994:	dd0b      	ble.n	800f9ae <floor+0x9e>
 800f996:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f99a:	d104      	bne.n	800f9a6 <floor+0x96>
 800f99c:	ee10 2a10 	vmov	r2, s0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	f7f0 fc73 	bl	800028c <__adddf3>
 800f9a6:	ec41 0b10 	vmov	d0, r0, r1
 800f9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f9b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f9b6:	40df      	lsrs	r7, r3
 800f9b8:	4238      	tst	r0, r7
 800f9ba:	d0f4      	beq.n	800f9a6 <floor+0x96>
 800f9bc:	a310      	add	r3, pc, #64	; (adr r3, 800fa00 <floor+0xf0>)
 800f9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c2:	f7f0 fc63 	bl	800028c <__adddf3>
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f7f1 f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d0c1      	beq.n	800f956 <floor+0x46>
 800f9d2:	2c00      	cmp	r4, #0
 800f9d4:	da0a      	bge.n	800f9ec <floor+0xdc>
 800f9d6:	2e14      	cmp	r6, #20
 800f9d8:	d101      	bne.n	800f9de <floor+0xce>
 800f9da:	3401      	adds	r4, #1
 800f9dc:	e006      	b.n	800f9ec <floor+0xdc>
 800f9de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	40b3      	lsls	r3, r6
 800f9e6:	441d      	add	r5, r3
 800f9e8:	45a8      	cmp	r8, r5
 800f9ea:	d8f6      	bhi.n	800f9da <floor+0xca>
 800f9ec:	ea25 0507 	bic.w	r5, r5, r7
 800f9f0:	e7b1      	b.n	800f956 <floor+0x46>
 800f9f2:	2500      	movs	r5, #0
 800f9f4:	462c      	mov	r4, r5
 800f9f6:	e7ae      	b.n	800f956 <floor+0x46>
 800f9f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f9fc:	e7ab      	b.n	800f956 <floor+0x46>
 800f9fe:	bf00      	nop
 800fa00:	8800759c 	.word	0x8800759c
 800fa04:	7e37e43c 	.word	0x7e37e43c
 800fa08:	bff00000 	.word	0xbff00000
 800fa0c:	000fffff 	.word	0x000fffff

0800fa10 <_init>:
 800fa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa12:	bf00      	nop
 800fa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa16:	bc08      	pop	{r3}
 800fa18:	469e      	mov	lr, r3
 800fa1a:	4770      	bx	lr

0800fa1c <_fini>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	bf00      	nop
 800fa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa22:	bc08      	pop	{r3}
 800fa24:	469e      	mov	lr, r3
 800fa26:	4770      	bx	lr
